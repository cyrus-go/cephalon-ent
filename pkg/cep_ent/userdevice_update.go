// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/device"
	"cephalon-ent/pkg/cep_ent/predicate"
	"cephalon-ent/pkg/cep_ent/user"
	"cephalon-ent/pkg/cep_ent/userdevice"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserDeviceUpdate is the builder for updating UserDevice entities.
type UserDeviceUpdate struct {
	config
	hooks    []Hook
	mutation *UserDeviceMutation
}

// Where appends a list predicates to the UserDeviceUpdate builder.
func (udu *UserDeviceUpdate) Where(ps ...predicate.UserDevice) *UserDeviceUpdate {
	udu.mutation.Where(ps...)
	return udu
}

// SetCreatedBy sets the "created_by" field.
func (udu *UserDeviceUpdate) SetCreatedBy(i int64) *UserDeviceUpdate {
	udu.mutation.ResetCreatedBy()
	udu.mutation.SetCreatedBy(i)
	return udu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (udu *UserDeviceUpdate) SetNillableCreatedBy(i *int64) *UserDeviceUpdate {
	if i != nil {
		udu.SetCreatedBy(*i)
	}
	return udu
}

// AddCreatedBy adds i to the "created_by" field.
func (udu *UserDeviceUpdate) AddCreatedBy(i int64) *UserDeviceUpdate {
	udu.mutation.AddCreatedBy(i)
	return udu
}

// SetUpdatedBy sets the "updated_by" field.
func (udu *UserDeviceUpdate) SetUpdatedBy(i int64) *UserDeviceUpdate {
	udu.mutation.ResetUpdatedBy()
	udu.mutation.SetUpdatedBy(i)
	return udu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (udu *UserDeviceUpdate) SetNillableUpdatedBy(i *int64) *UserDeviceUpdate {
	if i != nil {
		udu.SetUpdatedBy(*i)
	}
	return udu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (udu *UserDeviceUpdate) AddUpdatedBy(i int64) *UserDeviceUpdate {
	udu.mutation.AddUpdatedBy(i)
	return udu
}

// SetUpdatedAt sets the "updated_at" field.
func (udu *UserDeviceUpdate) SetUpdatedAt(t time.Time) *UserDeviceUpdate {
	udu.mutation.SetUpdatedAt(t)
	return udu
}

// SetDeletedAt sets the "deleted_at" field.
func (udu *UserDeviceUpdate) SetDeletedAt(t time.Time) *UserDeviceUpdate {
	udu.mutation.SetDeletedAt(t)
	return udu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (udu *UserDeviceUpdate) SetNillableDeletedAt(t *time.Time) *UserDeviceUpdate {
	if t != nil {
		udu.SetDeletedAt(*t)
	}
	return udu
}

// SetUserID sets the "user_id" field.
func (udu *UserDeviceUpdate) SetUserID(i int64) *UserDeviceUpdate {
	udu.mutation.SetUserID(i)
	return udu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (udu *UserDeviceUpdate) SetNillableUserID(i *int64) *UserDeviceUpdate {
	if i != nil {
		udu.SetUserID(*i)
	}
	return udu
}

// SetDeviceID sets the "device_id" field.
func (udu *UserDeviceUpdate) SetDeviceID(i int64) *UserDeviceUpdate {
	udu.mutation.SetDeviceID(i)
	return udu
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (udu *UserDeviceUpdate) SetNillableDeviceID(i *int64) *UserDeviceUpdate {
	if i != nil {
		udu.SetDeviceID(*i)
	}
	return udu
}

// SetUser sets the "user" edge to the User entity.
func (udu *UserDeviceUpdate) SetUser(u *User) *UserDeviceUpdate {
	return udu.SetUserID(u.ID)
}

// SetDevice sets the "device" edge to the Device entity.
func (udu *UserDeviceUpdate) SetDevice(d *Device) *UserDeviceUpdate {
	return udu.SetDeviceID(d.ID)
}

// Mutation returns the UserDeviceMutation object of the builder.
func (udu *UserDeviceUpdate) Mutation() *UserDeviceMutation {
	return udu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (udu *UserDeviceUpdate) ClearUser() *UserDeviceUpdate {
	udu.mutation.ClearUser()
	return udu
}

// ClearDevice clears the "device" edge to the Device entity.
func (udu *UserDeviceUpdate) ClearDevice() *UserDeviceUpdate {
	udu.mutation.ClearDevice()
	return udu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (udu *UserDeviceUpdate) Save(ctx context.Context) (int, error) {
	udu.defaults()
	return withHooks(ctx, udu.sqlSave, udu.mutation, udu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (udu *UserDeviceUpdate) SaveX(ctx context.Context) int {
	affected, err := udu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (udu *UserDeviceUpdate) Exec(ctx context.Context) error {
	_, err := udu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udu *UserDeviceUpdate) ExecX(ctx context.Context) {
	if err := udu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (udu *UserDeviceUpdate) defaults() {
	if _, ok := udu.mutation.UpdatedAt(); !ok {
		v := userdevice.UpdateDefaultUpdatedAt()
		udu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (udu *UserDeviceUpdate) check() error {
	if _, ok := udu.mutation.UserID(); udu.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "UserDevice.user"`)
	}
	if _, ok := udu.mutation.DeviceID(); udu.mutation.DeviceCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "UserDevice.device"`)
	}
	return nil
}

func (udu *UserDeviceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := udu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userdevice.Table, userdevice.Columns, sqlgraph.NewFieldSpec(userdevice.FieldID, field.TypeInt64))
	if ps := udu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := udu.mutation.CreatedBy(); ok {
		_spec.SetField(userdevice.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := udu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(userdevice.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := udu.mutation.UpdatedBy(); ok {
		_spec.SetField(userdevice.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := udu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(userdevice.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := udu.mutation.UpdatedAt(); ok {
		_spec.SetField(userdevice.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := udu.mutation.DeletedAt(); ok {
		_spec.SetField(userdevice.FieldDeletedAt, field.TypeTime, value)
	}
	if udu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdevice.UserTable,
			Columns: []string{userdevice.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := udu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdevice.UserTable,
			Columns: []string{userdevice.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if udu.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdevice.DeviceTable,
			Columns: []string{userdevice.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := udu.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdevice.DeviceTable,
			Columns: []string{userdevice.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, udu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userdevice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	udu.mutation.done = true
	return n, nil
}

// UserDeviceUpdateOne is the builder for updating a single UserDevice entity.
type UserDeviceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserDeviceMutation
}

// SetCreatedBy sets the "created_by" field.
func (uduo *UserDeviceUpdateOne) SetCreatedBy(i int64) *UserDeviceUpdateOne {
	uduo.mutation.ResetCreatedBy()
	uduo.mutation.SetCreatedBy(i)
	return uduo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (uduo *UserDeviceUpdateOne) SetNillableCreatedBy(i *int64) *UserDeviceUpdateOne {
	if i != nil {
		uduo.SetCreatedBy(*i)
	}
	return uduo
}

// AddCreatedBy adds i to the "created_by" field.
func (uduo *UserDeviceUpdateOne) AddCreatedBy(i int64) *UserDeviceUpdateOne {
	uduo.mutation.AddCreatedBy(i)
	return uduo
}

// SetUpdatedBy sets the "updated_by" field.
func (uduo *UserDeviceUpdateOne) SetUpdatedBy(i int64) *UserDeviceUpdateOne {
	uduo.mutation.ResetUpdatedBy()
	uduo.mutation.SetUpdatedBy(i)
	return uduo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uduo *UserDeviceUpdateOne) SetNillableUpdatedBy(i *int64) *UserDeviceUpdateOne {
	if i != nil {
		uduo.SetUpdatedBy(*i)
	}
	return uduo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (uduo *UserDeviceUpdateOne) AddUpdatedBy(i int64) *UserDeviceUpdateOne {
	uduo.mutation.AddUpdatedBy(i)
	return uduo
}

// SetUpdatedAt sets the "updated_at" field.
func (uduo *UserDeviceUpdateOne) SetUpdatedAt(t time.Time) *UserDeviceUpdateOne {
	uduo.mutation.SetUpdatedAt(t)
	return uduo
}

// SetDeletedAt sets the "deleted_at" field.
func (uduo *UserDeviceUpdateOne) SetDeletedAt(t time.Time) *UserDeviceUpdateOne {
	uduo.mutation.SetDeletedAt(t)
	return uduo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uduo *UserDeviceUpdateOne) SetNillableDeletedAt(t *time.Time) *UserDeviceUpdateOne {
	if t != nil {
		uduo.SetDeletedAt(*t)
	}
	return uduo
}

// SetUserID sets the "user_id" field.
func (uduo *UserDeviceUpdateOne) SetUserID(i int64) *UserDeviceUpdateOne {
	uduo.mutation.SetUserID(i)
	return uduo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uduo *UserDeviceUpdateOne) SetNillableUserID(i *int64) *UserDeviceUpdateOne {
	if i != nil {
		uduo.SetUserID(*i)
	}
	return uduo
}

// SetDeviceID sets the "device_id" field.
func (uduo *UserDeviceUpdateOne) SetDeviceID(i int64) *UserDeviceUpdateOne {
	uduo.mutation.SetDeviceID(i)
	return uduo
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (uduo *UserDeviceUpdateOne) SetNillableDeviceID(i *int64) *UserDeviceUpdateOne {
	if i != nil {
		uduo.SetDeviceID(*i)
	}
	return uduo
}

// SetUser sets the "user" edge to the User entity.
func (uduo *UserDeviceUpdateOne) SetUser(u *User) *UserDeviceUpdateOne {
	return uduo.SetUserID(u.ID)
}

// SetDevice sets the "device" edge to the Device entity.
func (uduo *UserDeviceUpdateOne) SetDevice(d *Device) *UserDeviceUpdateOne {
	return uduo.SetDeviceID(d.ID)
}

// Mutation returns the UserDeviceMutation object of the builder.
func (uduo *UserDeviceUpdateOne) Mutation() *UserDeviceMutation {
	return uduo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uduo *UserDeviceUpdateOne) ClearUser() *UserDeviceUpdateOne {
	uduo.mutation.ClearUser()
	return uduo
}

// ClearDevice clears the "device" edge to the Device entity.
func (uduo *UserDeviceUpdateOne) ClearDevice() *UserDeviceUpdateOne {
	uduo.mutation.ClearDevice()
	return uduo
}

// Where appends a list predicates to the UserDeviceUpdate builder.
func (uduo *UserDeviceUpdateOne) Where(ps ...predicate.UserDevice) *UserDeviceUpdateOne {
	uduo.mutation.Where(ps...)
	return uduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uduo *UserDeviceUpdateOne) Select(field string, fields ...string) *UserDeviceUpdateOne {
	uduo.fields = append([]string{field}, fields...)
	return uduo
}

// Save executes the query and returns the updated UserDevice entity.
func (uduo *UserDeviceUpdateOne) Save(ctx context.Context) (*UserDevice, error) {
	uduo.defaults()
	return withHooks(ctx, uduo.sqlSave, uduo.mutation, uduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uduo *UserDeviceUpdateOne) SaveX(ctx context.Context) *UserDevice {
	node, err := uduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uduo *UserDeviceUpdateOne) Exec(ctx context.Context) error {
	_, err := uduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uduo *UserDeviceUpdateOne) ExecX(ctx context.Context) {
	if err := uduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uduo *UserDeviceUpdateOne) defaults() {
	if _, ok := uduo.mutation.UpdatedAt(); !ok {
		v := userdevice.UpdateDefaultUpdatedAt()
		uduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uduo *UserDeviceUpdateOne) check() error {
	if _, ok := uduo.mutation.UserID(); uduo.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "UserDevice.user"`)
	}
	if _, ok := uduo.mutation.DeviceID(); uduo.mutation.DeviceCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "UserDevice.device"`)
	}
	return nil
}

func (uduo *UserDeviceUpdateOne) sqlSave(ctx context.Context) (_node *UserDevice, err error) {
	if err := uduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userdevice.Table, userdevice.Columns, sqlgraph.NewFieldSpec(userdevice.FieldID, field.TypeInt64))
	id, ok := uduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "UserDevice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userdevice.FieldID)
		for _, f := range fields {
			if !userdevice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != userdevice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uduo.mutation.CreatedBy(); ok {
		_spec.SetField(userdevice.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := uduo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(userdevice.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := uduo.mutation.UpdatedBy(); ok {
		_spec.SetField(userdevice.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := uduo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(userdevice.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := uduo.mutation.UpdatedAt(); ok {
		_spec.SetField(userdevice.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uduo.mutation.DeletedAt(); ok {
		_spec.SetField(userdevice.FieldDeletedAt, field.TypeTime, value)
	}
	if uduo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdevice.UserTable,
			Columns: []string{userdevice.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uduo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdevice.UserTable,
			Columns: []string{userdevice.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uduo.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdevice.DeviceTable,
			Columns: []string{userdevice.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uduo.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdevice.DeviceTable,
			Columns: []string{userdevice.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserDevice{config: uduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userdevice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uduo.mutation.done = true
	return _node, nil
}
