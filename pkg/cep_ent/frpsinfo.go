// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/frpsinfo"
)

// FrpsInfo is the model entity for the FrpsInfo schema.
type FrpsInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int64 `json:"created_by"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int64 `json:"updated_by"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at"`
	// ini 文件服务端 tag
	Tag string `json:"tag"`
	// frps 服务地址
	ServerAddr string `json:"server_addr"`
	// frps 服务端口
	ServerPort int `json:"server_port"`
	// frps 认证方式
	AuthenticationMethod string `json:"authentication_method"`
	// frps 认证 token
	Token string `json:"token"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FrpsInfoQuery when eager-loading is set.
	Edges        FrpsInfoEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FrpsInfoEdges holds the relations/edges for other nodes in the graph.
type FrpsInfoEdges struct {
	// FrpcInfos holds the value of the frpc_infos edge.
	FrpcInfos []*FrpcInfo `json:"frpc_infos,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// FrpcInfosOrErr returns the FrpcInfos value or an error if the edge
// was not loaded in eager-loading.
func (e FrpsInfoEdges) FrpcInfosOrErr() ([]*FrpcInfo, error) {
	if e.loadedTypes[0] {
		return e.FrpcInfos, nil
	}
	return nil, &NotLoadedError{edge: "frpc_infos"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FrpsInfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case frpsinfo.FieldID, frpsinfo.FieldCreatedBy, frpsinfo.FieldUpdatedBy, frpsinfo.FieldServerPort:
			values[i] = new(sql.NullInt64)
		case frpsinfo.FieldTag, frpsinfo.FieldServerAddr, frpsinfo.FieldAuthenticationMethod, frpsinfo.FieldToken:
			values[i] = new(sql.NullString)
		case frpsinfo.FieldCreatedAt, frpsinfo.FieldUpdatedAt, frpsinfo.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FrpsInfo fields.
func (fi *FrpsInfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case frpsinfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fi.ID = int64(value.Int64)
		case frpsinfo.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				fi.CreatedBy = value.Int64
			}
		case frpsinfo.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				fi.UpdatedBy = value.Int64
			}
		case frpsinfo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fi.CreatedAt = value.Time
			}
		case frpsinfo.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fi.UpdatedAt = value.Time
			}
		case frpsinfo.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				fi.DeletedAt = value.Time
			}
		case frpsinfo.FieldTag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tag", values[i])
			} else if value.Valid {
				fi.Tag = value.String
			}
		case frpsinfo.FieldServerAddr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field server_addr", values[i])
			} else if value.Valid {
				fi.ServerAddr = value.String
			}
		case frpsinfo.FieldServerPort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field server_port", values[i])
			} else if value.Valid {
				fi.ServerPort = int(value.Int64)
			}
		case frpsinfo.FieldAuthenticationMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field authentication_method", values[i])
			} else if value.Valid {
				fi.AuthenticationMethod = value.String
			}
		case frpsinfo.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				fi.Token = value.String
			}
		default:
			fi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FrpsInfo.
// This includes values selected through modifiers, order, etc.
func (fi *FrpsInfo) Value(name string) (ent.Value, error) {
	return fi.selectValues.Get(name)
}

// QueryFrpcInfos queries the "frpc_infos" edge of the FrpsInfo entity.
func (fi *FrpsInfo) QueryFrpcInfos() *FrpcInfoQuery {
	return NewFrpsInfoClient(fi.config).QueryFrpcInfos(fi)
}

// Update returns a builder for updating this FrpsInfo.
// Note that you need to call FrpsInfo.Unwrap() before calling this method if this FrpsInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (fi *FrpsInfo) Update() *FrpsInfoUpdateOne {
	return NewFrpsInfoClient(fi.config).UpdateOne(fi)
}

// Unwrap unwraps the FrpsInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fi *FrpsInfo) Unwrap() *FrpsInfo {
	_tx, ok := fi.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: FrpsInfo is not a transactional entity")
	}
	fi.config.driver = _tx.drv
	return fi
}

// String implements the fmt.Stringer.
func (fi *FrpsInfo) String() string {
	var builder strings.Builder
	builder.WriteString("FrpsInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fi.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", fi.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", fi.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fi.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fi.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("tag=")
	builder.WriteString(fi.Tag)
	builder.WriteString(", ")
	builder.WriteString("server_addr=")
	builder.WriteString(fi.ServerAddr)
	builder.WriteString(", ")
	builder.WriteString("server_port=")
	builder.WriteString(fmt.Sprintf("%v", fi.ServerPort))
	builder.WriteString(", ")
	builder.WriteString("authentication_method=")
	builder.WriteString(fi.AuthenticationMethod)
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(fi.Token)
	builder.WriteByte(')')
	return builder.String()
}

// FrpsInfos is a parsable slice of FrpsInfo.
type FrpsInfos []*FrpsInfo
