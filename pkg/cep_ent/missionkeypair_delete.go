// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/missionkeypair"
	"cephalon-ent/pkg/cep_ent/predicate"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MissionKeyPairDelete is the builder for deleting a MissionKeyPair entity.
type MissionKeyPairDelete struct {
	config
	hooks    []Hook
	mutation *MissionKeyPairMutation
}

// Where appends a list predicates to the MissionKeyPairDelete builder.
func (mkpd *MissionKeyPairDelete) Where(ps ...predicate.MissionKeyPair) *MissionKeyPairDelete {
	mkpd.mutation.Where(ps...)
	return mkpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mkpd *MissionKeyPairDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, mkpd.sqlExec, mkpd.mutation, mkpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mkpd *MissionKeyPairDelete) ExecX(ctx context.Context) int {
	n, err := mkpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mkpd *MissionKeyPairDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(missionkeypair.Table, sqlgraph.NewFieldSpec(missionkeypair.FieldID, field.TypeInt64))
	if ps := mkpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mkpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mkpd.mutation.done = true
	return affected, err
}

// MissionKeyPairDeleteOne is the builder for deleting a single MissionKeyPair entity.
type MissionKeyPairDeleteOne struct {
	mkpd *MissionKeyPairDelete
}

// Where appends a list predicates to the MissionKeyPairDelete builder.
func (mkpdo *MissionKeyPairDeleteOne) Where(ps ...predicate.MissionKeyPair) *MissionKeyPairDeleteOne {
	mkpdo.mkpd.mutation.Where(ps...)
	return mkpdo
}

// Exec executes the deletion query.
func (mkpdo *MissionKeyPairDeleteOne) Exec(ctx context.Context) error {
	n, err := mkpdo.mkpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{missionkeypair.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mkpdo *MissionKeyPairDeleteOne) ExecX(ctx context.Context) {
	if err := mkpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
