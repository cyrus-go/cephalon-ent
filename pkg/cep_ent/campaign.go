// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/campaign"
)

// 活动，计划废弃
type Campaign struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建者 ID
	CreatedBy int64 `json:"created_by"`
	// 更新者 ID
	UpdatedBy int64 `json:"updated_by"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// 活动名称
	Name string `json:"name"`
	// 活动类型
	Type string `json:"type"`
	// 活动开始时间
	StartedAt time.Time `json:"started_at"`
	// 活动结束时间
	EndedAt time.Time `json:"ended_at"`
	// 活动状态
	Status int `json:"status"`
	// 外键邀请码 id
	InviteID string `json:"invite_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CampaignQuery when eager-loading is set.
	Edges        CampaignEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CampaignEdges holds the relations/edges for other nodes in the graph.
type CampaignEdges struct {
	// Invites holds the value of the invites edge.
	Invites []*Invite `json:"invites,omitempty"`
	// CampaignOrders holds the value of the campaign_orders edge.
	CampaignOrders []*CampaignOrder `json:"campaign_orders,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// InvitesOrErr returns the Invites value or an error if the edge
// was not loaded in eager-loading.
func (e CampaignEdges) InvitesOrErr() ([]*Invite, error) {
	if e.loadedTypes[0] {
		return e.Invites, nil
	}
	return nil, &NotLoadedError{edge: "invites"}
}

// CampaignOrdersOrErr returns the CampaignOrders value or an error if the edge
// was not loaded in eager-loading.
func (e CampaignEdges) CampaignOrdersOrErr() ([]*CampaignOrder, error) {
	if e.loadedTypes[1] {
		return e.CampaignOrders, nil
	}
	return nil, &NotLoadedError{edge: "campaign_orders"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Campaign) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case campaign.FieldID, campaign.FieldCreatedBy, campaign.FieldUpdatedBy, campaign.FieldStatus:
			values[i] = new(sql.NullInt64)
		case campaign.FieldName, campaign.FieldType, campaign.FieldInviteID:
			values[i] = new(sql.NullString)
		case campaign.FieldCreatedAt, campaign.FieldUpdatedAt, campaign.FieldDeletedAt, campaign.FieldStartedAt, campaign.FieldEndedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Campaign fields.
func (c *Campaign) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case campaign.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int64(value.Int64)
		case campaign.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				c.CreatedBy = value.Int64
			}
		case campaign.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				c.UpdatedBy = value.Int64
			}
		case campaign.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case campaign.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case campaign.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				c.DeletedAt = value.Time
			}
		case campaign.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case campaign.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				c.Type = value.String
			}
		case campaign.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				c.StartedAt = value.Time
			}
		case campaign.FieldEndedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ended_at", values[i])
			} else if value.Valid {
				c.EndedAt = value.Time
			}
		case campaign.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = int(value.Int64)
			}
		case campaign.FieldInviteID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invite_id", values[i])
			} else if value.Valid {
				c.InviteID = value.String
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Campaign.
// This includes values selected through modifiers, order, etc.
func (c *Campaign) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryInvites queries the "invites" edge of the Campaign entity.
func (c *Campaign) QueryInvites() *InviteQuery {
	return NewCampaignClient(c.config).QueryInvites(c)
}

// QueryCampaignOrders queries the "campaign_orders" edge of the Campaign entity.
func (c *Campaign) QueryCampaignOrders() *CampaignOrderQuery {
	return NewCampaignClient(c.config).QueryCampaignOrders(c)
}

// Update returns a builder for updating this Campaign.
// Note that you need to call Campaign.Unwrap() before calling this method if this Campaign
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Campaign) Update() *CampaignUpdateOne {
	return NewCampaignClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Campaign entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Campaign) Unwrap() *Campaign {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: Campaign is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Campaign) String() string {
	var builder strings.Builder
	builder.WriteString("Campaign(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", c.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", c.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(c.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(c.Type)
	builder.WriteString(", ")
	builder.WriteString("started_at=")
	builder.WriteString(c.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ended_at=")
	builder.WriteString(c.EndedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", c.Status))
	builder.WriteString(", ")
	builder.WriteString("invite_id=")
	builder.WriteString(c.InviteID)
	builder.WriteByte(')')
	return builder.String()
}

// Campaigns is a parsable slice of Campaign.
type Campaigns []*Campaign
