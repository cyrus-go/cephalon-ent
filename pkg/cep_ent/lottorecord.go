// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lotto"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottoprize"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottorecord"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
)

// 用户抽奖记录表
type LottoRecord struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建者 ID
	CreatedBy int64 `json:"created_by"`
	// 更新者 ID
	UpdatedBy int64 `json:"updated_by"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// 外键：用户 ID
	UserID int64 `json:"user_id"`
	// 外键：抽奖活动 ID
	LottoID int64 `json:"lotto_id"`
	// 抽奖结果
	Result lottorecord.Result `json:"result"`
	// 外键：奖品 ID
	LottoPrizeID int64 `json:"lotto_prize_id"`
	// 抽奖状态
	Status lottorecord.Status `json:"status"`
	// 剩余抽奖次数
	RemainLottoCount int64 `json:"remain_lotto_count"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LottoRecordQuery when eager-loading is set.
	Edges        LottoRecordEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LottoRecordEdges holds the relations/edges for other nodes in the graph.
type LottoRecordEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Lotto holds the value of the lotto edge.
	Lotto *Lotto `json:"lotto,omitempty"`
	// LottoPrize holds the value of the lotto_prize edge.
	LottoPrize *LottoPrize `json:"lotto_prize,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LottoRecordEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// LottoOrErr returns the Lotto value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LottoRecordEdges) LottoOrErr() (*Lotto, error) {
	if e.loadedTypes[1] {
		if e.Lotto == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: lotto.Label}
		}
		return e.Lotto, nil
	}
	return nil, &NotLoadedError{edge: "lotto"}
}

// LottoPrizeOrErr returns the LottoPrize value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LottoRecordEdges) LottoPrizeOrErr() (*LottoPrize, error) {
	if e.loadedTypes[2] {
		if e.LottoPrize == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: lottoprize.Label}
		}
		return e.LottoPrize, nil
	}
	return nil, &NotLoadedError{edge: "lotto_prize"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LottoRecord) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case lottorecord.FieldID, lottorecord.FieldCreatedBy, lottorecord.FieldUpdatedBy, lottorecord.FieldUserID, lottorecord.FieldLottoID, lottorecord.FieldLottoPrizeID, lottorecord.FieldRemainLottoCount:
			values[i] = new(sql.NullInt64)
		case lottorecord.FieldResult, lottorecord.FieldStatus:
			values[i] = new(sql.NullString)
		case lottorecord.FieldCreatedAt, lottorecord.FieldUpdatedAt, lottorecord.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LottoRecord fields.
func (lr *LottoRecord) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lottorecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lr.ID = int64(value.Int64)
		case lottorecord.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				lr.CreatedBy = value.Int64
			}
		case lottorecord.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				lr.UpdatedBy = value.Int64
			}
		case lottorecord.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				lr.CreatedAt = value.Time
			}
		case lottorecord.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				lr.UpdatedAt = value.Time
			}
		case lottorecord.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				lr.DeletedAt = value.Time
			}
		case lottorecord.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				lr.UserID = value.Int64
			}
		case lottorecord.FieldLottoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lotto_id", values[i])
			} else if value.Valid {
				lr.LottoID = value.Int64
			}
		case lottorecord.FieldResult:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field result", values[i])
			} else if value.Valid {
				lr.Result = lottorecord.Result(value.String)
			}
		case lottorecord.FieldLottoPrizeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lotto_prize_id", values[i])
			} else if value.Valid {
				lr.LottoPrizeID = value.Int64
			}
		case lottorecord.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				lr.Status = lottorecord.Status(value.String)
			}
		case lottorecord.FieldRemainLottoCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field remain_lotto_count", values[i])
			} else if value.Valid {
				lr.RemainLottoCount = value.Int64
			}
		default:
			lr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LottoRecord.
// This includes values selected through modifiers, order, etc.
func (lr *LottoRecord) Value(name string) (ent.Value, error) {
	return lr.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the LottoRecord entity.
func (lr *LottoRecord) QueryUser() *UserQuery {
	return NewLottoRecordClient(lr.config).QueryUser(lr)
}

// QueryLotto queries the "lotto" edge of the LottoRecord entity.
func (lr *LottoRecord) QueryLotto() *LottoQuery {
	return NewLottoRecordClient(lr.config).QueryLotto(lr)
}

// QueryLottoPrize queries the "lotto_prize" edge of the LottoRecord entity.
func (lr *LottoRecord) QueryLottoPrize() *LottoPrizeQuery {
	return NewLottoRecordClient(lr.config).QueryLottoPrize(lr)
}

// Update returns a builder for updating this LottoRecord.
// Note that you need to call LottoRecord.Unwrap() before calling this method if this LottoRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (lr *LottoRecord) Update() *LottoRecordUpdateOne {
	return NewLottoRecordClient(lr.config).UpdateOne(lr)
}

// Unwrap unwraps the LottoRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lr *LottoRecord) Unwrap() *LottoRecord {
	_tx, ok := lr.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: LottoRecord is not a transactional entity")
	}
	lr.config.driver = _tx.drv
	return lr
}

// String implements the fmt.Stringer.
func (lr *LottoRecord) String() string {
	var builder strings.Builder
	builder.WriteString("LottoRecord(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lr.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", lr.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", lr.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(lr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(lr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(lr.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", lr.UserID))
	builder.WriteString(", ")
	builder.WriteString("lotto_id=")
	builder.WriteString(fmt.Sprintf("%v", lr.LottoID))
	builder.WriteString(", ")
	builder.WriteString("result=")
	builder.WriteString(fmt.Sprintf("%v", lr.Result))
	builder.WriteString(", ")
	builder.WriteString("lotto_prize_id=")
	builder.WriteString(fmt.Sprintf("%v", lr.LottoPrizeID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", lr.Status))
	builder.WriteString(", ")
	builder.WriteString("remain_lotto_count=")
	builder.WriteString(fmt.Sprintf("%v", lr.RemainLottoCount))
	builder.WriteByte(')')
	return builder.String()
}

// LottoRecords is a parsable slice of LottoRecord.
type LottoRecords []*LottoRecord
