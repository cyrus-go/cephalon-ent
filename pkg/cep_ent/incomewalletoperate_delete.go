// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/incomewalletoperate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// IncomeWalletOperateDelete is the builder for deleting a IncomeWalletOperate entity.
type IncomeWalletOperateDelete struct {
	config
	hooks    []Hook
	mutation *IncomeWalletOperateMutation
}

// Where appends a list predicates to the IncomeWalletOperateDelete builder.
func (iwod *IncomeWalletOperateDelete) Where(ps ...predicate.IncomeWalletOperate) *IncomeWalletOperateDelete {
	iwod.mutation.Where(ps...)
	return iwod
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (iwod *IncomeWalletOperateDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, iwod.sqlExec, iwod.mutation, iwod.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (iwod *IncomeWalletOperateDelete) ExecX(ctx context.Context) int {
	n, err := iwod.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (iwod *IncomeWalletOperateDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(incomewalletoperate.Table, sqlgraph.NewFieldSpec(incomewalletoperate.FieldID, field.TypeInt64))
	if ps := iwod.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, iwod.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	iwod.mutation.done = true
	return affected, err
}

// IncomeWalletOperateDeleteOne is the builder for deleting a single IncomeWalletOperate entity.
type IncomeWalletOperateDeleteOne struct {
	iwod *IncomeWalletOperateDelete
}

// Where appends a list predicates to the IncomeWalletOperateDelete builder.
func (iwodo *IncomeWalletOperateDeleteOne) Where(ps ...predicate.IncomeWalletOperate) *IncomeWalletOperateDeleteOne {
	iwodo.iwod.mutation.Where(ps...)
	return iwodo
}

// Exec executes the deletion query.
func (iwodo *IncomeWalletOperateDeleteOne) Exec(ctx context.Context) error {
	n, err := iwodo.iwod.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{incomewalletoperate.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (iwodo *IncomeWalletOperateDeleteOne) ExecX(ctx context.Context) {
	if err := iwodo.Exec(ctx); err != nil {
		panic(err)
	}
}
