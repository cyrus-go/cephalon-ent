// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/bill"
	"cephalon-ent/pkg/cep_ent/device"
	"cephalon-ent/pkg/cep_ent/mission"
	"cephalon-ent/pkg/cep_ent/missionbatch"
	"cephalon-ent/pkg/cep_ent/missionconsumeorder"
	"cephalon-ent/pkg/cep_ent/missionproduceorder"
	"cephalon-ent/pkg/cep_ent/missionproduction"
	"cephalon-ent/pkg/cep_ent/predicate"
	"cephalon-ent/pkg/cep_ent/user"
	"cephalon-ent/pkg/enums"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MissionProduceOrderUpdate is the builder for updating MissionProduceOrder entities.
type MissionProduceOrderUpdate struct {
	config
	hooks    []Hook
	mutation *MissionProduceOrderMutation
}

// Where appends a list predicates to the MissionProduceOrderUpdate builder.
func (mpou *MissionProduceOrderUpdate) Where(ps ...predicate.MissionProduceOrder) *MissionProduceOrderUpdate {
	mpou.mutation.Where(ps...)
	return mpou
}

// SetCreatedBy sets the "created_by" field.
func (mpou *MissionProduceOrderUpdate) SetCreatedBy(i int64) *MissionProduceOrderUpdate {
	mpou.mutation.ResetCreatedBy()
	mpou.mutation.SetCreatedBy(i)
	return mpou
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mpou *MissionProduceOrderUpdate) SetNillableCreatedBy(i *int64) *MissionProduceOrderUpdate {
	if i != nil {
		mpou.SetCreatedBy(*i)
	}
	return mpou
}

// AddCreatedBy adds i to the "created_by" field.
func (mpou *MissionProduceOrderUpdate) AddCreatedBy(i int64) *MissionProduceOrderUpdate {
	mpou.mutation.AddCreatedBy(i)
	return mpou
}

// SetUpdatedBy sets the "updated_by" field.
func (mpou *MissionProduceOrderUpdate) SetUpdatedBy(i int64) *MissionProduceOrderUpdate {
	mpou.mutation.ResetUpdatedBy()
	mpou.mutation.SetUpdatedBy(i)
	return mpou
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mpou *MissionProduceOrderUpdate) SetNillableUpdatedBy(i *int64) *MissionProduceOrderUpdate {
	if i != nil {
		mpou.SetUpdatedBy(*i)
	}
	return mpou
}

// AddUpdatedBy adds i to the "updated_by" field.
func (mpou *MissionProduceOrderUpdate) AddUpdatedBy(i int64) *MissionProduceOrderUpdate {
	mpou.mutation.AddUpdatedBy(i)
	return mpou
}

// SetUpdatedAt sets the "updated_at" field.
func (mpou *MissionProduceOrderUpdate) SetUpdatedAt(t time.Time) *MissionProduceOrderUpdate {
	mpou.mutation.SetUpdatedAt(t)
	return mpou
}

// SetDeletedAt sets the "deleted_at" field.
func (mpou *MissionProduceOrderUpdate) SetDeletedAt(t time.Time) *MissionProduceOrderUpdate {
	mpou.mutation.SetDeletedAt(t)
	return mpou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mpou *MissionProduceOrderUpdate) SetNillableDeletedAt(t *time.Time) *MissionProduceOrderUpdate {
	if t != nil {
		mpou.SetDeletedAt(*t)
	}
	return mpou
}

// SetUserID sets the "user_id" field.
func (mpou *MissionProduceOrderUpdate) SetUserID(i int64) *MissionProduceOrderUpdate {
	mpou.mutation.SetUserID(i)
	return mpou
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (mpou *MissionProduceOrderUpdate) SetNillableUserID(i *int64) *MissionProduceOrderUpdate {
	if i != nil {
		mpou.SetUserID(*i)
	}
	return mpou
}

// SetMissionID sets the "mission_id" field.
func (mpou *MissionProduceOrderUpdate) SetMissionID(i int64) *MissionProduceOrderUpdate {
	mpou.mutation.SetMissionID(i)
	return mpou
}

// SetNillableMissionID sets the "mission_id" field if the given value is not nil.
func (mpou *MissionProduceOrderUpdate) SetNillableMissionID(i *int64) *MissionProduceOrderUpdate {
	if i != nil {
		mpou.SetMissionID(*i)
	}
	return mpou
}

// SetMissionProductionID sets the "mission_production_id" field.
func (mpou *MissionProduceOrderUpdate) SetMissionProductionID(i int64) *MissionProduceOrderUpdate {
	mpou.mutation.SetMissionProductionID(i)
	return mpou
}

// SetNillableMissionProductionID sets the "mission_production_id" field if the given value is not nil.
func (mpou *MissionProduceOrderUpdate) SetNillableMissionProductionID(i *int64) *MissionProduceOrderUpdate {
	if i != nil {
		mpou.SetMissionProductionID(*i)
	}
	return mpou
}

// SetStatus sets the "status" field.
func (mpou *MissionProduceOrderUpdate) SetStatus(es enums.MissionStatus) *MissionProduceOrderUpdate {
	mpou.mutation.SetStatus(es)
	return mpou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mpou *MissionProduceOrderUpdate) SetNillableStatus(es *enums.MissionStatus) *MissionProduceOrderUpdate {
	if es != nil {
		mpou.SetStatus(*es)
	}
	return mpou
}

// SetCep sets the "cep" field.
func (mpou *MissionProduceOrderUpdate) SetCep(i int64) *MissionProduceOrderUpdate {
	mpou.mutation.ResetCep()
	mpou.mutation.SetCep(i)
	return mpou
}

// SetNillableCep sets the "cep" field if the given value is not nil.
func (mpou *MissionProduceOrderUpdate) SetNillableCep(i *int64) *MissionProduceOrderUpdate {
	if i != nil {
		mpou.SetCep(*i)
	}
	return mpou
}

// AddCep adds i to the "cep" field.
func (mpou *MissionProduceOrderUpdate) AddCep(i int64) *MissionProduceOrderUpdate {
	mpou.mutation.AddCep(i)
	return mpou
}

// SetType sets the "type" field.
func (mpou *MissionProduceOrderUpdate) SetType(et enums.MissionType) *MissionProduceOrderUpdate {
	mpou.mutation.SetType(et)
	return mpou
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mpou *MissionProduceOrderUpdate) SetNillableType(et *enums.MissionType) *MissionProduceOrderUpdate {
	if et != nil {
		mpou.SetType(*et)
	}
	return mpou
}

// SetIsTime sets the "is_time" field.
func (mpou *MissionProduceOrderUpdate) SetIsTime(b bool) *MissionProduceOrderUpdate {
	mpou.mutation.SetIsTime(b)
	return mpou
}

// SetNillableIsTime sets the "is_time" field if the given value is not nil.
func (mpou *MissionProduceOrderUpdate) SetNillableIsTime(b *bool) *MissionProduceOrderUpdate {
	if b != nil {
		mpou.SetIsTime(*b)
	}
	return mpou
}

// SetDeviceID sets the "device_id" field.
func (mpou *MissionProduceOrderUpdate) SetDeviceID(i int64) *MissionProduceOrderUpdate {
	mpou.mutation.SetDeviceID(i)
	return mpou
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (mpou *MissionProduceOrderUpdate) SetNillableDeviceID(i *int64) *MissionProduceOrderUpdate {
	if i != nil {
		mpou.SetDeviceID(*i)
	}
	return mpou
}

// SetSerialNumber sets the "serial_number" field.
func (mpou *MissionProduceOrderUpdate) SetSerialNumber(s string) *MissionProduceOrderUpdate {
	mpou.mutation.SetSerialNumber(s)
	return mpou
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (mpou *MissionProduceOrderUpdate) SetNillableSerialNumber(s *string) *MissionProduceOrderUpdate {
	if s != nil {
		mpou.SetSerialNumber(*s)
	}
	return mpou
}

// SetMissionConsumeOrderID sets the "mission_consume_order_id" field.
func (mpou *MissionProduceOrderUpdate) SetMissionConsumeOrderID(i int64) *MissionProduceOrderUpdate {
	mpou.mutation.SetMissionConsumeOrderID(i)
	return mpou
}

// SetNillableMissionConsumeOrderID sets the "mission_consume_order_id" field if the given value is not nil.
func (mpou *MissionProduceOrderUpdate) SetNillableMissionConsumeOrderID(i *int64) *MissionProduceOrderUpdate {
	if i != nil {
		mpou.SetMissionConsumeOrderID(*i)
	}
	return mpou
}

// SetMissionBatchID sets the "mission_batch_id" field.
func (mpou *MissionProduceOrderUpdate) SetMissionBatchID(i int64) *MissionProduceOrderUpdate {
	mpou.mutation.SetMissionBatchID(i)
	return mpou
}

// SetNillableMissionBatchID sets the "mission_batch_id" field if the given value is not nil.
func (mpou *MissionProduceOrderUpdate) SetNillableMissionBatchID(i *int64) *MissionProduceOrderUpdate {
	if i != nil {
		mpou.SetMissionBatchID(*i)
	}
	return mpou
}

// SetUser sets the "user" edge to the User entity.
func (mpou *MissionProduceOrderUpdate) SetUser(u *User) *MissionProduceOrderUpdate {
	return mpou.SetUserID(u.ID)
}

// AddBillIDs adds the "bills" edge to the Bill entity by IDs.
func (mpou *MissionProduceOrderUpdate) AddBillIDs(ids ...int64) *MissionProduceOrderUpdate {
	mpou.mutation.AddBillIDs(ids...)
	return mpou
}

// AddBills adds the "bills" edges to the Bill entity.
func (mpou *MissionProduceOrderUpdate) AddBills(b ...*Bill) *MissionProduceOrderUpdate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return mpou.AddBillIDs(ids...)
}

// SetDevice sets the "device" edge to the Device entity.
func (mpou *MissionProduceOrderUpdate) SetDevice(d *Device) *MissionProduceOrderUpdate {
	return mpou.SetDeviceID(d.ID)
}

// SetMissionConsumeOrder sets the "mission_consume_order" edge to the MissionConsumeOrder entity.
func (mpou *MissionProduceOrderUpdate) SetMissionConsumeOrder(m *MissionConsumeOrder) *MissionProduceOrderUpdate {
	return mpou.SetMissionConsumeOrderID(m.ID)
}

// SetMission sets the "mission" edge to the Mission entity.
func (mpou *MissionProduceOrderUpdate) SetMission(m *Mission) *MissionProduceOrderUpdate {
	return mpou.SetMissionID(m.ID)
}

// SetMissionProduction sets the "mission_production" edge to the MissionProduction entity.
func (mpou *MissionProduceOrderUpdate) SetMissionProduction(m *MissionProduction) *MissionProduceOrderUpdate {
	return mpou.SetMissionProductionID(m.ID)
}

// SetMissionBatch sets the "mission_batch" edge to the MissionBatch entity.
func (mpou *MissionProduceOrderUpdate) SetMissionBatch(m *MissionBatch) *MissionProduceOrderUpdate {
	return mpou.SetMissionBatchID(m.ID)
}

// Mutation returns the MissionProduceOrderMutation object of the builder.
func (mpou *MissionProduceOrderUpdate) Mutation() *MissionProduceOrderMutation {
	return mpou.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (mpou *MissionProduceOrderUpdate) ClearUser() *MissionProduceOrderUpdate {
	mpou.mutation.ClearUser()
	return mpou
}

// ClearBills clears all "bills" edges to the Bill entity.
func (mpou *MissionProduceOrderUpdate) ClearBills() *MissionProduceOrderUpdate {
	mpou.mutation.ClearBills()
	return mpou
}

// RemoveBillIDs removes the "bills" edge to Bill entities by IDs.
func (mpou *MissionProduceOrderUpdate) RemoveBillIDs(ids ...int64) *MissionProduceOrderUpdate {
	mpou.mutation.RemoveBillIDs(ids...)
	return mpou
}

// RemoveBills removes "bills" edges to Bill entities.
func (mpou *MissionProduceOrderUpdate) RemoveBills(b ...*Bill) *MissionProduceOrderUpdate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return mpou.RemoveBillIDs(ids...)
}

// ClearDevice clears the "device" edge to the Device entity.
func (mpou *MissionProduceOrderUpdate) ClearDevice() *MissionProduceOrderUpdate {
	mpou.mutation.ClearDevice()
	return mpou
}

// ClearMissionConsumeOrder clears the "mission_consume_order" edge to the MissionConsumeOrder entity.
func (mpou *MissionProduceOrderUpdate) ClearMissionConsumeOrder() *MissionProduceOrderUpdate {
	mpou.mutation.ClearMissionConsumeOrder()
	return mpou
}

// ClearMission clears the "mission" edge to the Mission entity.
func (mpou *MissionProduceOrderUpdate) ClearMission() *MissionProduceOrderUpdate {
	mpou.mutation.ClearMission()
	return mpou
}

// ClearMissionProduction clears the "mission_production" edge to the MissionProduction entity.
func (mpou *MissionProduceOrderUpdate) ClearMissionProduction() *MissionProduceOrderUpdate {
	mpou.mutation.ClearMissionProduction()
	return mpou
}

// ClearMissionBatch clears the "mission_batch" edge to the MissionBatch entity.
func (mpou *MissionProduceOrderUpdate) ClearMissionBatch() *MissionProduceOrderUpdate {
	mpou.mutation.ClearMissionBatch()
	return mpou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mpou *MissionProduceOrderUpdate) Save(ctx context.Context) (int, error) {
	mpou.defaults()
	return withHooks(ctx, mpou.sqlSave, mpou.mutation, mpou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mpou *MissionProduceOrderUpdate) SaveX(ctx context.Context) int {
	affected, err := mpou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mpou *MissionProduceOrderUpdate) Exec(ctx context.Context) error {
	_, err := mpou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpou *MissionProduceOrderUpdate) ExecX(ctx context.Context) {
	if err := mpou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpou *MissionProduceOrderUpdate) defaults() {
	if _, ok := mpou.mutation.UpdatedAt(); !ok {
		v := missionproduceorder.UpdateDefaultUpdatedAt()
		mpou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpou *MissionProduceOrderUpdate) check() error {
	if v, ok := mpou.mutation.Status(); ok {
		if err := missionproduceorder.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "MissionProduceOrder.status": %w`, err)}
		}
	}
	if v, ok := mpou.mutation.GetType(); ok {
		if err := missionproduceorder.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "MissionProduceOrder.type": %w`, err)}
		}
	}
	if _, ok := mpou.mutation.UserID(); mpou.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionProduceOrder.user"`)
	}
	if _, ok := mpou.mutation.DeviceID(); mpou.mutation.DeviceCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionProduceOrder.device"`)
	}
	if _, ok := mpou.mutation.MissionConsumeOrderID(); mpou.mutation.MissionConsumeOrderCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionProduceOrder.mission_consume_order"`)
	}
	if _, ok := mpou.mutation.MissionID(); mpou.mutation.MissionCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionProduceOrder.mission"`)
	}
	if _, ok := mpou.mutation.MissionProductionID(); mpou.mutation.MissionProductionCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionProduceOrder.mission_production"`)
	}
	if _, ok := mpou.mutation.MissionBatchID(); mpou.mutation.MissionBatchCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionProduceOrder.mission_batch"`)
	}
	return nil
}

func (mpou *MissionProduceOrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mpou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(missionproduceorder.Table, missionproduceorder.Columns, sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64))
	if ps := mpou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mpou.mutation.CreatedBy(); ok {
		_spec.SetField(missionproduceorder.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mpou.mutation.AddedCreatedBy(); ok {
		_spec.AddField(missionproduceorder.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mpou.mutation.UpdatedBy(); ok {
		_spec.SetField(missionproduceorder.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mpou.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(missionproduceorder.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mpou.mutation.UpdatedAt(); ok {
		_spec.SetField(missionproduceorder.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mpou.mutation.DeletedAt(); ok {
		_spec.SetField(missionproduceorder.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := mpou.mutation.Status(); ok {
		_spec.SetField(missionproduceorder.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := mpou.mutation.Cep(); ok {
		_spec.SetField(missionproduceorder.FieldCep, field.TypeInt64, value)
	}
	if value, ok := mpou.mutation.AddedCep(); ok {
		_spec.AddField(missionproduceorder.FieldCep, field.TypeInt64, value)
	}
	if value, ok := mpou.mutation.GetType(); ok {
		_spec.SetField(missionproduceorder.FieldType, field.TypeEnum, value)
	}
	if value, ok := mpou.mutation.IsTime(); ok {
		_spec.SetField(missionproduceorder.FieldIsTime, field.TypeBool, value)
	}
	if value, ok := mpou.mutation.SerialNumber(); ok {
		_spec.SetField(missionproduceorder.FieldSerialNumber, field.TypeString, value)
	}
	if mpou.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduceorder.UserTable,
			Columns: []string{missionproduceorder.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpou.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduceorder.UserTable,
			Columns: []string{missionproduceorder.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpou.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionproduceorder.BillsTable,
			Columns: []string{missionproduceorder.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpou.mutation.RemovedBillsIDs(); len(nodes) > 0 && !mpou.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionproduceorder.BillsTable,
			Columns: []string{missionproduceorder.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpou.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionproduceorder.BillsTable,
			Columns: []string{missionproduceorder.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpou.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduceorder.DeviceTable,
			Columns: []string{missionproduceorder.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpou.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduceorder.DeviceTable,
			Columns: []string{missionproduceorder.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpou.mutation.MissionConsumeOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduceorder.MissionConsumeOrderTable,
			Columns: []string{missionproduceorder.MissionConsumeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpou.mutation.MissionConsumeOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduceorder.MissionConsumeOrderTable,
			Columns: []string{missionproduceorder.MissionConsumeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpou.mutation.MissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduceorder.MissionTable,
			Columns: []string{missionproduceorder.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpou.mutation.MissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduceorder.MissionTable,
			Columns: []string{missionproduceorder.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpou.mutation.MissionProductionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   missionproduceorder.MissionProductionTable,
			Columns: []string{missionproduceorder.MissionProductionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduction.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpou.mutation.MissionProductionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   missionproduceorder.MissionProductionTable,
			Columns: []string{missionproduceorder.MissionProductionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduction.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpou.mutation.MissionBatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduceorder.MissionBatchTable,
			Columns: []string{missionproduceorder.MissionBatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionbatch.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpou.mutation.MissionBatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduceorder.MissionBatchTable,
			Columns: []string{missionproduceorder.MissionBatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionbatch.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mpou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{missionproduceorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mpou.mutation.done = true
	return n, nil
}

// MissionProduceOrderUpdateOne is the builder for updating a single MissionProduceOrder entity.
type MissionProduceOrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MissionProduceOrderMutation
}

// SetCreatedBy sets the "created_by" field.
func (mpouo *MissionProduceOrderUpdateOne) SetCreatedBy(i int64) *MissionProduceOrderUpdateOne {
	mpouo.mutation.ResetCreatedBy()
	mpouo.mutation.SetCreatedBy(i)
	return mpouo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mpouo *MissionProduceOrderUpdateOne) SetNillableCreatedBy(i *int64) *MissionProduceOrderUpdateOne {
	if i != nil {
		mpouo.SetCreatedBy(*i)
	}
	return mpouo
}

// AddCreatedBy adds i to the "created_by" field.
func (mpouo *MissionProduceOrderUpdateOne) AddCreatedBy(i int64) *MissionProduceOrderUpdateOne {
	mpouo.mutation.AddCreatedBy(i)
	return mpouo
}

// SetUpdatedBy sets the "updated_by" field.
func (mpouo *MissionProduceOrderUpdateOne) SetUpdatedBy(i int64) *MissionProduceOrderUpdateOne {
	mpouo.mutation.ResetUpdatedBy()
	mpouo.mutation.SetUpdatedBy(i)
	return mpouo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mpouo *MissionProduceOrderUpdateOne) SetNillableUpdatedBy(i *int64) *MissionProduceOrderUpdateOne {
	if i != nil {
		mpouo.SetUpdatedBy(*i)
	}
	return mpouo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (mpouo *MissionProduceOrderUpdateOne) AddUpdatedBy(i int64) *MissionProduceOrderUpdateOne {
	mpouo.mutation.AddUpdatedBy(i)
	return mpouo
}

// SetUpdatedAt sets the "updated_at" field.
func (mpouo *MissionProduceOrderUpdateOne) SetUpdatedAt(t time.Time) *MissionProduceOrderUpdateOne {
	mpouo.mutation.SetUpdatedAt(t)
	return mpouo
}

// SetDeletedAt sets the "deleted_at" field.
func (mpouo *MissionProduceOrderUpdateOne) SetDeletedAt(t time.Time) *MissionProduceOrderUpdateOne {
	mpouo.mutation.SetDeletedAt(t)
	return mpouo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mpouo *MissionProduceOrderUpdateOne) SetNillableDeletedAt(t *time.Time) *MissionProduceOrderUpdateOne {
	if t != nil {
		mpouo.SetDeletedAt(*t)
	}
	return mpouo
}

// SetUserID sets the "user_id" field.
func (mpouo *MissionProduceOrderUpdateOne) SetUserID(i int64) *MissionProduceOrderUpdateOne {
	mpouo.mutation.SetUserID(i)
	return mpouo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (mpouo *MissionProduceOrderUpdateOne) SetNillableUserID(i *int64) *MissionProduceOrderUpdateOne {
	if i != nil {
		mpouo.SetUserID(*i)
	}
	return mpouo
}

// SetMissionID sets the "mission_id" field.
func (mpouo *MissionProduceOrderUpdateOne) SetMissionID(i int64) *MissionProduceOrderUpdateOne {
	mpouo.mutation.SetMissionID(i)
	return mpouo
}

// SetNillableMissionID sets the "mission_id" field if the given value is not nil.
func (mpouo *MissionProduceOrderUpdateOne) SetNillableMissionID(i *int64) *MissionProduceOrderUpdateOne {
	if i != nil {
		mpouo.SetMissionID(*i)
	}
	return mpouo
}

// SetMissionProductionID sets the "mission_production_id" field.
func (mpouo *MissionProduceOrderUpdateOne) SetMissionProductionID(i int64) *MissionProduceOrderUpdateOne {
	mpouo.mutation.SetMissionProductionID(i)
	return mpouo
}

// SetNillableMissionProductionID sets the "mission_production_id" field if the given value is not nil.
func (mpouo *MissionProduceOrderUpdateOne) SetNillableMissionProductionID(i *int64) *MissionProduceOrderUpdateOne {
	if i != nil {
		mpouo.SetMissionProductionID(*i)
	}
	return mpouo
}

// SetStatus sets the "status" field.
func (mpouo *MissionProduceOrderUpdateOne) SetStatus(es enums.MissionStatus) *MissionProduceOrderUpdateOne {
	mpouo.mutation.SetStatus(es)
	return mpouo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mpouo *MissionProduceOrderUpdateOne) SetNillableStatus(es *enums.MissionStatus) *MissionProduceOrderUpdateOne {
	if es != nil {
		mpouo.SetStatus(*es)
	}
	return mpouo
}

// SetCep sets the "cep" field.
func (mpouo *MissionProduceOrderUpdateOne) SetCep(i int64) *MissionProduceOrderUpdateOne {
	mpouo.mutation.ResetCep()
	mpouo.mutation.SetCep(i)
	return mpouo
}

// SetNillableCep sets the "cep" field if the given value is not nil.
func (mpouo *MissionProduceOrderUpdateOne) SetNillableCep(i *int64) *MissionProduceOrderUpdateOne {
	if i != nil {
		mpouo.SetCep(*i)
	}
	return mpouo
}

// AddCep adds i to the "cep" field.
func (mpouo *MissionProduceOrderUpdateOne) AddCep(i int64) *MissionProduceOrderUpdateOne {
	mpouo.mutation.AddCep(i)
	return mpouo
}

// SetType sets the "type" field.
func (mpouo *MissionProduceOrderUpdateOne) SetType(et enums.MissionType) *MissionProduceOrderUpdateOne {
	mpouo.mutation.SetType(et)
	return mpouo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mpouo *MissionProduceOrderUpdateOne) SetNillableType(et *enums.MissionType) *MissionProduceOrderUpdateOne {
	if et != nil {
		mpouo.SetType(*et)
	}
	return mpouo
}

// SetIsTime sets the "is_time" field.
func (mpouo *MissionProduceOrderUpdateOne) SetIsTime(b bool) *MissionProduceOrderUpdateOne {
	mpouo.mutation.SetIsTime(b)
	return mpouo
}

// SetNillableIsTime sets the "is_time" field if the given value is not nil.
func (mpouo *MissionProduceOrderUpdateOne) SetNillableIsTime(b *bool) *MissionProduceOrderUpdateOne {
	if b != nil {
		mpouo.SetIsTime(*b)
	}
	return mpouo
}

// SetDeviceID sets the "device_id" field.
func (mpouo *MissionProduceOrderUpdateOne) SetDeviceID(i int64) *MissionProduceOrderUpdateOne {
	mpouo.mutation.SetDeviceID(i)
	return mpouo
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (mpouo *MissionProduceOrderUpdateOne) SetNillableDeviceID(i *int64) *MissionProduceOrderUpdateOne {
	if i != nil {
		mpouo.SetDeviceID(*i)
	}
	return mpouo
}

// SetSerialNumber sets the "serial_number" field.
func (mpouo *MissionProduceOrderUpdateOne) SetSerialNumber(s string) *MissionProduceOrderUpdateOne {
	mpouo.mutation.SetSerialNumber(s)
	return mpouo
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (mpouo *MissionProduceOrderUpdateOne) SetNillableSerialNumber(s *string) *MissionProduceOrderUpdateOne {
	if s != nil {
		mpouo.SetSerialNumber(*s)
	}
	return mpouo
}

// SetMissionConsumeOrderID sets the "mission_consume_order_id" field.
func (mpouo *MissionProduceOrderUpdateOne) SetMissionConsumeOrderID(i int64) *MissionProduceOrderUpdateOne {
	mpouo.mutation.SetMissionConsumeOrderID(i)
	return mpouo
}

// SetNillableMissionConsumeOrderID sets the "mission_consume_order_id" field if the given value is not nil.
func (mpouo *MissionProduceOrderUpdateOne) SetNillableMissionConsumeOrderID(i *int64) *MissionProduceOrderUpdateOne {
	if i != nil {
		mpouo.SetMissionConsumeOrderID(*i)
	}
	return mpouo
}

// SetMissionBatchID sets the "mission_batch_id" field.
func (mpouo *MissionProduceOrderUpdateOne) SetMissionBatchID(i int64) *MissionProduceOrderUpdateOne {
	mpouo.mutation.SetMissionBatchID(i)
	return mpouo
}

// SetNillableMissionBatchID sets the "mission_batch_id" field if the given value is not nil.
func (mpouo *MissionProduceOrderUpdateOne) SetNillableMissionBatchID(i *int64) *MissionProduceOrderUpdateOne {
	if i != nil {
		mpouo.SetMissionBatchID(*i)
	}
	return mpouo
}

// SetUser sets the "user" edge to the User entity.
func (mpouo *MissionProduceOrderUpdateOne) SetUser(u *User) *MissionProduceOrderUpdateOne {
	return mpouo.SetUserID(u.ID)
}

// AddBillIDs adds the "bills" edge to the Bill entity by IDs.
func (mpouo *MissionProduceOrderUpdateOne) AddBillIDs(ids ...int64) *MissionProduceOrderUpdateOne {
	mpouo.mutation.AddBillIDs(ids...)
	return mpouo
}

// AddBills adds the "bills" edges to the Bill entity.
func (mpouo *MissionProduceOrderUpdateOne) AddBills(b ...*Bill) *MissionProduceOrderUpdateOne {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return mpouo.AddBillIDs(ids...)
}

// SetDevice sets the "device" edge to the Device entity.
func (mpouo *MissionProduceOrderUpdateOne) SetDevice(d *Device) *MissionProduceOrderUpdateOne {
	return mpouo.SetDeviceID(d.ID)
}

// SetMissionConsumeOrder sets the "mission_consume_order" edge to the MissionConsumeOrder entity.
func (mpouo *MissionProduceOrderUpdateOne) SetMissionConsumeOrder(m *MissionConsumeOrder) *MissionProduceOrderUpdateOne {
	return mpouo.SetMissionConsumeOrderID(m.ID)
}

// SetMission sets the "mission" edge to the Mission entity.
func (mpouo *MissionProduceOrderUpdateOne) SetMission(m *Mission) *MissionProduceOrderUpdateOne {
	return mpouo.SetMissionID(m.ID)
}

// SetMissionProduction sets the "mission_production" edge to the MissionProduction entity.
func (mpouo *MissionProduceOrderUpdateOne) SetMissionProduction(m *MissionProduction) *MissionProduceOrderUpdateOne {
	return mpouo.SetMissionProductionID(m.ID)
}

// SetMissionBatch sets the "mission_batch" edge to the MissionBatch entity.
func (mpouo *MissionProduceOrderUpdateOne) SetMissionBatch(m *MissionBatch) *MissionProduceOrderUpdateOne {
	return mpouo.SetMissionBatchID(m.ID)
}

// Mutation returns the MissionProduceOrderMutation object of the builder.
func (mpouo *MissionProduceOrderUpdateOne) Mutation() *MissionProduceOrderMutation {
	return mpouo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (mpouo *MissionProduceOrderUpdateOne) ClearUser() *MissionProduceOrderUpdateOne {
	mpouo.mutation.ClearUser()
	return mpouo
}

// ClearBills clears all "bills" edges to the Bill entity.
func (mpouo *MissionProduceOrderUpdateOne) ClearBills() *MissionProduceOrderUpdateOne {
	mpouo.mutation.ClearBills()
	return mpouo
}

// RemoveBillIDs removes the "bills" edge to Bill entities by IDs.
func (mpouo *MissionProduceOrderUpdateOne) RemoveBillIDs(ids ...int64) *MissionProduceOrderUpdateOne {
	mpouo.mutation.RemoveBillIDs(ids...)
	return mpouo
}

// RemoveBills removes "bills" edges to Bill entities.
func (mpouo *MissionProduceOrderUpdateOne) RemoveBills(b ...*Bill) *MissionProduceOrderUpdateOne {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return mpouo.RemoveBillIDs(ids...)
}

// ClearDevice clears the "device" edge to the Device entity.
func (mpouo *MissionProduceOrderUpdateOne) ClearDevice() *MissionProduceOrderUpdateOne {
	mpouo.mutation.ClearDevice()
	return mpouo
}

// ClearMissionConsumeOrder clears the "mission_consume_order" edge to the MissionConsumeOrder entity.
func (mpouo *MissionProduceOrderUpdateOne) ClearMissionConsumeOrder() *MissionProduceOrderUpdateOne {
	mpouo.mutation.ClearMissionConsumeOrder()
	return mpouo
}

// ClearMission clears the "mission" edge to the Mission entity.
func (mpouo *MissionProduceOrderUpdateOne) ClearMission() *MissionProduceOrderUpdateOne {
	mpouo.mutation.ClearMission()
	return mpouo
}

// ClearMissionProduction clears the "mission_production" edge to the MissionProduction entity.
func (mpouo *MissionProduceOrderUpdateOne) ClearMissionProduction() *MissionProduceOrderUpdateOne {
	mpouo.mutation.ClearMissionProduction()
	return mpouo
}

// ClearMissionBatch clears the "mission_batch" edge to the MissionBatch entity.
func (mpouo *MissionProduceOrderUpdateOne) ClearMissionBatch() *MissionProduceOrderUpdateOne {
	mpouo.mutation.ClearMissionBatch()
	return mpouo
}

// Where appends a list predicates to the MissionProduceOrderUpdate builder.
func (mpouo *MissionProduceOrderUpdateOne) Where(ps ...predicate.MissionProduceOrder) *MissionProduceOrderUpdateOne {
	mpouo.mutation.Where(ps...)
	return mpouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mpouo *MissionProduceOrderUpdateOne) Select(field string, fields ...string) *MissionProduceOrderUpdateOne {
	mpouo.fields = append([]string{field}, fields...)
	return mpouo
}

// Save executes the query and returns the updated MissionProduceOrder entity.
func (mpouo *MissionProduceOrderUpdateOne) Save(ctx context.Context) (*MissionProduceOrder, error) {
	mpouo.defaults()
	return withHooks(ctx, mpouo.sqlSave, mpouo.mutation, mpouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mpouo *MissionProduceOrderUpdateOne) SaveX(ctx context.Context) *MissionProduceOrder {
	node, err := mpouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mpouo *MissionProduceOrderUpdateOne) Exec(ctx context.Context) error {
	_, err := mpouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpouo *MissionProduceOrderUpdateOne) ExecX(ctx context.Context) {
	if err := mpouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpouo *MissionProduceOrderUpdateOne) defaults() {
	if _, ok := mpouo.mutation.UpdatedAt(); !ok {
		v := missionproduceorder.UpdateDefaultUpdatedAt()
		mpouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpouo *MissionProduceOrderUpdateOne) check() error {
	if v, ok := mpouo.mutation.Status(); ok {
		if err := missionproduceorder.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "MissionProduceOrder.status": %w`, err)}
		}
	}
	if v, ok := mpouo.mutation.GetType(); ok {
		if err := missionproduceorder.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "MissionProduceOrder.type": %w`, err)}
		}
	}
	if _, ok := mpouo.mutation.UserID(); mpouo.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionProduceOrder.user"`)
	}
	if _, ok := mpouo.mutation.DeviceID(); mpouo.mutation.DeviceCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionProduceOrder.device"`)
	}
	if _, ok := mpouo.mutation.MissionConsumeOrderID(); mpouo.mutation.MissionConsumeOrderCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionProduceOrder.mission_consume_order"`)
	}
	if _, ok := mpouo.mutation.MissionID(); mpouo.mutation.MissionCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionProduceOrder.mission"`)
	}
	if _, ok := mpouo.mutation.MissionProductionID(); mpouo.mutation.MissionProductionCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionProduceOrder.mission_production"`)
	}
	if _, ok := mpouo.mutation.MissionBatchID(); mpouo.mutation.MissionBatchCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionProduceOrder.mission_batch"`)
	}
	return nil
}

func (mpouo *MissionProduceOrderUpdateOne) sqlSave(ctx context.Context) (_node *MissionProduceOrder, err error) {
	if err := mpouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(missionproduceorder.Table, missionproduceorder.Columns, sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64))
	id, ok := mpouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "MissionProduceOrder.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mpouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, missionproduceorder.FieldID)
		for _, f := range fields {
			if !missionproduceorder.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != missionproduceorder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mpouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mpouo.mutation.CreatedBy(); ok {
		_spec.SetField(missionproduceorder.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mpouo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(missionproduceorder.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mpouo.mutation.UpdatedBy(); ok {
		_spec.SetField(missionproduceorder.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mpouo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(missionproduceorder.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mpouo.mutation.UpdatedAt(); ok {
		_spec.SetField(missionproduceorder.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mpouo.mutation.DeletedAt(); ok {
		_spec.SetField(missionproduceorder.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := mpouo.mutation.Status(); ok {
		_spec.SetField(missionproduceorder.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := mpouo.mutation.Cep(); ok {
		_spec.SetField(missionproduceorder.FieldCep, field.TypeInt64, value)
	}
	if value, ok := mpouo.mutation.AddedCep(); ok {
		_spec.AddField(missionproduceorder.FieldCep, field.TypeInt64, value)
	}
	if value, ok := mpouo.mutation.GetType(); ok {
		_spec.SetField(missionproduceorder.FieldType, field.TypeEnum, value)
	}
	if value, ok := mpouo.mutation.IsTime(); ok {
		_spec.SetField(missionproduceorder.FieldIsTime, field.TypeBool, value)
	}
	if value, ok := mpouo.mutation.SerialNumber(); ok {
		_spec.SetField(missionproduceorder.FieldSerialNumber, field.TypeString, value)
	}
	if mpouo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduceorder.UserTable,
			Columns: []string{missionproduceorder.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpouo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduceorder.UserTable,
			Columns: []string{missionproduceorder.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpouo.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionproduceorder.BillsTable,
			Columns: []string{missionproduceorder.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpouo.mutation.RemovedBillsIDs(); len(nodes) > 0 && !mpouo.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionproduceorder.BillsTable,
			Columns: []string{missionproduceorder.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpouo.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionproduceorder.BillsTable,
			Columns: []string{missionproduceorder.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpouo.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduceorder.DeviceTable,
			Columns: []string{missionproduceorder.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpouo.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduceorder.DeviceTable,
			Columns: []string{missionproduceorder.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpouo.mutation.MissionConsumeOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduceorder.MissionConsumeOrderTable,
			Columns: []string{missionproduceorder.MissionConsumeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpouo.mutation.MissionConsumeOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduceorder.MissionConsumeOrderTable,
			Columns: []string{missionproduceorder.MissionConsumeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpouo.mutation.MissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduceorder.MissionTable,
			Columns: []string{missionproduceorder.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpouo.mutation.MissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduceorder.MissionTable,
			Columns: []string{missionproduceorder.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpouo.mutation.MissionProductionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   missionproduceorder.MissionProductionTable,
			Columns: []string{missionproduceorder.MissionProductionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduction.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpouo.mutation.MissionProductionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   missionproduceorder.MissionProductionTable,
			Columns: []string{missionproduceorder.MissionProductionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduction.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpouo.mutation.MissionBatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduceorder.MissionBatchTable,
			Columns: []string{missionproduceorder.MissionBatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionbatch.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpouo.mutation.MissionBatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduceorder.MissionBatchTable,
			Columns: []string{missionproduceorder.MissionBatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionbatch.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MissionProduceOrder{config: mpouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mpouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{missionproduceorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mpouo.mutation.done = true
	return _node, nil
}
