// Code generated by ent, DO NOT EDIT.

package frpcinfo

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the frpcinfo type in the database.
	Label = "frpc_info"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldTag holds the string denoting the tag field in the database.
	FieldTag = "tag"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldLocalIP holds the string denoting the local_ip field in the database.
	FieldLocalIP = "local_ip"
	// FieldLocalPort holds the string denoting the local_port field in the database.
	FieldLocalPort = "local_port"
	// FieldRemotePort holds the string denoting the remote_port field in the database.
	FieldRemotePort = "remote_port"
	// FieldFrpsID holds the string denoting the frps_id field in the database.
	FieldFrpsID = "frps_id"
	// FieldDeviceID holds the string denoting the device_id field in the database.
	FieldDeviceID = "device_id"
	// EdgeFrpsInfo holds the string denoting the frps_info edge name in mutations.
	EdgeFrpsInfo = "frps_info"
	// EdgeDevice holds the string denoting the device edge name in mutations.
	EdgeDevice = "device"
	// Table holds the table name of the frpcinfo in the database.
	Table = "frpc_infos"
	// FrpsInfoTable is the table that holds the frps_info relation/edge.
	FrpsInfoTable = "frpc_infos"
	// FrpsInfoInverseTable is the table name for the FrpsInfo entity.
	// It exists in this package in order to avoid circular dependency with the "frpsinfo" package.
	FrpsInfoInverseTable = "frps_infos"
	// FrpsInfoColumn is the table column denoting the frps_info relation/edge.
	FrpsInfoColumn = "frps_id"
	// DeviceTable is the table that holds the device relation/edge.
	DeviceTable = "frpc_infos"
	// DeviceInverseTable is the table name for the Device entity.
	// It exists in this package in order to avoid circular dependency with the "device" package.
	DeviceInverseTable = "devices"
	// DeviceColumn is the table column denoting the device relation/edge.
	DeviceColumn = "device_id"
)

// Columns holds all SQL columns for frpcinfo fields.
var Columns = []string{
	FieldID,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldTag,
	FieldType,
	FieldLocalIP,
	FieldLocalPort,
	FieldRemotePort,
	FieldFrpsID,
	FieldDeviceID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedBy holds the default value on creation for the "created_by" field.
	DefaultCreatedBy int64
	// DefaultUpdatedBy holds the default value on creation for the "updated_by" field.
	DefaultUpdatedBy int64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt time.Time
	// DefaultTag holds the default value on creation for the "tag" field.
	DefaultTag string
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType string
	// DefaultLocalIP holds the default value on creation for the "local_ip" field.
	DefaultLocalIP string
	// DefaultLocalPort holds the default value on creation for the "local_port" field.
	DefaultLocalPort int
	// DefaultRemotePort holds the default value on creation for the "remote_port" field.
	DefaultRemotePort int
	// DefaultFrpsID holds the default value on creation for the "frps_id" field.
	DefaultFrpsID int64
	// DefaultDeviceID holds the default value on creation for the "device_id" field.
	DefaultDeviceID int64
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
)

// OrderOption defines the ordering options for the FrpcInfo queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByTag orders the results by the tag field.
func ByTag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTag, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByLocalIP orders the results by the local_ip field.
func ByLocalIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalIP, opts...).ToFunc()
}

// ByLocalPort orders the results by the local_port field.
func ByLocalPort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalPort, opts...).ToFunc()
}

// ByRemotePort orders the results by the remote_port field.
func ByRemotePort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemotePort, opts...).ToFunc()
}

// ByFrpsID orders the results by the frps_id field.
func ByFrpsID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFrpsID, opts...).ToFunc()
}

// ByDeviceID orders the results by the device_id field.
func ByDeviceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceID, opts...).ToFunc()
}

// ByFrpsInfoField orders the results by frps_info field.
func ByFrpsInfoField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFrpsInfoStep(), sql.OrderByField(field, opts...))
	}
}

// ByDeviceField orders the results by device field.
func ByDeviceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeviceStep(), sql.OrderByField(field, opts...))
	}
}
func newFrpsInfoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FrpsInfoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FrpsInfoTable, FrpsInfoColumn),
	)
}
func newDeviceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeviceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DeviceTable, DeviceColumn),
	)
}
