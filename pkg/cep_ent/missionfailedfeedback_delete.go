// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionfailedfeedback"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// MissionFailedFeedbackDelete is the builder for deleting a MissionFailedFeedback entity.
type MissionFailedFeedbackDelete struct {
	config
	hooks    []Hook
	mutation *MissionFailedFeedbackMutation
}

// Where appends a list predicates to the MissionFailedFeedbackDelete builder.
func (mffd *MissionFailedFeedbackDelete) Where(ps ...predicate.MissionFailedFeedback) *MissionFailedFeedbackDelete {
	mffd.mutation.Where(ps...)
	return mffd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mffd *MissionFailedFeedbackDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, mffd.sqlExec, mffd.mutation, mffd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mffd *MissionFailedFeedbackDelete) ExecX(ctx context.Context) int {
	n, err := mffd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mffd *MissionFailedFeedbackDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(missionfailedfeedback.Table, sqlgraph.NewFieldSpec(missionfailedfeedback.FieldID, field.TypeInt64))
	if ps := mffd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mffd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mffd.mutation.done = true
	return affected, err
}

// MissionFailedFeedbackDeleteOne is the builder for deleting a single MissionFailedFeedback entity.
type MissionFailedFeedbackDeleteOne struct {
	mffd *MissionFailedFeedbackDelete
}

// Where appends a list predicates to the MissionFailedFeedbackDelete builder.
func (mffdo *MissionFailedFeedbackDeleteOne) Where(ps ...predicate.MissionFailedFeedback) *MissionFailedFeedbackDeleteOne {
	mffdo.mffd.mutation.Where(ps...)
	return mffdo
}

// Exec executes the deletion query.
func (mffdo *MissionFailedFeedbackDeleteOne) Exec(ctx context.Context) error {
	n, err := mffdo.mffd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{missionfailedfeedback.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mffdo *MissionFailedFeedbackDeleteOne) ExecX(ctx context.Context) {
	if err := mffdo.Exec(ctx); err != nil {
		panic(err)
	}
}
