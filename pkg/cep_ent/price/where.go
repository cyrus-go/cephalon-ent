// Code generated by ent, DO NOT EDIT.

package price

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldID, id))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int64) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int64) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldDeletedAt, v))
}

// Cep applies equality check predicate on the "cep" field. It's identical to CepEQ.
func Cep(v int64) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldCep, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int64) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int64) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int64) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int64) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int64) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int64) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int64) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int64) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int64) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int64) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int64) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int64) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int64) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int64) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int64) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int64) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldDeletedAt, v))
}

// GpuVersionEQ applies the EQ predicate on the "gpu_version" field.
func GpuVersionEQ(v enums.GpuVersion) predicate.Price {
	vc := v
	return predicate.Price(sql.FieldEQ(FieldGpuVersion, vc))
}

// GpuVersionNEQ applies the NEQ predicate on the "gpu_version" field.
func GpuVersionNEQ(v enums.GpuVersion) predicate.Price {
	vc := v
	return predicate.Price(sql.FieldNEQ(FieldGpuVersion, vc))
}

// GpuVersionIn applies the In predicate on the "gpu_version" field.
func GpuVersionIn(vs ...enums.GpuVersion) predicate.Price {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Price(sql.FieldIn(FieldGpuVersion, v...))
}

// GpuVersionNotIn applies the NotIn predicate on the "gpu_version" field.
func GpuVersionNotIn(vs ...enums.GpuVersion) predicate.Price {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Price(sql.FieldNotIn(FieldGpuVersion, v...))
}

// MissionTypeEQ applies the EQ predicate on the "mission_type" field.
func MissionTypeEQ(v enums.MissionType) predicate.Price {
	vc := v
	return predicate.Price(sql.FieldEQ(FieldMissionType, vc))
}

// MissionTypeNEQ applies the NEQ predicate on the "mission_type" field.
func MissionTypeNEQ(v enums.MissionType) predicate.Price {
	vc := v
	return predicate.Price(sql.FieldNEQ(FieldMissionType, vc))
}

// MissionTypeIn applies the In predicate on the "mission_type" field.
func MissionTypeIn(vs ...enums.MissionType) predicate.Price {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Price(sql.FieldIn(FieldMissionType, v...))
}

// MissionTypeNotIn applies the NotIn predicate on the "mission_type" field.
func MissionTypeNotIn(vs ...enums.MissionType) predicate.Price {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Price(sql.FieldNotIn(FieldMissionType, v...))
}

// MissionCategoryEQ applies the EQ predicate on the "mission_category" field.
func MissionCategoryEQ(v enums.MissionCategory) predicate.Price {
	vc := v
	return predicate.Price(sql.FieldEQ(FieldMissionCategory, vc))
}

// MissionCategoryNEQ applies the NEQ predicate on the "mission_category" field.
func MissionCategoryNEQ(v enums.MissionCategory) predicate.Price {
	vc := v
	return predicate.Price(sql.FieldNEQ(FieldMissionCategory, vc))
}

// MissionCategoryIn applies the In predicate on the "mission_category" field.
func MissionCategoryIn(vs ...enums.MissionCategory) predicate.Price {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Price(sql.FieldIn(FieldMissionCategory, v...))
}

// MissionCategoryNotIn applies the NotIn predicate on the "mission_category" field.
func MissionCategoryNotIn(vs ...enums.MissionCategory) predicate.Price {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Price(sql.FieldNotIn(FieldMissionCategory, v...))
}

// MissionBillingTypeEQ applies the EQ predicate on the "mission_billing_type" field.
func MissionBillingTypeEQ(v enums.MissionBillingType) predicate.Price {
	vc := v
	return predicate.Price(sql.FieldEQ(FieldMissionBillingType, vc))
}

// MissionBillingTypeNEQ applies the NEQ predicate on the "mission_billing_type" field.
func MissionBillingTypeNEQ(v enums.MissionBillingType) predicate.Price {
	vc := v
	return predicate.Price(sql.FieldNEQ(FieldMissionBillingType, vc))
}

// MissionBillingTypeIn applies the In predicate on the "mission_billing_type" field.
func MissionBillingTypeIn(vs ...enums.MissionBillingType) predicate.Price {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Price(sql.FieldIn(FieldMissionBillingType, v...))
}

// MissionBillingTypeNotIn applies the NotIn predicate on the "mission_billing_type" field.
func MissionBillingTypeNotIn(vs ...enums.MissionBillingType) predicate.Price {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Price(sql.FieldNotIn(FieldMissionBillingType, v...))
}

// CepEQ applies the EQ predicate on the "cep" field.
func CepEQ(v int64) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldCep, v))
}

// CepNEQ applies the NEQ predicate on the "cep" field.
func CepNEQ(v int64) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldCep, v))
}

// CepIn applies the In predicate on the "cep" field.
func CepIn(vs ...int64) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldCep, vs...))
}

// CepNotIn applies the NotIn predicate on the "cep" field.
func CepNotIn(vs ...int64) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldCep, vs...))
}

// CepGT applies the GT predicate on the "cep" field.
func CepGT(v int64) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldCep, v))
}

// CepGTE applies the GTE predicate on the "cep" field.
func CepGTE(v int64) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldCep, v))
}

// CepLT applies the LT predicate on the "cep" field.
func CepLT(v int64) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldCep, v))
}

// CepLTE applies the LTE predicate on the "cep" field.
func CepLTE(v int64) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldCep, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Price) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Price) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Price) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		p(s.Not())
	})
}
