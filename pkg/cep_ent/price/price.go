// Code generated by ent, DO NOT EDIT.

package price

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

const (
	// Label holds the string label denoting the price type in the database.
	Label = "price"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldGpuVersion holds the string denoting the gpu_version field in the database.
	FieldGpuVersion = "gpu_version"
	// FieldMissionType holds the string denoting the mission_type field in the database.
	FieldMissionType = "mission_type"
	// FieldMissionCategory holds the string denoting the mission_category field in the database.
	FieldMissionCategory = "mission_category"
	// FieldMissionBillingType holds the string denoting the mission_billing_type field in the database.
	FieldMissionBillingType = "mission_billing_type"
	// FieldCep holds the string denoting the cep field in the database.
	FieldCep = "cep"
	// Table holds the table name of the price in the database.
	Table = "prices"
)

// Columns holds all SQL columns for price fields.
var Columns = []string{
	FieldID,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldGpuVersion,
	FieldMissionType,
	FieldMissionCategory,
	FieldMissionBillingType,
	FieldCep,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedBy holds the default value on creation for the "created_by" field.
	DefaultCreatedBy int64
	// DefaultUpdatedBy holds the default value on creation for the "updated_by" field.
	DefaultUpdatedBy int64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt time.Time
	// DefaultCep holds the default value on creation for the "cep" field.
	DefaultCep int64
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
)

const DefaultGpuVersion enums.GpuVersion = "RTX 2060"

// GpuVersionValidator is a validator for the "gpu_version" field enum values. It is called by the builders before save.
func GpuVersionValidator(gv enums.GpuVersion) error {
	switch gv {
	case "RTX 2060", "RTX 2060 Ti", "RTX 2070", "RTX 2070 Ti", "RTX 2080", "RTX 2080 Ti", "RTX 3060", "RTX 3060 Ti", "RTX 3070", "RTX 3070 Ti", "RTX 3080", "RTX 3080 Ti", "RTX 3090", "RTX 3090 Ti", "RTX 4060", "RTX 4060 Ti", "RTX 4070", "RTX 4070 Ti", "RTX 4080", "RTX 4090":
		return nil
	default:
		return fmt.Errorf("price: invalid enum value for gpu_version field: %q", gv)
	}
}

const DefaultMissionType enums.MissionType = "txt2img"

// MissionTypeValidator is a validator for the "mission_type" field enum values. It is called by the builders before save.
func MissionTypeValidator(mt enums.MissionType) error {
	switch mt {
	case "sd_time", "txt2img", "img2img", "jp_time", "wt_time", "extra-single-image":
		return nil
	default:
		return fmt.Errorf("price: invalid enum value for mission_type field: %q", mt)
	}
}

const DefaultMissionCategory enums.MissionCategory = "SD"

// MissionCategoryValidator is a validator for the "mission_category" field enum values. It is called by the builders before save.
func MissionCategoryValidator(mc enums.MissionCategory) error {
	switch mc {
	case "SD", "JP", "WT":
		return nil
	default:
		return fmt.Errorf("price: invalid enum value for mission_category field: %q", mc)
	}
}

const DefaultMissionBillingType enums.MissionBillingType = "count"

// MissionBillingTypeValidator is a validator for the "mission_billing_type" field enum values. It is called by the builders before save.
func MissionBillingTypeValidator(mbt enums.MissionBillingType) error {
	switch mbt {
	case "time", "count":
		return nil
	default:
		return fmt.Errorf("price: invalid enum value for mission_billing_type field: %q", mbt)
	}
}

// OrderOption defines the ordering options for the Price queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByGpuVersion orders the results by the gpu_version field.
func ByGpuVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGpuVersion, opts...).ToFunc()
}

// ByMissionType orders the results by the mission_type field.
func ByMissionType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMissionType, opts...).ToFunc()
}

// ByMissionCategory orders the results by the mission_category field.
func ByMissionCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMissionCategory, opts...).ToFunc()
}

// ByMissionBillingType orders the results by the mission_billing_type field.
func ByMissionBillingType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMissionBillingType, opts...).ToFunc()
}

// ByCep orders the results by the cep field.
func ByCep(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCep, opts...).ToFunc()
}
