// Code generated by ent, DO NOT EDIT.

package lottoprize

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the lottoprize type in the database.
	Label = "lotto_prize"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldLottoID holds the string denoting the lotto_id field in the database.
	FieldLottoID = "lotto_id"
	// FieldLevelName holds the string denoting the level_name field in the database.
	FieldLevelName = "level_name"
	// FieldWeight holds the string denoting the weight field in the database.
	FieldWeight = "weight"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldCepAmount holds the string denoting the cep_amount field in the database.
	FieldCepAmount = "cep_amount"
	// EdgeLotto holds the string denoting the lotto edge name in mutations.
	EdgeLotto = "lotto"
	// EdgeLottoRecords holds the string denoting the lotto_records edge name in mutations.
	EdgeLottoRecords = "lotto_records"
	// Table holds the table name of the lottoprize in the database.
	Table = "prizes"
	// LottoTable is the table that holds the lotto relation/edge.
	LottoTable = "prizes"
	// LottoInverseTable is the table name for the Lotto entity.
	// It exists in this package in order to avoid circular dependency with the "lotto" package.
	LottoInverseTable = "lottos"
	// LottoColumn is the table column denoting the lotto relation/edge.
	LottoColumn = "lotto_id"
	// LottoRecordsTable is the table that holds the lotto_records relation/edge.
	LottoRecordsTable = "lotto_records"
	// LottoRecordsInverseTable is the table name for the LottoRecord entity.
	// It exists in this package in order to avoid circular dependency with the "lottorecord" package.
	LottoRecordsInverseTable = "lotto_records"
	// LottoRecordsColumn is the table column denoting the lotto_records relation/edge.
	LottoRecordsColumn = "lotto_prize_id"
)

// Columns holds all SQL columns for lottoprize fields.
var Columns = []string{
	FieldID,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldLottoID,
	FieldLevelName,
	FieldWeight,
	FieldName,
	FieldStatus,
	FieldType,
	FieldCepAmount,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedBy holds the default value on creation for the "created_by" field.
	DefaultCreatedBy int64
	// DefaultUpdatedBy holds the default value on creation for the "updated_by" field.
	DefaultUpdatedBy int64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt time.Time
	// DefaultLottoID holds the default value on creation for the "lotto_id" field.
	DefaultLottoID int64
	// DefaultLevelName holds the default value on creation for the "level_name" field.
	DefaultLevelName string
	// DefaultWeight holds the default value on creation for the "weight" field.
	DefaultWeight int64
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// DefaultCepAmount holds the default value on creation for the "cep_amount" field.
	DefaultCepAmount int64
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
)

// Status defines the type for the "status" enum field.
type Status string

// StatusUnknow is the default value of the Status enum.
const DefaultStatus = StatusUnknow

// Status values.
const (
	StatusUnknow   Status = "unknow"
	StatusNormal   Status = "normal"
	StatusCanceled Status = "canceled"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusUnknow, StatusNormal, StatusCanceled:
		return nil
	default:
		return fmt.Errorf("lottoprize: invalid enum value for status field: %q", s)
	}
}

// Type defines the type for the "type" enum field.
type Type string

// TypeUnknow is the default value of the Type enum.
const DefaultType = TypeUnknow

// Type values.
const (
	TypeUnknow Type = "unknow"
	TypeGetCep Type = "get_cep"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeUnknow, TypeGetCep:
		return nil
	default:
		return fmt.Errorf("lottoprize: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the LottoPrize queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByLottoID orders the results by the lotto_id field.
func ByLottoID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLottoID, opts...).ToFunc()
}

// ByLevelName orders the results by the level_name field.
func ByLevelName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevelName, opts...).ToFunc()
}

// ByWeight orders the results by the weight field.
func ByWeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeight, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByCepAmount orders the results by the cep_amount field.
func ByCepAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCepAmount, opts...).ToFunc()
}

// ByLottoField orders the results by lotto field.
func ByLottoField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLottoStep(), sql.OrderByField(field, opts...))
	}
}

// ByLottoRecordsCount orders the results by lotto_records count.
func ByLottoRecordsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLottoRecordsStep(), opts...)
	}
}

// ByLottoRecords orders the results by lotto_records terms.
func ByLottoRecords(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLottoRecordsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newLottoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LottoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, LottoTable, LottoColumn),
	)
}
func newLottoRecordsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LottoRecordsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LottoRecordsTable, LottoRecordsColumn),
	)
}
