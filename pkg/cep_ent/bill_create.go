// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/bill"
	"cephalon-ent/pkg/cep_ent/missionconsumeorder"
	"cephalon-ent/pkg/cep_ent/missionproduceorder"
	"cephalon-ent/pkg/cep_ent/platformwallet"
	"cephalon-ent/pkg/cep_ent/rechargeorder"
	"cephalon-ent/pkg/cep_ent/user"
	"cephalon-ent/pkg/cep_ent/wallet"
	"cephalon-ent/pkg/enums"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BillCreate is the builder for creating a Bill entity.
type BillCreate struct {
	config
	mutation *BillMutation
	hooks    []Hook
}

// SetCreatedBy sets the "created_by" field.
func (bc *BillCreate) SetCreatedBy(i int64) *BillCreate {
	bc.mutation.SetCreatedBy(i)
	return bc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (bc *BillCreate) SetNillableCreatedBy(i *int64) *BillCreate {
	if i != nil {
		bc.SetCreatedBy(*i)
	}
	return bc
}

// SetUpdatedBy sets the "updated_by" field.
func (bc *BillCreate) SetUpdatedBy(i int64) *BillCreate {
	bc.mutation.SetUpdatedBy(i)
	return bc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (bc *BillCreate) SetNillableUpdatedBy(i *int64) *BillCreate {
	if i != nil {
		bc.SetUpdatedBy(*i)
	}
	return bc
}

// SetCreatedAt sets the "created_at" field.
func (bc *BillCreate) SetCreatedAt(t time.Time) *BillCreate {
	bc.mutation.SetCreatedAt(t)
	return bc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bc *BillCreate) SetNillableCreatedAt(t *time.Time) *BillCreate {
	if t != nil {
		bc.SetCreatedAt(*t)
	}
	return bc
}

// SetUpdatedAt sets the "updated_at" field.
func (bc *BillCreate) SetUpdatedAt(t time.Time) *BillCreate {
	bc.mutation.SetUpdatedAt(t)
	return bc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bc *BillCreate) SetNillableUpdatedAt(t *time.Time) *BillCreate {
	if t != nil {
		bc.SetUpdatedAt(*t)
	}
	return bc
}

// SetDeletedAt sets the "deleted_at" field.
func (bc *BillCreate) SetDeletedAt(t time.Time) *BillCreate {
	bc.mutation.SetDeletedAt(t)
	return bc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bc *BillCreate) SetNillableDeletedAt(t *time.Time) *BillCreate {
	if t != nil {
		bc.SetDeletedAt(*t)
	}
	return bc
}

// SetType sets the "type" field.
func (bc *BillCreate) SetType(et enums.BillType) *BillCreate {
	bc.mutation.SetType(et)
	return bc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (bc *BillCreate) SetNillableType(et *enums.BillType) *BillCreate {
	if et != nil {
		bc.SetType(*et)
	}
	return bc
}

// SetIsAdd sets the "is_add" field.
func (bc *BillCreate) SetIsAdd(b bool) *BillCreate {
	bc.mutation.SetIsAdd(b)
	return bc
}

// SetNillableIsAdd sets the "is_add" field if the given value is not nil.
func (bc *BillCreate) SetNillableIsAdd(b *bool) *BillCreate {
	if b != nil {
		bc.SetIsAdd(*b)
	}
	return bc
}

// SetUserID sets the "user_id" field.
func (bc *BillCreate) SetUserID(i int64) *BillCreate {
	bc.mutation.SetUserID(i)
	return bc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (bc *BillCreate) SetNillableUserID(i *int64) *BillCreate {
	if i != nil {
		bc.SetUserID(*i)
	}
	return bc
}

// SetSerialNumber sets the "serial_number" field.
func (bc *BillCreate) SetSerialNumber(s string) *BillCreate {
	bc.mutation.SetSerialNumber(s)
	return bc
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (bc *BillCreate) SetNillableSerialNumber(s *string) *BillCreate {
	if s != nil {
		bc.SetSerialNumber(*s)
	}
	return bc
}

// SetWalletID sets the "wallet_id" field.
func (bc *BillCreate) SetWalletID(i int64) *BillCreate {
	bc.mutation.SetWalletID(i)
	return bc
}

// SetNillableWalletID sets the "wallet_id" field if the given value is not nil.
func (bc *BillCreate) SetNillableWalletID(i *int64) *BillCreate {
	if i != nil {
		bc.SetWalletID(*i)
	}
	return bc
}

// SetCep sets the "cep" field.
func (bc *BillCreate) SetCep(i int64) *BillCreate {
	bc.mutation.SetCep(i)
	return bc
}

// SetNillableCep sets the "cep" field if the given value is not nil.
func (bc *BillCreate) SetNillableCep(i *int64) *BillCreate {
	if i != nil {
		bc.SetCep(*i)
	}
	return bc
}

// SetReasonID sets the "reason_id" field.
func (bc *BillCreate) SetReasonID(i int64) *BillCreate {
	bc.mutation.SetReasonID(i)
	return bc
}

// SetNillableReasonID sets the "reason_id" field if the given value is not nil.
func (bc *BillCreate) SetNillableReasonID(i *int64) *BillCreate {
	if i != nil {
		bc.SetReasonID(*i)
	}
	return bc
}

// SetStatus sets the "status" field.
func (bc *BillCreate) SetStatus(es enums.BillStatus) *BillCreate {
	bc.mutation.SetStatus(es)
	return bc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bc *BillCreate) SetNillableStatus(es *enums.BillStatus) *BillCreate {
	if es != nil {
		bc.SetStatus(*es)
	}
	return bc
}

// SetMarketBillID sets the "market_bill_id" field.
func (bc *BillCreate) SetMarketBillID(i int64) *BillCreate {
	bc.mutation.SetMarketBillID(i)
	return bc
}

// SetNillableMarketBillID sets the "market_bill_id" field if the given value is not nil.
func (bc *BillCreate) SetNillableMarketBillID(i *int64) *BillCreate {
	if i != nil {
		bc.SetMarketBillID(*i)
	}
	return bc
}

// SetPlatformWalletID sets the "platform_wallet_id" field.
func (bc *BillCreate) SetPlatformWalletID(i int64) *BillCreate {
	bc.mutation.SetPlatformWalletID(i)
	return bc
}

// SetNillablePlatformWalletID sets the "platform_wallet_id" field if the given value is not nil.
func (bc *BillCreate) SetNillablePlatformWalletID(i *int64) *BillCreate {
	if i != nil {
		bc.SetPlatformWalletID(*i)
	}
	return bc
}

// SetPlatformCep sets the "platform_cep" field.
func (bc *BillCreate) SetPlatformCep(i int64) *BillCreate {
	bc.mutation.SetPlatformCep(i)
	return bc
}

// SetNillablePlatformCep sets the "platform_cep" field if the given value is not nil.
func (bc *BillCreate) SetNillablePlatformCep(i *int64) *BillCreate {
	if i != nil {
		bc.SetPlatformCep(*i)
	}
	return bc
}

// SetID sets the "id" field.
func (bc *BillCreate) SetID(i int64) *BillCreate {
	bc.mutation.SetID(i)
	return bc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bc *BillCreate) SetNillableID(i *int64) *BillCreate {
	if i != nil {
		bc.SetID(*i)
	}
	return bc
}

// SetUser sets the "user" edge to the User entity.
func (bc *BillCreate) SetUser(u *User) *BillCreate {
	return bc.SetUserID(u.ID)
}

// SetWallet sets the "wallet" edge to the Wallet entity.
func (bc *BillCreate) SetWallet(w *Wallet) *BillCreate {
	return bc.SetWalletID(w.ID)
}

// SetPlatformWallet sets the "platform_wallet" edge to the PlatformWallet entity.
func (bc *BillCreate) SetPlatformWallet(p *PlatformWallet) *BillCreate {
	return bc.SetPlatformWalletID(p.ID)
}

// SetRechargeOrderID sets the "recharge_order" edge to the RechargeOrder entity by ID.
func (bc *BillCreate) SetRechargeOrderID(id int64) *BillCreate {
	bc.mutation.SetRechargeOrderID(id)
	return bc
}

// SetNillableRechargeOrderID sets the "recharge_order" edge to the RechargeOrder entity by ID if the given value is not nil.
func (bc *BillCreate) SetNillableRechargeOrderID(id *int64) *BillCreate {
	if id != nil {
		bc = bc.SetRechargeOrderID(*id)
	}
	return bc
}

// SetRechargeOrder sets the "recharge_order" edge to the RechargeOrder entity.
func (bc *BillCreate) SetRechargeOrder(r *RechargeOrder) *BillCreate {
	return bc.SetRechargeOrderID(r.ID)
}

// SetMissionConsumeOrderID sets the "mission_consume_order" edge to the MissionConsumeOrder entity by ID.
func (bc *BillCreate) SetMissionConsumeOrderID(id int64) *BillCreate {
	bc.mutation.SetMissionConsumeOrderID(id)
	return bc
}

// SetNillableMissionConsumeOrderID sets the "mission_consume_order" edge to the MissionConsumeOrder entity by ID if the given value is not nil.
func (bc *BillCreate) SetNillableMissionConsumeOrderID(id *int64) *BillCreate {
	if id != nil {
		bc = bc.SetMissionConsumeOrderID(*id)
	}
	return bc
}

// SetMissionConsumeOrder sets the "mission_consume_order" edge to the MissionConsumeOrder entity.
func (bc *BillCreate) SetMissionConsumeOrder(m *MissionConsumeOrder) *BillCreate {
	return bc.SetMissionConsumeOrderID(m.ID)
}

// SetMissionProduceOrderID sets the "mission_produce_order" edge to the MissionProduceOrder entity by ID.
func (bc *BillCreate) SetMissionProduceOrderID(id int64) *BillCreate {
	bc.mutation.SetMissionProduceOrderID(id)
	return bc
}

// SetNillableMissionProduceOrderID sets the "mission_produce_order" edge to the MissionProduceOrder entity by ID if the given value is not nil.
func (bc *BillCreate) SetNillableMissionProduceOrderID(id *int64) *BillCreate {
	if id != nil {
		bc = bc.SetMissionProduceOrderID(*id)
	}
	return bc
}

// SetMissionProduceOrder sets the "mission_produce_order" edge to the MissionProduceOrder entity.
func (bc *BillCreate) SetMissionProduceOrder(m *MissionProduceOrder) *BillCreate {
	return bc.SetMissionProduceOrderID(m.ID)
}

// Mutation returns the BillMutation object of the builder.
func (bc *BillCreate) Mutation() *BillMutation {
	return bc.mutation
}

// Save creates the Bill in the database.
func (bc *BillCreate) Save(ctx context.Context) (*Bill, error) {
	bc.defaults()
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BillCreate) SaveX(ctx context.Context) *Bill {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BillCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BillCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BillCreate) defaults() {
	if _, ok := bc.mutation.CreatedBy(); !ok {
		v := bill.DefaultCreatedBy
		bc.mutation.SetCreatedBy(v)
	}
	if _, ok := bc.mutation.UpdatedBy(); !ok {
		v := bill.DefaultUpdatedBy
		bc.mutation.SetUpdatedBy(v)
	}
	if _, ok := bc.mutation.CreatedAt(); !ok {
		v := bill.DefaultCreatedAt()
		bc.mutation.SetCreatedAt(v)
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		v := bill.DefaultUpdatedAt()
		bc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bc.mutation.DeletedAt(); !ok {
		v := bill.DefaultDeletedAt
		bc.mutation.SetDeletedAt(v)
	}
	if _, ok := bc.mutation.GetType(); !ok {
		v := bill.DefaultType
		bc.mutation.SetType(v)
	}
	if _, ok := bc.mutation.IsAdd(); !ok {
		v := bill.DefaultIsAdd
		bc.mutation.SetIsAdd(v)
	}
	if _, ok := bc.mutation.UserID(); !ok {
		v := bill.DefaultUserID
		bc.mutation.SetUserID(v)
	}
	if _, ok := bc.mutation.SerialNumber(); !ok {
		v := bill.DefaultSerialNumber
		bc.mutation.SetSerialNumber(v)
	}
	if _, ok := bc.mutation.WalletID(); !ok {
		v := bill.DefaultWalletID
		bc.mutation.SetWalletID(v)
	}
	if _, ok := bc.mutation.Cep(); !ok {
		v := bill.DefaultCep
		bc.mutation.SetCep(v)
	}
	if _, ok := bc.mutation.ReasonID(); !ok {
		v := bill.DefaultReasonID
		bc.mutation.SetReasonID(v)
	}
	if _, ok := bc.mutation.Status(); !ok {
		v := bill.DefaultStatus
		bc.mutation.SetStatus(v)
	}
	if _, ok := bc.mutation.MarketBillID(); !ok {
		v := bill.DefaultMarketBillID
		bc.mutation.SetMarketBillID(v)
	}
	if _, ok := bc.mutation.PlatformWalletID(); !ok {
		v := bill.DefaultPlatformWalletID
		bc.mutation.SetPlatformWalletID(v)
	}
	if _, ok := bc.mutation.PlatformCep(); !ok {
		v := bill.DefaultPlatformCep
		bc.mutation.SetPlatformCep(v)
	}
	if _, ok := bc.mutation.ID(); !ok {
		v := bill.DefaultID()
		bc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BillCreate) check() error {
	if _, ok := bc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "Bill.created_by"`)}
	}
	if _, ok := bc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "Bill.updated_by"`)}
	}
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "Bill.created_at"`)}
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "Bill.updated_at"`)}
	}
	if _, ok := bc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "Bill.deleted_at"`)}
	}
	if _, ok := bc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`cep_ent: missing required field "Bill.type"`)}
	}
	if v, ok := bc.mutation.GetType(); ok {
		if err := bill.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "Bill.type": %w`, err)}
		}
	}
	if _, ok := bc.mutation.IsAdd(); !ok {
		return &ValidationError{Name: "is_add", err: errors.New(`cep_ent: missing required field "Bill.is_add"`)}
	}
	if _, ok := bc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "Bill.user_id"`)}
	}
	if _, ok := bc.mutation.SerialNumber(); !ok {
		return &ValidationError{Name: "serial_number", err: errors.New(`cep_ent: missing required field "Bill.serial_number"`)}
	}
	if _, ok := bc.mutation.WalletID(); !ok {
		return &ValidationError{Name: "wallet_id", err: errors.New(`cep_ent: missing required field "Bill.wallet_id"`)}
	}
	if _, ok := bc.mutation.Cep(); !ok {
		return &ValidationError{Name: "cep", err: errors.New(`cep_ent: missing required field "Bill.cep"`)}
	}
	if _, ok := bc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`cep_ent: missing required field "Bill.status"`)}
	}
	if v, ok := bc.mutation.Status(); ok {
		if err := bill.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "Bill.status": %w`, err)}
		}
	}
	if _, ok := bc.mutation.MarketBillID(); !ok {
		return &ValidationError{Name: "market_bill_id", err: errors.New(`cep_ent: missing required field "Bill.market_bill_id"`)}
	}
	if _, ok := bc.mutation.PlatformWalletID(); !ok {
		return &ValidationError{Name: "platform_wallet_id", err: errors.New(`cep_ent: missing required field "Bill.platform_wallet_id"`)}
	}
	if _, ok := bc.mutation.PlatformCep(); !ok {
		return &ValidationError{Name: "platform_cep", err: errors.New(`cep_ent: missing required field "Bill.platform_cep"`)}
	}
	if _, ok := bc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "Bill.user"`)}
	}
	if _, ok := bc.mutation.WalletID(); !ok {
		return &ValidationError{Name: "wallet", err: errors.New(`cep_ent: missing required edge "Bill.wallet"`)}
	}
	if _, ok := bc.mutation.PlatformWalletID(); !ok {
		return &ValidationError{Name: "platform_wallet", err: errors.New(`cep_ent: missing required edge "Bill.platform_wallet"`)}
	}
	return nil
}

func (bc *BillCreate) sqlSave(ctx context.Context) (*Bill, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BillCreate) createSpec() (*Bill, *sqlgraph.CreateSpec) {
	var (
		_node = &Bill{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(bill.Table, sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64))
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bc.mutation.CreatedBy(); ok {
		_spec.SetField(bill.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := bc.mutation.UpdatedBy(); ok {
		_spec.SetField(bill.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.SetField(bill.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.SetField(bill.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bc.mutation.DeletedAt(); ok {
		_spec.SetField(bill.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := bc.mutation.GetType(); ok {
		_spec.SetField(bill.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := bc.mutation.IsAdd(); ok {
		_spec.SetField(bill.FieldIsAdd, field.TypeBool, value)
		_node.IsAdd = value
	}
	if value, ok := bc.mutation.SerialNumber(); ok {
		_spec.SetField(bill.FieldSerialNumber, field.TypeString, value)
		_node.SerialNumber = value
	}
	if value, ok := bc.mutation.Cep(); ok {
		_spec.SetField(bill.FieldCep, field.TypeInt64, value)
		_node.Cep = value
	}
	if value, ok := bc.mutation.Status(); ok {
		_spec.SetField(bill.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := bc.mutation.MarketBillID(); ok {
		_spec.SetField(bill.FieldMarketBillID, field.TypeInt64, value)
		_node.MarketBillID = value
	}
	if value, ok := bc.mutation.PlatformCep(); ok {
		_spec.SetField(bill.FieldPlatformCep, field.TypeInt64, value)
		_node.PlatformCep = value
	}
	if nodes := bc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.UserTable,
			Columns: []string{bill.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.WalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.WalletTable,
			Columns: []string{bill.WalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WalletID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.PlatformWalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.PlatformWalletTable,
			Columns: []string{bill.PlatformWalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformwallet.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PlatformWalletID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.RechargeOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.RechargeOrderTable,
			Columns: []string{bill.RechargeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rechargeorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ReasonID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.MissionConsumeOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.MissionConsumeOrderTable,
			Columns: []string{bill.MissionConsumeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ReasonID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.MissionProduceOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.MissionProduceOrderTable,
			Columns: []string{bill.MissionProduceOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ReasonID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BillCreateBulk is the builder for creating many Bill entities in bulk.
type BillCreateBulk struct {
	config
	builders []*BillCreate
}

// Save creates the Bill entities in the database.
func (bcb *BillCreateBulk) Save(ctx context.Context) ([]*Bill, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Bill, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BillMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BillCreateBulk) SaveX(ctx context.Context) []*Bill {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BillCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BillCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
