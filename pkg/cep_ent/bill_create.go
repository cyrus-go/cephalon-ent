// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/bill"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/invite"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionconsumeorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionproduceorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/transferorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// BillCreate is the builder for creating a Bill entity.
type BillCreate struct {
	config
	mutation *BillMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (bc *BillCreate) SetCreatedBy(i int64) *BillCreate {
	bc.mutation.SetCreatedBy(i)
	return bc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (bc *BillCreate) SetNillableCreatedBy(i *int64) *BillCreate {
	if i != nil {
		bc.SetCreatedBy(*i)
	}
	return bc
}

// SetUpdatedBy sets the "updated_by" field.
func (bc *BillCreate) SetUpdatedBy(i int64) *BillCreate {
	bc.mutation.SetUpdatedBy(i)
	return bc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (bc *BillCreate) SetNillableUpdatedBy(i *int64) *BillCreate {
	if i != nil {
		bc.SetUpdatedBy(*i)
	}
	return bc
}

// SetCreatedAt sets the "created_at" field.
func (bc *BillCreate) SetCreatedAt(t time.Time) *BillCreate {
	bc.mutation.SetCreatedAt(t)
	return bc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bc *BillCreate) SetNillableCreatedAt(t *time.Time) *BillCreate {
	if t != nil {
		bc.SetCreatedAt(*t)
	}
	return bc
}

// SetUpdatedAt sets the "updated_at" field.
func (bc *BillCreate) SetUpdatedAt(t time.Time) *BillCreate {
	bc.mutation.SetUpdatedAt(t)
	return bc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bc *BillCreate) SetNillableUpdatedAt(t *time.Time) *BillCreate {
	if t != nil {
		bc.SetUpdatedAt(*t)
	}
	return bc
}

// SetDeletedAt sets the "deleted_at" field.
func (bc *BillCreate) SetDeletedAt(t time.Time) *BillCreate {
	bc.mutation.SetDeletedAt(t)
	return bc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bc *BillCreate) SetNillableDeletedAt(t *time.Time) *BillCreate {
	if t != nil {
		bc.SetDeletedAt(*t)
	}
	return bc
}

// SetType sets the "type" field.
func (bc *BillCreate) SetType(et enums.BillType) *BillCreate {
	bc.mutation.SetType(et)
	return bc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (bc *BillCreate) SetNillableType(et *enums.BillType) *BillCreate {
	if et != nil {
		bc.SetType(*et)
	}
	return bc
}

// SetOrderID sets the "order_id" field.
func (bc *BillCreate) SetOrderID(i int64) *BillCreate {
	bc.mutation.SetOrderID(i)
	return bc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (bc *BillCreate) SetNillableOrderID(i *int64) *BillCreate {
	if i != nil {
		bc.SetOrderID(*i)
	}
	return bc
}

// SetWay sets the "way" field.
func (bc *BillCreate) SetWay(ew enums.BillWay) *BillCreate {
	bc.mutation.SetWay(ew)
	return bc
}

// SetNillableWay sets the "way" field if the given value is not nil.
func (bc *BillCreate) SetNillableWay(ew *enums.BillWay) *BillCreate {
	if ew != nil {
		bc.SetWay(*ew)
	}
	return bc
}

// SetSymbolID sets the "symbol_id" field.
func (bc *BillCreate) SetSymbolID(i int64) *BillCreate {
	bc.mutation.SetSymbolID(i)
	return bc
}

// SetNillableSymbolID sets the "symbol_id" field if the given value is not nil.
func (bc *BillCreate) SetNillableSymbolID(i *int64) *BillCreate {
	if i != nil {
		bc.SetSymbolID(*i)
	}
	return bc
}

// SetAmount sets the "amount" field.
func (bc *BillCreate) SetAmount(i int64) *BillCreate {
	bc.mutation.SetAmount(i)
	return bc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (bc *BillCreate) SetNillableAmount(i *int64) *BillCreate {
	if i != nil {
		bc.SetAmount(*i)
	}
	return bc
}

// SetTargetUserID sets the "target_user_id" field.
func (bc *BillCreate) SetTargetUserID(i int64) *BillCreate {
	bc.mutation.SetTargetUserID(i)
	return bc
}

// SetNillableTargetUserID sets the "target_user_id" field if the given value is not nil.
func (bc *BillCreate) SetNillableTargetUserID(i *int64) *BillCreate {
	if i != nil {
		bc.SetTargetUserID(*i)
	}
	return bc
}

// SetTargetBeforeAmount sets the "target_before_amount" field.
func (bc *BillCreate) SetTargetBeforeAmount(i int64) *BillCreate {
	bc.mutation.SetTargetBeforeAmount(i)
	return bc
}

// SetNillableTargetBeforeAmount sets the "target_before_amount" field if the given value is not nil.
func (bc *BillCreate) SetNillableTargetBeforeAmount(i *int64) *BillCreate {
	if i != nil {
		bc.SetTargetBeforeAmount(*i)
	}
	return bc
}

// SetTargetAfterAmount sets the "target_after_amount" field.
func (bc *BillCreate) SetTargetAfterAmount(i int64) *BillCreate {
	bc.mutation.SetTargetAfterAmount(i)
	return bc
}

// SetNillableTargetAfterAmount sets the "target_after_amount" field if the given value is not nil.
func (bc *BillCreate) SetNillableTargetAfterAmount(i *int64) *BillCreate {
	if i != nil {
		bc.SetTargetAfterAmount(*i)
	}
	return bc
}

// SetSourceUserID sets the "source_user_id" field.
func (bc *BillCreate) SetSourceUserID(i int64) *BillCreate {
	bc.mutation.SetSourceUserID(i)
	return bc
}

// SetNillableSourceUserID sets the "source_user_id" field if the given value is not nil.
func (bc *BillCreate) SetNillableSourceUserID(i *int64) *BillCreate {
	if i != nil {
		bc.SetSourceUserID(*i)
	}
	return bc
}

// SetSourceBeforeAmount sets the "source_before_amount" field.
func (bc *BillCreate) SetSourceBeforeAmount(i int64) *BillCreate {
	bc.mutation.SetSourceBeforeAmount(i)
	return bc
}

// SetNillableSourceBeforeAmount sets the "source_before_amount" field if the given value is not nil.
func (bc *BillCreate) SetNillableSourceBeforeAmount(i *int64) *BillCreate {
	if i != nil {
		bc.SetSourceBeforeAmount(*i)
	}
	return bc
}

// SetSourceAfterAmount sets the "source_after_amount" field.
func (bc *BillCreate) SetSourceAfterAmount(i int64) *BillCreate {
	bc.mutation.SetSourceAfterAmount(i)
	return bc
}

// SetNillableSourceAfterAmount sets the "source_after_amount" field if the given value is not nil.
func (bc *BillCreate) SetNillableSourceAfterAmount(i *int64) *BillCreate {
	if i != nil {
		bc.SetSourceAfterAmount(*i)
	}
	return bc
}

// SetSerialNumber sets the "serial_number" field.
func (bc *BillCreate) SetSerialNumber(s string) *BillCreate {
	bc.mutation.SetSerialNumber(s)
	return bc
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (bc *BillCreate) SetNillableSerialNumber(s *string) *BillCreate {
	if s != nil {
		bc.SetSerialNumber(*s)
	}
	return bc
}

// SetInviteID sets the "invite_id" field.
func (bc *BillCreate) SetInviteID(i int64) *BillCreate {
	bc.mutation.SetInviteID(i)
	return bc
}

// SetNillableInviteID sets the "invite_id" field if the given value is not nil.
func (bc *BillCreate) SetNillableInviteID(i *int64) *BillCreate {
	if i != nil {
		bc.SetInviteID(*i)
	}
	return bc
}

// SetID sets the "id" field.
func (bc *BillCreate) SetID(i int64) *BillCreate {
	bc.mutation.SetID(i)
	return bc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bc *BillCreate) SetNillableID(i *int64) *BillCreate {
	if i != nil {
		bc.SetID(*i)
	}
	return bc
}

// SetSourceUser sets the "source_user" edge to the User entity.
func (bc *BillCreate) SetSourceUser(u *User) *BillCreate {
	return bc.SetSourceUserID(u.ID)
}

// SetTargetUser sets the "target_user" edge to the User entity.
func (bc *BillCreate) SetTargetUser(u *User) *BillCreate {
	return bc.SetTargetUserID(u.ID)
}

// SetTransferOrderID sets the "transfer_order" edge to the TransferOrder entity by ID.
func (bc *BillCreate) SetTransferOrderID(id int64) *BillCreate {
	bc.mutation.SetTransferOrderID(id)
	return bc
}

// SetNillableTransferOrderID sets the "transfer_order" edge to the TransferOrder entity by ID if the given value is not nil.
func (bc *BillCreate) SetNillableTransferOrderID(id *int64) *BillCreate {
	if id != nil {
		bc = bc.SetTransferOrderID(*id)
	}
	return bc
}

// SetTransferOrder sets the "transfer_order" edge to the TransferOrder entity.
func (bc *BillCreate) SetTransferOrder(t *TransferOrder) *BillCreate {
	return bc.SetTransferOrderID(t.ID)
}

// SetMissionConsumeOrderID sets the "mission_consume_order" edge to the MissionConsumeOrder entity by ID.
func (bc *BillCreate) SetMissionConsumeOrderID(id int64) *BillCreate {
	bc.mutation.SetMissionConsumeOrderID(id)
	return bc
}

// SetNillableMissionConsumeOrderID sets the "mission_consume_order" edge to the MissionConsumeOrder entity by ID if the given value is not nil.
func (bc *BillCreate) SetNillableMissionConsumeOrderID(id *int64) *BillCreate {
	if id != nil {
		bc = bc.SetMissionConsumeOrderID(*id)
	}
	return bc
}

// SetMissionConsumeOrder sets the "mission_consume_order" edge to the MissionConsumeOrder entity.
func (bc *BillCreate) SetMissionConsumeOrder(m *MissionConsumeOrder) *BillCreate {
	return bc.SetMissionConsumeOrderID(m.ID)
}

// SetMissionProduceOrderID sets the "mission_produce_order" edge to the MissionProduceOrder entity by ID.
func (bc *BillCreate) SetMissionProduceOrderID(id int64) *BillCreate {
	bc.mutation.SetMissionProduceOrderID(id)
	return bc
}

// SetNillableMissionProduceOrderID sets the "mission_produce_order" edge to the MissionProduceOrder entity by ID if the given value is not nil.
func (bc *BillCreate) SetNillableMissionProduceOrderID(id *int64) *BillCreate {
	if id != nil {
		bc = bc.SetMissionProduceOrderID(*id)
	}
	return bc
}

// SetMissionProduceOrder sets the "mission_produce_order" edge to the MissionProduceOrder entity.
func (bc *BillCreate) SetMissionProduceOrder(m *MissionProduceOrder) *BillCreate {
	return bc.SetMissionProduceOrderID(m.ID)
}

// SetInvite sets the "invite" edge to the Invite entity.
func (bc *BillCreate) SetInvite(i *Invite) *BillCreate {
	return bc.SetInviteID(i.ID)
}

// Mutation returns the BillMutation object of the builder.
func (bc *BillCreate) Mutation() *BillMutation {
	return bc.mutation
}

// Save creates the Bill in the database.
func (bc *BillCreate) Save(ctx context.Context) (*Bill, error) {
	bc.defaults()
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BillCreate) SaveX(ctx context.Context) *Bill {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BillCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BillCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BillCreate) defaults() {
	if _, ok := bc.mutation.CreatedBy(); !ok {
		v := bill.DefaultCreatedBy
		bc.mutation.SetCreatedBy(v)
	}
	if _, ok := bc.mutation.UpdatedBy(); !ok {
		v := bill.DefaultUpdatedBy
		bc.mutation.SetUpdatedBy(v)
	}
	if _, ok := bc.mutation.CreatedAt(); !ok {
		v := bill.DefaultCreatedAt()
		bc.mutation.SetCreatedAt(v)
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		v := bill.DefaultUpdatedAt()
		bc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bc.mutation.DeletedAt(); !ok {
		v := bill.DefaultDeletedAt
		bc.mutation.SetDeletedAt(v)
	}
	if _, ok := bc.mutation.GetType(); !ok {
		v := bill.DefaultType
		bc.mutation.SetType(v)
	}
	if _, ok := bc.mutation.OrderID(); !ok {
		v := bill.DefaultOrderID
		bc.mutation.SetOrderID(v)
	}
	if _, ok := bc.mutation.Way(); !ok {
		v := bill.DefaultWay
		bc.mutation.SetWay(v)
	}
	if _, ok := bc.mutation.SymbolID(); !ok {
		v := bill.DefaultSymbolID
		bc.mutation.SetSymbolID(v)
	}
	if _, ok := bc.mutation.Amount(); !ok {
		v := bill.DefaultAmount
		bc.mutation.SetAmount(v)
	}
	if _, ok := bc.mutation.TargetUserID(); !ok {
		v := bill.DefaultTargetUserID
		bc.mutation.SetTargetUserID(v)
	}
	if _, ok := bc.mutation.TargetBeforeAmount(); !ok {
		v := bill.DefaultTargetBeforeAmount
		bc.mutation.SetTargetBeforeAmount(v)
	}
	if _, ok := bc.mutation.TargetAfterAmount(); !ok {
		v := bill.DefaultTargetAfterAmount
		bc.mutation.SetTargetAfterAmount(v)
	}
	if _, ok := bc.mutation.SourceUserID(); !ok {
		v := bill.DefaultSourceUserID
		bc.mutation.SetSourceUserID(v)
	}
	if _, ok := bc.mutation.SourceBeforeAmount(); !ok {
		v := bill.DefaultSourceBeforeAmount
		bc.mutation.SetSourceBeforeAmount(v)
	}
	if _, ok := bc.mutation.SourceAfterAmount(); !ok {
		v := bill.DefaultSourceAfterAmount
		bc.mutation.SetSourceAfterAmount(v)
	}
	if _, ok := bc.mutation.SerialNumber(); !ok {
		v := bill.DefaultSerialNumber
		bc.mutation.SetSerialNumber(v)
	}
	if _, ok := bc.mutation.InviteID(); !ok {
		v := bill.DefaultInviteID
		bc.mutation.SetInviteID(v)
	}
	if _, ok := bc.mutation.ID(); !ok {
		v := bill.DefaultID()
		bc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BillCreate) check() error {
	if _, ok := bc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "Bill.created_by"`)}
	}
	if _, ok := bc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "Bill.updated_by"`)}
	}
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "Bill.created_at"`)}
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "Bill.updated_at"`)}
	}
	if _, ok := bc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "Bill.deleted_at"`)}
	}
	if _, ok := bc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`cep_ent: missing required field "Bill.type"`)}
	}
	if v, ok := bc.mutation.GetType(); ok {
		if err := bill.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "Bill.type": %w`, err)}
		}
	}
	if _, ok := bc.mutation.Way(); !ok {
		return &ValidationError{Name: "way", err: errors.New(`cep_ent: missing required field "Bill.way"`)}
	}
	if v, ok := bc.mutation.Way(); ok {
		if err := bill.WayValidator(v); err != nil {
			return &ValidationError{Name: "way", err: fmt.Errorf(`cep_ent: validator failed for field "Bill.way": %w`, err)}
		}
	}
	if _, ok := bc.mutation.SymbolID(); !ok {
		return &ValidationError{Name: "symbol_id", err: errors.New(`cep_ent: missing required field "Bill.symbol_id"`)}
	}
	if _, ok := bc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`cep_ent: missing required field "Bill.amount"`)}
	}
	if _, ok := bc.mutation.TargetUserID(); !ok {
		return &ValidationError{Name: "target_user_id", err: errors.New(`cep_ent: missing required field "Bill.target_user_id"`)}
	}
	if _, ok := bc.mutation.TargetBeforeAmount(); !ok {
		return &ValidationError{Name: "target_before_amount", err: errors.New(`cep_ent: missing required field "Bill.target_before_amount"`)}
	}
	if _, ok := bc.mutation.TargetAfterAmount(); !ok {
		return &ValidationError{Name: "target_after_amount", err: errors.New(`cep_ent: missing required field "Bill.target_after_amount"`)}
	}
	if _, ok := bc.mutation.SourceUserID(); !ok {
		return &ValidationError{Name: "source_user_id", err: errors.New(`cep_ent: missing required field "Bill.source_user_id"`)}
	}
	if _, ok := bc.mutation.SourceBeforeAmount(); !ok {
		return &ValidationError{Name: "source_before_amount", err: errors.New(`cep_ent: missing required field "Bill.source_before_amount"`)}
	}
	if _, ok := bc.mutation.SourceAfterAmount(); !ok {
		return &ValidationError{Name: "source_after_amount", err: errors.New(`cep_ent: missing required field "Bill.source_after_amount"`)}
	}
	if _, ok := bc.mutation.SerialNumber(); !ok {
		return &ValidationError{Name: "serial_number", err: errors.New(`cep_ent: missing required field "Bill.serial_number"`)}
	}
	if _, ok := bc.mutation.InviteID(); !ok {
		return &ValidationError{Name: "invite_id", err: errors.New(`cep_ent: missing required field "Bill.invite_id"`)}
	}
	if _, ok := bc.mutation.SourceUserID(); !ok {
		return &ValidationError{Name: "source_user", err: errors.New(`cep_ent: missing required edge "Bill.source_user"`)}
	}
	if _, ok := bc.mutation.TargetUserID(); !ok {
		return &ValidationError{Name: "target_user", err: errors.New(`cep_ent: missing required edge "Bill.target_user"`)}
	}
	if _, ok := bc.mutation.InviteID(); !ok {
		return &ValidationError{Name: "invite", err: errors.New(`cep_ent: missing required edge "Bill.invite"`)}
	}
	return nil
}

func (bc *BillCreate) sqlSave(ctx context.Context) (*Bill, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BillCreate) createSpec() (*Bill, *sqlgraph.CreateSpec) {
	var (
		_node = &Bill{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(bill.Table, sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = bc.conflict
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bc.mutation.CreatedBy(); ok {
		_spec.SetField(bill.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := bc.mutation.UpdatedBy(); ok {
		_spec.SetField(bill.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.SetField(bill.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.SetField(bill.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bc.mutation.DeletedAt(); ok {
		_spec.SetField(bill.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := bc.mutation.GetType(); ok {
		_spec.SetField(bill.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := bc.mutation.Way(); ok {
		_spec.SetField(bill.FieldWay, field.TypeEnum, value)
		_node.Way = value
	}
	if value, ok := bc.mutation.SymbolID(); ok {
		_spec.SetField(bill.FieldSymbolID, field.TypeInt64, value)
		_node.SymbolID = value
	}
	if value, ok := bc.mutation.Amount(); ok {
		_spec.SetField(bill.FieldAmount, field.TypeInt64, value)
		_node.Amount = value
	}
	if value, ok := bc.mutation.TargetBeforeAmount(); ok {
		_spec.SetField(bill.FieldTargetBeforeAmount, field.TypeInt64, value)
		_node.TargetBeforeAmount = value
	}
	if value, ok := bc.mutation.TargetAfterAmount(); ok {
		_spec.SetField(bill.FieldTargetAfterAmount, field.TypeInt64, value)
		_node.TargetAfterAmount = value
	}
	if value, ok := bc.mutation.SourceBeforeAmount(); ok {
		_spec.SetField(bill.FieldSourceBeforeAmount, field.TypeInt64, value)
		_node.SourceBeforeAmount = value
	}
	if value, ok := bc.mutation.SourceAfterAmount(); ok {
		_spec.SetField(bill.FieldSourceAfterAmount, field.TypeInt64, value)
		_node.SourceAfterAmount = value
	}
	if value, ok := bc.mutation.SerialNumber(); ok {
		_spec.SetField(bill.FieldSerialNumber, field.TypeString, value)
		_node.SerialNumber = value
	}
	if nodes := bc.mutation.SourceUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.SourceUserTable,
			Columns: []string{bill.SourceUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SourceUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.TargetUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.TargetUserTable,
			Columns: []string{bill.TargetUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TargetUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.TransferOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.TransferOrderTable,
			Columns: []string{bill.TransferOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transferorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.MissionConsumeOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.MissionConsumeOrderTable,
			Columns: []string{bill.MissionConsumeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.MissionProduceOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.MissionProduceOrderTable,
			Columns: []string{bill.MissionProduceOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.InviteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.InviteTable,
			Columns: []string{bill.InviteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InviteID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Bill.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (bc *BillCreate) OnConflict(opts ...sql.ConflictOption) *BillUpsertOne {
	bc.conflict = opts
	return &BillUpsertOne{
		create: bc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Bill.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bc *BillCreate) OnConflictColumns(columns ...string) *BillUpsertOne {
	bc.conflict = append(bc.conflict, sql.ConflictColumns(columns...))
	return &BillUpsertOne{
		create: bc,
	}
}

type (
	// BillUpsertOne is the builder for "upsert"-ing
	//  one Bill node.
	BillUpsertOne struct {
		create *BillCreate
	}

	// BillUpsert is the "OnConflict" setter.
	BillUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *BillUpsert) SetCreatedBy(v int64) *BillUpsert {
	u.Set(bill.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *BillUpsert) UpdateCreatedBy() *BillUpsert {
	u.SetExcluded(bill.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *BillUpsert) AddCreatedBy(v int64) *BillUpsert {
	u.Add(bill.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *BillUpsert) SetUpdatedBy(v int64) *BillUpsert {
	u.Set(bill.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *BillUpsert) UpdateUpdatedBy() *BillUpsert {
	u.SetExcluded(bill.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *BillUpsert) AddUpdatedBy(v int64) *BillUpsert {
	u.Add(bill.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillUpsert) SetUpdatedAt(v time.Time) *BillUpsert {
	u.Set(bill.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillUpsert) UpdateUpdatedAt() *BillUpsert {
	u.SetExcluded(bill.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillUpsert) SetDeletedAt(v time.Time) *BillUpsert {
	u.Set(bill.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillUpsert) UpdateDeletedAt() *BillUpsert {
	u.SetExcluded(bill.FieldDeletedAt)
	return u
}

// SetType sets the "type" field.
func (u *BillUpsert) SetType(v enums.BillType) *BillUpsert {
	u.Set(bill.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *BillUpsert) UpdateType() *BillUpsert {
	u.SetExcluded(bill.FieldType)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *BillUpsert) SetOrderID(v int64) *BillUpsert {
	u.Set(bill.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *BillUpsert) UpdateOrderID() *BillUpsert {
	u.SetExcluded(bill.FieldOrderID)
	return u
}

// ClearOrderID clears the value of the "order_id" field.
func (u *BillUpsert) ClearOrderID() *BillUpsert {
	u.SetNull(bill.FieldOrderID)
	return u
}

// SetWay sets the "way" field.
func (u *BillUpsert) SetWay(v enums.BillWay) *BillUpsert {
	u.Set(bill.FieldWay, v)
	return u
}

// UpdateWay sets the "way" field to the value that was provided on create.
func (u *BillUpsert) UpdateWay() *BillUpsert {
	u.SetExcluded(bill.FieldWay)
	return u
}

// SetSymbolID sets the "symbol_id" field.
func (u *BillUpsert) SetSymbolID(v int64) *BillUpsert {
	u.Set(bill.FieldSymbolID, v)
	return u
}

// UpdateSymbolID sets the "symbol_id" field to the value that was provided on create.
func (u *BillUpsert) UpdateSymbolID() *BillUpsert {
	u.SetExcluded(bill.FieldSymbolID)
	return u
}

// AddSymbolID adds v to the "symbol_id" field.
func (u *BillUpsert) AddSymbolID(v int64) *BillUpsert {
	u.Add(bill.FieldSymbolID, v)
	return u
}

// SetAmount sets the "amount" field.
func (u *BillUpsert) SetAmount(v int64) *BillUpsert {
	u.Set(bill.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *BillUpsert) UpdateAmount() *BillUpsert {
	u.SetExcluded(bill.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *BillUpsert) AddAmount(v int64) *BillUpsert {
	u.Add(bill.FieldAmount, v)
	return u
}

// SetTargetUserID sets the "target_user_id" field.
func (u *BillUpsert) SetTargetUserID(v int64) *BillUpsert {
	u.Set(bill.FieldTargetUserID, v)
	return u
}

// UpdateTargetUserID sets the "target_user_id" field to the value that was provided on create.
func (u *BillUpsert) UpdateTargetUserID() *BillUpsert {
	u.SetExcluded(bill.FieldTargetUserID)
	return u
}

// SetTargetBeforeAmount sets the "target_before_amount" field.
func (u *BillUpsert) SetTargetBeforeAmount(v int64) *BillUpsert {
	u.Set(bill.FieldTargetBeforeAmount, v)
	return u
}

// UpdateTargetBeforeAmount sets the "target_before_amount" field to the value that was provided on create.
func (u *BillUpsert) UpdateTargetBeforeAmount() *BillUpsert {
	u.SetExcluded(bill.FieldTargetBeforeAmount)
	return u
}

// AddTargetBeforeAmount adds v to the "target_before_amount" field.
func (u *BillUpsert) AddTargetBeforeAmount(v int64) *BillUpsert {
	u.Add(bill.FieldTargetBeforeAmount, v)
	return u
}

// SetTargetAfterAmount sets the "target_after_amount" field.
func (u *BillUpsert) SetTargetAfterAmount(v int64) *BillUpsert {
	u.Set(bill.FieldTargetAfterAmount, v)
	return u
}

// UpdateTargetAfterAmount sets the "target_after_amount" field to the value that was provided on create.
func (u *BillUpsert) UpdateTargetAfterAmount() *BillUpsert {
	u.SetExcluded(bill.FieldTargetAfterAmount)
	return u
}

// AddTargetAfterAmount adds v to the "target_after_amount" field.
func (u *BillUpsert) AddTargetAfterAmount(v int64) *BillUpsert {
	u.Add(bill.FieldTargetAfterAmount, v)
	return u
}

// SetSourceUserID sets the "source_user_id" field.
func (u *BillUpsert) SetSourceUserID(v int64) *BillUpsert {
	u.Set(bill.FieldSourceUserID, v)
	return u
}

// UpdateSourceUserID sets the "source_user_id" field to the value that was provided on create.
func (u *BillUpsert) UpdateSourceUserID() *BillUpsert {
	u.SetExcluded(bill.FieldSourceUserID)
	return u
}

// SetSourceBeforeAmount sets the "source_before_amount" field.
func (u *BillUpsert) SetSourceBeforeAmount(v int64) *BillUpsert {
	u.Set(bill.FieldSourceBeforeAmount, v)
	return u
}

// UpdateSourceBeforeAmount sets the "source_before_amount" field to the value that was provided on create.
func (u *BillUpsert) UpdateSourceBeforeAmount() *BillUpsert {
	u.SetExcluded(bill.FieldSourceBeforeAmount)
	return u
}

// AddSourceBeforeAmount adds v to the "source_before_amount" field.
func (u *BillUpsert) AddSourceBeforeAmount(v int64) *BillUpsert {
	u.Add(bill.FieldSourceBeforeAmount, v)
	return u
}

// SetSourceAfterAmount sets the "source_after_amount" field.
func (u *BillUpsert) SetSourceAfterAmount(v int64) *BillUpsert {
	u.Set(bill.FieldSourceAfterAmount, v)
	return u
}

// UpdateSourceAfterAmount sets the "source_after_amount" field to the value that was provided on create.
func (u *BillUpsert) UpdateSourceAfterAmount() *BillUpsert {
	u.SetExcluded(bill.FieldSourceAfterAmount)
	return u
}

// AddSourceAfterAmount adds v to the "source_after_amount" field.
func (u *BillUpsert) AddSourceAfterAmount(v int64) *BillUpsert {
	u.Add(bill.FieldSourceAfterAmount, v)
	return u
}

// SetSerialNumber sets the "serial_number" field.
func (u *BillUpsert) SetSerialNumber(v string) *BillUpsert {
	u.Set(bill.FieldSerialNumber, v)
	return u
}

// UpdateSerialNumber sets the "serial_number" field to the value that was provided on create.
func (u *BillUpsert) UpdateSerialNumber() *BillUpsert {
	u.SetExcluded(bill.FieldSerialNumber)
	return u
}

// SetInviteID sets the "invite_id" field.
func (u *BillUpsert) SetInviteID(v int64) *BillUpsert {
	u.Set(bill.FieldInviteID, v)
	return u
}

// UpdateInviteID sets the "invite_id" field to the value that was provided on create.
func (u *BillUpsert) UpdateInviteID() *BillUpsert {
	u.SetExcluded(bill.FieldInviteID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Bill.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(bill.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillUpsertOne) UpdateNewValues() *BillUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(bill.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(bill.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Bill.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BillUpsertOne) Ignore() *BillUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillUpsertOne) DoNothing() *BillUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillCreate.OnConflict
// documentation for more info.
func (u *BillUpsertOne) Update(set func(*BillUpsert)) *BillUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *BillUpsertOne) SetCreatedBy(v int64) *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *BillUpsertOne) AddCreatedBy(v int64) *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *BillUpsertOne) UpdateCreatedBy() *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *BillUpsertOne) SetUpdatedBy(v int64) *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *BillUpsertOne) AddUpdatedBy(v int64) *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *BillUpsertOne) UpdateUpdatedBy() *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillUpsertOne) SetUpdatedAt(v time.Time) *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillUpsertOne) UpdateUpdatedAt() *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillUpsertOne) SetDeletedAt(v time.Time) *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillUpsertOne) UpdateDeletedAt() *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetType sets the "type" field.
func (u *BillUpsertOne) SetType(v enums.BillType) *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *BillUpsertOne) UpdateType() *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.UpdateType()
	})
}

// SetOrderID sets the "order_id" field.
func (u *BillUpsertOne) SetOrderID(v int64) *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *BillUpsertOne) UpdateOrderID() *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *BillUpsertOne) ClearOrderID() *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.ClearOrderID()
	})
}

// SetWay sets the "way" field.
func (u *BillUpsertOne) SetWay(v enums.BillWay) *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.SetWay(v)
	})
}

// UpdateWay sets the "way" field to the value that was provided on create.
func (u *BillUpsertOne) UpdateWay() *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.UpdateWay()
	})
}

// SetSymbolID sets the "symbol_id" field.
func (u *BillUpsertOne) SetSymbolID(v int64) *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.SetSymbolID(v)
	})
}

// AddSymbolID adds v to the "symbol_id" field.
func (u *BillUpsertOne) AddSymbolID(v int64) *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.AddSymbolID(v)
	})
}

// UpdateSymbolID sets the "symbol_id" field to the value that was provided on create.
func (u *BillUpsertOne) UpdateSymbolID() *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.UpdateSymbolID()
	})
}

// SetAmount sets the "amount" field.
func (u *BillUpsertOne) SetAmount(v int64) *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *BillUpsertOne) AddAmount(v int64) *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *BillUpsertOne) UpdateAmount() *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.UpdateAmount()
	})
}

// SetTargetUserID sets the "target_user_id" field.
func (u *BillUpsertOne) SetTargetUserID(v int64) *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.SetTargetUserID(v)
	})
}

// UpdateTargetUserID sets the "target_user_id" field to the value that was provided on create.
func (u *BillUpsertOne) UpdateTargetUserID() *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.UpdateTargetUserID()
	})
}

// SetTargetBeforeAmount sets the "target_before_amount" field.
func (u *BillUpsertOne) SetTargetBeforeAmount(v int64) *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.SetTargetBeforeAmount(v)
	})
}

// AddTargetBeforeAmount adds v to the "target_before_amount" field.
func (u *BillUpsertOne) AddTargetBeforeAmount(v int64) *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.AddTargetBeforeAmount(v)
	})
}

// UpdateTargetBeforeAmount sets the "target_before_amount" field to the value that was provided on create.
func (u *BillUpsertOne) UpdateTargetBeforeAmount() *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.UpdateTargetBeforeAmount()
	})
}

// SetTargetAfterAmount sets the "target_after_amount" field.
func (u *BillUpsertOne) SetTargetAfterAmount(v int64) *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.SetTargetAfterAmount(v)
	})
}

// AddTargetAfterAmount adds v to the "target_after_amount" field.
func (u *BillUpsertOne) AddTargetAfterAmount(v int64) *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.AddTargetAfterAmount(v)
	})
}

// UpdateTargetAfterAmount sets the "target_after_amount" field to the value that was provided on create.
func (u *BillUpsertOne) UpdateTargetAfterAmount() *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.UpdateTargetAfterAmount()
	})
}

// SetSourceUserID sets the "source_user_id" field.
func (u *BillUpsertOne) SetSourceUserID(v int64) *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.SetSourceUserID(v)
	})
}

// UpdateSourceUserID sets the "source_user_id" field to the value that was provided on create.
func (u *BillUpsertOne) UpdateSourceUserID() *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.UpdateSourceUserID()
	})
}

// SetSourceBeforeAmount sets the "source_before_amount" field.
func (u *BillUpsertOne) SetSourceBeforeAmount(v int64) *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.SetSourceBeforeAmount(v)
	})
}

// AddSourceBeforeAmount adds v to the "source_before_amount" field.
func (u *BillUpsertOne) AddSourceBeforeAmount(v int64) *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.AddSourceBeforeAmount(v)
	})
}

// UpdateSourceBeforeAmount sets the "source_before_amount" field to the value that was provided on create.
func (u *BillUpsertOne) UpdateSourceBeforeAmount() *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.UpdateSourceBeforeAmount()
	})
}

// SetSourceAfterAmount sets the "source_after_amount" field.
func (u *BillUpsertOne) SetSourceAfterAmount(v int64) *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.SetSourceAfterAmount(v)
	})
}

// AddSourceAfterAmount adds v to the "source_after_amount" field.
func (u *BillUpsertOne) AddSourceAfterAmount(v int64) *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.AddSourceAfterAmount(v)
	})
}

// UpdateSourceAfterAmount sets the "source_after_amount" field to the value that was provided on create.
func (u *BillUpsertOne) UpdateSourceAfterAmount() *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.UpdateSourceAfterAmount()
	})
}

// SetSerialNumber sets the "serial_number" field.
func (u *BillUpsertOne) SetSerialNumber(v string) *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.SetSerialNumber(v)
	})
}

// UpdateSerialNumber sets the "serial_number" field to the value that was provided on create.
func (u *BillUpsertOne) UpdateSerialNumber() *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.UpdateSerialNumber()
	})
}

// SetInviteID sets the "invite_id" field.
func (u *BillUpsertOne) SetInviteID(v int64) *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.SetInviteID(v)
	})
}

// UpdateInviteID sets the "invite_id" field to the value that was provided on create.
func (u *BillUpsertOne) UpdateInviteID() *BillUpsertOne {
	return u.Update(func(s *BillUpsert) {
		s.UpdateInviteID()
	})
}

// Exec executes the query.
func (u *BillUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for BillCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BillUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BillUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BillCreateBulk is the builder for creating many Bill entities in bulk.
type BillCreateBulk struct {
	config
	err      error
	builders []*BillCreate
	conflict []sql.ConflictOption
}

// Save creates the Bill entities in the database.
func (bcb *BillCreateBulk) Save(ctx context.Context) ([]*Bill, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Bill, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BillMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BillCreateBulk) SaveX(ctx context.Context) []*Bill {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BillCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BillCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Bill.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (bcb *BillCreateBulk) OnConflict(opts ...sql.ConflictOption) *BillUpsertBulk {
	bcb.conflict = opts
	return &BillUpsertBulk{
		create: bcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Bill.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bcb *BillCreateBulk) OnConflictColumns(columns ...string) *BillUpsertBulk {
	bcb.conflict = append(bcb.conflict, sql.ConflictColumns(columns...))
	return &BillUpsertBulk{
		create: bcb,
	}
}

// BillUpsertBulk is the builder for "upsert"-ing
// a bulk of Bill nodes.
type BillUpsertBulk struct {
	create *BillCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Bill.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(bill.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillUpsertBulk) UpdateNewValues() *BillUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(bill.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(bill.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Bill.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BillUpsertBulk) Ignore() *BillUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillUpsertBulk) DoNothing() *BillUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillCreateBulk.OnConflict
// documentation for more info.
func (u *BillUpsertBulk) Update(set func(*BillUpsert)) *BillUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *BillUpsertBulk) SetCreatedBy(v int64) *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *BillUpsertBulk) AddCreatedBy(v int64) *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *BillUpsertBulk) UpdateCreatedBy() *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *BillUpsertBulk) SetUpdatedBy(v int64) *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *BillUpsertBulk) AddUpdatedBy(v int64) *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *BillUpsertBulk) UpdateUpdatedBy() *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillUpsertBulk) SetUpdatedAt(v time.Time) *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillUpsertBulk) UpdateUpdatedAt() *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillUpsertBulk) SetDeletedAt(v time.Time) *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillUpsertBulk) UpdateDeletedAt() *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetType sets the "type" field.
func (u *BillUpsertBulk) SetType(v enums.BillType) *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *BillUpsertBulk) UpdateType() *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.UpdateType()
	})
}

// SetOrderID sets the "order_id" field.
func (u *BillUpsertBulk) SetOrderID(v int64) *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *BillUpsertBulk) UpdateOrderID() *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *BillUpsertBulk) ClearOrderID() *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.ClearOrderID()
	})
}

// SetWay sets the "way" field.
func (u *BillUpsertBulk) SetWay(v enums.BillWay) *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.SetWay(v)
	})
}

// UpdateWay sets the "way" field to the value that was provided on create.
func (u *BillUpsertBulk) UpdateWay() *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.UpdateWay()
	})
}

// SetSymbolID sets the "symbol_id" field.
func (u *BillUpsertBulk) SetSymbolID(v int64) *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.SetSymbolID(v)
	})
}

// AddSymbolID adds v to the "symbol_id" field.
func (u *BillUpsertBulk) AddSymbolID(v int64) *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.AddSymbolID(v)
	})
}

// UpdateSymbolID sets the "symbol_id" field to the value that was provided on create.
func (u *BillUpsertBulk) UpdateSymbolID() *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.UpdateSymbolID()
	})
}

// SetAmount sets the "amount" field.
func (u *BillUpsertBulk) SetAmount(v int64) *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *BillUpsertBulk) AddAmount(v int64) *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *BillUpsertBulk) UpdateAmount() *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.UpdateAmount()
	})
}

// SetTargetUserID sets the "target_user_id" field.
func (u *BillUpsertBulk) SetTargetUserID(v int64) *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.SetTargetUserID(v)
	})
}

// UpdateTargetUserID sets the "target_user_id" field to the value that was provided on create.
func (u *BillUpsertBulk) UpdateTargetUserID() *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.UpdateTargetUserID()
	})
}

// SetTargetBeforeAmount sets the "target_before_amount" field.
func (u *BillUpsertBulk) SetTargetBeforeAmount(v int64) *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.SetTargetBeforeAmount(v)
	})
}

// AddTargetBeforeAmount adds v to the "target_before_amount" field.
func (u *BillUpsertBulk) AddTargetBeforeAmount(v int64) *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.AddTargetBeforeAmount(v)
	})
}

// UpdateTargetBeforeAmount sets the "target_before_amount" field to the value that was provided on create.
func (u *BillUpsertBulk) UpdateTargetBeforeAmount() *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.UpdateTargetBeforeAmount()
	})
}

// SetTargetAfterAmount sets the "target_after_amount" field.
func (u *BillUpsertBulk) SetTargetAfterAmount(v int64) *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.SetTargetAfterAmount(v)
	})
}

// AddTargetAfterAmount adds v to the "target_after_amount" field.
func (u *BillUpsertBulk) AddTargetAfterAmount(v int64) *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.AddTargetAfterAmount(v)
	})
}

// UpdateTargetAfterAmount sets the "target_after_amount" field to the value that was provided on create.
func (u *BillUpsertBulk) UpdateTargetAfterAmount() *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.UpdateTargetAfterAmount()
	})
}

// SetSourceUserID sets the "source_user_id" field.
func (u *BillUpsertBulk) SetSourceUserID(v int64) *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.SetSourceUserID(v)
	})
}

// UpdateSourceUserID sets the "source_user_id" field to the value that was provided on create.
func (u *BillUpsertBulk) UpdateSourceUserID() *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.UpdateSourceUserID()
	})
}

// SetSourceBeforeAmount sets the "source_before_amount" field.
func (u *BillUpsertBulk) SetSourceBeforeAmount(v int64) *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.SetSourceBeforeAmount(v)
	})
}

// AddSourceBeforeAmount adds v to the "source_before_amount" field.
func (u *BillUpsertBulk) AddSourceBeforeAmount(v int64) *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.AddSourceBeforeAmount(v)
	})
}

// UpdateSourceBeforeAmount sets the "source_before_amount" field to the value that was provided on create.
func (u *BillUpsertBulk) UpdateSourceBeforeAmount() *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.UpdateSourceBeforeAmount()
	})
}

// SetSourceAfterAmount sets the "source_after_amount" field.
func (u *BillUpsertBulk) SetSourceAfterAmount(v int64) *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.SetSourceAfterAmount(v)
	})
}

// AddSourceAfterAmount adds v to the "source_after_amount" field.
func (u *BillUpsertBulk) AddSourceAfterAmount(v int64) *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.AddSourceAfterAmount(v)
	})
}

// UpdateSourceAfterAmount sets the "source_after_amount" field to the value that was provided on create.
func (u *BillUpsertBulk) UpdateSourceAfterAmount() *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.UpdateSourceAfterAmount()
	})
}

// SetSerialNumber sets the "serial_number" field.
func (u *BillUpsertBulk) SetSerialNumber(v string) *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.SetSerialNumber(v)
	})
}

// UpdateSerialNumber sets the "serial_number" field to the value that was provided on create.
func (u *BillUpsertBulk) UpdateSerialNumber() *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.UpdateSerialNumber()
	})
}

// SetInviteID sets the "invite_id" field.
func (u *BillUpsertBulk) SetInviteID(v int64) *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.SetInviteID(v)
	})
}

// UpdateInviteID sets the "invite_id" field to the value that was provided on create.
func (u *BillUpsertBulk) UpdateInviteID() *BillUpsertBulk {
	return u.Update(func(s *BillUpsert) {
		s.UpdateInviteID()
	})
}

// Exec executes the query.
func (u *BillUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the BillCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for BillCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
