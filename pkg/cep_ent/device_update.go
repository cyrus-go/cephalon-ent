// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/device"
	"cephalon-ent/pkg/cep_ent/missionproduceorder"
	"cephalon-ent/pkg/cep_ent/missionproduction"
	"cephalon-ent/pkg/cep_ent/predicate"
	"cephalon-ent/pkg/cep_ent/user"
	"cephalon-ent/pkg/cep_ent/userdevice"
	"cephalon-ent/pkg/enums"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeviceUpdate is the builder for updating Device entities.
type DeviceUpdate struct {
	config
	hooks    []Hook
	mutation *DeviceMutation
}

// Where appends a list predicates to the DeviceUpdate builder.
func (du *DeviceUpdate) Where(ps ...predicate.Device) *DeviceUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetCreatedBy sets the "created_by" field.
func (du *DeviceUpdate) SetCreatedBy(i int64) *DeviceUpdate {
	du.mutation.ResetCreatedBy()
	du.mutation.SetCreatedBy(i)
	return du
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableCreatedBy(i *int64) *DeviceUpdate {
	if i != nil {
		du.SetCreatedBy(*i)
	}
	return du
}

// AddCreatedBy adds i to the "created_by" field.
func (du *DeviceUpdate) AddCreatedBy(i int64) *DeviceUpdate {
	du.mutation.AddCreatedBy(i)
	return du
}

// SetUpdatedBy sets the "updated_by" field.
func (du *DeviceUpdate) SetUpdatedBy(i int64) *DeviceUpdate {
	du.mutation.ResetUpdatedBy()
	du.mutation.SetUpdatedBy(i)
	return du
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableUpdatedBy(i *int64) *DeviceUpdate {
	if i != nil {
		du.SetUpdatedBy(*i)
	}
	return du
}

// AddUpdatedBy adds i to the "updated_by" field.
func (du *DeviceUpdate) AddUpdatedBy(i int64) *DeviceUpdate {
	du.mutation.AddUpdatedBy(i)
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DeviceUpdate) SetUpdatedAt(t time.Time) *DeviceUpdate {
	du.mutation.SetUpdatedAt(t)
	return du
}

// SetDeletedAt sets the "deleted_at" field.
func (du *DeviceUpdate) SetDeletedAt(t time.Time) *DeviceUpdate {
	du.mutation.SetDeletedAt(t)
	return du
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableDeletedAt(t *time.Time) *DeviceUpdate {
	if t != nil {
		du.SetDeletedAt(*t)
	}
	return du
}

// SetUserID sets the "user_id" field.
func (du *DeviceUpdate) SetUserID(i int64) *DeviceUpdate {
	du.mutation.SetUserID(i)
	return du
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableUserID(i *int64) *DeviceUpdate {
	if i != nil {
		du.SetUserID(*i)
	}
	return du
}

// SetStatus sets the "status" field.
func (du *DeviceUpdate) SetStatus(es enums.DeviceStatus) *DeviceUpdate {
	du.mutation.SetStatus(es)
	return du
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableStatus(es *enums.DeviceStatus) *DeviceUpdate {
	if es != nil {
		du.SetStatus(*es)
	}
	return du
}

// SetBindingStatus sets the "binding_status" field.
func (du *DeviceUpdate) SetBindingStatus(ebs enums.DeviceBindingStatus) *DeviceUpdate {
	du.mutation.SetBindingStatus(ebs)
	return du
}

// SetNillableBindingStatus sets the "binding_status" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableBindingStatus(ebs *enums.DeviceBindingStatus) *DeviceUpdate {
	if ebs != nil {
		du.SetBindingStatus(*ebs)
	}
	return du
}

// SetUser sets the "user" edge to the User entity.
func (du *DeviceUpdate) SetUser(u *User) *DeviceUpdate {
	return du.SetUserID(u.ID)
}

// AddMissionProduceOrderIDs adds the "mission_produce_orders" edge to the MissionProduceOrder entity by IDs.
func (du *DeviceUpdate) AddMissionProduceOrderIDs(ids ...int64) *DeviceUpdate {
	du.mutation.AddMissionProduceOrderIDs(ids...)
	return du
}

// AddMissionProduceOrders adds the "mission_produce_orders" edges to the MissionProduceOrder entity.
func (du *DeviceUpdate) AddMissionProduceOrders(m ...*MissionProduceOrder) *DeviceUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return du.AddMissionProduceOrderIDs(ids...)
}

// AddMissionProductionIDs adds the "mission_productions" edge to the MissionProduction entity by IDs.
func (du *DeviceUpdate) AddMissionProductionIDs(ids ...int64) *DeviceUpdate {
	du.mutation.AddMissionProductionIDs(ids...)
	return du
}

// AddMissionProductions adds the "mission_productions" edges to the MissionProduction entity.
func (du *DeviceUpdate) AddMissionProductions(m ...*MissionProduction) *DeviceUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return du.AddMissionProductionIDs(ids...)
}

// AddUserDeviceIDs adds the "user_devices" edge to the UserDevice entity by IDs.
func (du *DeviceUpdate) AddUserDeviceIDs(ids ...int64) *DeviceUpdate {
	du.mutation.AddUserDeviceIDs(ids...)
	return du
}

// AddUserDevices adds the "user_devices" edges to the UserDevice entity.
func (du *DeviceUpdate) AddUserDevices(u ...*UserDevice) *DeviceUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return du.AddUserDeviceIDs(ids...)
}

// Mutation returns the DeviceMutation object of the builder.
func (du *DeviceUpdate) Mutation() *DeviceMutation {
	return du.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (du *DeviceUpdate) ClearUser() *DeviceUpdate {
	du.mutation.ClearUser()
	return du
}

// ClearMissionProduceOrders clears all "mission_produce_orders" edges to the MissionProduceOrder entity.
func (du *DeviceUpdate) ClearMissionProduceOrders() *DeviceUpdate {
	du.mutation.ClearMissionProduceOrders()
	return du
}

// RemoveMissionProduceOrderIDs removes the "mission_produce_orders" edge to MissionProduceOrder entities by IDs.
func (du *DeviceUpdate) RemoveMissionProduceOrderIDs(ids ...int64) *DeviceUpdate {
	du.mutation.RemoveMissionProduceOrderIDs(ids...)
	return du
}

// RemoveMissionProduceOrders removes "mission_produce_orders" edges to MissionProduceOrder entities.
func (du *DeviceUpdate) RemoveMissionProduceOrders(m ...*MissionProduceOrder) *DeviceUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return du.RemoveMissionProduceOrderIDs(ids...)
}

// ClearMissionProductions clears all "mission_productions" edges to the MissionProduction entity.
func (du *DeviceUpdate) ClearMissionProductions() *DeviceUpdate {
	du.mutation.ClearMissionProductions()
	return du
}

// RemoveMissionProductionIDs removes the "mission_productions" edge to MissionProduction entities by IDs.
func (du *DeviceUpdate) RemoveMissionProductionIDs(ids ...int64) *DeviceUpdate {
	du.mutation.RemoveMissionProductionIDs(ids...)
	return du
}

// RemoveMissionProductions removes "mission_productions" edges to MissionProduction entities.
func (du *DeviceUpdate) RemoveMissionProductions(m ...*MissionProduction) *DeviceUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return du.RemoveMissionProductionIDs(ids...)
}

// ClearUserDevices clears all "user_devices" edges to the UserDevice entity.
func (du *DeviceUpdate) ClearUserDevices() *DeviceUpdate {
	du.mutation.ClearUserDevices()
	return du
}

// RemoveUserDeviceIDs removes the "user_devices" edge to UserDevice entities by IDs.
func (du *DeviceUpdate) RemoveUserDeviceIDs(ids ...int64) *DeviceUpdate {
	du.mutation.RemoveUserDeviceIDs(ids...)
	return du
}

// RemoveUserDevices removes "user_devices" edges to UserDevice entities.
func (du *DeviceUpdate) RemoveUserDevices(u ...*UserDevice) *DeviceUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return du.RemoveUserDeviceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DeviceUpdate) Save(ctx context.Context) (int, error) {
	du.defaults()
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DeviceUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DeviceUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DeviceUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DeviceUpdate) defaults() {
	if _, ok := du.mutation.UpdatedAt(); !ok {
		v := device.UpdateDefaultUpdatedAt()
		du.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DeviceUpdate) check() error {
	if v, ok := du.mutation.Status(); ok {
		if err := device.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "Device.status": %w`, err)}
		}
	}
	if v, ok := du.mutation.BindingStatus(); ok {
		if err := device.BindingStatusValidator(v); err != nil {
			return &ValidationError{Name: "binding_status", err: fmt.Errorf(`cep_ent: validator failed for field "Device.binding_status": %w`, err)}
		}
	}
	if _, ok := du.mutation.UserID(); du.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "Device.user"`)
	}
	return nil
}

func (du *DeviceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(device.Table, device.Columns, sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.CreatedBy(); ok {
		_spec.SetField(device.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := du.mutation.AddedCreatedBy(); ok {
		_spec.AddField(device.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := du.mutation.UpdatedBy(); ok {
		_spec.SetField(device.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := du.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(device.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.SetField(device.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := du.mutation.DeletedAt(); ok {
		_spec.SetField(device.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := du.mutation.Status(); ok {
		_spec.SetField(device.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := du.mutation.BindingStatus(); ok {
		_spec.SetField(device.FieldBindingStatus, field.TypeEnum, value)
	}
	if du.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.UserTable,
			Columns: []string{device.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.UserTable,
			Columns: []string{device.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.MissionProduceOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.MissionProduceOrdersTable,
			Columns: []string{device.MissionProduceOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedMissionProduceOrdersIDs(); len(nodes) > 0 && !du.mutation.MissionProduceOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.MissionProduceOrdersTable,
			Columns: []string{device.MissionProduceOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.MissionProduceOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.MissionProduceOrdersTable,
			Columns: []string{device.MissionProduceOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.MissionProductionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.MissionProductionsTable,
			Columns: []string{device.MissionProductionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduction.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedMissionProductionsIDs(); len(nodes) > 0 && !du.mutation.MissionProductionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.MissionProductionsTable,
			Columns: []string{device.MissionProductionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduction.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.MissionProductionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.MissionProductionsTable,
			Columns: []string{device.MissionProductionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduction.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.UserDevicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.UserDevicesTable,
			Columns: []string{device.UserDevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdevice.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedUserDevicesIDs(); len(nodes) > 0 && !du.mutation.UserDevicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.UserDevicesTable,
			Columns: []string{device.UserDevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdevice.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.UserDevicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.UserDevicesTable,
			Columns: []string{device.UserDevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdevice.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{device.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DeviceUpdateOne is the builder for updating a single Device entity.
type DeviceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeviceMutation
}

// SetCreatedBy sets the "created_by" field.
func (duo *DeviceUpdateOne) SetCreatedBy(i int64) *DeviceUpdateOne {
	duo.mutation.ResetCreatedBy()
	duo.mutation.SetCreatedBy(i)
	return duo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableCreatedBy(i *int64) *DeviceUpdateOne {
	if i != nil {
		duo.SetCreatedBy(*i)
	}
	return duo
}

// AddCreatedBy adds i to the "created_by" field.
func (duo *DeviceUpdateOne) AddCreatedBy(i int64) *DeviceUpdateOne {
	duo.mutation.AddCreatedBy(i)
	return duo
}

// SetUpdatedBy sets the "updated_by" field.
func (duo *DeviceUpdateOne) SetUpdatedBy(i int64) *DeviceUpdateOne {
	duo.mutation.ResetUpdatedBy()
	duo.mutation.SetUpdatedBy(i)
	return duo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableUpdatedBy(i *int64) *DeviceUpdateOne {
	if i != nil {
		duo.SetUpdatedBy(*i)
	}
	return duo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (duo *DeviceUpdateOne) AddUpdatedBy(i int64) *DeviceUpdateOne {
	duo.mutation.AddUpdatedBy(i)
	return duo
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DeviceUpdateOne) SetUpdatedAt(t time.Time) *DeviceUpdateOne {
	duo.mutation.SetUpdatedAt(t)
	return duo
}

// SetDeletedAt sets the "deleted_at" field.
func (duo *DeviceUpdateOne) SetDeletedAt(t time.Time) *DeviceUpdateOne {
	duo.mutation.SetDeletedAt(t)
	return duo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableDeletedAt(t *time.Time) *DeviceUpdateOne {
	if t != nil {
		duo.SetDeletedAt(*t)
	}
	return duo
}

// SetUserID sets the "user_id" field.
func (duo *DeviceUpdateOne) SetUserID(i int64) *DeviceUpdateOne {
	duo.mutation.SetUserID(i)
	return duo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableUserID(i *int64) *DeviceUpdateOne {
	if i != nil {
		duo.SetUserID(*i)
	}
	return duo
}

// SetStatus sets the "status" field.
func (duo *DeviceUpdateOne) SetStatus(es enums.DeviceStatus) *DeviceUpdateOne {
	duo.mutation.SetStatus(es)
	return duo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableStatus(es *enums.DeviceStatus) *DeviceUpdateOne {
	if es != nil {
		duo.SetStatus(*es)
	}
	return duo
}

// SetBindingStatus sets the "binding_status" field.
func (duo *DeviceUpdateOne) SetBindingStatus(ebs enums.DeviceBindingStatus) *DeviceUpdateOne {
	duo.mutation.SetBindingStatus(ebs)
	return duo
}

// SetNillableBindingStatus sets the "binding_status" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableBindingStatus(ebs *enums.DeviceBindingStatus) *DeviceUpdateOne {
	if ebs != nil {
		duo.SetBindingStatus(*ebs)
	}
	return duo
}

// SetUser sets the "user" edge to the User entity.
func (duo *DeviceUpdateOne) SetUser(u *User) *DeviceUpdateOne {
	return duo.SetUserID(u.ID)
}

// AddMissionProduceOrderIDs adds the "mission_produce_orders" edge to the MissionProduceOrder entity by IDs.
func (duo *DeviceUpdateOne) AddMissionProduceOrderIDs(ids ...int64) *DeviceUpdateOne {
	duo.mutation.AddMissionProduceOrderIDs(ids...)
	return duo
}

// AddMissionProduceOrders adds the "mission_produce_orders" edges to the MissionProduceOrder entity.
func (duo *DeviceUpdateOne) AddMissionProduceOrders(m ...*MissionProduceOrder) *DeviceUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return duo.AddMissionProduceOrderIDs(ids...)
}

// AddMissionProductionIDs adds the "mission_productions" edge to the MissionProduction entity by IDs.
func (duo *DeviceUpdateOne) AddMissionProductionIDs(ids ...int64) *DeviceUpdateOne {
	duo.mutation.AddMissionProductionIDs(ids...)
	return duo
}

// AddMissionProductions adds the "mission_productions" edges to the MissionProduction entity.
func (duo *DeviceUpdateOne) AddMissionProductions(m ...*MissionProduction) *DeviceUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return duo.AddMissionProductionIDs(ids...)
}

// AddUserDeviceIDs adds the "user_devices" edge to the UserDevice entity by IDs.
func (duo *DeviceUpdateOne) AddUserDeviceIDs(ids ...int64) *DeviceUpdateOne {
	duo.mutation.AddUserDeviceIDs(ids...)
	return duo
}

// AddUserDevices adds the "user_devices" edges to the UserDevice entity.
func (duo *DeviceUpdateOne) AddUserDevices(u ...*UserDevice) *DeviceUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return duo.AddUserDeviceIDs(ids...)
}

// Mutation returns the DeviceMutation object of the builder.
func (duo *DeviceUpdateOne) Mutation() *DeviceMutation {
	return duo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (duo *DeviceUpdateOne) ClearUser() *DeviceUpdateOne {
	duo.mutation.ClearUser()
	return duo
}

// ClearMissionProduceOrders clears all "mission_produce_orders" edges to the MissionProduceOrder entity.
func (duo *DeviceUpdateOne) ClearMissionProduceOrders() *DeviceUpdateOne {
	duo.mutation.ClearMissionProduceOrders()
	return duo
}

// RemoveMissionProduceOrderIDs removes the "mission_produce_orders" edge to MissionProduceOrder entities by IDs.
func (duo *DeviceUpdateOne) RemoveMissionProduceOrderIDs(ids ...int64) *DeviceUpdateOne {
	duo.mutation.RemoveMissionProduceOrderIDs(ids...)
	return duo
}

// RemoveMissionProduceOrders removes "mission_produce_orders" edges to MissionProduceOrder entities.
func (duo *DeviceUpdateOne) RemoveMissionProduceOrders(m ...*MissionProduceOrder) *DeviceUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return duo.RemoveMissionProduceOrderIDs(ids...)
}

// ClearMissionProductions clears all "mission_productions" edges to the MissionProduction entity.
func (duo *DeviceUpdateOne) ClearMissionProductions() *DeviceUpdateOne {
	duo.mutation.ClearMissionProductions()
	return duo
}

// RemoveMissionProductionIDs removes the "mission_productions" edge to MissionProduction entities by IDs.
func (duo *DeviceUpdateOne) RemoveMissionProductionIDs(ids ...int64) *DeviceUpdateOne {
	duo.mutation.RemoveMissionProductionIDs(ids...)
	return duo
}

// RemoveMissionProductions removes "mission_productions" edges to MissionProduction entities.
func (duo *DeviceUpdateOne) RemoveMissionProductions(m ...*MissionProduction) *DeviceUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return duo.RemoveMissionProductionIDs(ids...)
}

// ClearUserDevices clears all "user_devices" edges to the UserDevice entity.
func (duo *DeviceUpdateOne) ClearUserDevices() *DeviceUpdateOne {
	duo.mutation.ClearUserDevices()
	return duo
}

// RemoveUserDeviceIDs removes the "user_devices" edge to UserDevice entities by IDs.
func (duo *DeviceUpdateOne) RemoveUserDeviceIDs(ids ...int64) *DeviceUpdateOne {
	duo.mutation.RemoveUserDeviceIDs(ids...)
	return duo
}

// RemoveUserDevices removes "user_devices" edges to UserDevice entities.
func (duo *DeviceUpdateOne) RemoveUserDevices(u ...*UserDevice) *DeviceUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return duo.RemoveUserDeviceIDs(ids...)
}

// Where appends a list predicates to the DeviceUpdate builder.
func (duo *DeviceUpdateOne) Where(ps ...predicate.Device) *DeviceUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DeviceUpdateOne) Select(field string, fields ...string) *DeviceUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Device entity.
func (duo *DeviceUpdateOne) Save(ctx context.Context) (*Device, error) {
	duo.defaults()
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DeviceUpdateOne) SaveX(ctx context.Context) *Device {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DeviceUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DeviceUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DeviceUpdateOne) defaults() {
	if _, ok := duo.mutation.UpdatedAt(); !ok {
		v := device.UpdateDefaultUpdatedAt()
		duo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DeviceUpdateOne) check() error {
	if v, ok := duo.mutation.Status(); ok {
		if err := device.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "Device.status": %w`, err)}
		}
	}
	if v, ok := duo.mutation.BindingStatus(); ok {
		if err := device.BindingStatusValidator(v); err != nil {
			return &ValidationError{Name: "binding_status", err: fmt.Errorf(`cep_ent: validator failed for field "Device.binding_status": %w`, err)}
		}
	}
	if _, ok := duo.mutation.UserID(); duo.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "Device.user"`)
	}
	return nil
}

func (duo *DeviceUpdateOne) sqlSave(ctx context.Context) (_node *Device, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(device.Table, device.Columns, sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "Device.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, device.FieldID)
		for _, f := range fields {
			if !device.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != device.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.CreatedBy(); ok {
		_spec.SetField(device.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(device.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.UpdatedBy(); ok {
		_spec.SetField(device.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(device.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.SetField(device.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := duo.mutation.DeletedAt(); ok {
		_spec.SetField(device.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := duo.mutation.Status(); ok {
		_spec.SetField(device.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := duo.mutation.BindingStatus(); ok {
		_spec.SetField(device.FieldBindingStatus, field.TypeEnum, value)
	}
	if duo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.UserTable,
			Columns: []string{device.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.UserTable,
			Columns: []string{device.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.MissionProduceOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.MissionProduceOrdersTable,
			Columns: []string{device.MissionProduceOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedMissionProduceOrdersIDs(); len(nodes) > 0 && !duo.mutation.MissionProduceOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.MissionProduceOrdersTable,
			Columns: []string{device.MissionProduceOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.MissionProduceOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.MissionProduceOrdersTable,
			Columns: []string{device.MissionProduceOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.MissionProductionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.MissionProductionsTable,
			Columns: []string{device.MissionProductionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduction.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedMissionProductionsIDs(); len(nodes) > 0 && !duo.mutation.MissionProductionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.MissionProductionsTable,
			Columns: []string{device.MissionProductionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduction.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.MissionProductionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.MissionProductionsTable,
			Columns: []string{device.MissionProductionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduction.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.UserDevicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.UserDevicesTable,
			Columns: []string{device.UserDevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdevice.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedUserDevicesIDs(); len(nodes) > 0 && !duo.mutation.UserDevicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.UserDevicesTable,
			Columns: []string{device.UserDevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdevice.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.UserDevicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.UserDevicesTable,
			Columns: []string{device.UserDevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdevice.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Device{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{device.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
