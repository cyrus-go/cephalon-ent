// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/costbill"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/earnbill"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/platformaccount"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// PlatformAccountQuery is the builder for querying PlatformAccount entities.
type PlatformAccountQuery struct {
	config
	ctx           *QueryContext
	order         []platformaccount.OrderOption
	inters        []Interceptor
	predicates    []predicate.PlatformAccount
	withEarnBills *EarnBillQuery
	withCostBills *CostBillQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PlatformAccountQuery builder.
func (paq *PlatformAccountQuery) Where(ps ...predicate.PlatformAccount) *PlatformAccountQuery {
	paq.predicates = append(paq.predicates, ps...)
	return paq
}

// Limit the number of records to be returned by this query.
func (paq *PlatformAccountQuery) Limit(limit int) *PlatformAccountQuery {
	paq.ctx.Limit = &limit
	return paq
}

// Offset to start from.
func (paq *PlatformAccountQuery) Offset(offset int) *PlatformAccountQuery {
	paq.ctx.Offset = &offset
	return paq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (paq *PlatformAccountQuery) Unique(unique bool) *PlatformAccountQuery {
	paq.ctx.Unique = &unique
	return paq
}

// Order specifies how the records should be ordered.
func (paq *PlatformAccountQuery) Order(o ...platformaccount.OrderOption) *PlatformAccountQuery {
	paq.order = append(paq.order, o...)
	return paq
}

// QueryEarnBills chains the current query on the "earn_bills" edge.
func (paq *PlatformAccountQuery) QueryEarnBills() *EarnBillQuery {
	query := (&EarnBillClient{config: paq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := paq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := paq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(platformaccount.Table, platformaccount.FieldID, selector),
			sqlgraph.To(earnbill.Table, earnbill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, platformaccount.EarnBillsTable, platformaccount.EarnBillsColumn),
		)
		fromU = sqlgraph.SetNeighbors(paq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCostBills chains the current query on the "cost_bills" edge.
func (paq *PlatformAccountQuery) QueryCostBills() *CostBillQuery {
	query := (&CostBillClient{config: paq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := paq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := paq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(platformaccount.Table, platformaccount.FieldID, selector),
			sqlgraph.To(costbill.Table, costbill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, platformaccount.CostBillsTable, platformaccount.CostBillsColumn),
		)
		fromU = sqlgraph.SetNeighbors(paq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PlatformAccount entity from the query.
// Returns a *NotFoundError when no PlatformAccount was found.
func (paq *PlatformAccountQuery) First(ctx context.Context) (*PlatformAccount, error) {
	nodes, err := paq.Limit(1).All(setContextOp(ctx, paq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{platformaccount.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (paq *PlatformAccountQuery) FirstX(ctx context.Context) *PlatformAccount {
	node, err := paq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PlatformAccount ID from the query.
// Returns a *NotFoundError when no PlatformAccount ID was found.
func (paq *PlatformAccountQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = paq.Limit(1).IDs(setContextOp(ctx, paq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{platformaccount.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (paq *PlatformAccountQuery) FirstIDX(ctx context.Context) int64 {
	id, err := paq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PlatformAccount entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PlatformAccount entity is found.
// Returns a *NotFoundError when no PlatformAccount entities are found.
func (paq *PlatformAccountQuery) Only(ctx context.Context) (*PlatformAccount, error) {
	nodes, err := paq.Limit(2).All(setContextOp(ctx, paq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{platformaccount.Label}
	default:
		return nil, &NotSingularError{platformaccount.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (paq *PlatformAccountQuery) OnlyX(ctx context.Context) *PlatformAccount {
	node, err := paq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PlatformAccount ID in the query.
// Returns a *NotSingularError when more than one PlatformAccount ID is found.
// Returns a *NotFoundError when no entities are found.
func (paq *PlatformAccountQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = paq.Limit(2).IDs(setContextOp(ctx, paq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{platformaccount.Label}
	default:
		err = &NotSingularError{platformaccount.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (paq *PlatformAccountQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := paq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PlatformAccounts.
func (paq *PlatformAccountQuery) All(ctx context.Context) ([]*PlatformAccount, error) {
	ctx = setContextOp(ctx, paq.ctx, "All")
	if err := paq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PlatformAccount, *PlatformAccountQuery]()
	return withInterceptors[[]*PlatformAccount](ctx, paq, qr, paq.inters)
}

// AllX is like All, but panics if an error occurs.
func (paq *PlatformAccountQuery) AllX(ctx context.Context) []*PlatformAccount {
	nodes, err := paq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PlatformAccount IDs.
func (paq *PlatformAccountQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if paq.ctx.Unique == nil && paq.path != nil {
		paq.Unique(true)
	}
	ctx = setContextOp(ctx, paq.ctx, "IDs")
	if err = paq.Select(platformaccount.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (paq *PlatformAccountQuery) IDsX(ctx context.Context) []int64 {
	ids, err := paq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (paq *PlatformAccountQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, paq.ctx, "Count")
	if err := paq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, paq, querierCount[*PlatformAccountQuery](), paq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (paq *PlatformAccountQuery) CountX(ctx context.Context) int {
	count, err := paq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (paq *PlatformAccountQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, paq.ctx, "Exist")
	switch _, err := paq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("cep_ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (paq *PlatformAccountQuery) ExistX(ctx context.Context) bool {
	exist, err := paq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PlatformAccountQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (paq *PlatformAccountQuery) Clone() *PlatformAccountQuery {
	if paq == nil {
		return nil
	}
	return &PlatformAccountQuery{
		config:        paq.config,
		ctx:           paq.ctx.Clone(),
		order:         append([]platformaccount.OrderOption{}, paq.order...),
		inters:        append([]Interceptor{}, paq.inters...),
		predicates:    append([]predicate.PlatformAccount{}, paq.predicates...),
		withEarnBills: paq.withEarnBills.Clone(),
		withCostBills: paq.withCostBills.Clone(),
		// clone intermediate query.
		sql:  paq.sql.Clone(),
		path: paq.path,
	}
}

// WithEarnBills tells the query-builder to eager-load the nodes that are connected to
// the "earn_bills" edge. The optional arguments are used to configure the query builder of the edge.
func (paq *PlatformAccountQuery) WithEarnBills(opts ...func(*EarnBillQuery)) *PlatformAccountQuery {
	query := (&EarnBillClient{config: paq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	paq.withEarnBills = query
	return paq
}

// WithCostBills tells the query-builder to eager-load the nodes that are connected to
// the "cost_bills" edge. The optional arguments are used to configure the query builder of the edge.
func (paq *PlatformAccountQuery) WithCostBills(opts ...func(*CostBillQuery)) *PlatformAccountQuery {
	query := (&CostBillClient{config: paq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	paq.withCostBills = query
	return paq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by,string"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PlatformAccount.Query().
//		GroupBy(platformaccount.FieldCreatedBy).
//		Aggregate(cep_ent.Count()).
//		Scan(ctx, &v)
func (paq *PlatformAccountQuery) GroupBy(field string, fields ...string) *PlatformAccountGroupBy {
	paq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PlatformAccountGroupBy{build: paq}
	grbuild.flds = &paq.ctx.Fields
	grbuild.label = platformaccount.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by,string"`
//	}
//
//	client.PlatformAccount.Query().
//		Select(platformaccount.FieldCreatedBy).
//		Scan(ctx, &v)
func (paq *PlatformAccountQuery) Select(fields ...string) *PlatformAccountSelect {
	paq.ctx.Fields = append(paq.ctx.Fields, fields...)
	sbuild := &PlatformAccountSelect{PlatformAccountQuery: paq}
	sbuild.label = platformaccount.Label
	sbuild.flds, sbuild.scan = &paq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PlatformAccountSelect configured with the given aggregations.
func (paq *PlatformAccountQuery) Aggregate(fns ...AggregateFunc) *PlatformAccountSelect {
	return paq.Select().Aggregate(fns...)
}

func (paq *PlatformAccountQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range paq.inters {
		if inter == nil {
			return fmt.Errorf("cep_ent: uninitialized interceptor (forgotten import cep_ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, paq); err != nil {
				return err
			}
		}
	}
	for _, f := range paq.ctx.Fields {
		if !platformaccount.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
		}
	}
	if paq.path != nil {
		prev, err := paq.path(ctx)
		if err != nil {
			return err
		}
		paq.sql = prev
	}
	return nil
}

func (paq *PlatformAccountQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PlatformAccount, error) {
	var (
		nodes       = []*PlatformAccount{}
		_spec       = paq.querySpec()
		loadedTypes = [2]bool{
			paq.withEarnBills != nil,
			paq.withCostBills != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PlatformAccount).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PlatformAccount{config: paq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, paq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := paq.withEarnBills; query != nil {
		if err := paq.loadEarnBills(ctx, query, nodes,
			func(n *PlatformAccount) { n.Edges.EarnBills = []*EarnBill{} },
			func(n *PlatformAccount, e *EarnBill) { n.Edges.EarnBills = append(n.Edges.EarnBills, e) }); err != nil {
			return nil, err
		}
	}
	if query := paq.withCostBills; query != nil {
		if err := paq.loadCostBills(ctx, query, nodes,
			func(n *PlatformAccount) { n.Edges.CostBills = []*CostBill{} },
			func(n *PlatformAccount, e *CostBill) { n.Edges.CostBills = append(n.Edges.CostBills, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (paq *PlatformAccountQuery) loadEarnBills(ctx context.Context, query *EarnBillQuery, nodes []*PlatformAccount, init func(*PlatformAccount), assign func(*PlatformAccount, *EarnBill)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*PlatformAccount)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(earnbill.FieldPlatformAccountID)
	}
	query.Where(predicate.EarnBill(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(platformaccount.EarnBillsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.PlatformAccountID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "platform_account_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (paq *PlatformAccountQuery) loadCostBills(ctx context.Context, query *CostBillQuery, nodes []*PlatformAccount, init func(*PlatformAccount), assign func(*PlatformAccount, *CostBill)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*PlatformAccount)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(costbill.FieldMarketAccountID)
	}
	query.Where(predicate.CostBill(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(platformaccount.CostBillsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.MarketAccountID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "market_account_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (paq *PlatformAccountQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := paq.querySpec()
	_spec.Node.Columns = paq.ctx.Fields
	if len(paq.ctx.Fields) > 0 {
		_spec.Unique = paq.ctx.Unique != nil && *paq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, paq.driver, _spec)
}

func (paq *PlatformAccountQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(platformaccount.Table, platformaccount.Columns, sqlgraph.NewFieldSpec(platformaccount.FieldID, field.TypeInt64))
	_spec.From = paq.sql
	if unique := paq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if paq.path != nil {
		_spec.Unique = true
	}
	if fields := paq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, platformaccount.FieldID)
		for i := range fields {
			if fields[i] != platformaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := paq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := paq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := paq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := paq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (paq *PlatformAccountQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(paq.driver.Dialect())
	t1 := builder.Table(platformaccount.Table)
	columns := paq.ctx.Fields
	if len(columns) == 0 {
		columns = platformaccount.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if paq.sql != nil {
		selector = paq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if paq.ctx.Unique != nil && *paq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range paq.predicates {
		p(selector)
	}
	for _, p := range paq.order {
		p(selector)
	}
	if offset := paq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := paq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PlatformAccountGroupBy is the group-by builder for PlatformAccount entities.
type PlatformAccountGroupBy struct {
	selector
	build *PlatformAccountQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pagb *PlatformAccountGroupBy) Aggregate(fns ...AggregateFunc) *PlatformAccountGroupBy {
	pagb.fns = append(pagb.fns, fns...)
	return pagb
}

// Scan applies the selector query and scans the result into the given value.
func (pagb *PlatformAccountGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pagb.build.ctx, "GroupBy")
	if err := pagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlatformAccountQuery, *PlatformAccountGroupBy](ctx, pagb.build, pagb, pagb.build.inters, v)
}

func (pagb *PlatformAccountGroupBy) sqlScan(ctx context.Context, root *PlatformAccountQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pagb.fns))
	for _, fn := range pagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pagb.flds)+len(pagb.fns))
		for _, f := range *pagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PlatformAccountSelect is the builder for selecting fields of PlatformAccount entities.
type PlatformAccountSelect struct {
	*PlatformAccountQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pas *PlatformAccountSelect) Aggregate(fns ...AggregateFunc) *PlatformAccountSelect {
	pas.fns = append(pas.fns, fns...)
	return pas
}

// Scan applies the selector query and scans the result into the given value.
func (pas *PlatformAccountSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pas.ctx, "Select")
	if err := pas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlatformAccountQuery, *PlatformAccountSelect](ctx, pas.PlatformAccountQuery, pas, pas.inters, v)
}

func (pas *PlatformAccountSelect) sqlScan(ctx context.Context, root *PlatformAccountQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pas.fns))
	for _, fn := range pas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
