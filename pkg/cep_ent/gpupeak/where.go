// Code generated by ent, DO NOT EDIT.

package gpupeak

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldLTE(FieldID, id))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int64) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int64) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldEQ(FieldDeletedAt, v))
}

// Peak applies equality check predicate on the "peak" field. It's identical to PeakEQ.
func Peak(v int) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldEQ(FieldPeak, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int64) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int64) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int64) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int64) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int64) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int64) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int64) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int64) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldLTE(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int64) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int64) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int64) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int64) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int64) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int64) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int64) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int64) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldLTE(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldLTE(FieldDeletedAt, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v enums.GpuVersion) predicate.GpuPeak {
	vc := v
	return predicate.GpuPeak(sql.FieldEQ(FieldVersion, vc))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v enums.GpuVersion) predicate.GpuPeak {
	vc := v
	return predicate.GpuPeak(sql.FieldNEQ(FieldVersion, vc))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...enums.GpuVersion) predicate.GpuPeak {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GpuPeak(sql.FieldIn(FieldVersion, v...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...enums.GpuVersion) predicate.GpuPeak {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GpuPeak(sql.FieldNotIn(FieldVersion, v...))
}

// PeakEQ applies the EQ predicate on the "peak" field.
func PeakEQ(v int) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldEQ(FieldPeak, v))
}

// PeakNEQ applies the NEQ predicate on the "peak" field.
func PeakNEQ(v int) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldNEQ(FieldPeak, v))
}

// PeakIn applies the In predicate on the "peak" field.
func PeakIn(vs ...int) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldIn(FieldPeak, vs...))
}

// PeakNotIn applies the NotIn predicate on the "peak" field.
func PeakNotIn(vs ...int) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldNotIn(FieldPeak, vs...))
}

// PeakGT applies the GT predicate on the "peak" field.
func PeakGT(v int) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldGT(FieldPeak, v))
}

// PeakGTE applies the GTE predicate on the "peak" field.
func PeakGTE(v int) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldGTE(FieldPeak, v))
}

// PeakLT applies the LT predicate on the "peak" field.
func PeakLT(v int) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldLT(FieldPeak, v))
}

// PeakLTE applies the LTE predicate on the "peak" field.
func PeakLTE(v int) predicate.GpuPeak {
	return predicate.GpuPeak(sql.FieldLTE(FieldPeak, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GpuPeak) predicate.GpuPeak {
	return predicate.GpuPeak(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GpuPeak) predicate.GpuPeak {
	return predicate.GpuPeak(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GpuPeak) predicate.GpuPeak {
	return predicate.GpuPeak(sql.NotPredicates(p))
}
