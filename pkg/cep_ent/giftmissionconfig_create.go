// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/device"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/giftmissionconfig"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// GiftMissionConfigCreate is the builder for creating a GiftMissionConfig entity.
type GiftMissionConfigCreate struct {
	config
	mutation *GiftMissionConfigMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (gmcc *GiftMissionConfigCreate) SetCreatedBy(i int64) *GiftMissionConfigCreate {
	gmcc.mutation.SetCreatedBy(i)
	return gmcc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (gmcc *GiftMissionConfigCreate) SetNillableCreatedBy(i *int64) *GiftMissionConfigCreate {
	if i != nil {
		gmcc.SetCreatedBy(*i)
	}
	return gmcc
}

// SetUpdatedBy sets the "updated_by" field.
func (gmcc *GiftMissionConfigCreate) SetUpdatedBy(i int64) *GiftMissionConfigCreate {
	gmcc.mutation.SetUpdatedBy(i)
	return gmcc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (gmcc *GiftMissionConfigCreate) SetNillableUpdatedBy(i *int64) *GiftMissionConfigCreate {
	if i != nil {
		gmcc.SetUpdatedBy(*i)
	}
	return gmcc
}

// SetCreatedAt sets the "created_at" field.
func (gmcc *GiftMissionConfigCreate) SetCreatedAt(t time.Time) *GiftMissionConfigCreate {
	gmcc.mutation.SetCreatedAt(t)
	return gmcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gmcc *GiftMissionConfigCreate) SetNillableCreatedAt(t *time.Time) *GiftMissionConfigCreate {
	if t != nil {
		gmcc.SetCreatedAt(*t)
	}
	return gmcc
}

// SetUpdatedAt sets the "updated_at" field.
func (gmcc *GiftMissionConfigCreate) SetUpdatedAt(t time.Time) *GiftMissionConfigCreate {
	gmcc.mutation.SetUpdatedAt(t)
	return gmcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gmcc *GiftMissionConfigCreate) SetNillableUpdatedAt(t *time.Time) *GiftMissionConfigCreate {
	if t != nil {
		gmcc.SetUpdatedAt(*t)
	}
	return gmcc
}

// SetDeletedAt sets the "deleted_at" field.
func (gmcc *GiftMissionConfigCreate) SetDeletedAt(t time.Time) *GiftMissionConfigCreate {
	gmcc.mutation.SetDeletedAt(t)
	return gmcc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gmcc *GiftMissionConfigCreate) SetNillableDeletedAt(t *time.Time) *GiftMissionConfigCreate {
	if t != nil {
		gmcc.SetDeletedAt(*t)
	}
	return gmcc
}

// SetStabilityLevel sets the "stability_level" field.
func (gmcc *GiftMissionConfigCreate) SetStabilityLevel(est enums.DeviceStabilityType) *GiftMissionConfigCreate {
	gmcc.mutation.SetStabilityLevel(est)
	return gmcc
}

// SetNillableStabilityLevel sets the "stability_level" field if the given value is not nil.
func (gmcc *GiftMissionConfigCreate) SetNillableStabilityLevel(est *enums.DeviceStabilityType) *GiftMissionConfigCreate {
	if est != nil {
		gmcc.SetStabilityLevel(*est)
	}
	return gmcc
}

// SetGpuVersion sets the "gpu_version" field.
func (gmcc *GiftMissionConfigCreate) SetGpuVersion(ev enums.GpuVersion) *GiftMissionConfigCreate {
	gmcc.mutation.SetGpuVersion(ev)
	return gmcc
}

// SetNillableGpuVersion sets the "gpu_version" field if the given value is not nil.
func (gmcc *GiftMissionConfigCreate) SetNillableGpuVersion(ev *enums.GpuVersion) *GiftMissionConfigCreate {
	if ev != nil {
		gmcc.SetGpuVersion(*ev)
	}
	return gmcc
}

// SetGapBase sets the "gap_base" field.
func (gmcc *GiftMissionConfigCreate) SetGapBase(i int64) *GiftMissionConfigCreate {
	gmcc.mutation.SetGapBase(i)
	return gmcc
}

// SetNillableGapBase sets the "gap_base" field if the given value is not nil.
func (gmcc *GiftMissionConfigCreate) SetNillableGapBase(i *int64) *GiftMissionConfigCreate {
	if i != nil {
		gmcc.SetGapBase(*i)
	}
	return gmcc
}

// SetGapRandomMax sets the "gap_random_max" field.
func (gmcc *GiftMissionConfigCreate) SetGapRandomMax(i int64) *GiftMissionConfigCreate {
	gmcc.mutation.SetGapRandomMax(i)
	return gmcc
}

// SetNillableGapRandomMax sets the "gap_random_max" field if the given value is not nil.
func (gmcc *GiftMissionConfigCreate) SetNillableGapRandomMax(i *int64) *GiftMissionConfigCreate {
	if i != nil {
		gmcc.SetGapRandomMax(*i)
	}
	return gmcc
}

// SetGapRandomMin sets the "gap_random_min" field.
func (gmcc *GiftMissionConfigCreate) SetGapRandomMin(i int64) *GiftMissionConfigCreate {
	gmcc.mutation.SetGapRandomMin(i)
	return gmcc
}

// SetNillableGapRandomMin sets the "gap_random_min" field if the given value is not nil.
func (gmcc *GiftMissionConfigCreate) SetNillableGapRandomMin(i *int64) *GiftMissionConfigCreate {
	if i != nil {
		gmcc.SetGapRandomMin(*i)
	}
	return gmcc
}

// SetID sets the "id" field.
func (gmcc *GiftMissionConfigCreate) SetID(i int64) *GiftMissionConfigCreate {
	gmcc.mutation.SetID(i)
	return gmcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (gmcc *GiftMissionConfigCreate) SetNillableID(i *int64) *GiftMissionConfigCreate {
	if i != nil {
		gmcc.SetID(*i)
	}
	return gmcc
}

// AddDeviceIDs adds the "devices" edge to the Device entity by IDs.
func (gmcc *GiftMissionConfigCreate) AddDeviceIDs(ids ...int64) *GiftMissionConfigCreate {
	gmcc.mutation.AddDeviceIDs(ids...)
	return gmcc
}

// AddDevices adds the "devices" edges to the Device entity.
func (gmcc *GiftMissionConfigCreate) AddDevices(d ...*Device) *GiftMissionConfigCreate {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return gmcc.AddDeviceIDs(ids...)
}

// Mutation returns the GiftMissionConfigMutation object of the builder.
func (gmcc *GiftMissionConfigCreate) Mutation() *GiftMissionConfigMutation {
	return gmcc.mutation
}

// Save creates the GiftMissionConfig in the database.
func (gmcc *GiftMissionConfigCreate) Save(ctx context.Context) (*GiftMissionConfig, error) {
	gmcc.defaults()
	return withHooks(ctx, gmcc.sqlSave, gmcc.mutation, gmcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gmcc *GiftMissionConfigCreate) SaveX(ctx context.Context) *GiftMissionConfig {
	v, err := gmcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gmcc *GiftMissionConfigCreate) Exec(ctx context.Context) error {
	_, err := gmcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gmcc *GiftMissionConfigCreate) ExecX(ctx context.Context) {
	if err := gmcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gmcc *GiftMissionConfigCreate) defaults() {
	if _, ok := gmcc.mutation.CreatedBy(); !ok {
		v := giftmissionconfig.DefaultCreatedBy
		gmcc.mutation.SetCreatedBy(v)
	}
	if _, ok := gmcc.mutation.UpdatedBy(); !ok {
		v := giftmissionconfig.DefaultUpdatedBy
		gmcc.mutation.SetUpdatedBy(v)
	}
	if _, ok := gmcc.mutation.CreatedAt(); !ok {
		v := giftmissionconfig.DefaultCreatedAt()
		gmcc.mutation.SetCreatedAt(v)
	}
	if _, ok := gmcc.mutation.UpdatedAt(); !ok {
		v := giftmissionconfig.DefaultUpdatedAt()
		gmcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := gmcc.mutation.DeletedAt(); !ok {
		v := giftmissionconfig.DefaultDeletedAt
		gmcc.mutation.SetDeletedAt(v)
	}
	if _, ok := gmcc.mutation.StabilityLevel(); !ok {
		v := giftmissionconfig.DefaultStabilityLevel
		gmcc.mutation.SetStabilityLevel(v)
	}
	if _, ok := gmcc.mutation.GpuVersion(); !ok {
		v := giftmissionconfig.DefaultGpuVersion
		gmcc.mutation.SetGpuVersion(v)
	}
	if _, ok := gmcc.mutation.GapBase(); !ok {
		v := giftmissionconfig.DefaultGapBase
		gmcc.mutation.SetGapBase(v)
	}
	if _, ok := gmcc.mutation.GapRandomMax(); !ok {
		v := giftmissionconfig.DefaultGapRandomMax
		gmcc.mutation.SetGapRandomMax(v)
	}
	if _, ok := gmcc.mutation.GapRandomMin(); !ok {
		v := giftmissionconfig.DefaultGapRandomMin
		gmcc.mutation.SetGapRandomMin(v)
	}
	if _, ok := gmcc.mutation.ID(); !ok {
		v := giftmissionconfig.DefaultID()
		gmcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gmcc *GiftMissionConfigCreate) check() error {
	if _, ok := gmcc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "GiftMissionConfig.created_by"`)}
	}
	if _, ok := gmcc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "GiftMissionConfig.updated_by"`)}
	}
	if _, ok := gmcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "GiftMissionConfig.created_at"`)}
	}
	if _, ok := gmcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "GiftMissionConfig.updated_at"`)}
	}
	if _, ok := gmcc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "GiftMissionConfig.deleted_at"`)}
	}
	if _, ok := gmcc.mutation.StabilityLevel(); !ok {
		return &ValidationError{Name: "stability_level", err: errors.New(`cep_ent: missing required field "GiftMissionConfig.stability_level"`)}
	}
	if v, ok := gmcc.mutation.StabilityLevel(); ok {
		if err := giftmissionconfig.StabilityLevelValidator(v); err != nil {
			return &ValidationError{Name: "stability_level", err: fmt.Errorf(`cep_ent: validator failed for field "GiftMissionConfig.stability_level": %w`, err)}
		}
	}
	if _, ok := gmcc.mutation.GpuVersion(); !ok {
		return &ValidationError{Name: "gpu_version", err: errors.New(`cep_ent: missing required field "GiftMissionConfig.gpu_version"`)}
	}
	if v, ok := gmcc.mutation.GpuVersion(); ok {
		if err := giftmissionconfig.GpuVersionValidator(v); err != nil {
			return &ValidationError{Name: "gpu_version", err: fmt.Errorf(`cep_ent: validator failed for field "GiftMissionConfig.gpu_version": %w`, err)}
		}
	}
	if _, ok := gmcc.mutation.GapBase(); !ok {
		return &ValidationError{Name: "gap_base", err: errors.New(`cep_ent: missing required field "GiftMissionConfig.gap_base"`)}
	}
	if _, ok := gmcc.mutation.GapRandomMax(); !ok {
		return &ValidationError{Name: "gap_random_max", err: errors.New(`cep_ent: missing required field "GiftMissionConfig.gap_random_max"`)}
	}
	if _, ok := gmcc.mutation.GapRandomMin(); !ok {
		return &ValidationError{Name: "gap_random_min", err: errors.New(`cep_ent: missing required field "GiftMissionConfig.gap_random_min"`)}
	}
	return nil
}

func (gmcc *GiftMissionConfigCreate) sqlSave(ctx context.Context) (*GiftMissionConfig, error) {
	if err := gmcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gmcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gmcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	gmcc.mutation.id = &_node.ID
	gmcc.mutation.done = true
	return _node, nil
}

func (gmcc *GiftMissionConfigCreate) createSpec() (*GiftMissionConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &GiftMissionConfig{config: gmcc.config}
		_spec = sqlgraph.NewCreateSpec(giftmissionconfig.Table, sqlgraph.NewFieldSpec(giftmissionconfig.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = gmcc.conflict
	if id, ok := gmcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gmcc.mutation.CreatedBy(); ok {
		_spec.SetField(giftmissionconfig.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := gmcc.mutation.UpdatedBy(); ok {
		_spec.SetField(giftmissionconfig.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := gmcc.mutation.CreatedAt(); ok {
		_spec.SetField(giftmissionconfig.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := gmcc.mutation.UpdatedAt(); ok {
		_spec.SetField(giftmissionconfig.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := gmcc.mutation.DeletedAt(); ok {
		_spec.SetField(giftmissionconfig.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := gmcc.mutation.StabilityLevel(); ok {
		_spec.SetField(giftmissionconfig.FieldStabilityLevel, field.TypeEnum, value)
		_node.StabilityLevel = value
	}
	if value, ok := gmcc.mutation.GpuVersion(); ok {
		_spec.SetField(giftmissionconfig.FieldGpuVersion, field.TypeEnum, value)
		_node.GpuVersion = value
	}
	if value, ok := gmcc.mutation.GapBase(); ok {
		_spec.SetField(giftmissionconfig.FieldGapBase, field.TypeInt64, value)
		_node.GapBase = value
	}
	if value, ok := gmcc.mutation.GapRandomMax(); ok {
		_spec.SetField(giftmissionconfig.FieldGapRandomMax, field.TypeInt64, value)
		_node.GapRandomMax = value
	}
	if value, ok := gmcc.mutation.GapRandomMin(); ok {
		_spec.SetField(giftmissionconfig.FieldGapRandomMin, field.TypeInt64, value)
		_node.GapRandomMin = value
	}
	if nodes := gmcc.mutation.DevicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   giftmissionconfig.DevicesTable,
			Columns: []string{giftmissionconfig.DevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GiftMissionConfig.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GiftMissionConfigUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (gmcc *GiftMissionConfigCreate) OnConflict(opts ...sql.ConflictOption) *GiftMissionConfigUpsertOne {
	gmcc.conflict = opts
	return &GiftMissionConfigUpsertOne{
		create: gmcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GiftMissionConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gmcc *GiftMissionConfigCreate) OnConflictColumns(columns ...string) *GiftMissionConfigUpsertOne {
	gmcc.conflict = append(gmcc.conflict, sql.ConflictColumns(columns...))
	return &GiftMissionConfigUpsertOne{
		create: gmcc,
	}
}

type (
	// GiftMissionConfigUpsertOne is the builder for "upsert"-ing
	//  one GiftMissionConfig node.
	GiftMissionConfigUpsertOne struct {
		create *GiftMissionConfigCreate
	}

	// GiftMissionConfigUpsert is the "OnConflict" setter.
	GiftMissionConfigUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *GiftMissionConfigUpsert) SetCreatedBy(v int64) *GiftMissionConfigUpsert {
	u.Set(giftmissionconfig.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *GiftMissionConfigUpsert) UpdateCreatedBy() *GiftMissionConfigUpsert {
	u.SetExcluded(giftmissionconfig.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *GiftMissionConfigUpsert) AddCreatedBy(v int64) *GiftMissionConfigUpsert {
	u.Add(giftmissionconfig.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *GiftMissionConfigUpsert) SetUpdatedBy(v int64) *GiftMissionConfigUpsert {
	u.Set(giftmissionconfig.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *GiftMissionConfigUpsert) UpdateUpdatedBy() *GiftMissionConfigUpsert {
	u.SetExcluded(giftmissionconfig.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *GiftMissionConfigUpsert) AddUpdatedBy(v int64) *GiftMissionConfigUpsert {
	u.Add(giftmissionconfig.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GiftMissionConfigUpsert) SetUpdatedAt(v time.Time) *GiftMissionConfigUpsert {
	u.Set(giftmissionconfig.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GiftMissionConfigUpsert) UpdateUpdatedAt() *GiftMissionConfigUpsert {
	u.SetExcluded(giftmissionconfig.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GiftMissionConfigUpsert) SetDeletedAt(v time.Time) *GiftMissionConfigUpsert {
	u.Set(giftmissionconfig.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GiftMissionConfigUpsert) UpdateDeletedAt() *GiftMissionConfigUpsert {
	u.SetExcluded(giftmissionconfig.FieldDeletedAt)
	return u
}

// SetStabilityLevel sets the "stability_level" field.
func (u *GiftMissionConfigUpsert) SetStabilityLevel(v enums.DeviceStabilityType) *GiftMissionConfigUpsert {
	u.Set(giftmissionconfig.FieldStabilityLevel, v)
	return u
}

// UpdateStabilityLevel sets the "stability_level" field to the value that was provided on create.
func (u *GiftMissionConfigUpsert) UpdateStabilityLevel() *GiftMissionConfigUpsert {
	u.SetExcluded(giftmissionconfig.FieldStabilityLevel)
	return u
}

// SetGpuVersion sets the "gpu_version" field.
func (u *GiftMissionConfigUpsert) SetGpuVersion(v enums.GpuVersion) *GiftMissionConfigUpsert {
	u.Set(giftmissionconfig.FieldGpuVersion, v)
	return u
}

// UpdateGpuVersion sets the "gpu_version" field to the value that was provided on create.
func (u *GiftMissionConfigUpsert) UpdateGpuVersion() *GiftMissionConfigUpsert {
	u.SetExcluded(giftmissionconfig.FieldGpuVersion)
	return u
}

// SetGapBase sets the "gap_base" field.
func (u *GiftMissionConfigUpsert) SetGapBase(v int64) *GiftMissionConfigUpsert {
	u.Set(giftmissionconfig.FieldGapBase, v)
	return u
}

// UpdateGapBase sets the "gap_base" field to the value that was provided on create.
func (u *GiftMissionConfigUpsert) UpdateGapBase() *GiftMissionConfigUpsert {
	u.SetExcluded(giftmissionconfig.FieldGapBase)
	return u
}

// AddGapBase adds v to the "gap_base" field.
func (u *GiftMissionConfigUpsert) AddGapBase(v int64) *GiftMissionConfigUpsert {
	u.Add(giftmissionconfig.FieldGapBase, v)
	return u
}

// SetGapRandomMax sets the "gap_random_max" field.
func (u *GiftMissionConfigUpsert) SetGapRandomMax(v int64) *GiftMissionConfigUpsert {
	u.Set(giftmissionconfig.FieldGapRandomMax, v)
	return u
}

// UpdateGapRandomMax sets the "gap_random_max" field to the value that was provided on create.
func (u *GiftMissionConfigUpsert) UpdateGapRandomMax() *GiftMissionConfigUpsert {
	u.SetExcluded(giftmissionconfig.FieldGapRandomMax)
	return u
}

// AddGapRandomMax adds v to the "gap_random_max" field.
func (u *GiftMissionConfigUpsert) AddGapRandomMax(v int64) *GiftMissionConfigUpsert {
	u.Add(giftmissionconfig.FieldGapRandomMax, v)
	return u
}

// SetGapRandomMin sets the "gap_random_min" field.
func (u *GiftMissionConfigUpsert) SetGapRandomMin(v int64) *GiftMissionConfigUpsert {
	u.Set(giftmissionconfig.FieldGapRandomMin, v)
	return u
}

// UpdateGapRandomMin sets the "gap_random_min" field to the value that was provided on create.
func (u *GiftMissionConfigUpsert) UpdateGapRandomMin() *GiftMissionConfigUpsert {
	u.SetExcluded(giftmissionconfig.FieldGapRandomMin)
	return u
}

// AddGapRandomMin adds v to the "gap_random_min" field.
func (u *GiftMissionConfigUpsert) AddGapRandomMin(v int64) *GiftMissionConfigUpsert {
	u.Add(giftmissionconfig.FieldGapRandomMin, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GiftMissionConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(giftmissionconfig.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GiftMissionConfigUpsertOne) UpdateNewValues() *GiftMissionConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(giftmissionconfig.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(giftmissionconfig.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GiftMissionConfig.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GiftMissionConfigUpsertOne) Ignore() *GiftMissionConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GiftMissionConfigUpsertOne) DoNothing() *GiftMissionConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GiftMissionConfigCreate.OnConflict
// documentation for more info.
func (u *GiftMissionConfigUpsertOne) Update(set func(*GiftMissionConfigUpsert)) *GiftMissionConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GiftMissionConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *GiftMissionConfigUpsertOne) SetCreatedBy(v int64) *GiftMissionConfigUpsertOne {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *GiftMissionConfigUpsertOne) AddCreatedBy(v int64) *GiftMissionConfigUpsertOne {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *GiftMissionConfigUpsertOne) UpdateCreatedBy() *GiftMissionConfigUpsertOne {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *GiftMissionConfigUpsertOne) SetUpdatedBy(v int64) *GiftMissionConfigUpsertOne {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *GiftMissionConfigUpsertOne) AddUpdatedBy(v int64) *GiftMissionConfigUpsertOne {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *GiftMissionConfigUpsertOne) UpdateUpdatedBy() *GiftMissionConfigUpsertOne {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GiftMissionConfigUpsertOne) SetUpdatedAt(v time.Time) *GiftMissionConfigUpsertOne {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GiftMissionConfigUpsertOne) UpdateUpdatedAt() *GiftMissionConfigUpsertOne {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GiftMissionConfigUpsertOne) SetDeletedAt(v time.Time) *GiftMissionConfigUpsertOne {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GiftMissionConfigUpsertOne) UpdateDeletedAt() *GiftMissionConfigUpsertOne {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetStabilityLevel sets the "stability_level" field.
func (u *GiftMissionConfigUpsertOne) SetStabilityLevel(v enums.DeviceStabilityType) *GiftMissionConfigUpsertOne {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.SetStabilityLevel(v)
	})
}

// UpdateStabilityLevel sets the "stability_level" field to the value that was provided on create.
func (u *GiftMissionConfigUpsertOne) UpdateStabilityLevel() *GiftMissionConfigUpsertOne {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.UpdateStabilityLevel()
	})
}

// SetGpuVersion sets the "gpu_version" field.
func (u *GiftMissionConfigUpsertOne) SetGpuVersion(v enums.GpuVersion) *GiftMissionConfigUpsertOne {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.SetGpuVersion(v)
	})
}

// UpdateGpuVersion sets the "gpu_version" field to the value that was provided on create.
func (u *GiftMissionConfigUpsertOne) UpdateGpuVersion() *GiftMissionConfigUpsertOne {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.UpdateGpuVersion()
	})
}

// SetGapBase sets the "gap_base" field.
func (u *GiftMissionConfigUpsertOne) SetGapBase(v int64) *GiftMissionConfigUpsertOne {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.SetGapBase(v)
	})
}

// AddGapBase adds v to the "gap_base" field.
func (u *GiftMissionConfigUpsertOne) AddGapBase(v int64) *GiftMissionConfigUpsertOne {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.AddGapBase(v)
	})
}

// UpdateGapBase sets the "gap_base" field to the value that was provided on create.
func (u *GiftMissionConfigUpsertOne) UpdateGapBase() *GiftMissionConfigUpsertOne {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.UpdateGapBase()
	})
}

// SetGapRandomMax sets the "gap_random_max" field.
func (u *GiftMissionConfigUpsertOne) SetGapRandomMax(v int64) *GiftMissionConfigUpsertOne {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.SetGapRandomMax(v)
	})
}

// AddGapRandomMax adds v to the "gap_random_max" field.
func (u *GiftMissionConfigUpsertOne) AddGapRandomMax(v int64) *GiftMissionConfigUpsertOne {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.AddGapRandomMax(v)
	})
}

// UpdateGapRandomMax sets the "gap_random_max" field to the value that was provided on create.
func (u *GiftMissionConfigUpsertOne) UpdateGapRandomMax() *GiftMissionConfigUpsertOne {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.UpdateGapRandomMax()
	})
}

// SetGapRandomMin sets the "gap_random_min" field.
func (u *GiftMissionConfigUpsertOne) SetGapRandomMin(v int64) *GiftMissionConfigUpsertOne {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.SetGapRandomMin(v)
	})
}

// AddGapRandomMin adds v to the "gap_random_min" field.
func (u *GiftMissionConfigUpsertOne) AddGapRandomMin(v int64) *GiftMissionConfigUpsertOne {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.AddGapRandomMin(v)
	})
}

// UpdateGapRandomMin sets the "gap_random_min" field to the value that was provided on create.
func (u *GiftMissionConfigUpsertOne) UpdateGapRandomMin() *GiftMissionConfigUpsertOne {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.UpdateGapRandomMin()
	})
}

// Exec executes the query.
func (u *GiftMissionConfigUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for GiftMissionConfigCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GiftMissionConfigUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GiftMissionConfigUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GiftMissionConfigUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GiftMissionConfigCreateBulk is the builder for creating many GiftMissionConfig entities in bulk.
type GiftMissionConfigCreateBulk struct {
	config
	err      error
	builders []*GiftMissionConfigCreate
	conflict []sql.ConflictOption
}

// Save creates the GiftMissionConfig entities in the database.
func (gmccb *GiftMissionConfigCreateBulk) Save(ctx context.Context) ([]*GiftMissionConfig, error) {
	if gmccb.err != nil {
		return nil, gmccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gmccb.builders))
	nodes := make([]*GiftMissionConfig, len(gmccb.builders))
	mutators := make([]Mutator, len(gmccb.builders))
	for i := range gmccb.builders {
		func(i int, root context.Context) {
			builder := gmccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GiftMissionConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gmccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gmccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gmccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gmccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gmccb *GiftMissionConfigCreateBulk) SaveX(ctx context.Context) []*GiftMissionConfig {
	v, err := gmccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gmccb *GiftMissionConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := gmccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gmccb *GiftMissionConfigCreateBulk) ExecX(ctx context.Context) {
	if err := gmccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GiftMissionConfig.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GiftMissionConfigUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (gmccb *GiftMissionConfigCreateBulk) OnConflict(opts ...sql.ConflictOption) *GiftMissionConfigUpsertBulk {
	gmccb.conflict = opts
	return &GiftMissionConfigUpsertBulk{
		create: gmccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GiftMissionConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gmccb *GiftMissionConfigCreateBulk) OnConflictColumns(columns ...string) *GiftMissionConfigUpsertBulk {
	gmccb.conflict = append(gmccb.conflict, sql.ConflictColumns(columns...))
	return &GiftMissionConfigUpsertBulk{
		create: gmccb,
	}
}

// GiftMissionConfigUpsertBulk is the builder for "upsert"-ing
// a bulk of GiftMissionConfig nodes.
type GiftMissionConfigUpsertBulk struct {
	create *GiftMissionConfigCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GiftMissionConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(giftmissionconfig.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GiftMissionConfigUpsertBulk) UpdateNewValues() *GiftMissionConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(giftmissionconfig.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(giftmissionconfig.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GiftMissionConfig.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GiftMissionConfigUpsertBulk) Ignore() *GiftMissionConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GiftMissionConfigUpsertBulk) DoNothing() *GiftMissionConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GiftMissionConfigCreateBulk.OnConflict
// documentation for more info.
func (u *GiftMissionConfigUpsertBulk) Update(set func(*GiftMissionConfigUpsert)) *GiftMissionConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GiftMissionConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *GiftMissionConfigUpsertBulk) SetCreatedBy(v int64) *GiftMissionConfigUpsertBulk {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *GiftMissionConfigUpsertBulk) AddCreatedBy(v int64) *GiftMissionConfigUpsertBulk {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *GiftMissionConfigUpsertBulk) UpdateCreatedBy() *GiftMissionConfigUpsertBulk {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *GiftMissionConfigUpsertBulk) SetUpdatedBy(v int64) *GiftMissionConfigUpsertBulk {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *GiftMissionConfigUpsertBulk) AddUpdatedBy(v int64) *GiftMissionConfigUpsertBulk {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *GiftMissionConfigUpsertBulk) UpdateUpdatedBy() *GiftMissionConfigUpsertBulk {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GiftMissionConfigUpsertBulk) SetUpdatedAt(v time.Time) *GiftMissionConfigUpsertBulk {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GiftMissionConfigUpsertBulk) UpdateUpdatedAt() *GiftMissionConfigUpsertBulk {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GiftMissionConfigUpsertBulk) SetDeletedAt(v time.Time) *GiftMissionConfigUpsertBulk {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GiftMissionConfigUpsertBulk) UpdateDeletedAt() *GiftMissionConfigUpsertBulk {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetStabilityLevel sets the "stability_level" field.
func (u *GiftMissionConfigUpsertBulk) SetStabilityLevel(v enums.DeviceStabilityType) *GiftMissionConfigUpsertBulk {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.SetStabilityLevel(v)
	})
}

// UpdateStabilityLevel sets the "stability_level" field to the value that was provided on create.
func (u *GiftMissionConfigUpsertBulk) UpdateStabilityLevel() *GiftMissionConfigUpsertBulk {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.UpdateStabilityLevel()
	})
}

// SetGpuVersion sets the "gpu_version" field.
func (u *GiftMissionConfigUpsertBulk) SetGpuVersion(v enums.GpuVersion) *GiftMissionConfigUpsertBulk {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.SetGpuVersion(v)
	})
}

// UpdateGpuVersion sets the "gpu_version" field to the value that was provided on create.
func (u *GiftMissionConfigUpsertBulk) UpdateGpuVersion() *GiftMissionConfigUpsertBulk {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.UpdateGpuVersion()
	})
}

// SetGapBase sets the "gap_base" field.
func (u *GiftMissionConfigUpsertBulk) SetGapBase(v int64) *GiftMissionConfigUpsertBulk {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.SetGapBase(v)
	})
}

// AddGapBase adds v to the "gap_base" field.
func (u *GiftMissionConfigUpsertBulk) AddGapBase(v int64) *GiftMissionConfigUpsertBulk {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.AddGapBase(v)
	})
}

// UpdateGapBase sets the "gap_base" field to the value that was provided on create.
func (u *GiftMissionConfigUpsertBulk) UpdateGapBase() *GiftMissionConfigUpsertBulk {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.UpdateGapBase()
	})
}

// SetGapRandomMax sets the "gap_random_max" field.
func (u *GiftMissionConfigUpsertBulk) SetGapRandomMax(v int64) *GiftMissionConfigUpsertBulk {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.SetGapRandomMax(v)
	})
}

// AddGapRandomMax adds v to the "gap_random_max" field.
func (u *GiftMissionConfigUpsertBulk) AddGapRandomMax(v int64) *GiftMissionConfigUpsertBulk {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.AddGapRandomMax(v)
	})
}

// UpdateGapRandomMax sets the "gap_random_max" field to the value that was provided on create.
func (u *GiftMissionConfigUpsertBulk) UpdateGapRandomMax() *GiftMissionConfigUpsertBulk {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.UpdateGapRandomMax()
	})
}

// SetGapRandomMin sets the "gap_random_min" field.
func (u *GiftMissionConfigUpsertBulk) SetGapRandomMin(v int64) *GiftMissionConfigUpsertBulk {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.SetGapRandomMin(v)
	})
}

// AddGapRandomMin adds v to the "gap_random_min" field.
func (u *GiftMissionConfigUpsertBulk) AddGapRandomMin(v int64) *GiftMissionConfigUpsertBulk {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.AddGapRandomMin(v)
	})
}

// UpdateGapRandomMin sets the "gap_random_min" field to the value that was provided on create.
func (u *GiftMissionConfigUpsertBulk) UpdateGapRandomMin() *GiftMissionConfigUpsertBulk {
	return u.Update(func(s *GiftMissionConfigUpsert) {
		s.UpdateGapRandomMin()
	})
}

// Exec executes the query.
func (u *GiftMissionConfigUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the GiftMissionConfigCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for GiftMissionConfigCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GiftMissionConfigUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
