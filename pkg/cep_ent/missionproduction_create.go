// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/hmackeypair"
	"cephalon-ent/pkg/cep_ent/mission"
	"cephalon-ent/pkg/cep_ent/missionproduceorder"
	"cephalon-ent/pkg/cep_ent/missionproduction"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MissionProductionCreate is the builder for creating a MissionProduction entity.
type MissionProductionCreate struct {
	config
	mutation *MissionProductionMutation
	hooks    []Hook
}

// SetCreatedBy sets the "created_by" field.
func (mpc *MissionProductionCreate) SetCreatedBy(i int64) *MissionProductionCreate {
	mpc.mutation.SetCreatedBy(i)
	return mpc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mpc *MissionProductionCreate) SetNillableCreatedBy(i *int64) *MissionProductionCreate {
	if i != nil {
		mpc.SetCreatedBy(*i)
	}
	return mpc
}

// SetUpdatedBy sets the "updated_by" field.
func (mpc *MissionProductionCreate) SetUpdatedBy(i int64) *MissionProductionCreate {
	mpc.mutation.SetUpdatedBy(i)
	return mpc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mpc *MissionProductionCreate) SetNillableUpdatedBy(i *int64) *MissionProductionCreate {
	if i != nil {
		mpc.SetUpdatedBy(*i)
	}
	return mpc
}

// SetCreatedAt sets the "created_at" field.
func (mpc *MissionProductionCreate) SetCreatedAt(t time.Time) *MissionProductionCreate {
	mpc.mutation.SetCreatedAt(t)
	return mpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mpc *MissionProductionCreate) SetNillableCreatedAt(t *time.Time) *MissionProductionCreate {
	if t != nil {
		mpc.SetCreatedAt(*t)
	}
	return mpc
}

// SetUpdatedAt sets the "updated_at" field.
func (mpc *MissionProductionCreate) SetUpdatedAt(t time.Time) *MissionProductionCreate {
	mpc.mutation.SetUpdatedAt(t)
	return mpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mpc *MissionProductionCreate) SetNillableUpdatedAt(t *time.Time) *MissionProductionCreate {
	if t != nil {
		mpc.SetUpdatedAt(*t)
	}
	return mpc
}

// SetDeletedAt sets the "deleted_at" field.
func (mpc *MissionProductionCreate) SetDeletedAt(t time.Time) *MissionProductionCreate {
	mpc.mutation.SetDeletedAt(t)
	return mpc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mpc *MissionProductionCreate) SetNillableDeletedAt(t *time.Time) *MissionProductionCreate {
	if t != nil {
		mpc.SetDeletedAt(*t)
	}
	return mpc
}

// SetMissionID sets the "mission_id" field.
func (mpc *MissionProductionCreate) SetMissionID(i int64) *MissionProductionCreate {
	mpc.mutation.SetMissionID(i)
	return mpc
}

// SetHmacKeyPairID sets the "hmac_key_pair_id" field.
func (mpc *MissionProductionCreate) SetHmacKeyPairID(i int64) *MissionProductionCreate {
	mpc.mutation.SetHmacKeyPairID(i)
	return mpc
}

// SetStartedAt sets the "started_at" field.
func (mpc *MissionProductionCreate) SetStartedAt(t time.Time) *MissionProductionCreate {
	mpc.mutation.SetStartedAt(t)
	return mpc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (mpc *MissionProductionCreate) SetNillableStartedAt(t *time.Time) *MissionProductionCreate {
	if t != nil {
		mpc.SetStartedAt(*t)
	}
	return mpc
}

// SetFinishedAt sets the "finished_at" field.
func (mpc *MissionProductionCreate) SetFinishedAt(t time.Time) *MissionProductionCreate {
	mpc.mutation.SetFinishedAt(t)
	return mpc
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (mpc *MissionProductionCreate) SetNillableFinishedAt(t *time.Time) *MissionProductionCreate {
	if t != nil {
		mpc.SetFinishedAt(*t)
	}
	return mpc
}

// SetStatus sets the "status" field.
func (mpc *MissionProductionCreate) SetStatus(m missionproduction.Status) *MissionProductionCreate {
	mpc.mutation.SetStatus(m)
	return mpc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mpc *MissionProductionCreate) SetNillableStatus(m *missionproduction.Status) *MissionProductionCreate {
	if m != nil {
		mpc.SetStatus(*m)
	}
	return mpc
}

// SetDeviceID sets the "device_id" field.
func (mpc *MissionProductionCreate) SetDeviceID(i int64) *MissionProductionCreate {
	mpc.mutation.SetDeviceID(i)
	return mpc
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (mpc *MissionProductionCreate) SetNillableDeviceID(i *int64) *MissionProductionCreate {
	if i != nil {
		mpc.SetDeviceID(*i)
	}
	return mpc
}

// SetResultUrls sets the "result_urls" field.
func (mpc *MissionProductionCreate) SetResultUrls(s string) *MissionProductionCreate {
	mpc.mutation.SetResultUrls(s)
	return mpc
}

// SetNillableResultUrls sets the "result_urls" field if the given value is not nil.
func (mpc *MissionProductionCreate) SetNillableResultUrls(s *string) *MissionProductionCreate {
	if s != nil {
		mpc.SetResultUrls(*s)
	}
	return mpc
}

// SetAdditionalResult sets the "additional_result" field.
func (mpc *MissionProductionCreate) SetAdditionalResult(s string) *MissionProductionCreate {
	mpc.mutation.SetAdditionalResult(s)
	return mpc
}

// SetNillableAdditionalResult sets the "additional_result" field if the given value is not nil.
func (mpc *MissionProductionCreate) SetNillableAdditionalResult(s *string) *MissionProductionCreate {
	if s != nil {
		mpc.SetAdditionalResult(*s)
	}
	return mpc
}

// SetID sets the "id" field.
func (mpc *MissionProductionCreate) SetID(i int64) *MissionProductionCreate {
	mpc.mutation.SetID(i)
	return mpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mpc *MissionProductionCreate) SetNillableID(i *int64) *MissionProductionCreate {
	if i != nil {
		mpc.SetID(*i)
	}
	return mpc
}

// SetMissionProduceOrderID sets the "mission_produce_order" edge to the MissionProduceOrder entity by ID.
func (mpc *MissionProductionCreate) SetMissionProduceOrderID(id int64) *MissionProductionCreate {
	mpc.mutation.SetMissionProduceOrderID(id)
	return mpc
}

// SetNillableMissionProduceOrderID sets the "mission_produce_order" edge to the MissionProduceOrder entity by ID if the given value is not nil.
func (mpc *MissionProductionCreate) SetNillableMissionProduceOrderID(id *int64) *MissionProductionCreate {
	if id != nil {
		mpc = mpc.SetMissionProduceOrderID(*id)
	}
	return mpc
}

// SetMissionProduceOrder sets the "mission_produce_order" edge to the MissionProduceOrder entity.
func (mpc *MissionProductionCreate) SetMissionProduceOrder(m *MissionProduceOrder) *MissionProductionCreate {
	return mpc.SetMissionProduceOrderID(m.ID)
}

// SetMission sets the "mission" edge to the Mission entity.
func (mpc *MissionProductionCreate) SetMission(m *Mission) *MissionProductionCreate {
	return mpc.SetMissionID(m.ID)
}

// SetHmacKeyPair sets the "hmac_key_pair" edge to the HmacKeyPair entity.
func (mpc *MissionProductionCreate) SetHmacKeyPair(h *HmacKeyPair) *MissionProductionCreate {
	return mpc.SetHmacKeyPairID(h.ID)
}

// Mutation returns the MissionProductionMutation object of the builder.
func (mpc *MissionProductionCreate) Mutation() *MissionProductionMutation {
	return mpc.mutation
}

// Save creates the MissionProduction in the database.
func (mpc *MissionProductionCreate) Save(ctx context.Context) (*MissionProduction, error) {
	mpc.defaults()
	return withHooks(ctx, mpc.sqlSave, mpc.mutation, mpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mpc *MissionProductionCreate) SaveX(ctx context.Context) *MissionProduction {
	v, err := mpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mpc *MissionProductionCreate) Exec(ctx context.Context) error {
	_, err := mpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpc *MissionProductionCreate) ExecX(ctx context.Context) {
	if err := mpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpc *MissionProductionCreate) defaults() {
	if _, ok := mpc.mutation.CreatedBy(); !ok {
		v := missionproduction.DefaultCreatedBy
		mpc.mutation.SetCreatedBy(v)
	}
	if _, ok := mpc.mutation.UpdatedBy(); !ok {
		v := missionproduction.DefaultUpdatedBy
		mpc.mutation.SetUpdatedBy(v)
	}
	if _, ok := mpc.mutation.CreatedAt(); !ok {
		v := missionproduction.DefaultCreatedAt()
		mpc.mutation.SetCreatedAt(v)
	}
	if _, ok := mpc.mutation.UpdatedAt(); !ok {
		v := missionproduction.DefaultUpdatedAt()
		mpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mpc.mutation.DeletedAt(); !ok {
		v := missionproduction.DefaultDeletedAt
		mpc.mutation.SetDeletedAt(v)
	}
	if _, ok := mpc.mutation.StartedAt(); !ok {
		v := missionproduction.DefaultStartedAt
		mpc.mutation.SetStartedAt(v)
	}
	if _, ok := mpc.mutation.FinishedAt(); !ok {
		v := missionproduction.DefaultFinishedAt
		mpc.mutation.SetFinishedAt(v)
	}
	if _, ok := mpc.mutation.Status(); !ok {
		v := missionproduction.DefaultStatus
		mpc.mutation.SetStatus(v)
	}
	if _, ok := mpc.mutation.DeviceID(); !ok {
		v := missionproduction.DefaultDeviceID
		mpc.mutation.SetDeviceID(v)
	}
	if _, ok := mpc.mutation.ResultUrls(); !ok {
		v := missionproduction.DefaultResultUrls
		mpc.mutation.SetResultUrls(v)
	}
	if _, ok := mpc.mutation.AdditionalResult(); !ok {
		v := missionproduction.DefaultAdditionalResult
		mpc.mutation.SetAdditionalResult(v)
	}
	if _, ok := mpc.mutation.ID(); !ok {
		v := missionproduction.DefaultID()
		mpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpc *MissionProductionCreate) check() error {
	if _, ok := mpc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "MissionProduction.created_by"`)}
	}
	if _, ok := mpc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "MissionProduction.updated_by"`)}
	}
	if _, ok := mpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "MissionProduction.created_at"`)}
	}
	if _, ok := mpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "MissionProduction.updated_at"`)}
	}
	if _, ok := mpc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "MissionProduction.deleted_at"`)}
	}
	if _, ok := mpc.mutation.MissionID(); !ok {
		return &ValidationError{Name: "mission_id", err: errors.New(`cep_ent: missing required field "MissionProduction.mission_id"`)}
	}
	if _, ok := mpc.mutation.HmacKeyPairID(); !ok {
		return &ValidationError{Name: "hmac_key_pair_id", err: errors.New(`cep_ent: missing required field "MissionProduction.hmac_key_pair_id"`)}
	}
	if _, ok := mpc.mutation.StartedAt(); !ok {
		return &ValidationError{Name: "started_at", err: errors.New(`cep_ent: missing required field "MissionProduction.started_at"`)}
	}
	if _, ok := mpc.mutation.FinishedAt(); !ok {
		return &ValidationError{Name: "finished_at", err: errors.New(`cep_ent: missing required field "MissionProduction.finished_at"`)}
	}
	if _, ok := mpc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`cep_ent: missing required field "MissionProduction.status"`)}
	}
	if v, ok := mpc.mutation.Status(); ok {
		if err := missionproduction.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "MissionProduction.status": %w`, err)}
		}
	}
	if _, ok := mpc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`cep_ent: missing required field "MissionProduction.device_id"`)}
	}
	if _, ok := mpc.mutation.ResultUrls(); !ok {
		return &ValidationError{Name: "result_urls", err: errors.New(`cep_ent: missing required field "MissionProduction.result_urls"`)}
	}
	if _, ok := mpc.mutation.AdditionalResult(); !ok {
		return &ValidationError{Name: "additional_result", err: errors.New(`cep_ent: missing required field "MissionProduction.additional_result"`)}
	}
	if _, ok := mpc.mutation.MissionID(); !ok {
		return &ValidationError{Name: "mission", err: errors.New(`cep_ent: missing required edge "MissionProduction.mission"`)}
	}
	if _, ok := mpc.mutation.HmacKeyPairID(); !ok {
		return &ValidationError{Name: "hmac_key_pair", err: errors.New(`cep_ent: missing required edge "MissionProduction.hmac_key_pair"`)}
	}
	return nil
}

func (mpc *MissionProductionCreate) sqlSave(ctx context.Context) (*MissionProduction, error) {
	if err := mpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	mpc.mutation.id = &_node.ID
	mpc.mutation.done = true
	return _node, nil
}

func (mpc *MissionProductionCreate) createSpec() (*MissionProduction, *sqlgraph.CreateSpec) {
	var (
		_node = &MissionProduction{config: mpc.config}
		_spec = sqlgraph.NewCreateSpec(missionproduction.Table, sqlgraph.NewFieldSpec(missionproduction.FieldID, field.TypeInt64))
	)
	if id, ok := mpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mpc.mutation.CreatedBy(); ok {
		_spec.SetField(missionproduction.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := mpc.mutation.UpdatedBy(); ok {
		_spec.SetField(missionproduction.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := mpc.mutation.CreatedAt(); ok {
		_spec.SetField(missionproduction.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mpc.mutation.UpdatedAt(); ok {
		_spec.SetField(missionproduction.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mpc.mutation.DeletedAt(); ok {
		_spec.SetField(missionproduction.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := mpc.mutation.StartedAt(); ok {
		_spec.SetField(missionproduction.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := mpc.mutation.FinishedAt(); ok {
		_spec.SetField(missionproduction.FieldFinishedAt, field.TypeTime, value)
		_node.FinishedAt = value
	}
	if value, ok := mpc.mutation.Status(); ok {
		_spec.SetField(missionproduction.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := mpc.mutation.DeviceID(); ok {
		_spec.SetField(missionproduction.FieldDeviceID, field.TypeInt64, value)
		_node.DeviceID = value
	}
	if value, ok := mpc.mutation.ResultUrls(); ok {
		_spec.SetField(missionproduction.FieldResultUrls, field.TypeString, value)
		_node.ResultUrls = value
	}
	if value, ok := mpc.mutation.AdditionalResult(); ok {
		_spec.SetField(missionproduction.FieldAdditionalResult, field.TypeString, value)
		_node.AdditionalResult = value
	}
	if nodes := mpc.mutation.MissionProduceOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   missionproduction.MissionProduceOrderTable,
			Columns: []string{missionproduction.MissionProduceOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mpc.mutation.MissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduction.MissionTable,
			Columns: []string{missionproduction.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MissionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mpc.mutation.HmacKeyPairIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduction.HmacKeyPairTable,
			Columns: []string{missionproduction.HmacKeyPairColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hmackeypair.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.HmacKeyPairID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MissionProductionCreateBulk is the builder for creating many MissionProduction entities in bulk.
type MissionProductionCreateBulk struct {
	config
	builders []*MissionProductionCreate
}

// Save creates the MissionProduction entities in the database.
func (mpcb *MissionProductionCreateBulk) Save(ctx context.Context) ([]*MissionProduction, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mpcb.builders))
	nodes := make([]*MissionProduction, len(mpcb.builders))
	mutators := make([]Mutator, len(mpcb.builders))
	for i := range mpcb.builders {
		func(i int, root context.Context) {
			builder := mpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MissionProductionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mpcb *MissionProductionCreateBulk) SaveX(ctx context.Context) []*MissionProduction {
	v, err := mpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mpcb *MissionProductionCreateBulk) Exec(ctx context.Context) error {
	_, err := mpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpcb *MissionProductionCreateBulk) ExecX(ctx context.Context) {
	if err := mpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
