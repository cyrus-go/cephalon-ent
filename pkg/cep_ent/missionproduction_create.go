// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/mission"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionproduceorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionproduction"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// MissionProductionCreate is the builder for creating a MissionProduction entity.
type MissionProductionCreate struct {
	config
	mutation *MissionProductionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (mpc *MissionProductionCreate) SetCreatedBy(i int64) *MissionProductionCreate {
	mpc.mutation.SetCreatedBy(i)
	return mpc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mpc *MissionProductionCreate) SetNillableCreatedBy(i *int64) *MissionProductionCreate {
	if i != nil {
		mpc.SetCreatedBy(*i)
	}
	return mpc
}

// SetUpdatedBy sets the "updated_by" field.
func (mpc *MissionProductionCreate) SetUpdatedBy(i int64) *MissionProductionCreate {
	mpc.mutation.SetUpdatedBy(i)
	return mpc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mpc *MissionProductionCreate) SetNillableUpdatedBy(i *int64) *MissionProductionCreate {
	if i != nil {
		mpc.SetUpdatedBy(*i)
	}
	return mpc
}

// SetCreatedAt sets the "created_at" field.
func (mpc *MissionProductionCreate) SetCreatedAt(t time.Time) *MissionProductionCreate {
	mpc.mutation.SetCreatedAt(t)
	return mpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mpc *MissionProductionCreate) SetNillableCreatedAt(t *time.Time) *MissionProductionCreate {
	if t != nil {
		mpc.SetCreatedAt(*t)
	}
	return mpc
}

// SetUpdatedAt sets the "updated_at" field.
func (mpc *MissionProductionCreate) SetUpdatedAt(t time.Time) *MissionProductionCreate {
	mpc.mutation.SetUpdatedAt(t)
	return mpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mpc *MissionProductionCreate) SetNillableUpdatedAt(t *time.Time) *MissionProductionCreate {
	if t != nil {
		mpc.SetUpdatedAt(*t)
	}
	return mpc
}

// SetDeletedAt sets the "deleted_at" field.
func (mpc *MissionProductionCreate) SetDeletedAt(t time.Time) *MissionProductionCreate {
	mpc.mutation.SetDeletedAt(t)
	return mpc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mpc *MissionProductionCreate) SetNillableDeletedAt(t *time.Time) *MissionProductionCreate {
	if t != nil {
		mpc.SetDeletedAt(*t)
	}
	return mpc
}

// SetMissionID sets the "mission_id" field.
func (mpc *MissionProductionCreate) SetMissionID(i int64) *MissionProductionCreate {
	mpc.mutation.SetMissionID(i)
	return mpc
}

// SetUserID sets the "user_id" field.
func (mpc *MissionProductionCreate) SetUserID(i int64) *MissionProductionCreate {
	mpc.mutation.SetUserID(i)
	return mpc
}

// SetStartedAt sets the "started_at" field.
func (mpc *MissionProductionCreate) SetStartedAt(t time.Time) *MissionProductionCreate {
	mpc.mutation.SetStartedAt(t)
	return mpc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (mpc *MissionProductionCreate) SetNillableStartedAt(t *time.Time) *MissionProductionCreate {
	if t != nil {
		mpc.SetStartedAt(*t)
	}
	return mpc
}

// SetFinishedAt sets the "finished_at" field.
func (mpc *MissionProductionCreate) SetFinishedAt(t time.Time) *MissionProductionCreate {
	mpc.mutation.SetFinishedAt(t)
	return mpc
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (mpc *MissionProductionCreate) SetNillableFinishedAt(t *time.Time) *MissionProductionCreate {
	if t != nil {
		mpc.SetFinishedAt(*t)
	}
	return mpc
}

// SetState sets the "state" field.
func (mpc *MissionProductionCreate) SetState(es enums.MissionState) *MissionProductionCreate {
	mpc.mutation.SetState(es)
	return mpc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (mpc *MissionProductionCreate) SetNillableState(es *enums.MissionState) *MissionProductionCreate {
	if es != nil {
		mpc.SetState(*es)
	}
	return mpc
}

// SetDeviceID sets the "device_id" field.
func (mpc *MissionProductionCreate) SetDeviceID(i int64) *MissionProductionCreate {
	mpc.mutation.SetDeviceID(i)
	return mpc
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (mpc *MissionProductionCreate) SetNillableDeviceID(i *int64) *MissionProductionCreate {
	if i != nil {
		mpc.SetDeviceID(*i)
	}
	return mpc
}

// SetGpuVersion sets the "gpu_version" field.
func (mpc *MissionProductionCreate) SetGpuVersion(ev enums.GpuVersion) *MissionProductionCreate {
	mpc.mutation.SetGpuVersion(ev)
	return mpc
}

// SetNillableGpuVersion sets the "gpu_version" field if the given value is not nil.
func (mpc *MissionProductionCreate) SetNillableGpuVersion(ev *enums.GpuVersion) *MissionProductionCreate {
	if ev != nil {
		mpc.SetGpuVersion(*ev)
	}
	return mpc
}

// SetDeviceSlot sets the "device_slot" field.
func (mpc *MissionProductionCreate) SetDeviceSlot(i int8) *MissionProductionCreate {
	mpc.mutation.SetDeviceSlot(i)
	return mpc
}

// SetNillableDeviceSlot sets the "device_slot" field if the given value is not nil.
func (mpc *MissionProductionCreate) SetNillableDeviceSlot(i *int8) *MissionProductionCreate {
	if i != nil {
		mpc.SetDeviceSlot(*i)
	}
	return mpc
}

// SetUrls sets the "urls" field.
func (mpc *MissionProductionCreate) SetUrls(s string) *MissionProductionCreate {
	mpc.mutation.SetUrls(s)
	return mpc
}

// SetNillableUrls sets the "urls" field if the given value is not nil.
func (mpc *MissionProductionCreate) SetNillableUrls(s *string) *MissionProductionCreate {
	if s != nil {
		mpc.SetUrls(*s)
	}
	return mpc
}

// SetRespStatusCode sets the "resp_status_code" field.
func (mpc *MissionProductionCreate) SetRespStatusCode(i int32) *MissionProductionCreate {
	mpc.mutation.SetRespStatusCode(i)
	return mpc
}

// SetNillableRespStatusCode sets the "resp_status_code" field if the given value is not nil.
func (mpc *MissionProductionCreate) SetNillableRespStatusCode(i *int32) *MissionProductionCreate {
	if i != nil {
		mpc.SetRespStatusCode(*i)
	}
	return mpc
}

// SetRespBody sets the "resp_body" field.
func (mpc *MissionProductionCreate) SetRespBody(s string) *MissionProductionCreate {
	mpc.mutation.SetRespBody(s)
	return mpc
}

// SetNillableRespBody sets the "resp_body" field if the given value is not nil.
func (mpc *MissionProductionCreate) SetNillableRespBody(s *string) *MissionProductionCreate {
	if s != nil {
		mpc.SetRespBody(*s)
	}
	return mpc
}

// SetID sets the "id" field.
func (mpc *MissionProductionCreate) SetID(i int64) *MissionProductionCreate {
	mpc.mutation.SetID(i)
	return mpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mpc *MissionProductionCreate) SetNillableID(i *int64) *MissionProductionCreate {
	if i != nil {
		mpc.SetID(*i)
	}
	return mpc
}

// SetMission sets the "mission" edge to the Mission entity.
func (mpc *MissionProductionCreate) SetMission(m *Mission) *MissionProductionCreate {
	return mpc.SetMissionID(m.ID)
}

// SetUser sets the "user" edge to the User entity.
func (mpc *MissionProductionCreate) SetUser(u *User) *MissionProductionCreate {
	return mpc.SetUserID(u.ID)
}

// SetMissionProduceOrderID sets the "mission_produce_order" edge to the MissionProduceOrder entity by ID.
func (mpc *MissionProductionCreate) SetMissionProduceOrderID(id int64) *MissionProductionCreate {
	mpc.mutation.SetMissionProduceOrderID(id)
	return mpc
}

// SetNillableMissionProduceOrderID sets the "mission_produce_order" edge to the MissionProduceOrder entity by ID if the given value is not nil.
func (mpc *MissionProductionCreate) SetNillableMissionProduceOrderID(id *int64) *MissionProductionCreate {
	if id != nil {
		mpc = mpc.SetMissionProduceOrderID(*id)
	}
	return mpc
}

// SetMissionProduceOrder sets the "mission_produce_order" edge to the MissionProduceOrder entity.
func (mpc *MissionProductionCreate) SetMissionProduceOrder(m *MissionProduceOrder) *MissionProductionCreate {
	return mpc.SetMissionProduceOrderID(m.ID)
}

// Mutation returns the MissionProductionMutation object of the builder.
func (mpc *MissionProductionCreate) Mutation() *MissionProductionMutation {
	return mpc.mutation
}

// Save creates the MissionProduction in the database.
func (mpc *MissionProductionCreate) Save(ctx context.Context) (*MissionProduction, error) {
	mpc.defaults()
	return withHooks(ctx, mpc.sqlSave, mpc.mutation, mpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mpc *MissionProductionCreate) SaveX(ctx context.Context) *MissionProduction {
	v, err := mpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mpc *MissionProductionCreate) Exec(ctx context.Context) error {
	_, err := mpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpc *MissionProductionCreate) ExecX(ctx context.Context) {
	if err := mpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpc *MissionProductionCreate) defaults() {
	if _, ok := mpc.mutation.CreatedBy(); !ok {
		v := missionproduction.DefaultCreatedBy
		mpc.mutation.SetCreatedBy(v)
	}
	if _, ok := mpc.mutation.UpdatedBy(); !ok {
		v := missionproduction.DefaultUpdatedBy
		mpc.mutation.SetUpdatedBy(v)
	}
	if _, ok := mpc.mutation.CreatedAt(); !ok {
		v := missionproduction.DefaultCreatedAt()
		mpc.mutation.SetCreatedAt(v)
	}
	if _, ok := mpc.mutation.UpdatedAt(); !ok {
		v := missionproduction.DefaultUpdatedAt()
		mpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mpc.mutation.DeletedAt(); !ok {
		v := missionproduction.DefaultDeletedAt
		mpc.mutation.SetDeletedAt(v)
	}
	if _, ok := mpc.mutation.StartedAt(); !ok {
		v := missionproduction.DefaultStartedAt
		mpc.mutation.SetStartedAt(v)
	}
	if _, ok := mpc.mutation.FinishedAt(); !ok {
		v := missionproduction.DefaultFinishedAt
		mpc.mutation.SetFinishedAt(v)
	}
	if _, ok := mpc.mutation.State(); !ok {
		v := missionproduction.DefaultState
		mpc.mutation.SetState(v)
	}
	if _, ok := mpc.mutation.DeviceID(); !ok {
		v := missionproduction.DefaultDeviceID
		mpc.mutation.SetDeviceID(v)
	}
	if _, ok := mpc.mutation.GpuVersion(); !ok {
		v := missionproduction.DefaultGpuVersion
		mpc.mutation.SetGpuVersion(v)
	}
	if _, ok := mpc.mutation.DeviceSlot(); !ok {
		v := missionproduction.DefaultDeviceSlot
		mpc.mutation.SetDeviceSlot(v)
	}
	if _, ok := mpc.mutation.Urls(); !ok {
		v := missionproduction.DefaultUrls
		mpc.mutation.SetUrls(v)
	}
	if _, ok := mpc.mutation.RespStatusCode(); !ok {
		v := missionproduction.DefaultRespStatusCode
		mpc.mutation.SetRespStatusCode(v)
	}
	if _, ok := mpc.mutation.RespBody(); !ok {
		v := missionproduction.DefaultRespBody
		mpc.mutation.SetRespBody(v)
	}
	if _, ok := mpc.mutation.ID(); !ok {
		v := missionproduction.DefaultID()
		mpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpc *MissionProductionCreate) check() error {
	if _, ok := mpc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "MissionProduction.created_by"`)}
	}
	if _, ok := mpc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "MissionProduction.updated_by"`)}
	}
	if _, ok := mpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "MissionProduction.created_at"`)}
	}
	if _, ok := mpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "MissionProduction.updated_at"`)}
	}
	if _, ok := mpc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "MissionProduction.deleted_at"`)}
	}
	if _, ok := mpc.mutation.MissionID(); !ok {
		return &ValidationError{Name: "mission_id", err: errors.New(`cep_ent: missing required field "MissionProduction.mission_id"`)}
	}
	if _, ok := mpc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "MissionProduction.user_id"`)}
	}
	if _, ok := mpc.mutation.StartedAt(); !ok {
		return &ValidationError{Name: "started_at", err: errors.New(`cep_ent: missing required field "MissionProduction.started_at"`)}
	}
	if _, ok := mpc.mutation.FinishedAt(); !ok {
		return &ValidationError{Name: "finished_at", err: errors.New(`cep_ent: missing required field "MissionProduction.finished_at"`)}
	}
	if _, ok := mpc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`cep_ent: missing required field "MissionProduction.state"`)}
	}
	if v, ok := mpc.mutation.State(); ok {
		if err := missionproduction.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`cep_ent: validator failed for field "MissionProduction.state": %w`, err)}
		}
	}
	if _, ok := mpc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`cep_ent: missing required field "MissionProduction.device_id"`)}
	}
	if _, ok := mpc.mutation.GpuVersion(); !ok {
		return &ValidationError{Name: "gpu_version", err: errors.New(`cep_ent: missing required field "MissionProduction.gpu_version"`)}
	}
	if v, ok := mpc.mutation.GpuVersion(); ok {
		if err := missionproduction.GpuVersionValidator(v); err != nil {
			return &ValidationError{Name: "gpu_version", err: fmt.Errorf(`cep_ent: validator failed for field "MissionProduction.gpu_version": %w`, err)}
		}
	}
	if _, ok := mpc.mutation.DeviceSlot(); !ok {
		return &ValidationError{Name: "device_slot", err: errors.New(`cep_ent: missing required field "MissionProduction.device_slot"`)}
	}
	if _, ok := mpc.mutation.Urls(); !ok {
		return &ValidationError{Name: "urls", err: errors.New(`cep_ent: missing required field "MissionProduction.urls"`)}
	}
	if _, ok := mpc.mutation.RespStatusCode(); !ok {
		return &ValidationError{Name: "resp_status_code", err: errors.New(`cep_ent: missing required field "MissionProduction.resp_status_code"`)}
	}
	if _, ok := mpc.mutation.RespBody(); !ok {
		return &ValidationError{Name: "resp_body", err: errors.New(`cep_ent: missing required field "MissionProduction.resp_body"`)}
	}
	if _, ok := mpc.mutation.MissionID(); !ok {
		return &ValidationError{Name: "mission", err: errors.New(`cep_ent: missing required edge "MissionProduction.mission"`)}
	}
	if _, ok := mpc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "MissionProduction.user"`)}
	}
	return nil
}

func (mpc *MissionProductionCreate) sqlSave(ctx context.Context) (*MissionProduction, error) {
	if err := mpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	mpc.mutation.id = &_node.ID
	mpc.mutation.done = true
	return _node, nil
}

func (mpc *MissionProductionCreate) createSpec() (*MissionProduction, *sqlgraph.CreateSpec) {
	var (
		_node = &MissionProduction{config: mpc.config}
		_spec = sqlgraph.NewCreateSpec(missionproduction.Table, sqlgraph.NewFieldSpec(missionproduction.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = mpc.conflict
	if id, ok := mpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mpc.mutation.CreatedBy(); ok {
		_spec.SetField(missionproduction.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := mpc.mutation.UpdatedBy(); ok {
		_spec.SetField(missionproduction.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := mpc.mutation.CreatedAt(); ok {
		_spec.SetField(missionproduction.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mpc.mutation.UpdatedAt(); ok {
		_spec.SetField(missionproduction.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mpc.mutation.DeletedAt(); ok {
		_spec.SetField(missionproduction.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := mpc.mutation.StartedAt(); ok {
		_spec.SetField(missionproduction.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := mpc.mutation.FinishedAt(); ok {
		_spec.SetField(missionproduction.FieldFinishedAt, field.TypeTime, value)
		_node.FinishedAt = value
	}
	if value, ok := mpc.mutation.State(); ok {
		_spec.SetField(missionproduction.FieldState, field.TypeEnum, value)
		_node.State = value
	}
	if value, ok := mpc.mutation.DeviceID(); ok {
		_spec.SetField(missionproduction.FieldDeviceID, field.TypeInt64, value)
		_node.DeviceID = value
	}
	if value, ok := mpc.mutation.GpuVersion(); ok {
		_spec.SetField(missionproduction.FieldGpuVersion, field.TypeEnum, value)
		_node.GpuVersion = value
	}
	if value, ok := mpc.mutation.DeviceSlot(); ok {
		_spec.SetField(missionproduction.FieldDeviceSlot, field.TypeInt8, value)
		_node.DeviceSlot = value
	}
	if value, ok := mpc.mutation.Urls(); ok {
		_spec.SetField(missionproduction.FieldUrls, field.TypeString, value)
		_node.Urls = value
	}
	if value, ok := mpc.mutation.RespStatusCode(); ok {
		_spec.SetField(missionproduction.FieldRespStatusCode, field.TypeInt32, value)
		_node.RespStatusCode = value
	}
	if value, ok := mpc.mutation.RespBody(); ok {
		_spec.SetField(missionproduction.FieldRespBody, field.TypeString, value)
		_node.RespBody = value
	}
	if nodes := mpc.mutation.MissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduction.MissionTable,
			Columns: []string{missionproduction.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MissionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mpc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduction.UserTable,
			Columns: []string{missionproduction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mpc.mutation.MissionProduceOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   missionproduction.MissionProduceOrderTable,
			Columns: []string{missionproduction.MissionProduceOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MissionProduction.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MissionProductionUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (mpc *MissionProductionCreate) OnConflict(opts ...sql.ConflictOption) *MissionProductionUpsertOne {
	mpc.conflict = opts
	return &MissionProductionUpsertOne{
		create: mpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MissionProduction.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mpc *MissionProductionCreate) OnConflictColumns(columns ...string) *MissionProductionUpsertOne {
	mpc.conflict = append(mpc.conflict, sql.ConflictColumns(columns...))
	return &MissionProductionUpsertOne{
		create: mpc,
	}
}

type (
	// MissionProductionUpsertOne is the builder for "upsert"-ing
	//  one MissionProduction node.
	MissionProductionUpsertOne struct {
		create *MissionProductionCreate
	}

	// MissionProductionUpsert is the "OnConflict" setter.
	MissionProductionUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *MissionProductionUpsert) SetCreatedBy(v int64) *MissionProductionUpsert {
	u.Set(missionproduction.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MissionProductionUpsert) UpdateCreatedBy() *MissionProductionUpsert {
	u.SetExcluded(missionproduction.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *MissionProductionUpsert) AddCreatedBy(v int64) *MissionProductionUpsert {
	u.Add(missionproduction.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MissionProductionUpsert) SetUpdatedBy(v int64) *MissionProductionUpsert {
	u.Set(missionproduction.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MissionProductionUpsert) UpdateUpdatedBy() *MissionProductionUpsert {
	u.SetExcluded(missionproduction.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MissionProductionUpsert) AddUpdatedBy(v int64) *MissionProductionUpsert {
	u.Add(missionproduction.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MissionProductionUpsert) SetUpdatedAt(v time.Time) *MissionProductionUpsert {
	u.Set(missionproduction.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MissionProductionUpsert) UpdateUpdatedAt() *MissionProductionUpsert {
	u.SetExcluded(missionproduction.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MissionProductionUpsert) SetDeletedAt(v time.Time) *MissionProductionUpsert {
	u.Set(missionproduction.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MissionProductionUpsert) UpdateDeletedAt() *MissionProductionUpsert {
	u.SetExcluded(missionproduction.FieldDeletedAt)
	return u
}

// SetMissionID sets the "mission_id" field.
func (u *MissionProductionUpsert) SetMissionID(v int64) *MissionProductionUpsert {
	u.Set(missionproduction.FieldMissionID, v)
	return u
}

// UpdateMissionID sets the "mission_id" field to the value that was provided on create.
func (u *MissionProductionUpsert) UpdateMissionID() *MissionProductionUpsert {
	u.SetExcluded(missionproduction.FieldMissionID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *MissionProductionUpsert) SetUserID(v int64) *MissionProductionUpsert {
	u.Set(missionproduction.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *MissionProductionUpsert) UpdateUserID() *MissionProductionUpsert {
	u.SetExcluded(missionproduction.FieldUserID)
	return u
}

// SetStartedAt sets the "started_at" field.
func (u *MissionProductionUpsert) SetStartedAt(v time.Time) *MissionProductionUpsert {
	u.Set(missionproduction.FieldStartedAt, v)
	return u
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *MissionProductionUpsert) UpdateStartedAt() *MissionProductionUpsert {
	u.SetExcluded(missionproduction.FieldStartedAt)
	return u
}

// SetFinishedAt sets the "finished_at" field.
func (u *MissionProductionUpsert) SetFinishedAt(v time.Time) *MissionProductionUpsert {
	u.Set(missionproduction.FieldFinishedAt, v)
	return u
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *MissionProductionUpsert) UpdateFinishedAt() *MissionProductionUpsert {
	u.SetExcluded(missionproduction.FieldFinishedAt)
	return u
}

// SetState sets the "state" field.
func (u *MissionProductionUpsert) SetState(v enums.MissionState) *MissionProductionUpsert {
	u.Set(missionproduction.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *MissionProductionUpsert) UpdateState() *MissionProductionUpsert {
	u.SetExcluded(missionproduction.FieldState)
	return u
}

// SetDeviceID sets the "device_id" field.
func (u *MissionProductionUpsert) SetDeviceID(v int64) *MissionProductionUpsert {
	u.Set(missionproduction.FieldDeviceID, v)
	return u
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *MissionProductionUpsert) UpdateDeviceID() *MissionProductionUpsert {
	u.SetExcluded(missionproduction.FieldDeviceID)
	return u
}

// AddDeviceID adds v to the "device_id" field.
func (u *MissionProductionUpsert) AddDeviceID(v int64) *MissionProductionUpsert {
	u.Add(missionproduction.FieldDeviceID, v)
	return u
}

// SetGpuVersion sets the "gpu_version" field.
func (u *MissionProductionUpsert) SetGpuVersion(v enums.GpuVersion) *MissionProductionUpsert {
	u.Set(missionproduction.FieldGpuVersion, v)
	return u
}

// UpdateGpuVersion sets the "gpu_version" field to the value that was provided on create.
func (u *MissionProductionUpsert) UpdateGpuVersion() *MissionProductionUpsert {
	u.SetExcluded(missionproduction.FieldGpuVersion)
	return u
}

// SetDeviceSlot sets the "device_slot" field.
func (u *MissionProductionUpsert) SetDeviceSlot(v int8) *MissionProductionUpsert {
	u.Set(missionproduction.FieldDeviceSlot, v)
	return u
}

// UpdateDeviceSlot sets the "device_slot" field to the value that was provided on create.
func (u *MissionProductionUpsert) UpdateDeviceSlot() *MissionProductionUpsert {
	u.SetExcluded(missionproduction.FieldDeviceSlot)
	return u
}

// AddDeviceSlot adds v to the "device_slot" field.
func (u *MissionProductionUpsert) AddDeviceSlot(v int8) *MissionProductionUpsert {
	u.Add(missionproduction.FieldDeviceSlot, v)
	return u
}

// SetUrls sets the "urls" field.
func (u *MissionProductionUpsert) SetUrls(v string) *MissionProductionUpsert {
	u.Set(missionproduction.FieldUrls, v)
	return u
}

// UpdateUrls sets the "urls" field to the value that was provided on create.
func (u *MissionProductionUpsert) UpdateUrls() *MissionProductionUpsert {
	u.SetExcluded(missionproduction.FieldUrls)
	return u
}

// SetRespStatusCode sets the "resp_status_code" field.
func (u *MissionProductionUpsert) SetRespStatusCode(v int32) *MissionProductionUpsert {
	u.Set(missionproduction.FieldRespStatusCode, v)
	return u
}

// UpdateRespStatusCode sets the "resp_status_code" field to the value that was provided on create.
func (u *MissionProductionUpsert) UpdateRespStatusCode() *MissionProductionUpsert {
	u.SetExcluded(missionproduction.FieldRespStatusCode)
	return u
}

// AddRespStatusCode adds v to the "resp_status_code" field.
func (u *MissionProductionUpsert) AddRespStatusCode(v int32) *MissionProductionUpsert {
	u.Add(missionproduction.FieldRespStatusCode, v)
	return u
}

// SetRespBody sets the "resp_body" field.
func (u *MissionProductionUpsert) SetRespBody(v string) *MissionProductionUpsert {
	u.Set(missionproduction.FieldRespBody, v)
	return u
}

// UpdateRespBody sets the "resp_body" field to the value that was provided on create.
func (u *MissionProductionUpsert) UpdateRespBody() *MissionProductionUpsert {
	u.SetExcluded(missionproduction.FieldRespBody)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MissionProduction.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(missionproduction.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MissionProductionUpsertOne) UpdateNewValues() *MissionProductionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(missionproduction.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(missionproduction.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MissionProduction.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MissionProductionUpsertOne) Ignore() *MissionProductionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MissionProductionUpsertOne) DoNothing() *MissionProductionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MissionProductionCreate.OnConflict
// documentation for more info.
func (u *MissionProductionUpsertOne) Update(set func(*MissionProductionUpsert)) *MissionProductionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MissionProductionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *MissionProductionUpsertOne) SetCreatedBy(v int64) *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *MissionProductionUpsertOne) AddCreatedBy(v int64) *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MissionProductionUpsertOne) UpdateCreatedBy() *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MissionProductionUpsertOne) SetUpdatedBy(v int64) *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MissionProductionUpsertOne) AddUpdatedBy(v int64) *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MissionProductionUpsertOne) UpdateUpdatedBy() *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MissionProductionUpsertOne) SetUpdatedAt(v time.Time) *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MissionProductionUpsertOne) UpdateUpdatedAt() *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MissionProductionUpsertOne) SetDeletedAt(v time.Time) *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MissionProductionUpsertOne) UpdateDeletedAt() *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetMissionID sets the "mission_id" field.
func (u *MissionProductionUpsertOne) SetMissionID(v int64) *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.SetMissionID(v)
	})
}

// UpdateMissionID sets the "mission_id" field to the value that was provided on create.
func (u *MissionProductionUpsertOne) UpdateMissionID() *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.UpdateMissionID()
	})
}

// SetUserID sets the "user_id" field.
func (u *MissionProductionUpsertOne) SetUserID(v int64) *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *MissionProductionUpsertOne) UpdateUserID() *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.UpdateUserID()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *MissionProductionUpsertOne) SetStartedAt(v time.Time) *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *MissionProductionUpsertOne) UpdateStartedAt() *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.UpdateStartedAt()
	})
}

// SetFinishedAt sets the "finished_at" field.
func (u *MissionProductionUpsertOne) SetFinishedAt(v time.Time) *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.SetFinishedAt(v)
	})
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *MissionProductionUpsertOne) UpdateFinishedAt() *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.UpdateFinishedAt()
	})
}

// SetState sets the "state" field.
func (u *MissionProductionUpsertOne) SetState(v enums.MissionState) *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *MissionProductionUpsertOne) UpdateState() *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.UpdateState()
	})
}

// SetDeviceID sets the "device_id" field.
func (u *MissionProductionUpsertOne) SetDeviceID(v int64) *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.SetDeviceID(v)
	})
}

// AddDeviceID adds v to the "device_id" field.
func (u *MissionProductionUpsertOne) AddDeviceID(v int64) *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.AddDeviceID(v)
	})
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *MissionProductionUpsertOne) UpdateDeviceID() *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.UpdateDeviceID()
	})
}

// SetGpuVersion sets the "gpu_version" field.
func (u *MissionProductionUpsertOne) SetGpuVersion(v enums.GpuVersion) *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.SetGpuVersion(v)
	})
}

// UpdateGpuVersion sets the "gpu_version" field to the value that was provided on create.
func (u *MissionProductionUpsertOne) UpdateGpuVersion() *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.UpdateGpuVersion()
	})
}

// SetDeviceSlot sets the "device_slot" field.
func (u *MissionProductionUpsertOne) SetDeviceSlot(v int8) *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.SetDeviceSlot(v)
	})
}

// AddDeviceSlot adds v to the "device_slot" field.
func (u *MissionProductionUpsertOne) AddDeviceSlot(v int8) *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.AddDeviceSlot(v)
	})
}

// UpdateDeviceSlot sets the "device_slot" field to the value that was provided on create.
func (u *MissionProductionUpsertOne) UpdateDeviceSlot() *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.UpdateDeviceSlot()
	})
}

// SetUrls sets the "urls" field.
func (u *MissionProductionUpsertOne) SetUrls(v string) *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.SetUrls(v)
	})
}

// UpdateUrls sets the "urls" field to the value that was provided on create.
func (u *MissionProductionUpsertOne) UpdateUrls() *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.UpdateUrls()
	})
}

// SetRespStatusCode sets the "resp_status_code" field.
func (u *MissionProductionUpsertOne) SetRespStatusCode(v int32) *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.SetRespStatusCode(v)
	})
}

// AddRespStatusCode adds v to the "resp_status_code" field.
func (u *MissionProductionUpsertOne) AddRespStatusCode(v int32) *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.AddRespStatusCode(v)
	})
}

// UpdateRespStatusCode sets the "resp_status_code" field to the value that was provided on create.
func (u *MissionProductionUpsertOne) UpdateRespStatusCode() *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.UpdateRespStatusCode()
	})
}

// SetRespBody sets the "resp_body" field.
func (u *MissionProductionUpsertOne) SetRespBody(v string) *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.SetRespBody(v)
	})
}

// UpdateRespBody sets the "resp_body" field to the value that was provided on create.
func (u *MissionProductionUpsertOne) UpdateRespBody() *MissionProductionUpsertOne {
	return u.Update(func(s *MissionProductionUpsert) {
		s.UpdateRespBody()
	})
}

// Exec executes the query.
func (u *MissionProductionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for MissionProductionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MissionProductionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MissionProductionUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MissionProductionUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MissionProductionCreateBulk is the builder for creating many MissionProduction entities in bulk.
type MissionProductionCreateBulk struct {
	config
	err      error
	builders []*MissionProductionCreate
	conflict []sql.ConflictOption
}

// Save creates the MissionProduction entities in the database.
func (mpcb *MissionProductionCreateBulk) Save(ctx context.Context) ([]*MissionProduction, error) {
	if mpcb.err != nil {
		return nil, mpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mpcb.builders))
	nodes := make([]*MissionProduction, len(mpcb.builders))
	mutators := make([]Mutator, len(mpcb.builders))
	for i := range mpcb.builders {
		func(i int, root context.Context) {
			builder := mpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MissionProductionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mpcb *MissionProductionCreateBulk) SaveX(ctx context.Context) []*MissionProduction {
	v, err := mpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mpcb *MissionProductionCreateBulk) Exec(ctx context.Context) error {
	_, err := mpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpcb *MissionProductionCreateBulk) ExecX(ctx context.Context) {
	if err := mpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MissionProduction.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MissionProductionUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (mpcb *MissionProductionCreateBulk) OnConflict(opts ...sql.ConflictOption) *MissionProductionUpsertBulk {
	mpcb.conflict = opts
	return &MissionProductionUpsertBulk{
		create: mpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MissionProduction.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mpcb *MissionProductionCreateBulk) OnConflictColumns(columns ...string) *MissionProductionUpsertBulk {
	mpcb.conflict = append(mpcb.conflict, sql.ConflictColumns(columns...))
	return &MissionProductionUpsertBulk{
		create: mpcb,
	}
}

// MissionProductionUpsertBulk is the builder for "upsert"-ing
// a bulk of MissionProduction nodes.
type MissionProductionUpsertBulk struct {
	create *MissionProductionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MissionProduction.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(missionproduction.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MissionProductionUpsertBulk) UpdateNewValues() *MissionProductionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(missionproduction.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(missionproduction.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MissionProduction.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MissionProductionUpsertBulk) Ignore() *MissionProductionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MissionProductionUpsertBulk) DoNothing() *MissionProductionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MissionProductionCreateBulk.OnConflict
// documentation for more info.
func (u *MissionProductionUpsertBulk) Update(set func(*MissionProductionUpsert)) *MissionProductionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MissionProductionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *MissionProductionUpsertBulk) SetCreatedBy(v int64) *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *MissionProductionUpsertBulk) AddCreatedBy(v int64) *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MissionProductionUpsertBulk) UpdateCreatedBy() *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MissionProductionUpsertBulk) SetUpdatedBy(v int64) *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MissionProductionUpsertBulk) AddUpdatedBy(v int64) *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MissionProductionUpsertBulk) UpdateUpdatedBy() *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MissionProductionUpsertBulk) SetUpdatedAt(v time.Time) *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MissionProductionUpsertBulk) UpdateUpdatedAt() *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MissionProductionUpsertBulk) SetDeletedAt(v time.Time) *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MissionProductionUpsertBulk) UpdateDeletedAt() *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetMissionID sets the "mission_id" field.
func (u *MissionProductionUpsertBulk) SetMissionID(v int64) *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.SetMissionID(v)
	})
}

// UpdateMissionID sets the "mission_id" field to the value that was provided on create.
func (u *MissionProductionUpsertBulk) UpdateMissionID() *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.UpdateMissionID()
	})
}

// SetUserID sets the "user_id" field.
func (u *MissionProductionUpsertBulk) SetUserID(v int64) *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *MissionProductionUpsertBulk) UpdateUserID() *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.UpdateUserID()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *MissionProductionUpsertBulk) SetStartedAt(v time.Time) *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *MissionProductionUpsertBulk) UpdateStartedAt() *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.UpdateStartedAt()
	})
}

// SetFinishedAt sets the "finished_at" field.
func (u *MissionProductionUpsertBulk) SetFinishedAt(v time.Time) *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.SetFinishedAt(v)
	})
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *MissionProductionUpsertBulk) UpdateFinishedAt() *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.UpdateFinishedAt()
	})
}

// SetState sets the "state" field.
func (u *MissionProductionUpsertBulk) SetState(v enums.MissionState) *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *MissionProductionUpsertBulk) UpdateState() *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.UpdateState()
	})
}

// SetDeviceID sets the "device_id" field.
func (u *MissionProductionUpsertBulk) SetDeviceID(v int64) *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.SetDeviceID(v)
	})
}

// AddDeviceID adds v to the "device_id" field.
func (u *MissionProductionUpsertBulk) AddDeviceID(v int64) *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.AddDeviceID(v)
	})
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *MissionProductionUpsertBulk) UpdateDeviceID() *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.UpdateDeviceID()
	})
}

// SetGpuVersion sets the "gpu_version" field.
func (u *MissionProductionUpsertBulk) SetGpuVersion(v enums.GpuVersion) *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.SetGpuVersion(v)
	})
}

// UpdateGpuVersion sets the "gpu_version" field to the value that was provided on create.
func (u *MissionProductionUpsertBulk) UpdateGpuVersion() *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.UpdateGpuVersion()
	})
}

// SetDeviceSlot sets the "device_slot" field.
func (u *MissionProductionUpsertBulk) SetDeviceSlot(v int8) *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.SetDeviceSlot(v)
	})
}

// AddDeviceSlot adds v to the "device_slot" field.
func (u *MissionProductionUpsertBulk) AddDeviceSlot(v int8) *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.AddDeviceSlot(v)
	})
}

// UpdateDeviceSlot sets the "device_slot" field to the value that was provided on create.
func (u *MissionProductionUpsertBulk) UpdateDeviceSlot() *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.UpdateDeviceSlot()
	})
}

// SetUrls sets the "urls" field.
func (u *MissionProductionUpsertBulk) SetUrls(v string) *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.SetUrls(v)
	})
}

// UpdateUrls sets the "urls" field to the value that was provided on create.
func (u *MissionProductionUpsertBulk) UpdateUrls() *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.UpdateUrls()
	})
}

// SetRespStatusCode sets the "resp_status_code" field.
func (u *MissionProductionUpsertBulk) SetRespStatusCode(v int32) *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.SetRespStatusCode(v)
	})
}

// AddRespStatusCode adds v to the "resp_status_code" field.
func (u *MissionProductionUpsertBulk) AddRespStatusCode(v int32) *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.AddRespStatusCode(v)
	})
}

// UpdateRespStatusCode sets the "resp_status_code" field to the value that was provided on create.
func (u *MissionProductionUpsertBulk) UpdateRespStatusCode() *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.UpdateRespStatusCode()
	})
}

// SetRespBody sets the "resp_body" field.
func (u *MissionProductionUpsertBulk) SetRespBody(v string) *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.SetRespBody(v)
	})
}

// UpdateRespBody sets the "resp_body" field to the value that was provided on create.
func (u *MissionProductionUpsertBulk) UpdateRespBody() *MissionProductionUpsertBulk {
	return u.Update(func(s *MissionProductionUpsert) {
		s.UpdateRespBody()
	})
}

// Exec executes the query.
func (u *MissionProductionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the MissionProductionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for MissionProductionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MissionProductionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
