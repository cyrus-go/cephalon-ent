// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/missionproduceorder"
	"cephalon-ent/pkg/cep_ent/predicate"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MissionProduceOrderDelete is the builder for deleting a MissionProduceOrder entity.
type MissionProduceOrderDelete struct {
	config
	hooks    []Hook
	mutation *MissionProduceOrderMutation
}

// Where appends a list predicates to the MissionProduceOrderDelete builder.
func (mpod *MissionProduceOrderDelete) Where(ps ...predicate.MissionProduceOrder) *MissionProduceOrderDelete {
	mpod.mutation.Where(ps...)
	return mpod
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mpod *MissionProduceOrderDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, mpod.sqlExec, mpod.mutation, mpod.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mpod *MissionProduceOrderDelete) ExecX(ctx context.Context) int {
	n, err := mpod.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mpod *MissionProduceOrderDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(missionproduceorder.Table, sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64))
	if ps := mpod.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mpod.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mpod.mutation.done = true
	return affected, err
}

// MissionProduceOrderDeleteOne is the builder for deleting a single MissionProduceOrder entity.
type MissionProduceOrderDeleteOne struct {
	mpod *MissionProduceOrderDelete
}

// Where appends a list predicates to the MissionProduceOrderDelete builder.
func (mpodo *MissionProduceOrderDeleteOne) Where(ps ...predicate.MissionProduceOrder) *MissionProduceOrderDeleteOne {
	mpodo.mpod.mutation.Where(ps...)
	return mpodo
}

// Exec executes the deletion query.
func (mpodo *MissionProduceOrderDeleteOne) Exec(ctx context.Context) error {
	n, err := mpodo.mpod.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{missionproduceorder.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mpodo *MissionProduceOrderDeleteOne) ExecX(ctx context.Context) {
	if err := mpodo.Exec(ctx); err != nil {
		panic(err)
	}
}
