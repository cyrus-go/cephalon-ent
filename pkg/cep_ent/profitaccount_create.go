// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/earnbill"
	"cephalon-ent/pkg/cep_ent/profitaccount"
	"cephalon-ent/pkg/cep_ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProfitAccountCreate is the builder for creating a ProfitAccount entity.
type ProfitAccountCreate struct {
	config
	mutation *ProfitAccountMutation
	hooks    []Hook
}

// SetCreatedBy sets the "created_by" field.
func (pac *ProfitAccountCreate) SetCreatedBy(i int64) *ProfitAccountCreate {
	pac.mutation.SetCreatedBy(i)
	return pac
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pac *ProfitAccountCreate) SetNillableCreatedBy(i *int64) *ProfitAccountCreate {
	if i != nil {
		pac.SetCreatedBy(*i)
	}
	return pac
}

// SetUpdatedBy sets the "updated_by" field.
func (pac *ProfitAccountCreate) SetUpdatedBy(i int64) *ProfitAccountCreate {
	pac.mutation.SetUpdatedBy(i)
	return pac
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pac *ProfitAccountCreate) SetNillableUpdatedBy(i *int64) *ProfitAccountCreate {
	if i != nil {
		pac.SetUpdatedBy(*i)
	}
	return pac
}

// SetCreatedAt sets the "created_at" field.
func (pac *ProfitAccountCreate) SetCreatedAt(t time.Time) *ProfitAccountCreate {
	pac.mutation.SetCreatedAt(t)
	return pac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pac *ProfitAccountCreate) SetNillableCreatedAt(t *time.Time) *ProfitAccountCreate {
	if t != nil {
		pac.SetCreatedAt(*t)
	}
	return pac
}

// SetUpdatedAt sets the "updated_at" field.
func (pac *ProfitAccountCreate) SetUpdatedAt(t time.Time) *ProfitAccountCreate {
	pac.mutation.SetUpdatedAt(t)
	return pac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pac *ProfitAccountCreate) SetNillableUpdatedAt(t *time.Time) *ProfitAccountCreate {
	if t != nil {
		pac.SetUpdatedAt(*t)
	}
	return pac
}

// SetDeletedAt sets the "deleted_at" field.
func (pac *ProfitAccountCreate) SetDeletedAt(t time.Time) *ProfitAccountCreate {
	pac.mutation.SetDeletedAt(t)
	return pac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pac *ProfitAccountCreate) SetNillableDeletedAt(t *time.Time) *ProfitAccountCreate {
	if t != nil {
		pac.SetDeletedAt(*t)
	}
	return pac
}

// SetUserID sets the "user_id" field.
func (pac *ProfitAccountCreate) SetUserID(i int64) *ProfitAccountCreate {
	pac.mutation.SetUserID(i)
	return pac
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pac *ProfitAccountCreate) SetNillableUserID(i *int64) *ProfitAccountCreate {
	if i != nil {
		pac.SetUserID(*i)
	}
	return pac
}

// SetSumCep sets the "sum_cep" field.
func (pac *ProfitAccountCreate) SetSumCep(i int64) *ProfitAccountCreate {
	pac.mutation.SetSumCep(i)
	return pac
}

// SetNillableSumCep sets the "sum_cep" field if the given value is not nil.
func (pac *ProfitAccountCreate) SetNillableSumCep(i *int64) *ProfitAccountCreate {
	if i != nil {
		pac.SetSumCep(*i)
	}
	return pac
}

// SetRemainCep sets the "remain_cep" field.
func (pac *ProfitAccountCreate) SetRemainCep(i int64) *ProfitAccountCreate {
	pac.mutation.SetRemainCep(i)
	return pac
}

// SetNillableRemainCep sets the "remain_cep" field if the given value is not nil.
func (pac *ProfitAccountCreate) SetNillableRemainCep(i *int64) *ProfitAccountCreate {
	if i != nil {
		pac.SetRemainCep(*i)
	}
	return pac
}

// SetID sets the "id" field.
func (pac *ProfitAccountCreate) SetID(i int64) *ProfitAccountCreate {
	pac.mutation.SetID(i)
	return pac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pac *ProfitAccountCreate) SetNillableID(i *int64) *ProfitAccountCreate {
	if i != nil {
		pac.SetID(*i)
	}
	return pac
}

// SetUser sets the "user" edge to the User entity.
func (pac *ProfitAccountCreate) SetUser(u *User) *ProfitAccountCreate {
	return pac.SetUserID(u.ID)
}

// AddEarnBillIDs adds the "earn_bills" edge to the EarnBill entity by IDs.
func (pac *ProfitAccountCreate) AddEarnBillIDs(ids ...int64) *ProfitAccountCreate {
	pac.mutation.AddEarnBillIDs(ids...)
	return pac
}

// AddEarnBills adds the "earn_bills" edges to the EarnBill entity.
func (pac *ProfitAccountCreate) AddEarnBills(e ...*EarnBill) *ProfitAccountCreate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pac.AddEarnBillIDs(ids...)
}

// Mutation returns the ProfitAccountMutation object of the builder.
func (pac *ProfitAccountCreate) Mutation() *ProfitAccountMutation {
	return pac.mutation
}

// Save creates the ProfitAccount in the database.
func (pac *ProfitAccountCreate) Save(ctx context.Context) (*ProfitAccount, error) {
	pac.defaults()
	return withHooks(ctx, pac.sqlSave, pac.mutation, pac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pac *ProfitAccountCreate) SaveX(ctx context.Context) *ProfitAccount {
	v, err := pac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pac *ProfitAccountCreate) Exec(ctx context.Context) error {
	_, err := pac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pac *ProfitAccountCreate) ExecX(ctx context.Context) {
	if err := pac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pac *ProfitAccountCreate) defaults() {
	if _, ok := pac.mutation.CreatedBy(); !ok {
		v := profitaccount.DefaultCreatedBy
		pac.mutation.SetCreatedBy(v)
	}
	if _, ok := pac.mutation.UpdatedBy(); !ok {
		v := profitaccount.DefaultUpdatedBy
		pac.mutation.SetUpdatedBy(v)
	}
	if _, ok := pac.mutation.CreatedAt(); !ok {
		v := profitaccount.DefaultCreatedAt()
		pac.mutation.SetCreatedAt(v)
	}
	if _, ok := pac.mutation.UpdatedAt(); !ok {
		v := profitaccount.DefaultUpdatedAt()
		pac.mutation.SetUpdatedAt(v)
	}
	if _, ok := pac.mutation.DeletedAt(); !ok {
		v := profitaccount.DefaultDeletedAt
		pac.mutation.SetDeletedAt(v)
	}
	if _, ok := pac.mutation.UserID(); !ok {
		v := profitaccount.DefaultUserID
		pac.mutation.SetUserID(v)
	}
	if _, ok := pac.mutation.SumCep(); !ok {
		v := profitaccount.DefaultSumCep
		pac.mutation.SetSumCep(v)
	}
	if _, ok := pac.mutation.RemainCep(); !ok {
		v := profitaccount.DefaultRemainCep
		pac.mutation.SetRemainCep(v)
	}
	if _, ok := pac.mutation.ID(); !ok {
		v := profitaccount.DefaultID()
		pac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pac *ProfitAccountCreate) check() error {
	if _, ok := pac.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "ProfitAccount.created_by"`)}
	}
	if _, ok := pac.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "ProfitAccount.updated_by"`)}
	}
	if _, ok := pac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "ProfitAccount.created_at"`)}
	}
	if _, ok := pac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "ProfitAccount.updated_at"`)}
	}
	if _, ok := pac.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "ProfitAccount.deleted_at"`)}
	}
	if _, ok := pac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "ProfitAccount.user_id"`)}
	}
	if _, ok := pac.mutation.SumCep(); !ok {
		return &ValidationError{Name: "sum_cep", err: errors.New(`cep_ent: missing required field "ProfitAccount.sum_cep"`)}
	}
	if _, ok := pac.mutation.RemainCep(); !ok {
		return &ValidationError{Name: "remain_cep", err: errors.New(`cep_ent: missing required field "ProfitAccount.remain_cep"`)}
	}
	if _, ok := pac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "ProfitAccount.user"`)}
	}
	return nil
}

func (pac *ProfitAccountCreate) sqlSave(ctx context.Context) (*ProfitAccount, error) {
	if err := pac.check(); err != nil {
		return nil, err
	}
	_node, _spec := pac.createSpec()
	if err := sqlgraph.CreateNode(ctx, pac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	pac.mutation.id = &_node.ID
	pac.mutation.done = true
	return _node, nil
}

func (pac *ProfitAccountCreate) createSpec() (*ProfitAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &ProfitAccount{config: pac.config}
		_spec = sqlgraph.NewCreateSpec(profitaccount.Table, sqlgraph.NewFieldSpec(profitaccount.FieldID, field.TypeInt64))
	)
	if id, ok := pac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pac.mutation.CreatedBy(); ok {
		_spec.SetField(profitaccount.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := pac.mutation.UpdatedBy(); ok {
		_spec.SetField(profitaccount.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := pac.mutation.CreatedAt(); ok {
		_spec.SetField(profitaccount.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pac.mutation.UpdatedAt(); ok {
		_spec.SetField(profitaccount.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pac.mutation.DeletedAt(); ok {
		_spec.SetField(profitaccount.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := pac.mutation.SumCep(); ok {
		_spec.SetField(profitaccount.FieldSumCep, field.TypeInt64, value)
		_node.SumCep = value
	}
	if value, ok := pac.mutation.RemainCep(); ok {
		_spec.SetField(profitaccount.FieldRemainCep, field.TypeInt64, value)
		_node.RemainCep = value
	}
	if nodes := pac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   profitaccount.UserTable,
			Columns: []string{profitaccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pac.mutation.EarnBillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profitaccount.EarnBillsTable,
			Columns: []string{profitaccount.EarnBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earnbill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProfitAccountCreateBulk is the builder for creating many ProfitAccount entities in bulk.
type ProfitAccountCreateBulk struct {
	config
	builders []*ProfitAccountCreate
}

// Save creates the ProfitAccount entities in the database.
func (pacb *ProfitAccountCreateBulk) Save(ctx context.Context) ([]*ProfitAccount, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pacb.builders))
	nodes := make([]*ProfitAccount, len(pacb.builders))
	mutators := make([]Mutator, len(pacb.builders))
	for i := range pacb.builders {
		func(i int, root context.Context) {
			builder := pacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProfitAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pacb *ProfitAccountCreateBulk) SaveX(ctx context.Context) []*ProfitAccount {
	v, err := pacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pacb *ProfitAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := pacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pacb *ProfitAccountCreateBulk) ExecX(ctx context.Context) {
	if err := pacb.Exec(ctx); err != nil {
		panic(err)
	}
}
