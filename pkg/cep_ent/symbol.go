// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/symbol"
)

// 币种，与用户多对多，通过钱包 Wallet
type Symbol struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int64 `json:"created_by"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int64 `json:"updated_by"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at"`
	// 币种名称，唯一
	Name string `json:"name"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SymbolQuery when eager-loading is set.
	Edges        SymbolEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SymbolEdges holds the relations/edges for other nodes in the graph.
type SymbolEdges struct {
	// Wallets holds the value of the wallets edge.
	Wallets []*Wallet `json:"wallets,omitempty"`
	// Bills holds the value of the bills edge.
	Bills []*Bill `json:"bills,omitempty"`
	// MissionOrders holds the value of the mission_orders edge.
	MissionOrders []*MissionOrder `json:"mission_orders,omitempty"`
	// TransferOrders holds the value of the transfer_orders edge.
	TransferOrders []*TransferOrder `json:"transfer_orders,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// WalletsOrErr returns the Wallets value or an error if the edge
// was not loaded in eager-loading.
func (e SymbolEdges) WalletsOrErr() ([]*Wallet, error) {
	if e.loadedTypes[0] {
		return e.Wallets, nil
	}
	return nil, &NotLoadedError{edge: "wallets"}
}

// BillsOrErr returns the Bills value or an error if the edge
// was not loaded in eager-loading.
func (e SymbolEdges) BillsOrErr() ([]*Bill, error) {
	if e.loadedTypes[1] {
		return e.Bills, nil
	}
	return nil, &NotLoadedError{edge: "bills"}
}

// MissionOrdersOrErr returns the MissionOrders value or an error if the edge
// was not loaded in eager-loading.
func (e SymbolEdges) MissionOrdersOrErr() ([]*MissionOrder, error) {
	if e.loadedTypes[2] {
		return e.MissionOrders, nil
	}
	return nil, &NotLoadedError{edge: "mission_orders"}
}

// TransferOrdersOrErr returns the TransferOrders value or an error if the edge
// was not loaded in eager-loading.
func (e SymbolEdges) TransferOrdersOrErr() ([]*TransferOrder, error) {
	if e.loadedTypes[3] {
		return e.TransferOrders, nil
	}
	return nil, &NotLoadedError{edge: "transfer_orders"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Symbol) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case symbol.FieldID, symbol.FieldCreatedBy, symbol.FieldUpdatedBy:
			values[i] = new(sql.NullInt64)
		case symbol.FieldName:
			values[i] = new(sql.NullString)
		case symbol.FieldCreatedAt, symbol.FieldUpdatedAt, symbol.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Symbol fields.
func (s *Symbol) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case symbol.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int64(value.Int64)
		case symbol.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				s.CreatedBy = value.Int64
			}
		case symbol.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				s.UpdatedBy = value.Int64
			}
		case symbol.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case symbol.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case symbol.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				s.DeletedAt = value.Time
			}
		case symbol.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Symbol.
// This includes values selected through modifiers, order, etc.
func (s *Symbol) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryWallets queries the "wallets" edge of the Symbol entity.
func (s *Symbol) QueryWallets() *WalletQuery {
	return NewSymbolClient(s.config).QueryWallets(s)
}

// QueryBills queries the "bills" edge of the Symbol entity.
func (s *Symbol) QueryBills() *BillQuery {
	return NewSymbolClient(s.config).QueryBills(s)
}

// QueryMissionOrders queries the "mission_orders" edge of the Symbol entity.
func (s *Symbol) QueryMissionOrders() *MissionOrderQuery {
	return NewSymbolClient(s.config).QueryMissionOrders(s)
}

// QueryTransferOrders queries the "transfer_orders" edge of the Symbol entity.
func (s *Symbol) QueryTransferOrders() *TransferOrderQuery {
	return NewSymbolClient(s.config).QueryTransferOrders(s)
}

// Update returns a builder for updating this Symbol.
// Note that you need to call Symbol.Unwrap() before calling this method if this Symbol
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Symbol) Update() *SymbolUpdateOne {
	return NewSymbolClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Symbol entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Symbol) Unwrap() *Symbol {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: Symbol is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Symbol) String() string {
	var builder strings.Builder
	builder.WriteString("Symbol(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", s.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", s.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(s.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Symbols is a parsable slice of Symbol.
type Symbols []*Symbol
