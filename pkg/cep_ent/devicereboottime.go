// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/device"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/devicereboottime"
)

// 设备重启时间记录
type DeviceRebootTime struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建者 ID
	CreatedBy int64 `json:"created_by"`
	// 更新者 ID
	UpdatedBy int64 `json:"updated_by"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// 外键设备 id
	DeviceID int64 `json:"device_id,string"`
	// 设备开机时间
	StartTime time.Time `json:"start_time"`
	// 设备关机时间
	EndTime time.Time `json:"end_time"`
	// 设备上线时间
	NowTime time.Time `json:"now_time"`
	// 设备运行时间
	OnlineTime string `json:"online_time"`
	// 设备宕机时间
	OfflineTime string `json:"offline_time"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeviceRebootTimeQuery when eager-loading is set.
	Edges        DeviceRebootTimeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DeviceRebootTimeEdges holds the relations/edges for other nodes in the graph.
type DeviceRebootTimeEdges struct {
	// Device holds the value of the device edge.
	Device *Device `json:"device,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DeviceOrErr returns the Device value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeviceRebootTimeEdges) DeviceOrErr() (*Device, error) {
	if e.loadedTypes[0] {
		if e.Device == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: device.Label}
		}
		return e.Device, nil
	}
	return nil, &NotLoadedError{edge: "device"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeviceRebootTime) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case devicereboottime.FieldID, devicereboottime.FieldCreatedBy, devicereboottime.FieldUpdatedBy, devicereboottime.FieldDeviceID:
			values[i] = new(sql.NullInt64)
		case devicereboottime.FieldOnlineTime, devicereboottime.FieldOfflineTime:
			values[i] = new(sql.NullString)
		case devicereboottime.FieldCreatedAt, devicereboottime.FieldUpdatedAt, devicereboottime.FieldDeletedAt, devicereboottime.FieldStartTime, devicereboottime.FieldEndTime, devicereboottime.FieldNowTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeviceRebootTime fields.
func (drt *DeviceRebootTime) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case devicereboottime.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			drt.ID = int64(value.Int64)
		case devicereboottime.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				drt.CreatedBy = value.Int64
			}
		case devicereboottime.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				drt.UpdatedBy = value.Int64
			}
		case devicereboottime.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				drt.CreatedAt = value.Time
			}
		case devicereboottime.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				drt.UpdatedAt = value.Time
			}
		case devicereboottime.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				drt.DeletedAt = value.Time
			}
		case devicereboottime.FieldDeviceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field device_id", values[i])
			} else if value.Valid {
				drt.DeviceID = value.Int64
			}
		case devicereboottime.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				drt.StartTime = value.Time
			}
		case devicereboottime.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				drt.EndTime = value.Time
			}
		case devicereboottime.FieldNowTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field now_time", values[i])
			} else if value.Valid {
				drt.NowTime = value.Time
			}
		case devicereboottime.FieldOnlineTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field online_time", values[i])
			} else if value.Valid {
				drt.OnlineTime = value.String
			}
		case devicereboottime.FieldOfflineTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field offline_time", values[i])
			} else if value.Valid {
				drt.OfflineTime = value.String
			}
		default:
			drt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DeviceRebootTime.
// This includes values selected through modifiers, order, etc.
func (drt *DeviceRebootTime) Value(name string) (ent.Value, error) {
	return drt.selectValues.Get(name)
}

// QueryDevice queries the "device" edge of the DeviceRebootTime entity.
func (drt *DeviceRebootTime) QueryDevice() *DeviceQuery {
	return NewDeviceRebootTimeClient(drt.config).QueryDevice(drt)
}

// Update returns a builder for updating this DeviceRebootTime.
// Note that you need to call DeviceRebootTime.Unwrap() before calling this method if this DeviceRebootTime
// was returned from a transaction, and the transaction was committed or rolled back.
func (drt *DeviceRebootTime) Update() *DeviceRebootTimeUpdateOne {
	return NewDeviceRebootTimeClient(drt.config).UpdateOne(drt)
}

// Unwrap unwraps the DeviceRebootTime entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (drt *DeviceRebootTime) Unwrap() *DeviceRebootTime {
	_tx, ok := drt.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: DeviceRebootTime is not a transactional entity")
	}
	drt.config.driver = _tx.drv
	return drt
}

// String implements the fmt.Stringer.
func (drt *DeviceRebootTime) String() string {
	var builder strings.Builder
	builder.WriteString("DeviceRebootTime(")
	builder.WriteString(fmt.Sprintf("id=%v, ", drt.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", drt.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", drt.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(drt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(drt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(drt.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("device_id=")
	builder.WriteString(fmt.Sprintf("%v", drt.DeviceID))
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(drt.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(drt.EndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("now_time=")
	builder.WriteString(drt.NowTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("online_time=")
	builder.WriteString(drt.OnlineTime)
	builder.WriteString(", ")
	builder.WriteString("offline_time=")
	builder.WriteString(drt.OfflineTime)
	builder.WriteByte(')')
	return builder.String()
}

// DeviceRebootTimes is a parsable slice of DeviceRebootTime.
type DeviceRebootTimes []*DeviceRebootTime
