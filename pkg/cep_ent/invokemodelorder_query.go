// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/apitoken"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/bill"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/invokemodelorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/model"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
)

// InvokeModelOrderQuery is the builder for querying InvokeModelOrder entities.
type InvokeModelOrderQuery struct {
	config
	ctx          *QueryContext
	order        []invokemodelorder.OrderOption
	inters       []Interceptor
	predicates   []predicate.InvokeModelOrder
	withBills    *BillQuery
	withUser     *UserQuery
	withModel    *ModelQuery
	withAPIToken *ApiTokenQuery
	modifiers    []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the InvokeModelOrderQuery builder.
func (imoq *InvokeModelOrderQuery) Where(ps ...predicate.InvokeModelOrder) *InvokeModelOrderQuery {
	imoq.predicates = append(imoq.predicates, ps...)
	return imoq
}

// Limit the number of records to be returned by this query.
func (imoq *InvokeModelOrderQuery) Limit(limit int) *InvokeModelOrderQuery {
	imoq.ctx.Limit = &limit
	return imoq
}

// Offset to start from.
func (imoq *InvokeModelOrderQuery) Offset(offset int) *InvokeModelOrderQuery {
	imoq.ctx.Offset = &offset
	return imoq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (imoq *InvokeModelOrderQuery) Unique(unique bool) *InvokeModelOrderQuery {
	imoq.ctx.Unique = &unique
	return imoq
}

// Order specifies how the records should be ordered.
func (imoq *InvokeModelOrderQuery) Order(o ...invokemodelorder.OrderOption) *InvokeModelOrderQuery {
	imoq.order = append(imoq.order, o...)
	return imoq
}

// QueryBills chains the current query on the "bills" edge.
func (imoq *InvokeModelOrderQuery) QueryBills() *BillQuery {
	query := (&BillClient{config: imoq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := imoq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := imoq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(invokemodelorder.Table, invokemodelorder.FieldID, selector),
			sqlgraph.To(bill.Table, bill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, invokemodelorder.BillsTable, invokemodelorder.BillsColumn),
		)
		fromU = sqlgraph.SetNeighbors(imoq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (imoq *InvokeModelOrderQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: imoq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := imoq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := imoq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(invokemodelorder.Table, invokemodelorder.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, invokemodelorder.UserTable, invokemodelorder.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(imoq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryModel chains the current query on the "model" edge.
func (imoq *InvokeModelOrderQuery) QueryModel() *ModelQuery {
	query := (&ModelClient{config: imoq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := imoq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := imoq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(invokemodelorder.Table, invokemodelorder.FieldID, selector),
			sqlgraph.To(model.Table, model.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, invokemodelorder.ModelTable, invokemodelorder.ModelColumn),
		)
		fromU = sqlgraph.SetNeighbors(imoq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAPIToken chains the current query on the "api_token" edge.
func (imoq *InvokeModelOrderQuery) QueryAPIToken() *ApiTokenQuery {
	query := (&ApiTokenClient{config: imoq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := imoq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := imoq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(invokemodelorder.Table, invokemodelorder.FieldID, selector),
			sqlgraph.To(apitoken.Table, apitoken.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, invokemodelorder.APITokenTable, invokemodelorder.APITokenColumn),
		)
		fromU = sqlgraph.SetNeighbors(imoq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first InvokeModelOrder entity from the query.
// Returns a *NotFoundError when no InvokeModelOrder was found.
func (imoq *InvokeModelOrderQuery) First(ctx context.Context) (*InvokeModelOrder, error) {
	nodes, err := imoq.Limit(1).All(setContextOp(ctx, imoq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{invokemodelorder.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (imoq *InvokeModelOrderQuery) FirstX(ctx context.Context) *InvokeModelOrder {
	node, err := imoq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first InvokeModelOrder ID from the query.
// Returns a *NotFoundError when no InvokeModelOrder ID was found.
func (imoq *InvokeModelOrderQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = imoq.Limit(1).IDs(setContextOp(ctx, imoq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{invokemodelorder.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (imoq *InvokeModelOrderQuery) FirstIDX(ctx context.Context) int64 {
	id, err := imoq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single InvokeModelOrder entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one InvokeModelOrder entity is found.
// Returns a *NotFoundError when no InvokeModelOrder entities are found.
func (imoq *InvokeModelOrderQuery) Only(ctx context.Context) (*InvokeModelOrder, error) {
	nodes, err := imoq.Limit(2).All(setContextOp(ctx, imoq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{invokemodelorder.Label}
	default:
		return nil, &NotSingularError{invokemodelorder.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (imoq *InvokeModelOrderQuery) OnlyX(ctx context.Context) *InvokeModelOrder {
	node, err := imoq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only InvokeModelOrder ID in the query.
// Returns a *NotSingularError when more than one InvokeModelOrder ID is found.
// Returns a *NotFoundError when no entities are found.
func (imoq *InvokeModelOrderQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = imoq.Limit(2).IDs(setContextOp(ctx, imoq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{invokemodelorder.Label}
	default:
		err = &NotSingularError{invokemodelorder.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (imoq *InvokeModelOrderQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := imoq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of InvokeModelOrders.
func (imoq *InvokeModelOrderQuery) All(ctx context.Context) ([]*InvokeModelOrder, error) {
	ctx = setContextOp(ctx, imoq.ctx, "All")
	if err := imoq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*InvokeModelOrder, *InvokeModelOrderQuery]()
	return withInterceptors[[]*InvokeModelOrder](ctx, imoq, qr, imoq.inters)
}

// AllX is like All, but panics if an error occurs.
func (imoq *InvokeModelOrderQuery) AllX(ctx context.Context) []*InvokeModelOrder {
	nodes, err := imoq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of InvokeModelOrder IDs.
func (imoq *InvokeModelOrderQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if imoq.ctx.Unique == nil && imoq.path != nil {
		imoq.Unique(true)
	}
	ctx = setContextOp(ctx, imoq.ctx, "IDs")
	if err = imoq.Select(invokemodelorder.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (imoq *InvokeModelOrderQuery) IDsX(ctx context.Context) []int64 {
	ids, err := imoq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (imoq *InvokeModelOrderQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, imoq.ctx, "Count")
	if err := imoq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, imoq, querierCount[*InvokeModelOrderQuery](), imoq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (imoq *InvokeModelOrderQuery) CountX(ctx context.Context) int {
	count, err := imoq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (imoq *InvokeModelOrderQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, imoq.ctx, "Exist")
	switch _, err := imoq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("cep_ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (imoq *InvokeModelOrderQuery) ExistX(ctx context.Context) bool {
	exist, err := imoq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the InvokeModelOrderQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (imoq *InvokeModelOrderQuery) Clone() *InvokeModelOrderQuery {
	if imoq == nil {
		return nil
	}
	return &InvokeModelOrderQuery{
		config:       imoq.config,
		ctx:          imoq.ctx.Clone(),
		order:        append([]invokemodelorder.OrderOption{}, imoq.order...),
		inters:       append([]Interceptor{}, imoq.inters...),
		predicates:   append([]predicate.InvokeModelOrder{}, imoq.predicates...),
		withBills:    imoq.withBills.Clone(),
		withUser:     imoq.withUser.Clone(),
		withModel:    imoq.withModel.Clone(),
		withAPIToken: imoq.withAPIToken.Clone(),
		// clone intermediate query.
		sql:  imoq.sql.Clone(),
		path: imoq.path,
	}
}

// WithBills tells the query-builder to eager-load the nodes that are connected to
// the "bills" edge. The optional arguments are used to configure the query builder of the edge.
func (imoq *InvokeModelOrderQuery) WithBills(opts ...func(*BillQuery)) *InvokeModelOrderQuery {
	query := (&BillClient{config: imoq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	imoq.withBills = query
	return imoq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (imoq *InvokeModelOrderQuery) WithUser(opts ...func(*UserQuery)) *InvokeModelOrderQuery {
	query := (&UserClient{config: imoq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	imoq.withUser = query
	return imoq
}

// WithModel tells the query-builder to eager-load the nodes that are connected to
// the "model" edge. The optional arguments are used to configure the query builder of the edge.
func (imoq *InvokeModelOrderQuery) WithModel(opts ...func(*ModelQuery)) *InvokeModelOrderQuery {
	query := (&ModelClient{config: imoq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	imoq.withModel = query
	return imoq
}

// WithAPIToken tells the query-builder to eager-load the nodes that are connected to
// the "api_token" edge. The optional arguments are used to configure the query builder of the edge.
func (imoq *InvokeModelOrderQuery) WithAPIToken(opts ...func(*ApiTokenQuery)) *InvokeModelOrderQuery {
	query := (&ApiTokenClient{config: imoq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	imoq.withAPIToken = query
	return imoq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by,string"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.InvokeModelOrder.Query().
//		GroupBy(invokemodelorder.FieldCreatedBy).
//		Aggregate(cep_ent.Count()).
//		Scan(ctx, &v)
func (imoq *InvokeModelOrderQuery) GroupBy(field string, fields ...string) *InvokeModelOrderGroupBy {
	imoq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &InvokeModelOrderGroupBy{build: imoq}
	grbuild.flds = &imoq.ctx.Fields
	grbuild.label = invokemodelorder.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by,string"`
//	}
//
//	client.InvokeModelOrder.Query().
//		Select(invokemodelorder.FieldCreatedBy).
//		Scan(ctx, &v)
func (imoq *InvokeModelOrderQuery) Select(fields ...string) *InvokeModelOrderSelect {
	imoq.ctx.Fields = append(imoq.ctx.Fields, fields...)
	sbuild := &InvokeModelOrderSelect{InvokeModelOrderQuery: imoq}
	sbuild.label = invokemodelorder.Label
	sbuild.flds, sbuild.scan = &imoq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a InvokeModelOrderSelect configured with the given aggregations.
func (imoq *InvokeModelOrderQuery) Aggregate(fns ...AggregateFunc) *InvokeModelOrderSelect {
	return imoq.Select().Aggregate(fns...)
}

func (imoq *InvokeModelOrderQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range imoq.inters {
		if inter == nil {
			return fmt.Errorf("cep_ent: uninitialized interceptor (forgotten import cep_ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, imoq); err != nil {
				return err
			}
		}
	}
	for _, f := range imoq.ctx.Fields {
		if !invokemodelorder.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
		}
	}
	if imoq.path != nil {
		prev, err := imoq.path(ctx)
		if err != nil {
			return err
		}
		imoq.sql = prev
	}
	return nil
}

func (imoq *InvokeModelOrderQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*InvokeModelOrder, error) {
	var (
		nodes       = []*InvokeModelOrder{}
		_spec       = imoq.querySpec()
		loadedTypes = [4]bool{
			imoq.withBills != nil,
			imoq.withUser != nil,
			imoq.withModel != nil,
			imoq.withAPIToken != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*InvokeModelOrder).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &InvokeModelOrder{config: imoq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(imoq.modifiers) > 0 {
		_spec.Modifiers = imoq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, imoq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := imoq.withBills; query != nil {
		if err := imoq.loadBills(ctx, query, nodes,
			func(n *InvokeModelOrder) { n.Edges.Bills = []*Bill{} },
			func(n *InvokeModelOrder, e *Bill) { n.Edges.Bills = append(n.Edges.Bills, e) }); err != nil {
			return nil, err
		}
	}
	if query := imoq.withUser; query != nil {
		if err := imoq.loadUser(ctx, query, nodes, nil,
			func(n *InvokeModelOrder, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := imoq.withModel; query != nil {
		if err := imoq.loadModel(ctx, query, nodes, nil,
			func(n *InvokeModelOrder, e *Model) { n.Edges.Model = e }); err != nil {
			return nil, err
		}
	}
	if query := imoq.withAPIToken; query != nil {
		if err := imoq.loadAPIToken(ctx, query, nodes, nil,
			func(n *InvokeModelOrder, e *ApiToken) { n.Edges.APIToken = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (imoq *InvokeModelOrderQuery) loadBills(ctx context.Context, query *BillQuery, nodes []*InvokeModelOrder, init func(*InvokeModelOrder), assign func(*InvokeModelOrder, *Bill)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*InvokeModelOrder)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(bill.FieldOrderID)
	}
	query.Where(predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(invokemodelorder.BillsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OrderID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "order_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (imoq *InvokeModelOrderQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*InvokeModelOrder, init func(*InvokeModelOrder), assign func(*InvokeModelOrder, *User)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*InvokeModelOrder)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (imoq *InvokeModelOrderQuery) loadModel(ctx context.Context, query *ModelQuery, nodes []*InvokeModelOrder, init func(*InvokeModelOrder), assign func(*InvokeModelOrder, *Model)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*InvokeModelOrder)
	for i := range nodes {
		fk := nodes[i].ModelID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(model.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "model_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (imoq *InvokeModelOrderQuery) loadAPIToken(ctx context.Context, query *ApiTokenQuery, nodes []*InvokeModelOrder, init func(*InvokeModelOrder), assign func(*InvokeModelOrder, *ApiToken)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*InvokeModelOrder)
	for i := range nodes {
		fk := nodes[i].APITokenID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(apitoken.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "api_token_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (imoq *InvokeModelOrderQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := imoq.querySpec()
	if len(imoq.modifiers) > 0 {
		_spec.Modifiers = imoq.modifiers
	}
	_spec.Node.Columns = imoq.ctx.Fields
	if len(imoq.ctx.Fields) > 0 {
		_spec.Unique = imoq.ctx.Unique != nil && *imoq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, imoq.driver, _spec)
}

func (imoq *InvokeModelOrderQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(invokemodelorder.Table, invokemodelorder.Columns, sqlgraph.NewFieldSpec(invokemodelorder.FieldID, field.TypeInt64))
	_spec.From = imoq.sql
	if unique := imoq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if imoq.path != nil {
		_spec.Unique = true
	}
	if fields := imoq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, invokemodelorder.FieldID)
		for i := range fields {
			if fields[i] != invokemodelorder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if imoq.withUser != nil {
			_spec.Node.AddColumnOnce(invokemodelorder.FieldUserID)
		}
		if imoq.withModel != nil {
			_spec.Node.AddColumnOnce(invokemodelorder.FieldModelID)
		}
		if imoq.withAPIToken != nil {
			_spec.Node.AddColumnOnce(invokemodelorder.FieldAPITokenID)
		}
	}
	if ps := imoq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := imoq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := imoq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := imoq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (imoq *InvokeModelOrderQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(imoq.driver.Dialect())
	t1 := builder.Table(invokemodelorder.Table)
	columns := imoq.ctx.Fields
	if len(columns) == 0 {
		columns = invokemodelorder.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if imoq.sql != nil {
		selector = imoq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if imoq.ctx.Unique != nil && *imoq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range imoq.modifiers {
		m(selector)
	}
	for _, p := range imoq.predicates {
		p(selector)
	}
	for _, p := range imoq.order {
		p(selector)
	}
	if offset := imoq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := imoq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (imoq *InvokeModelOrderQuery) Modify(modifiers ...func(s *sql.Selector)) *InvokeModelOrderSelect {
	imoq.modifiers = append(imoq.modifiers, modifiers...)
	return imoq.Select()
}

// InvokeModelOrderGroupBy is the group-by builder for InvokeModelOrder entities.
type InvokeModelOrderGroupBy struct {
	selector
	build *InvokeModelOrderQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (imogb *InvokeModelOrderGroupBy) Aggregate(fns ...AggregateFunc) *InvokeModelOrderGroupBy {
	imogb.fns = append(imogb.fns, fns...)
	return imogb
}

// Scan applies the selector query and scans the result into the given value.
func (imogb *InvokeModelOrderGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, imogb.build.ctx, "GroupBy")
	if err := imogb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*InvokeModelOrderQuery, *InvokeModelOrderGroupBy](ctx, imogb.build, imogb, imogb.build.inters, v)
}

func (imogb *InvokeModelOrderGroupBy) sqlScan(ctx context.Context, root *InvokeModelOrderQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(imogb.fns))
	for _, fn := range imogb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*imogb.flds)+len(imogb.fns))
		for _, f := range *imogb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*imogb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := imogb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// InvokeModelOrderSelect is the builder for selecting fields of InvokeModelOrder entities.
type InvokeModelOrderSelect struct {
	*InvokeModelOrderQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (imos *InvokeModelOrderSelect) Aggregate(fns ...AggregateFunc) *InvokeModelOrderSelect {
	imos.fns = append(imos.fns, fns...)
	return imos
}

// Scan applies the selector query and scans the result into the given value.
func (imos *InvokeModelOrderSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, imos.ctx, "Select")
	if err := imos.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*InvokeModelOrderQuery, *InvokeModelOrderSelect](ctx, imos.InvokeModelOrderQuery, imos, imos.inters, v)
}

func (imos *InvokeModelOrderSelect) sqlScan(ctx context.Context, root *InvokeModelOrderQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(imos.fns))
	for _, fn := range imos.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*imos.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := imos.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (imos *InvokeModelOrderSelect) Modify(modifiers ...func(s *sql.Selector)) *InvokeModelOrderSelect {
	imos.modifiers = append(imos.modifiers, modifiers...)
	return imos
}
