// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/bill"
	"cephalon-ent/pkg/cep_ent/predicate"
	"cephalon-ent/pkg/cep_ent/rechargeorder"
	"cephalon-ent/pkg/cep_ent/user"
	"cephalon-ent/pkg/cep_ent/vxsocial"
	"cephalon-ent/pkg/enums"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RechargeOrderUpdate is the builder for updating RechargeOrder entities.
type RechargeOrderUpdate struct {
	config
	hooks    []Hook
	mutation *RechargeOrderMutation
}

// Where appends a list predicates to the RechargeOrderUpdate builder.
func (rou *RechargeOrderUpdate) Where(ps ...predicate.RechargeOrder) *RechargeOrderUpdate {
	rou.mutation.Where(ps...)
	return rou
}

// SetCreatedBy sets the "created_by" field.
func (rou *RechargeOrderUpdate) SetCreatedBy(i int64) *RechargeOrderUpdate {
	rou.mutation.ResetCreatedBy()
	rou.mutation.SetCreatedBy(i)
	return rou
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (rou *RechargeOrderUpdate) SetNillableCreatedBy(i *int64) *RechargeOrderUpdate {
	if i != nil {
		rou.SetCreatedBy(*i)
	}
	return rou
}

// AddCreatedBy adds i to the "created_by" field.
func (rou *RechargeOrderUpdate) AddCreatedBy(i int64) *RechargeOrderUpdate {
	rou.mutation.AddCreatedBy(i)
	return rou
}

// SetUpdatedBy sets the "updated_by" field.
func (rou *RechargeOrderUpdate) SetUpdatedBy(i int64) *RechargeOrderUpdate {
	rou.mutation.ResetUpdatedBy()
	rou.mutation.SetUpdatedBy(i)
	return rou
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (rou *RechargeOrderUpdate) SetNillableUpdatedBy(i *int64) *RechargeOrderUpdate {
	if i != nil {
		rou.SetUpdatedBy(*i)
	}
	return rou
}

// AddUpdatedBy adds i to the "updated_by" field.
func (rou *RechargeOrderUpdate) AddUpdatedBy(i int64) *RechargeOrderUpdate {
	rou.mutation.AddUpdatedBy(i)
	return rou
}

// SetUpdatedAt sets the "updated_at" field.
func (rou *RechargeOrderUpdate) SetUpdatedAt(t time.Time) *RechargeOrderUpdate {
	rou.mutation.SetUpdatedAt(t)
	return rou
}

// SetDeletedAt sets the "deleted_at" field.
func (rou *RechargeOrderUpdate) SetDeletedAt(t time.Time) *RechargeOrderUpdate {
	rou.mutation.SetDeletedAt(t)
	return rou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rou *RechargeOrderUpdate) SetNillableDeletedAt(t *time.Time) *RechargeOrderUpdate {
	if t != nil {
		rou.SetDeletedAt(*t)
	}
	return rou
}

// SetUserID sets the "user_id" field.
func (rou *RechargeOrderUpdate) SetUserID(i int64) *RechargeOrderUpdate {
	rou.mutation.SetUserID(i)
	return rou
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (rou *RechargeOrderUpdate) SetNillableUserID(i *int64) *RechargeOrderUpdate {
	if i != nil {
		rou.SetUserID(*i)
	}
	return rou
}

// SetStatus sets the "status" field.
func (rou *RechargeOrderUpdate) SetStatus(es enums.MissionStatus) *RechargeOrderUpdate {
	rou.mutation.SetStatus(es)
	return rou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rou *RechargeOrderUpdate) SetNillableStatus(es *enums.MissionStatus) *RechargeOrderUpdate {
	if es != nil {
		rou.SetStatus(*es)
	}
	return rou
}

// SetCep sets the "cep" field.
func (rou *RechargeOrderUpdate) SetCep(i int64) *RechargeOrderUpdate {
	rou.mutation.ResetCep()
	rou.mutation.SetCep(i)
	return rou
}

// SetNillableCep sets the "cep" field if the given value is not nil.
func (rou *RechargeOrderUpdate) SetNillableCep(i *int64) *RechargeOrderUpdate {
	if i != nil {
		rou.SetCep(*i)
	}
	return rou
}

// AddCep adds i to the "cep" field.
func (rou *RechargeOrderUpdate) AddCep(i int64) *RechargeOrderUpdate {
	rou.mutation.AddCep(i)
	return rou
}

// SetSocialID sets the "social_id" field.
func (rou *RechargeOrderUpdate) SetSocialID(i int64) *RechargeOrderUpdate {
	rou.mutation.SetSocialID(i)
	return rou
}

// SetNillableSocialID sets the "social_id" field if the given value is not nil.
func (rou *RechargeOrderUpdate) SetNillableSocialID(i *int64) *RechargeOrderUpdate {
	if i != nil {
		rou.SetSocialID(*i)
	}
	return rou
}

// ClearSocialID clears the value of the "social_id" field.
func (rou *RechargeOrderUpdate) ClearSocialID() *RechargeOrderUpdate {
	rou.mutation.ClearSocialID()
	return rou
}

// SetType sets the "type" field.
func (rou *RechargeOrderUpdate) SetType(eot enums.RechargeOrderType) *RechargeOrderUpdate {
	rou.mutation.SetType(eot)
	return rou
}

// SetNillableType sets the "type" field if the given value is not nil.
func (rou *RechargeOrderUpdate) SetNillableType(eot *enums.RechargeOrderType) *RechargeOrderUpdate {
	if eot != nil {
		rou.SetType(*eot)
	}
	return rou
}

// SetSerialNumber sets the "serial_number" field.
func (rou *RechargeOrderUpdate) SetSerialNumber(s string) *RechargeOrderUpdate {
	rou.mutation.SetSerialNumber(s)
	return rou
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (rou *RechargeOrderUpdate) SetNillableSerialNumber(s *string) *RechargeOrderUpdate {
	if s != nil {
		rou.SetSerialNumber(*s)
	}
	return rou
}

// SetThirdAPIResp sets the "third_api_resp" field.
func (rou *RechargeOrderUpdate) SetThirdAPIResp(s string) *RechargeOrderUpdate {
	rou.mutation.SetThirdAPIResp(s)
	return rou
}

// SetNillableThirdAPIResp sets the "third_api_resp" field if the given value is not nil.
func (rou *RechargeOrderUpdate) SetNillableThirdAPIResp(s *string) *RechargeOrderUpdate {
	if s != nil {
		rou.SetThirdAPIResp(*s)
	}
	return rou
}

// SetFromUserID sets the "from_user_id" field.
func (rou *RechargeOrderUpdate) SetFromUserID(i int64) *RechargeOrderUpdate {
	rou.mutation.ResetFromUserID()
	rou.mutation.SetFromUserID(i)
	return rou
}

// SetNillableFromUserID sets the "from_user_id" field if the given value is not nil.
func (rou *RechargeOrderUpdate) SetNillableFromUserID(i *int64) *RechargeOrderUpdate {
	if i != nil {
		rou.SetFromUserID(*i)
	}
	return rou
}

// AddFromUserID adds i to the "from_user_id" field.
func (rou *RechargeOrderUpdate) AddFromUserID(i int64) *RechargeOrderUpdate {
	rou.mutation.AddFromUserID(i)
	return rou
}

// SetOutTransactionID sets the "out_transaction_id" field.
func (rou *RechargeOrderUpdate) SetOutTransactionID(s string) *RechargeOrderUpdate {
	rou.mutation.SetOutTransactionID(s)
	return rou
}

// SetNillableOutTransactionID sets the "out_transaction_id" field if the given value is not nil.
func (rou *RechargeOrderUpdate) SetNillableOutTransactionID(s *string) *RechargeOrderUpdate {
	if s != nil {
		rou.SetOutTransactionID(*s)
	}
	return rou
}

// SetUser sets the "user" edge to the User entity.
func (rou *RechargeOrderUpdate) SetUser(u *User) *RechargeOrderUpdate {
	return rou.SetUserID(u.ID)
}

// AddBillIDs adds the "bills" edge to the Bill entity by IDs.
func (rou *RechargeOrderUpdate) AddBillIDs(ids ...int64) *RechargeOrderUpdate {
	rou.mutation.AddBillIDs(ids...)
	return rou
}

// AddBills adds the "bills" edges to the Bill entity.
func (rou *RechargeOrderUpdate) AddBills(b ...*Bill) *RechargeOrderUpdate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return rou.AddBillIDs(ids...)
}

// SetVxSocialID sets the "vx_social" edge to the VXSocial entity by ID.
func (rou *RechargeOrderUpdate) SetVxSocialID(id int64) *RechargeOrderUpdate {
	rou.mutation.SetVxSocialID(id)
	return rou
}

// SetNillableVxSocialID sets the "vx_social" edge to the VXSocial entity by ID if the given value is not nil.
func (rou *RechargeOrderUpdate) SetNillableVxSocialID(id *int64) *RechargeOrderUpdate {
	if id != nil {
		rou = rou.SetVxSocialID(*id)
	}
	return rou
}

// SetVxSocial sets the "vx_social" edge to the VXSocial entity.
func (rou *RechargeOrderUpdate) SetVxSocial(v *VXSocial) *RechargeOrderUpdate {
	return rou.SetVxSocialID(v.ID)
}

// Mutation returns the RechargeOrderMutation object of the builder.
func (rou *RechargeOrderUpdate) Mutation() *RechargeOrderMutation {
	return rou.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (rou *RechargeOrderUpdate) ClearUser() *RechargeOrderUpdate {
	rou.mutation.ClearUser()
	return rou
}

// ClearBills clears all "bills" edges to the Bill entity.
func (rou *RechargeOrderUpdate) ClearBills() *RechargeOrderUpdate {
	rou.mutation.ClearBills()
	return rou
}

// RemoveBillIDs removes the "bills" edge to Bill entities by IDs.
func (rou *RechargeOrderUpdate) RemoveBillIDs(ids ...int64) *RechargeOrderUpdate {
	rou.mutation.RemoveBillIDs(ids...)
	return rou
}

// RemoveBills removes "bills" edges to Bill entities.
func (rou *RechargeOrderUpdate) RemoveBills(b ...*Bill) *RechargeOrderUpdate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return rou.RemoveBillIDs(ids...)
}

// ClearVxSocial clears the "vx_social" edge to the VXSocial entity.
func (rou *RechargeOrderUpdate) ClearVxSocial() *RechargeOrderUpdate {
	rou.mutation.ClearVxSocial()
	return rou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rou *RechargeOrderUpdate) Save(ctx context.Context) (int, error) {
	rou.defaults()
	return withHooks(ctx, rou.sqlSave, rou.mutation, rou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rou *RechargeOrderUpdate) SaveX(ctx context.Context) int {
	affected, err := rou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rou *RechargeOrderUpdate) Exec(ctx context.Context) error {
	_, err := rou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rou *RechargeOrderUpdate) ExecX(ctx context.Context) {
	if err := rou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rou *RechargeOrderUpdate) defaults() {
	if _, ok := rou.mutation.UpdatedAt(); !ok {
		v := rechargeorder.UpdateDefaultUpdatedAt()
		rou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rou *RechargeOrderUpdate) check() error {
	if v, ok := rou.mutation.Status(); ok {
		if err := rechargeorder.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "RechargeOrder.status": %w`, err)}
		}
	}
	if v, ok := rou.mutation.Cep(); ok {
		if err := rechargeorder.CepValidator(v); err != nil {
			return &ValidationError{Name: "cep", err: fmt.Errorf(`cep_ent: validator failed for field "RechargeOrder.cep": %w`, err)}
		}
	}
	if v, ok := rou.mutation.GetType(); ok {
		if err := rechargeorder.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "RechargeOrder.type": %w`, err)}
		}
	}
	if _, ok := rou.mutation.UserID(); rou.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "RechargeOrder.user"`)
	}
	return nil
}

func (rou *RechargeOrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(rechargeorder.Table, rechargeorder.Columns, sqlgraph.NewFieldSpec(rechargeorder.FieldID, field.TypeInt64))
	if ps := rou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rou.mutation.CreatedBy(); ok {
		_spec.SetField(rechargeorder.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := rou.mutation.AddedCreatedBy(); ok {
		_spec.AddField(rechargeorder.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := rou.mutation.UpdatedBy(); ok {
		_spec.SetField(rechargeorder.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := rou.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(rechargeorder.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := rou.mutation.UpdatedAt(); ok {
		_spec.SetField(rechargeorder.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := rou.mutation.DeletedAt(); ok {
		_spec.SetField(rechargeorder.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := rou.mutation.Status(); ok {
		_spec.SetField(rechargeorder.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := rou.mutation.Cep(); ok {
		_spec.SetField(rechargeorder.FieldCep, field.TypeInt64, value)
	}
	if value, ok := rou.mutation.AddedCep(); ok {
		_spec.AddField(rechargeorder.FieldCep, field.TypeInt64, value)
	}
	if value, ok := rou.mutation.GetType(); ok {
		_spec.SetField(rechargeorder.FieldType, field.TypeEnum, value)
	}
	if value, ok := rou.mutation.SerialNumber(); ok {
		_spec.SetField(rechargeorder.FieldSerialNumber, field.TypeString, value)
	}
	if value, ok := rou.mutation.ThirdAPIResp(); ok {
		_spec.SetField(rechargeorder.FieldThirdAPIResp, field.TypeString, value)
	}
	if value, ok := rou.mutation.FromUserID(); ok {
		_spec.SetField(rechargeorder.FieldFromUserID, field.TypeInt64, value)
	}
	if value, ok := rou.mutation.AddedFromUserID(); ok {
		_spec.AddField(rechargeorder.FieldFromUserID, field.TypeInt64, value)
	}
	if value, ok := rou.mutation.OutTransactionID(); ok {
		_spec.SetField(rechargeorder.FieldOutTransactionID, field.TypeString, value)
	}
	if rou.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rechargeorder.UserTable,
			Columns: []string{rechargeorder.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rou.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rechargeorder.UserTable,
			Columns: []string{rechargeorder.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rou.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rechargeorder.BillsTable,
			Columns: []string{rechargeorder.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rou.mutation.RemovedBillsIDs(); len(nodes) > 0 && !rou.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rechargeorder.BillsTable,
			Columns: []string{rechargeorder.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rou.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rechargeorder.BillsTable,
			Columns: []string{rechargeorder.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rou.mutation.VxSocialCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rechargeorder.VxSocialTable,
			Columns: []string{rechargeorder.VxSocialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vxsocial.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rou.mutation.VxSocialIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rechargeorder.VxSocialTable,
			Columns: []string{rechargeorder.VxSocialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vxsocial.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rechargeorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rou.mutation.done = true
	return n, nil
}

// RechargeOrderUpdateOne is the builder for updating a single RechargeOrder entity.
type RechargeOrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RechargeOrderMutation
}

// SetCreatedBy sets the "created_by" field.
func (rouo *RechargeOrderUpdateOne) SetCreatedBy(i int64) *RechargeOrderUpdateOne {
	rouo.mutation.ResetCreatedBy()
	rouo.mutation.SetCreatedBy(i)
	return rouo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (rouo *RechargeOrderUpdateOne) SetNillableCreatedBy(i *int64) *RechargeOrderUpdateOne {
	if i != nil {
		rouo.SetCreatedBy(*i)
	}
	return rouo
}

// AddCreatedBy adds i to the "created_by" field.
func (rouo *RechargeOrderUpdateOne) AddCreatedBy(i int64) *RechargeOrderUpdateOne {
	rouo.mutation.AddCreatedBy(i)
	return rouo
}

// SetUpdatedBy sets the "updated_by" field.
func (rouo *RechargeOrderUpdateOne) SetUpdatedBy(i int64) *RechargeOrderUpdateOne {
	rouo.mutation.ResetUpdatedBy()
	rouo.mutation.SetUpdatedBy(i)
	return rouo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (rouo *RechargeOrderUpdateOne) SetNillableUpdatedBy(i *int64) *RechargeOrderUpdateOne {
	if i != nil {
		rouo.SetUpdatedBy(*i)
	}
	return rouo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (rouo *RechargeOrderUpdateOne) AddUpdatedBy(i int64) *RechargeOrderUpdateOne {
	rouo.mutation.AddUpdatedBy(i)
	return rouo
}

// SetUpdatedAt sets the "updated_at" field.
func (rouo *RechargeOrderUpdateOne) SetUpdatedAt(t time.Time) *RechargeOrderUpdateOne {
	rouo.mutation.SetUpdatedAt(t)
	return rouo
}

// SetDeletedAt sets the "deleted_at" field.
func (rouo *RechargeOrderUpdateOne) SetDeletedAt(t time.Time) *RechargeOrderUpdateOne {
	rouo.mutation.SetDeletedAt(t)
	return rouo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rouo *RechargeOrderUpdateOne) SetNillableDeletedAt(t *time.Time) *RechargeOrderUpdateOne {
	if t != nil {
		rouo.SetDeletedAt(*t)
	}
	return rouo
}

// SetUserID sets the "user_id" field.
func (rouo *RechargeOrderUpdateOne) SetUserID(i int64) *RechargeOrderUpdateOne {
	rouo.mutation.SetUserID(i)
	return rouo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (rouo *RechargeOrderUpdateOne) SetNillableUserID(i *int64) *RechargeOrderUpdateOne {
	if i != nil {
		rouo.SetUserID(*i)
	}
	return rouo
}

// SetStatus sets the "status" field.
func (rouo *RechargeOrderUpdateOne) SetStatus(es enums.MissionStatus) *RechargeOrderUpdateOne {
	rouo.mutation.SetStatus(es)
	return rouo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rouo *RechargeOrderUpdateOne) SetNillableStatus(es *enums.MissionStatus) *RechargeOrderUpdateOne {
	if es != nil {
		rouo.SetStatus(*es)
	}
	return rouo
}

// SetCep sets the "cep" field.
func (rouo *RechargeOrderUpdateOne) SetCep(i int64) *RechargeOrderUpdateOne {
	rouo.mutation.ResetCep()
	rouo.mutation.SetCep(i)
	return rouo
}

// SetNillableCep sets the "cep" field if the given value is not nil.
func (rouo *RechargeOrderUpdateOne) SetNillableCep(i *int64) *RechargeOrderUpdateOne {
	if i != nil {
		rouo.SetCep(*i)
	}
	return rouo
}

// AddCep adds i to the "cep" field.
func (rouo *RechargeOrderUpdateOne) AddCep(i int64) *RechargeOrderUpdateOne {
	rouo.mutation.AddCep(i)
	return rouo
}

// SetSocialID sets the "social_id" field.
func (rouo *RechargeOrderUpdateOne) SetSocialID(i int64) *RechargeOrderUpdateOne {
	rouo.mutation.SetSocialID(i)
	return rouo
}

// SetNillableSocialID sets the "social_id" field if the given value is not nil.
func (rouo *RechargeOrderUpdateOne) SetNillableSocialID(i *int64) *RechargeOrderUpdateOne {
	if i != nil {
		rouo.SetSocialID(*i)
	}
	return rouo
}

// ClearSocialID clears the value of the "social_id" field.
func (rouo *RechargeOrderUpdateOne) ClearSocialID() *RechargeOrderUpdateOne {
	rouo.mutation.ClearSocialID()
	return rouo
}

// SetType sets the "type" field.
func (rouo *RechargeOrderUpdateOne) SetType(eot enums.RechargeOrderType) *RechargeOrderUpdateOne {
	rouo.mutation.SetType(eot)
	return rouo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (rouo *RechargeOrderUpdateOne) SetNillableType(eot *enums.RechargeOrderType) *RechargeOrderUpdateOne {
	if eot != nil {
		rouo.SetType(*eot)
	}
	return rouo
}

// SetSerialNumber sets the "serial_number" field.
func (rouo *RechargeOrderUpdateOne) SetSerialNumber(s string) *RechargeOrderUpdateOne {
	rouo.mutation.SetSerialNumber(s)
	return rouo
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (rouo *RechargeOrderUpdateOne) SetNillableSerialNumber(s *string) *RechargeOrderUpdateOne {
	if s != nil {
		rouo.SetSerialNumber(*s)
	}
	return rouo
}

// SetThirdAPIResp sets the "third_api_resp" field.
func (rouo *RechargeOrderUpdateOne) SetThirdAPIResp(s string) *RechargeOrderUpdateOne {
	rouo.mutation.SetThirdAPIResp(s)
	return rouo
}

// SetNillableThirdAPIResp sets the "third_api_resp" field if the given value is not nil.
func (rouo *RechargeOrderUpdateOne) SetNillableThirdAPIResp(s *string) *RechargeOrderUpdateOne {
	if s != nil {
		rouo.SetThirdAPIResp(*s)
	}
	return rouo
}

// SetFromUserID sets the "from_user_id" field.
func (rouo *RechargeOrderUpdateOne) SetFromUserID(i int64) *RechargeOrderUpdateOne {
	rouo.mutation.ResetFromUserID()
	rouo.mutation.SetFromUserID(i)
	return rouo
}

// SetNillableFromUserID sets the "from_user_id" field if the given value is not nil.
func (rouo *RechargeOrderUpdateOne) SetNillableFromUserID(i *int64) *RechargeOrderUpdateOne {
	if i != nil {
		rouo.SetFromUserID(*i)
	}
	return rouo
}

// AddFromUserID adds i to the "from_user_id" field.
func (rouo *RechargeOrderUpdateOne) AddFromUserID(i int64) *RechargeOrderUpdateOne {
	rouo.mutation.AddFromUserID(i)
	return rouo
}

// SetOutTransactionID sets the "out_transaction_id" field.
func (rouo *RechargeOrderUpdateOne) SetOutTransactionID(s string) *RechargeOrderUpdateOne {
	rouo.mutation.SetOutTransactionID(s)
	return rouo
}

// SetNillableOutTransactionID sets the "out_transaction_id" field if the given value is not nil.
func (rouo *RechargeOrderUpdateOne) SetNillableOutTransactionID(s *string) *RechargeOrderUpdateOne {
	if s != nil {
		rouo.SetOutTransactionID(*s)
	}
	return rouo
}

// SetUser sets the "user" edge to the User entity.
func (rouo *RechargeOrderUpdateOne) SetUser(u *User) *RechargeOrderUpdateOne {
	return rouo.SetUserID(u.ID)
}

// AddBillIDs adds the "bills" edge to the Bill entity by IDs.
func (rouo *RechargeOrderUpdateOne) AddBillIDs(ids ...int64) *RechargeOrderUpdateOne {
	rouo.mutation.AddBillIDs(ids...)
	return rouo
}

// AddBills adds the "bills" edges to the Bill entity.
func (rouo *RechargeOrderUpdateOne) AddBills(b ...*Bill) *RechargeOrderUpdateOne {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return rouo.AddBillIDs(ids...)
}

// SetVxSocialID sets the "vx_social" edge to the VXSocial entity by ID.
func (rouo *RechargeOrderUpdateOne) SetVxSocialID(id int64) *RechargeOrderUpdateOne {
	rouo.mutation.SetVxSocialID(id)
	return rouo
}

// SetNillableVxSocialID sets the "vx_social" edge to the VXSocial entity by ID if the given value is not nil.
func (rouo *RechargeOrderUpdateOne) SetNillableVxSocialID(id *int64) *RechargeOrderUpdateOne {
	if id != nil {
		rouo = rouo.SetVxSocialID(*id)
	}
	return rouo
}

// SetVxSocial sets the "vx_social" edge to the VXSocial entity.
func (rouo *RechargeOrderUpdateOne) SetVxSocial(v *VXSocial) *RechargeOrderUpdateOne {
	return rouo.SetVxSocialID(v.ID)
}

// Mutation returns the RechargeOrderMutation object of the builder.
func (rouo *RechargeOrderUpdateOne) Mutation() *RechargeOrderMutation {
	return rouo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (rouo *RechargeOrderUpdateOne) ClearUser() *RechargeOrderUpdateOne {
	rouo.mutation.ClearUser()
	return rouo
}

// ClearBills clears all "bills" edges to the Bill entity.
func (rouo *RechargeOrderUpdateOne) ClearBills() *RechargeOrderUpdateOne {
	rouo.mutation.ClearBills()
	return rouo
}

// RemoveBillIDs removes the "bills" edge to Bill entities by IDs.
func (rouo *RechargeOrderUpdateOne) RemoveBillIDs(ids ...int64) *RechargeOrderUpdateOne {
	rouo.mutation.RemoveBillIDs(ids...)
	return rouo
}

// RemoveBills removes "bills" edges to Bill entities.
func (rouo *RechargeOrderUpdateOne) RemoveBills(b ...*Bill) *RechargeOrderUpdateOne {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return rouo.RemoveBillIDs(ids...)
}

// ClearVxSocial clears the "vx_social" edge to the VXSocial entity.
func (rouo *RechargeOrderUpdateOne) ClearVxSocial() *RechargeOrderUpdateOne {
	rouo.mutation.ClearVxSocial()
	return rouo
}

// Where appends a list predicates to the RechargeOrderUpdate builder.
func (rouo *RechargeOrderUpdateOne) Where(ps ...predicate.RechargeOrder) *RechargeOrderUpdateOne {
	rouo.mutation.Where(ps...)
	return rouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rouo *RechargeOrderUpdateOne) Select(field string, fields ...string) *RechargeOrderUpdateOne {
	rouo.fields = append([]string{field}, fields...)
	return rouo
}

// Save executes the query and returns the updated RechargeOrder entity.
func (rouo *RechargeOrderUpdateOne) Save(ctx context.Context) (*RechargeOrder, error) {
	rouo.defaults()
	return withHooks(ctx, rouo.sqlSave, rouo.mutation, rouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rouo *RechargeOrderUpdateOne) SaveX(ctx context.Context) *RechargeOrder {
	node, err := rouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rouo *RechargeOrderUpdateOne) Exec(ctx context.Context) error {
	_, err := rouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rouo *RechargeOrderUpdateOne) ExecX(ctx context.Context) {
	if err := rouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rouo *RechargeOrderUpdateOne) defaults() {
	if _, ok := rouo.mutation.UpdatedAt(); !ok {
		v := rechargeorder.UpdateDefaultUpdatedAt()
		rouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rouo *RechargeOrderUpdateOne) check() error {
	if v, ok := rouo.mutation.Status(); ok {
		if err := rechargeorder.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "RechargeOrder.status": %w`, err)}
		}
	}
	if v, ok := rouo.mutation.Cep(); ok {
		if err := rechargeorder.CepValidator(v); err != nil {
			return &ValidationError{Name: "cep", err: fmt.Errorf(`cep_ent: validator failed for field "RechargeOrder.cep": %w`, err)}
		}
	}
	if v, ok := rouo.mutation.GetType(); ok {
		if err := rechargeorder.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "RechargeOrder.type": %w`, err)}
		}
	}
	if _, ok := rouo.mutation.UserID(); rouo.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "RechargeOrder.user"`)
	}
	return nil
}

func (rouo *RechargeOrderUpdateOne) sqlSave(ctx context.Context) (_node *RechargeOrder, err error) {
	if err := rouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rechargeorder.Table, rechargeorder.Columns, sqlgraph.NewFieldSpec(rechargeorder.FieldID, field.TypeInt64))
	id, ok := rouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "RechargeOrder.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rechargeorder.FieldID)
		for _, f := range fields {
			if !rechargeorder.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != rechargeorder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rouo.mutation.CreatedBy(); ok {
		_spec.SetField(rechargeorder.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := rouo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(rechargeorder.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := rouo.mutation.UpdatedBy(); ok {
		_spec.SetField(rechargeorder.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := rouo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(rechargeorder.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := rouo.mutation.UpdatedAt(); ok {
		_spec.SetField(rechargeorder.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := rouo.mutation.DeletedAt(); ok {
		_spec.SetField(rechargeorder.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := rouo.mutation.Status(); ok {
		_spec.SetField(rechargeorder.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := rouo.mutation.Cep(); ok {
		_spec.SetField(rechargeorder.FieldCep, field.TypeInt64, value)
	}
	if value, ok := rouo.mutation.AddedCep(); ok {
		_spec.AddField(rechargeorder.FieldCep, field.TypeInt64, value)
	}
	if value, ok := rouo.mutation.GetType(); ok {
		_spec.SetField(rechargeorder.FieldType, field.TypeEnum, value)
	}
	if value, ok := rouo.mutation.SerialNumber(); ok {
		_spec.SetField(rechargeorder.FieldSerialNumber, field.TypeString, value)
	}
	if value, ok := rouo.mutation.ThirdAPIResp(); ok {
		_spec.SetField(rechargeorder.FieldThirdAPIResp, field.TypeString, value)
	}
	if value, ok := rouo.mutation.FromUserID(); ok {
		_spec.SetField(rechargeorder.FieldFromUserID, field.TypeInt64, value)
	}
	if value, ok := rouo.mutation.AddedFromUserID(); ok {
		_spec.AddField(rechargeorder.FieldFromUserID, field.TypeInt64, value)
	}
	if value, ok := rouo.mutation.OutTransactionID(); ok {
		_spec.SetField(rechargeorder.FieldOutTransactionID, field.TypeString, value)
	}
	if rouo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rechargeorder.UserTable,
			Columns: []string{rechargeorder.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rouo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rechargeorder.UserTable,
			Columns: []string{rechargeorder.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rouo.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rechargeorder.BillsTable,
			Columns: []string{rechargeorder.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rouo.mutation.RemovedBillsIDs(); len(nodes) > 0 && !rouo.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rechargeorder.BillsTable,
			Columns: []string{rechargeorder.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rouo.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rechargeorder.BillsTable,
			Columns: []string{rechargeorder.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rouo.mutation.VxSocialCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rechargeorder.VxSocialTable,
			Columns: []string{rechargeorder.VxSocialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vxsocial.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rouo.mutation.VxSocialIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rechargeorder.VxSocialTable,
			Columns: []string{rechargeorder.VxSocialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vxsocial.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RechargeOrder{config: rouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rechargeorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rouo.mutation.done = true
	return _node, nil
}
