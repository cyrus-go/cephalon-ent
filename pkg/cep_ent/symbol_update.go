// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/bill"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/extraserviceorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/symbol"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/transferorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/wallet"
)

// SymbolUpdate is the builder for updating Symbol entities.
type SymbolUpdate struct {
	config
	hooks     []Hook
	mutation  *SymbolMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SymbolUpdate builder.
func (su *SymbolUpdate) Where(ps ...predicate.Symbol) *SymbolUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetCreatedBy sets the "created_by" field.
func (su *SymbolUpdate) SetCreatedBy(i int64) *SymbolUpdate {
	su.mutation.ResetCreatedBy()
	su.mutation.SetCreatedBy(i)
	return su
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (su *SymbolUpdate) SetNillableCreatedBy(i *int64) *SymbolUpdate {
	if i != nil {
		su.SetCreatedBy(*i)
	}
	return su
}

// AddCreatedBy adds i to the "created_by" field.
func (su *SymbolUpdate) AddCreatedBy(i int64) *SymbolUpdate {
	su.mutation.AddCreatedBy(i)
	return su
}

// SetUpdatedBy sets the "updated_by" field.
func (su *SymbolUpdate) SetUpdatedBy(i int64) *SymbolUpdate {
	su.mutation.ResetUpdatedBy()
	su.mutation.SetUpdatedBy(i)
	return su
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (su *SymbolUpdate) SetNillableUpdatedBy(i *int64) *SymbolUpdate {
	if i != nil {
		su.SetUpdatedBy(*i)
	}
	return su
}

// AddUpdatedBy adds i to the "updated_by" field.
func (su *SymbolUpdate) AddUpdatedBy(i int64) *SymbolUpdate {
	su.mutation.AddUpdatedBy(i)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SymbolUpdate) SetUpdatedAt(t time.Time) *SymbolUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *SymbolUpdate) SetDeletedAt(t time.Time) *SymbolUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *SymbolUpdate) SetNillableDeletedAt(t *time.Time) *SymbolUpdate {
	if t != nil {
		su.SetDeletedAt(*t)
	}
	return su
}

// SetName sets the "name" field.
func (su *SymbolUpdate) SetName(s string) *SymbolUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *SymbolUpdate) SetNillableName(s *string) *SymbolUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// AddWalletIDs adds the "wallets" edge to the Wallet entity by IDs.
func (su *SymbolUpdate) AddWalletIDs(ids ...int64) *SymbolUpdate {
	su.mutation.AddWalletIDs(ids...)
	return su
}

// AddWallets adds the "wallets" edges to the Wallet entity.
func (su *SymbolUpdate) AddWallets(w ...*Wallet) *SymbolUpdate {
	ids := make([]int64, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return su.AddWalletIDs(ids...)
}

// AddBillIDs adds the "bills" edge to the Bill entity by IDs.
func (su *SymbolUpdate) AddBillIDs(ids ...int64) *SymbolUpdate {
	su.mutation.AddBillIDs(ids...)
	return su
}

// AddBills adds the "bills" edges to the Bill entity.
func (su *SymbolUpdate) AddBills(b ...*Bill) *SymbolUpdate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return su.AddBillIDs(ids...)
}

// AddMissionOrderIDs adds the "mission_orders" edge to the MissionOrder entity by IDs.
func (su *SymbolUpdate) AddMissionOrderIDs(ids ...int64) *SymbolUpdate {
	su.mutation.AddMissionOrderIDs(ids...)
	return su
}

// AddMissionOrders adds the "mission_orders" edges to the MissionOrder entity.
func (su *SymbolUpdate) AddMissionOrders(m ...*MissionOrder) *SymbolUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return su.AddMissionOrderIDs(ids...)
}

// AddTransferOrderIDs adds the "transfer_orders" edge to the TransferOrder entity by IDs.
func (su *SymbolUpdate) AddTransferOrderIDs(ids ...int64) *SymbolUpdate {
	su.mutation.AddTransferOrderIDs(ids...)
	return su
}

// AddTransferOrders adds the "transfer_orders" edges to the TransferOrder entity.
func (su *SymbolUpdate) AddTransferOrders(t ...*TransferOrder) *SymbolUpdate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.AddTransferOrderIDs(ids...)
}

// AddExtraServiceOrderIDs adds the "extra_service_order" edge to the ExtraServiceOrder entity by IDs.
func (su *SymbolUpdate) AddExtraServiceOrderIDs(ids ...int64) *SymbolUpdate {
	su.mutation.AddExtraServiceOrderIDs(ids...)
	return su
}

// AddExtraServiceOrder adds the "extra_service_order" edges to the ExtraServiceOrder entity.
func (su *SymbolUpdate) AddExtraServiceOrder(e ...*ExtraServiceOrder) *SymbolUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return su.AddExtraServiceOrderIDs(ids...)
}

// Mutation returns the SymbolMutation object of the builder.
func (su *SymbolUpdate) Mutation() *SymbolMutation {
	return su.mutation
}

// ClearWallets clears all "wallets" edges to the Wallet entity.
func (su *SymbolUpdate) ClearWallets() *SymbolUpdate {
	su.mutation.ClearWallets()
	return su
}

// RemoveWalletIDs removes the "wallets" edge to Wallet entities by IDs.
func (su *SymbolUpdate) RemoveWalletIDs(ids ...int64) *SymbolUpdate {
	su.mutation.RemoveWalletIDs(ids...)
	return su
}

// RemoveWallets removes "wallets" edges to Wallet entities.
func (su *SymbolUpdate) RemoveWallets(w ...*Wallet) *SymbolUpdate {
	ids := make([]int64, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return su.RemoveWalletIDs(ids...)
}

// ClearBills clears all "bills" edges to the Bill entity.
func (su *SymbolUpdate) ClearBills() *SymbolUpdate {
	su.mutation.ClearBills()
	return su
}

// RemoveBillIDs removes the "bills" edge to Bill entities by IDs.
func (su *SymbolUpdate) RemoveBillIDs(ids ...int64) *SymbolUpdate {
	su.mutation.RemoveBillIDs(ids...)
	return su
}

// RemoveBills removes "bills" edges to Bill entities.
func (su *SymbolUpdate) RemoveBills(b ...*Bill) *SymbolUpdate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return su.RemoveBillIDs(ids...)
}

// ClearMissionOrders clears all "mission_orders" edges to the MissionOrder entity.
func (su *SymbolUpdate) ClearMissionOrders() *SymbolUpdate {
	su.mutation.ClearMissionOrders()
	return su
}

// RemoveMissionOrderIDs removes the "mission_orders" edge to MissionOrder entities by IDs.
func (su *SymbolUpdate) RemoveMissionOrderIDs(ids ...int64) *SymbolUpdate {
	su.mutation.RemoveMissionOrderIDs(ids...)
	return su
}

// RemoveMissionOrders removes "mission_orders" edges to MissionOrder entities.
func (su *SymbolUpdate) RemoveMissionOrders(m ...*MissionOrder) *SymbolUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return su.RemoveMissionOrderIDs(ids...)
}

// ClearTransferOrders clears all "transfer_orders" edges to the TransferOrder entity.
func (su *SymbolUpdate) ClearTransferOrders() *SymbolUpdate {
	su.mutation.ClearTransferOrders()
	return su
}

// RemoveTransferOrderIDs removes the "transfer_orders" edge to TransferOrder entities by IDs.
func (su *SymbolUpdate) RemoveTransferOrderIDs(ids ...int64) *SymbolUpdate {
	su.mutation.RemoveTransferOrderIDs(ids...)
	return su
}

// RemoveTransferOrders removes "transfer_orders" edges to TransferOrder entities.
func (su *SymbolUpdate) RemoveTransferOrders(t ...*TransferOrder) *SymbolUpdate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.RemoveTransferOrderIDs(ids...)
}

// ClearExtraServiceOrder clears all "extra_service_order" edges to the ExtraServiceOrder entity.
func (su *SymbolUpdate) ClearExtraServiceOrder() *SymbolUpdate {
	su.mutation.ClearExtraServiceOrder()
	return su
}

// RemoveExtraServiceOrderIDs removes the "extra_service_order" edge to ExtraServiceOrder entities by IDs.
func (su *SymbolUpdate) RemoveExtraServiceOrderIDs(ids ...int64) *SymbolUpdate {
	su.mutation.RemoveExtraServiceOrderIDs(ids...)
	return su
}

// RemoveExtraServiceOrder removes "extra_service_order" edges to ExtraServiceOrder entities.
func (su *SymbolUpdate) RemoveExtraServiceOrder(e ...*ExtraServiceOrder) *SymbolUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return su.RemoveExtraServiceOrderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SymbolUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SymbolUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SymbolUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SymbolUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SymbolUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := symbol.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *SymbolUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SymbolUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *SymbolUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(symbol.Table, symbol.Columns, sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt64))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.CreatedBy(); ok {
		_spec.SetField(symbol.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedCreatedBy(); ok {
		_spec.AddField(symbol.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := su.mutation.UpdatedBy(); ok {
		_spec.SetField(symbol.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(symbol.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(symbol.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(symbol.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(symbol.FieldName, field.TypeString, value)
	}
	if su.mutation.WalletsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.WalletsTable,
			Columns: []string{symbol.WalletsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedWalletsIDs(); len(nodes) > 0 && !su.mutation.WalletsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.WalletsTable,
			Columns: []string{symbol.WalletsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.WalletsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.WalletsTable,
			Columns: []string{symbol.WalletsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.BillsTable,
			Columns: []string{symbol.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedBillsIDs(); len(nodes) > 0 && !su.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.BillsTable,
			Columns: []string{symbol.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.BillsTable,
			Columns: []string{symbol.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.MissionOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.MissionOrdersTable,
			Columns: []string{symbol.MissionOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedMissionOrdersIDs(); len(nodes) > 0 && !su.mutation.MissionOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.MissionOrdersTable,
			Columns: []string{symbol.MissionOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.MissionOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.MissionOrdersTable,
			Columns: []string{symbol.MissionOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.TransferOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.TransferOrdersTable,
			Columns: []string{symbol.TransferOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transferorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedTransferOrdersIDs(); len(nodes) > 0 && !su.mutation.TransferOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.TransferOrdersTable,
			Columns: []string{symbol.TransferOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transferorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TransferOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.TransferOrdersTable,
			Columns: []string{symbol.TransferOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transferorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ExtraServiceOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.ExtraServiceOrderTable,
			Columns: []string{symbol.ExtraServiceOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extraserviceorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedExtraServiceOrderIDs(); len(nodes) > 0 && !su.mutation.ExtraServiceOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.ExtraServiceOrderTable,
			Columns: []string{symbol.ExtraServiceOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extraserviceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ExtraServiceOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.ExtraServiceOrderTable,
			Columns: []string{symbol.ExtraServiceOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extraserviceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{symbol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SymbolUpdateOne is the builder for updating a single Symbol entity.
type SymbolUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SymbolMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedBy sets the "created_by" field.
func (suo *SymbolUpdateOne) SetCreatedBy(i int64) *SymbolUpdateOne {
	suo.mutation.ResetCreatedBy()
	suo.mutation.SetCreatedBy(i)
	return suo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (suo *SymbolUpdateOne) SetNillableCreatedBy(i *int64) *SymbolUpdateOne {
	if i != nil {
		suo.SetCreatedBy(*i)
	}
	return suo
}

// AddCreatedBy adds i to the "created_by" field.
func (suo *SymbolUpdateOne) AddCreatedBy(i int64) *SymbolUpdateOne {
	suo.mutation.AddCreatedBy(i)
	return suo
}

// SetUpdatedBy sets the "updated_by" field.
func (suo *SymbolUpdateOne) SetUpdatedBy(i int64) *SymbolUpdateOne {
	suo.mutation.ResetUpdatedBy()
	suo.mutation.SetUpdatedBy(i)
	return suo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (suo *SymbolUpdateOne) SetNillableUpdatedBy(i *int64) *SymbolUpdateOne {
	if i != nil {
		suo.SetUpdatedBy(*i)
	}
	return suo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (suo *SymbolUpdateOne) AddUpdatedBy(i int64) *SymbolUpdateOne {
	suo.mutation.AddUpdatedBy(i)
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SymbolUpdateOne) SetUpdatedAt(t time.Time) *SymbolUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *SymbolUpdateOne) SetDeletedAt(t time.Time) *SymbolUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *SymbolUpdateOne) SetNillableDeletedAt(t *time.Time) *SymbolUpdateOne {
	if t != nil {
		suo.SetDeletedAt(*t)
	}
	return suo
}

// SetName sets the "name" field.
func (suo *SymbolUpdateOne) SetName(s string) *SymbolUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *SymbolUpdateOne) SetNillableName(s *string) *SymbolUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// AddWalletIDs adds the "wallets" edge to the Wallet entity by IDs.
func (suo *SymbolUpdateOne) AddWalletIDs(ids ...int64) *SymbolUpdateOne {
	suo.mutation.AddWalletIDs(ids...)
	return suo
}

// AddWallets adds the "wallets" edges to the Wallet entity.
func (suo *SymbolUpdateOne) AddWallets(w ...*Wallet) *SymbolUpdateOne {
	ids := make([]int64, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return suo.AddWalletIDs(ids...)
}

// AddBillIDs adds the "bills" edge to the Bill entity by IDs.
func (suo *SymbolUpdateOne) AddBillIDs(ids ...int64) *SymbolUpdateOne {
	suo.mutation.AddBillIDs(ids...)
	return suo
}

// AddBills adds the "bills" edges to the Bill entity.
func (suo *SymbolUpdateOne) AddBills(b ...*Bill) *SymbolUpdateOne {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return suo.AddBillIDs(ids...)
}

// AddMissionOrderIDs adds the "mission_orders" edge to the MissionOrder entity by IDs.
func (suo *SymbolUpdateOne) AddMissionOrderIDs(ids ...int64) *SymbolUpdateOne {
	suo.mutation.AddMissionOrderIDs(ids...)
	return suo
}

// AddMissionOrders adds the "mission_orders" edges to the MissionOrder entity.
func (suo *SymbolUpdateOne) AddMissionOrders(m ...*MissionOrder) *SymbolUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return suo.AddMissionOrderIDs(ids...)
}

// AddTransferOrderIDs adds the "transfer_orders" edge to the TransferOrder entity by IDs.
func (suo *SymbolUpdateOne) AddTransferOrderIDs(ids ...int64) *SymbolUpdateOne {
	suo.mutation.AddTransferOrderIDs(ids...)
	return suo
}

// AddTransferOrders adds the "transfer_orders" edges to the TransferOrder entity.
func (suo *SymbolUpdateOne) AddTransferOrders(t ...*TransferOrder) *SymbolUpdateOne {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.AddTransferOrderIDs(ids...)
}

// AddExtraServiceOrderIDs adds the "extra_service_order" edge to the ExtraServiceOrder entity by IDs.
func (suo *SymbolUpdateOne) AddExtraServiceOrderIDs(ids ...int64) *SymbolUpdateOne {
	suo.mutation.AddExtraServiceOrderIDs(ids...)
	return suo
}

// AddExtraServiceOrder adds the "extra_service_order" edges to the ExtraServiceOrder entity.
func (suo *SymbolUpdateOne) AddExtraServiceOrder(e ...*ExtraServiceOrder) *SymbolUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return suo.AddExtraServiceOrderIDs(ids...)
}

// Mutation returns the SymbolMutation object of the builder.
func (suo *SymbolUpdateOne) Mutation() *SymbolMutation {
	return suo.mutation
}

// ClearWallets clears all "wallets" edges to the Wallet entity.
func (suo *SymbolUpdateOne) ClearWallets() *SymbolUpdateOne {
	suo.mutation.ClearWallets()
	return suo
}

// RemoveWalletIDs removes the "wallets" edge to Wallet entities by IDs.
func (suo *SymbolUpdateOne) RemoveWalletIDs(ids ...int64) *SymbolUpdateOne {
	suo.mutation.RemoveWalletIDs(ids...)
	return suo
}

// RemoveWallets removes "wallets" edges to Wallet entities.
func (suo *SymbolUpdateOne) RemoveWallets(w ...*Wallet) *SymbolUpdateOne {
	ids := make([]int64, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return suo.RemoveWalletIDs(ids...)
}

// ClearBills clears all "bills" edges to the Bill entity.
func (suo *SymbolUpdateOne) ClearBills() *SymbolUpdateOne {
	suo.mutation.ClearBills()
	return suo
}

// RemoveBillIDs removes the "bills" edge to Bill entities by IDs.
func (suo *SymbolUpdateOne) RemoveBillIDs(ids ...int64) *SymbolUpdateOne {
	suo.mutation.RemoveBillIDs(ids...)
	return suo
}

// RemoveBills removes "bills" edges to Bill entities.
func (suo *SymbolUpdateOne) RemoveBills(b ...*Bill) *SymbolUpdateOne {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return suo.RemoveBillIDs(ids...)
}

// ClearMissionOrders clears all "mission_orders" edges to the MissionOrder entity.
func (suo *SymbolUpdateOne) ClearMissionOrders() *SymbolUpdateOne {
	suo.mutation.ClearMissionOrders()
	return suo
}

// RemoveMissionOrderIDs removes the "mission_orders" edge to MissionOrder entities by IDs.
func (suo *SymbolUpdateOne) RemoveMissionOrderIDs(ids ...int64) *SymbolUpdateOne {
	suo.mutation.RemoveMissionOrderIDs(ids...)
	return suo
}

// RemoveMissionOrders removes "mission_orders" edges to MissionOrder entities.
func (suo *SymbolUpdateOne) RemoveMissionOrders(m ...*MissionOrder) *SymbolUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return suo.RemoveMissionOrderIDs(ids...)
}

// ClearTransferOrders clears all "transfer_orders" edges to the TransferOrder entity.
func (suo *SymbolUpdateOne) ClearTransferOrders() *SymbolUpdateOne {
	suo.mutation.ClearTransferOrders()
	return suo
}

// RemoveTransferOrderIDs removes the "transfer_orders" edge to TransferOrder entities by IDs.
func (suo *SymbolUpdateOne) RemoveTransferOrderIDs(ids ...int64) *SymbolUpdateOne {
	suo.mutation.RemoveTransferOrderIDs(ids...)
	return suo
}

// RemoveTransferOrders removes "transfer_orders" edges to TransferOrder entities.
func (suo *SymbolUpdateOne) RemoveTransferOrders(t ...*TransferOrder) *SymbolUpdateOne {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.RemoveTransferOrderIDs(ids...)
}

// ClearExtraServiceOrder clears all "extra_service_order" edges to the ExtraServiceOrder entity.
func (suo *SymbolUpdateOne) ClearExtraServiceOrder() *SymbolUpdateOne {
	suo.mutation.ClearExtraServiceOrder()
	return suo
}

// RemoveExtraServiceOrderIDs removes the "extra_service_order" edge to ExtraServiceOrder entities by IDs.
func (suo *SymbolUpdateOne) RemoveExtraServiceOrderIDs(ids ...int64) *SymbolUpdateOne {
	suo.mutation.RemoveExtraServiceOrderIDs(ids...)
	return suo
}

// RemoveExtraServiceOrder removes "extra_service_order" edges to ExtraServiceOrder entities.
func (suo *SymbolUpdateOne) RemoveExtraServiceOrder(e ...*ExtraServiceOrder) *SymbolUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return suo.RemoveExtraServiceOrderIDs(ids...)
}

// Where appends a list predicates to the SymbolUpdate builder.
func (suo *SymbolUpdateOne) Where(ps ...predicate.Symbol) *SymbolUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SymbolUpdateOne) Select(field string, fields ...string) *SymbolUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Symbol entity.
func (suo *SymbolUpdateOne) Save(ctx context.Context) (*Symbol, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SymbolUpdateOne) SaveX(ctx context.Context) *Symbol {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SymbolUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SymbolUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SymbolUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := symbol.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *SymbolUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SymbolUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *SymbolUpdateOne) sqlSave(ctx context.Context) (_node *Symbol, err error) {
	_spec := sqlgraph.NewUpdateSpec(symbol.Table, symbol.Columns, sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt64))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "Symbol.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, symbol.FieldID)
		for _, f := range fields {
			if !symbol.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != symbol.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.CreatedBy(); ok {
		_spec.SetField(symbol.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(symbol.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.UpdatedBy(); ok {
		_spec.SetField(symbol.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(symbol.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(symbol.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(symbol.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(symbol.FieldName, field.TypeString, value)
	}
	if suo.mutation.WalletsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.WalletsTable,
			Columns: []string{symbol.WalletsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedWalletsIDs(); len(nodes) > 0 && !suo.mutation.WalletsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.WalletsTable,
			Columns: []string{symbol.WalletsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.WalletsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.WalletsTable,
			Columns: []string{symbol.WalletsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.BillsTable,
			Columns: []string{symbol.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedBillsIDs(); len(nodes) > 0 && !suo.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.BillsTable,
			Columns: []string{symbol.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.BillsTable,
			Columns: []string{symbol.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.MissionOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.MissionOrdersTable,
			Columns: []string{symbol.MissionOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedMissionOrdersIDs(); len(nodes) > 0 && !suo.mutation.MissionOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.MissionOrdersTable,
			Columns: []string{symbol.MissionOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.MissionOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.MissionOrdersTable,
			Columns: []string{symbol.MissionOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.TransferOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.TransferOrdersTable,
			Columns: []string{symbol.TransferOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transferorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedTransferOrdersIDs(); len(nodes) > 0 && !suo.mutation.TransferOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.TransferOrdersTable,
			Columns: []string{symbol.TransferOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transferorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TransferOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.TransferOrdersTable,
			Columns: []string{symbol.TransferOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transferorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ExtraServiceOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.ExtraServiceOrderTable,
			Columns: []string{symbol.ExtraServiceOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extraserviceorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedExtraServiceOrderIDs(); len(nodes) > 0 && !suo.mutation.ExtraServiceOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.ExtraServiceOrderTable,
			Columns: []string{symbol.ExtraServiceOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extraserviceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ExtraServiceOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.ExtraServiceOrderTable,
			Columns: []string{symbol.ExtraServiceOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extraserviceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(suo.modifiers...)
	_node = &Symbol{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{symbol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
