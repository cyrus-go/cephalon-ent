// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/extraservice"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/mission"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionextraservice"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// MissionExtraServiceQuery is the builder for querying MissionExtraService entities.
type MissionExtraServiceQuery struct {
	config
	ctx              *QueryContext
	order            []missionextraservice.OrderOption
	inters           []Interceptor
	predicates       []predicate.MissionExtraService
	withMission      *MissionQuery
	withExtraService *ExtraServiceQuery
	modifiers        []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MissionExtraServiceQuery builder.
func (mesq *MissionExtraServiceQuery) Where(ps ...predicate.MissionExtraService) *MissionExtraServiceQuery {
	mesq.predicates = append(mesq.predicates, ps...)
	return mesq
}

// Limit the number of records to be returned by this query.
func (mesq *MissionExtraServiceQuery) Limit(limit int) *MissionExtraServiceQuery {
	mesq.ctx.Limit = &limit
	return mesq
}

// Offset to start from.
func (mesq *MissionExtraServiceQuery) Offset(offset int) *MissionExtraServiceQuery {
	mesq.ctx.Offset = &offset
	return mesq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mesq *MissionExtraServiceQuery) Unique(unique bool) *MissionExtraServiceQuery {
	mesq.ctx.Unique = &unique
	return mesq
}

// Order specifies how the records should be ordered.
func (mesq *MissionExtraServiceQuery) Order(o ...missionextraservice.OrderOption) *MissionExtraServiceQuery {
	mesq.order = append(mesq.order, o...)
	return mesq
}

// QueryMission chains the current query on the "mission" edge.
func (mesq *MissionExtraServiceQuery) QueryMission() *MissionQuery {
	query := (&MissionClient{config: mesq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mesq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mesq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(missionextraservice.Table, missionextraservice.FieldID, selector),
			sqlgraph.To(mission.Table, mission.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, missionextraservice.MissionTable, missionextraservice.MissionColumn),
		)
		fromU = sqlgraph.SetNeighbors(mesq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExtraService chains the current query on the "extra_service" edge.
func (mesq *MissionExtraServiceQuery) QueryExtraService() *ExtraServiceQuery {
	query := (&ExtraServiceClient{config: mesq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mesq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mesq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(missionextraservice.Table, missionextraservice.FieldID, selector),
			sqlgraph.To(extraservice.Table, extraservice.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, missionextraservice.ExtraServiceTable, missionextraservice.ExtraServiceColumn),
		)
		fromU = sqlgraph.SetNeighbors(mesq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first MissionExtraService entity from the query.
// Returns a *NotFoundError when no MissionExtraService was found.
func (mesq *MissionExtraServiceQuery) First(ctx context.Context) (*MissionExtraService, error) {
	nodes, err := mesq.Limit(1).All(setContextOp(ctx, mesq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{missionextraservice.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mesq *MissionExtraServiceQuery) FirstX(ctx context.Context) *MissionExtraService {
	node, err := mesq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MissionExtraService ID from the query.
// Returns a *NotFoundError when no MissionExtraService ID was found.
func (mesq *MissionExtraServiceQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = mesq.Limit(1).IDs(setContextOp(ctx, mesq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{missionextraservice.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mesq *MissionExtraServiceQuery) FirstIDX(ctx context.Context) int64 {
	id, err := mesq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single MissionExtraService entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one MissionExtraService entity is found.
// Returns a *NotFoundError when no MissionExtraService entities are found.
func (mesq *MissionExtraServiceQuery) Only(ctx context.Context) (*MissionExtraService, error) {
	nodes, err := mesq.Limit(2).All(setContextOp(ctx, mesq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{missionextraservice.Label}
	default:
		return nil, &NotSingularError{missionextraservice.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mesq *MissionExtraServiceQuery) OnlyX(ctx context.Context) *MissionExtraService {
	node, err := mesq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only MissionExtraService ID in the query.
// Returns a *NotSingularError when more than one MissionExtraService ID is found.
// Returns a *NotFoundError when no entities are found.
func (mesq *MissionExtraServiceQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = mesq.Limit(2).IDs(setContextOp(ctx, mesq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{missionextraservice.Label}
	default:
		err = &NotSingularError{missionextraservice.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mesq *MissionExtraServiceQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := mesq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MissionExtraServices.
func (mesq *MissionExtraServiceQuery) All(ctx context.Context) ([]*MissionExtraService, error) {
	ctx = setContextOp(ctx, mesq.ctx, "All")
	if err := mesq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*MissionExtraService, *MissionExtraServiceQuery]()
	return withInterceptors[[]*MissionExtraService](ctx, mesq, qr, mesq.inters)
}

// AllX is like All, but panics if an error occurs.
func (mesq *MissionExtraServiceQuery) AllX(ctx context.Context) []*MissionExtraService {
	nodes, err := mesq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MissionExtraService IDs.
func (mesq *MissionExtraServiceQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if mesq.ctx.Unique == nil && mesq.path != nil {
		mesq.Unique(true)
	}
	ctx = setContextOp(ctx, mesq.ctx, "IDs")
	if err = mesq.Select(missionextraservice.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mesq *MissionExtraServiceQuery) IDsX(ctx context.Context) []int64 {
	ids, err := mesq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mesq *MissionExtraServiceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, mesq.ctx, "Count")
	if err := mesq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, mesq, querierCount[*MissionExtraServiceQuery](), mesq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (mesq *MissionExtraServiceQuery) CountX(ctx context.Context) int {
	count, err := mesq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mesq *MissionExtraServiceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, mesq.ctx, "Exist")
	switch _, err := mesq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("cep_ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (mesq *MissionExtraServiceQuery) ExistX(ctx context.Context) bool {
	exist, err := mesq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MissionExtraServiceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mesq *MissionExtraServiceQuery) Clone() *MissionExtraServiceQuery {
	if mesq == nil {
		return nil
	}
	return &MissionExtraServiceQuery{
		config:           mesq.config,
		ctx:              mesq.ctx.Clone(),
		order:            append([]missionextraservice.OrderOption{}, mesq.order...),
		inters:           append([]Interceptor{}, mesq.inters...),
		predicates:       append([]predicate.MissionExtraService{}, mesq.predicates...),
		withMission:      mesq.withMission.Clone(),
		withExtraService: mesq.withExtraService.Clone(),
		// clone intermediate query.
		sql:  mesq.sql.Clone(),
		path: mesq.path,
	}
}

// WithMission tells the query-builder to eager-load the nodes that are connected to
// the "mission" edge. The optional arguments are used to configure the query builder of the edge.
func (mesq *MissionExtraServiceQuery) WithMission(opts ...func(*MissionQuery)) *MissionExtraServiceQuery {
	query := (&MissionClient{config: mesq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mesq.withMission = query
	return mesq
}

// WithExtraService tells the query-builder to eager-load the nodes that are connected to
// the "extra_service" edge. The optional arguments are used to configure the query builder of the edge.
func (mesq *MissionExtraServiceQuery) WithExtraService(opts ...func(*ExtraServiceQuery)) *MissionExtraServiceQuery {
	query := (&ExtraServiceClient{config: mesq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mesq.withExtraService = query
	return mesq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by,string"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MissionExtraService.Query().
//		GroupBy(missionextraservice.FieldCreatedBy).
//		Aggregate(cep_ent.Count()).
//		Scan(ctx, &v)
func (mesq *MissionExtraServiceQuery) GroupBy(field string, fields ...string) *MissionExtraServiceGroupBy {
	mesq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &MissionExtraServiceGroupBy{build: mesq}
	grbuild.flds = &mesq.ctx.Fields
	grbuild.label = missionextraservice.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by,string"`
//	}
//
//	client.MissionExtraService.Query().
//		Select(missionextraservice.FieldCreatedBy).
//		Scan(ctx, &v)
func (mesq *MissionExtraServiceQuery) Select(fields ...string) *MissionExtraServiceSelect {
	mesq.ctx.Fields = append(mesq.ctx.Fields, fields...)
	sbuild := &MissionExtraServiceSelect{MissionExtraServiceQuery: mesq}
	sbuild.label = missionextraservice.Label
	sbuild.flds, sbuild.scan = &mesq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a MissionExtraServiceSelect configured with the given aggregations.
func (mesq *MissionExtraServiceQuery) Aggregate(fns ...AggregateFunc) *MissionExtraServiceSelect {
	return mesq.Select().Aggregate(fns...)
}

func (mesq *MissionExtraServiceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range mesq.inters {
		if inter == nil {
			return fmt.Errorf("cep_ent: uninitialized interceptor (forgotten import cep_ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, mesq); err != nil {
				return err
			}
		}
	}
	for _, f := range mesq.ctx.Fields {
		if !missionextraservice.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
		}
	}
	if mesq.path != nil {
		prev, err := mesq.path(ctx)
		if err != nil {
			return err
		}
		mesq.sql = prev
	}
	return nil
}

func (mesq *MissionExtraServiceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*MissionExtraService, error) {
	var (
		nodes       = []*MissionExtraService{}
		_spec       = mesq.querySpec()
		loadedTypes = [2]bool{
			mesq.withMission != nil,
			mesq.withExtraService != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*MissionExtraService).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &MissionExtraService{config: mesq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(mesq.modifiers) > 0 {
		_spec.Modifiers = mesq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, mesq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := mesq.withMission; query != nil {
		if err := mesq.loadMission(ctx, query, nodes, nil,
			func(n *MissionExtraService, e *Mission) { n.Edges.Mission = e }); err != nil {
			return nil, err
		}
	}
	if query := mesq.withExtraService; query != nil {
		if err := mesq.loadExtraService(ctx, query, nodes, nil,
			func(n *MissionExtraService, e *ExtraService) { n.Edges.ExtraService = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (mesq *MissionExtraServiceQuery) loadMission(ctx context.Context, query *MissionQuery, nodes []*MissionExtraService, init func(*MissionExtraService), assign func(*MissionExtraService, *Mission)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*MissionExtraService)
	for i := range nodes {
		fk := nodes[i].MissionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(mission.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "mission_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (mesq *MissionExtraServiceQuery) loadExtraService(ctx context.Context, query *ExtraServiceQuery, nodes []*MissionExtraService, init func(*MissionExtraService), assign func(*MissionExtraService, *ExtraService)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*MissionExtraService)
	for i := range nodes {
		fk := nodes[i].ExtraServiceID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(extraservice.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "extra_service_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (mesq *MissionExtraServiceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mesq.querySpec()
	if len(mesq.modifiers) > 0 {
		_spec.Modifiers = mesq.modifiers
	}
	_spec.Node.Columns = mesq.ctx.Fields
	if len(mesq.ctx.Fields) > 0 {
		_spec.Unique = mesq.ctx.Unique != nil && *mesq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, mesq.driver, _spec)
}

func (mesq *MissionExtraServiceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(missionextraservice.Table, missionextraservice.Columns, sqlgraph.NewFieldSpec(missionextraservice.FieldID, field.TypeInt64))
	_spec.From = mesq.sql
	if unique := mesq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if mesq.path != nil {
		_spec.Unique = true
	}
	if fields := mesq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, missionextraservice.FieldID)
		for i := range fields {
			if fields[i] != missionextraservice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if mesq.withMission != nil {
			_spec.Node.AddColumnOnce(missionextraservice.FieldMissionID)
		}
		if mesq.withExtraService != nil {
			_spec.Node.AddColumnOnce(missionextraservice.FieldExtraServiceID)
		}
	}
	if ps := mesq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mesq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mesq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mesq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mesq *MissionExtraServiceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mesq.driver.Dialect())
	t1 := builder.Table(missionextraservice.Table)
	columns := mesq.ctx.Fields
	if len(columns) == 0 {
		columns = missionextraservice.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mesq.sql != nil {
		selector = mesq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if mesq.ctx.Unique != nil && *mesq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range mesq.modifiers {
		m(selector)
	}
	for _, p := range mesq.predicates {
		p(selector)
	}
	for _, p := range mesq.order {
		p(selector)
	}
	if offset := mesq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mesq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (mesq *MissionExtraServiceQuery) Modify(modifiers ...func(s *sql.Selector)) *MissionExtraServiceSelect {
	mesq.modifiers = append(mesq.modifiers, modifiers...)
	return mesq.Select()
}

// MissionExtraServiceGroupBy is the group-by builder for MissionExtraService entities.
type MissionExtraServiceGroupBy struct {
	selector
	build *MissionExtraServiceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mesgb *MissionExtraServiceGroupBy) Aggregate(fns ...AggregateFunc) *MissionExtraServiceGroupBy {
	mesgb.fns = append(mesgb.fns, fns...)
	return mesgb
}

// Scan applies the selector query and scans the result into the given value.
func (mesgb *MissionExtraServiceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mesgb.build.ctx, "GroupBy")
	if err := mesgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MissionExtraServiceQuery, *MissionExtraServiceGroupBy](ctx, mesgb.build, mesgb, mesgb.build.inters, v)
}

func (mesgb *MissionExtraServiceGroupBy) sqlScan(ctx context.Context, root *MissionExtraServiceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(mesgb.fns))
	for _, fn := range mesgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*mesgb.flds)+len(mesgb.fns))
		for _, f := range *mesgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*mesgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mesgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// MissionExtraServiceSelect is the builder for selecting fields of MissionExtraService entities.
type MissionExtraServiceSelect struct {
	*MissionExtraServiceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (mess *MissionExtraServiceSelect) Aggregate(fns ...AggregateFunc) *MissionExtraServiceSelect {
	mess.fns = append(mess.fns, fns...)
	return mess
}

// Scan applies the selector query and scans the result into the given value.
func (mess *MissionExtraServiceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mess.ctx, "Select")
	if err := mess.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MissionExtraServiceQuery, *MissionExtraServiceSelect](ctx, mess.MissionExtraServiceQuery, mess, mess.inters, v)
}

func (mess *MissionExtraServiceSelect) sqlScan(ctx context.Context, root *MissionExtraServiceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(mess.fns))
	for _, fn := range mess.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*mess.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mess.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (mess *MissionExtraServiceSelect) Modify(modifiers ...func(s *sql.Selector)) *MissionExtraServiceSelect {
	mess.modifiers = append(mess.modifiers, modifiers...)
	return mess
}
