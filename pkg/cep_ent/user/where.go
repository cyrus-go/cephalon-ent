// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDeletedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// NickName applies equality check predicate on the "nick_name" field. It's identical to NickNameEQ.
func NickName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNickName, v))
}

// JpgURL applies equality check predicate on the "jpg_url" field. It's identical to JpgURLEQ.
func JpgURL(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldJpgURL, v))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldKey, v))
}

// Secret applies equality check predicate on the "secret" field. It's identical to SecretEQ.
func Secret(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSecret, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhone, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// IsFrozen applies equality check predicate on the "is_frozen" field. It's identical to IsFrozenEQ.
func IsFrozen(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsFrozen, v))
}

// IsRecharge applies equality check predicate on the "is_recharge" field. It's identical to IsRechargeEQ.
func IsRecharge(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsRecharge, v))
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldParentID, v))
}

// PopVersion applies equality check predicate on the "pop_version" field. It's identical to PopVersionEQ.
func PopVersion(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPopVersion, v))
}

// AreaCode applies equality check predicate on the "area_code" field. It's identical to AreaCodeEQ.
func AreaCode(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAreaCode, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int64) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int64) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int64) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int64) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDeletedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldName, v))
}

// NickNameEQ applies the EQ predicate on the "nick_name" field.
func NickNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNickName, v))
}

// NickNameNEQ applies the NEQ predicate on the "nick_name" field.
func NickNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldNickName, v))
}

// NickNameIn applies the In predicate on the "nick_name" field.
func NickNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldNickName, vs...))
}

// NickNameNotIn applies the NotIn predicate on the "nick_name" field.
func NickNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldNickName, vs...))
}

// NickNameGT applies the GT predicate on the "nick_name" field.
func NickNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldNickName, v))
}

// NickNameGTE applies the GTE predicate on the "nick_name" field.
func NickNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldNickName, v))
}

// NickNameLT applies the LT predicate on the "nick_name" field.
func NickNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldNickName, v))
}

// NickNameLTE applies the LTE predicate on the "nick_name" field.
func NickNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldNickName, v))
}

// NickNameContains applies the Contains predicate on the "nick_name" field.
func NickNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldNickName, v))
}

// NickNameHasPrefix applies the HasPrefix predicate on the "nick_name" field.
func NickNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldNickName, v))
}

// NickNameHasSuffix applies the HasSuffix predicate on the "nick_name" field.
func NickNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldNickName, v))
}

// NickNameEqualFold applies the EqualFold predicate on the "nick_name" field.
func NickNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldNickName, v))
}

// NickNameContainsFold applies the ContainsFold predicate on the "nick_name" field.
func NickNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldNickName, v))
}

// JpgURLEQ applies the EQ predicate on the "jpg_url" field.
func JpgURLEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldJpgURL, v))
}

// JpgURLNEQ applies the NEQ predicate on the "jpg_url" field.
func JpgURLNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldJpgURL, v))
}

// JpgURLIn applies the In predicate on the "jpg_url" field.
func JpgURLIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldJpgURL, vs...))
}

// JpgURLNotIn applies the NotIn predicate on the "jpg_url" field.
func JpgURLNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldJpgURL, vs...))
}

// JpgURLGT applies the GT predicate on the "jpg_url" field.
func JpgURLGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldJpgURL, v))
}

// JpgURLGTE applies the GTE predicate on the "jpg_url" field.
func JpgURLGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldJpgURL, v))
}

// JpgURLLT applies the LT predicate on the "jpg_url" field.
func JpgURLLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldJpgURL, v))
}

// JpgURLLTE applies the LTE predicate on the "jpg_url" field.
func JpgURLLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldJpgURL, v))
}

// JpgURLContains applies the Contains predicate on the "jpg_url" field.
func JpgURLContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldJpgURL, v))
}

// JpgURLHasPrefix applies the HasPrefix predicate on the "jpg_url" field.
func JpgURLHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldJpgURL, v))
}

// JpgURLHasSuffix applies the HasSuffix predicate on the "jpg_url" field.
func JpgURLHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldJpgURL, v))
}

// JpgURLEqualFold applies the EqualFold predicate on the "jpg_url" field.
func JpgURLEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldJpgURL, v))
}

// JpgURLContainsFold applies the ContainsFold predicate on the "jpg_url" field.
func JpgURLContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldJpgURL, v))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldKey, v))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldKey, v))
}

// SecretEQ applies the EQ predicate on the "secret" field.
func SecretEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSecret, v))
}

// SecretNEQ applies the NEQ predicate on the "secret" field.
func SecretNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldSecret, v))
}

// SecretIn applies the In predicate on the "secret" field.
func SecretIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldSecret, vs...))
}

// SecretNotIn applies the NotIn predicate on the "secret" field.
func SecretNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldSecret, vs...))
}

// SecretGT applies the GT predicate on the "secret" field.
func SecretGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldSecret, v))
}

// SecretGTE applies the GTE predicate on the "secret" field.
func SecretGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldSecret, v))
}

// SecretLT applies the LT predicate on the "secret" field.
func SecretLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldSecret, v))
}

// SecretLTE applies the LTE predicate on the "secret" field.
func SecretLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldSecret, v))
}

// SecretContains applies the Contains predicate on the "secret" field.
func SecretContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldSecret, v))
}

// SecretHasPrefix applies the HasPrefix predicate on the "secret" field.
func SecretHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldSecret, v))
}

// SecretHasSuffix applies the HasSuffix predicate on the "secret" field.
func SecretHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldSecret, v))
}

// SecretEqualFold applies the EqualFold predicate on the "secret" field.
func SecretEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldSecret, v))
}

// SecretContainsFold applies the ContainsFold predicate on the "secret" field.
func SecretContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldSecret, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPhone, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPassword, v))
}

// IsFrozenEQ applies the EQ predicate on the "is_frozen" field.
func IsFrozenEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsFrozen, v))
}

// IsFrozenNEQ applies the NEQ predicate on the "is_frozen" field.
func IsFrozenNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIsFrozen, v))
}

// IsRechargeEQ applies the EQ predicate on the "is_recharge" field.
func IsRechargeEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsRecharge, v))
}

// IsRechargeNEQ applies the NEQ predicate on the "is_recharge" field.
func IsRechargeNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIsRecharge, v))
}

// UserTypeEQ applies the EQ predicate on the "user_type" field.
func UserTypeEQ(v UserType) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUserType, v))
}

// UserTypeNEQ applies the NEQ predicate on the "user_type" field.
func UserTypeNEQ(v UserType) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUserType, v))
}

// UserTypeIn applies the In predicate on the "user_type" field.
func UserTypeIn(vs ...UserType) predicate.User {
	return predicate.User(sql.FieldIn(FieldUserType, vs...))
}

// UserTypeNotIn applies the NotIn predicate on the "user_type" field.
func UserTypeNotIn(vs ...UserType) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUserType, vs...))
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldParentID, v))
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v int64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldParentID, v))
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldIn(FieldParentID, vs...))
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldParentID, vs...))
}

// PopVersionEQ applies the EQ predicate on the "pop_version" field.
func PopVersionEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPopVersion, v))
}

// PopVersionNEQ applies the NEQ predicate on the "pop_version" field.
func PopVersionNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPopVersion, v))
}

// PopVersionIn applies the In predicate on the "pop_version" field.
func PopVersionIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPopVersion, vs...))
}

// PopVersionNotIn applies the NotIn predicate on the "pop_version" field.
func PopVersionNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPopVersion, vs...))
}

// PopVersionGT applies the GT predicate on the "pop_version" field.
func PopVersionGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPopVersion, v))
}

// PopVersionGTE applies the GTE predicate on the "pop_version" field.
func PopVersionGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPopVersion, v))
}

// PopVersionLT applies the LT predicate on the "pop_version" field.
func PopVersionLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPopVersion, v))
}

// PopVersionLTE applies the LTE predicate on the "pop_version" field.
func PopVersionLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPopVersion, v))
}

// PopVersionContains applies the Contains predicate on the "pop_version" field.
func PopVersionContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPopVersion, v))
}

// PopVersionHasPrefix applies the HasPrefix predicate on the "pop_version" field.
func PopVersionHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPopVersion, v))
}

// PopVersionHasSuffix applies the HasSuffix predicate on the "pop_version" field.
func PopVersionHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPopVersion, v))
}

// PopVersionEqualFold applies the EqualFold predicate on the "pop_version" field.
func PopVersionEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPopVersion, v))
}

// PopVersionContainsFold applies the ContainsFold predicate on the "pop_version" field.
func PopVersionContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPopVersion, v))
}

// AreaCodeEQ applies the EQ predicate on the "area_code" field.
func AreaCodeEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAreaCode, v))
}

// AreaCodeNEQ applies the NEQ predicate on the "area_code" field.
func AreaCodeNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAreaCode, v))
}

// AreaCodeIn applies the In predicate on the "area_code" field.
func AreaCodeIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldAreaCode, vs...))
}

// AreaCodeNotIn applies the NotIn predicate on the "area_code" field.
func AreaCodeNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAreaCode, vs...))
}

// AreaCodeGT applies the GT predicate on the "area_code" field.
func AreaCodeGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldAreaCode, v))
}

// AreaCodeGTE applies the GTE predicate on the "area_code" field.
func AreaCodeGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAreaCode, v))
}

// AreaCodeLT applies the LT predicate on the "area_code" field.
func AreaCodeLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldAreaCode, v))
}

// AreaCodeLTE applies the LTE predicate on the "area_code" field.
func AreaCodeLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAreaCode, v))
}

// AreaCodeContains applies the Contains predicate on the "area_code" field.
func AreaCodeContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldAreaCode, v))
}

// AreaCodeHasPrefix applies the HasPrefix predicate on the "area_code" field.
func AreaCodeHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldAreaCode, v))
}

// AreaCodeHasSuffix applies the HasSuffix predicate on the "area_code" field.
func AreaCodeHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldAreaCode, v))
}

// AreaCodeEqualFold applies the EqualFold predicate on the "area_code" field.
func AreaCodeEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldAreaCode, v))
}

// AreaCodeContainsFold applies the ContainsFold predicate on the "area_code" field.
func AreaCodeContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldAreaCode, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// HasVxAccounts applies the HasEdge predicate on the "vx_accounts" edge.
func HasVxAccounts() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VxAccountsTable, VxAccountsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVxAccountsWith applies the HasEdge predicate on the "vx_accounts" edge with a given conditions (other predicates).
func HasVxAccountsWith(preds ...predicate.VXAccount) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newVxAccountsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCollects applies the HasEdge predicate on the "collects" edge.
func HasCollects() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CollectsTable, CollectsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCollectsWith applies the HasEdge predicate on the "collects" edge with a given conditions (other predicates).
func HasCollectsWith(preds ...predicate.Collect) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newCollectsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDevices applies the HasEdge predicate on the "devices" edge.
func HasDevices() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DevicesTable, DevicesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDevicesWith applies the HasEdge predicate on the "devices" edge with a given conditions (other predicates).
func HasDevicesWith(preds ...predicate.Device) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newDevicesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProfitSettings applies the HasEdge predicate on the "profit_settings" edge.
func HasProfitSettings() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProfitSettingsTable, ProfitSettingsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProfitSettingsWith applies the HasEdge predicate on the "profit_settings" edge with a given conditions (other predicates).
func HasProfitSettingsWith(preds ...predicate.ProfitSetting) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newProfitSettingsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCostAccount applies the HasEdge predicate on the "cost_account" edge.
func HasCostAccount() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CostAccountTable, CostAccountColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCostAccountWith applies the HasEdge predicate on the "cost_account" edge with a given conditions (other predicates).
func HasCostAccountWith(preds ...predicate.CostAccount) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newCostAccountStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProfitAccount applies the HasEdge predicate on the "profit_account" edge.
func HasProfitAccount() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ProfitAccountTable, ProfitAccountColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProfitAccountWith applies the HasEdge predicate on the "profit_account" edge with a given conditions (other predicates).
func HasProfitAccountWith(preds ...predicate.ProfitAccount) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newProfitAccountStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCostBills applies the HasEdge predicate on the "cost_bills" edge.
func HasCostBills() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CostBillsTable, CostBillsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCostBillsWith applies the HasEdge predicate on the "cost_bills" edge with a given conditions (other predicates).
func HasCostBillsWith(preds ...predicate.CostBill) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newCostBillsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEarnBills applies the HasEdge predicate on the "earn_bills" edge.
func HasEarnBills() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EarnBillsTable, EarnBillsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEarnBillsWith applies the HasEdge predicate on the "earn_bills" edge with a given conditions (other predicates).
func HasEarnBillsWith(preds ...predicate.EarnBill) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newEarnBillsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMissionConsumeOrders applies the HasEdge predicate on the "mission_consume_orders" edge.
func HasMissionConsumeOrders() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MissionConsumeOrdersTable, MissionConsumeOrdersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMissionConsumeOrdersWith applies the HasEdge predicate on the "mission_consume_orders" edge with a given conditions (other predicates).
func HasMissionConsumeOrdersWith(preds ...predicate.MissionConsumeOrder) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newMissionConsumeOrdersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMissionProduceOrders applies the HasEdge predicate on the "mission_produce_orders" edge.
func HasMissionProduceOrders() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MissionProduceOrdersTable, MissionProduceOrdersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMissionProduceOrdersWith applies the HasEdge predicate on the "mission_produce_orders" edge with a given conditions (other predicates).
func HasMissionProduceOrdersWith(preds ...predicate.MissionProduceOrder) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newMissionProduceOrdersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRechargeOrders applies the HasEdge predicate on the "recharge_orders" edge.
func HasRechargeOrders() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RechargeOrdersTable, RechargeOrdersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRechargeOrdersWith applies the HasEdge predicate on the "recharge_orders" edge with a given conditions (other predicates).
func HasRechargeOrdersWith(preds ...predicate.RechargeOrder) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newRechargeOrdersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVxSocials applies the HasEdge predicate on the "vx_socials" edge.
func HasVxSocials() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VxSocialsTable, VxSocialsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVxSocialsWith applies the HasEdge predicate on the "vx_socials" edge with a given conditions (other predicates).
func HasVxSocialsWith(preds ...predicate.VXSocial) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newVxSocialsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMissionBatches applies the HasEdge predicate on the "mission_batches" edge.
func HasMissionBatches() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MissionBatchesTable, MissionBatchesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMissionBatchesWith applies the HasEdge predicate on the "mission_batches" edge with a given conditions (other predicates).
func HasMissionBatchesWith(preds ...predicate.MissionBatch) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newMissionBatchesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserDevices applies the HasEdge predicate on the "user_devices" edge.
func HasUserDevices() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserDevicesTable, UserDevicesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserDevicesWith applies the HasEdge predicate on the "user_devices" edge with a given conditions (other predicates).
func HasUserDevicesWith(preds ...predicate.UserDevice) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newUserDevicesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newParentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newChildrenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInvites applies the HasEdge predicate on the "invites" edge.
func HasInvites() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InvitesTable, InvitesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInvitesWith applies the HasEdge predicate on the "invites" edge with a given conditions (other predicates).
func HasInvitesWith(preds ...predicate.Invite) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newInvitesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCampaignOrders applies the HasEdge predicate on the "campaign_orders" edge.
func HasCampaignOrders() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CampaignOrdersTable, CampaignOrdersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCampaignOrdersWith applies the HasEdge predicate on the "campaign_orders" edge with a given conditions (other predicates).
func HasCampaignOrdersWith(preds ...predicate.CampaignOrder) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newCampaignOrdersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWallets applies the HasEdge predicate on the "wallets" edge.
func HasWallets() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WalletsTable, WalletsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWalletsWith applies the HasEdge predicate on the "wallets" edge with a given conditions (other predicates).
func HasWalletsWith(preds ...predicate.Wallet) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newWalletsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWithdrawAccount applies the HasEdge predicate on the "withdraw_account" edge.
func HasWithdrawAccount() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, WithdrawAccountTable, WithdrawAccountColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWithdrawAccountWith applies the HasEdge predicate on the "withdraw_account" edge with a given conditions (other predicates).
func HasWithdrawAccountWith(preds ...predicate.WithdrawAccount) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newWithdrawAccountStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIncomeBills applies the HasEdge predicate on the "income_bills" edge.
func HasIncomeBills() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IncomeBillsTable, IncomeBillsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIncomeBillsWith applies the HasEdge predicate on the "income_bills" edge with a given conditions (other predicates).
func HasIncomeBillsWith(preds ...predicate.Bill) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newIncomeBillsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOutcomeBills applies the HasEdge predicate on the "outcome_bills" edge.
func HasOutcomeBills() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OutcomeBillsTable, OutcomeBillsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOutcomeBillsWith applies the HasEdge predicate on the "outcome_bills" edge with a given conditions (other predicates).
func HasOutcomeBillsWith(preds ...predicate.Bill) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newOutcomeBillsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMissionProductions applies the HasEdge predicate on the "mission_productions" edge.
func HasMissionProductions() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MissionProductionsTable, MissionProductionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMissionProductionsWith applies the HasEdge predicate on the "mission_productions" edge with a given conditions (other predicates).
func HasMissionProductionsWith(preds ...predicate.MissionProduction) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newMissionProductionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMissions applies the HasEdge predicate on the "missions" edge.
func HasMissions() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MissionsTable, MissionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMissionsWith applies the HasEdge predicate on the "missions" edge with a given conditions (other predicates).
func HasMissionsWith(preds ...predicate.Mission) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newMissionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIncomeTransferOrders applies the HasEdge predicate on the "income_transfer_orders" edge.
func HasIncomeTransferOrders() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IncomeTransferOrdersTable, IncomeTransferOrdersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIncomeTransferOrdersWith applies the HasEdge predicate on the "income_transfer_orders" edge with a given conditions (other predicates).
func HasIncomeTransferOrdersWith(preds ...predicate.TransferOrder) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newIncomeTransferOrdersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOutcomeTransferOrders applies the HasEdge predicate on the "outcome_transfer_orders" edge.
func HasOutcomeTransferOrders() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OutcomeTransferOrdersTable, OutcomeTransferOrdersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOutcomeTransferOrdersWith applies the HasEdge predicate on the "outcome_transfer_orders" edge with a given conditions (other predicates).
func HasOutcomeTransferOrdersWith(preds ...predicate.TransferOrder) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newOutcomeTransferOrdersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasConsumeMissionOrders applies the HasEdge predicate on the "consume_mission_orders" edge.
func HasConsumeMissionOrders() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ConsumeMissionOrdersTable, ConsumeMissionOrdersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConsumeMissionOrdersWith applies the HasEdge predicate on the "consume_mission_orders" edge with a given conditions (other predicates).
func HasConsumeMissionOrdersWith(preds ...predicate.MissionOrder) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newConsumeMissionOrdersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProduceMissionOrders applies the HasEdge predicate on the "produce_mission_orders" edge.
func HasProduceMissionOrders() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProduceMissionOrdersTable, ProduceMissionOrdersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProduceMissionOrdersWith applies the HasEdge predicate on the "produce_mission_orders" edge with a given conditions (other predicates).
func HasProduceMissionOrdersWith(preds ...predicate.MissionOrder) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newProduceMissionOrdersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLoginRecords applies the HasEdge predicate on the "login_records" edge.
func HasLoginRecords() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LoginRecordsTable, LoginRecordsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLoginRecordsWith applies the HasEdge predicate on the "login_records" edge with a given conditions (other predicates).
func HasLoginRecordsWith(preds ...predicate.LoginRecord) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newLoginRecordsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRenewalAgreements applies the HasEdge predicate on the "renewal_agreements" edge.
func HasRenewalAgreements() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RenewalAgreementsTable, RenewalAgreementsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRenewalAgreementsWith applies the HasEdge predicate on the "renewal_agreements" edge with a given conditions (other predicates).
func HasRenewalAgreementsWith(preds ...predicate.RenewalAgreement) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newRenewalAgreementsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasArtworks applies the HasEdge predicate on the "artworks" edge.
func HasArtworks() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ArtworksTable, ArtworksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasArtworksWith applies the HasEdge predicate on the "artworks" edge with a given conditions (other predicates).
func HasArtworksWith(preds ...predicate.Artwork) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newArtworksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasArtworkLikes applies the HasEdge predicate on the "artwork_likes" edge.
func HasArtworkLikes() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ArtworkLikesTable, ArtworkLikesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasArtworkLikesWith applies the HasEdge predicate on the "artwork_likes" edge with a given conditions (other predicates).
func HasArtworkLikesWith(preds ...predicate.ArtworkLike) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newArtworkLikesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCdkInfos applies the HasEdge predicate on the "cdk_infos" edge.
func HasCdkInfos() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CdkInfosTable, CdkInfosColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCdkInfosWith applies the HasEdge predicate on the "cdk_infos" edge with a given conditions (other predicates).
func HasCdkInfosWith(preds ...predicate.CDKInfo) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newCdkInfosStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUseCdkInfos applies the HasEdge predicate on the "use_cdk_infos" edge.
func HasUseCdkInfos() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UseCdkInfosTable, UseCdkInfosColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUseCdkInfosWith applies the HasEdge predicate on the "use_cdk_infos" edge with a given conditions (other predicates).
func HasUseCdkInfosWith(preds ...predicate.CDKInfo) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newUseCdkInfosStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLottoRecords applies the HasEdge predicate on the "lotto_records" edge.
func HasLottoRecords() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LottoRecordsTable, LottoRecordsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLottoRecordsWith applies the HasEdge predicate on the "lotto_records" edge with a given conditions (other predicates).
func HasLottoRecordsWith(preds ...predicate.LottoRecord) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newLottoRecordsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLottoUserCounts applies the HasEdge predicate on the "lotto_user_counts" edge.
func HasLottoUserCounts() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LottoUserCountsTable, LottoUserCountsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLottoUserCountsWith applies the HasEdge predicate on the "lotto_user_counts" edge with a given conditions (other predicates).
func HasLottoUserCountsWith(preds ...predicate.LottoUserCount) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newLottoUserCountsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLottoGetCountRecords applies the HasEdge predicate on the "lotto_get_count_records" edge.
func HasLottoGetCountRecords() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LottoGetCountRecordsTable, LottoGetCountRecordsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLottoGetCountRecordsWith applies the HasEdge predicate on the "lotto_get_count_records" edge with a given conditions (other predicates).
func HasLottoGetCountRecordsWith(preds ...predicate.LottoGetCountRecord) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newLottoGetCountRecordsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCloudFiles applies the HasEdge predicate on the "cloud_files" edge.
func HasCloudFiles() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CloudFilesTable, CloudFilesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCloudFilesWith applies the HasEdge predicate on the "cloud_files" edge with a given conditions (other predicates).
func HasCloudFilesWith(preds ...predicate.CloudFile) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newCloudFilesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
