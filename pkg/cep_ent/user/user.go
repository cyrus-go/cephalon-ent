// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldJpgURL holds the string denoting the jpg_url field in the database.
	FieldJpgURL = "jpg_url"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldSecret holds the string denoting the secret field in the database.
	FieldSecret = "secret"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldIsFrozen holds the string denoting the is_frozen field in the database.
	FieldIsFrozen = "is_frozen"
	// FieldIsRecharge holds the string denoting the is_recharge field in the database.
	FieldIsRecharge = "is_recharge"
	// FieldUserType holds the string denoting the user_type field in the database.
	FieldUserType = "user_type"
	// FieldParentID holds the string denoting the parent_id field in the database.
	FieldParentID = "parent_id"
	// EdgeVxAccounts holds the string denoting the vx_accounts edge name in mutations.
	EdgeVxAccounts = "vx_accounts"
	// EdgeCollects holds the string denoting the collects edge name in mutations.
	EdgeCollects = "collects"
	// EdgeDevices holds the string denoting the devices edge name in mutations.
	EdgeDevices = "devices"
	// EdgeProfitSettings holds the string denoting the profit_settings edge name in mutations.
	EdgeProfitSettings = "profit_settings"
	// EdgeCostAccount holds the string denoting the cost_account edge name in mutations.
	EdgeCostAccount = "cost_account"
	// EdgeProfitAccount holds the string denoting the profit_account edge name in mutations.
	EdgeProfitAccount = "profit_account"
	// EdgeCostBills holds the string denoting the cost_bills edge name in mutations.
	EdgeCostBills = "cost_bills"
	// EdgeEarnBills holds the string denoting the earn_bills edge name in mutations.
	EdgeEarnBills = "earn_bills"
	// EdgeMissionConsumeOrders holds the string denoting the mission_consume_orders edge name in mutations.
	EdgeMissionConsumeOrders = "mission_consume_orders"
	// EdgeMissionProduceOrders holds the string denoting the mission_produce_orders edge name in mutations.
	EdgeMissionProduceOrders = "mission_produce_orders"
	// EdgeRechargeOrders holds the string denoting the recharge_orders edge name in mutations.
	EdgeRechargeOrders = "recharge_orders"
	// EdgeVxSocials holds the string denoting the vx_socials edge name in mutations.
	EdgeVxSocials = "vx_socials"
	// EdgeMissionBatches holds the string denoting the mission_batches edge name in mutations.
	EdgeMissionBatches = "mission_batches"
	// EdgeUserDevices holds the string denoting the user_devices edge name in mutations.
	EdgeUserDevices = "user_devices"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeChildren holds the string denoting the children edge name in mutations.
	EdgeChildren = "children"
	// EdgeInvites holds the string denoting the invites edge name in mutations.
	EdgeInvites = "invites"
	// Table holds the table name of the user in the database.
	Table = "users"
	// VxAccountsTable is the table that holds the vx_accounts relation/edge.
	VxAccountsTable = "vx_accounts"
	// VxAccountsInverseTable is the table name for the VXAccount entity.
	// It exists in this package in order to avoid circular dependency with the "vxaccount" package.
	VxAccountsInverseTable = "vx_accounts"
	// VxAccountsColumn is the table column denoting the vx_accounts relation/edge.
	VxAccountsColumn = "user_id"
	// CollectsTable is the table that holds the collects relation/edge.
	CollectsTable = "collects"
	// CollectsInverseTable is the table name for the Collect entity.
	// It exists in this package in order to avoid circular dependency with the "collect" package.
	CollectsInverseTable = "collects"
	// CollectsColumn is the table column denoting the collects relation/edge.
	CollectsColumn = "user_id"
	// DevicesTable is the table that holds the devices relation/edge.
	DevicesTable = "devices"
	// DevicesInverseTable is the table name for the Device entity.
	// It exists in this package in order to avoid circular dependency with the "device" package.
	DevicesInverseTable = "devices"
	// DevicesColumn is the table column denoting the devices relation/edge.
	DevicesColumn = "user_id"
	// ProfitSettingsTable is the table that holds the profit_settings relation/edge.
	ProfitSettingsTable = "profit_settings"
	// ProfitSettingsInverseTable is the table name for the ProfitSetting entity.
	// It exists in this package in order to avoid circular dependency with the "profitsetting" package.
	ProfitSettingsInverseTable = "profit_settings"
	// ProfitSettingsColumn is the table column denoting the profit_settings relation/edge.
	ProfitSettingsColumn = "user_id"
	// CostAccountTable is the table that holds the cost_account relation/edge.
	CostAccountTable = "cost_accounts"
	// CostAccountInverseTable is the table name for the CostAccount entity.
	// It exists in this package in order to avoid circular dependency with the "costaccount" package.
	CostAccountInverseTable = "cost_accounts"
	// CostAccountColumn is the table column denoting the cost_account relation/edge.
	CostAccountColumn = "user_id"
	// ProfitAccountTable is the table that holds the profit_account relation/edge.
	ProfitAccountTable = "profit_accounts"
	// ProfitAccountInverseTable is the table name for the ProfitAccount entity.
	// It exists in this package in order to avoid circular dependency with the "profitaccount" package.
	ProfitAccountInverseTable = "profit_accounts"
	// ProfitAccountColumn is the table column denoting the profit_account relation/edge.
	ProfitAccountColumn = "user_id"
	// CostBillsTable is the table that holds the cost_bills relation/edge.
	CostBillsTable = "cost_bills"
	// CostBillsInverseTable is the table name for the CostBill entity.
	// It exists in this package in order to avoid circular dependency with the "costbill" package.
	CostBillsInverseTable = "cost_bills"
	// CostBillsColumn is the table column denoting the cost_bills relation/edge.
	CostBillsColumn = "user_id"
	// EarnBillsTable is the table that holds the earn_bills relation/edge.
	EarnBillsTable = "earn_bills"
	// EarnBillsInverseTable is the table name for the EarnBill entity.
	// It exists in this package in order to avoid circular dependency with the "earnbill" package.
	EarnBillsInverseTable = "earn_bills"
	// EarnBillsColumn is the table column denoting the earn_bills relation/edge.
	EarnBillsColumn = "user_id"
	// MissionConsumeOrdersTable is the table that holds the mission_consume_orders relation/edge.
	MissionConsumeOrdersTable = "mission_consume_orders"
	// MissionConsumeOrdersInverseTable is the table name for the MissionConsumeOrder entity.
	// It exists in this package in order to avoid circular dependency with the "missionconsumeorder" package.
	MissionConsumeOrdersInverseTable = "mission_consume_orders"
	// MissionConsumeOrdersColumn is the table column denoting the mission_consume_orders relation/edge.
	MissionConsumeOrdersColumn = "user_id"
	// MissionProduceOrdersTable is the table that holds the mission_produce_orders relation/edge.
	MissionProduceOrdersTable = "mission_produce_orders"
	// MissionProduceOrdersInverseTable is the table name for the MissionProduceOrder entity.
	// It exists in this package in order to avoid circular dependency with the "missionproduceorder" package.
	MissionProduceOrdersInverseTable = "mission_produce_orders"
	// MissionProduceOrdersColumn is the table column denoting the mission_produce_orders relation/edge.
	MissionProduceOrdersColumn = "user_id"
	// RechargeOrdersTable is the table that holds the recharge_orders relation/edge.
	RechargeOrdersTable = "recharge_orders"
	// RechargeOrdersInverseTable is the table name for the RechargeOrder entity.
	// It exists in this package in order to avoid circular dependency with the "rechargeorder" package.
	RechargeOrdersInverseTable = "recharge_orders"
	// RechargeOrdersColumn is the table column denoting the recharge_orders relation/edge.
	RechargeOrdersColumn = "user_id"
	// VxSocialsTable is the table that holds the vx_socials relation/edge.
	VxSocialsTable = "vx_socials"
	// VxSocialsInverseTable is the table name for the VXSocial entity.
	// It exists in this package in order to avoid circular dependency with the "vxsocial" package.
	VxSocialsInverseTable = "vx_socials"
	// VxSocialsColumn is the table column denoting the vx_socials relation/edge.
	VxSocialsColumn = "user_id"
	// MissionBatchesTable is the table that holds the mission_batches relation/edge.
	MissionBatchesTable = "mission_batches"
	// MissionBatchesInverseTable is the table name for the MissionBatch entity.
	// It exists in this package in order to avoid circular dependency with the "missionbatch" package.
	MissionBatchesInverseTable = "mission_batches"
	// MissionBatchesColumn is the table column denoting the mission_batches relation/edge.
	MissionBatchesColumn = "user_id"
	// UserDevicesTable is the table that holds the user_devices relation/edge.
	UserDevicesTable = "user_devices"
	// UserDevicesInverseTable is the table name for the UserDevice entity.
	// It exists in this package in order to avoid circular dependency with the "userdevice" package.
	UserDevicesInverseTable = "user_devices"
	// UserDevicesColumn is the table column denoting the user_devices relation/edge.
	UserDevicesColumn = "user_id"
	// ParentTable is the table that holds the parent relation/edge.
	ParentTable = "users"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "parent_id"
	// ChildrenTable is the table that holds the children relation/edge.
	ChildrenTable = "users"
	// ChildrenColumn is the table column denoting the children relation/edge.
	ChildrenColumn = "parent_id"
	// InvitesTable is the table that holds the invites relation/edge.
	InvitesTable = "invites"
	// InvitesInverseTable is the table name for the Invite entity.
	// It exists in this package in order to avoid circular dependency with the "invite" package.
	InvitesInverseTable = "invites"
	// InvitesColumn is the table column denoting the invites relation/edge.
	InvitesColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldName,
	FieldJpgURL,
	FieldKey,
	FieldSecret,
	FieldPhone,
	FieldPassword,
	FieldIsFrozen,
	FieldIsRecharge,
	FieldUserType,
	FieldParentID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedBy holds the default value on creation for the "created_by" field.
	DefaultCreatedBy int64
	// DefaultUpdatedBy holds the default value on creation for the "updated_by" field.
	DefaultUpdatedBy int64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt time.Time
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// DefaultJpgURL holds the default value on creation for the "jpg_url" field.
	DefaultJpgURL string
	// DefaultKey holds the default value on creation for the "key" field.
	DefaultKey string
	// DefaultSecret holds the default value on creation for the "secret" field.
	DefaultSecret string
	// DefaultPhone holds the default value on creation for the "phone" field.
	DefaultPhone string
	// DefaultPassword holds the default value on creation for the "password" field.
	DefaultPassword string
	// DefaultIsFrozen holds the default value on creation for the "is_frozen" field.
	DefaultIsFrozen bool
	// DefaultIsRecharge holds the default value on creation for the "is_recharge" field.
	DefaultIsRecharge bool
	// DefaultParentID holds the default value on creation for the "parent_id" field.
	DefaultParentID int64
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
)

// UserType defines the type for the "user_type" enum field.
type UserType string

// UserTypePersonal is the default value of the UserType enum.
const DefaultUserType = UserTypePersonal

// UserType values.
const (
	UserTypePersonal   UserType = "personal"
	UserTypeEnterprise UserType = "enterprise"
)

func (ut UserType) String() string {
	return string(ut)
}

// UserTypeValidator is a validator for the "user_type" field enum values. It is called by the builders before save.
func UserTypeValidator(ut UserType) error {
	switch ut {
	case UserTypePersonal, UserTypeEnterprise:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for user_type field: %q", ut)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByJpgURL orders the results by the jpg_url field.
func ByJpgURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJpgURL, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// BySecret orders the results by the secret field.
func BySecret(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSecret, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByIsFrozen orders the results by the is_frozen field.
func ByIsFrozen(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsFrozen, opts...).ToFunc()
}

// ByIsRecharge orders the results by the is_recharge field.
func ByIsRecharge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsRecharge, opts...).ToFunc()
}

// ByUserType orders the results by the user_type field.
func ByUserType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserType, opts...).ToFunc()
}

// ByParentID orders the results by the parent_id field.
func ByParentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentID, opts...).ToFunc()
}

// ByVxAccountsCount orders the results by vx_accounts count.
func ByVxAccountsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVxAccountsStep(), opts...)
	}
}

// ByVxAccounts orders the results by vx_accounts terms.
func ByVxAccounts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVxAccountsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCollectsCount orders the results by collects count.
func ByCollectsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCollectsStep(), opts...)
	}
}

// ByCollects orders the results by collects terms.
func ByCollects(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCollectsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDevicesCount orders the results by devices count.
func ByDevicesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDevicesStep(), opts...)
	}
}

// ByDevices orders the results by devices terms.
func ByDevices(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDevicesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProfitSettingsCount orders the results by profit_settings count.
func ByProfitSettingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProfitSettingsStep(), opts...)
	}
}

// ByProfitSettings orders the results by profit_settings terms.
func ByProfitSettings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProfitSettingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCostAccountField orders the results by cost_account field.
func ByCostAccountField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCostAccountStep(), sql.OrderByField(field, opts...))
	}
}

// ByProfitAccountField orders the results by profit_account field.
func ByProfitAccountField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProfitAccountStep(), sql.OrderByField(field, opts...))
	}
}

// ByCostBillsCount orders the results by cost_bills count.
func ByCostBillsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCostBillsStep(), opts...)
	}
}

// ByCostBills orders the results by cost_bills terms.
func ByCostBills(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCostBillsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEarnBillsCount orders the results by earn_bills count.
func ByEarnBillsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEarnBillsStep(), opts...)
	}
}

// ByEarnBills orders the results by earn_bills terms.
func ByEarnBills(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEarnBillsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMissionConsumeOrdersCount orders the results by mission_consume_orders count.
func ByMissionConsumeOrdersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMissionConsumeOrdersStep(), opts...)
	}
}

// ByMissionConsumeOrders orders the results by mission_consume_orders terms.
func ByMissionConsumeOrders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMissionConsumeOrdersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMissionProduceOrdersCount orders the results by mission_produce_orders count.
func ByMissionProduceOrdersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMissionProduceOrdersStep(), opts...)
	}
}

// ByMissionProduceOrders orders the results by mission_produce_orders terms.
func ByMissionProduceOrders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMissionProduceOrdersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRechargeOrdersCount orders the results by recharge_orders count.
func ByRechargeOrdersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRechargeOrdersStep(), opts...)
	}
}

// ByRechargeOrders orders the results by recharge_orders terms.
func ByRechargeOrders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRechargeOrdersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByVxSocialsCount orders the results by vx_socials count.
func ByVxSocialsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVxSocialsStep(), opts...)
	}
}

// ByVxSocials orders the results by vx_socials terms.
func ByVxSocials(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVxSocialsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMissionBatchesCount orders the results by mission_batches count.
func ByMissionBatchesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMissionBatchesStep(), opts...)
	}
}

// ByMissionBatches orders the results by mission_batches terms.
func ByMissionBatches(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMissionBatchesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserDevicesCount orders the results by user_devices count.
func ByUserDevicesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserDevicesStep(), opts...)
	}
}

// ByUserDevices orders the results by user_devices terms.
func ByUserDevices(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserDevicesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByParentField orders the results by parent field.
func ByParentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParentStep(), sql.OrderByField(field, opts...))
	}
}

// ByChildrenCount orders the results by children count.
func ByChildrenCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChildrenStep(), opts...)
	}
}

// ByChildren orders the results by children terms.
func ByChildren(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChildrenStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInvitesCount orders the results by invites count.
func ByInvitesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInvitesStep(), opts...)
	}
}

// ByInvites orders the results by invites terms.
func ByInvites(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInvitesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newVxAccountsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VxAccountsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, VxAccountsTable, VxAccountsColumn),
	)
}
func newCollectsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CollectsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CollectsTable, CollectsColumn),
	)
}
func newDevicesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DevicesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DevicesTable, DevicesColumn),
	)
}
func newProfitSettingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProfitSettingsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProfitSettingsTable, ProfitSettingsColumn),
	)
}
func newCostAccountStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CostAccountInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, CostAccountTable, CostAccountColumn),
	)
}
func newProfitAccountStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProfitAccountInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ProfitAccountTable, ProfitAccountColumn),
	)
}
func newCostBillsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CostBillsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CostBillsTable, CostBillsColumn),
	)
}
func newEarnBillsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EarnBillsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EarnBillsTable, EarnBillsColumn),
	)
}
func newMissionConsumeOrdersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MissionConsumeOrdersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MissionConsumeOrdersTable, MissionConsumeOrdersColumn),
	)
}
func newMissionProduceOrdersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MissionProduceOrdersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MissionProduceOrdersTable, MissionProduceOrdersColumn),
	)
}
func newRechargeOrdersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RechargeOrdersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RechargeOrdersTable, RechargeOrdersColumn),
	)
}
func newVxSocialsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VxSocialsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, VxSocialsTable, VxSocialsColumn),
	)
}
func newMissionBatchesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MissionBatchesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MissionBatchesTable, MissionBatchesColumn),
	)
}
func newUserDevicesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserDevicesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserDevicesTable, UserDevicesColumn),
	)
}
func newParentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
	)
}
func newChildrenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
	)
}
func newInvitesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InvitesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, InvitesTable, InvitesColumn),
	)
}
