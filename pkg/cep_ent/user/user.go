// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldNickName holds the string denoting the nick_name field in the database.
	FieldNickName = "nick_name"
	// FieldJpgURL holds the string denoting the jpg_url field in the database.
	FieldJpgURL = "jpg_url"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldSecret holds the string denoting the secret field in the database.
	FieldSecret = "secret"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldIsFrozen holds the string denoting the is_frozen field in the database.
	FieldIsFrozen = "is_frozen"
	// FieldIsRecharge holds the string denoting the is_recharge field in the database.
	FieldIsRecharge = "is_recharge"
	// FieldUserType holds the string denoting the user_type field in the database.
	FieldUserType = "user_type"
	// FieldParentID holds the string denoting the parent_id field in the database.
	FieldParentID = "parent_id"
	// FieldAppletParentID holds the string denoting the applet_parent_id field in the database.
	FieldAppletParentID = "applet_parent_id"
	// FieldPopVersion holds the string denoting the pop_version field in the database.
	FieldPopVersion = "pop_version"
	// FieldAreaCode holds the string denoting the area_code field in the database.
	FieldAreaCode = "area_code"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldGithubID holds the string denoting the github_id field in the database.
	FieldGithubID = "github_id"
	// FieldCloudSpace holds the string denoting the cloud_space field in the database.
	FieldCloudSpace = "cloud_space"
	// FieldBaiduAccessToken holds the string denoting the baidu_access_token field in the database.
	FieldBaiduAccessToken = "baidu_access_token"
	// FieldBaiduRefreshToken holds the string denoting the baidu_refresh_token field in the database.
	FieldBaiduRefreshToken = "baidu_refresh_token"
	// FieldBoundAt holds the string denoting the bound_at field in the database.
	FieldBoundAt = "bound_at"
	// FieldUserStatus holds the string denoting the user_status field in the database.
	FieldUserStatus = "user_status"
	// FieldChannel holds the string denoting the channel field in the database.
	FieldChannel = "channel"
	// FieldChannelRatio holds the string denoting the channel_ratio field in the database.
	FieldChannelRatio = "channel_ratio"
	// EdgeVxAccounts holds the string denoting the vx_accounts edge name in mutations.
	EdgeVxAccounts = "vx_accounts"
	// EdgeCollects holds the string denoting the collects edge name in mutations.
	EdgeCollects = "collects"
	// EdgeDevices holds the string denoting the devices edge name in mutations.
	EdgeDevices = "devices"
	// EdgeProfitSettings holds the string denoting the profit_settings edge name in mutations.
	EdgeProfitSettings = "profit_settings"
	// EdgeCostAccount holds the string denoting the cost_account edge name in mutations.
	EdgeCostAccount = "cost_account"
	// EdgeProfitAccount holds the string denoting the profit_account edge name in mutations.
	EdgeProfitAccount = "profit_account"
	// EdgeCostBills holds the string denoting the cost_bills edge name in mutations.
	EdgeCostBills = "cost_bills"
	// EdgeEarnBills holds the string denoting the earn_bills edge name in mutations.
	EdgeEarnBills = "earn_bills"
	// EdgeMissionConsumeOrders holds the string denoting the mission_consume_orders edge name in mutations.
	EdgeMissionConsumeOrders = "mission_consume_orders"
	// EdgeMissionProduceOrders holds the string denoting the mission_produce_orders edge name in mutations.
	EdgeMissionProduceOrders = "mission_produce_orders"
	// EdgeRechargeOrders holds the string denoting the recharge_orders edge name in mutations.
	EdgeRechargeOrders = "recharge_orders"
	// EdgeVxSocials holds the string denoting the vx_socials edge name in mutations.
	EdgeVxSocials = "vx_socials"
	// EdgeMissionBatches holds the string denoting the mission_batches edge name in mutations.
	EdgeMissionBatches = "mission_batches"
	// EdgeUserDevices holds the string denoting the user_devices edge name in mutations.
	EdgeUserDevices = "user_devices"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeChildren holds the string denoting the children edge name in mutations.
	EdgeChildren = "children"
	// EdgeAppletParent holds the string denoting the applet_parent edge name in mutations.
	EdgeAppletParent = "applet_parent"
	// EdgeAppletChildren holds the string denoting the applet_children edge name in mutations.
	EdgeAppletChildren = "applet_children"
	// EdgeInvites holds the string denoting the invites edge name in mutations.
	EdgeInvites = "invites"
	// EdgeCampaignOrders holds the string denoting the campaign_orders edge name in mutations.
	EdgeCampaignOrders = "campaign_orders"
	// EdgeWallets holds the string denoting the wallets edge name in mutations.
	EdgeWallets = "wallets"
	// EdgeWithdrawAccount holds the string denoting the withdraw_account edge name in mutations.
	EdgeWithdrawAccount = "withdraw_account"
	// EdgeIncomeBills holds the string denoting the income_bills edge name in mutations.
	EdgeIncomeBills = "income_bills"
	// EdgeOutcomeBills holds the string denoting the outcome_bills edge name in mutations.
	EdgeOutcomeBills = "outcome_bills"
	// EdgeMissionProductions holds the string denoting the mission_productions edge name in mutations.
	EdgeMissionProductions = "mission_productions"
	// EdgeMissions holds the string denoting the missions edge name in mutations.
	EdgeMissions = "missions"
	// EdgeIncomeTransferOrders holds the string denoting the income_transfer_orders edge name in mutations.
	EdgeIncomeTransferOrders = "income_transfer_orders"
	// EdgeOutcomeTransferOrders holds the string denoting the outcome_transfer_orders edge name in mutations.
	EdgeOutcomeTransferOrders = "outcome_transfer_orders"
	// EdgeConsumeMissionOrders holds the string denoting the consume_mission_orders edge name in mutations.
	EdgeConsumeMissionOrders = "consume_mission_orders"
	// EdgeProduceMissionOrders holds the string denoting the produce_mission_orders edge name in mutations.
	EdgeProduceMissionOrders = "produce_mission_orders"
	// EdgeLoginRecords holds the string denoting the login_records edge name in mutations.
	EdgeLoginRecords = "login_records"
	// EdgeRenewalAgreements holds the string denoting the renewal_agreements edge name in mutations.
	EdgeRenewalAgreements = "renewal_agreements"
	// EdgeArtworks holds the string denoting the artworks edge name in mutations.
	EdgeArtworks = "artworks"
	// EdgeArtworkLikes holds the string denoting the artwork_likes edge name in mutations.
	EdgeArtworkLikes = "artwork_likes"
	// EdgeCdkInfos holds the string denoting the cdk_infos edge name in mutations.
	EdgeCdkInfos = "cdk_infos"
	// EdgeUseCdkInfos holds the string denoting the use_cdk_infos edge name in mutations.
	EdgeUseCdkInfos = "use_cdk_infos"
	// EdgeLottoRecords holds the string denoting the lotto_records edge name in mutations.
	EdgeLottoRecords = "lotto_records"
	// EdgeLottoUserCounts holds the string denoting the lotto_user_counts edge name in mutations.
	EdgeLottoUserCounts = "lotto_user_counts"
	// EdgeLottoGetCountRecords holds the string denoting the lotto_get_count_records edge name in mutations.
	EdgeLottoGetCountRecords = "lotto_get_count_records"
	// EdgeCloudFiles holds the string denoting the cloud_files edge name in mutations.
	EdgeCloudFiles = "cloud_files"
	// EdgeWithdrawRecords holds the string denoting the withdraw_records edge name in mutations.
	EdgeWithdrawRecords = "withdraw_records"
	// EdgeOperateWithdrawRecords holds the string denoting the operate_withdraw_records edge name in mutations.
	EdgeOperateWithdrawRecords = "operate_withdraw_records"
	// EdgeTroubleDeducts holds the string denoting the trouble_deducts edge name in mutations.
	EdgeTroubleDeducts = "trouble_deducts"
	// EdgeIncomeManages holds the string denoting the income_manages edge name in mutations.
	EdgeIncomeManages = "income_manages"
	// EdgeApproveIncomeManages holds the string denoting the approve_income_manages edge name in mutations.
	EdgeApproveIncomeManages = "approve_income_manages"
	// EdgeSurveyResponses holds the string denoting the survey_responses edge name in mutations.
	EdgeSurveyResponses = "survey_responses"
	// EdgeApproveSurveyResponses holds the string denoting the approve_survey_responses edge name in mutations.
	EdgeApproveSurveyResponses = "approve_survey_responses"
	// EdgeMissionFailedFeedbacks holds the string denoting the mission_failed_feedbacks edge name in mutations.
	EdgeMissionFailedFeedbacks = "mission_failed_feedbacks"
	// EdgeAPITokens holds the string denoting the api_tokens edge name in mutations.
	EdgeAPITokens = "api_tokens"
	// EdgeUserModels holds the string denoting the user_models edge name in mutations.
	EdgeUserModels = "user_models"
	// EdgeInvokeModelOrders holds the string denoting the invoke_model_orders edge name in mutations.
	EdgeInvokeModelOrders = "invoke_model_orders"
	// Table holds the table name of the user in the database.
	Table = "users"
	// VxAccountsTable is the table that holds the vx_accounts relation/edge.
	VxAccountsTable = "vx_accounts"
	// VxAccountsInverseTable is the table name for the VXAccount entity.
	// It exists in this package in order to avoid circular dependency with the "vxaccount" package.
	VxAccountsInverseTable = "vx_accounts"
	// VxAccountsColumn is the table column denoting the vx_accounts relation/edge.
	VxAccountsColumn = "user_id"
	// CollectsTable is the table that holds the collects relation/edge.
	CollectsTable = "collects"
	// CollectsInverseTable is the table name for the Collect entity.
	// It exists in this package in order to avoid circular dependency with the "collect" package.
	CollectsInverseTable = "collects"
	// CollectsColumn is the table column denoting the collects relation/edge.
	CollectsColumn = "user_id"
	// DevicesTable is the table that holds the devices relation/edge.
	DevicesTable = "devices"
	// DevicesInverseTable is the table name for the Device entity.
	// It exists in this package in order to avoid circular dependency with the "device" package.
	DevicesInverseTable = "devices"
	// DevicesColumn is the table column denoting the devices relation/edge.
	DevicesColumn = "user_id"
	// ProfitSettingsTable is the table that holds the profit_settings relation/edge.
	ProfitSettingsTable = "profit_settings"
	// ProfitSettingsInverseTable is the table name for the ProfitSetting entity.
	// It exists in this package in order to avoid circular dependency with the "profitsetting" package.
	ProfitSettingsInverseTable = "profit_settings"
	// ProfitSettingsColumn is the table column denoting the profit_settings relation/edge.
	ProfitSettingsColumn = "user_id"
	// CostAccountTable is the table that holds the cost_account relation/edge.
	CostAccountTable = "cost_accounts"
	// CostAccountInverseTable is the table name for the CostAccount entity.
	// It exists in this package in order to avoid circular dependency with the "costaccount" package.
	CostAccountInverseTable = "cost_accounts"
	// CostAccountColumn is the table column denoting the cost_account relation/edge.
	CostAccountColumn = "user_id"
	// ProfitAccountTable is the table that holds the profit_account relation/edge.
	ProfitAccountTable = "profit_accounts"
	// ProfitAccountInverseTable is the table name for the ProfitAccount entity.
	// It exists in this package in order to avoid circular dependency with the "profitaccount" package.
	ProfitAccountInverseTable = "profit_accounts"
	// ProfitAccountColumn is the table column denoting the profit_account relation/edge.
	ProfitAccountColumn = "user_id"
	// CostBillsTable is the table that holds the cost_bills relation/edge.
	CostBillsTable = "cost_bills"
	// CostBillsInverseTable is the table name for the CostBill entity.
	// It exists in this package in order to avoid circular dependency with the "costbill" package.
	CostBillsInverseTable = "cost_bills"
	// CostBillsColumn is the table column denoting the cost_bills relation/edge.
	CostBillsColumn = "user_id"
	// EarnBillsTable is the table that holds the earn_bills relation/edge.
	EarnBillsTable = "earn_bills"
	// EarnBillsInverseTable is the table name for the EarnBill entity.
	// It exists in this package in order to avoid circular dependency with the "earnbill" package.
	EarnBillsInverseTable = "earn_bills"
	// EarnBillsColumn is the table column denoting the earn_bills relation/edge.
	EarnBillsColumn = "user_id"
	// MissionConsumeOrdersTable is the table that holds the mission_consume_orders relation/edge.
	MissionConsumeOrdersTable = "mission_consume_orders"
	// MissionConsumeOrdersInverseTable is the table name for the MissionConsumeOrder entity.
	// It exists in this package in order to avoid circular dependency with the "missionconsumeorder" package.
	MissionConsumeOrdersInverseTable = "mission_consume_orders"
	// MissionConsumeOrdersColumn is the table column denoting the mission_consume_orders relation/edge.
	MissionConsumeOrdersColumn = "user_id"
	// MissionProduceOrdersTable is the table that holds the mission_produce_orders relation/edge.
	MissionProduceOrdersTable = "mission_produce_orders"
	// MissionProduceOrdersInverseTable is the table name for the MissionProduceOrder entity.
	// It exists in this package in order to avoid circular dependency with the "missionproduceorder" package.
	MissionProduceOrdersInverseTable = "mission_produce_orders"
	// MissionProduceOrdersColumn is the table column denoting the mission_produce_orders relation/edge.
	MissionProduceOrdersColumn = "user_id"
	// RechargeOrdersTable is the table that holds the recharge_orders relation/edge.
	RechargeOrdersTable = "recharge_orders"
	// RechargeOrdersInverseTable is the table name for the RechargeOrder entity.
	// It exists in this package in order to avoid circular dependency with the "rechargeorder" package.
	RechargeOrdersInverseTable = "recharge_orders"
	// RechargeOrdersColumn is the table column denoting the recharge_orders relation/edge.
	RechargeOrdersColumn = "user_id"
	// VxSocialsTable is the table that holds the vx_socials relation/edge.
	VxSocialsTable = "vx_socials"
	// VxSocialsInverseTable is the table name for the VXSocial entity.
	// It exists in this package in order to avoid circular dependency with the "vxsocial" package.
	VxSocialsInverseTable = "vx_socials"
	// VxSocialsColumn is the table column denoting the vx_socials relation/edge.
	VxSocialsColumn = "user_id"
	// MissionBatchesTable is the table that holds the mission_batches relation/edge.
	MissionBatchesTable = "mission_batches"
	// MissionBatchesInverseTable is the table name for the MissionBatch entity.
	// It exists in this package in order to avoid circular dependency with the "missionbatch" package.
	MissionBatchesInverseTable = "mission_batches"
	// MissionBatchesColumn is the table column denoting the mission_batches relation/edge.
	MissionBatchesColumn = "user_id"
	// UserDevicesTable is the table that holds the user_devices relation/edge.
	UserDevicesTable = "user_devices"
	// UserDevicesInverseTable is the table name for the UserDevice entity.
	// It exists in this package in order to avoid circular dependency with the "userdevice" package.
	UserDevicesInverseTable = "user_devices"
	// UserDevicesColumn is the table column denoting the user_devices relation/edge.
	UserDevicesColumn = "user_id"
	// ParentTable is the table that holds the parent relation/edge.
	ParentTable = "users"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "parent_id"
	// ChildrenTable is the table that holds the children relation/edge.
	ChildrenTable = "users"
	// ChildrenColumn is the table column denoting the children relation/edge.
	ChildrenColumn = "parent_id"
	// AppletParentTable is the table that holds the applet_parent relation/edge.
	AppletParentTable = "users"
	// AppletParentColumn is the table column denoting the applet_parent relation/edge.
	AppletParentColumn = "applet_parent_id"
	// AppletChildrenTable is the table that holds the applet_children relation/edge.
	AppletChildrenTable = "users"
	// AppletChildrenColumn is the table column denoting the applet_children relation/edge.
	AppletChildrenColumn = "applet_parent_id"
	// InvitesTable is the table that holds the invites relation/edge.
	InvitesTable = "invites"
	// InvitesInverseTable is the table name for the Invite entity.
	// It exists in this package in order to avoid circular dependency with the "invite" package.
	InvitesInverseTable = "invites"
	// InvitesColumn is the table column denoting the invites relation/edge.
	InvitesColumn = "user_id"
	// CampaignOrdersTable is the table that holds the campaign_orders relation/edge.
	CampaignOrdersTable = "campaign_orders"
	// CampaignOrdersInverseTable is the table name for the CampaignOrder entity.
	// It exists in this package in order to avoid circular dependency with the "campaignorder" package.
	CampaignOrdersInverseTable = "campaign_orders"
	// CampaignOrdersColumn is the table column denoting the campaign_orders relation/edge.
	CampaignOrdersColumn = "user_id"
	// WalletsTable is the table that holds the wallets relation/edge.
	WalletsTable = "wallets"
	// WalletsInverseTable is the table name for the Wallet entity.
	// It exists in this package in order to avoid circular dependency with the "wallet" package.
	WalletsInverseTable = "wallets"
	// WalletsColumn is the table column denoting the wallets relation/edge.
	WalletsColumn = "user_id"
	// WithdrawAccountTable is the table that holds the withdraw_account relation/edge.
	WithdrawAccountTable = "withdraw_accounts"
	// WithdrawAccountInverseTable is the table name for the WithdrawAccount entity.
	// It exists in this package in order to avoid circular dependency with the "withdrawaccount" package.
	WithdrawAccountInverseTable = "withdraw_accounts"
	// WithdrawAccountColumn is the table column denoting the withdraw_account relation/edge.
	WithdrawAccountColumn = "user_id"
	// IncomeBillsTable is the table that holds the income_bills relation/edge.
	IncomeBillsTable = "bills"
	// IncomeBillsInverseTable is the table name for the Bill entity.
	// It exists in this package in order to avoid circular dependency with the "bill" package.
	IncomeBillsInverseTable = "bills"
	// IncomeBillsColumn is the table column denoting the income_bills relation/edge.
	IncomeBillsColumn = "target_user_id"
	// OutcomeBillsTable is the table that holds the outcome_bills relation/edge.
	OutcomeBillsTable = "bills"
	// OutcomeBillsInverseTable is the table name for the Bill entity.
	// It exists in this package in order to avoid circular dependency with the "bill" package.
	OutcomeBillsInverseTable = "bills"
	// OutcomeBillsColumn is the table column denoting the outcome_bills relation/edge.
	OutcomeBillsColumn = "source_user_id"
	// MissionProductionsTable is the table that holds the mission_productions relation/edge.
	MissionProductionsTable = "mission_productions"
	// MissionProductionsInverseTable is the table name for the MissionProduction entity.
	// It exists in this package in order to avoid circular dependency with the "missionproduction" package.
	MissionProductionsInverseTable = "mission_productions"
	// MissionProductionsColumn is the table column denoting the mission_productions relation/edge.
	MissionProductionsColumn = "user_id"
	// MissionsTable is the table that holds the missions relation/edge.
	MissionsTable = "missions"
	// MissionsInverseTable is the table name for the Mission entity.
	// It exists in this package in order to avoid circular dependency with the "mission" package.
	MissionsInverseTable = "missions"
	// MissionsColumn is the table column denoting the missions relation/edge.
	MissionsColumn = "user_id"
	// IncomeTransferOrdersTable is the table that holds the income_transfer_orders relation/edge.
	IncomeTransferOrdersTable = "transfer_orders"
	// IncomeTransferOrdersInverseTable is the table name for the TransferOrder entity.
	// It exists in this package in order to avoid circular dependency with the "transferorder" package.
	IncomeTransferOrdersInverseTable = "transfer_orders"
	// IncomeTransferOrdersColumn is the table column denoting the income_transfer_orders relation/edge.
	IncomeTransferOrdersColumn = "target_user_id"
	// OutcomeTransferOrdersTable is the table that holds the outcome_transfer_orders relation/edge.
	OutcomeTransferOrdersTable = "transfer_orders"
	// OutcomeTransferOrdersInverseTable is the table name for the TransferOrder entity.
	// It exists in this package in order to avoid circular dependency with the "transferorder" package.
	OutcomeTransferOrdersInverseTable = "transfer_orders"
	// OutcomeTransferOrdersColumn is the table column denoting the outcome_transfer_orders relation/edge.
	OutcomeTransferOrdersColumn = "source_user_id"
	// ConsumeMissionOrdersTable is the table that holds the consume_mission_orders relation/edge.
	ConsumeMissionOrdersTable = "mission_orders"
	// ConsumeMissionOrdersInverseTable is the table name for the MissionOrder entity.
	// It exists in this package in order to avoid circular dependency with the "missionorder" package.
	ConsumeMissionOrdersInverseTable = "mission_orders"
	// ConsumeMissionOrdersColumn is the table column denoting the consume_mission_orders relation/edge.
	ConsumeMissionOrdersColumn = "consume_user_id"
	// ProduceMissionOrdersTable is the table that holds the produce_mission_orders relation/edge.
	ProduceMissionOrdersTable = "mission_orders"
	// ProduceMissionOrdersInverseTable is the table name for the MissionOrder entity.
	// It exists in this package in order to avoid circular dependency with the "missionorder" package.
	ProduceMissionOrdersInverseTable = "mission_orders"
	// ProduceMissionOrdersColumn is the table column denoting the produce_mission_orders relation/edge.
	ProduceMissionOrdersColumn = "produce_user_id"
	// LoginRecordsTable is the table that holds the login_records relation/edge.
	LoginRecordsTable = "login_records"
	// LoginRecordsInverseTable is the table name for the LoginRecord entity.
	// It exists in this package in order to avoid circular dependency with the "loginrecord" package.
	LoginRecordsInverseTable = "login_records"
	// LoginRecordsColumn is the table column denoting the login_records relation/edge.
	LoginRecordsColumn = "user_id"
	// RenewalAgreementsTable is the table that holds the renewal_agreements relation/edge.
	RenewalAgreementsTable = "renewal_agreements"
	// RenewalAgreementsInverseTable is the table name for the RenewalAgreement entity.
	// It exists in this package in order to avoid circular dependency with the "renewalagreement" package.
	RenewalAgreementsInverseTable = "renewal_agreements"
	// RenewalAgreementsColumn is the table column denoting the renewal_agreements relation/edge.
	RenewalAgreementsColumn = "user_id"
	// ArtworksTable is the table that holds the artworks relation/edge.
	ArtworksTable = "artworks"
	// ArtworksInverseTable is the table name for the Artwork entity.
	// It exists in this package in order to avoid circular dependency with the "artwork" package.
	ArtworksInverseTable = "artworks"
	// ArtworksColumn is the table column denoting the artworks relation/edge.
	ArtworksColumn = "author_id"
	// ArtworkLikesTable is the table that holds the artwork_likes relation/edge.
	ArtworkLikesTable = "artwork_likes"
	// ArtworkLikesInverseTable is the table name for the ArtworkLike entity.
	// It exists in this package in order to avoid circular dependency with the "artworklike" package.
	ArtworkLikesInverseTable = "artwork_likes"
	// ArtworkLikesColumn is the table column denoting the artwork_likes relation/edge.
	ArtworkLikesColumn = "user_id"
	// CdkInfosTable is the table that holds the cdk_infos relation/edge.
	CdkInfosTable = "cdk_infos"
	// CdkInfosInverseTable is the table name for the CDKInfo entity.
	// It exists in this package in order to avoid circular dependency with the "cdkinfo" package.
	CdkInfosInverseTable = "cdk_infos"
	// CdkInfosColumn is the table column denoting the cdk_infos relation/edge.
	CdkInfosColumn = "issue_user_id"
	// UseCdkInfosTable is the table that holds the use_cdk_infos relation/edge.
	UseCdkInfosTable = "cdk_infos"
	// UseCdkInfosInverseTable is the table name for the CDKInfo entity.
	// It exists in this package in order to avoid circular dependency with the "cdkinfo" package.
	UseCdkInfosInverseTable = "cdk_infos"
	// UseCdkInfosColumn is the table column denoting the use_cdk_infos relation/edge.
	UseCdkInfosColumn = "use_user_id"
	// LottoRecordsTable is the table that holds the lotto_records relation/edge.
	LottoRecordsTable = "lotto_records"
	// LottoRecordsInverseTable is the table name for the LottoRecord entity.
	// It exists in this package in order to avoid circular dependency with the "lottorecord" package.
	LottoRecordsInverseTable = "lotto_records"
	// LottoRecordsColumn is the table column denoting the lotto_records relation/edge.
	LottoRecordsColumn = "user_id"
	// LottoUserCountsTable is the table that holds the lotto_user_counts relation/edge.
	LottoUserCountsTable = "lotto_user_counts"
	// LottoUserCountsInverseTable is the table name for the LottoUserCount entity.
	// It exists in this package in order to avoid circular dependency with the "lottousercount" package.
	LottoUserCountsInverseTable = "lotto_user_counts"
	// LottoUserCountsColumn is the table column denoting the lotto_user_counts relation/edge.
	LottoUserCountsColumn = "user_id"
	// LottoGetCountRecordsTable is the table that holds the lotto_get_count_records relation/edge.
	LottoGetCountRecordsTable = "lotto_get_count_records"
	// LottoGetCountRecordsInverseTable is the table name for the LottoGetCountRecord entity.
	// It exists in this package in order to avoid circular dependency with the "lottogetcountrecord" package.
	LottoGetCountRecordsInverseTable = "lotto_get_count_records"
	// LottoGetCountRecordsColumn is the table column denoting the lotto_get_count_records relation/edge.
	LottoGetCountRecordsColumn = "user_id"
	// CloudFilesTable is the table that holds the cloud_files relation/edge.
	CloudFilesTable = "cloud_files"
	// CloudFilesInverseTable is the table name for the CloudFile entity.
	// It exists in this package in order to avoid circular dependency with the "cloudfile" package.
	CloudFilesInverseTable = "cloud_files"
	// CloudFilesColumn is the table column denoting the cloud_files relation/edge.
	CloudFilesColumn = "user_id"
	// WithdrawRecordsTable is the table that holds the withdraw_records relation/edge.
	WithdrawRecordsTable = "withdraw_records"
	// WithdrawRecordsInverseTable is the table name for the WithdrawRecord entity.
	// It exists in this package in order to avoid circular dependency with the "withdrawrecord" package.
	WithdrawRecordsInverseTable = "withdraw_records"
	// WithdrawRecordsColumn is the table column denoting the withdraw_records relation/edge.
	WithdrawRecordsColumn = "user_id"
	// OperateWithdrawRecordsTable is the table that holds the operate_withdraw_records relation/edge.
	OperateWithdrawRecordsTable = "withdraw_records"
	// OperateWithdrawRecordsInverseTable is the table name for the WithdrawRecord entity.
	// It exists in this package in order to avoid circular dependency with the "withdrawrecord" package.
	OperateWithdrawRecordsInverseTable = "withdraw_records"
	// OperateWithdrawRecordsColumn is the table column denoting the operate_withdraw_records relation/edge.
	OperateWithdrawRecordsColumn = "operate_user_id"
	// TroubleDeductsTable is the table that holds the trouble_deducts relation/edge.
	TroubleDeductsTable = "trouble_deducts"
	// TroubleDeductsInverseTable is the table name for the TroubleDeduct entity.
	// It exists in this package in order to avoid circular dependency with the "troublededuct" package.
	TroubleDeductsInverseTable = "trouble_deducts"
	// TroubleDeductsColumn is the table column denoting the trouble_deducts relation/edge.
	TroubleDeductsColumn = "user_id"
	// IncomeManagesTable is the table that holds the income_manages relation/edge.
	IncomeManagesTable = "income_manages"
	// IncomeManagesInverseTable is the table name for the IncomeManage entity.
	// It exists in this package in order to avoid circular dependency with the "incomemanage" package.
	IncomeManagesInverseTable = "income_manages"
	// IncomeManagesColumn is the table column denoting the income_manages relation/edge.
	IncomeManagesColumn = "user_id"
	// ApproveIncomeManagesTable is the table that holds the approve_income_manages relation/edge.
	ApproveIncomeManagesTable = "income_manages"
	// ApproveIncomeManagesInverseTable is the table name for the IncomeManage entity.
	// It exists in this package in order to avoid circular dependency with the "incomemanage" package.
	ApproveIncomeManagesInverseTable = "income_manages"
	// ApproveIncomeManagesColumn is the table column denoting the approve_income_manages relation/edge.
	ApproveIncomeManagesColumn = "approve_user_id"
	// SurveyResponsesTable is the table that holds the survey_responses relation/edge.
	SurveyResponsesTable = "survey_responses"
	// SurveyResponsesInverseTable is the table name for the SurveyResponse entity.
	// It exists in this package in order to avoid circular dependency with the "surveyresponse" package.
	SurveyResponsesInverseTable = "survey_responses"
	// SurveyResponsesColumn is the table column denoting the survey_responses relation/edge.
	SurveyResponsesColumn = "user_id"
	// ApproveSurveyResponsesTable is the table that holds the approve_survey_responses relation/edge.
	ApproveSurveyResponsesTable = "survey_responses"
	// ApproveSurveyResponsesInverseTable is the table name for the SurveyResponse entity.
	// It exists in this package in order to avoid circular dependency with the "surveyresponse" package.
	ApproveSurveyResponsesInverseTable = "survey_responses"
	// ApproveSurveyResponsesColumn is the table column denoting the approve_survey_responses relation/edge.
	ApproveSurveyResponsesColumn = "approved_by"
	// MissionFailedFeedbacksTable is the table that holds the mission_failed_feedbacks relation/edge.
	MissionFailedFeedbacksTable = "mission_failed_feedbacks"
	// MissionFailedFeedbacksInverseTable is the table name for the MissionFailedFeedback entity.
	// It exists in this package in order to avoid circular dependency with the "missionfailedfeedback" package.
	MissionFailedFeedbacksInverseTable = "mission_failed_feedbacks"
	// MissionFailedFeedbacksColumn is the table column denoting the mission_failed_feedbacks relation/edge.
	MissionFailedFeedbacksColumn = "user_id"
	// APITokensTable is the table that holds the api_tokens relation/edge.
	APITokensTable = "api_tokens"
	// APITokensInverseTable is the table name for the ApiToken entity.
	// It exists in this package in order to avoid circular dependency with the "apitoken" package.
	APITokensInverseTable = "api_tokens"
	// APITokensColumn is the table column denoting the api_tokens relation/edge.
	APITokensColumn = "user_id"
	// UserModelsTable is the table that holds the user_models relation/edge.
	UserModelsTable = "user_models"
	// UserModelsInverseTable is the table name for the UserModel entity.
	// It exists in this package in order to avoid circular dependency with the "usermodel" package.
	UserModelsInverseTable = "user_models"
	// UserModelsColumn is the table column denoting the user_models relation/edge.
	UserModelsColumn = "user_id"
	// InvokeModelOrdersTable is the table that holds the invoke_model_orders relation/edge.
	InvokeModelOrdersTable = "invoke_model_orders"
	// InvokeModelOrdersInverseTable is the table name for the InvokeModelOrder entity.
	// It exists in this package in order to avoid circular dependency with the "invokemodelorder" package.
	InvokeModelOrdersInverseTable = "invoke_model_orders"
	// InvokeModelOrdersColumn is the table column denoting the invoke_model_orders relation/edge.
	InvokeModelOrdersColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldName,
	FieldNickName,
	FieldJpgURL,
	FieldKey,
	FieldSecret,
	FieldPhone,
	FieldPassword,
	FieldIsFrozen,
	FieldIsRecharge,
	FieldUserType,
	FieldParentID,
	FieldAppletParentID,
	FieldPopVersion,
	FieldAreaCode,
	FieldEmail,
	FieldGithubID,
	FieldCloudSpace,
	FieldBaiduAccessToken,
	FieldBaiduRefreshToken,
	FieldBoundAt,
	FieldUserStatus,
	FieldChannel,
	FieldChannelRatio,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedBy holds the default value on creation for the "created_by" field.
	DefaultCreatedBy int64
	// DefaultUpdatedBy holds the default value on creation for the "updated_by" field.
	DefaultUpdatedBy int64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt time.Time
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// DefaultNickName holds the default value on creation for the "nick_name" field.
	DefaultNickName string
	// DefaultJpgURL holds the default value on creation for the "jpg_url" field.
	DefaultJpgURL string
	// DefaultKey holds the default value on creation for the "key" field.
	DefaultKey string
	// DefaultSecret holds the default value on creation for the "secret" field.
	DefaultSecret string
	// DefaultPhone holds the default value on creation for the "phone" field.
	DefaultPhone string
	// DefaultPassword holds the default value on creation for the "password" field.
	DefaultPassword string
	// DefaultIsFrozen holds the default value on creation for the "is_frozen" field.
	DefaultIsFrozen bool
	// DefaultIsRecharge holds the default value on creation for the "is_recharge" field.
	DefaultIsRecharge bool
	// DefaultParentID holds the default value on creation for the "parent_id" field.
	DefaultParentID int64
	// DefaultAppletParentID holds the default value on creation for the "applet_parent_id" field.
	DefaultAppletParentID int64
	// DefaultPopVersion holds the default value on creation for the "pop_version" field.
	DefaultPopVersion string
	// DefaultAreaCode holds the default value on creation for the "area_code" field.
	DefaultAreaCode string
	// DefaultEmail holds the default value on creation for the "email" field.
	DefaultEmail string
	// DefaultGithubID holds the default value on creation for the "github_id" field.
	DefaultGithubID int64
	// DefaultCloudSpace holds the default value on creation for the "cloud_space" field.
	DefaultCloudSpace int64
	// DefaultBaiduAccessToken holds the default value on creation for the "baidu_access_token" field.
	DefaultBaiduAccessToken string
	// DefaultBaiduRefreshToken holds the default value on creation for the "baidu_refresh_token" field.
	DefaultBaiduRefreshToken string
	// DefaultBoundAt holds the default value on creation for the "bound_at" field.
	DefaultBoundAt time.Time
	// DefaultChannelRatio holds the default value on creation for the "channel_ratio" field.
	DefaultChannelRatio int64
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
)

const DefaultUserType enums.UserType = "personal"

// UserTypeValidator is a validator for the "user_type" field enum values. It is called by the builders before save.
func UserTypeValidator(ut enums.UserType) error {
	switch ut {
	case "personal", "enterprise", "admin", "boss", "admin_read_only", "opencl":
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for user_type field: %q", ut)
	}
}

const DefaultUserStatus enums.UserStatus = "normal"

// UserStatusValidator is a validator for the "user_status" field enum values. It is called by the builders before save.
func UserStatusValidator(us enums.UserStatus) error {
	switch us {
	case "normal", "frozen", "closed":
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for user_status field: %q", us)
	}
}

const DefaultChannel enums.UserChannelType = "no_channel"

// ChannelValidator is a validator for the "channel" field enum values. It is called by the builders before save.
func ChannelValidator(c enums.UserChannelType) error {
	switch c {
	case "no_channel", "normal_channel":
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for channel field: %q", c)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByNickName orders the results by the nick_name field.
func ByNickName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNickName, opts...).ToFunc()
}

// ByJpgURL orders the results by the jpg_url field.
func ByJpgURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJpgURL, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// BySecret orders the results by the secret field.
func BySecret(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSecret, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByIsFrozen orders the results by the is_frozen field.
func ByIsFrozen(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsFrozen, opts...).ToFunc()
}

// ByIsRecharge orders the results by the is_recharge field.
func ByIsRecharge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsRecharge, opts...).ToFunc()
}

// ByUserType orders the results by the user_type field.
func ByUserType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserType, opts...).ToFunc()
}

// ByParentID orders the results by the parent_id field.
func ByParentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentID, opts...).ToFunc()
}

// ByAppletParentID orders the results by the applet_parent_id field.
func ByAppletParentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppletParentID, opts...).ToFunc()
}

// ByPopVersion orders the results by the pop_version field.
func ByPopVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPopVersion, opts...).ToFunc()
}

// ByAreaCode orders the results by the area_code field.
func ByAreaCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAreaCode, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByGithubID orders the results by the github_id field.
func ByGithubID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGithubID, opts...).ToFunc()
}

// ByCloudSpace orders the results by the cloud_space field.
func ByCloudSpace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCloudSpace, opts...).ToFunc()
}

// ByBaiduAccessToken orders the results by the baidu_access_token field.
func ByBaiduAccessToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBaiduAccessToken, opts...).ToFunc()
}

// ByBaiduRefreshToken orders the results by the baidu_refresh_token field.
func ByBaiduRefreshToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBaiduRefreshToken, opts...).ToFunc()
}

// ByBoundAt orders the results by the bound_at field.
func ByBoundAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBoundAt, opts...).ToFunc()
}

// ByUserStatus orders the results by the user_status field.
func ByUserStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserStatus, opts...).ToFunc()
}

// ByChannel orders the results by the channel field.
func ByChannel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChannel, opts...).ToFunc()
}

// ByChannelRatio orders the results by the channel_ratio field.
func ByChannelRatio(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChannelRatio, opts...).ToFunc()
}

// ByVxAccountsCount orders the results by vx_accounts count.
func ByVxAccountsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVxAccountsStep(), opts...)
	}
}

// ByVxAccounts orders the results by vx_accounts terms.
func ByVxAccounts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVxAccountsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCollectsCount orders the results by collects count.
func ByCollectsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCollectsStep(), opts...)
	}
}

// ByCollects orders the results by collects terms.
func ByCollects(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCollectsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDevicesCount orders the results by devices count.
func ByDevicesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDevicesStep(), opts...)
	}
}

// ByDevices orders the results by devices terms.
func ByDevices(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDevicesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProfitSettingsCount orders the results by profit_settings count.
func ByProfitSettingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProfitSettingsStep(), opts...)
	}
}

// ByProfitSettings orders the results by profit_settings terms.
func ByProfitSettings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProfitSettingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCostAccountField orders the results by cost_account field.
func ByCostAccountField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCostAccountStep(), sql.OrderByField(field, opts...))
	}
}

// ByProfitAccountField orders the results by profit_account field.
func ByProfitAccountField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProfitAccountStep(), sql.OrderByField(field, opts...))
	}
}

// ByCostBillsCount orders the results by cost_bills count.
func ByCostBillsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCostBillsStep(), opts...)
	}
}

// ByCostBills orders the results by cost_bills terms.
func ByCostBills(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCostBillsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEarnBillsCount orders the results by earn_bills count.
func ByEarnBillsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEarnBillsStep(), opts...)
	}
}

// ByEarnBills orders the results by earn_bills terms.
func ByEarnBills(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEarnBillsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMissionConsumeOrdersCount orders the results by mission_consume_orders count.
func ByMissionConsumeOrdersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMissionConsumeOrdersStep(), opts...)
	}
}

// ByMissionConsumeOrders orders the results by mission_consume_orders terms.
func ByMissionConsumeOrders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMissionConsumeOrdersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMissionProduceOrdersCount orders the results by mission_produce_orders count.
func ByMissionProduceOrdersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMissionProduceOrdersStep(), opts...)
	}
}

// ByMissionProduceOrders orders the results by mission_produce_orders terms.
func ByMissionProduceOrders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMissionProduceOrdersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRechargeOrdersCount orders the results by recharge_orders count.
func ByRechargeOrdersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRechargeOrdersStep(), opts...)
	}
}

// ByRechargeOrders orders the results by recharge_orders terms.
func ByRechargeOrders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRechargeOrdersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByVxSocialsCount orders the results by vx_socials count.
func ByVxSocialsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVxSocialsStep(), opts...)
	}
}

// ByVxSocials orders the results by vx_socials terms.
func ByVxSocials(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVxSocialsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMissionBatchesCount orders the results by mission_batches count.
func ByMissionBatchesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMissionBatchesStep(), opts...)
	}
}

// ByMissionBatches orders the results by mission_batches terms.
func ByMissionBatches(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMissionBatchesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserDevicesCount orders the results by user_devices count.
func ByUserDevicesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserDevicesStep(), opts...)
	}
}

// ByUserDevices orders the results by user_devices terms.
func ByUserDevices(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserDevicesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByParentField orders the results by parent field.
func ByParentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParentStep(), sql.OrderByField(field, opts...))
	}
}

// ByChildrenCount orders the results by children count.
func ByChildrenCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChildrenStep(), opts...)
	}
}

// ByChildren orders the results by children terms.
func ByChildren(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChildrenStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAppletParentField orders the results by applet_parent field.
func ByAppletParentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAppletParentStep(), sql.OrderByField(field, opts...))
	}
}

// ByAppletChildrenCount orders the results by applet_children count.
func ByAppletChildrenCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAppletChildrenStep(), opts...)
	}
}

// ByAppletChildren orders the results by applet_children terms.
func ByAppletChildren(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAppletChildrenStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInvitesCount orders the results by invites count.
func ByInvitesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInvitesStep(), opts...)
	}
}

// ByInvites orders the results by invites terms.
func ByInvites(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInvitesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCampaignOrdersCount orders the results by campaign_orders count.
func ByCampaignOrdersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCampaignOrdersStep(), opts...)
	}
}

// ByCampaignOrders orders the results by campaign_orders terms.
func ByCampaignOrders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCampaignOrdersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWalletsCount orders the results by wallets count.
func ByWalletsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWalletsStep(), opts...)
	}
}

// ByWallets orders the results by wallets terms.
func ByWallets(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWalletsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWithdrawAccountField orders the results by withdraw_account field.
func ByWithdrawAccountField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWithdrawAccountStep(), sql.OrderByField(field, opts...))
	}
}

// ByIncomeBillsCount orders the results by income_bills count.
func ByIncomeBillsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIncomeBillsStep(), opts...)
	}
}

// ByIncomeBills orders the results by income_bills terms.
func ByIncomeBills(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIncomeBillsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOutcomeBillsCount orders the results by outcome_bills count.
func ByOutcomeBillsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOutcomeBillsStep(), opts...)
	}
}

// ByOutcomeBills orders the results by outcome_bills terms.
func ByOutcomeBills(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOutcomeBillsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMissionProductionsCount orders the results by mission_productions count.
func ByMissionProductionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMissionProductionsStep(), opts...)
	}
}

// ByMissionProductions orders the results by mission_productions terms.
func ByMissionProductions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMissionProductionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMissionsCount orders the results by missions count.
func ByMissionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMissionsStep(), opts...)
	}
}

// ByMissions orders the results by missions terms.
func ByMissions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMissionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIncomeTransferOrdersCount orders the results by income_transfer_orders count.
func ByIncomeTransferOrdersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIncomeTransferOrdersStep(), opts...)
	}
}

// ByIncomeTransferOrders orders the results by income_transfer_orders terms.
func ByIncomeTransferOrders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIncomeTransferOrdersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOutcomeTransferOrdersCount orders the results by outcome_transfer_orders count.
func ByOutcomeTransferOrdersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOutcomeTransferOrdersStep(), opts...)
	}
}

// ByOutcomeTransferOrders orders the results by outcome_transfer_orders terms.
func ByOutcomeTransferOrders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOutcomeTransferOrdersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByConsumeMissionOrdersCount orders the results by consume_mission_orders count.
func ByConsumeMissionOrdersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newConsumeMissionOrdersStep(), opts...)
	}
}

// ByConsumeMissionOrders orders the results by consume_mission_orders terms.
func ByConsumeMissionOrders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConsumeMissionOrdersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProduceMissionOrdersCount orders the results by produce_mission_orders count.
func ByProduceMissionOrdersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProduceMissionOrdersStep(), opts...)
	}
}

// ByProduceMissionOrders orders the results by produce_mission_orders terms.
func ByProduceMissionOrders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProduceMissionOrdersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLoginRecordsCount orders the results by login_records count.
func ByLoginRecordsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLoginRecordsStep(), opts...)
	}
}

// ByLoginRecords orders the results by login_records terms.
func ByLoginRecords(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLoginRecordsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRenewalAgreementsCount orders the results by renewal_agreements count.
func ByRenewalAgreementsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRenewalAgreementsStep(), opts...)
	}
}

// ByRenewalAgreements orders the results by renewal_agreements terms.
func ByRenewalAgreements(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRenewalAgreementsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByArtworksCount orders the results by artworks count.
func ByArtworksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newArtworksStep(), opts...)
	}
}

// ByArtworks orders the results by artworks terms.
func ByArtworks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newArtworksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByArtworkLikesCount orders the results by artwork_likes count.
func ByArtworkLikesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newArtworkLikesStep(), opts...)
	}
}

// ByArtworkLikes orders the results by artwork_likes terms.
func ByArtworkLikes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newArtworkLikesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCdkInfosCount orders the results by cdk_infos count.
func ByCdkInfosCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCdkInfosStep(), opts...)
	}
}

// ByCdkInfos orders the results by cdk_infos terms.
func ByCdkInfos(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCdkInfosStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUseCdkInfosCount orders the results by use_cdk_infos count.
func ByUseCdkInfosCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUseCdkInfosStep(), opts...)
	}
}

// ByUseCdkInfos orders the results by use_cdk_infos terms.
func ByUseCdkInfos(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUseCdkInfosStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLottoRecordsCount orders the results by lotto_records count.
func ByLottoRecordsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLottoRecordsStep(), opts...)
	}
}

// ByLottoRecords orders the results by lotto_records terms.
func ByLottoRecords(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLottoRecordsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLottoUserCountsCount orders the results by lotto_user_counts count.
func ByLottoUserCountsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLottoUserCountsStep(), opts...)
	}
}

// ByLottoUserCounts orders the results by lotto_user_counts terms.
func ByLottoUserCounts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLottoUserCountsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLottoGetCountRecordsCount orders the results by lotto_get_count_records count.
func ByLottoGetCountRecordsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLottoGetCountRecordsStep(), opts...)
	}
}

// ByLottoGetCountRecords orders the results by lotto_get_count_records terms.
func ByLottoGetCountRecords(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLottoGetCountRecordsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCloudFilesCount orders the results by cloud_files count.
func ByCloudFilesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCloudFilesStep(), opts...)
	}
}

// ByCloudFiles orders the results by cloud_files terms.
func ByCloudFiles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCloudFilesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWithdrawRecordsCount orders the results by withdraw_records count.
func ByWithdrawRecordsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWithdrawRecordsStep(), opts...)
	}
}

// ByWithdrawRecords orders the results by withdraw_records terms.
func ByWithdrawRecords(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWithdrawRecordsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOperateWithdrawRecordsCount orders the results by operate_withdraw_records count.
func ByOperateWithdrawRecordsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOperateWithdrawRecordsStep(), opts...)
	}
}

// ByOperateWithdrawRecords orders the results by operate_withdraw_records terms.
func ByOperateWithdrawRecords(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOperateWithdrawRecordsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTroubleDeductsCount orders the results by trouble_deducts count.
func ByTroubleDeductsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTroubleDeductsStep(), opts...)
	}
}

// ByTroubleDeducts orders the results by trouble_deducts terms.
func ByTroubleDeducts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTroubleDeductsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIncomeManagesCount orders the results by income_manages count.
func ByIncomeManagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIncomeManagesStep(), opts...)
	}
}

// ByIncomeManages orders the results by income_manages terms.
func ByIncomeManages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIncomeManagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByApproveIncomeManagesCount orders the results by approve_income_manages count.
func ByApproveIncomeManagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newApproveIncomeManagesStep(), opts...)
	}
}

// ByApproveIncomeManages orders the results by approve_income_manages terms.
func ByApproveIncomeManages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApproveIncomeManagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySurveyResponsesCount orders the results by survey_responses count.
func BySurveyResponsesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSurveyResponsesStep(), opts...)
	}
}

// BySurveyResponses orders the results by survey_responses terms.
func BySurveyResponses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSurveyResponsesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByApproveSurveyResponsesCount orders the results by approve_survey_responses count.
func ByApproveSurveyResponsesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newApproveSurveyResponsesStep(), opts...)
	}
}

// ByApproveSurveyResponses orders the results by approve_survey_responses terms.
func ByApproveSurveyResponses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApproveSurveyResponsesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMissionFailedFeedbacksCount orders the results by mission_failed_feedbacks count.
func ByMissionFailedFeedbacksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMissionFailedFeedbacksStep(), opts...)
	}
}

// ByMissionFailedFeedbacks orders the results by mission_failed_feedbacks terms.
func ByMissionFailedFeedbacks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMissionFailedFeedbacksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAPITokensCount orders the results by api_tokens count.
func ByAPITokensCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAPITokensStep(), opts...)
	}
}

// ByAPITokens orders the results by api_tokens terms.
func ByAPITokens(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAPITokensStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserModelsCount orders the results by user_models count.
func ByUserModelsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserModelsStep(), opts...)
	}
}

// ByUserModels orders the results by user_models terms.
func ByUserModels(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserModelsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInvokeModelOrdersCount orders the results by invoke_model_orders count.
func ByInvokeModelOrdersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInvokeModelOrdersStep(), opts...)
	}
}

// ByInvokeModelOrders orders the results by invoke_model_orders terms.
func ByInvokeModelOrders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInvokeModelOrdersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newVxAccountsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VxAccountsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, VxAccountsTable, VxAccountsColumn),
	)
}
func newCollectsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CollectsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CollectsTable, CollectsColumn),
	)
}
func newDevicesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DevicesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DevicesTable, DevicesColumn),
	)
}
func newProfitSettingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProfitSettingsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProfitSettingsTable, ProfitSettingsColumn),
	)
}
func newCostAccountStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CostAccountInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, CostAccountTable, CostAccountColumn),
	)
}
func newProfitAccountStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProfitAccountInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ProfitAccountTable, ProfitAccountColumn),
	)
}
func newCostBillsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CostBillsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CostBillsTable, CostBillsColumn),
	)
}
func newEarnBillsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EarnBillsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EarnBillsTable, EarnBillsColumn),
	)
}
func newMissionConsumeOrdersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MissionConsumeOrdersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MissionConsumeOrdersTable, MissionConsumeOrdersColumn),
	)
}
func newMissionProduceOrdersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MissionProduceOrdersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MissionProduceOrdersTable, MissionProduceOrdersColumn),
	)
}
func newRechargeOrdersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RechargeOrdersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RechargeOrdersTable, RechargeOrdersColumn),
	)
}
func newVxSocialsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VxSocialsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, VxSocialsTable, VxSocialsColumn),
	)
}
func newMissionBatchesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MissionBatchesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MissionBatchesTable, MissionBatchesColumn),
	)
}
func newUserDevicesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserDevicesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserDevicesTable, UserDevicesColumn),
	)
}
func newParentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
	)
}
func newChildrenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
	)
}
func newAppletParentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AppletParentTable, AppletParentColumn),
	)
}
func newAppletChildrenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AppletChildrenTable, AppletChildrenColumn),
	)
}
func newInvitesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InvitesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, InvitesTable, InvitesColumn),
	)
}
func newCampaignOrdersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CampaignOrdersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CampaignOrdersTable, CampaignOrdersColumn),
	)
}
func newWalletsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WalletsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, WalletsTable, WalletsColumn),
	)
}
func newWithdrawAccountStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WithdrawAccountInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, WithdrawAccountTable, WithdrawAccountColumn),
	)
}
func newIncomeBillsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IncomeBillsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, IncomeBillsTable, IncomeBillsColumn),
	)
}
func newOutcomeBillsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OutcomeBillsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OutcomeBillsTable, OutcomeBillsColumn),
	)
}
func newMissionProductionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MissionProductionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MissionProductionsTable, MissionProductionsColumn),
	)
}
func newMissionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MissionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MissionsTable, MissionsColumn),
	)
}
func newIncomeTransferOrdersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IncomeTransferOrdersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, IncomeTransferOrdersTable, IncomeTransferOrdersColumn),
	)
}
func newOutcomeTransferOrdersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OutcomeTransferOrdersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OutcomeTransferOrdersTable, OutcomeTransferOrdersColumn),
	)
}
func newConsumeMissionOrdersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConsumeMissionOrdersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ConsumeMissionOrdersTable, ConsumeMissionOrdersColumn),
	)
}
func newProduceMissionOrdersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProduceMissionOrdersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProduceMissionOrdersTable, ProduceMissionOrdersColumn),
	)
}
func newLoginRecordsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LoginRecordsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LoginRecordsTable, LoginRecordsColumn),
	)
}
func newRenewalAgreementsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RenewalAgreementsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RenewalAgreementsTable, RenewalAgreementsColumn),
	)
}
func newArtworksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ArtworksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ArtworksTable, ArtworksColumn),
	)
}
func newArtworkLikesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ArtworkLikesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ArtworkLikesTable, ArtworkLikesColumn),
	)
}
func newCdkInfosStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CdkInfosInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CdkInfosTable, CdkInfosColumn),
	)
}
func newUseCdkInfosStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UseCdkInfosInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UseCdkInfosTable, UseCdkInfosColumn),
	)
}
func newLottoRecordsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LottoRecordsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LottoRecordsTable, LottoRecordsColumn),
	)
}
func newLottoUserCountsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LottoUserCountsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LottoUserCountsTable, LottoUserCountsColumn),
	)
}
func newLottoGetCountRecordsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LottoGetCountRecordsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LottoGetCountRecordsTable, LottoGetCountRecordsColumn),
	)
}
func newCloudFilesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CloudFilesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CloudFilesTable, CloudFilesColumn),
	)
}
func newWithdrawRecordsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WithdrawRecordsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, WithdrawRecordsTable, WithdrawRecordsColumn),
	)
}
func newOperateWithdrawRecordsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OperateWithdrawRecordsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OperateWithdrawRecordsTable, OperateWithdrawRecordsColumn),
	)
}
func newTroubleDeductsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TroubleDeductsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TroubleDeductsTable, TroubleDeductsColumn),
	)
}
func newIncomeManagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IncomeManagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, IncomeManagesTable, IncomeManagesColumn),
	)
}
func newApproveIncomeManagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApproveIncomeManagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ApproveIncomeManagesTable, ApproveIncomeManagesColumn),
	)
}
func newSurveyResponsesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SurveyResponsesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SurveyResponsesTable, SurveyResponsesColumn),
	)
}
func newApproveSurveyResponsesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApproveSurveyResponsesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ApproveSurveyResponsesTable, ApproveSurveyResponsesColumn),
	)
}
func newMissionFailedFeedbacksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MissionFailedFeedbacksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MissionFailedFeedbacksTable, MissionFailedFeedbacksColumn),
	)
}
func newAPITokensStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(APITokensInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, APITokensTable, APITokensColumn),
	)
}
func newUserModelsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserModelsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserModelsTable, UserModelsColumn),
	)
}
func newInvokeModelOrdersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InvokeModelOrdersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, InvokeModelOrdersTable, InvokeModelOrdersColumn),
	)
}
