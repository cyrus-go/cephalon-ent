// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/campaign"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/campaignorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
)

// CampaignOrder is the model entity for the CampaignOrder schema.
type CampaignOrder struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int64 `json:"created_by"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int64 `json:"updated_by"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at"`
	// 用户 id
	UserID int64 `json:"user_id"`
	// 活动 id
	CampaignID int64 `json:"campaign_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CampaignOrderQuery when eager-loading is set.
	Edges        CampaignOrderEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CampaignOrderEdges holds the relations/edges for other nodes in the graph.
type CampaignOrderEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Campaign holds the value of the campaign edge.
	Campaign *Campaign `json:"campaign,omitempty"`
	// CostBills holds the value of the cost_bills edge.
	CostBills []*CostBill `json:"cost_bills,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CampaignOrderEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// CampaignOrErr returns the Campaign value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CampaignOrderEdges) CampaignOrErr() (*Campaign, error) {
	if e.loadedTypes[1] {
		if e.Campaign == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: campaign.Label}
		}
		return e.Campaign, nil
	}
	return nil, &NotLoadedError{edge: "campaign"}
}

// CostBillsOrErr returns the CostBills value or an error if the edge
// was not loaded in eager-loading.
func (e CampaignOrderEdges) CostBillsOrErr() ([]*CostBill, error) {
	if e.loadedTypes[2] {
		return e.CostBills, nil
	}
	return nil, &NotLoadedError{edge: "cost_bills"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CampaignOrder) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case campaignorder.FieldID, campaignorder.FieldCreatedBy, campaignorder.FieldUpdatedBy, campaignorder.FieldUserID, campaignorder.FieldCampaignID:
			values[i] = new(sql.NullInt64)
		case campaignorder.FieldCreatedAt, campaignorder.FieldUpdatedAt, campaignorder.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CampaignOrder fields.
func (co *CampaignOrder) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case campaignorder.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			co.ID = int64(value.Int64)
		case campaignorder.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				co.CreatedBy = value.Int64
			}
		case campaignorder.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				co.UpdatedBy = value.Int64
			}
		case campaignorder.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				co.CreatedAt = value.Time
			}
		case campaignorder.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				co.UpdatedAt = value.Time
			}
		case campaignorder.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				co.DeletedAt = value.Time
			}
		case campaignorder.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				co.UserID = value.Int64
			}
		case campaignorder.FieldCampaignID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field campaign_id", values[i])
			} else if value.Valid {
				co.CampaignID = value.Int64
			}
		default:
			co.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CampaignOrder.
// This includes values selected through modifiers, order, etc.
func (co *CampaignOrder) Value(name string) (ent.Value, error) {
	return co.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the CampaignOrder entity.
func (co *CampaignOrder) QueryUser() *UserQuery {
	return NewCampaignOrderClient(co.config).QueryUser(co)
}

// QueryCampaign queries the "campaign" edge of the CampaignOrder entity.
func (co *CampaignOrder) QueryCampaign() *CampaignQuery {
	return NewCampaignOrderClient(co.config).QueryCampaign(co)
}

// QueryCostBills queries the "cost_bills" edge of the CampaignOrder entity.
func (co *CampaignOrder) QueryCostBills() *CostBillQuery {
	return NewCampaignOrderClient(co.config).QueryCostBills(co)
}

// Update returns a builder for updating this CampaignOrder.
// Note that you need to call CampaignOrder.Unwrap() before calling this method if this CampaignOrder
// was returned from a transaction, and the transaction was committed or rolled back.
func (co *CampaignOrder) Update() *CampaignOrderUpdateOne {
	return NewCampaignOrderClient(co.config).UpdateOne(co)
}

// Unwrap unwraps the CampaignOrder entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (co *CampaignOrder) Unwrap() *CampaignOrder {
	_tx, ok := co.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: CampaignOrder is not a transactional entity")
	}
	co.config.driver = _tx.drv
	return co
}

// String implements the fmt.Stringer.
func (co *CampaignOrder) String() string {
	var builder strings.Builder
	builder.WriteString("CampaignOrder(")
	builder.WriteString(fmt.Sprintf("id=%v, ", co.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", co.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", co.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(co.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(co.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(co.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", co.UserID))
	builder.WriteString(", ")
	builder.WriteString("campaign_id=")
	builder.WriteString(fmt.Sprintf("%v", co.CampaignID))
	builder.WriteByte(')')
	return builder.String()
}

// CampaignOrders is a parsable slice of CampaignOrder.
type CampaignOrders []*CampaignOrder
