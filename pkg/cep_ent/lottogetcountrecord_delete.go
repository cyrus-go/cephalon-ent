// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottogetcountrecord"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// LottoGetCountRecordDelete is the builder for deleting a LottoGetCountRecord entity.
type LottoGetCountRecordDelete struct {
	config
	hooks    []Hook
	mutation *LottoGetCountRecordMutation
}

// Where appends a list predicates to the LottoGetCountRecordDelete builder.
func (lgcrd *LottoGetCountRecordDelete) Where(ps ...predicate.LottoGetCountRecord) *LottoGetCountRecordDelete {
	lgcrd.mutation.Where(ps...)
	return lgcrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (lgcrd *LottoGetCountRecordDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, lgcrd.sqlExec, lgcrd.mutation, lgcrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (lgcrd *LottoGetCountRecordDelete) ExecX(ctx context.Context) int {
	n, err := lgcrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (lgcrd *LottoGetCountRecordDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(lottogetcountrecord.Table, sqlgraph.NewFieldSpec(lottogetcountrecord.FieldID, field.TypeInt64))
	if ps := lgcrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, lgcrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	lgcrd.mutation.done = true
	return affected, err
}

// LottoGetCountRecordDeleteOne is the builder for deleting a single LottoGetCountRecord entity.
type LottoGetCountRecordDeleteOne struct {
	lgcrd *LottoGetCountRecordDelete
}

// Where appends a list predicates to the LottoGetCountRecordDelete builder.
func (lgcrdo *LottoGetCountRecordDeleteOne) Where(ps ...predicate.LottoGetCountRecord) *LottoGetCountRecordDeleteOne {
	lgcrdo.lgcrd.mutation.Where(ps...)
	return lgcrdo
}

// Exec executes the deletion query.
func (lgcrdo *LottoGetCountRecordDeleteOne) Exec(ctx context.Context) error {
	n, err := lgcrdo.lgcrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{lottogetcountrecord.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (lgcrdo *LottoGetCountRecordDeleteOne) ExecX(ctx context.Context) {
	if err := lgcrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
