// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/price"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// PriceUpdate is the builder for updating Price entities.
type PriceUpdate struct {
	config
	hooks    []Hook
	mutation *PriceMutation
}

// Where appends a list predicates to the PriceUpdate builder.
func (pu *PriceUpdate) Where(ps ...predicate.Price) *PriceUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetCreatedBy sets the "created_by" field.
func (pu *PriceUpdate) SetCreatedBy(i int64) *PriceUpdate {
	pu.mutation.ResetCreatedBy()
	pu.mutation.SetCreatedBy(i)
	return pu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pu *PriceUpdate) SetNillableCreatedBy(i *int64) *PriceUpdate {
	if i != nil {
		pu.SetCreatedBy(*i)
	}
	return pu
}

// AddCreatedBy adds i to the "created_by" field.
func (pu *PriceUpdate) AddCreatedBy(i int64) *PriceUpdate {
	pu.mutation.AddCreatedBy(i)
	return pu
}

// SetUpdatedBy sets the "updated_by" field.
func (pu *PriceUpdate) SetUpdatedBy(i int64) *PriceUpdate {
	pu.mutation.ResetUpdatedBy()
	pu.mutation.SetUpdatedBy(i)
	return pu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pu *PriceUpdate) SetNillableUpdatedBy(i *int64) *PriceUpdate {
	if i != nil {
		pu.SetUpdatedBy(*i)
	}
	return pu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (pu *PriceUpdate) AddUpdatedBy(i int64) *PriceUpdate {
	pu.mutation.AddUpdatedBy(i)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PriceUpdate) SetUpdatedAt(t time.Time) *PriceUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *PriceUpdate) SetDeletedAt(t time.Time) *PriceUpdate {
	pu.mutation.SetDeletedAt(t)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *PriceUpdate) SetNillableDeletedAt(t *time.Time) *PriceUpdate {
	if t != nil {
		pu.SetDeletedAt(*t)
	}
	return pu
}

// SetGpuVersion sets the "gpu_version" field.
func (pu *PriceUpdate) SetGpuVersion(ev enums.GpuVersion) *PriceUpdate {
	pu.mutation.SetGpuVersion(ev)
	return pu
}

// SetNillableGpuVersion sets the "gpu_version" field if the given value is not nil.
func (pu *PriceUpdate) SetNillableGpuVersion(ev *enums.GpuVersion) *PriceUpdate {
	if ev != nil {
		pu.SetGpuVersion(*ev)
	}
	return pu
}

// SetMissionType sets the "mission_type" field.
func (pu *PriceUpdate) SetMissionType(et enums.MissionType) *PriceUpdate {
	pu.mutation.SetMissionType(et)
	return pu
}

// SetNillableMissionType sets the "mission_type" field if the given value is not nil.
func (pu *PriceUpdate) SetNillableMissionType(et *enums.MissionType) *PriceUpdate {
	if et != nil {
		pu.SetMissionType(*et)
	}
	return pu
}

// SetMissionCategory sets the "mission_category" field.
func (pu *PriceUpdate) SetMissionCategory(ec enums.MissionCategory) *PriceUpdate {
	pu.mutation.SetMissionCategory(ec)
	return pu
}

// SetNillableMissionCategory sets the "mission_category" field if the given value is not nil.
func (pu *PriceUpdate) SetNillableMissionCategory(ec *enums.MissionCategory) *PriceUpdate {
	if ec != nil {
		pu.SetMissionCategory(*ec)
	}
	return pu
}

// SetMissionBillingType sets the "mission_billing_type" field.
func (pu *PriceUpdate) SetMissionBillingType(ebt enums.MissionBillingType) *PriceUpdate {
	pu.mutation.SetMissionBillingType(ebt)
	return pu
}

// SetNillableMissionBillingType sets the "mission_billing_type" field if the given value is not nil.
func (pu *PriceUpdate) SetNillableMissionBillingType(ebt *enums.MissionBillingType) *PriceUpdate {
	if ebt != nil {
		pu.SetMissionBillingType(*ebt)
	}
	return pu
}

// SetCep sets the "cep" field.
func (pu *PriceUpdate) SetCep(i int64) *PriceUpdate {
	pu.mutation.ResetCep()
	pu.mutation.SetCep(i)
	return pu
}

// SetNillableCep sets the "cep" field if the given value is not nil.
func (pu *PriceUpdate) SetNillableCep(i *int64) *PriceUpdate {
	if i != nil {
		pu.SetCep(*i)
	}
	return pu
}

// AddCep adds i to the "cep" field.
func (pu *PriceUpdate) AddCep(i int64) *PriceUpdate {
	pu.mutation.AddCep(i)
	return pu
}

// Mutation returns the PriceMutation object of the builder.
func (pu *PriceUpdate) Mutation() *PriceMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PriceUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PriceUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PriceUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PriceUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PriceUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := price.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PriceUpdate) check() error {
	if v, ok := pu.mutation.GpuVersion(); ok {
		if err := price.GpuVersionValidator(v); err != nil {
			return &ValidationError{Name: "gpu_version", err: fmt.Errorf(`cep_ent: validator failed for field "Price.gpu_version": %w`, err)}
		}
	}
	if v, ok := pu.mutation.MissionType(); ok {
		if err := price.MissionTypeValidator(v); err != nil {
			return &ValidationError{Name: "mission_type", err: fmt.Errorf(`cep_ent: validator failed for field "Price.mission_type": %w`, err)}
		}
	}
	if v, ok := pu.mutation.MissionCategory(); ok {
		if err := price.MissionCategoryValidator(v); err != nil {
			return &ValidationError{Name: "mission_category", err: fmt.Errorf(`cep_ent: validator failed for field "Price.mission_category": %w`, err)}
		}
	}
	if v, ok := pu.mutation.MissionBillingType(); ok {
		if err := price.MissionBillingTypeValidator(v); err != nil {
			return &ValidationError{Name: "mission_billing_type", err: fmt.Errorf(`cep_ent: validator failed for field "Price.mission_billing_type": %w`, err)}
		}
	}
	return nil
}

func (pu *PriceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(price.Table, price.Columns, sqlgraph.NewFieldSpec(price.FieldID, field.TypeInt64))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.CreatedBy(); ok {
		_spec.SetField(price.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(price.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.UpdatedBy(); ok {
		_spec.SetField(price.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(price.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(price.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.SetField(price.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.GpuVersion(); ok {
		_spec.SetField(price.FieldGpuVersion, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.MissionType(); ok {
		_spec.SetField(price.FieldMissionType, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.MissionCategory(); ok {
		_spec.SetField(price.FieldMissionCategory, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.MissionBillingType(); ok {
		_spec.SetField(price.FieldMissionBillingType, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.Cep(); ok {
		_spec.SetField(price.FieldCep, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedCep(); ok {
		_spec.AddField(price.FieldCep, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{price.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PriceUpdateOne is the builder for updating a single Price entity.
type PriceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PriceMutation
}

// SetCreatedBy sets the "created_by" field.
func (puo *PriceUpdateOne) SetCreatedBy(i int64) *PriceUpdateOne {
	puo.mutation.ResetCreatedBy()
	puo.mutation.SetCreatedBy(i)
	return puo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (puo *PriceUpdateOne) SetNillableCreatedBy(i *int64) *PriceUpdateOne {
	if i != nil {
		puo.SetCreatedBy(*i)
	}
	return puo
}

// AddCreatedBy adds i to the "created_by" field.
func (puo *PriceUpdateOne) AddCreatedBy(i int64) *PriceUpdateOne {
	puo.mutation.AddCreatedBy(i)
	return puo
}

// SetUpdatedBy sets the "updated_by" field.
func (puo *PriceUpdateOne) SetUpdatedBy(i int64) *PriceUpdateOne {
	puo.mutation.ResetUpdatedBy()
	puo.mutation.SetUpdatedBy(i)
	return puo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (puo *PriceUpdateOne) SetNillableUpdatedBy(i *int64) *PriceUpdateOne {
	if i != nil {
		puo.SetUpdatedBy(*i)
	}
	return puo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (puo *PriceUpdateOne) AddUpdatedBy(i int64) *PriceUpdateOne {
	puo.mutation.AddUpdatedBy(i)
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PriceUpdateOne) SetUpdatedAt(t time.Time) *PriceUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *PriceUpdateOne) SetDeletedAt(t time.Time) *PriceUpdateOne {
	puo.mutation.SetDeletedAt(t)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *PriceUpdateOne) SetNillableDeletedAt(t *time.Time) *PriceUpdateOne {
	if t != nil {
		puo.SetDeletedAt(*t)
	}
	return puo
}

// SetGpuVersion sets the "gpu_version" field.
func (puo *PriceUpdateOne) SetGpuVersion(ev enums.GpuVersion) *PriceUpdateOne {
	puo.mutation.SetGpuVersion(ev)
	return puo
}

// SetNillableGpuVersion sets the "gpu_version" field if the given value is not nil.
func (puo *PriceUpdateOne) SetNillableGpuVersion(ev *enums.GpuVersion) *PriceUpdateOne {
	if ev != nil {
		puo.SetGpuVersion(*ev)
	}
	return puo
}

// SetMissionType sets the "mission_type" field.
func (puo *PriceUpdateOne) SetMissionType(et enums.MissionType) *PriceUpdateOne {
	puo.mutation.SetMissionType(et)
	return puo
}

// SetNillableMissionType sets the "mission_type" field if the given value is not nil.
func (puo *PriceUpdateOne) SetNillableMissionType(et *enums.MissionType) *PriceUpdateOne {
	if et != nil {
		puo.SetMissionType(*et)
	}
	return puo
}

// SetMissionCategory sets the "mission_category" field.
func (puo *PriceUpdateOne) SetMissionCategory(ec enums.MissionCategory) *PriceUpdateOne {
	puo.mutation.SetMissionCategory(ec)
	return puo
}

// SetNillableMissionCategory sets the "mission_category" field if the given value is not nil.
func (puo *PriceUpdateOne) SetNillableMissionCategory(ec *enums.MissionCategory) *PriceUpdateOne {
	if ec != nil {
		puo.SetMissionCategory(*ec)
	}
	return puo
}

// SetMissionBillingType sets the "mission_billing_type" field.
func (puo *PriceUpdateOne) SetMissionBillingType(ebt enums.MissionBillingType) *PriceUpdateOne {
	puo.mutation.SetMissionBillingType(ebt)
	return puo
}

// SetNillableMissionBillingType sets the "mission_billing_type" field if the given value is not nil.
func (puo *PriceUpdateOne) SetNillableMissionBillingType(ebt *enums.MissionBillingType) *PriceUpdateOne {
	if ebt != nil {
		puo.SetMissionBillingType(*ebt)
	}
	return puo
}

// SetCep sets the "cep" field.
func (puo *PriceUpdateOne) SetCep(i int64) *PriceUpdateOne {
	puo.mutation.ResetCep()
	puo.mutation.SetCep(i)
	return puo
}

// SetNillableCep sets the "cep" field if the given value is not nil.
func (puo *PriceUpdateOne) SetNillableCep(i *int64) *PriceUpdateOne {
	if i != nil {
		puo.SetCep(*i)
	}
	return puo
}

// AddCep adds i to the "cep" field.
func (puo *PriceUpdateOne) AddCep(i int64) *PriceUpdateOne {
	puo.mutation.AddCep(i)
	return puo
}

// Mutation returns the PriceMutation object of the builder.
func (puo *PriceUpdateOne) Mutation() *PriceMutation {
	return puo.mutation
}

// Where appends a list predicates to the PriceUpdate builder.
func (puo *PriceUpdateOne) Where(ps ...predicate.Price) *PriceUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PriceUpdateOne) Select(field string, fields ...string) *PriceUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Price entity.
func (puo *PriceUpdateOne) Save(ctx context.Context) (*Price, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PriceUpdateOne) SaveX(ctx context.Context) *Price {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PriceUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PriceUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PriceUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := price.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PriceUpdateOne) check() error {
	if v, ok := puo.mutation.GpuVersion(); ok {
		if err := price.GpuVersionValidator(v); err != nil {
			return &ValidationError{Name: "gpu_version", err: fmt.Errorf(`cep_ent: validator failed for field "Price.gpu_version": %w`, err)}
		}
	}
	if v, ok := puo.mutation.MissionType(); ok {
		if err := price.MissionTypeValidator(v); err != nil {
			return &ValidationError{Name: "mission_type", err: fmt.Errorf(`cep_ent: validator failed for field "Price.mission_type": %w`, err)}
		}
	}
	if v, ok := puo.mutation.MissionCategory(); ok {
		if err := price.MissionCategoryValidator(v); err != nil {
			return &ValidationError{Name: "mission_category", err: fmt.Errorf(`cep_ent: validator failed for field "Price.mission_category": %w`, err)}
		}
	}
	if v, ok := puo.mutation.MissionBillingType(); ok {
		if err := price.MissionBillingTypeValidator(v); err != nil {
			return &ValidationError{Name: "mission_billing_type", err: fmt.Errorf(`cep_ent: validator failed for field "Price.mission_billing_type": %w`, err)}
		}
	}
	return nil
}

func (puo *PriceUpdateOne) sqlSave(ctx context.Context) (_node *Price, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(price.Table, price.Columns, sqlgraph.NewFieldSpec(price.FieldID, field.TypeInt64))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "Price.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, price.FieldID)
		for _, f := range fields {
			if !price.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != price.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.CreatedBy(); ok {
		_spec.SetField(price.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(price.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.UpdatedBy(); ok {
		_spec.SetField(price.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(price.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(price.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.SetField(price.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.GpuVersion(); ok {
		_spec.SetField(price.FieldGpuVersion, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.MissionType(); ok {
		_spec.SetField(price.FieldMissionType, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.MissionCategory(); ok {
		_spec.SetField(price.FieldMissionCategory, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.MissionBillingType(); ok {
		_spec.SetField(price.FieldMissionBillingType, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.Cep(); ok {
		_spec.SetField(price.FieldCep, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedCep(); ok {
		_spec.AddField(price.FieldCep, field.TypeInt64, value)
	}
	_node = &Price{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{price.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
