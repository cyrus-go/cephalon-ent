// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/costbill"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/mission"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionbatch"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionconsumeorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionproduceorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// MissionConsumeOrderCreate is the builder for creating a MissionConsumeOrder entity.
type MissionConsumeOrderCreate struct {
	config
	mutation *MissionConsumeOrderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (mcoc *MissionConsumeOrderCreate) SetCreatedBy(i int64) *MissionConsumeOrderCreate {
	mcoc.mutation.SetCreatedBy(i)
	return mcoc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mcoc *MissionConsumeOrderCreate) SetNillableCreatedBy(i *int64) *MissionConsumeOrderCreate {
	if i != nil {
		mcoc.SetCreatedBy(*i)
	}
	return mcoc
}

// SetUpdatedBy sets the "updated_by" field.
func (mcoc *MissionConsumeOrderCreate) SetUpdatedBy(i int64) *MissionConsumeOrderCreate {
	mcoc.mutation.SetUpdatedBy(i)
	return mcoc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mcoc *MissionConsumeOrderCreate) SetNillableUpdatedBy(i *int64) *MissionConsumeOrderCreate {
	if i != nil {
		mcoc.SetUpdatedBy(*i)
	}
	return mcoc
}

// SetCreatedAt sets the "created_at" field.
func (mcoc *MissionConsumeOrderCreate) SetCreatedAt(t time.Time) *MissionConsumeOrderCreate {
	mcoc.mutation.SetCreatedAt(t)
	return mcoc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mcoc *MissionConsumeOrderCreate) SetNillableCreatedAt(t *time.Time) *MissionConsumeOrderCreate {
	if t != nil {
		mcoc.SetCreatedAt(*t)
	}
	return mcoc
}

// SetUpdatedAt sets the "updated_at" field.
func (mcoc *MissionConsumeOrderCreate) SetUpdatedAt(t time.Time) *MissionConsumeOrderCreate {
	mcoc.mutation.SetUpdatedAt(t)
	return mcoc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mcoc *MissionConsumeOrderCreate) SetNillableUpdatedAt(t *time.Time) *MissionConsumeOrderCreate {
	if t != nil {
		mcoc.SetUpdatedAt(*t)
	}
	return mcoc
}

// SetDeletedAt sets the "deleted_at" field.
func (mcoc *MissionConsumeOrderCreate) SetDeletedAt(t time.Time) *MissionConsumeOrderCreate {
	mcoc.mutation.SetDeletedAt(t)
	return mcoc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mcoc *MissionConsumeOrderCreate) SetNillableDeletedAt(t *time.Time) *MissionConsumeOrderCreate {
	if t != nil {
		mcoc.SetDeletedAt(*t)
	}
	return mcoc
}

// SetUserID sets the "user_id" field.
func (mcoc *MissionConsumeOrderCreate) SetUserID(i int64) *MissionConsumeOrderCreate {
	mcoc.mutation.SetUserID(i)
	return mcoc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (mcoc *MissionConsumeOrderCreate) SetNillableUserID(i *int64) *MissionConsumeOrderCreate {
	if i != nil {
		mcoc.SetUserID(*i)
	}
	return mcoc
}

// SetMissionID sets the "mission_id" field.
func (mcoc *MissionConsumeOrderCreate) SetMissionID(i int64) *MissionConsumeOrderCreate {
	mcoc.mutation.SetMissionID(i)
	return mcoc
}

// SetNillableMissionID sets the "mission_id" field if the given value is not nil.
func (mcoc *MissionConsumeOrderCreate) SetNillableMissionID(i *int64) *MissionConsumeOrderCreate {
	if i != nil {
		mcoc.SetMissionID(*i)
	}
	return mcoc
}

// SetStatus sets the "status" field.
func (mcoc *MissionConsumeOrderCreate) SetStatus(eos enums.MissionOrderStatus) *MissionConsumeOrderCreate {
	mcoc.mutation.SetStatus(eos)
	return mcoc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mcoc *MissionConsumeOrderCreate) SetNillableStatus(eos *enums.MissionOrderStatus) *MissionConsumeOrderCreate {
	if eos != nil {
		mcoc.SetStatus(*eos)
	}
	return mcoc
}

// SetPureCep sets the "pure_cep" field.
func (mcoc *MissionConsumeOrderCreate) SetPureCep(i int64) *MissionConsumeOrderCreate {
	mcoc.mutation.SetPureCep(i)
	return mcoc
}

// SetNillablePureCep sets the "pure_cep" field if the given value is not nil.
func (mcoc *MissionConsumeOrderCreate) SetNillablePureCep(i *int64) *MissionConsumeOrderCreate {
	if i != nil {
		mcoc.SetPureCep(*i)
	}
	return mcoc
}

// SetGiftCep sets the "gift_cep" field.
func (mcoc *MissionConsumeOrderCreate) SetGiftCep(i int64) *MissionConsumeOrderCreate {
	mcoc.mutation.SetGiftCep(i)
	return mcoc
}

// SetNillableGiftCep sets the "gift_cep" field if the given value is not nil.
func (mcoc *MissionConsumeOrderCreate) SetNillableGiftCep(i *int64) *MissionConsumeOrderCreate {
	if i != nil {
		mcoc.SetGiftCep(*i)
	}
	return mcoc
}

// SetType sets the "type" field.
func (mcoc *MissionConsumeOrderCreate) SetType(et enums.MissionType) *MissionConsumeOrderCreate {
	mcoc.mutation.SetType(et)
	return mcoc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mcoc *MissionConsumeOrderCreate) SetNillableType(et *enums.MissionType) *MissionConsumeOrderCreate {
	if et != nil {
		mcoc.SetType(*et)
	}
	return mcoc
}

// SetIsTime sets the "is_time" field.
func (mcoc *MissionConsumeOrderCreate) SetIsTime(b bool) *MissionConsumeOrderCreate {
	mcoc.mutation.SetIsTime(b)
	return mcoc
}

// SetNillableIsTime sets the "is_time" field if the given value is not nil.
func (mcoc *MissionConsumeOrderCreate) SetNillableIsTime(b *bool) *MissionConsumeOrderCreate {
	if b != nil {
		mcoc.SetIsTime(*b)
	}
	return mcoc
}

// SetCallWay sets the "call_way" field.
func (mcoc *MissionConsumeOrderCreate) SetCallWay(ecw enums.MissionCallWay) *MissionConsumeOrderCreate {
	mcoc.mutation.SetCallWay(ecw)
	return mcoc
}

// SetNillableCallWay sets the "call_way" field if the given value is not nil.
func (mcoc *MissionConsumeOrderCreate) SetNillableCallWay(ecw *enums.MissionCallWay) *MissionConsumeOrderCreate {
	if ecw != nil {
		mcoc.SetCallWay(*ecw)
	}
	return mcoc
}

// SetSerialNumber sets the "serial_number" field.
func (mcoc *MissionConsumeOrderCreate) SetSerialNumber(s string) *MissionConsumeOrderCreate {
	mcoc.mutation.SetSerialNumber(s)
	return mcoc
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (mcoc *MissionConsumeOrderCreate) SetNillableSerialNumber(s *string) *MissionConsumeOrderCreate {
	if s != nil {
		mcoc.SetSerialNumber(*s)
	}
	return mcoc
}

// SetStartedAt sets the "started_at" field.
func (mcoc *MissionConsumeOrderCreate) SetStartedAt(t time.Time) *MissionConsumeOrderCreate {
	mcoc.mutation.SetStartedAt(t)
	return mcoc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (mcoc *MissionConsumeOrderCreate) SetNillableStartedAt(t *time.Time) *MissionConsumeOrderCreate {
	if t != nil {
		mcoc.SetStartedAt(*t)
	}
	return mcoc
}

// SetFinishedAt sets the "finished_at" field.
func (mcoc *MissionConsumeOrderCreate) SetFinishedAt(t time.Time) *MissionConsumeOrderCreate {
	mcoc.mutation.SetFinishedAt(t)
	return mcoc
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (mcoc *MissionConsumeOrderCreate) SetNillableFinishedAt(t *time.Time) *MissionConsumeOrderCreate {
	if t != nil {
		mcoc.SetFinishedAt(*t)
	}
	return mcoc
}

// SetMissionBatchID sets the "mission_batch_id" field.
func (mcoc *MissionConsumeOrderCreate) SetMissionBatchID(i int64) *MissionConsumeOrderCreate {
	mcoc.mutation.SetMissionBatchID(i)
	return mcoc
}

// SetNillableMissionBatchID sets the "mission_batch_id" field if the given value is not nil.
func (mcoc *MissionConsumeOrderCreate) SetNillableMissionBatchID(i *int64) *MissionConsumeOrderCreate {
	if i != nil {
		mcoc.SetMissionBatchID(*i)
	}
	return mcoc
}

// SetMissionBatchNumber sets the "mission_batch_number" field.
func (mcoc *MissionConsumeOrderCreate) SetMissionBatchNumber(s string) *MissionConsumeOrderCreate {
	mcoc.mutation.SetMissionBatchNumber(s)
	return mcoc
}

// SetNillableMissionBatchNumber sets the "mission_batch_number" field if the given value is not nil.
func (mcoc *MissionConsumeOrderCreate) SetNillableMissionBatchNumber(s *string) *MissionConsumeOrderCreate {
	if s != nil {
		mcoc.SetMissionBatchNumber(*s)
	}
	return mcoc
}

// SetID sets the "id" field.
func (mcoc *MissionConsumeOrderCreate) SetID(i int64) *MissionConsumeOrderCreate {
	mcoc.mutation.SetID(i)
	return mcoc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mcoc *MissionConsumeOrderCreate) SetNillableID(i *int64) *MissionConsumeOrderCreate {
	if i != nil {
		mcoc.SetID(*i)
	}
	return mcoc
}

// SetUser sets the "user" edge to the User entity.
func (mcoc *MissionConsumeOrderCreate) SetUser(u *User) *MissionConsumeOrderCreate {
	return mcoc.SetUserID(u.ID)
}

// AddCostBillIDs adds the "cost_bills" edge to the CostBill entity by IDs.
func (mcoc *MissionConsumeOrderCreate) AddCostBillIDs(ids ...int64) *MissionConsumeOrderCreate {
	mcoc.mutation.AddCostBillIDs(ids...)
	return mcoc
}

// AddCostBills adds the "cost_bills" edges to the CostBill entity.
func (mcoc *MissionConsumeOrderCreate) AddCostBills(c ...*CostBill) *MissionConsumeOrderCreate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mcoc.AddCostBillIDs(ids...)
}

// AddMissionProduceOrderIDs adds the "mission_produce_orders" edge to the MissionProduceOrder entity by IDs.
func (mcoc *MissionConsumeOrderCreate) AddMissionProduceOrderIDs(ids ...int64) *MissionConsumeOrderCreate {
	mcoc.mutation.AddMissionProduceOrderIDs(ids...)
	return mcoc
}

// AddMissionProduceOrders adds the "mission_produce_orders" edges to the MissionProduceOrder entity.
func (mcoc *MissionConsumeOrderCreate) AddMissionProduceOrders(m ...*MissionProduceOrder) *MissionConsumeOrderCreate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mcoc.AddMissionProduceOrderIDs(ids...)
}

// SetMissionBatch sets the "mission_batch" edge to the MissionBatch entity.
func (mcoc *MissionConsumeOrderCreate) SetMissionBatch(m *MissionBatch) *MissionConsumeOrderCreate {
	return mcoc.SetMissionBatchID(m.ID)
}

// SetMission sets the "mission" edge to the Mission entity.
func (mcoc *MissionConsumeOrderCreate) SetMission(m *Mission) *MissionConsumeOrderCreate {
	return mcoc.SetMissionID(m.ID)
}

// Mutation returns the MissionConsumeOrderMutation object of the builder.
func (mcoc *MissionConsumeOrderCreate) Mutation() *MissionConsumeOrderMutation {
	return mcoc.mutation
}

// Save creates the MissionConsumeOrder in the database.
func (mcoc *MissionConsumeOrderCreate) Save(ctx context.Context) (*MissionConsumeOrder, error) {
	mcoc.defaults()
	return withHooks(ctx, mcoc.sqlSave, mcoc.mutation, mcoc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mcoc *MissionConsumeOrderCreate) SaveX(ctx context.Context) *MissionConsumeOrder {
	v, err := mcoc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcoc *MissionConsumeOrderCreate) Exec(ctx context.Context) error {
	_, err := mcoc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcoc *MissionConsumeOrderCreate) ExecX(ctx context.Context) {
	if err := mcoc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mcoc *MissionConsumeOrderCreate) defaults() {
	if _, ok := mcoc.mutation.CreatedBy(); !ok {
		v := missionconsumeorder.DefaultCreatedBy
		mcoc.mutation.SetCreatedBy(v)
	}
	if _, ok := mcoc.mutation.UpdatedBy(); !ok {
		v := missionconsumeorder.DefaultUpdatedBy
		mcoc.mutation.SetUpdatedBy(v)
	}
	if _, ok := mcoc.mutation.CreatedAt(); !ok {
		v := missionconsumeorder.DefaultCreatedAt()
		mcoc.mutation.SetCreatedAt(v)
	}
	if _, ok := mcoc.mutation.UpdatedAt(); !ok {
		v := missionconsumeorder.DefaultUpdatedAt()
		mcoc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mcoc.mutation.DeletedAt(); !ok {
		v := missionconsumeorder.DefaultDeletedAt
		mcoc.mutation.SetDeletedAt(v)
	}
	if _, ok := mcoc.mutation.UserID(); !ok {
		v := missionconsumeorder.DefaultUserID
		mcoc.mutation.SetUserID(v)
	}
	if _, ok := mcoc.mutation.MissionID(); !ok {
		v := missionconsumeorder.DefaultMissionID
		mcoc.mutation.SetMissionID(v)
	}
	if _, ok := mcoc.mutation.Status(); !ok {
		v := missionconsumeorder.DefaultStatus
		mcoc.mutation.SetStatus(v)
	}
	if _, ok := mcoc.mutation.PureCep(); !ok {
		v := missionconsumeorder.DefaultPureCep
		mcoc.mutation.SetPureCep(v)
	}
	if _, ok := mcoc.mutation.GiftCep(); !ok {
		v := missionconsumeorder.DefaultGiftCep
		mcoc.mutation.SetGiftCep(v)
	}
	if _, ok := mcoc.mutation.GetType(); !ok {
		v := missionconsumeorder.DefaultType
		mcoc.mutation.SetType(v)
	}
	if _, ok := mcoc.mutation.IsTime(); !ok {
		v := missionconsumeorder.DefaultIsTime
		mcoc.mutation.SetIsTime(v)
	}
	if _, ok := mcoc.mutation.CallWay(); !ok {
		v := missionconsumeorder.DefaultCallWay
		mcoc.mutation.SetCallWay(v)
	}
	if _, ok := mcoc.mutation.SerialNumber(); !ok {
		v := missionconsumeorder.DefaultSerialNumber
		mcoc.mutation.SetSerialNumber(v)
	}
	if _, ok := mcoc.mutation.StartedAt(); !ok {
		v := missionconsumeorder.DefaultStartedAt
		mcoc.mutation.SetStartedAt(v)
	}
	if _, ok := mcoc.mutation.FinishedAt(); !ok {
		v := missionconsumeorder.DefaultFinishedAt
		mcoc.mutation.SetFinishedAt(v)
	}
	if _, ok := mcoc.mutation.MissionBatchID(); !ok {
		v := missionconsumeorder.DefaultMissionBatchID
		mcoc.mutation.SetMissionBatchID(v)
	}
	if _, ok := mcoc.mutation.MissionBatchNumber(); !ok {
		v := missionconsumeorder.DefaultMissionBatchNumber
		mcoc.mutation.SetMissionBatchNumber(v)
	}
	if _, ok := mcoc.mutation.ID(); !ok {
		v := missionconsumeorder.DefaultID()
		mcoc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mcoc *MissionConsumeOrderCreate) check() error {
	if _, ok := mcoc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "MissionConsumeOrder.created_by"`)}
	}
	if _, ok := mcoc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "MissionConsumeOrder.updated_by"`)}
	}
	if _, ok := mcoc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "MissionConsumeOrder.created_at"`)}
	}
	if _, ok := mcoc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "MissionConsumeOrder.updated_at"`)}
	}
	if _, ok := mcoc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "MissionConsumeOrder.deleted_at"`)}
	}
	if _, ok := mcoc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "MissionConsumeOrder.user_id"`)}
	}
	if _, ok := mcoc.mutation.MissionID(); !ok {
		return &ValidationError{Name: "mission_id", err: errors.New(`cep_ent: missing required field "MissionConsumeOrder.mission_id"`)}
	}
	if _, ok := mcoc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`cep_ent: missing required field "MissionConsumeOrder.status"`)}
	}
	if v, ok := mcoc.mutation.Status(); ok {
		if err := missionconsumeorder.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "MissionConsumeOrder.status": %w`, err)}
		}
	}
	if _, ok := mcoc.mutation.PureCep(); !ok {
		return &ValidationError{Name: "pure_cep", err: errors.New(`cep_ent: missing required field "MissionConsumeOrder.pure_cep"`)}
	}
	if _, ok := mcoc.mutation.GiftCep(); !ok {
		return &ValidationError{Name: "gift_cep", err: errors.New(`cep_ent: missing required field "MissionConsumeOrder.gift_cep"`)}
	}
	if _, ok := mcoc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`cep_ent: missing required field "MissionConsumeOrder.type"`)}
	}
	if v, ok := mcoc.mutation.GetType(); ok {
		if err := missionconsumeorder.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "MissionConsumeOrder.type": %w`, err)}
		}
	}
	if _, ok := mcoc.mutation.IsTime(); !ok {
		return &ValidationError{Name: "is_time", err: errors.New(`cep_ent: missing required field "MissionConsumeOrder.is_time"`)}
	}
	if _, ok := mcoc.mutation.CallWay(); !ok {
		return &ValidationError{Name: "call_way", err: errors.New(`cep_ent: missing required field "MissionConsumeOrder.call_way"`)}
	}
	if v, ok := mcoc.mutation.CallWay(); ok {
		if err := missionconsumeorder.CallWayValidator(v); err != nil {
			return &ValidationError{Name: "call_way", err: fmt.Errorf(`cep_ent: validator failed for field "MissionConsumeOrder.call_way": %w`, err)}
		}
	}
	if _, ok := mcoc.mutation.SerialNumber(); !ok {
		return &ValidationError{Name: "serial_number", err: errors.New(`cep_ent: missing required field "MissionConsumeOrder.serial_number"`)}
	}
	if _, ok := mcoc.mutation.StartedAt(); !ok {
		return &ValidationError{Name: "started_at", err: errors.New(`cep_ent: missing required field "MissionConsumeOrder.started_at"`)}
	}
	if _, ok := mcoc.mutation.FinishedAt(); !ok {
		return &ValidationError{Name: "finished_at", err: errors.New(`cep_ent: missing required field "MissionConsumeOrder.finished_at"`)}
	}
	if _, ok := mcoc.mutation.MissionBatchID(); !ok {
		return &ValidationError{Name: "mission_batch_id", err: errors.New(`cep_ent: missing required field "MissionConsumeOrder.mission_batch_id"`)}
	}
	if _, ok := mcoc.mutation.MissionBatchNumber(); !ok {
		return &ValidationError{Name: "mission_batch_number", err: errors.New(`cep_ent: missing required field "MissionConsumeOrder.mission_batch_number"`)}
	}
	if _, ok := mcoc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "MissionConsumeOrder.user"`)}
	}
	if _, ok := mcoc.mutation.MissionBatchID(); !ok {
		return &ValidationError{Name: "mission_batch", err: errors.New(`cep_ent: missing required edge "MissionConsumeOrder.mission_batch"`)}
	}
	if _, ok := mcoc.mutation.MissionID(); !ok {
		return &ValidationError{Name: "mission", err: errors.New(`cep_ent: missing required edge "MissionConsumeOrder.mission"`)}
	}
	return nil
}

func (mcoc *MissionConsumeOrderCreate) sqlSave(ctx context.Context) (*MissionConsumeOrder, error) {
	if err := mcoc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mcoc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mcoc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	mcoc.mutation.id = &_node.ID
	mcoc.mutation.done = true
	return _node, nil
}

func (mcoc *MissionConsumeOrderCreate) createSpec() (*MissionConsumeOrder, *sqlgraph.CreateSpec) {
	var (
		_node = &MissionConsumeOrder{config: mcoc.config}
		_spec = sqlgraph.NewCreateSpec(missionconsumeorder.Table, sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = mcoc.conflict
	if id, ok := mcoc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mcoc.mutation.CreatedBy(); ok {
		_spec.SetField(missionconsumeorder.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := mcoc.mutation.UpdatedBy(); ok {
		_spec.SetField(missionconsumeorder.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := mcoc.mutation.CreatedAt(); ok {
		_spec.SetField(missionconsumeorder.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mcoc.mutation.UpdatedAt(); ok {
		_spec.SetField(missionconsumeorder.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mcoc.mutation.DeletedAt(); ok {
		_spec.SetField(missionconsumeorder.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := mcoc.mutation.Status(); ok {
		_spec.SetField(missionconsumeorder.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := mcoc.mutation.PureCep(); ok {
		_spec.SetField(missionconsumeorder.FieldPureCep, field.TypeInt64, value)
		_node.PureCep = value
	}
	if value, ok := mcoc.mutation.GiftCep(); ok {
		_spec.SetField(missionconsumeorder.FieldGiftCep, field.TypeInt64, value)
		_node.GiftCep = value
	}
	if value, ok := mcoc.mutation.GetType(); ok {
		_spec.SetField(missionconsumeorder.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := mcoc.mutation.IsTime(); ok {
		_spec.SetField(missionconsumeorder.FieldIsTime, field.TypeBool, value)
		_node.IsTime = value
	}
	if value, ok := mcoc.mutation.CallWay(); ok {
		_spec.SetField(missionconsumeorder.FieldCallWay, field.TypeEnum, value)
		_node.CallWay = value
	}
	if value, ok := mcoc.mutation.SerialNumber(); ok {
		_spec.SetField(missionconsumeorder.FieldSerialNumber, field.TypeString, value)
		_node.SerialNumber = value
	}
	if value, ok := mcoc.mutation.StartedAt(); ok {
		_spec.SetField(missionconsumeorder.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := mcoc.mutation.FinishedAt(); ok {
		_spec.SetField(missionconsumeorder.FieldFinishedAt, field.TypeTime, value)
		_node.FinishedAt = value
	}
	if value, ok := mcoc.mutation.MissionBatchNumber(); ok {
		_spec.SetField(missionconsumeorder.FieldMissionBatchNumber, field.TypeString, value)
		_node.MissionBatchNumber = value
	}
	if nodes := mcoc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionconsumeorder.UserTable,
			Columns: []string{missionconsumeorder.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mcoc.mutation.CostBillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionconsumeorder.CostBillsTable,
			Columns: []string{missionconsumeorder.CostBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costbill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mcoc.mutation.MissionProduceOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionconsumeorder.MissionProduceOrdersTable,
			Columns: []string{missionconsumeorder.MissionProduceOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mcoc.mutation.MissionBatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionconsumeorder.MissionBatchTable,
			Columns: []string{missionconsumeorder.MissionBatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionbatch.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MissionBatchID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mcoc.mutation.MissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   missionconsumeorder.MissionTable,
			Columns: []string{missionconsumeorder.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MissionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MissionConsumeOrder.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MissionConsumeOrderUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (mcoc *MissionConsumeOrderCreate) OnConflict(opts ...sql.ConflictOption) *MissionConsumeOrderUpsertOne {
	mcoc.conflict = opts
	return &MissionConsumeOrderUpsertOne{
		create: mcoc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MissionConsumeOrder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcoc *MissionConsumeOrderCreate) OnConflictColumns(columns ...string) *MissionConsumeOrderUpsertOne {
	mcoc.conflict = append(mcoc.conflict, sql.ConflictColumns(columns...))
	return &MissionConsumeOrderUpsertOne{
		create: mcoc,
	}
}

type (
	// MissionConsumeOrderUpsertOne is the builder for "upsert"-ing
	//  one MissionConsumeOrder node.
	MissionConsumeOrderUpsertOne struct {
		create *MissionConsumeOrderCreate
	}

	// MissionConsumeOrderUpsert is the "OnConflict" setter.
	MissionConsumeOrderUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *MissionConsumeOrderUpsert) SetCreatedBy(v int64) *MissionConsumeOrderUpsert {
	u.Set(missionconsumeorder.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsert) UpdateCreatedBy() *MissionConsumeOrderUpsert {
	u.SetExcluded(missionconsumeorder.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *MissionConsumeOrderUpsert) AddCreatedBy(v int64) *MissionConsumeOrderUpsert {
	u.Add(missionconsumeorder.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MissionConsumeOrderUpsert) SetUpdatedBy(v int64) *MissionConsumeOrderUpsert {
	u.Set(missionconsumeorder.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsert) UpdateUpdatedBy() *MissionConsumeOrderUpsert {
	u.SetExcluded(missionconsumeorder.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MissionConsumeOrderUpsert) AddUpdatedBy(v int64) *MissionConsumeOrderUpsert {
	u.Add(missionconsumeorder.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MissionConsumeOrderUpsert) SetUpdatedAt(v time.Time) *MissionConsumeOrderUpsert {
	u.Set(missionconsumeorder.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsert) UpdateUpdatedAt() *MissionConsumeOrderUpsert {
	u.SetExcluded(missionconsumeorder.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MissionConsumeOrderUpsert) SetDeletedAt(v time.Time) *MissionConsumeOrderUpsert {
	u.Set(missionconsumeorder.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsert) UpdateDeletedAt() *MissionConsumeOrderUpsert {
	u.SetExcluded(missionconsumeorder.FieldDeletedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *MissionConsumeOrderUpsert) SetUserID(v int64) *MissionConsumeOrderUpsert {
	u.Set(missionconsumeorder.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsert) UpdateUserID() *MissionConsumeOrderUpsert {
	u.SetExcluded(missionconsumeorder.FieldUserID)
	return u
}

// SetMissionID sets the "mission_id" field.
func (u *MissionConsumeOrderUpsert) SetMissionID(v int64) *MissionConsumeOrderUpsert {
	u.Set(missionconsumeorder.FieldMissionID, v)
	return u
}

// UpdateMissionID sets the "mission_id" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsert) UpdateMissionID() *MissionConsumeOrderUpsert {
	u.SetExcluded(missionconsumeorder.FieldMissionID)
	return u
}

// SetStatus sets the "status" field.
func (u *MissionConsumeOrderUpsert) SetStatus(v enums.MissionOrderStatus) *MissionConsumeOrderUpsert {
	u.Set(missionconsumeorder.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsert) UpdateStatus() *MissionConsumeOrderUpsert {
	u.SetExcluded(missionconsumeorder.FieldStatus)
	return u
}

// SetPureCep sets the "pure_cep" field.
func (u *MissionConsumeOrderUpsert) SetPureCep(v int64) *MissionConsumeOrderUpsert {
	u.Set(missionconsumeorder.FieldPureCep, v)
	return u
}

// UpdatePureCep sets the "pure_cep" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsert) UpdatePureCep() *MissionConsumeOrderUpsert {
	u.SetExcluded(missionconsumeorder.FieldPureCep)
	return u
}

// AddPureCep adds v to the "pure_cep" field.
func (u *MissionConsumeOrderUpsert) AddPureCep(v int64) *MissionConsumeOrderUpsert {
	u.Add(missionconsumeorder.FieldPureCep, v)
	return u
}

// SetGiftCep sets the "gift_cep" field.
func (u *MissionConsumeOrderUpsert) SetGiftCep(v int64) *MissionConsumeOrderUpsert {
	u.Set(missionconsumeorder.FieldGiftCep, v)
	return u
}

// UpdateGiftCep sets the "gift_cep" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsert) UpdateGiftCep() *MissionConsumeOrderUpsert {
	u.SetExcluded(missionconsumeorder.FieldGiftCep)
	return u
}

// AddGiftCep adds v to the "gift_cep" field.
func (u *MissionConsumeOrderUpsert) AddGiftCep(v int64) *MissionConsumeOrderUpsert {
	u.Add(missionconsumeorder.FieldGiftCep, v)
	return u
}

// SetType sets the "type" field.
func (u *MissionConsumeOrderUpsert) SetType(v enums.MissionType) *MissionConsumeOrderUpsert {
	u.Set(missionconsumeorder.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsert) UpdateType() *MissionConsumeOrderUpsert {
	u.SetExcluded(missionconsumeorder.FieldType)
	return u
}

// SetIsTime sets the "is_time" field.
func (u *MissionConsumeOrderUpsert) SetIsTime(v bool) *MissionConsumeOrderUpsert {
	u.Set(missionconsumeorder.FieldIsTime, v)
	return u
}

// UpdateIsTime sets the "is_time" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsert) UpdateIsTime() *MissionConsumeOrderUpsert {
	u.SetExcluded(missionconsumeorder.FieldIsTime)
	return u
}

// SetCallWay sets the "call_way" field.
func (u *MissionConsumeOrderUpsert) SetCallWay(v enums.MissionCallWay) *MissionConsumeOrderUpsert {
	u.Set(missionconsumeorder.FieldCallWay, v)
	return u
}

// UpdateCallWay sets the "call_way" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsert) UpdateCallWay() *MissionConsumeOrderUpsert {
	u.SetExcluded(missionconsumeorder.FieldCallWay)
	return u
}

// SetSerialNumber sets the "serial_number" field.
func (u *MissionConsumeOrderUpsert) SetSerialNumber(v string) *MissionConsumeOrderUpsert {
	u.Set(missionconsumeorder.FieldSerialNumber, v)
	return u
}

// UpdateSerialNumber sets the "serial_number" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsert) UpdateSerialNumber() *MissionConsumeOrderUpsert {
	u.SetExcluded(missionconsumeorder.FieldSerialNumber)
	return u
}

// SetStartedAt sets the "started_at" field.
func (u *MissionConsumeOrderUpsert) SetStartedAt(v time.Time) *MissionConsumeOrderUpsert {
	u.Set(missionconsumeorder.FieldStartedAt, v)
	return u
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsert) UpdateStartedAt() *MissionConsumeOrderUpsert {
	u.SetExcluded(missionconsumeorder.FieldStartedAt)
	return u
}

// SetFinishedAt sets the "finished_at" field.
func (u *MissionConsumeOrderUpsert) SetFinishedAt(v time.Time) *MissionConsumeOrderUpsert {
	u.Set(missionconsumeorder.FieldFinishedAt, v)
	return u
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsert) UpdateFinishedAt() *MissionConsumeOrderUpsert {
	u.SetExcluded(missionconsumeorder.FieldFinishedAt)
	return u
}

// SetMissionBatchID sets the "mission_batch_id" field.
func (u *MissionConsumeOrderUpsert) SetMissionBatchID(v int64) *MissionConsumeOrderUpsert {
	u.Set(missionconsumeorder.FieldMissionBatchID, v)
	return u
}

// UpdateMissionBatchID sets the "mission_batch_id" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsert) UpdateMissionBatchID() *MissionConsumeOrderUpsert {
	u.SetExcluded(missionconsumeorder.FieldMissionBatchID)
	return u
}

// SetMissionBatchNumber sets the "mission_batch_number" field.
func (u *MissionConsumeOrderUpsert) SetMissionBatchNumber(v string) *MissionConsumeOrderUpsert {
	u.Set(missionconsumeorder.FieldMissionBatchNumber, v)
	return u
}

// UpdateMissionBatchNumber sets the "mission_batch_number" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsert) UpdateMissionBatchNumber() *MissionConsumeOrderUpsert {
	u.SetExcluded(missionconsumeorder.FieldMissionBatchNumber)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MissionConsumeOrder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(missionconsumeorder.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MissionConsumeOrderUpsertOne) UpdateNewValues() *MissionConsumeOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(missionconsumeorder.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(missionconsumeorder.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MissionConsumeOrder.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MissionConsumeOrderUpsertOne) Ignore() *MissionConsumeOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MissionConsumeOrderUpsertOne) DoNothing() *MissionConsumeOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MissionConsumeOrderCreate.OnConflict
// documentation for more info.
func (u *MissionConsumeOrderUpsertOne) Update(set func(*MissionConsumeOrderUpsert)) *MissionConsumeOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MissionConsumeOrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *MissionConsumeOrderUpsertOne) SetCreatedBy(v int64) *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *MissionConsumeOrderUpsertOne) AddCreatedBy(v int64) *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsertOne) UpdateCreatedBy() *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MissionConsumeOrderUpsertOne) SetUpdatedBy(v int64) *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MissionConsumeOrderUpsertOne) AddUpdatedBy(v int64) *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsertOne) UpdateUpdatedBy() *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MissionConsumeOrderUpsertOne) SetUpdatedAt(v time.Time) *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsertOne) UpdateUpdatedAt() *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MissionConsumeOrderUpsertOne) SetDeletedAt(v time.Time) *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsertOne) UpdateDeletedAt() *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *MissionConsumeOrderUpsertOne) SetUserID(v int64) *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsertOne) UpdateUserID() *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.UpdateUserID()
	})
}

// SetMissionID sets the "mission_id" field.
func (u *MissionConsumeOrderUpsertOne) SetMissionID(v int64) *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.SetMissionID(v)
	})
}

// UpdateMissionID sets the "mission_id" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsertOne) UpdateMissionID() *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.UpdateMissionID()
	})
}

// SetStatus sets the "status" field.
func (u *MissionConsumeOrderUpsertOne) SetStatus(v enums.MissionOrderStatus) *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsertOne) UpdateStatus() *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.UpdateStatus()
	})
}

// SetPureCep sets the "pure_cep" field.
func (u *MissionConsumeOrderUpsertOne) SetPureCep(v int64) *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.SetPureCep(v)
	})
}

// AddPureCep adds v to the "pure_cep" field.
func (u *MissionConsumeOrderUpsertOne) AddPureCep(v int64) *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.AddPureCep(v)
	})
}

// UpdatePureCep sets the "pure_cep" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsertOne) UpdatePureCep() *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.UpdatePureCep()
	})
}

// SetGiftCep sets the "gift_cep" field.
func (u *MissionConsumeOrderUpsertOne) SetGiftCep(v int64) *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.SetGiftCep(v)
	})
}

// AddGiftCep adds v to the "gift_cep" field.
func (u *MissionConsumeOrderUpsertOne) AddGiftCep(v int64) *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.AddGiftCep(v)
	})
}

// UpdateGiftCep sets the "gift_cep" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsertOne) UpdateGiftCep() *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.UpdateGiftCep()
	})
}

// SetType sets the "type" field.
func (u *MissionConsumeOrderUpsertOne) SetType(v enums.MissionType) *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsertOne) UpdateType() *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.UpdateType()
	})
}

// SetIsTime sets the "is_time" field.
func (u *MissionConsumeOrderUpsertOne) SetIsTime(v bool) *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.SetIsTime(v)
	})
}

// UpdateIsTime sets the "is_time" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsertOne) UpdateIsTime() *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.UpdateIsTime()
	})
}

// SetCallWay sets the "call_way" field.
func (u *MissionConsumeOrderUpsertOne) SetCallWay(v enums.MissionCallWay) *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.SetCallWay(v)
	})
}

// UpdateCallWay sets the "call_way" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsertOne) UpdateCallWay() *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.UpdateCallWay()
	})
}

// SetSerialNumber sets the "serial_number" field.
func (u *MissionConsumeOrderUpsertOne) SetSerialNumber(v string) *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.SetSerialNumber(v)
	})
}

// UpdateSerialNumber sets the "serial_number" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsertOne) UpdateSerialNumber() *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.UpdateSerialNumber()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *MissionConsumeOrderUpsertOne) SetStartedAt(v time.Time) *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsertOne) UpdateStartedAt() *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.UpdateStartedAt()
	})
}

// SetFinishedAt sets the "finished_at" field.
func (u *MissionConsumeOrderUpsertOne) SetFinishedAt(v time.Time) *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.SetFinishedAt(v)
	})
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsertOne) UpdateFinishedAt() *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.UpdateFinishedAt()
	})
}

// SetMissionBatchID sets the "mission_batch_id" field.
func (u *MissionConsumeOrderUpsertOne) SetMissionBatchID(v int64) *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.SetMissionBatchID(v)
	})
}

// UpdateMissionBatchID sets the "mission_batch_id" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsertOne) UpdateMissionBatchID() *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.UpdateMissionBatchID()
	})
}

// SetMissionBatchNumber sets the "mission_batch_number" field.
func (u *MissionConsumeOrderUpsertOne) SetMissionBatchNumber(v string) *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.SetMissionBatchNumber(v)
	})
}

// UpdateMissionBatchNumber sets the "mission_batch_number" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsertOne) UpdateMissionBatchNumber() *MissionConsumeOrderUpsertOne {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.UpdateMissionBatchNumber()
	})
}

// Exec executes the query.
func (u *MissionConsumeOrderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for MissionConsumeOrderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MissionConsumeOrderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MissionConsumeOrderUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MissionConsumeOrderUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MissionConsumeOrderCreateBulk is the builder for creating many MissionConsumeOrder entities in bulk.
type MissionConsumeOrderCreateBulk struct {
	config
	builders []*MissionConsumeOrderCreate
	conflict []sql.ConflictOption
}

// Save creates the MissionConsumeOrder entities in the database.
func (mcocb *MissionConsumeOrderCreateBulk) Save(ctx context.Context) ([]*MissionConsumeOrder, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcocb.builders))
	nodes := make([]*MissionConsumeOrder, len(mcocb.builders))
	mutators := make([]Mutator, len(mcocb.builders))
	for i := range mcocb.builders {
		func(i int, root context.Context) {
			builder := mcocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MissionConsumeOrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcocb *MissionConsumeOrderCreateBulk) SaveX(ctx context.Context) []*MissionConsumeOrder {
	v, err := mcocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcocb *MissionConsumeOrderCreateBulk) Exec(ctx context.Context) error {
	_, err := mcocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcocb *MissionConsumeOrderCreateBulk) ExecX(ctx context.Context) {
	if err := mcocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MissionConsumeOrder.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MissionConsumeOrderUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (mcocb *MissionConsumeOrderCreateBulk) OnConflict(opts ...sql.ConflictOption) *MissionConsumeOrderUpsertBulk {
	mcocb.conflict = opts
	return &MissionConsumeOrderUpsertBulk{
		create: mcocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MissionConsumeOrder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcocb *MissionConsumeOrderCreateBulk) OnConflictColumns(columns ...string) *MissionConsumeOrderUpsertBulk {
	mcocb.conflict = append(mcocb.conflict, sql.ConflictColumns(columns...))
	return &MissionConsumeOrderUpsertBulk{
		create: mcocb,
	}
}

// MissionConsumeOrderUpsertBulk is the builder for "upsert"-ing
// a bulk of MissionConsumeOrder nodes.
type MissionConsumeOrderUpsertBulk struct {
	create *MissionConsumeOrderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MissionConsumeOrder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(missionconsumeorder.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MissionConsumeOrderUpsertBulk) UpdateNewValues() *MissionConsumeOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(missionconsumeorder.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(missionconsumeorder.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MissionConsumeOrder.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MissionConsumeOrderUpsertBulk) Ignore() *MissionConsumeOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MissionConsumeOrderUpsertBulk) DoNothing() *MissionConsumeOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MissionConsumeOrderCreateBulk.OnConflict
// documentation for more info.
func (u *MissionConsumeOrderUpsertBulk) Update(set func(*MissionConsumeOrderUpsert)) *MissionConsumeOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MissionConsumeOrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *MissionConsumeOrderUpsertBulk) SetCreatedBy(v int64) *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *MissionConsumeOrderUpsertBulk) AddCreatedBy(v int64) *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsertBulk) UpdateCreatedBy() *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MissionConsumeOrderUpsertBulk) SetUpdatedBy(v int64) *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MissionConsumeOrderUpsertBulk) AddUpdatedBy(v int64) *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsertBulk) UpdateUpdatedBy() *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MissionConsumeOrderUpsertBulk) SetUpdatedAt(v time.Time) *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsertBulk) UpdateUpdatedAt() *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MissionConsumeOrderUpsertBulk) SetDeletedAt(v time.Time) *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsertBulk) UpdateDeletedAt() *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *MissionConsumeOrderUpsertBulk) SetUserID(v int64) *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsertBulk) UpdateUserID() *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.UpdateUserID()
	})
}

// SetMissionID sets the "mission_id" field.
func (u *MissionConsumeOrderUpsertBulk) SetMissionID(v int64) *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.SetMissionID(v)
	})
}

// UpdateMissionID sets the "mission_id" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsertBulk) UpdateMissionID() *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.UpdateMissionID()
	})
}

// SetStatus sets the "status" field.
func (u *MissionConsumeOrderUpsertBulk) SetStatus(v enums.MissionOrderStatus) *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsertBulk) UpdateStatus() *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.UpdateStatus()
	})
}

// SetPureCep sets the "pure_cep" field.
func (u *MissionConsumeOrderUpsertBulk) SetPureCep(v int64) *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.SetPureCep(v)
	})
}

// AddPureCep adds v to the "pure_cep" field.
func (u *MissionConsumeOrderUpsertBulk) AddPureCep(v int64) *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.AddPureCep(v)
	})
}

// UpdatePureCep sets the "pure_cep" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsertBulk) UpdatePureCep() *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.UpdatePureCep()
	})
}

// SetGiftCep sets the "gift_cep" field.
func (u *MissionConsumeOrderUpsertBulk) SetGiftCep(v int64) *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.SetGiftCep(v)
	})
}

// AddGiftCep adds v to the "gift_cep" field.
func (u *MissionConsumeOrderUpsertBulk) AddGiftCep(v int64) *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.AddGiftCep(v)
	})
}

// UpdateGiftCep sets the "gift_cep" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsertBulk) UpdateGiftCep() *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.UpdateGiftCep()
	})
}

// SetType sets the "type" field.
func (u *MissionConsumeOrderUpsertBulk) SetType(v enums.MissionType) *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsertBulk) UpdateType() *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.UpdateType()
	})
}

// SetIsTime sets the "is_time" field.
func (u *MissionConsumeOrderUpsertBulk) SetIsTime(v bool) *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.SetIsTime(v)
	})
}

// UpdateIsTime sets the "is_time" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsertBulk) UpdateIsTime() *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.UpdateIsTime()
	})
}

// SetCallWay sets the "call_way" field.
func (u *MissionConsumeOrderUpsertBulk) SetCallWay(v enums.MissionCallWay) *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.SetCallWay(v)
	})
}

// UpdateCallWay sets the "call_way" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsertBulk) UpdateCallWay() *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.UpdateCallWay()
	})
}

// SetSerialNumber sets the "serial_number" field.
func (u *MissionConsumeOrderUpsertBulk) SetSerialNumber(v string) *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.SetSerialNumber(v)
	})
}

// UpdateSerialNumber sets the "serial_number" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsertBulk) UpdateSerialNumber() *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.UpdateSerialNumber()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *MissionConsumeOrderUpsertBulk) SetStartedAt(v time.Time) *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsertBulk) UpdateStartedAt() *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.UpdateStartedAt()
	})
}

// SetFinishedAt sets the "finished_at" field.
func (u *MissionConsumeOrderUpsertBulk) SetFinishedAt(v time.Time) *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.SetFinishedAt(v)
	})
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsertBulk) UpdateFinishedAt() *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.UpdateFinishedAt()
	})
}

// SetMissionBatchID sets the "mission_batch_id" field.
func (u *MissionConsumeOrderUpsertBulk) SetMissionBatchID(v int64) *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.SetMissionBatchID(v)
	})
}

// UpdateMissionBatchID sets the "mission_batch_id" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsertBulk) UpdateMissionBatchID() *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.UpdateMissionBatchID()
	})
}

// SetMissionBatchNumber sets the "mission_batch_number" field.
func (u *MissionConsumeOrderUpsertBulk) SetMissionBatchNumber(v string) *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.SetMissionBatchNumber(v)
	})
}

// UpdateMissionBatchNumber sets the "mission_batch_number" field to the value that was provided on create.
func (u *MissionConsumeOrderUpsertBulk) UpdateMissionBatchNumber() *MissionConsumeOrderUpsertBulk {
	return u.Update(func(s *MissionConsumeOrderUpsert) {
		s.UpdateMissionBatchNumber()
	})
}

// Exec executes the query.
func (u *MissionConsumeOrderUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the MissionConsumeOrderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for MissionConsumeOrderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MissionConsumeOrderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
