// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/rechargecampaignrule"
)

// RechargeCampaignRuleQuery is the builder for querying RechargeCampaignRule entities.
type RechargeCampaignRuleQuery struct {
	config
	ctx        *QueryContext
	order      []rechargecampaignrule.OrderOption
	inters     []Interceptor
	predicates []predicate.RechargeCampaignRule
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RechargeCampaignRuleQuery builder.
func (rcrq *RechargeCampaignRuleQuery) Where(ps ...predicate.RechargeCampaignRule) *RechargeCampaignRuleQuery {
	rcrq.predicates = append(rcrq.predicates, ps...)
	return rcrq
}

// Limit the number of records to be returned by this query.
func (rcrq *RechargeCampaignRuleQuery) Limit(limit int) *RechargeCampaignRuleQuery {
	rcrq.ctx.Limit = &limit
	return rcrq
}

// Offset to start from.
func (rcrq *RechargeCampaignRuleQuery) Offset(offset int) *RechargeCampaignRuleQuery {
	rcrq.ctx.Offset = &offset
	return rcrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rcrq *RechargeCampaignRuleQuery) Unique(unique bool) *RechargeCampaignRuleQuery {
	rcrq.ctx.Unique = &unique
	return rcrq
}

// Order specifies how the records should be ordered.
func (rcrq *RechargeCampaignRuleQuery) Order(o ...rechargecampaignrule.OrderOption) *RechargeCampaignRuleQuery {
	rcrq.order = append(rcrq.order, o...)
	return rcrq
}

// First returns the first RechargeCampaignRule entity from the query.
// Returns a *NotFoundError when no RechargeCampaignRule was found.
func (rcrq *RechargeCampaignRuleQuery) First(ctx context.Context) (*RechargeCampaignRule, error) {
	nodes, err := rcrq.Limit(1).All(setContextOp(ctx, rcrq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{rechargecampaignrule.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rcrq *RechargeCampaignRuleQuery) FirstX(ctx context.Context) *RechargeCampaignRule {
	node, err := rcrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first RechargeCampaignRule ID from the query.
// Returns a *NotFoundError when no RechargeCampaignRule ID was found.
func (rcrq *RechargeCampaignRuleQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = rcrq.Limit(1).IDs(setContextOp(ctx, rcrq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{rechargecampaignrule.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rcrq *RechargeCampaignRuleQuery) FirstIDX(ctx context.Context) int64 {
	id, err := rcrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single RechargeCampaignRule entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one RechargeCampaignRule entity is found.
// Returns a *NotFoundError when no RechargeCampaignRule entities are found.
func (rcrq *RechargeCampaignRuleQuery) Only(ctx context.Context) (*RechargeCampaignRule, error) {
	nodes, err := rcrq.Limit(2).All(setContextOp(ctx, rcrq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{rechargecampaignrule.Label}
	default:
		return nil, &NotSingularError{rechargecampaignrule.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rcrq *RechargeCampaignRuleQuery) OnlyX(ctx context.Context) *RechargeCampaignRule {
	node, err := rcrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only RechargeCampaignRule ID in the query.
// Returns a *NotSingularError when more than one RechargeCampaignRule ID is found.
// Returns a *NotFoundError when no entities are found.
func (rcrq *RechargeCampaignRuleQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = rcrq.Limit(2).IDs(setContextOp(ctx, rcrq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{rechargecampaignrule.Label}
	default:
		err = &NotSingularError{rechargecampaignrule.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rcrq *RechargeCampaignRuleQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := rcrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of RechargeCampaignRules.
func (rcrq *RechargeCampaignRuleQuery) All(ctx context.Context) ([]*RechargeCampaignRule, error) {
	ctx = setContextOp(ctx, rcrq.ctx, "All")
	if err := rcrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*RechargeCampaignRule, *RechargeCampaignRuleQuery]()
	return withInterceptors[[]*RechargeCampaignRule](ctx, rcrq, qr, rcrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rcrq *RechargeCampaignRuleQuery) AllX(ctx context.Context) []*RechargeCampaignRule {
	nodes, err := rcrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of RechargeCampaignRule IDs.
func (rcrq *RechargeCampaignRuleQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if rcrq.ctx.Unique == nil && rcrq.path != nil {
		rcrq.Unique(true)
	}
	ctx = setContextOp(ctx, rcrq.ctx, "IDs")
	if err = rcrq.Select(rechargecampaignrule.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rcrq *RechargeCampaignRuleQuery) IDsX(ctx context.Context) []int64 {
	ids, err := rcrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rcrq *RechargeCampaignRuleQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rcrq.ctx, "Count")
	if err := rcrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rcrq, querierCount[*RechargeCampaignRuleQuery](), rcrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rcrq *RechargeCampaignRuleQuery) CountX(ctx context.Context) int {
	count, err := rcrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rcrq *RechargeCampaignRuleQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rcrq.ctx, "Exist")
	switch _, err := rcrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("cep_ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rcrq *RechargeCampaignRuleQuery) ExistX(ctx context.Context) bool {
	exist, err := rcrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RechargeCampaignRuleQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rcrq *RechargeCampaignRuleQuery) Clone() *RechargeCampaignRuleQuery {
	if rcrq == nil {
		return nil
	}
	return &RechargeCampaignRuleQuery{
		config:     rcrq.config,
		ctx:        rcrq.ctx.Clone(),
		order:      append([]rechargecampaignrule.OrderOption{}, rcrq.order...),
		inters:     append([]Interceptor{}, rcrq.inters...),
		predicates: append([]predicate.RechargeCampaignRule{}, rcrq.predicates...),
		// clone intermediate query.
		sql:  rcrq.sql.Clone(),
		path: rcrq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RechargeCampaignRule.Query().
//		GroupBy(rechargecampaignrule.FieldCreatedBy).
//		Aggregate(cep_ent.Count()).
//		Scan(ctx, &v)
func (rcrq *RechargeCampaignRuleQuery) GroupBy(field string, fields ...string) *RechargeCampaignRuleGroupBy {
	rcrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &RechargeCampaignRuleGroupBy{build: rcrq}
	grbuild.flds = &rcrq.ctx.Fields
	grbuild.label = rechargecampaignrule.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by"`
//	}
//
//	client.RechargeCampaignRule.Query().
//		Select(rechargecampaignrule.FieldCreatedBy).
//		Scan(ctx, &v)
func (rcrq *RechargeCampaignRuleQuery) Select(fields ...string) *RechargeCampaignRuleSelect {
	rcrq.ctx.Fields = append(rcrq.ctx.Fields, fields...)
	sbuild := &RechargeCampaignRuleSelect{RechargeCampaignRuleQuery: rcrq}
	sbuild.label = rechargecampaignrule.Label
	sbuild.flds, sbuild.scan = &rcrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a RechargeCampaignRuleSelect configured with the given aggregations.
func (rcrq *RechargeCampaignRuleQuery) Aggregate(fns ...AggregateFunc) *RechargeCampaignRuleSelect {
	return rcrq.Select().Aggregate(fns...)
}

func (rcrq *RechargeCampaignRuleQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rcrq.inters {
		if inter == nil {
			return fmt.Errorf("cep_ent: uninitialized interceptor (forgotten import cep_ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rcrq); err != nil {
				return err
			}
		}
	}
	for _, f := range rcrq.ctx.Fields {
		if !rechargecampaignrule.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
		}
	}
	if rcrq.path != nil {
		prev, err := rcrq.path(ctx)
		if err != nil {
			return err
		}
		rcrq.sql = prev
	}
	return nil
}

func (rcrq *RechargeCampaignRuleQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*RechargeCampaignRule, error) {
	var (
		nodes = []*RechargeCampaignRule{}
		_spec = rcrq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*RechargeCampaignRule).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &RechargeCampaignRule{config: rcrq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rcrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (rcrq *RechargeCampaignRuleQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rcrq.querySpec()
	_spec.Node.Columns = rcrq.ctx.Fields
	if len(rcrq.ctx.Fields) > 0 {
		_spec.Unique = rcrq.ctx.Unique != nil && *rcrq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, rcrq.driver, _spec)
}

func (rcrq *RechargeCampaignRuleQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(rechargecampaignrule.Table, rechargecampaignrule.Columns, sqlgraph.NewFieldSpec(rechargecampaignrule.FieldID, field.TypeInt64))
	_spec.From = rcrq.sql
	if unique := rcrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rcrq.path != nil {
		_spec.Unique = true
	}
	if fields := rcrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rechargecampaignrule.FieldID)
		for i := range fields {
			if fields[i] != rechargecampaignrule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := rcrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rcrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rcrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rcrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rcrq *RechargeCampaignRuleQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rcrq.driver.Dialect())
	t1 := builder.Table(rechargecampaignrule.Table)
	columns := rcrq.ctx.Fields
	if len(columns) == 0 {
		columns = rechargecampaignrule.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rcrq.sql != nil {
		selector = rcrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rcrq.ctx.Unique != nil && *rcrq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range rcrq.predicates {
		p(selector)
	}
	for _, p := range rcrq.order {
		p(selector)
	}
	if offset := rcrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rcrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// RechargeCampaignRuleGroupBy is the group-by builder for RechargeCampaignRule entities.
type RechargeCampaignRuleGroupBy struct {
	selector
	build *RechargeCampaignRuleQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rcrgb *RechargeCampaignRuleGroupBy) Aggregate(fns ...AggregateFunc) *RechargeCampaignRuleGroupBy {
	rcrgb.fns = append(rcrgb.fns, fns...)
	return rcrgb
}

// Scan applies the selector query and scans the result into the given value.
func (rcrgb *RechargeCampaignRuleGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rcrgb.build.ctx, "GroupBy")
	if err := rcrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RechargeCampaignRuleQuery, *RechargeCampaignRuleGroupBy](ctx, rcrgb.build, rcrgb, rcrgb.build.inters, v)
}

func (rcrgb *RechargeCampaignRuleGroupBy) sqlScan(ctx context.Context, root *RechargeCampaignRuleQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rcrgb.fns))
	for _, fn := range rcrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rcrgb.flds)+len(rcrgb.fns))
		for _, f := range *rcrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rcrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rcrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// RechargeCampaignRuleSelect is the builder for selecting fields of RechargeCampaignRule entities.
type RechargeCampaignRuleSelect struct {
	*RechargeCampaignRuleQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rcrs *RechargeCampaignRuleSelect) Aggregate(fns ...AggregateFunc) *RechargeCampaignRuleSelect {
	rcrs.fns = append(rcrs.fns, fns...)
	return rcrs
}

// Scan applies the selector query and scans the result into the given value.
func (rcrs *RechargeCampaignRuleSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rcrs.ctx, "Select")
	if err := rcrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RechargeCampaignRuleQuery, *RechargeCampaignRuleSelect](ctx, rcrs.RechargeCampaignRuleQuery, rcrs, rcrs.inters, v)
}

func (rcrs *RechargeCampaignRuleSelect) sqlScan(ctx context.Context, root *RechargeCampaignRuleQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rcrs.fns))
	for _, fn := range rcrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rcrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rcrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
