// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/withdrawaccount"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// 提现账户，用来提供提现渠道
type WithdrawAccount struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建者 ID
	CreatedBy int64 `json:"created_by"`
	// 更新者 ID
	UpdatedBy int64 `json:"updated_by"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// 外键用户 id
	UserID int64 `json:"user_id,string"`
	// 威付通商户名称
	BusinessName string `json:"business_name"`
	// 商户 id
	BusinessID int64 `json:"business_id"`
	// 商户类型
	BusinessType enums.BusinessType `json:"business_type"`
	// 身份证号码
	IDCard string `json:"id_card"`
	// 个人商户名称
	PersonalName string `json:"personal_name"`
	// 个人商户手机号
	Phone string `json:"phone"`
	// 银行卡号
	BankCardNumber string `json:"bank_card_number"`
	// 开户支行
	Bank string `json:"bank"`
	// 提现方式
	Way enums.TransferOrderType `json:"way"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WithdrawAccountQuery when eager-loading is set.
	Edges        WithdrawAccountEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WithdrawAccountEdges holds the relations/edges for other nodes in the graph.
type WithdrawAccountEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WithdrawAccountEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WithdrawAccount) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case withdrawaccount.FieldID, withdrawaccount.FieldCreatedBy, withdrawaccount.FieldUpdatedBy, withdrawaccount.FieldUserID, withdrawaccount.FieldBusinessID:
			values[i] = new(sql.NullInt64)
		case withdrawaccount.FieldBusinessName, withdrawaccount.FieldBusinessType, withdrawaccount.FieldIDCard, withdrawaccount.FieldPersonalName, withdrawaccount.FieldPhone, withdrawaccount.FieldBankCardNumber, withdrawaccount.FieldBank, withdrawaccount.FieldWay:
			values[i] = new(sql.NullString)
		case withdrawaccount.FieldCreatedAt, withdrawaccount.FieldUpdatedAt, withdrawaccount.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WithdrawAccount fields.
func (wa *WithdrawAccount) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case withdrawaccount.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wa.ID = int64(value.Int64)
		case withdrawaccount.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				wa.CreatedBy = value.Int64
			}
		case withdrawaccount.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				wa.UpdatedBy = value.Int64
			}
		case withdrawaccount.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wa.CreatedAt = value.Time
			}
		case withdrawaccount.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wa.UpdatedAt = value.Time
			}
		case withdrawaccount.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				wa.DeletedAt = value.Time
			}
		case withdrawaccount.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				wa.UserID = value.Int64
			}
		case withdrawaccount.FieldBusinessName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field business_name", values[i])
			} else if value.Valid {
				wa.BusinessName = value.String
			}
		case withdrawaccount.FieldBusinessID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field business_id", values[i])
			} else if value.Valid {
				wa.BusinessID = value.Int64
			}
		case withdrawaccount.FieldBusinessType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field business_type", values[i])
			} else if value.Valid {
				wa.BusinessType = enums.BusinessType(value.String)
			}
		case withdrawaccount.FieldIDCard:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id_card", values[i])
			} else if value.Valid {
				wa.IDCard = value.String
			}
		case withdrawaccount.FieldPersonalName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field personal_name", values[i])
			} else if value.Valid {
				wa.PersonalName = value.String
			}
		case withdrawaccount.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				wa.Phone = value.String
			}
		case withdrawaccount.FieldBankCardNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bank_card_number", values[i])
			} else if value.Valid {
				wa.BankCardNumber = value.String
			}
		case withdrawaccount.FieldBank:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bank", values[i])
			} else if value.Valid {
				wa.Bank = value.String
			}
		case withdrawaccount.FieldWay:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field way", values[i])
			} else if value.Valid {
				wa.Way = enums.TransferOrderType(value.String)
			}
		default:
			wa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WithdrawAccount.
// This includes values selected through modifiers, order, etc.
func (wa *WithdrawAccount) Value(name string) (ent.Value, error) {
	return wa.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the WithdrawAccount entity.
func (wa *WithdrawAccount) QueryUser() *UserQuery {
	return NewWithdrawAccountClient(wa.config).QueryUser(wa)
}

// Update returns a builder for updating this WithdrawAccount.
// Note that you need to call WithdrawAccount.Unwrap() before calling this method if this WithdrawAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (wa *WithdrawAccount) Update() *WithdrawAccountUpdateOne {
	return NewWithdrawAccountClient(wa.config).UpdateOne(wa)
}

// Unwrap unwraps the WithdrawAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wa *WithdrawAccount) Unwrap() *WithdrawAccount {
	_tx, ok := wa.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: WithdrawAccount is not a transactional entity")
	}
	wa.config.driver = _tx.drv
	return wa
}

// String implements the fmt.Stringer.
func (wa *WithdrawAccount) String() string {
	var builder strings.Builder
	builder.WriteString("WithdrawAccount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wa.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", wa.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", wa.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(wa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(wa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(wa.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", wa.UserID))
	builder.WriteString(", ")
	builder.WriteString("business_name=")
	builder.WriteString(wa.BusinessName)
	builder.WriteString(", ")
	builder.WriteString("business_id=")
	builder.WriteString(fmt.Sprintf("%v", wa.BusinessID))
	builder.WriteString(", ")
	builder.WriteString("business_type=")
	builder.WriteString(fmt.Sprintf("%v", wa.BusinessType))
	builder.WriteString(", ")
	builder.WriteString("id_card=")
	builder.WriteString(wa.IDCard)
	builder.WriteString(", ")
	builder.WriteString("personal_name=")
	builder.WriteString(wa.PersonalName)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(wa.Phone)
	builder.WriteString(", ")
	builder.WriteString("bank_card_number=")
	builder.WriteString(wa.BankCardNumber)
	builder.WriteString(", ")
	builder.WriteString("bank=")
	builder.WriteString(wa.Bank)
	builder.WriteString(", ")
	builder.WriteString("way=")
	builder.WriteString(fmt.Sprintf("%v", wa.Way))
	builder.WriteByte(')')
	return builder.String()
}

// WithdrawAccounts is a parsable slice of WithdrawAccount.
type WithdrawAccounts []*WithdrawAccount
