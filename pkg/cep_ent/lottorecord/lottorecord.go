// Code generated by ent, DO NOT EDIT.

package lottorecord

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the lottorecord type in the database.
	Label = "lotto_record"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldLottoID holds the string denoting the lotto_id field in the database.
	FieldLottoID = "lotto_id"
	// FieldResult holds the string denoting the result field in the database.
	FieldResult = "result"
	// FieldLottoPrizeID holds the string denoting the lotto_prize_id field in the database.
	FieldLottoPrizeID = "lotto_prize_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldRemainLottoCount holds the string denoting the remain_lotto_count field in the database.
	FieldRemainLottoCount = "remain_lotto_count"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeLotto holds the string denoting the lotto edge name in mutations.
	EdgeLotto = "lotto"
	// EdgeLottoPrize holds the string denoting the lotto_prize edge name in mutations.
	EdgeLottoPrize = "lotto_prize"
	// Table holds the table name of the lottorecord in the database.
	Table = "lotto_records"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "lotto_records"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// LottoTable is the table that holds the lotto relation/edge.
	LottoTable = "lotto_records"
	// LottoInverseTable is the table name for the Lotto entity.
	// It exists in this package in order to avoid circular dependency with the "lotto" package.
	LottoInverseTable = "lottos"
	// LottoColumn is the table column denoting the lotto relation/edge.
	LottoColumn = "lotto_id"
	// LottoPrizeTable is the table that holds the lotto_prize relation/edge.
	LottoPrizeTable = "lotto_records"
	// LottoPrizeInverseTable is the table name for the LottoPrize entity.
	// It exists in this package in order to avoid circular dependency with the "lottoprize" package.
	LottoPrizeInverseTable = "prizes"
	// LottoPrizeColumn is the table column denoting the lotto_prize relation/edge.
	LottoPrizeColumn = "lotto_prize_id"
)

// Columns holds all SQL columns for lottorecord fields.
var Columns = []string{
	FieldID,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldUserID,
	FieldLottoID,
	FieldResult,
	FieldLottoPrizeID,
	FieldStatus,
	FieldRemainLottoCount,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedBy holds the default value on creation for the "created_by" field.
	DefaultCreatedBy int64
	// DefaultUpdatedBy holds the default value on creation for the "updated_by" field.
	DefaultUpdatedBy int64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt time.Time
	// DefaultUserID holds the default value on creation for the "user_id" field.
	DefaultUserID int64
	// DefaultLottoID holds the default value on creation for the "lotto_id" field.
	DefaultLottoID int64
	// DefaultLottoPrizeID holds the default value on creation for the "lotto_prize_id" field.
	DefaultLottoPrizeID int64
	// DefaultRemainLottoCount holds the default value on creation for the "remain_lotto_count" field.
	DefaultRemainLottoCount int64
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
)

// Result defines the type for the "result" enum field.
type Result string

// ResultUnknow is the default value of the Result enum.
const DefaultResult = ResultUnknow

// Result values.
const (
	ResultUnknow  Result = "unknow"
	ResultWinning Result = "winning"
	ResultLosing  Result = "losing"
	ResultFailed  Result = "failed"
)

func (r Result) String() string {
	return string(r)
}

// ResultValidator is a validator for the "result" field enum values. It is called by the builders before save.
func ResultValidator(r Result) error {
	switch r {
	case ResultUnknow, ResultWinning, ResultLosing, ResultFailed:
		return nil
	default:
		return fmt.Errorf("lottorecord: invalid enum value for result field: %q", r)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// StatusWaiting is the default value of the Status enum.
const DefaultStatus = StatusWaiting

// Status values.
const (
	StatusWaiting  Status = "waiting"
	StatusGranted  Status = "granted"
	StatusNotGrant Status = "not_grant"
	StatusInvalid  Status = "invalid"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusWaiting, StatusGranted, StatusNotGrant, StatusInvalid:
		return nil
	default:
		return fmt.Errorf("lottorecord: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the LottoRecord queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByLottoID orders the results by the lotto_id field.
func ByLottoID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLottoID, opts...).ToFunc()
}

// ByResult orders the results by the result field.
func ByResult(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResult, opts...).ToFunc()
}

// ByLottoPrizeID orders the results by the lotto_prize_id field.
func ByLottoPrizeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLottoPrizeID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByRemainLottoCount orders the results by the remain_lotto_count field.
func ByRemainLottoCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemainLottoCount, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByLottoField orders the results by lotto field.
func ByLottoField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLottoStep(), sql.OrderByField(field, opts...))
	}
}

// ByLottoPrizeField orders the results by lotto_prize field.
func ByLottoPrizeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLottoPrizeStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newLottoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LottoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, LottoTable, LottoColumn),
	)
}
func newLottoPrizeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LottoPrizeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, LottoPrizeTable, LottoPrizeColumn),
	)
}
