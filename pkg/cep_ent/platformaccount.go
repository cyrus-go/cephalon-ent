// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/platformaccount"
)

// 平台账户，被 wallets 和 symbols 取代，使用特殊的 user_id 表示平台账户
type PlatformAccount struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建者 ID
	CreatedBy int64 `json:"created_by"`
	// 更新者 ID
	UpdatedBy int64 `json:"updated_by"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// Type holds the value of the "type" field.
	Type platformaccount.Type `json:"type"`
	// 累计总余额
	SumTotalCep int64 `json:"sum_total_cep"`
	// 剩余总余额
	TotalCep int64 `json:"total_cep"`
	// 累计本金
	SumPureCep int64 `json:"sum_pure_cep"`
	// 剩余本金
	PureCep int64 `json:"pure_cep"`
	// 累计赠金
	SumGiftCep int64 `json:"sum_gift_cep"`
	// 剩余赠金
	GiftCep int64 `json:"gift_cep"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlatformAccountQuery when eager-loading is set.
	Edges        PlatformAccountEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PlatformAccountEdges holds the relations/edges for other nodes in the graph.
type PlatformAccountEdges struct {
	// EarnBills holds the value of the earn_bills edge.
	EarnBills []*EarnBill `json:"earn_bills,omitempty"`
	// CostBills holds the value of the cost_bills edge.
	CostBills []*CostBill `json:"cost_bills,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EarnBillsOrErr returns the EarnBills value or an error if the edge
// was not loaded in eager-loading.
func (e PlatformAccountEdges) EarnBillsOrErr() ([]*EarnBill, error) {
	if e.loadedTypes[0] {
		return e.EarnBills, nil
	}
	return nil, &NotLoadedError{edge: "earn_bills"}
}

// CostBillsOrErr returns the CostBills value or an error if the edge
// was not loaded in eager-loading.
func (e PlatformAccountEdges) CostBillsOrErr() ([]*CostBill, error) {
	if e.loadedTypes[1] {
		return e.CostBills, nil
	}
	return nil, &NotLoadedError{edge: "cost_bills"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PlatformAccount) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case platformaccount.FieldID, platformaccount.FieldCreatedBy, platformaccount.FieldUpdatedBy, platformaccount.FieldSumTotalCep, platformaccount.FieldTotalCep, platformaccount.FieldSumPureCep, platformaccount.FieldPureCep, platformaccount.FieldSumGiftCep, platformaccount.FieldGiftCep:
			values[i] = new(sql.NullInt64)
		case platformaccount.FieldType:
			values[i] = new(sql.NullString)
		case platformaccount.FieldCreatedAt, platformaccount.FieldUpdatedAt, platformaccount.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PlatformAccount fields.
func (pa *PlatformAccount) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case platformaccount.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = int64(value.Int64)
		case platformaccount.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				pa.CreatedBy = value.Int64
			}
		case platformaccount.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				pa.UpdatedBy = value.Int64
			}
		case platformaccount.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pa.CreatedAt = value.Time
			}
		case platformaccount.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pa.UpdatedAt = value.Time
			}
		case platformaccount.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pa.DeletedAt = value.Time
			}
		case platformaccount.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pa.Type = platformaccount.Type(value.String)
			}
		case platformaccount.FieldSumTotalCep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sum_total_cep", values[i])
			} else if value.Valid {
				pa.SumTotalCep = value.Int64
			}
		case platformaccount.FieldTotalCep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_cep", values[i])
			} else if value.Valid {
				pa.TotalCep = value.Int64
			}
		case platformaccount.FieldSumPureCep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sum_pure_cep", values[i])
			} else if value.Valid {
				pa.SumPureCep = value.Int64
			}
		case platformaccount.FieldPureCep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pure_cep", values[i])
			} else if value.Valid {
				pa.PureCep = value.Int64
			}
		case platformaccount.FieldSumGiftCep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sum_gift_cep", values[i])
			} else if value.Valid {
				pa.SumGiftCep = value.Int64
			}
		case platformaccount.FieldGiftCep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gift_cep", values[i])
			} else if value.Valid {
				pa.GiftCep = value.Int64
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PlatformAccount.
// This includes values selected through modifiers, order, etc.
func (pa *PlatformAccount) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// QueryEarnBills queries the "earn_bills" edge of the PlatformAccount entity.
func (pa *PlatformAccount) QueryEarnBills() *EarnBillQuery {
	return NewPlatformAccountClient(pa.config).QueryEarnBills(pa)
}

// QueryCostBills queries the "cost_bills" edge of the PlatformAccount entity.
func (pa *PlatformAccount) QueryCostBills() *CostBillQuery {
	return NewPlatformAccountClient(pa.config).QueryCostBills(pa)
}

// Update returns a builder for updating this PlatformAccount.
// Note that you need to call PlatformAccount.Unwrap() before calling this method if this PlatformAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *PlatformAccount) Update() *PlatformAccountUpdateOne {
	return NewPlatformAccountClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the PlatformAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *PlatformAccount) Unwrap() *PlatformAccount {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: PlatformAccount is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *PlatformAccount) String() string {
	var builder strings.Builder
	builder.WriteString("PlatformAccount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", pa.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", pa.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(pa.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", pa.Type))
	builder.WriteString(", ")
	builder.WriteString("sum_total_cep=")
	builder.WriteString(fmt.Sprintf("%v", pa.SumTotalCep))
	builder.WriteString(", ")
	builder.WriteString("total_cep=")
	builder.WriteString(fmt.Sprintf("%v", pa.TotalCep))
	builder.WriteString(", ")
	builder.WriteString("sum_pure_cep=")
	builder.WriteString(fmt.Sprintf("%v", pa.SumPureCep))
	builder.WriteString(", ")
	builder.WriteString("pure_cep=")
	builder.WriteString(fmt.Sprintf("%v", pa.PureCep))
	builder.WriteString(", ")
	builder.WriteString("sum_gift_cep=")
	builder.WriteString(fmt.Sprintf("%v", pa.SumGiftCep))
	builder.WriteString(", ")
	builder.WriteString("gift_cep=")
	builder.WriteString(fmt.Sprintf("%v", pa.GiftCep))
	builder.WriteByte(')')
	return builder.String()
}

// PlatformAccounts is a parsable slice of PlatformAccount.
type PlatformAccounts []*PlatformAccount
