// Code generated by ent, DO NOT EDIT.

package extraservice

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

const (
	// Label holds the string label denoting the extraservice type in the database.
	Label = "extra_service"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldExtraServiceType holds the string denoting the extra_service_type field in the database.
	FieldExtraServiceType = "extra_service_type"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldFinishedAt holds the string denoting the finished_at field in the database.
	FieldFinishedAt = "finished_at"
	// EdgeMissions holds the string denoting the missions edge name in mutations.
	EdgeMissions = "missions"
	// EdgeMissionExtraServices holds the string denoting the mission_extra_services edge name in mutations.
	EdgeMissionExtraServices = "mission_extra_services"
	// EdgeExtraServicePrices holds the string denoting the extra_service_prices edge name in mutations.
	EdgeExtraServicePrices = "extra_service_prices"
	// Table holds the table name of the extraservice in the database.
	Table = "extra_services"
	// MissionsTable is the table that holds the missions relation/edge.
	MissionsTable = "missions"
	// MissionsInverseTable is the table name for the Mission entity.
	// It exists in this package in order to avoid circular dependency with the "mission" package.
	MissionsInverseTable = "missions"
	// MissionsColumn is the table column denoting the missions relation/edge.
	MissionsColumn = "extra_service_missions"
	// MissionExtraServicesTable is the table that holds the mission_extra_services relation/edge.
	MissionExtraServicesTable = "mission_extra_services"
	// MissionExtraServicesInverseTable is the table name for the MissionExtraService entity.
	// It exists in this package in order to avoid circular dependency with the "missionextraservice" package.
	MissionExtraServicesInverseTable = "mission_extra_services"
	// MissionExtraServicesColumn is the table column denoting the mission_extra_services relation/edge.
	MissionExtraServicesColumn = "extra_service_id"
	// ExtraServicePricesTable is the table that holds the extra_service_prices relation/edge.
	ExtraServicePricesTable = "extra_service_prices"
	// ExtraServicePricesInverseTable is the table name for the ExtraServicePrice entity.
	// It exists in this package in order to avoid circular dependency with the "extraserviceprice" package.
	ExtraServicePricesInverseTable = "extra_service_prices"
	// ExtraServicePricesColumn is the table column denoting the extra_service_prices relation/edge.
	ExtraServicePricesColumn = "extra_service_id"
)

// Columns holds all SQL columns for extraservice fields.
var Columns = []string{
	FieldID,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldName,
	FieldExtraServiceType,
	FieldStartedAt,
	FieldFinishedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "extra_services"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"mission_extra_services",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedBy holds the default value on creation for the "created_by" field.
	DefaultCreatedBy int64
	// DefaultUpdatedBy holds the default value on creation for the "updated_by" field.
	DefaultUpdatedBy int64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt time.Time
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
)

const DefaultExtraServiceType enums.ExtraServiceType = "unknown"

// ExtraServiceTypeValidator is a validator for the "extra_service_type" field enum values. It is called by the builders before save.
func ExtraServiceTypeValidator(est enums.ExtraServiceType) error {
	switch est {
	case "unknown", "vpn":
		return nil
	default:
		return fmt.Errorf("extraservice: invalid enum value for extra_service_type field: %q", est)
	}
}

// OrderOption defines the ordering options for the ExtraService queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByExtraServiceType orders the results by the extra_service_type field.
func ByExtraServiceType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExtraServiceType, opts...).ToFunc()
}

// ByStartedAt orders the results by the started_at field.
func ByStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedAt, opts...).ToFunc()
}

// ByFinishedAt orders the results by the finished_at field.
func ByFinishedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinishedAt, opts...).ToFunc()
}

// ByMissionsCount orders the results by missions count.
func ByMissionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMissionsStep(), opts...)
	}
}

// ByMissions orders the results by missions terms.
func ByMissions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMissionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMissionExtraServicesCount orders the results by mission_extra_services count.
func ByMissionExtraServicesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMissionExtraServicesStep(), opts...)
	}
}

// ByMissionExtraServices orders the results by mission_extra_services terms.
func ByMissionExtraServices(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMissionExtraServicesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExtraServicePricesCount orders the results by extra_service_prices count.
func ByExtraServicePricesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExtraServicePricesStep(), opts...)
	}
}

// ByExtraServicePrices orders the results by extra_service_prices terms.
func ByExtraServicePrices(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExtraServicePricesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMissionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MissionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MissionsTable, MissionsColumn),
	)
}
func newMissionExtraServicesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MissionExtraServicesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MissionExtraServicesTable, MissionExtraServicesColumn),
	)
}
func newExtraServicePricesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExtraServicePricesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExtraServicePricesTable, ExtraServicePricesColumn),
	)
}
