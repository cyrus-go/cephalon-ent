// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/earnbill"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionproduceorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/platformaccount"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/profitaccount"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
)

// EarnBillUpdate is the builder for updating EarnBill entities.
type EarnBillUpdate struct {
	config
	hooks     []Hook
	mutation  *EarnBillMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EarnBillUpdate builder.
func (ebu *EarnBillUpdate) Where(ps ...predicate.EarnBill) *EarnBillUpdate {
	ebu.mutation.Where(ps...)
	return ebu
}

// SetCreatedBy sets the "created_by" field.
func (ebu *EarnBillUpdate) SetCreatedBy(i int64) *EarnBillUpdate {
	ebu.mutation.ResetCreatedBy()
	ebu.mutation.SetCreatedBy(i)
	return ebu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ebu *EarnBillUpdate) SetNillableCreatedBy(i *int64) *EarnBillUpdate {
	if i != nil {
		ebu.SetCreatedBy(*i)
	}
	return ebu
}

// AddCreatedBy adds i to the "created_by" field.
func (ebu *EarnBillUpdate) AddCreatedBy(i int64) *EarnBillUpdate {
	ebu.mutation.AddCreatedBy(i)
	return ebu
}

// SetUpdatedBy sets the "updated_by" field.
func (ebu *EarnBillUpdate) SetUpdatedBy(i int64) *EarnBillUpdate {
	ebu.mutation.ResetUpdatedBy()
	ebu.mutation.SetUpdatedBy(i)
	return ebu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ebu *EarnBillUpdate) SetNillableUpdatedBy(i *int64) *EarnBillUpdate {
	if i != nil {
		ebu.SetUpdatedBy(*i)
	}
	return ebu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (ebu *EarnBillUpdate) AddUpdatedBy(i int64) *EarnBillUpdate {
	ebu.mutation.AddUpdatedBy(i)
	return ebu
}

// SetUpdatedAt sets the "updated_at" field.
func (ebu *EarnBillUpdate) SetUpdatedAt(t time.Time) *EarnBillUpdate {
	ebu.mutation.SetUpdatedAt(t)
	return ebu
}

// SetDeletedAt sets the "deleted_at" field.
func (ebu *EarnBillUpdate) SetDeletedAt(t time.Time) *EarnBillUpdate {
	ebu.mutation.SetDeletedAt(t)
	return ebu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ebu *EarnBillUpdate) SetNillableDeletedAt(t *time.Time) *EarnBillUpdate {
	if t != nil {
		ebu.SetDeletedAt(*t)
	}
	return ebu
}

// SetType sets the "type" field.
func (ebu *EarnBillUpdate) SetType(e earnbill.Type) *EarnBillUpdate {
	ebu.mutation.SetType(e)
	return ebu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ebu *EarnBillUpdate) SetNillableType(e *earnbill.Type) *EarnBillUpdate {
	if e != nil {
		ebu.SetType(*e)
	}
	return ebu
}

// SetIsMinus sets the "is_minus" field.
func (ebu *EarnBillUpdate) SetIsMinus(b bool) *EarnBillUpdate {
	ebu.mutation.SetIsMinus(b)
	return ebu
}

// SetNillableIsMinus sets the "is_minus" field if the given value is not nil.
func (ebu *EarnBillUpdate) SetNillableIsMinus(b *bool) *EarnBillUpdate {
	if b != nil {
		ebu.SetIsMinus(*b)
	}
	return ebu
}

// SetUserID sets the "user_id" field.
func (ebu *EarnBillUpdate) SetUserID(i int64) *EarnBillUpdate {
	ebu.mutation.SetUserID(i)
	return ebu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ebu *EarnBillUpdate) SetNillableUserID(i *int64) *EarnBillUpdate {
	if i != nil {
		ebu.SetUserID(*i)
	}
	return ebu
}

// SetSerialNumber sets the "serial_number" field.
func (ebu *EarnBillUpdate) SetSerialNumber(s string) *EarnBillUpdate {
	ebu.mutation.SetSerialNumber(s)
	return ebu
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (ebu *EarnBillUpdate) SetNillableSerialNumber(s *string) *EarnBillUpdate {
	if s != nil {
		ebu.SetSerialNumber(*s)
	}
	return ebu
}

// SetProfitAccountID sets the "profit_account_id" field.
func (ebu *EarnBillUpdate) SetProfitAccountID(i int64) *EarnBillUpdate {
	ebu.mutation.SetProfitAccountID(i)
	return ebu
}

// SetNillableProfitAccountID sets the "profit_account_id" field if the given value is not nil.
func (ebu *EarnBillUpdate) SetNillableProfitAccountID(i *int64) *EarnBillUpdate {
	if i != nil {
		ebu.SetProfitAccountID(*i)
	}
	return ebu
}

// SetPureCep sets the "pure_cep" field.
func (ebu *EarnBillUpdate) SetPureCep(i int64) *EarnBillUpdate {
	ebu.mutation.ResetPureCep()
	ebu.mutation.SetPureCep(i)
	return ebu
}

// SetNillablePureCep sets the "pure_cep" field if the given value is not nil.
func (ebu *EarnBillUpdate) SetNillablePureCep(i *int64) *EarnBillUpdate {
	if i != nil {
		ebu.SetPureCep(*i)
	}
	return ebu
}

// AddPureCep adds i to the "pure_cep" field.
func (ebu *EarnBillUpdate) AddPureCep(i int64) *EarnBillUpdate {
	ebu.mutation.AddPureCep(i)
	return ebu
}

// SetGiftCep sets the "gift_cep" field.
func (ebu *EarnBillUpdate) SetGiftCep(i int64) *EarnBillUpdate {
	ebu.mutation.ResetGiftCep()
	ebu.mutation.SetGiftCep(i)
	return ebu
}

// SetNillableGiftCep sets the "gift_cep" field if the given value is not nil.
func (ebu *EarnBillUpdate) SetNillableGiftCep(i *int64) *EarnBillUpdate {
	if i != nil {
		ebu.SetGiftCep(*i)
	}
	return ebu
}

// AddGiftCep adds i to the "gift_cep" field.
func (ebu *EarnBillUpdate) AddGiftCep(i int64) *EarnBillUpdate {
	ebu.mutation.AddGiftCep(i)
	return ebu
}

// SetPlatformAccountID sets the "platform_account_id" field.
func (ebu *EarnBillUpdate) SetPlatformAccountID(i int64) *EarnBillUpdate {
	ebu.mutation.SetPlatformAccountID(i)
	return ebu
}

// SetNillablePlatformAccountID sets the "platform_account_id" field if the given value is not nil.
func (ebu *EarnBillUpdate) SetNillablePlatformAccountID(i *int64) *EarnBillUpdate {
	if i != nil {
		ebu.SetPlatformAccountID(*i)
	}
	return ebu
}

// SetPlatformPureCep sets the "platform_pure_cep" field.
func (ebu *EarnBillUpdate) SetPlatformPureCep(i int64) *EarnBillUpdate {
	ebu.mutation.ResetPlatformPureCep()
	ebu.mutation.SetPlatformPureCep(i)
	return ebu
}

// SetNillablePlatformPureCep sets the "platform_pure_cep" field if the given value is not nil.
func (ebu *EarnBillUpdate) SetNillablePlatformPureCep(i *int64) *EarnBillUpdate {
	if i != nil {
		ebu.SetPlatformPureCep(*i)
	}
	return ebu
}

// AddPlatformPureCep adds i to the "platform_pure_cep" field.
func (ebu *EarnBillUpdate) AddPlatformPureCep(i int64) *EarnBillUpdate {
	ebu.mutation.AddPlatformPureCep(i)
	return ebu
}

// SetPlatformGiftCep sets the "platform_gift_cep" field.
func (ebu *EarnBillUpdate) SetPlatformGiftCep(i int64) *EarnBillUpdate {
	ebu.mutation.ResetPlatformGiftCep()
	ebu.mutation.SetPlatformGiftCep(i)
	return ebu
}

// SetNillablePlatformGiftCep sets the "platform_gift_cep" field if the given value is not nil.
func (ebu *EarnBillUpdate) SetNillablePlatformGiftCep(i *int64) *EarnBillUpdate {
	if i != nil {
		ebu.SetPlatformGiftCep(*i)
	}
	return ebu
}

// AddPlatformGiftCep adds i to the "platform_gift_cep" field.
func (ebu *EarnBillUpdate) AddPlatformGiftCep(i int64) *EarnBillUpdate {
	ebu.mutation.AddPlatformGiftCep(i)
	return ebu
}

// SetReasonID sets the "reason_id" field.
func (ebu *EarnBillUpdate) SetReasonID(i int64) *EarnBillUpdate {
	ebu.mutation.SetReasonID(i)
	return ebu
}

// SetNillableReasonID sets the "reason_id" field if the given value is not nil.
func (ebu *EarnBillUpdate) SetNillableReasonID(i *int64) *EarnBillUpdate {
	if i != nil {
		ebu.SetReasonID(*i)
	}
	return ebu
}

// ClearReasonID clears the value of the "reason_id" field.
func (ebu *EarnBillUpdate) ClearReasonID() *EarnBillUpdate {
	ebu.mutation.ClearReasonID()
	return ebu
}

// SetUser sets the "user" edge to the User entity.
func (ebu *EarnBillUpdate) SetUser(u *User) *EarnBillUpdate {
	return ebu.SetUserID(u.ID)
}

// SetProfitAccount sets the "profit_account" edge to the ProfitAccount entity.
func (ebu *EarnBillUpdate) SetProfitAccount(p *ProfitAccount) *EarnBillUpdate {
	return ebu.SetProfitAccountID(p.ID)
}

// SetPlatformAccount sets the "platform_account" edge to the PlatformAccount entity.
func (ebu *EarnBillUpdate) SetPlatformAccount(p *PlatformAccount) *EarnBillUpdate {
	return ebu.SetPlatformAccountID(p.ID)
}

// SetMissionProduceOrdersID sets the "mission_produce_orders" edge to the MissionProduceOrder entity by ID.
func (ebu *EarnBillUpdate) SetMissionProduceOrdersID(id int64) *EarnBillUpdate {
	ebu.mutation.SetMissionProduceOrdersID(id)
	return ebu
}

// SetNillableMissionProduceOrdersID sets the "mission_produce_orders" edge to the MissionProduceOrder entity by ID if the given value is not nil.
func (ebu *EarnBillUpdate) SetNillableMissionProduceOrdersID(id *int64) *EarnBillUpdate {
	if id != nil {
		ebu = ebu.SetMissionProduceOrdersID(*id)
	}
	return ebu
}

// SetMissionProduceOrders sets the "mission_produce_orders" edge to the MissionProduceOrder entity.
func (ebu *EarnBillUpdate) SetMissionProduceOrders(m *MissionProduceOrder) *EarnBillUpdate {
	return ebu.SetMissionProduceOrdersID(m.ID)
}

// Mutation returns the EarnBillMutation object of the builder.
func (ebu *EarnBillUpdate) Mutation() *EarnBillMutation {
	return ebu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ebu *EarnBillUpdate) ClearUser() *EarnBillUpdate {
	ebu.mutation.ClearUser()
	return ebu
}

// ClearProfitAccount clears the "profit_account" edge to the ProfitAccount entity.
func (ebu *EarnBillUpdate) ClearProfitAccount() *EarnBillUpdate {
	ebu.mutation.ClearProfitAccount()
	return ebu
}

// ClearPlatformAccount clears the "platform_account" edge to the PlatformAccount entity.
func (ebu *EarnBillUpdate) ClearPlatformAccount() *EarnBillUpdate {
	ebu.mutation.ClearPlatformAccount()
	return ebu
}

// ClearMissionProduceOrders clears the "mission_produce_orders" edge to the MissionProduceOrder entity.
func (ebu *EarnBillUpdate) ClearMissionProduceOrders() *EarnBillUpdate {
	ebu.mutation.ClearMissionProduceOrders()
	return ebu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ebu *EarnBillUpdate) Save(ctx context.Context) (int, error) {
	ebu.defaults()
	return withHooks(ctx, ebu.sqlSave, ebu.mutation, ebu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ebu *EarnBillUpdate) SaveX(ctx context.Context) int {
	affected, err := ebu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ebu *EarnBillUpdate) Exec(ctx context.Context) error {
	_, err := ebu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ebu *EarnBillUpdate) ExecX(ctx context.Context) {
	if err := ebu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ebu *EarnBillUpdate) defaults() {
	if _, ok := ebu.mutation.UpdatedAt(); !ok {
		v := earnbill.UpdateDefaultUpdatedAt()
		ebu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ebu *EarnBillUpdate) check() error {
	if v, ok := ebu.mutation.GetType(); ok {
		if err := earnbill.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "EarnBill.type": %w`, err)}
		}
	}
	if _, ok := ebu.mutation.UserID(); ebu.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "EarnBill.user"`)
	}
	if _, ok := ebu.mutation.ProfitAccountID(); ebu.mutation.ProfitAccountCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "EarnBill.profit_account"`)
	}
	if _, ok := ebu.mutation.PlatformAccountID(); ebu.mutation.PlatformAccountCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "EarnBill.platform_account"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ebu *EarnBillUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EarnBillUpdate {
	ebu.modifiers = append(ebu.modifiers, modifiers...)
	return ebu
}

func (ebu *EarnBillUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ebu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(earnbill.Table, earnbill.Columns, sqlgraph.NewFieldSpec(earnbill.FieldID, field.TypeInt64))
	if ps := ebu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ebu.mutation.CreatedBy(); ok {
		_spec.SetField(earnbill.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := ebu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(earnbill.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := ebu.mutation.UpdatedBy(); ok {
		_spec.SetField(earnbill.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := ebu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(earnbill.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := ebu.mutation.UpdatedAt(); ok {
		_spec.SetField(earnbill.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ebu.mutation.DeletedAt(); ok {
		_spec.SetField(earnbill.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := ebu.mutation.GetType(); ok {
		_spec.SetField(earnbill.FieldType, field.TypeEnum, value)
	}
	if value, ok := ebu.mutation.IsMinus(); ok {
		_spec.SetField(earnbill.FieldIsMinus, field.TypeBool, value)
	}
	if value, ok := ebu.mutation.SerialNumber(); ok {
		_spec.SetField(earnbill.FieldSerialNumber, field.TypeString, value)
	}
	if value, ok := ebu.mutation.PureCep(); ok {
		_spec.SetField(earnbill.FieldPureCep, field.TypeInt64, value)
	}
	if value, ok := ebu.mutation.AddedPureCep(); ok {
		_spec.AddField(earnbill.FieldPureCep, field.TypeInt64, value)
	}
	if value, ok := ebu.mutation.GiftCep(); ok {
		_spec.SetField(earnbill.FieldGiftCep, field.TypeInt64, value)
	}
	if value, ok := ebu.mutation.AddedGiftCep(); ok {
		_spec.AddField(earnbill.FieldGiftCep, field.TypeInt64, value)
	}
	if value, ok := ebu.mutation.PlatformPureCep(); ok {
		_spec.SetField(earnbill.FieldPlatformPureCep, field.TypeInt64, value)
	}
	if value, ok := ebu.mutation.AddedPlatformPureCep(); ok {
		_spec.AddField(earnbill.FieldPlatformPureCep, field.TypeInt64, value)
	}
	if value, ok := ebu.mutation.PlatformGiftCep(); ok {
		_spec.SetField(earnbill.FieldPlatformGiftCep, field.TypeInt64, value)
	}
	if value, ok := ebu.mutation.AddedPlatformGiftCep(); ok {
		_spec.AddField(earnbill.FieldPlatformGiftCep, field.TypeInt64, value)
	}
	if ebu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   earnbill.UserTable,
			Columns: []string{earnbill.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   earnbill.UserTable,
			Columns: []string{earnbill.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ebu.mutation.ProfitAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   earnbill.ProfitAccountTable,
			Columns: []string{earnbill.ProfitAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profitaccount.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebu.mutation.ProfitAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   earnbill.ProfitAccountTable,
			Columns: []string{earnbill.ProfitAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profitaccount.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ebu.mutation.PlatformAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   earnbill.PlatformAccountTable,
			Columns: []string{earnbill.PlatformAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformaccount.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebu.mutation.PlatformAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   earnbill.PlatformAccountTable,
			Columns: []string{earnbill.PlatformAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformaccount.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ebu.mutation.MissionProduceOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   earnbill.MissionProduceOrdersTable,
			Columns: []string{earnbill.MissionProduceOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebu.mutation.MissionProduceOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   earnbill.MissionProduceOrdersTable,
			Columns: []string{earnbill.MissionProduceOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ebu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ebu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{earnbill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ebu.mutation.done = true
	return n, nil
}

// EarnBillUpdateOne is the builder for updating a single EarnBill entity.
type EarnBillUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EarnBillMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedBy sets the "created_by" field.
func (ebuo *EarnBillUpdateOne) SetCreatedBy(i int64) *EarnBillUpdateOne {
	ebuo.mutation.ResetCreatedBy()
	ebuo.mutation.SetCreatedBy(i)
	return ebuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ebuo *EarnBillUpdateOne) SetNillableCreatedBy(i *int64) *EarnBillUpdateOne {
	if i != nil {
		ebuo.SetCreatedBy(*i)
	}
	return ebuo
}

// AddCreatedBy adds i to the "created_by" field.
func (ebuo *EarnBillUpdateOne) AddCreatedBy(i int64) *EarnBillUpdateOne {
	ebuo.mutation.AddCreatedBy(i)
	return ebuo
}

// SetUpdatedBy sets the "updated_by" field.
func (ebuo *EarnBillUpdateOne) SetUpdatedBy(i int64) *EarnBillUpdateOne {
	ebuo.mutation.ResetUpdatedBy()
	ebuo.mutation.SetUpdatedBy(i)
	return ebuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ebuo *EarnBillUpdateOne) SetNillableUpdatedBy(i *int64) *EarnBillUpdateOne {
	if i != nil {
		ebuo.SetUpdatedBy(*i)
	}
	return ebuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (ebuo *EarnBillUpdateOne) AddUpdatedBy(i int64) *EarnBillUpdateOne {
	ebuo.mutation.AddUpdatedBy(i)
	return ebuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ebuo *EarnBillUpdateOne) SetUpdatedAt(t time.Time) *EarnBillUpdateOne {
	ebuo.mutation.SetUpdatedAt(t)
	return ebuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ebuo *EarnBillUpdateOne) SetDeletedAt(t time.Time) *EarnBillUpdateOne {
	ebuo.mutation.SetDeletedAt(t)
	return ebuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ebuo *EarnBillUpdateOne) SetNillableDeletedAt(t *time.Time) *EarnBillUpdateOne {
	if t != nil {
		ebuo.SetDeletedAt(*t)
	}
	return ebuo
}

// SetType sets the "type" field.
func (ebuo *EarnBillUpdateOne) SetType(e earnbill.Type) *EarnBillUpdateOne {
	ebuo.mutation.SetType(e)
	return ebuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ebuo *EarnBillUpdateOne) SetNillableType(e *earnbill.Type) *EarnBillUpdateOne {
	if e != nil {
		ebuo.SetType(*e)
	}
	return ebuo
}

// SetIsMinus sets the "is_minus" field.
func (ebuo *EarnBillUpdateOne) SetIsMinus(b bool) *EarnBillUpdateOne {
	ebuo.mutation.SetIsMinus(b)
	return ebuo
}

// SetNillableIsMinus sets the "is_minus" field if the given value is not nil.
func (ebuo *EarnBillUpdateOne) SetNillableIsMinus(b *bool) *EarnBillUpdateOne {
	if b != nil {
		ebuo.SetIsMinus(*b)
	}
	return ebuo
}

// SetUserID sets the "user_id" field.
func (ebuo *EarnBillUpdateOne) SetUserID(i int64) *EarnBillUpdateOne {
	ebuo.mutation.SetUserID(i)
	return ebuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ebuo *EarnBillUpdateOne) SetNillableUserID(i *int64) *EarnBillUpdateOne {
	if i != nil {
		ebuo.SetUserID(*i)
	}
	return ebuo
}

// SetSerialNumber sets the "serial_number" field.
func (ebuo *EarnBillUpdateOne) SetSerialNumber(s string) *EarnBillUpdateOne {
	ebuo.mutation.SetSerialNumber(s)
	return ebuo
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (ebuo *EarnBillUpdateOne) SetNillableSerialNumber(s *string) *EarnBillUpdateOne {
	if s != nil {
		ebuo.SetSerialNumber(*s)
	}
	return ebuo
}

// SetProfitAccountID sets the "profit_account_id" field.
func (ebuo *EarnBillUpdateOne) SetProfitAccountID(i int64) *EarnBillUpdateOne {
	ebuo.mutation.SetProfitAccountID(i)
	return ebuo
}

// SetNillableProfitAccountID sets the "profit_account_id" field if the given value is not nil.
func (ebuo *EarnBillUpdateOne) SetNillableProfitAccountID(i *int64) *EarnBillUpdateOne {
	if i != nil {
		ebuo.SetProfitAccountID(*i)
	}
	return ebuo
}

// SetPureCep sets the "pure_cep" field.
func (ebuo *EarnBillUpdateOne) SetPureCep(i int64) *EarnBillUpdateOne {
	ebuo.mutation.ResetPureCep()
	ebuo.mutation.SetPureCep(i)
	return ebuo
}

// SetNillablePureCep sets the "pure_cep" field if the given value is not nil.
func (ebuo *EarnBillUpdateOne) SetNillablePureCep(i *int64) *EarnBillUpdateOne {
	if i != nil {
		ebuo.SetPureCep(*i)
	}
	return ebuo
}

// AddPureCep adds i to the "pure_cep" field.
func (ebuo *EarnBillUpdateOne) AddPureCep(i int64) *EarnBillUpdateOne {
	ebuo.mutation.AddPureCep(i)
	return ebuo
}

// SetGiftCep sets the "gift_cep" field.
func (ebuo *EarnBillUpdateOne) SetGiftCep(i int64) *EarnBillUpdateOne {
	ebuo.mutation.ResetGiftCep()
	ebuo.mutation.SetGiftCep(i)
	return ebuo
}

// SetNillableGiftCep sets the "gift_cep" field if the given value is not nil.
func (ebuo *EarnBillUpdateOne) SetNillableGiftCep(i *int64) *EarnBillUpdateOne {
	if i != nil {
		ebuo.SetGiftCep(*i)
	}
	return ebuo
}

// AddGiftCep adds i to the "gift_cep" field.
func (ebuo *EarnBillUpdateOne) AddGiftCep(i int64) *EarnBillUpdateOne {
	ebuo.mutation.AddGiftCep(i)
	return ebuo
}

// SetPlatformAccountID sets the "platform_account_id" field.
func (ebuo *EarnBillUpdateOne) SetPlatformAccountID(i int64) *EarnBillUpdateOne {
	ebuo.mutation.SetPlatformAccountID(i)
	return ebuo
}

// SetNillablePlatformAccountID sets the "platform_account_id" field if the given value is not nil.
func (ebuo *EarnBillUpdateOne) SetNillablePlatformAccountID(i *int64) *EarnBillUpdateOne {
	if i != nil {
		ebuo.SetPlatformAccountID(*i)
	}
	return ebuo
}

// SetPlatformPureCep sets the "platform_pure_cep" field.
func (ebuo *EarnBillUpdateOne) SetPlatformPureCep(i int64) *EarnBillUpdateOne {
	ebuo.mutation.ResetPlatformPureCep()
	ebuo.mutation.SetPlatformPureCep(i)
	return ebuo
}

// SetNillablePlatformPureCep sets the "platform_pure_cep" field if the given value is not nil.
func (ebuo *EarnBillUpdateOne) SetNillablePlatformPureCep(i *int64) *EarnBillUpdateOne {
	if i != nil {
		ebuo.SetPlatformPureCep(*i)
	}
	return ebuo
}

// AddPlatformPureCep adds i to the "platform_pure_cep" field.
func (ebuo *EarnBillUpdateOne) AddPlatformPureCep(i int64) *EarnBillUpdateOne {
	ebuo.mutation.AddPlatformPureCep(i)
	return ebuo
}

// SetPlatformGiftCep sets the "platform_gift_cep" field.
func (ebuo *EarnBillUpdateOne) SetPlatformGiftCep(i int64) *EarnBillUpdateOne {
	ebuo.mutation.ResetPlatformGiftCep()
	ebuo.mutation.SetPlatformGiftCep(i)
	return ebuo
}

// SetNillablePlatformGiftCep sets the "platform_gift_cep" field if the given value is not nil.
func (ebuo *EarnBillUpdateOne) SetNillablePlatformGiftCep(i *int64) *EarnBillUpdateOne {
	if i != nil {
		ebuo.SetPlatformGiftCep(*i)
	}
	return ebuo
}

// AddPlatformGiftCep adds i to the "platform_gift_cep" field.
func (ebuo *EarnBillUpdateOne) AddPlatformGiftCep(i int64) *EarnBillUpdateOne {
	ebuo.mutation.AddPlatformGiftCep(i)
	return ebuo
}

// SetReasonID sets the "reason_id" field.
func (ebuo *EarnBillUpdateOne) SetReasonID(i int64) *EarnBillUpdateOne {
	ebuo.mutation.SetReasonID(i)
	return ebuo
}

// SetNillableReasonID sets the "reason_id" field if the given value is not nil.
func (ebuo *EarnBillUpdateOne) SetNillableReasonID(i *int64) *EarnBillUpdateOne {
	if i != nil {
		ebuo.SetReasonID(*i)
	}
	return ebuo
}

// ClearReasonID clears the value of the "reason_id" field.
func (ebuo *EarnBillUpdateOne) ClearReasonID() *EarnBillUpdateOne {
	ebuo.mutation.ClearReasonID()
	return ebuo
}

// SetUser sets the "user" edge to the User entity.
func (ebuo *EarnBillUpdateOne) SetUser(u *User) *EarnBillUpdateOne {
	return ebuo.SetUserID(u.ID)
}

// SetProfitAccount sets the "profit_account" edge to the ProfitAccount entity.
func (ebuo *EarnBillUpdateOne) SetProfitAccount(p *ProfitAccount) *EarnBillUpdateOne {
	return ebuo.SetProfitAccountID(p.ID)
}

// SetPlatformAccount sets the "platform_account" edge to the PlatformAccount entity.
func (ebuo *EarnBillUpdateOne) SetPlatformAccount(p *PlatformAccount) *EarnBillUpdateOne {
	return ebuo.SetPlatformAccountID(p.ID)
}

// SetMissionProduceOrdersID sets the "mission_produce_orders" edge to the MissionProduceOrder entity by ID.
func (ebuo *EarnBillUpdateOne) SetMissionProduceOrdersID(id int64) *EarnBillUpdateOne {
	ebuo.mutation.SetMissionProduceOrdersID(id)
	return ebuo
}

// SetNillableMissionProduceOrdersID sets the "mission_produce_orders" edge to the MissionProduceOrder entity by ID if the given value is not nil.
func (ebuo *EarnBillUpdateOne) SetNillableMissionProduceOrdersID(id *int64) *EarnBillUpdateOne {
	if id != nil {
		ebuo = ebuo.SetMissionProduceOrdersID(*id)
	}
	return ebuo
}

// SetMissionProduceOrders sets the "mission_produce_orders" edge to the MissionProduceOrder entity.
func (ebuo *EarnBillUpdateOne) SetMissionProduceOrders(m *MissionProduceOrder) *EarnBillUpdateOne {
	return ebuo.SetMissionProduceOrdersID(m.ID)
}

// Mutation returns the EarnBillMutation object of the builder.
func (ebuo *EarnBillUpdateOne) Mutation() *EarnBillMutation {
	return ebuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ebuo *EarnBillUpdateOne) ClearUser() *EarnBillUpdateOne {
	ebuo.mutation.ClearUser()
	return ebuo
}

// ClearProfitAccount clears the "profit_account" edge to the ProfitAccount entity.
func (ebuo *EarnBillUpdateOne) ClearProfitAccount() *EarnBillUpdateOne {
	ebuo.mutation.ClearProfitAccount()
	return ebuo
}

// ClearPlatformAccount clears the "platform_account" edge to the PlatformAccount entity.
func (ebuo *EarnBillUpdateOne) ClearPlatformAccount() *EarnBillUpdateOne {
	ebuo.mutation.ClearPlatformAccount()
	return ebuo
}

// ClearMissionProduceOrders clears the "mission_produce_orders" edge to the MissionProduceOrder entity.
func (ebuo *EarnBillUpdateOne) ClearMissionProduceOrders() *EarnBillUpdateOne {
	ebuo.mutation.ClearMissionProduceOrders()
	return ebuo
}

// Where appends a list predicates to the EarnBillUpdate builder.
func (ebuo *EarnBillUpdateOne) Where(ps ...predicate.EarnBill) *EarnBillUpdateOne {
	ebuo.mutation.Where(ps...)
	return ebuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ebuo *EarnBillUpdateOne) Select(field string, fields ...string) *EarnBillUpdateOne {
	ebuo.fields = append([]string{field}, fields...)
	return ebuo
}

// Save executes the query and returns the updated EarnBill entity.
func (ebuo *EarnBillUpdateOne) Save(ctx context.Context) (*EarnBill, error) {
	ebuo.defaults()
	return withHooks(ctx, ebuo.sqlSave, ebuo.mutation, ebuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ebuo *EarnBillUpdateOne) SaveX(ctx context.Context) *EarnBill {
	node, err := ebuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ebuo *EarnBillUpdateOne) Exec(ctx context.Context) error {
	_, err := ebuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ebuo *EarnBillUpdateOne) ExecX(ctx context.Context) {
	if err := ebuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ebuo *EarnBillUpdateOne) defaults() {
	if _, ok := ebuo.mutation.UpdatedAt(); !ok {
		v := earnbill.UpdateDefaultUpdatedAt()
		ebuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ebuo *EarnBillUpdateOne) check() error {
	if v, ok := ebuo.mutation.GetType(); ok {
		if err := earnbill.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "EarnBill.type": %w`, err)}
		}
	}
	if _, ok := ebuo.mutation.UserID(); ebuo.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "EarnBill.user"`)
	}
	if _, ok := ebuo.mutation.ProfitAccountID(); ebuo.mutation.ProfitAccountCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "EarnBill.profit_account"`)
	}
	if _, ok := ebuo.mutation.PlatformAccountID(); ebuo.mutation.PlatformAccountCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "EarnBill.platform_account"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ebuo *EarnBillUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EarnBillUpdateOne {
	ebuo.modifiers = append(ebuo.modifiers, modifiers...)
	return ebuo
}

func (ebuo *EarnBillUpdateOne) sqlSave(ctx context.Context) (_node *EarnBill, err error) {
	if err := ebuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(earnbill.Table, earnbill.Columns, sqlgraph.NewFieldSpec(earnbill.FieldID, field.TypeInt64))
	id, ok := ebuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "EarnBill.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ebuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, earnbill.FieldID)
		for _, f := range fields {
			if !earnbill.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != earnbill.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ebuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ebuo.mutation.CreatedBy(); ok {
		_spec.SetField(earnbill.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := ebuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(earnbill.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := ebuo.mutation.UpdatedBy(); ok {
		_spec.SetField(earnbill.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := ebuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(earnbill.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := ebuo.mutation.UpdatedAt(); ok {
		_spec.SetField(earnbill.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ebuo.mutation.DeletedAt(); ok {
		_spec.SetField(earnbill.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := ebuo.mutation.GetType(); ok {
		_spec.SetField(earnbill.FieldType, field.TypeEnum, value)
	}
	if value, ok := ebuo.mutation.IsMinus(); ok {
		_spec.SetField(earnbill.FieldIsMinus, field.TypeBool, value)
	}
	if value, ok := ebuo.mutation.SerialNumber(); ok {
		_spec.SetField(earnbill.FieldSerialNumber, field.TypeString, value)
	}
	if value, ok := ebuo.mutation.PureCep(); ok {
		_spec.SetField(earnbill.FieldPureCep, field.TypeInt64, value)
	}
	if value, ok := ebuo.mutation.AddedPureCep(); ok {
		_spec.AddField(earnbill.FieldPureCep, field.TypeInt64, value)
	}
	if value, ok := ebuo.mutation.GiftCep(); ok {
		_spec.SetField(earnbill.FieldGiftCep, field.TypeInt64, value)
	}
	if value, ok := ebuo.mutation.AddedGiftCep(); ok {
		_spec.AddField(earnbill.FieldGiftCep, field.TypeInt64, value)
	}
	if value, ok := ebuo.mutation.PlatformPureCep(); ok {
		_spec.SetField(earnbill.FieldPlatformPureCep, field.TypeInt64, value)
	}
	if value, ok := ebuo.mutation.AddedPlatformPureCep(); ok {
		_spec.AddField(earnbill.FieldPlatformPureCep, field.TypeInt64, value)
	}
	if value, ok := ebuo.mutation.PlatformGiftCep(); ok {
		_spec.SetField(earnbill.FieldPlatformGiftCep, field.TypeInt64, value)
	}
	if value, ok := ebuo.mutation.AddedPlatformGiftCep(); ok {
		_spec.AddField(earnbill.FieldPlatformGiftCep, field.TypeInt64, value)
	}
	if ebuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   earnbill.UserTable,
			Columns: []string{earnbill.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   earnbill.UserTable,
			Columns: []string{earnbill.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ebuo.mutation.ProfitAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   earnbill.ProfitAccountTable,
			Columns: []string{earnbill.ProfitAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profitaccount.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebuo.mutation.ProfitAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   earnbill.ProfitAccountTable,
			Columns: []string{earnbill.ProfitAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profitaccount.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ebuo.mutation.PlatformAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   earnbill.PlatformAccountTable,
			Columns: []string{earnbill.PlatformAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformaccount.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebuo.mutation.PlatformAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   earnbill.PlatformAccountTable,
			Columns: []string{earnbill.PlatformAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformaccount.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ebuo.mutation.MissionProduceOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   earnbill.MissionProduceOrdersTable,
			Columns: []string{earnbill.MissionProduceOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebuo.mutation.MissionProduceOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   earnbill.MissionProduceOrdersTable,
			Columns: []string{earnbill.MissionProduceOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ebuo.modifiers...)
	_node = &EarnBill{config: ebuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ebuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{earnbill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ebuo.mutation.done = true
	return _node, nil
}
