// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/incomewalletoperate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// IncomeWalletOperateUpdate is the builder for updating IncomeWalletOperate entities.
type IncomeWalletOperateUpdate struct {
	config
	hooks     []Hook
	mutation  *IncomeWalletOperateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the IncomeWalletOperateUpdate builder.
func (iwou *IncomeWalletOperateUpdate) Where(ps ...predicate.IncomeWalletOperate) *IncomeWalletOperateUpdate {
	iwou.mutation.Where(ps...)
	return iwou
}

// SetCreatedBy sets the "created_by" field.
func (iwou *IncomeWalletOperateUpdate) SetCreatedBy(i int64) *IncomeWalletOperateUpdate {
	iwou.mutation.ResetCreatedBy()
	iwou.mutation.SetCreatedBy(i)
	return iwou
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (iwou *IncomeWalletOperateUpdate) SetNillableCreatedBy(i *int64) *IncomeWalletOperateUpdate {
	if i != nil {
		iwou.SetCreatedBy(*i)
	}
	return iwou
}

// AddCreatedBy adds i to the "created_by" field.
func (iwou *IncomeWalletOperateUpdate) AddCreatedBy(i int64) *IncomeWalletOperateUpdate {
	iwou.mutation.AddCreatedBy(i)
	return iwou
}

// SetUpdatedBy sets the "updated_by" field.
func (iwou *IncomeWalletOperateUpdate) SetUpdatedBy(i int64) *IncomeWalletOperateUpdate {
	iwou.mutation.ResetUpdatedBy()
	iwou.mutation.SetUpdatedBy(i)
	return iwou
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (iwou *IncomeWalletOperateUpdate) SetNillableUpdatedBy(i *int64) *IncomeWalletOperateUpdate {
	if i != nil {
		iwou.SetUpdatedBy(*i)
	}
	return iwou
}

// AddUpdatedBy adds i to the "updated_by" field.
func (iwou *IncomeWalletOperateUpdate) AddUpdatedBy(i int64) *IncomeWalletOperateUpdate {
	iwou.mutation.AddUpdatedBy(i)
	return iwou
}

// SetUpdatedAt sets the "updated_at" field.
func (iwou *IncomeWalletOperateUpdate) SetUpdatedAt(t time.Time) *IncomeWalletOperateUpdate {
	iwou.mutation.SetUpdatedAt(t)
	return iwou
}

// SetDeletedAt sets the "deleted_at" field.
func (iwou *IncomeWalletOperateUpdate) SetDeletedAt(t time.Time) *IncomeWalletOperateUpdate {
	iwou.mutation.SetDeletedAt(t)
	return iwou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iwou *IncomeWalletOperateUpdate) SetNillableDeletedAt(t *time.Time) *IncomeWalletOperateUpdate {
	if t != nil {
		iwou.SetDeletedAt(*t)
	}
	return iwou
}

// SetUserID sets the "user_id" field.
func (iwou *IncomeWalletOperateUpdate) SetUserID(i int64) *IncomeWalletOperateUpdate {
	iwou.mutation.SetUserID(i)
	return iwou
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (iwou *IncomeWalletOperateUpdate) SetNillableUserID(i *int64) *IncomeWalletOperateUpdate {
	if i != nil {
		iwou.SetUserID(*i)
	}
	return iwou
}

// SetPhone sets the "phone" field.
func (iwou *IncomeWalletOperateUpdate) SetPhone(s string) *IncomeWalletOperateUpdate {
	iwou.mutation.SetPhone(s)
	return iwou
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (iwou *IncomeWalletOperateUpdate) SetNillablePhone(s *string) *IncomeWalletOperateUpdate {
	if s != nil {
		iwou.SetPhone(*s)
	}
	return iwou
}

// SetType sets the "type" field.
func (iwou *IncomeWalletOperateUpdate) SetType(ewot enums.IncomeWalletOperateType) *IncomeWalletOperateUpdate {
	iwou.mutation.SetType(ewot)
	return iwou
}

// SetNillableType sets the "type" field if the given value is not nil.
func (iwou *IncomeWalletOperateUpdate) SetNillableType(ewot *enums.IncomeWalletOperateType) *IncomeWalletOperateUpdate {
	if ewot != nil {
		iwou.SetType(*ewot)
	}
	return iwou
}

// SetAmount sets the "amount" field.
func (iwou *IncomeWalletOperateUpdate) SetAmount(i int64) *IncomeWalletOperateUpdate {
	iwou.mutation.ResetAmount()
	iwou.mutation.SetAmount(i)
	return iwou
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (iwou *IncomeWalletOperateUpdate) SetNillableAmount(i *int64) *IncomeWalletOperateUpdate {
	if i != nil {
		iwou.SetAmount(*i)
	}
	return iwou
}

// AddAmount adds i to the "amount" field.
func (iwou *IncomeWalletOperateUpdate) AddAmount(i int64) *IncomeWalletOperateUpdate {
	iwou.mutation.AddAmount(i)
	return iwou
}

// SetReason sets the "reason" field.
func (iwou *IncomeWalletOperateUpdate) SetReason(s string) *IncomeWalletOperateUpdate {
	iwou.mutation.SetReason(s)
	return iwou
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (iwou *IncomeWalletOperateUpdate) SetNillableReason(s *string) *IncomeWalletOperateUpdate {
	if s != nil {
		iwou.SetReason(*s)
	}
	return iwou
}

// SetCurrentBalance sets the "current_balance" field.
func (iwou *IncomeWalletOperateUpdate) SetCurrentBalance(i int64) *IncomeWalletOperateUpdate {
	iwou.mutation.ResetCurrentBalance()
	iwou.mutation.SetCurrentBalance(i)
	return iwou
}

// SetNillableCurrentBalance sets the "current_balance" field if the given value is not nil.
func (iwou *IncomeWalletOperateUpdate) SetNillableCurrentBalance(i *int64) *IncomeWalletOperateUpdate {
	if i != nil {
		iwou.SetCurrentBalance(*i)
	}
	return iwou
}

// AddCurrentBalance adds i to the "current_balance" field.
func (iwou *IncomeWalletOperateUpdate) AddCurrentBalance(i int64) *IncomeWalletOperateUpdate {
	iwou.mutation.AddCurrentBalance(i)
	return iwou
}

// SetLastEditedAt sets the "last_edited_at" field.
func (iwou *IncomeWalletOperateUpdate) SetLastEditedAt(t time.Time) *IncomeWalletOperateUpdate {
	iwou.mutation.SetLastEditedAt(t)
	return iwou
}

// SetNillableLastEditedAt sets the "last_edited_at" field if the given value is not nil.
func (iwou *IncomeWalletOperateUpdate) SetNillableLastEditedAt(t *time.Time) *IncomeWalletOperateUpdate {
	if t != nil {
		iwou.SetLastEditedAt(*t)
	}
	return iwou
}

// SetRejectReason sets the "reject_reason" field.
func (iwou *IncomeWalletOperateUpdate) SetRejectReason(s string) *IncomeWalletOperateUpdate {
	iwou.mutation.SetRejectReason(s)
	return iwou
}

// SetNillableRejectReason sets the "reject_reason" field if the given value is not nil.
func (iwou *IncomeWalletOperateUpdate) SetNillableRejectReason(s *string) *IncomeWalletOperateUpdate {
	if s != nil {
		iwou.SetRejectReason(*s)
	}
	return iwou
}

// SetStatus sets the "status" field.
func (iwou *IncomeWalletOperateUpdate) SetStatus(ewos enums.IncomeWalletOperateStatus) *IncomeWalletOperateUpdate {
	iwou.mutation.SetStatus(ewos)
	return iwou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iwou *IncomeWalletOperateUpdate) SetNillableStatus(ewos *enums.IncomeWalletOperateStatus) *IncomeWalletOperateUpdate {
	if ewos != nil {
		iwou.SetStatus(*ewos)
	}
	return iwou
}

// SetApproveUserID sets the "approve_user_id" field.
func (iwou *IncomeWalletOperateUpdate) SetApproveUserID(i int64) *IncomeWalletOperateUpdate {
	iwou.mutation.SetApproveUserID(i)
	return iwou
}

// SetNillableApproveUserID sets the "approve_user_id" field if the given value is not nil.
func (iwou *IncomeWalletOperateUpdate) SetNillableApproveUserID(i *int64) *IncomeWalletOperateUpdate {
	if i != nil {
		iwou.SetApproveUserID(*i)
	}
	return iwou
}

// SetUser sets the "user" edge to the User entity.
func (iwou *IncomeWalletOperateUpdate) SetUser(u *User) *IncomeWalletOperateUpdate {
	return iwou.SetUserID(u.ID)
}

// SetApproveUser sets the "approve_user" edge to the User entity.
func (iwou *IncomeWalletOperateUpdate) SetApproveUser(u *User) *IncomeWalletOperateUpdate {
	return iwou.SetApproveUserID(u.ID)
}

// Mutation returns the IncomeWalletOperateMutation object of the builder.
func (iwou *IncomeWalletOperateUpdate) Mutation() *IncomeWalletOperateMutation {
	return iwou.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (iwou *IncomeWalletOperateUpdate) ClearUser() *IncomeWalletOperateUpdate {
	iwou.mutation.ClearUser()
	return iwou
}

// ClearApproveUser clears the "approve_user" edge to the User entity.
func (iwou *IncomeWalletOperateUpdate) ClearApproveUser() *IncomeWalletOperateUpdate {
	iwou.mutation.ClearApproveUser()
	return iwou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iwou *IncomeWalletOperateUpdate) Save(ctx context.Context) (int, error) {
	iwou.defaults()
	return withHooks(ctx, iwou.sqlSave, iwou.mutation, iwou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iwou *IncomeWalletOperateUpdate) SaveX(ctx context.Context) int {
	affected, err := iwou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iwou *IncomeWalletOperateUpdate) Exec(ctx context.Context) error {
	_, err := iwou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iwou *IncomeWalletOperateUpdate) ExecX(ctx context.Context) {
	if err := iwou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iwou *IncomeWalletOperateUpdate) defaults() {
	if _, ok := iwou.mutation.UpdatedAt(); !ok {
		v := incomewalletoperate.UpdateDefaultUpdatedAt()
		iwou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iwou *IncomeWalletOperateUpdate) check() error {
	if v, ok := iwou.mutation.GetType(); ok {
		if err := incomewalletoperate.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "IncomeWalletOperate.type": %w`, err)}
		}
	}
	if v, ok := iwou.mutation.Status(); ok {
		if err := incomewalletoperate.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "IncomeWalletOperate.status": %w`, err)}
		}
	}
	if _, ok := iwou.mutation.UserID(); iwou.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "IncomeWalletOperate.user"`)
	}
	if _, ok := iwou.mutation.ApproveUserID(); iwou.mutation.ApproveUserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "IncomeWalletOperate.approve_user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iwou *IncomeWalletOperateUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IncomeWalletOperateUpdate {
	iwou.modifiers = append(iwou.modifiers, modifiers...)
	return iwou
}

func (iwou *IncomeWalletOperateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iwou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(incomewalletoperate.Table, incomewalletoperate.Columns, sqlgraph.NewFieldSpec(incomewalletoperate.FieldID, field.TypeInt64))
	if ps := iwou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iwou.mutation.CreatedBy(); ok {
		_spec.SetField(incomewalletoperate.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := iwou.mutation.AddedCreatedBy(); ok {
		_spec.AddField(incomewalletoperate.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := iwou.mutation.UpdatedBy(); ok {
		_spec.SetField(incomewalletoperate.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := iwou.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(incomewalletoperate.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := iwou.mutation.UpdatedAt(); ok {
		_spec.SetField(incomewalletoperate.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iwou.mutation.DeletedAt(); ok {
		_spec.SetField(incomewalletoperate.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := iwou.mutation.Phone(); ok {
		_spec.SetField(incomewalletoperate.FieldPhone, field.TypeString, value)
	}
	if value, ok := iwou.mutation.GetType(); ok {
		_spec.SetField(incomewalletoperate.FieldType, field.TypeEnum, value)
	}
	if value, ok := iwou.mutation.Amount(); ok {
		_spec.SetField(incomewalletoperate.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := iwou.mutation.AddedAmount(); ok {
		_spec.AddField(incomewalletoperate.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := iwou.mutation.Reason(); ok {
		_spec.SetField(incomewalletoperate.FieldReason, field.TypeString, value)
	}
	if value, ok := iwou.mutation.CurrentBalance(); ok {
		_spec.SetField(incomewalletoperate.FieldCurrentBalance, field.TypeInt64, value)
	}
	if value, ok := iwou.mutation.AddedCurrentBalance(); ok {
		_spec.AddField(incomewalletoperate.FieldCurrentBalance, field.TypeInt64, value)
	}
	if value, ok := iwou.mutation.LastEditedAt(); ok {
		_spec.SetField(incomewalletoperate.FieldLastEditedAt, field.TypeTime, value)
	}
	if value, ok := iwou.mutation.RejectReason(); ok {
		_spec.SetField(incomewalletoperate.FieldRejectReason, field.TypeString, value)
	}
	if value, ok := iwou.mutation.Status(); ok {
		_spec.SetField(incomewalletoperate.FieldStatus, field.TypeEnum, value)
	}
	if iwou.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incomewalletoperate.UserTable,
			Columns: []string{incomewalletoperate.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iwou.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incomewalletoperate.UserTable,
			Columns: []string{incomewalletoperate.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iwou.mutation.ApproveUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incomewalletoperate.ApproveUserTable,
			Columns: []string{incomewalletoperate.ApproveUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iwou.mutation.ApproveUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incomewalletoperate.ApproveUserTable,
			Columns: []string{incomewalletoperate.ApproveUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(iwou.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, iwou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incomewalletoperate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iwou.mutation.done = true
	return n, nil
}

// IncomeWalletOperateUpdateOne is the builder for updating a single IncomeWalletOperate entity.
type IncomeWalletOperateUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *IncomeWalletOperateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedBy sets the "created_by" field.
func (iwouo *IncomeWalletOperateUpdateOne) SetCreatedBy(i int64) *IncomeWalletOperateUpdateOne {
	iwouo.mutation.ResetCreatedBy()
	iwouo.mutation.SetCreatedBy(i)
	return iwouo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (iwouo *IncomeWalletOperateUpdateOne) SetNillableCreatedBy(i *int64) *IncomeWalletOperateUpdateOne {
	if i != nil {
		iwouo.SetCreatedBy(*i)
	}
	return iwouo
}

// AddCreatedBy adds i to the "created_by" field.
func (iwouo *IncomeWalletOperateUpdateOne) AddCreatedBy(i int64) *IncomeWalletOperateUpdateOne {
	iwouo.mutation.AddCreatedBy(i)
	return iwouo
}

// SetUpdatedBy sets the "updated_by" field.
func (iwouo *IncomeWalletOperateUpdateOne) SetUpdatedBy(i int64) *IncomeWalletOperateUpdateOne {
	iwouo.mutation.ResetUpdatedBy()
	iwouo.mutation.SetUpdatedBy(i)
	return iwouo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (iwouo *IncomeWalletOperateUpdateOne) SetNillableUpdatedBy(i *int64) *IncomeWalletOperateUpdateOne {
	if i != nil {
		iwouo.SetUpdatedBy(*i)
	}
	return iwouo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (iwouo *IncomeWalletOperateUpdateOne) AddUpdatedBy(i int64) *IncomeWalletOperateUpdateOne {
	iwouo.mutation.AddUpdatedBy(i)
	return iwouo
}

// SetUpdatedAt sets the "updated_at" field.
func (iwouo *IncomeWalletOperateUpdateOne) SetUpdatedAt(t time.Time) *IncomeWalletOperateUpdateOne {
	iwouo.mutation.SetUpdatedAt(t)
	return iwouo
}

// SetDeletedAt sets the "deleted_at" field.
func (iwouo *IncomeWalletOperateUpdateOne) SetDeletedAt(t time.Time) *IncomeWalletOperateUpdateOne {
	iwouo.mutation.SetDeletedAt(t)
	return iwouo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iwouo *IncomeWalletOperateUpdateOne) SetNillableDeletedAt(t *time.Time) *IncomeWalletOperateUpdateOne {
	if t != nil {
		iwouo.SetDeletedAt(*t)
	}
	return iwouo
}

// SetUserID sets the "user_id" field.
func (iwouo *IncomeWalletOperateUpdateOne) SetUserID(i int64) *IncomeWalletOperateUpdateOne {
	iwouo.mutation.SetUserID(i)
	return iwouo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (iwouo *IncomeWalletOperateUpdateOne) SetNillableUserID(i *int64) *IncomeWalletOperateUpdateOne {
	if i != nil {
		iwouo.SetUserID(*i)
	}
	return iwouo
}

// SetPhone sets the "phone" field.
func (iwouo *IncomeWalletOperateUpdateOne) SetPhone(s string) *IncomeWalletOperateUpdateOne {
	iwouo.mutation.SetPhone(s)
	return iwouo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (iwouo *IncomeWalletOperateUpdateOne) SetNillablePhone(s *string) *IncomeWalletOperateUpdateOne {
	if s != nil {
		iwouo.SetPhone(*s)
	}
	return iwouo
}

// SetType sets the "type" field.
func (iwouo *IncomeWalletOperateUpdateOne) SetType(ewot enums.IncomeWalletOperateType) *IncomeWalletOperateUpdateOne {
	iwouo.mutation.SetType(ewot)
	return iwouo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (iwouo *IncomeWalletOperateUpdateOne) SetNillableType(ewot *enums.IncomeWalletOperateType) *IncomeWalletOperateUpdateOne {
	if ewot != nil {
		iwouo.SetType(*ewot)
	}
	return iwouo
}

// SetAmount sets the "amount" field.
func (iwouo *IncomeWalletOperateUpdateOne) SetAmount(i int64) *IncomeWalletOperateUpdateOne {
	iwouo.mutation.ResetAmount()
	iwouo.mutation.SetAmount(i)
	return iwouo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (iwouo *IncomeWalletOperateUpdateOne) SetNillableAmount(i *int64) *IncomeWalletOperateUpdateOne {
	if i != nil {
		iwouo.SetAmount(*i)
	}
	return iwouo
}

// AddAmount adds i to the "amount" field.
func (iwouo *IncomeWalletOperateUpdateOne) AddAmount(i int64) *IncomeWalletOperateUpdateOne {
	iwouo.mutation.AddAmount(i)
	return iwouo
}

// SetReason sets the "reason" field.
func (iwouo *IncomeWalletOperateUpdateOne) SetReason(s string) *IncomeWalletOperateUpdateOne {
	iwouo.mutation.SetReason(s)
	return iwouo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (iwouo *IncomeWalletOperateUpdateOne) SetNillableReason(s *string) *IncomeWalletOperateUpdateOne {
	if s != nil {
		iwouo.SetReason(*s)
	}
	return iwouo
}

// SetCurrentBalance sets the "current_balance" field.
func (iwouo *IncomeWalletOperateUpdateOne) SetCurrentBalance(i int64) *IncomeWalletOperateUpdateOne {
	iwouo.mutation.ResetCurrentBalance()
	iwouo.mutation.SetCurrentBalance(i)
	return iwouo
}

// SetNillableCurrentBalance sets the "current_balance" field if the given value is not nil.
func (iwouo *IncomeWalletOperateUpdateOne) SetNillableCurrentBalance(i *int64) *IncomeWalletOperateUpdateOne {
	if i != nil {
		iwouo.SetCurrentBalance(*i)
	}
	return iwouo
}

// AddCurrentBalance adds i to the "current_balance" field.
func (iwouo *IncomeWalletOperateUpdateOne) AddCurrentBalance(i int64) *IncomeWalletOperateUpdateOne {
	iwouo.mutation.AddCurrentBalance(i)
	return iwouo
}

// SetLastEditedAt sets the "last_edited_at" field.
func (iwouo *IncomeWalletOperateUpdateOne) SetLastEditedAt(t time.Time) *IncomeWalletOperateUpdateOne {
	iwouo.mutation.SetLastEditedAt(t)
	return iwouo
}

// SetNillableLastEditedAt sets the "last_edited_at" field if the given value is not nil.
func (iwouo *IncomeWalletOperateUpdateOne) SetNillableLastEditedAt(t *time.Time) *IncomeWalletOperateUpdateOne {
	if t != nil {
		iwouo.SetLastEditedAt(*t)
	}
	return iwouo
}

// SetRejectReason sets the "reject_reason" field.
func (iwouo *IncomeWalletOperateUpdateOne) SetRejectReason(s string) *IncomeWalletOperateUpdateOne {
	iwouo.mutation.SetRejectReason(s)
	return iwouo
}

// SetNillableRejectReason sets the "reject_reason" field if the given value is not nil.
func (iwouo *IncomeWalletOperateUpdateOne) SetNillableRejectReason(s *string) *IncomeWalletOperateUpdateOne {
	if s != nil {
		iwouo.SetRejectReason(*s)
	}
	return iwouo
}

// SetStatus sets the "status" field.
func (iwouo *IncomeWalletOperateUpdateOne) SetStatus(ewos enums.IncomeWalletOperateStatus) *IncomeWalletOperateUpdateOne {
	iwouo.mutation.SetStatus(ewos)
	return iwouo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iwouo *IncomeWalletOperateUpdateOne) SetNillableStatus(ewos *enums.IncomeWalletOperateStatus) *IncomeWalletOperateUpdateOne {
	if ewos != nil {
		iwouo.SetStatus(*ewos)
	}
	return iwouo
}

// SetApproveUserID sets the "approve_user_id" field.
func (iwouo *IncomeWalletOperateUpdateOne) SetApproveUserID(i int64) *IncomeWalletOperateUpdateOne {
	iwouo.mutation.SetApproveUserID(i)
	return iwouo
}

// SetNillableApproveUserID sets the "approve_user_id" field if the given value is not nil.
func (iwouo *IncomeWalletOperateUpdateOne) SetNillableApproveUserID(i *int64) *IncomeWalletOperateUpdateOne {
	if i != nil {
		iwouo.SetApproveUserID(*i)
	}
	return iwouo
}

// SetUser sets the "user" edge to the User entity.
func (iwouo *IncomeWalletOperateUpdateOne) SetUser(u *User) *IncomeWalletOperateUpdateOne {
	return iwouo.SetUserID(u.ID)
}

// SetApproveUser sets the "approve_user" edge to the User entity.
func (iwouo *IncomeWalletOperateUpdateOne) SetApproveUser(u *User) *IncomeWalletOperateUpdateOne {
	return iwouo.SetApproveUserID(u.ID)
}

// Mutation returns the IncomeWalletOperateMutation object of the builder.
func (iwouo *IncomeWalletOperateUpdateOne) Mutation() *IncomeWalletOperateMutation {
	return iwouo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (iwouo *IncomeWalletOperateUpdateOne) ClearUser() *IncomeWalletOperateUpdateOne {
	iwouo.mutation.ClearUser()
	return iwouo
}

// ClearApproveUser clears the "approve_user" edge to the User entity.
func (iwouo *IncomeWalletOperateUpdateOne) ClearApproveUser() *IncomeWalletOperateUpdateOne {
	iwouo.mutation.ClearApproveUser()
	return iwouo
}

// Where appends a list predicates to the IncomeWalletOperateUpdate builder.
func (iwouo *IncomeWalletOperateUpdateOne) Where(ps ...predicate.IncomeWalletOperate) *IncomeWalletOperateUpdateOne {
	iwouo.mutation.Where(ps...)
	return iwouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iwouo *IncomeWalletOperateUpdateOne) Select(field string, fields ...string) *IncomeWalletOperateUpdateOne {
	iwouo.fields = append([]string{field}, fields...)
	return iwouo
}

// Save executes the query and returns the updated IncomeWalletOperate entity.
func (iwouo *IncomeWalletOperateUpdateOne) Save(ctx context.Context) (*IncomeWalletOperate, error) {
	iwouo.defaults()
	return withHooks(ctx, iwouo.sqlSave, iwouo.mutation, iwouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iwouo *IncomeWalletOperateUpdateOne) SaveX(ctx context.Context) *IncomeWalletOperate {
	node, err := iwouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iwouo *IncomeWalletOperateUpdateOne) Exec(ctx context.Context) error {
	_, err := iwouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iwouo *IncomeWalletOperateUpdateOne) ExecX(ctx context.Context) {
	if err := iwouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iwouo *IncomeWalletOperateUpdateOne) defaults() {
	if _, ok := iwouo.mutation.UpdatedAt(); !ok {
		v := incomewalletoperate.UpdateDefaultUpdatedAt()
		iwouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iwouo *IncomeWalletOperateUpdateOne) check() error {
	if v, ok := iwouo.mutation.GetType(); ok {
		if err := incomewalletoperate.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "IncomeWalletOperate.type": %w`, err)}
		}
	}
	if v, ok := iwouo.mutation.Status(); ok {
		if err := incomewalletoperate.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "IncomeWalletOperate.status": %w`, err)}
		}
	}
	if _, ok := iwouo.mutation.UserID(); iwouo.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "IncomeWalletOperate.user"`)
	}
	if _, ok := iwouo.mutation.ApproveUserID(); iwouo.mutation.ApproveUserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "IncomeWalletOperate.approve_user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iwouo *IncomeWalletOperateUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IncomeWalletOperateUpdateOne {
	iwouo.modifiers = append(iwouo.modifiers, modifiers...)
	return iwouo
}

func (iwouo *IncomeWalletOperateUpdateOne) sqlSave(ctx context.Context) (_node *IncomeWalletOperate, err error) {
	if err := iwouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(incomewalletoperate.Table, incomewalletoperate.Columns, sqlgraph.NewFieldSpec(incomewalletoperate.FieldID, field.TypeInt64))
	id, ok := iwouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "IncomeWalletOperate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iwouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, incomewalletoperate.FieldID)
		for _, f := range fields {
			if !incomewalletoperate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != incomewalletoperate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iwouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iwouo.mutation.CreatedBy(); ok {
		_spec.SetField(incomewalletoperate.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := iwouo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(incomewalletoperate.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := iwouo.mutation.UpdatedBy(); ok {
		_spec.SetField(incomewalletoperate.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := iwouo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(incomewalletoperate.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := iwouo.mutation.UpdatedAt(); ok {
		_spec.SetField(incomewalletoperate.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iwouo.mutation.DeletedAt(); ok {
		_spec.SetField(incomewalletoperate.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := iwouo.mutation.Phone(); ok {
		_spec.SetField(incomewalletoperate.FieldPhone, field.TypeString, value)
	}
	if value, ok := iwouo.mutation.GetType(); ok {
		_spec.SetField(incomewalletoperate.FieldType, field.TypeEnum, value)
	}
	if value, ok := iwouo.mutation.Amount(); ok {
		_spec.SetField(incomewalletoperate.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := iwouo.mutation.AddedAmount(); ok {
		_spec.AddField(incomewalletoperate.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := iwouo.mutation.Reason(); ok {
		_spec.SetField(incomewalletoperate.FieldReason, field.TypeString, value)
	}
	if value, ok := iwouo.mutation.CurrentBalance(); ok {
		_spec.SetField(incomewalletoperate.FieldCurrentBalance, field.TypeInt64, value)
	}
	if value, ok := iwouo.mutation.AddedCurrentBalance(); ok {
		_spec.AddField(incomewalletoperate.FieldCurrentBalance, field.TypeInt64, value)
	}
	if value, ok := iwouo.mutation.LastEditedAt(); ok {
		_spec.SetField(incomewalletoperate.FieldLastEditedAt, field.TypeTime, value)
	}
	if value, ok := iwouo.mutation.RejectReason(); ok {
		_spec.SetField(incomewalletoperate.FieldRejectReason, field.TypeString, value)
	}
	if value, ok := iwouo.mutation.Status(); ok {
		_spec.SetField(incomewalletoperate.FieldStatus, field.TypeEnum, value)
	}
	if iwouo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incomewalletoperate.UserTable,
			Columns: []string{incomewalletoperate.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iwouo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incomewalletoperate.UserTable,
			Columns: []string{incomewalletoperate.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iwouo.mutation.ApproveUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incomewalletoperate.ApproveUserTable,
			Columns: []string{incomewalletoperate.ApproveUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iwouo.mutation.ApproveUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incomewalletoperate.ApproveUserTable,
			Columns: []string{incomewalletoperate.ApproveUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(iwouo.modifiers...)
	_node = &IncomeWalletOperate{config: iwouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iwouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incomewalletoperate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iwouo.mutation.done = true
	return _node, nil
}
