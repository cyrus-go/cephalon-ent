// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/rechargecampaignruleoversea"
)

// RechargeCampaignRuleOverseaUpdate is the builder for updating RechargeCampaignRuleOversea entities.
type RechargeCampaignRuleOverseaUpdate struct {
	config
	hooks     []Hook
	mutation  *RechargeCampaignRuleOverseaMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RechargeCampaignRuleOverseaUpdate builder.
func (rcrou *RechargeCampaignRuleOverseaUpdate) Where(ps ...predicate.RechargeCampaignRuleOversea) *RechargeCampaignRuleOverseaUpdate {
	rcrou.mutation.Where(ps...)
	return rcrou
}

// SetCreatedBy sets the "created_by" field.
func (rcrou *RechargeCampaignRuleOverseaUpdate) SetCreatedBy(i int64) *RechargeCampaignRuleOverseaUpdate {
	rcrou.mutation.ResetCreatedBy()
	rcrou.mutation.SetCreatedBy(i)
	return rcrou
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (rcrou *RechargeCampaignRuleOverseaUpdate) SetNillableCreatedBy(i *int64) *RechargeCampaignRuleOverseaUpdate {
	if i != nil {
		rcrou.SetCreatedBy(*i)
	}
	return rcrou
}

// AddCreatedBy adds i to the "created_by" field.
func (rcrou *RechargeCampaignRuleOverseaUpdate) AddCreatedBy(i int64) *RechargeCampaignRuleOverseaUpdate {
	rcrou.mutation.AddCreatedBy(i)
	return rcrou
}

// SetUpdatedBy sets the "updated_by" field.
func (rcrou *RechargeCampaignRuleOverseaUpdate) SetUpdatedBy(i int64) *RechargeCampaignRuleOverseaUpdate {
	rcrou.mutation.ResetUpdatedBy()
	rcrou.mutation.SetUpdatedBy(i)
	return rcrou
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (rcrou *RechargeCampaignRuleOverseaUpdate) SetNillableUpdatedBy(i *int64) *RechargeCampaignRuleOverseaUpdate {
	if i != nil {
		rcrou.SetUpdatedBy(*i)
	}
	return rcrou
}

// AddUpdatedBy adds i to the "updated_by" field.
func (rcrou *RechargeCampaignRuleOverseaUpdate) AddUpdatedBy(i int64) *RechargeCampaignRuleOverseaUpdate {
	rcrou.mutation.AddUpdatedBy(i)
	return rcrou
}

// SetUpdatedAt sets the "updated_at" field.
func (rcrou *RechargeCampaignRuleOverseaUpdate) SetUpdatedAt(t time.Time) *RechargeCampaignRuleOverseaUpdate {
	rcrou.mutation.SetUpdatedAt(t)
	return rcrou
}

// SetDeletedAt sets the "deleted_at" field.
func (rcrou *RechargeCampaignRuleOverseaUpdate) SetDeletedAt(t time.Time) *RechargeCampaignRuleOverseaUpdate {
	rcrou.mutation.SetDeletedAt(t)
	return rcrou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rcrou *RechargeCampaignRuleOverseaUpdate) SetNillableDeletedAt(t *time.Time) *RechargeCampaignRuleOverseaUpdate {
	if t != nil {
		rcrou.SetDeletedAt(*t)
	}
	return rcrou
}

// SetDollarPrice sets the "dollar_price" field.
func (rcrou *RechargeCampaignRuleOverseaUpdate) SetDollarPrice(s string) *RechargeCampaignRuleOverseaUpdate {
	rcrou.mutation.SetDollarPrice(s)
	return rcrou
}

// SetNillableDollarPrice sets the "dollar_price" field if the given value is not nil.
func (rcrou *RechargeCampaignRuleOverseaUpdate) SetNillableDollarPrice(s *string) *RechargeCampaignRuleOverseaUpdate {
	if s != nil {
		rcrou.SetDollarPrice(*s)
	}
	return rcrou
}

// SetRmbPrice sets the "rmb_price" field.
func (rcrou *RechargeCampaignRuleOverseaUpdate) SetRmbPrice(s string) *RechargeCampaignRuleOverseaUpdate {
	rcrou.mutation.SetRmbPrice(s)
	return rcrou
}

// SetNillableRmbPrice sets the "rmb_price" field if the given value is not nil.
func (rcrou *RechargeCampaignRuleOverseaUpdate) SetNillableRmbPrice(s *string) *RechargeCampaignRuleOverseaUpdate {
	if s != nil {
		rcrou.SetRmbPrice(*s)
	}
	return rcrou
}

// SetOriginalRmbPrice sets the "original_rmb_price" field.
func (rcrou *RechargeCampaignRuleOverseaUpdate) SetOriginalRmbPrice(s string) *RechargeCampaignRuleOverseaUpdate {
	rcrou.mutation.SetOriginalRmbPrice(s)
	return rcrou
}

// SetNillableOriginalRmbPrice sets the "original_rmb_price" field if the given value is not nil.
func (rcrou *RechargeCampaignRuleOverseaUpdate) SetNillableOriginalRmbPrice(s *string) *RechargeCampaignRuleOverseaUpdate {
	if s != nil {
		rcrou.SetOriginalRmbPrice(*s)
	}
	return rcrou
}

// SetTotalCep sets the "total_cep" field.
func (rcrou *RechargeCampaignRuleOverseaUpdate) SetTotalCep(i int64) *RechargeCampaignRuleOverseaUpdate {
	rcrou.mutation.ResetTotalCep()
	rcrou.mutation.SetTotalCep(i)
	return rcrou
}

// SetNillableTotalCep sets the "total_cep" field if the given value is not nil.
func (rcrou *RechargeCampaignRuleOverseaUpdate) SetNillableTotalCep(i *int64) *RechargeCampaignRuleOverseaUpdate {
	if i != nil {
		rcrou.SetTotalCep(*i)
	}
	return rcrou
}

// AddTotalCep adds i to the "total_cep" field.
func (rcrou *RechargeCampaignRuleOverseaUpdate) AddTotalCep(i int64) *RechargeCampaignRuleOverseaUpdate {
	rcrou.mutation.AddTotalCep(i)
	return rcrou
}

// SetBeforeDiscountCep sets the "before_discount_cep" field.
func (rcrou *RechargeCampaignRuleOverseaUpdate) SetBeforeDiscountCep(i int64) *RechargeCampaignRuleOverseaUpdate {
	rcrou.mutation.ResetBeforeDiscountCep()
	rcrou.mutation.SetBeforeDiscountCep(i)
	return rcrou
}

// SetNillableBeforeDiscountCep sets the "before_discount_cep" field if the given value is not nil.
func (rcrou *RechargeCampaignRuleOverseaUpdate) SetNillableBeforeDiscountCep(i *int64) *RechargeCampaignRuleOverseaUpdate {
	if i != nil {
		rcrou.SetBeforeDiscountCep(*i)
	}
	return rcrou
}

// AddBeforeDiscountCep adds i to the "before_discount_cep" field.
func (rcrou *RechargeCampaignRuleOverseaUpdate) AddBeforeDiscountCep(i int64) *RechargeCampaignRuleOverseaUpdate {
	rcrou.mutation.AddBeforeDiscountCep(i)
	return rcrou
}

// SetDiscountRatio sets the "discount_ratio" field.
func (rcrou *RechargeCampaignRuleOverseaUpdate) SetDiscountRatio(i int64) *RechargeCampaignRuleOverseaUpdate {
	rcrou.mutation.ResetDiscountRatio()
	rcrou.mutation.SetDiscountRatio(i)
	return rcrou
}

// SetNillableDiscountRatio sets the "discount_ratio" field if the given value is not nil.
func (rcrou *RechargeCampaignRuleOverseaUpdate) SetNillableDiscountRatio(i *int64) *RechargeCampaignRuleOverseaUpdate {
	if i != nil {
		rcrou.SetDiscountRatio(*i)
	}
	return rcrou
}

// AddDiscountRatio adds i to the "discount_ratio" field.
func (rcrou *RechargeCampaignRuleOverseaUpdate) AddDiscountRatio(i int64) *RechargeCampaignRuleOverseaUpdate {
	rcrou.mutation.AddDiscountRatio(i)
	return rcrou
}

// Mutation returns the RechargeCampaignRuleOverseaMutation object of the builder.
func (rcrou *RechargeCampaignRuleOverseaUpdate) Mutation() *RechargeCampaignRuleOverseaMutation {
	return rcrou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rcrou *RechargeCampaignRuleOverseaUpdate) Save(ctx context.Context) (int, error) {
	rcrou.defaults()
	return withHooks(ctx, rcrou.sqlSave, rcrou.mutation, rcrou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcrou *RechargeCampaignRuleOverseaUpdate) SaveX(ctx context.Context) int {
	affected, err := rcrou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rcrou *RechargeCampaignRuleOverseaUpdate) Exec(ctx context.Context) error {
	_, err := rcrou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcrou *RechargeCampaignRuleOverseaUpdate) ExecX(ctx context.Context) {
	if err := rcrou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rcrou *RechargeCampaignRuleOverseaUpdate) defaults() {
	if _, ok := rcrou.mutation.UpdatedAt(); !ok {
		v := rechargecampaignruleoversea.UpdateDefaultUpdatedAt()
		rcrou.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rcrou *RechargeCampaignRuleOverseaUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RechargeCampaignRuleOverseaUpdate {
	rcrou.modifiers = append(rcrou.modifiers, modifiers...)
	return rcrou
}

func (rcrou *RechargeCampaignRuleOverseaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(rechargecampaignruleoversea.Table, rechargecampaignruleoversea.Columns, sqlgraph.NewFieldSpec(rechargecampaignruleoversea.FieldID, field.TypeInt64))
	if ps := rcrou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcrou.mutation.CreatedBy(); ok {
		_spec.SetField(rechargecampaignruleoversea.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := rcrou.mutation.AddedCreatedBy(); ok {
		_spec.AddField(rechargecampaignruleoversea.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := rcrou.mutation.UpdatedBy(); ok {
		_spec.SetField(rechargecampaignruleoversea.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := rcrou.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(rechargecampaignruleoversea.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := rcrou.mutation.UpdatedAt(); ok {
		_spec.SetField(rechargecampaignruleoversea.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := rcrou.mutation.DeletedAt(); ok {
		_spec.SetField(rechargecampaignruleoversea.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := rcrou.mutation.DollarPrice(); ok {
		_spec.SetField(rechargecampaignruleoversea.FieldDollarPrice, field.TypeString, value)
	}
	if value, ok := rcrou.mutation.RmbPrice(); ok {
		_spec.SetField(rechargecampaignruleoversea.FieldRmbPrice, field.TypeString, value)
	}
	if value, ok := rcrou.mutation.OriginalRmbPrice(); ok {
		_spec.SetField(rechargecampaignruleoversea.FieldOriginalRmbPrice, field.TypeString, value)
	}
	if value, ok := rcrou.mutation.TotalCep(); ok {
		_spec.SetField(rechargecampaignruleoversea.FieldTotalCep, field.TypeInt64, value)
	}
	if value, ok := rcrou.mutation.AddedTotalCep(); ok {
		_spec.AddField(rechargecampaignruleoversea.FieldTotalCep, field.TypeInt64, value)
	}
	if value, ok := rcrou.mutation.BeforeDiscountCep(); ok {
		_spec.SetField(rechargecampaignruleoversea.FieldBeforeDiscountCep, field.TypeInt64, value)
	}
	if value, ok := rcrou.mutation.AddedBeforeDiscountCep(); ok {
		_spec.AddField(rechargecampaignruleoversea.FieldBeforeDiscountCep, field.TypeInt64, value)
	}
	if value, ok := rcrou.mutation.DiscountRatio(); ok {
		_spec.SetField(rechargecampaignruleoversea.FieldDiscountRatio, field.TypeInt64, value)
	}
	if value, ok := rcrou.mutation.AddedDiscountRatio(); ok {
		_spec.AddField(rechargecampaignruleoversea.FieldDiscountRatio, field.TypeInt64, value)
	}
	_spec.AddModifiers(rcrou.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, rcrou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rechargecampaignruleoversea.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rcrou.mutation.done = true
	return n, nil
}

// RechargeCampaignRuleOverseaUpdateOne is the builder for updating a single RechargeCampaignRuleOversea entity.
type RechargeCampaignRuleOverseaUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RechargeCampaignRuleOverseaMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedBy sets the "created_by" field.
func (rcrouo *RechargeCampaignRuleOverseaUpdateOne) SetCreatedBy(i int64) *RechargeCampaignRuleOverseaUpdateOne {
	rcrouo.mutation.ResetCreatedBy()
	rcrouo.mutation.SetCreatedBy(i)
	return rcrouo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (rcrouo *RechargeCampaignRuleOverseaUpdateOne) SetNillableCreatedBy(i *int64) *RechargeCampaignRuleOverseaUpdateOne {
	if i != nil {
		rcrouo.SetCreatedBy(*i)
	}
	return rcrouo
}

// AddCreatedBy adds i to the "created_by" field.
func (rcrouo *RechargeCampaignRuleOverseaUpdateOne) AddCreatedBy(i int64) *RechargeCampaignRuleOverseaUpdateOne {
	rcrouo.mutation.AddCreatedBy(i)
	return rcrouo
}

// SetUpdatedBy sets the "updated_by" field.
func (rcrouo *RechargeCampaignRuleOverseaUpdateOne) SetUpdatedBy(i int64) *RechargeCampaignRuleOverseaUpdateOne {
	rcrouo.mutation.ResetUpdatedBy()
	rcrouo.mutation.SetUpdatedBy(i)
	return rcrouo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (rcrouo *RechargeCampaignRuleOverseaUpdateOne) SetNillableUpdatedBy(i *int64) *RechargeCampaignRuleOverseaUpdateOne {
	if i != nil {
		rcrouo.SetUpdatedBy(*i)
	}
	return rcrouo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (rcrouo *RechargeCampaignRuleOverseaUpdateOne) AddUpdatedBy(i int64) *RechargeCampaignRuleOverseaUpdateOne {
	rcrouo.mutation.AddUpdatedBy(i)
	return rcrouo
}

// SetUpdatedAt sets the "updated_at" field.
func (rcrouo *RechargeCampaignRuleOverseaUpdateOne) SetUpdatedAt(t time.Time) *RechargeCampaignRuleOverseaUpdateOne {
	rcrouo.mutation.SetUpdatedAt(t)
	return rcrouo
}

// SetDeletedAt sets the "deleted_at" field.
func (rcrouo *RechargeCampaignRuleOverseaUpdateOne) SetDeletedAt(t time.Time) *RechargeCampaignRuleOverseaUpdateOne {
	rcrouo.mutation.SetDeletedAt(t)
	return rcrouo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rcrouo *RechargeCampaignRuleOverseaUpdateOne) SetNillableDeletedAt(t *time.Time) *RechargeCampaignRuleOverseaUpdateOne {
	if t != nil {
		rcrouo.SetDeletedAt(*t)
	}
	return rcrouo
}

// SetDollarPrice sets the "dollar_price" field.
func (rcrouo *RechargeCampaignRuleOverseaUpdateOne) SetDollarPrice(s string) *RechargeCampaignRuleOverseaUpdateOne {
	rcrouo.mutation.SetDollarPrice(s)
	return rcrouo
}

// SetNillableDollarPrice sets the "dollar_price" field if the given value is not nil.
func (rcrouo *RechargeCampaignRuleOverseaUpdateOne) SetNillableDollarPrice(s *string) *RechargeCampaignRuleOverseaUpdateOne {
	if s != nil {
		rcrouo.SetDollarPrice(*s)
	}
	return rcrouo
}

// SetRmbPrice sets the "rmb_price" field.
func (rcrouo *RechargeCampaignRuleOverseaUpdateOne) SetRmbPrice(s string) *RechargeCampaignRuleOverseaUpdateOne {
	rcrouo.mutation.SetRmbPrice(s)
	return rcrouo
}

// SetNillableRmbPrice sets the "rmb_price" field if the given value is not nil.
func (rcrouo *RechargeCampaignRuleOverseaUpdateOne) SetNillableRmbPrice(s *string) *RechargeCampaignRuleOverseaUpdateOne {
	if s != nil {
		rcrouo.SetRmbPrice(*s)
	}
	return rcrouo
}

// SetOriginalRmbPrice sets the "original_rmb_price" field.
func (rcrouo *RechargeCampaignRuleOverseaUpdateOne) SetOriginalRmbPrice(s string) *RechargeCampaignRuleOverseaUpdateOne {
	rcrouo.mutation.SetOriginalRmbPrice(s)
	return rcrouo
}

// SetNillableOriginalRmbPrice sets the "original_rmb_price" field if the given value is not nil.
func (rcrouo *RechargeCampaignRuleOverseaUpdateOne) SetNillableOriginalRmbPrice(s *string) *RechargeCampaignRuleOverseaUpdateOne {
	if s != nil {
		rcrouo.SetOriginalRmbPrice(*s)
	}
	return rcrouo
}

// SetTotalCep sets the "total_cep" field.
func (rcrouo *RechargeCampaignRuleOverseaUpdateOne) SetTotalCep(i int64) *RechargeCampaignRuleOverseaUpdateOne {
	rcrouo.mutation.ResetTotalCep()
	rcrouo.mutation.SetTotalCep(i)
	return rcrouo
}

// SetNillableTotalCep sets the "total_cep" field if the given value is not nil.
func (rcrouo *RechargeCampaignRuleOverseaUpdateOne) SetNillableTotalCep(i *int64) *RechargeCampaignRuleOverseaUpdateOne {
	if i != nil {
		rcrouo.SetTotalCep(*i)
	}
	return rcrouo
}

// AddTotalCep adds i to the "total_cep" field.
func (rcrouo *RechargeCampaignRuleOverseaUpdateOne) AddTotalCep(i int64) *RechargeCampaignRuleOverseaUpdateOne {
	rcrouo.mutation.AddTotalCep(i)
	return rcrouo
}

// SetBeforeDiscountCep sets the "before_discount_cep" field.
func (rcrouo *RechargeCampaignRuleOverseaUpdateOne) SetBeforeDiscountCep(i int64) *RechargeCampaignRuleOverseaUpdateOne {
	rcrouo.mutation.ResetBeforeDiscountCep()
	rcrouo.mutation.SetBeforeDiscountCep(i)
	return rcrouo
}

// SetNillableBeforeDiscountCep sets the "before_discount_cep" field if the given value is not nil.
func (rcrouo *RechargeCampaignRuleOverseaUpdateOne) SetNillableBeforeDiscountCep(i *int64) *RechargeCampaignRuleOverseaUpdateOne {
	if i != nil {
		rcrouo.SetBeforeDiscountCep(*i)
	}
	return rcrouo
}

// AddBeforeDiscountCep adds i to the "before_discount_cep" field.
func (rcrouo *RechargeCampaignRuleOverseaUpdateOne) AddBeforeDiscountCep(i int64) *RechargeCampaignRuleOverseaUpdateOne {
	rcrouo.mutation.AddBeforeDiscountCep(i)
	return rcrouo
}

// SetDiscountRatio sets the "discount_ratio" field.
func (rcrouo *RechargeCampaignRuleOverseaUpdateOne) SetDiscountRatio(i int64) *RechargeCampaignRuleOverseaUpdateOne {
	rcrouo.mutation.ResetDiscountRatio()
	rcrouo.mutation.SetDiscountRatio(i)
	return rcrouo
}

// SetNillableDiscountRatio sets the "discount_ratio" field if the given value is not nil.
func (rcrouo *RechargeCampaignRuleOverseaUpdateOne) SetNillableDiscountRatio(i *int64) *RechargeCampaignRuleOverseaUpdateOne {
	if i != nil {
		rcrouo.SetDiscountRatio(*i)
	}
	return rcrouo
}

// AddDiscountRatio adds i to the "discount_ratio" field.
func (rcrouo *RechargeCampaignRuleOverseaUpdateOne) AddDiscountRatio(i int64) *RechargeCampaignRuleOverseaUpdateOne {
	rcrouo.mutation.AddDiscountRatio(i)
	return rcrouo
}

// Mutation returns the RechargeCampaignRuleOverseaMutation object of the builder.
func (rcrouo *RechargeCampaignRuleOverseaUpdateOne) Mutation() *RechargeCampaignRuleOverseaMutation {
	return rcrouo.mutation
}

// Where appends a list predicates to the RechargeCampaignRuleOverseaUpdate builder.
func (rcrouo *RechargeCampaignRuleOverseaUpdateOne) Where(ps ...predicate.RechargeCampaignRuleOversea) *RechargeCampaignRuleOverseaUpdateOne {
	rcrouo.mutation.Where(ps...)
	return rcrouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rcrouo *RechargeCampaignRuleOverseaUpdateOne) Select(field string, fields ...string) *RechargeCampaignRuleOverseaUpdateOne {
	rcrouo.fields = append([]string{field}, fields...)
	return rcrouo
}

// Save executes the query and returns the updated RechargeCampaignRuleOversea entity.
func (rcrouo *RechargeCampaignRuleOverseaUpdateOne) Save(ctx context.Context) (*RechargeCampaignRuleOversea, error) {
	rcrouo.defaults()
	return withHooks(ctx, rcrouo.sqlSave, rcrouo.mutation, rcrouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcrouo *RechargeCampaignRuleOverseaUpdateOne) SaveX(ctx context.Context) *RechargeCampaignRuleOversea {
	node, err := rcrouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rcrouo *RechargeCampaignRuleOverseaUpdateOne) Exec(ctx context.Context) error {
	_, err := rcrouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcrouo *RechargeCampaignRuleOverseaUpdateOne) ExecX(ctx context.Context) {
	if err := rcrouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rcrouo *RechargeCampaignRuleOverseaUpdateOne) defaults() {
	if _, ok := rcrouo.mutation.UpdatedAt(); !ok {
		v := rechargecampaignruleoversea.UpdateDefaultUpdatedAt()
		rcrouo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rcrouo *RechargeCampaignRuleOverseaUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RechargeCampaignRuleOverseaUpdateOne {
	rcrouo.modifiers = append(rcrouo.modifiers, modifiers...)
	return rcrouo
}

func (rcrouo *RechargeCampaignRuleOverseaUpdateOne) sqlSave(ctx context.Context) (_node *RechargeCampaignRuleOversea, err error) {
	_spec := sqlgraph.NewUpdateSpec(rechargecampaignruleoversea.Table, rechargecampaignruleoversea.Columns, sqlgraph.NewFieldSpec(rechargecampaignruleoversea.FieldID, field.TypeInt64))
	id, ok := rcrouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "RechargeCampaignRuleOversea.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rcrouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rechargecampaignruleoversea.FieldID)
		for _, f := range fields {
			if !rechargecampaignruleoversea.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != rechargecampaignruleoversea.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rcrouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcrouo.mutation.CreatedBy(); ok {
		_spec.SetField(rechargecampaignruleoversea.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := rcrouo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(rechargecampaignruleoversea.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := rcrouo.mutation.UpdatedBy(); ok {
		_spec.SetField(rechargecampaignruleoversea.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := rcrouo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(rechargecampaignruleoversea.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := rcrouo.mutation.UpdatedAt(); ok {
		_spec.SetField(rechargecampaignruleoversea.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := rcrouo.mutation.DeletedAt(); ok {
		_spec.SetField(rechargecampaignruleoversea.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := rcrouo.mutation.DollarPrice(); ok {
		_spec.SetField(rechargecampaignruleoversea.FieldDollarPrice, field.TypeString, value)
	}
	if value, ok := rcrouo.mutation.RmbPrice(); ok {
		_spec.SetField(rechargecampaignruleoversea.FieldRmbPrice, field.TypeString, value)
	}
	if value, ok := rcrouo.mutation.OriginalRmbPrice(); ok {
		_spec.SetField(rechargecampaignruleoversea.FieldOriginalRmbPrice, field.TypeString, value)
	}
	if value, ok := rcrouo.mutation.TotalCep(); ok {
		_spec.SetField(rechargecampaignruleoversea.FieldTotalCep, field.TypeInt64, value)
	}
	if value, ok := rcrouo.mutation.AddedTotalCep(); ok {
		_spec.AddField(rechargecampaignruleoversea.FieldTotalCep, field.TypeInt64, value)
	}
	if value, ok := rcrouo.mutation.BeforeDiscountCep(); ok {
		_spec.SetField(rechargecampaignruleoversea.FieldBeforeDiscountCep, field.TypeInt64, value)
	}
	if value, ok := rcrouo.mutation.AddedBeforeDiscountCep(); ok {
		_spec.AddField(rechargecampaignruleoversea.FieldBeforeDiscountCep, field.TypeInt64, value)
	}
	if value, ok := rcrouo.mutation.DiscountRatio(); ok {
		_spec.SetField(rechargecampaignruleoversea.FieldDiscountRatio, field.TypeInt64, value)
	}
	if value, ok := rcrouo.mutation.AddedDiscountRatio(); ok {
		_spec.AddField(rechargecampaignruleoversea.FieldDiscountRatio, field.TypeInt64, value)
	}
	_spec.AddModifiers(rcrouo.modifiers...)
	_node = &RechargeCampaignRuleOversea{config: rcrouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rcrouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rechargecampaignruleoversea.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rcrouo.mutation.done = true
	return _node, nil
}
