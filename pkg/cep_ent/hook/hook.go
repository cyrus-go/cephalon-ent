// Code generated by ent, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"

	"github.com/stark-sim/cephalon-ent/pkg/cep_ent"
)

// The ArtworkFunc type is an adapter to allow the use of ordinary
// function as Artwork mutator.
type ArtworkFunc func(context.Context, *cep_ent.ArtworkMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f ArtworkFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.ArtworkMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.ArtworkMutation", m)
}

// The ArtworkLikeFunc type is an adapter to allow the use of ordinary
// function as ArtworkLike mutator.
type ArtworkLikeFunc func(context.Context, *cep_ent.ArtworkLikeMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f ArtworkLikeFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.ArtworkLikeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.ArtworkLikeMutation", m)
}

// The BillFunc type is an adapter to allow the use of ordinary
// function as Bill mutator.
type BillFunc func(context.Context, *cep_ent.BillMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f BillFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.BillMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.BillMutation", m)
}

// The CDKInfoFunc type is an adapter to allow the use of ordinary
// function as CDKInfo mutator.
type CDKInfoFunc func(context.Context, *cep_ent.CDKInfoMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f CDKInfoFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.CDKInfoMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.CDKInfoMutation", m)
}

// The CampaignFunc type is an adapter to allow the use of ordinary
// function as Campaign mutator.
type CampaignFunc func(context.Context, *cep_ent.CampaignMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f CampaignFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.CampaignMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.CampaignMutation", m)
}

// The CampaignOrderFunc type is an adapter to allow the use of ordinary
// function as CampaignOrder mutator.
type CampaignOrderFunc func(context.Context, *cep_ent.CampaignOrderMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f CampaignOrderFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.CampaignOrderMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.CampaignOrderMutation", m)
}

// The CloudFileFunc type is an adapter to allow the use of ordinary
// function as CloudFile mutator.
type CloudFileFunc func(context.Context, *cep_ent.CloudFileMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f CloudFileFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.CloudFileMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.CloudFileMutation", m)
}

// The CollectFunc type is an adapter to allow the use of ordinary
// function as Collect mutator.
type CollectFunc func(context.Context, *cep_ent.CollectMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f CollectFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.CollectMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.CollectMutation", m)
}

// The CostAccountFunc type is an adapter to allow the use of ordinary
// function as CostAccount mutator.
type CostAccountFunc func(context.Context, *cep_ent.CostAccountMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f CostAccountFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.CostAccountMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.CostAccountMutation", m)
}

// The CostBillFunc type is an adapter to allow the use of ordinary
// function as CostBill mutator.
type CostBillFunc func(context.Context, *cep_ent.CostBillMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f CostBillFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.CostBillMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.CostBillMutation", m)
}

// The DeviceFunc type is an adapter to allow the use of ordinary
// function as Device mutator.
type DeviceFunc func(context.Context, *cep_ent.DeviceMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f DeviceFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.DeviceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.DeviceMutation", m)
}

// The DeviceGpuMissionFunc type is an adapter to allow the use of ordinary
// function as DeviceGpuMission mutator.
type DeviceGpuMissionFunc func(context.Context, *cep_ent.DeviceGpuMissionMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f DeviceGpuMissionFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.DeviceGpuMissionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.DeviceGpuMissionMutation", m)
}

// The DeviceRebootTimeFunc type is an adapter to allow the use of ordinary
// function as DeviceRebootTime mutator.
type DeviceRebootTimeFunc func(context.Context, *cep_ent.DeviceRebootTimeMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f DeviceRebootTimeFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.DeviceRebootTimeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.DeviceRebootTimeMutation", m)
}

// The EarnBillFunc type is an adapter to allow the use of ordinary
// function as EarnBill mutator.
type EarnBillFunc func(context.Context, *cep_ent.EarnBillMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f EarnBillFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.EarnBillMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.EarnBillMutation", m)
}

// The EnumConditionFunc type is an adapter to allow the use of ordinary
// function as EnumCondition mutator.
type EnumConditionFunc func(context.Context, *cep_ent.EnumConditionMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f EnumConditionFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.EnumConditionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.EnumConditionMutation", m)
}

// The EnumMissionStatusFunc type is an adapter to allow the use of ordinary
// function as EnumMissionStatus mutator.
type EnumMissionStatusFunc func(context.Context, *cep_ent.EnumMissionStatusMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f EnumMissionStatusFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.EnumMissionStatusMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.EnumMissionStatusMutation", m)
}

// The ExtraServiceFunc type is an adapter to allow the use of ordinary
// function as ExtraService mutator.
type ExtraServiceFunc func(context.Context, *cep_ent.ExtraServiceMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f ExtraServiceFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.ExtraServiceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.ExtraServiceMutation", m)
}

// The ExtraServiceOrderFunc type is an adapter to allow the use of ordinary
// function as ExtraServiceOrder mutator.
type ExtraServiceOrderFunc func(context.Context, *cep_ent.ExtraServiceOrderMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f ExtraServiceOrderFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.ExtraServiceOrderMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.ExtraServiceOrderMutation", m)
}

// The ExtraServicePriceFunc type is an adapter to allow the use of ordinary
// function as ExtraServicePrice mutator.
type ExtraServicePriceFunc func(context.Context, *cep_ent.ExtraServicePriceMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f ExtraServicePriceFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.ExtraServicePriceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.ExtraServicePriceMutation", m)
}

// The FrpcInfoFunc type is an adapter to allow the use of ordinary
// function as FrpcInfo mutator.
type FrpcInfoFunc func(context.Context, *cep_ent.FrpcInfoMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f FrpcInfoFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.FrpcInfoMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.FrpcInfoMutation", m)
}

// The FrpsInfoFunc type is an adapter to allow the use of ordinary
// function as FrpsInfo mutator.
type FrpsInfoFunc func(context.Context, *cep_ent.FrpsInfoMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f FrpsInfoFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.FrpsInfoMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.FrpsInfoMutation", m)
}

// The GpuFunc type is an adapter to allow the use of ordinary
// function as Gpu mutator.
type GpuFunc func(context.Context, *cep_ent.GpuMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f GpuFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.GpuMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.GpuMutation", m)
}

// The HmacKeyPairFunc type is an adapter to allow the use of ordinary
// function as HmacKeyPair mutator.
type HmacKeyPairFunc func(context.Context, *cep_ent.HmacKeyPairMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f HmacKeyPairFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.HmacKeyPairMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.HmacKeyPairMutation", m)
}

// The InputLogFunc type is an adapter to allow the use of ordinary
// function as InputLog mutator.
type InputLogFunc func(context.Context, *cep_ent.InputLogMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f InputLogFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.InputLogMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.InputLogMutation", m)
}

// The InviteFunc type is an adapter to allow the use of ordinary
// function as Invite mutator.
type InviteFunc func(context.Context, *cep_ent.InviteMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f InviteFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.InviteMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.InviteMutation", m)
}

// The LoginRecordFunc type is an adapter to allow the use of ordinary
// function as LoginRecord mutator.
type LoginRecordFunc func(context.Context, *cep_ent.LoginRecordMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f LoginRecordFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.LoginRecordMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.LoginRecordMutation", m)
}

// The LottoFunc type is an adapter to allow the use of ordinary
// function as Lotto mutator.
type LottoFunc func(context.Context, *cep_ent.LottoMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f LottoFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.LottoMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.LottoMutation", m)
}

// The LottoChanceRuleFunc type is an adapter to allow the use of ordinary
// function as LottoChanceRule mutator.
type LottoChanceRuleFunc func(context.Context, *cep_ent.LottoChanceRuleMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f LottoChanceRuleFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.LottoChanceRuleMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.LottoChanceRuleMutation", m)
}

// The LottoGetCountRecordFunc type is an adapter to allow the use of ordinary
// function as LottoGetCountRecord mutator.
type LottoGetCountRecordFunc func(context.Context, *cep_ent.LottoGetCountRecordMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f LottoGetCountRecordFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.LottoGetCountRecordMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.LottoGetCountRecordMutation", m)
}

// The LottoPrizeFunc type is an adapter to allow the use of ordinary
// function as LottoPrize mutator.
type LottoPrizeFunc func(context.Context, *cep_ent.LottoPrizeMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f LottoPrizeFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.LottoPrizeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.LottoPrizeMutation", m)
}

// The LottoRecordFunc type is an adapter to allow the use of ordinary
// function as LottoRecord mutator.
type LottoRecordFunc func(context.Context, *cep_ent.LottoRecordMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f LottoRecordFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.LottoRecordMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.LottoRecordMutation", m)
}

// The LottoUserCountFunc type is an adapter to allow the use of ordinary
// function as LottoUserCount mutator.
type LottoUserCountFunc func(context.Context, *cep_ent.LottoUserCountMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f LottoUserCountFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.LottoUserCountMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.LottoUserCountMutation", m)
}

// The MissionFunc type is an adapter to allow the use of ordinary
// function as Mission mutator.
type MissionFunc func(context.Context, *cep_ent.MissionMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f MissionFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.MissionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.MissionMutation", m)
}

// The MissionBatchFunc type is an adapter to allow the use of ordinary
// function as MissionBatch mutator.
type MissionBatchFunc func(context.Context, *cep_ent.MissionBatchMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f MissionBatchFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.MissionBatchMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.MissionBatchMutation", m)
}

// The MissionCategoryFunc type is an adapter to allow the use of ordinary
// function as MissionCategory mutator.
type MissionCategoryFunc func(context.Context, *cep_ent.MissionCategoryMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f MissionCategoryFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.MissionCategoryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.MissionCategoryMutation", m)
}

// The MissionConsumeOrderFunc type is an adapter to allow the use of ordinary
// function as MissionConsumeOrder mutator.
type MissionConsumeOrderFunc func(context.Context, *cep_ent.MissionConsumeOrderMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f MissionConsumeOrderFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.MissionConsumeOrderMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.MissionConsumeOrderMutation", m)
}

// The MissionExtraServiceFunc type is an adapter to allow the use of ordinary
// function as MissionExtraService mutator.
type MissionExtraServiceFunc func(context.Context, *cep_ent.MissionExtraServiceMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f MissionExtraServiceFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.MissionExtraServiceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.MissionExtraServiceMutation", m)
}

// The MissionKeyPairFunc type is an adapter to allow the use of ordinary
// function as MissionKeyPair mutator.
type MissionKeyPairFunc func(context.Context, *cep_ent.MissionKeyPairMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f MissionKeyPairFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.MissionKeyPairMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.MissionKeyPairMutation", m)
}

// The MissionKindFunc type is an adapter to allow the use of ordinary
// function as MissionKind mutator.
type MissionKindFunc func(context.Context, *cep_ent.MissionKindMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f MissionKindFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.MissionKindMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.MissionKindMutation", m)
}

// The MissionOrderFunc type is an adapter to allow the use of ordinary
// function as MissionOrder mutator.
type MissionOrderFunc func(context.Context, *cep_ent.MissionOrderMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f MissionOrderFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.MissionOrderMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.MissionOrderMutation", m)
}

// The MissionProduceOrderFunc type is an adapter to allow the use of ordinary
// function as MissionProduceOrder mutator.
type MissionProduceOrderFunc func(context.Context, *cep_ent.MissionProduceOrderMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f MissionProduceOrderFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.MissionProduceOrderMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.MissionProduceOrderMutation", m)
}

// The MissionProductionFunc type is an adapter to allow the use of ordinary
// function as MissionProduction mutator.
type MissionProductionFunc func(context.Context, *cep_ent.MissionProductionMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f MissionProductionFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.MissionProductionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.MissionProductionMutation", m)
}

// The OutputLogFunc type is an adapter to allow the use of ordinary
// function as OutputLog mutator.
type OutputLogFunc func(context.Context, *cep_ent.OutputLogMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f OutputLogFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.OutputLogMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.OutputLogMutation", m)
}

// The PlatformAccountFunc type is an adapter to allow the use of ordinary
// function as PlatformAccount mutator.
type PlatformAccountFunc func(context.Context, *cep_ent.PlatformAccountMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f PlatformAccountFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.PlatformAccountMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.PlatformAccountMutation", m)
}

// The PriceFunc type is an adapter to allow the use of ordinary
// function as Price mutator.
type PriceFunc func(context.Context, *cep_ent.PriceMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f PriceFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.PriceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.PriceMutation", m)
}

// The ProfitAccountFunc type is an adapter to allow the use of ordinary
// function as ProfitAccount mutator.
type ProfitAccountFunc func(context.Context, *cep_ent.ProfitAccountMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProfitAccountFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.ProfitAccountMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.ProfitAccountMutation", m)
}

// The ProfitSettingFunc type is an adapter to allow the use of ordinary
// function as ProfitSetting mutator.
type ProfitSettingFunc func(context.Context, *cep_ent.ProfitSettingMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProfitSettingFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.ProfitSettingMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.ProfitSettingMutation", m)
}

// The RechargeCampaignRuleFunc type is an adapter to allow the use of ordinary
// function as RechargeCampaignRule mutator.
type RechargeCampaignRuleFunc func(context.Context, *cep_ent.RechargeCampaignRuleMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f RechargeCampaignRuleFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.RechargeCampaignRuleMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.RechargeCampaignRuleMutation", m)
}

// The RechargeOrderFunc type is an adapter to allow the use of ordinary
// function as RechargeOrder mutator.
type RechargeOrderFunc func(context.Context, *cep_ent.RechargeOrderMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f RechargeOrderFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.RechargeOrderMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.RechargeOrderMutation", m)
}

// The RenewalAgreementFunc type is an adapter to allow the use of ordinary
// function as RenewalAgreement mutator.
type RenewalAgreementFunc func(context.Context, *cep_ent.RenewalAgreementMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f RenewalAgreementFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.RenewalAgreementMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.RenewalAgreementMutation", m)
}

// The SymbolFunc type is an adapter to allow the use of ordinary
// function as Symbol mutator.
type SymbolFunc func(context.Context, *cep_ent.SymbolMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f SymbolFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.SymbolMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.SymbolMutation", m)
}

// The TransferOrderFunc type is an adapter to allow the use of ordinary
// function as TransferOrder mutator.
type TransferOrderFunc func(context.Context, *cep_ent.TransferOrderMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f TransferOrderFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.TransferOrderMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.TransferOrderMutation", m)
}

// The TroubleDeductFunc type is an adapter to allow the use of ordinary
// function as TroubleDeduct mutator.
type TroubleDeductFunc func(context.Context, *cep_ent.TroubleDeductMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f TroubleDeductFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.TroubleDeductMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.TroubleDeductMutation", m)
}

// The UserFunc type is an adapter to allow the use of ordinary
// function as User mutator.
type UserFunc func(context.Context, *cep_ent.UserMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.UserMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.UserMutation", m)
}

// The UserDeviceFunc type is an adapter to allow the use of ordinary
// function as UserDevice mutator.
type UserDeviceFunc func(context.Context, *cep_ent.UserDeviceMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserDeviceFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.UserDeviceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.UserDeviceMutation", m)
}

// The VXAccountFunc type is an adapter to allow the use of ordinary
// function as VXAccount mutator.
type VXAccountFunc func(context.Context, *cep_ent.VXAccountMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f VXAccountFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.VXAccountMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.VXAccountMutation", m)
}

// The VXSocialFunc type is an adapter to allow the use of ordinary
// function as VXSocial mutator.
type VXSocialFunc func(context.Context, *cep_ent.VXSocialMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f VXSocialFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.VXSocialMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.VXSocialMutation", m)
}

// The WalletFunc type is an adapter to allow the use of ordinary
// function as Wallet mutator.
type WalletFunc func(context.Context, *cep_ent.WalletMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f WalletFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.WalletMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.WalletMutation", m)
}

// The WithdrawAccountFunc type is an adapter to allow the use of ordinary
// function as WithdrawAccount mutator.
type WithdrawAccountFunc func(context.Context, *cep_ent.WithdrawAccountMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f WithdrawAccountFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.WithdrawAccountMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.WithdrawAccountMutation", m)
}

// The WithdrawRecordFunc type is an adapter to allow the use of ordinary
// function as WithdrawRecord mutator.
type WithdrawRecordFunc func(context.Context, *cep_ent.WithdrawRecordMutation) (cep_ent.Value, error)

// Mutate calls f(ctx, m).
func (f WithdrawRecordFunc) Mutate(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
	if mv, ok := m.(*cep_ent.WithdrawRecordMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *cep_ent.WithdrawRecordMutation", m)
}

// Condition is a hook condition function.
type Condition func(context.Context, cep_ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m cep_ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m cep_ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m cep_ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op cep_ent.Op) Condition {
	return func(_ context.Context, m cep_ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m cep_ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m cep_ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m cep_ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
func If(hk cep_ent.Hook, cond Condition) cep_ent.Hook {
	return func(next cep_ent.Mutator) cep_ent.Mutator {
		return cep_ent.MutateFunc(func(ctx context.Context, m cep_ent.Mutation) (cep_ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, cep_ent.Delete|cep_ent.Create)
func On(hk cep_ent.Hook, op cep_ent.Op) cep_ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, cep_ent.Update|cep_ent.UpdateOne)
func Unless(hk cep_ent.Hook, op cep_ent.Op) cep_ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) cep_ent.Hook {
	return func(cep_ent.Mutator) cep_ent.Mutator {
		return cep_ent.MutateFunc(func(context.Context, cep_ent.Mutation) (cep_ent.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []cep_ent.Hook {
//		return []cep_ent.Hook{
//			Reject(cep_ent.Delete|cep_ent.Update),
//		}
//	}
func Reject(op cep_ent.Op) cep_ent.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []cep_ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...cep_ent.Hook) Chain {
	return Chain{append([]cep_ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() cep_ent.Hook {
	return func(mutator cep_ent.Mutator) cep_ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...cep_ent.Hook) Chain {
	newHooks := make([]cep_ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
