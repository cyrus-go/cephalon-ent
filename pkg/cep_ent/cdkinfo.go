// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/cdkinfo"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// 兑换码，可以兑换脑力值、gpu 使用权等
type CDKInfo struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建者 ID
	CreatedBy int64 `json:"created_by"`
	// 更新者 ID
	UpdatedBy int64 `json:"updated_by"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// 外键：发行用户 id
	IssueUserID int64 `json:"issue_user_id,omitempty,string"`
	// cdk 序列号
	CdkNumber string `json:"cdk_number"`
	// cdk 类型
	Type enums.CDKType `json:"type"`
	// cdk 能兑换的 cep 数量
	GetCep int64 `json:"get_cep"`
	// cdk 能兑换的 gpu 使用时长
	GetTime int64 `json:"get_time"`
	// 兑换 gpu 使用时长的类型
	BillingType enums.MissionBillingType `json:"billing_type"`
	// 过期时间
	ExpiredAt *time.Time `json:"expired_at"`
	// cdk 能使用的次数
	UseTimes int64 `json:"use_times"`
	// cdk 状态
	Status enums.CDKStatus `json:"status"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CDKInfoQuery when eager-loading is set.
	Edges        CDKInfoEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CDKInfoEdges holds the relations/edges for other nodes in the graph.
type CDKInfoEdges struct {
	// IssueUser holds the value of the issue_user edge.
	IssueUser *User `json:"issue_user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// IssueUserOrErr returns the IssueUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CDKInfoEdges) IssueUserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.IssueUser == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.IssueUser, nil
	}
	return nil, &NotLoadedError{edge: "issue_user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CDKInfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cdkinfo.FieldID, cdkinfo.FieldCreatedBy, cdkinfo.FieldUpdatedBy, cdkinfo.FieldIssueUserID, cdkinfo.FieldGetCep, cdkinfo.FieldGetTime, cdkinfo.FieldUseTimes:
			values[i] = new(sql.NullInt64)
		case cdkinfo.FieldCdkNumber, cdkinfo.FieldType, cdkinfo.FieldBillingType, cdkinfo.FieldStatus:
			values[i] = new(sql.NullString)
		case cdkinfo.FieldCreatedAt, cdkinfo.FieldUpdatedAt, cdkinfo.FieldDeletedAt, cdkinfo.FieldExpiredAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CDKInfo fields.
func (ci *CDKInfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cdkinfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ci.ID = int64(value.Int64)
		case cdkinfo.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ci.CreatedBy = value.Int64
			}
		case cdkinfo.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ci.UpdatedBy = value.Int64
			}
		case cdkinfo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ci.CreatedAt = value.Time
			}
		case cdkinfo.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ci.UpdatedAt = value.Time
			}
		case cdkinfo.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ci.DeletedAt = value.Time
			}
		case cdkinfo.FieldIssueUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field issue_user_id", values[i])
			} else if value.Valid {
				ci.IssueUserID = value.Int64
			}
		case cdkinfo.FieldCdkNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cdk_number", values[i])
			} else if value.Valid {
				ci.CdkNumber = value.String
			}
		case cdkinfo.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ci.Type = enums.CDKType(value.String)
			}
		case cdkinfo.FieldGetCep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field get_cep", values[i])
			} else if value.Valid {
				ci.GetCep = value.Int64
			}
		case cdkinfo.FieldGetTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field get_time", values[i])
			} else if value.Valid {
				ci.GetTime = value.Int64
			}
		case cdkinfo.FieldBillingType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field billing_type", values[i])
			} else if value.Valid {
				ci.BillingType = enums.MissionBillingType(value.String)
			}
		case cdkinfo.FieldExpiredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expired_at", values[i])
			} else if value.Valid {
				ci.ExpiredAt = new(time.Time)
				*ci.ExpiredAt = value.Time
			}
		case cdkinfo.FieldUseTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field use_times", values[i])
			} else if value.Valid {
				ci.UseTimes = value.Int64
			}
		case cdkinfo.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ci.Status = enums.CDKStatus(value.String)
			}
		default:
			ci.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CDKInfo.
// This includes values selected through modifiers, order, etc.
func (ci *CDKInfo) Value(name string) (ent.Value, error) {
	return ci.selectValues.Get(name)
}

// QueryIssueUser queries the "issue_user" edge of the CDKInfo entity.
func (ci *CDKInfo) QueryIssueUser() *UserQuery {
	return NewCDKInfoClient(ci.config).QueryIssueUser(ci)
}

// Update returns a builder for updating this CDKInfo.
// Note that you need to call CDKInfo.Unwrap() before calling this method if this CDKInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (ci *CDKInfo) Update() *CDKInfoUpdateOne {
	return NewCDKInfoClient(ci.config).UpdateOne(ci)
}

// Unwrap unwraps the CDKInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ci *CDKInfo) Unwrap() *CDKInfo {
	_tx, ok := ci.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: CDKInfo is not a transactional entity")
	}
	ci.config.driver = _tx.drv
	return ci
}

// String implements the fmt.Stringer.
func (ci *CDKInfo) String() string {
	var builder strings.Builder
	builder.WriteString("CDKInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ci.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", ci.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", ci.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ci.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ci.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(ci.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("issue_user_id=")
	builder.WriteString(fmt.Sprintf("%v", ci.IssueUserID))
	builder.WriteString(", ")
	builder.WriteString("cdk_number=")
	builder.WriteString(ci.CdkNumber)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", ci.Type))
	builder.WriteString(", ")
	builder.WriteString("get_cep=")
	builder.WriteString(fmt.Sprintf("%v", ci.GetCep))
	builder.WriteString(", ")
	builder.WriteString("get_time=")
	builder.WriteString(fmt.Sprintf("%v", ci.GetTime))
	builder.WriteString(", ")
	builder.WriteString("billing_type=")
	builder.WriteString(fmt.Sprintf("%v", ci.BillingType))
	builder.WriteString(", ")
	if v := ci.ExpiredAt; v != nil {
		builder.WriteString("expired_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("use_times=")
	builder.WriteString(fmt.Sprintf("%v", ci.UseTimes))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ci.Status))
	builder.WriteByte(')')
	return builder.String()
}

// CDKInfos is a parsable slice of CDKInfo.
type CDKInfos []*CDKInfo
