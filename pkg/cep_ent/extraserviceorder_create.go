// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/extraserviceorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/mission"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionbatch"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/symbol"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// ExtraServiceOrderCreate is the builder for creating a ExtraServiceOrder entity.
type ExtraServiceOrderCreate struct {
	config
	mutation *ExtraServiceOrderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (esoc *ExtraServiceOrderCreate) SetCreatedBy(i int64) *ExtraServiceOrderCreate {
	esoc.mutation.SetCreatedBy(i)
	return esoc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (esoc *ExtraServiceOrderCreate) SetNillableCreatedBy(i *int64) *ExtraServiceOrderCreate {
	if i != nil {
		esoc.SetCreatedBy(*i)
	}
	return esoc
}

// SetUpdatedBy sets the "updated_by" field.
func (esoc *ExtraServiceOrderCreate) SetUpdatedBy(i int64) *ExtraServiceOrderCreate {
	esoc.mutation.SetUpdatedBy(i)
	return esoc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (esoc *ExtraServiceOrderCreate) SetNillableUpdatedBy(i *int64) *ExtraServiceOrderCreate {
	if i != nil {
		esoc.SetUpdatedBy(*i)
	}
	return esoc
}

// SetCreatedAt sets the "created_at" field.
func (esoc *ExtraServiceOrderCreate) SetCreatedAt(t time.Time) *ExtraServiceOrderCreate {
	esoc.mutation.SetCreatedAt(t)
	return esoc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (esoc *ExtraServiceOrderCreate) SetNillableCreatedAt(t *time.Time) *ExtraServiceOrderCreate {
	if t != nil {
		esoc.SetCreatedAt(*t)
	}
	return esoc
}

// SetUpdatedAt sets the "updated_at" field.
func (esoc *ExtraServiceOrderCreate) SetUpdatedAt(t time.Time) *ExtraServiceOrderCreate {
	esoc.mutation.SetUpdatedAt(t)
	return esoc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (esoc *ExtraServiceOrderCreate) SetNillableUpdatedAt(t *time.Time) *ExtraServiceOrderCreate {
	if t != nil {
		esoc.SetUpdatedAt(*t)
	}
	return esoc
}

// SetDeletedAt sets the "deleted_at" field.
func (esoc *ExtraServiceOrderCreate) SetDeletedAt(t time.Time) *ExtraServiceOrderCreate {
	esoc.mutation.SetDeletedAt(t)
	return esoc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (esoc *ExtraServiceOrderCreate) SetNillableDeletedAt(t *time.Time) *ExtraServiceOrderCreate {
	if t != nil {
		esoc.SetDeletedAt(*t)
	}
	return esoc
}

// SetMissionID sets the "mission_id" field.
func (esoc *ExtraServiceOrderCreate) SetMissionID(i int64) *ExtraServiceOrderCreate {
	esoc.mutation.SetMissionID(i)
	return esoc
}

// SetNillableMissionID sets the "mission_id" field if the given value is not nil.
func (esoc *ExtraServiceOrderCreate) SetNillableMissionID(i *int64) *ExtraServiceOrderCreate {
	if i != nil {
		esoc.SetMissionID(*i)
	}
	return esoc
}

// SetMissionOrderID sets the "mission_order_id" field.
func (esoc *ExtraServiceOrderCreate) SetMissionOrderID(i int64) *ExtraServiceOrderCreate {
	esoc.mutation.SetMissionOrderID(i)
	return esoc
}

// SetNillableMissionOrderID sets the "mission_order_id" field if the given value is not nil.
func (esoc *ExtraServiceOrderCreate) SetNillableMissionOrderID(i *int64) *ExtraServiceOrderCreate {
	if i != nil {
		esoc.SetMissionOrderID(*i)
	}
	return esoc
}

// SetExtraServiceBillingType sets the "extra_service_billing_type" field.
func (esoc *ExtraServiceOrderCreate) SetExtraServiceBillingType(esbt enums.ExtraServiceBillingType) *ExtraServiceOrderCreate {
	esoc.mutation.SetExtraServiceBillingType(esbt)
	return esoc
}

// SetNillableExtraServiceBillingType sets the "extra_service_billing_type" field if the given value is not nil.
func (esoc *ExtraServiceOrderCreate) SetNillableExtraServiceBillingType(esbt *enums.ExtraServiceBillingType) *ExtraServiceOrderCreate {
	if esbt != nil {
		esoc.SetExtraServiceBillingType(*esbt)
	}
	return esoc
}

// SetAmount sets the "amount" field.
func (esoc *ExtraServiceOrderCreate) SetAmount(i int64) *ExtraServiceOrderCreate {
	esoc.mutation.SetAmount(i)
	return esoc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (esoc *ExtraServiceOrderCreate) SetNillableAmount(i *int64) *ExtraServiceOrderCreate {
	if i != nil {
		esoc.SetAmount(*i)
	}
	return esoc
}

// SetSymbolID sets the "symbol_id" field.
func (esoc *ExtraServiceOrderCreate) SetSymbolID(i int64) *ExtraServiceOrderCreate {
	esoc.mutation.SetSymbolID(i)
	return esoc
}

// SetNillableSymbolID sets the "symbol_id" field if the given value is not nil.
func (esoc *ExtraServiceOrderCreate) SetNillableSymbolID(i *int64) *ExtraServiceOrderCreate {
	if i != nil {
		esoc.SetSymbolID(*i)
	}
	return esoc
}

// SetUnitCep sets the "unit_cep" field.
func (esoc *ExtraServiceOrderCreate) SetUnitCep(i int64) *ExtraServiceOrderCreate {
	esoc.mutation.SetUnitCep(i)
	return esoc
}

// SetNillableUnitCep sets the "unit_cep" field if the given value is not nil.
func (esoc *ExtraServiceOrderCreate) SetNillableUnitCep(i *int64) *ExtraServiceOrderCreate {
	if i != nil {
		esoc.SetUnitCep(*i)
	}
	return esoc
}

// SetExtraServiceType sets the "extra_service_type" field.
func (esoc *ExtraServiceOrderCreate) SetExtraServiceType(est enums.ExtraServiceType) *ExtraServiceOrderCreate {
	esoc.mutation.SetExtraServiceType(est)
	return esoc
}

// SetNillableExtraServiceType sets the "extra_service_type" field if the given value is not nil.
func (esoc *ExtraServiceOrderCreate) SetNillableExtraServiceType(est *enums.ExtraServiceType) *ExtraServiceOrderCreate {
	if est != nil {
		esoc.SetExtraServiceType(*est)
	}
	return esoc
}

// SetBuyDuration sets the "buy_duration" field.
func (esoc *ExtraServiceOrderCreate) SetBuyDuration(i int64) *ExtraServiceOrderCreate {
	esoc.mutation.SetBuyDuration(i)
	return esoc
}

// SetNillableBuyDuration sets the "buy_duration" field if the given value is not nil.
func (esoc *ExtraServiceOrderCreate) SetNillableBuyDuration(i *int64) *ExtraServiceOrderCreate {
	if i != nil {
		esoc.SetBuyDuration(*i)
	}
	return esoc
}

// SetStartedAt sets the "started_at" field.
func (esoc *ExtraServiceOrderCreate) SetStartedAt(t time.Time) *ExtraServiceOrderCreate {
	esoc.mutation.SetStartedAt(t)
	return esoc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (esoc *ExtraServiceOrderCreate) SetNillableStartedAt(t *time.Time) *ExtraServiceOrderCreate {
	if t != nil {
		esoc.SetStartedAt(*t)
	}
	return esoc
}

// SetFinishedAt sets the "finished_at" field.
func (esoc *ExtraServiceOrderCreate) SetFinishedAt(t time.Time) *ExtraServiceOrderCreate {
	esoc.mutation.SetFinishedAt(t)
	return esoc
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (esoc *ExtraServiceOrderCreate) SetNillableFinishedAt(t *time.Time) *ExtraServiceOrderCreate {
	if t != nil {
		esoc.SetFinishedAt(*t)
	}
	return esoc
}

// SetPlanStartedAt sets the "plan_started_at" field.
func (esoc *ExtraServiceOrderCreate) SetPlanStartedAt(t time.Time) *ExtraServiceOrderCreate {
	esoc.mutation.SetPlanStartedAt(t)
	return esoc
}

// SetNillablePlanStartedAt sets the "plan_started_at" field if the given value is not nil.
func (esoc *ExtraServiceOrderCreate) SetNillablePlanStartedAt(t *time.Time) *ExtraServiceOrderCreate {
	if t != nil {
		esoc.SetPlanStartedAt(*t)
	}
	return esoc
}

// SetPlanFinishedAt sets the "plan_finished_at" field.
func (esoc *ExtraServiceOrderCreate) SetPlanFinishedAt(t time.Time) *ExtraServiceOrderCreate {
	esoc.mutation.SetPlanFinishedAt(t)
	return esoc
}

// SetNillablePlanFinishedAt sets the "plan_finished_at" field if the given value is not nil.
func (esoc *ExtraServiceOrderCreate) SetNillablePlanFinishedAt(t *time.Time) *ExtraServiceOrderCreate {
	if t != nil {
		esoc.SetPlanFinishedAt(*t)
	}
	return esoc
}

// SetMissionBatchID sets the "mission_batch_id" field.
func (esoc *ExtraServiceOrderCreate) SetMissionBatchID(i int64) *ExtraServiceOrderCreate {
	esoc.mutation.SetMissionBatchID(i)
	return esoc
}

// SetNillableMissionBatchID sets the "mission_batch_id" field if the given value is not nil.
func (esoc *ExtraServiceOrderCreate) SetNillableMissionBatchID(i *int64) *ExtraServiceOrderCreate {
	if i != nil {
		esoc.SetMissionBatchID(*i)
	}
	return esoc
}

// SetID sets the "id" field.
func (esoc *ExtraServiceOrderCreate) SetID(i int64) *ExtraServiceOrderCreate {
	esoc.mutation.SetID(i)
	return esoc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (esoc *ExtraServiceOrderCreate) SetNillableID(i *int64) *ExtraServiceOrderCreate {
	if i != nil {
		esoc.SetID(*i)
	}
	return esoc
}

// SetMission sets the "mission" edge to the Mission entity.
func (esoc *ExtraServiceOrderCreate) SetMission(m *Mission) *ExtraServiceOrderCreate {
	return esoc.SetMissionID(m.ID)
}

// SetMissionOrder sets the "mission_order" edge to the MissionOrder entity.
func (esoc *ExtraServiceOrderCreate) SetMissionOrder(m *MissionOrder) *ExtraServiceOrderCreate {
	return esoc.SetMissionOrderID(m.ID)
}

// SetSymbol sets the "symbol" edge to the Symbol entity.
func (esoc *ExtraServiceOrderCreate) SetSymbol(s *Symbol) *ExtraServiceOrderCreate {
	return esoc.SetSymbolID(s.ID)
}

// SetMissionBatch sets the "mission_batch" edge to the MissionBatch entity.
func (esoc *ExtraServiceOrderCreate) SetMissionBatch(m *MissionBatch) *ExtraServiceOrderCreate {
	return esoc.SetMissionBatchID(m.ID)
}

// Mutation returns the ExtraServiceOrderMutation object of the builder.
func (esoc *ExtraServiceOrderCreate) Mutation() *ExtraServiceOrderMutation {
	return esoc.mutation
}

// Save creates the ExtraServiceOrder in the database.
func (esoc *ExtraServiceOrderCreate) Save(ctx context.Context) (*ExtraServiceOrder, error) {
	esoc.defaults()
	return withHooks(ctx, esoc.sqlSave, esoc.mutation, esoc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (esoc *ExtraServiceOrderCreate) SaveX(ctx context.Context) *ExtraServiceOrder {
	v, err := esoc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (esoc *ExtraServiceOrderCreate) Exec(ctx context.Context) error {
	_, err := esoc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esoc *ExtraServiceOrderCreate) ExecX(ctx context.Context) {
	if err := esoc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (esoc *ExtraServiceOrderCreate) defaults() {
	if _, ok := esoc.mutation.CreatedBy(); !ok {
		v := extraserviceorder.DefaultCreatedBy
		esoc.mutation.SetCreatedBy(v)
	}
	if _, ok := esoc.mutation.UpdatedBy(); !ok {
		v := extraserviceorder.DefaultUpdatedBy
		esoc.mutation.SetUpdatedBy(v)
	}
	if _, ok := esoc.mutation.CreatedAt(); !ok {
		v := extraserviceorder.DefaultCreatedAt()
		esoc.mutation.SetCreatedAt(v)
	}
	if _, ok := esoc.mutation.UpdatedAt(); !ok {
		v := extraserviceorder.DefaultUpdatedAt()
		esoc.mutation.SetUpdatedAt(v)
	}
	if _, ok := esoc.mutation.DeletedAt(); !ok {
		v := extraserviceorder.DefaultDeletedAt
		esoc.mutation.SetDeletedAt(v)
	}
	if _, ok := esoc.mutation.MissionID(); !ok {
		v := extraserviceorder.DefaultMissionID
		esoc.mutation.SetMissionID(v)
	}
	if _, ok := esoc.mutation.MissionOrderID(); !ok {
		v := extraserviceorder.DefaultMissionOrderID
		esoc.mutation.SetMissionOrderID(v)
	}
	if _, ok := esoc.mutation.ExtraServiceBillingType(); !ok {
		v := extraserviceorder.DefaultExtraServiceBillingType
		esoc.mutation.SetExtraServiceBillingType(v)
	}
	if _, ok := esoc.mutation.Amount(); !ok {
		v := extraserviceorder.DefaultAmount
		esoc.mutation.SetAmount(v)
	}
	if _, ok := esoc.mutation.SymbolID(); !ok {
		v := extraserviceorder.DefaultSymbolID
		esoc.mutation.SetSymbolID(v)
	}
	if _, ok := esoc.mutation.UnitCep(); !ok {
		v := extraserviceorder.DefaultUnitCep
		esoc.mutation.SetUnitCep(v)
	}
	if _, ok := esoc.mutation.ExtraServiceType(); !ok {
		v := extraserviceorder.DefaultExtraServiceType
		esoc.mutation.SetExtraServiceType(v)
	}
	if _, ok := esoc.mutation.BuyDuration(); !ok {
		v := extraserviceorder.DefaultBuyDuration
		esoc.mutation.SetBuyDuration(v)
	}
	if _, ok := esoc.mutation.StartedAt(); !ok {
		v := extraserviceorder.DefaultStartedAt
		esoc.mutation.SetStartedAt(v)
	}
	if _, ok := esoc.mutation.FinishedAt(); !ok {
		v := extraserviceorder.DefaultFinishedAt
		esoc.mutation.SetFinishedAt(v)
	}
	if _, ok := esoc.mutation.PlanStartedAt(); !ok {
		v := extraserviceorder.DefaultPlanStartedAt
		esoc.mutation.SetPlanStartedAt(v)
	}
	if _, ok := esoc.mutation.PlanFinishedAt(); !ok {
		v := extraserviceorder.DefaultPlanFinishedAt
		esoc.mutation.SetPlanFinishedAt(v)
	}
	if _, ok := esoc.mutation.MissionBatchID(); !ok {
		v := extraserviceorder.DefaultMissionBatchID
		esoc.mutation.SetMissionBatchID(v)
	}
	if _, ok := esoc.mutation.ID(); !ok {
		v := extraserviceorder.DefaultID()
		esoc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (esoc *ExtraServiceOrderCreate) check() error {
	if _, ok := esoc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "ExtraServiceOrder.created_by"`)}
	}
	if _, ok := esoc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "ExtraServiceOrder.updated_by"`)}
	}
	if _, ok := esoc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "ExtraServiceOrder.created_at"`)}
	}
	if _, ok := esoc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "ExtraServiceOrder.updated_at"`)}
	}
	if _, ok := esoc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "ExtraServiceOrder.deleted_at"`)}
	}
	if _, ok := esoc.mutation.MissionID(); !ok {
		return &ValidationError{Name: "mission_id", err: errors.New(`cep_ent: missing required field "ExtraServiceOrder.mission_id"`)}
	}
	if _, ok := esoc.mutation.MissionOrderID(); !ok {
		return &ValidationError{Name: "mission_order_id", err: errors.New(`cep_ent: missing required field "ExtraServiceOrder.mission_order_id"`)}
	}
	if _, ok := esoc.mutation.ExtraServiceBillingType(); !ok {
		return &ValidationError{Name: "extra_service_billing_type", err: errors.New(`cep_ent: missing required field "ExtraServiceOrder.extra_service_billing_type"`)}
	}
	if v, ok := esoc.mutation.ExtraServiceBillingType(); ok {
		if err := extraserviceorder.ExtraServiceBillingTypeValidator(v); err != nil {
			return &ValidationError{Name: "extra_service_billing_type", err: fmt.Errorf(`cep_ent: validator failed for field "ExtraServiceOrder.extra_service_billing_type": %w`, err)}
		}
	}
	if _, ok := esoc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`cep_ent: missing required field "ExtraServiceOrder.amount"`)}
	}
	if _, ok := esoc.mutation.SymbolID(); !ok {
		return &ValidationError{Name: "symbol_id", err: errors.New(`cep_ent: missing required field "ExtraServiceOrder.symbol_id"`)}
	}
	if _, ok := esoc.mutation.UnitCep(); !ok {
		return &ValidationError{Name: "unit_cep", err: errors.New(`cep_ent: missing required field "ExtraServiceOrder.unit_cep"`)}
	}
	if _, ok := esoc.mutation.ExtraServiceType(); !ok {
		return &ValidationError{Name: "extra_service_type", err: errors.New(`cep_ent: missing required field "ExtraServiceOrder.extra_service_type"`)}
	}
	if v, ok := esoc.mutation.ExtraServiceType(); ok {
		if err := extraserviceorder.ExtraServiceTypeValidator(v); err != nil {
			return &ValidationError{Name: "extra_service_type", err: fmt.Errorf(`cep_ent: validator failed for field "ExtraServiceOrder.extra_service_type": %w`, err)}
		}
	}
	if _, ok := esoc.mutation.BuyDuration(); !ok {
		return &ValidationError{Name: "buy_duration", err: errors.New(`cep_ent: missing required field "ExtraServiceOrder.buy_duration"`)}
	}
	if _, ok := esoc.mutation.MissionBatchID(); !ok {
		return &ValidationError{Name: "mission_batch_id", err: errors.New(`cep_ent: missing required field "ExtraServiceOrder.mission_batch_id"`)}
	}
	if _, ok := esoc.mutation.MissionID(); !ok {
		return &ValidationError{Name: "mission", err: errors.New(`cep_ent: missing required edge "ExtraServiceOrder.mission"`)}
	}
	if _, ok := esoc.mutation.MissionOrderID(); !ok {
		return &ValidationError{Name: "mission_order", err: errors.New(`cep_ent: missing required edge "ExtraServiceOrder.mission_order"`)}
	}
	if _, ok := esoc.mutation.SymbolID(); !ok {
		return &ValidationError{Name: "symbol", err: errors.New(`cep_ent: missing required edge "ExtraServiceOrder.symbol"`)}
	}
	if _, ok := esoc.mutation.MissionBatchID(); !ok {
		return &ValidationError{Name: "mission_batch", err: errors.New(`cep_ent: missing required edge "ExtraServiceOrder.mission_batch"`)}
	}
	return nil
}

func (esoc *ExtraServiceOrderCreate) sqlSave(ctx context.Context) (*ExtraServiceOrder, error) {
	if err := esoc.check(); err != nil {
		return nil, err
	}
	_node, _spec := esoc.createSpec()
	if err := sqlgraph.CreateNode(ctx, esoc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	esoc.mutation.id = &_node.ID
	esoc.mutation.done = true
	return _node, nil
}

func (esoc *ExtraServiceOrderCreate) createSpec() (*ExtraServiceOrder, *sqlgraph.CreateSpec) {
	var (
		_node = &ExtraServiceOrder{config: esoc.config}
		_spec = sqlgraph.NewCreateSpec(extraserviceorder.Table, sqlgraph.NewFieldSpec(extraserviceorder.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = esoc.conflict
	if id, ok := esoc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := esoc.mutation.CreatedBy(); ok {
		_spec.SetField(extraserviceorder.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := esoc.mutation.UpdatedBy(); ok {
		_spec.SetField(extraserviceorder.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := esoc.mutation.CreatedAt(); ok {
		_spec.SetField(extraserviceorder.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := esoc.mutation.UpdatedAt(); ok {
		_spec.SetField(extraserviceorder.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := esoc.mutation.DeletedAt(); ok {
		_spec.SetField(extraserviceorder.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := esoc.mutation.ExtraServiceBillingType(); ok {
		_spec.SetField(extraserviceorder.FieldExtraServiceBillingType, field.TypeEnum, value)
		_node.ExtraServiceBillingType = value
	}
	if value, ok := esoc.mutation.Amount(); ok {
		_spec.SetField(extraserviceorder.FieldAmount, field.TypeInt64, value)
		_node.Amount = value
	}
	if value, ok := esoc.mutation.UnitCep(); ok {
		_spec.SetField(extraserviceorder.FieldUnitCep, field.TypeInt64, value)
		_node.UnitCep = value
	}
	if value, ok := esoc.mutation.ExtraServiceType(); ok {
		_spec.SetField(extraserviceorder.FieldExtraServiceType, field.TypeEnum, value)
		_node.ExtraServiceType = value
	}
	if value, ok := esoc.mutation.BuyDuration(); ok {
		_spec.SetField(extraserviceorder.FieldBuyDuration, field.TypeInt64, value)
		_node.BuyDuration = value
	}
	if value, ok := esoc.mutation.StartedAt(); ok {
		_spec.SetField(extraserviceorder.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = &value
	}
	if value, ok := esoc.mutation.FinishedAt(); ok {
		_spec.SetField(extraserviceorder.FieldFinishedAt, field.TypeTime, value)
		_node.FinishedAt = &value
	}
	if value, ok := esoc.mutation.PlanStartedAt(); ok {
		_spec.SetField(extraserviceorder.FieldPlanStartedAt, field.TypeTime, value)
		_node.PlanStartedAt = &value
	}
	if value, ok := esoc.mutation.PlanFinishedAt(); ok {
		_spec.SetField(extraserviceorder.FieldPlanFinishedAt, field.TypeTime, value)
		_node.PlanFinishedAt = &value
	}
	if nodes := esoc.mutation.MissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   extraserviceorder.MissionTable,
			Columns: []string{extraserviceorder.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MissionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := esoc.mutation.MissionOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   extraserviceorder.MissionOrderTable,
			Columns: []string{extraserviceorder.MissionOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MissionOrderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := esoc.mutation.SymbolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   extraserviceorder.SymbolTable,
			Columns: []string{extraserviceorder.SymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SymbolID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := esoc.mutation.MissionBatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   extraserviceorder.MissionBatchTable,
			Columns: []string{extraserviceorder.MissionBatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionbatch.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MissionBatchID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ExtraServiceOrder.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ExtraServiceOrderUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (esoc *ExtraServiceOrderCreate) OnConflict(opts ...sql.ConflictOption) *ExtraServiceOrderUpsertOne {
	esoc.conflict = opts
	return &ExtraServiceOrderUpsertOne{
		create: esoc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ExtraServiceOrder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (esoc *ExtraServiceOrderCreate) OnConflictColumns(columns ...string) *ExtraServiceOrderUpsertOne {
	esoc.conflict = append(esoc.conflict, sql.ConflictColumns(columns...))
	return &ExtraServiceOrderUpsertOne{
		create: esoc,
	}
}

type (
	// ExtraServiceOrderUpsertOne is the builder for "upsert"-ing
	//  one ExtraServiceOrder node.
	ExtraServiceOrderUpsertOne struct {
		create *ExtraServiceOrderCreate
	}

	// ExtraServiceOrderUpsert is the "OnConflict" setter.
	ExtraServiceOrderUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *ExtraServiceOrderUpsert) SetCreatedBy(v int64) *ExtraServiceOrderUpsert {
	u.Set(extraserviceorder.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsert) UpdateCreatedBy() *ExtraServiceOrderUpsert {
	u.SetExcluded(extraserviceorder.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *ExtraServiceOrderUpsert) AddCreatedBy(v int64) *ExtraServiceOrderUpsert {
	u.Add(extraserviceorder.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ExtraServiceOrderUpsert) SetUpdatedBy(v int64) *ExtraServiceOrderUpsert {
	u.Set(extraserviceorder.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsert) UpdateUpdatedBy() *ExtraServiceOrderUpsert {
	u.SetExcluded(extraserviceorder.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ExtraServiceOrderUpsert) AddUpdatedBy(v int64) *ExtraServiceOrderUpsert {
	u.Add(extraserviceorder.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ExtraServiceOrderUpsert) SetUpdatedAt(v time.Time) *ExtraServiceOrderUpsert {
	u.Set(extraserviceorder.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsert) UpdateUpdatedAt() *ExtraServiceOrderUpsert {
	u.SetExcluded(extraserviceorder.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ExtraServiceOrderUpsert) SetDeletedAt(v time.Time) *ExtraServiceOrderUpsert {
	u.Set(extraserviceorder.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsert) UpdateDeletedAt() *ExtraServiceOrderUpsert {
	u.SetExcluded(extraserviceorder.FieldDeletedAt)
	return u
}

// SetMissionID sets the "mission_id" field.
func (u *ExtraServiceOrderUpsert) SetMissionID(v int64) *ExtraServiceOrderUpsert {
	u.Set(extraserviceorder.FieldMissionID, v)
	return u
}

// UpdateMissionID sets the "mission_id" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsert) UpdateMissionID() *ExtraServiceOrderUpsert {
	u.SetExcluded(extraserviceorder.FieldMissionID)
	return u
}

// SetMissionOrderID sets the "mission_order_id" field.
func (u *ExtraServiceOrderUpsert) SetMissionOrderID(v int64) *ExtraServiceOrderUpsert {
	u.Set(extraserviceorder.FieldMissionOrderID, v)
	return u
}

// UpdateMissionOrderID sets the "mission_order_id" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsert) UpdateMissionOrderID() *ExtraServiceOrderUpsert {
	u.SetExcluded(extraserviceorder.FieldMissionOrderID)
	return u
}

// SetExtraServiceBillingType sets the "extra_service_billing_type" field.
func (u *ExtraServiceOrderUpsert) SetExtraServiceBillingType(v enums.ExtraServiceBillingType) *ExtraServiceOrderUpsert {
	u.Set(extraserviceorder.FieldExtraServiceBillingType, v)
	return u
}

// UpdateExtraServiceBillingType sets the "extra_service_billing_type" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsert) UpdateExtraServiceBillingType() *ExtraServiceOrderUpsert {
	u.SetExcluded(extraserviceorder.FieldExtraServiceBillingType)
	return u
}

// SetAmount sets the "amount" field.
func (u *ExtraServiceOrderUpsert) SetAmount(v int64) *ExtraServiceOrderUpsert {
	u.Set(extraserviceorder.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsert) UpdateAmount() *ExtraServiceOrderUpsert {
	u.SetExcluded(extraserviceorder.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *ExtraServiceOrderUpsert) AddAmount(v int64) *ExtraServiceOrderUpsert {
	u.Add(extraserviceorder.FieldAmount, v)
	return u
}

// SetSymbolID sets the "symbol_id" field.
func (u *ExtraServiceOrderUpsert) SetSymbolID(v int64) *ExtraServiceOrderUpsert {
	u.Set(extraserviceorder.FieldSymbolID, v)
	return u
}

// UpdateSymbolID sets the "symbol_id" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsert) UpdateSymbolID() *ExtraServiceOrderUpsert {
	u.SetExcluded(extraserviceorder.FieldSymbolID)
	return u
}

// SetUnitCep sets the "unit_cep" field.
func (u *ExtraServiceOrderUpsert) SetUnitCep(v int64) *ExtraServiceOrderUpsert {
	u.Set(extraserviceorder.FieldUnitCep, v)
	return u
}

// UpdateUnitCep sets the "unit_cep" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsert) UpdateUnitCep() *ExtraServiceOrderUpsert {
	u.SetExcluded(extraserviceorder.FieldUnitCep)
	return u
}

// AddUnitCep adds v to the "unit_cep" field.
func (u *ExtraServiceOrderUpsert) AddUnitCep(v int64) *ExtraServiceOrderUpsert {
	u.Add(extraserviceorder.FieldUnitCep, v)
	return u
}

// SetExtraServiceType sets the "extra_service_type" field.
func (u *ExtraServiceOrderUpsert) SetExtraServiceType(v enums.ExtraServiceType) *ExtraServiceOrderUpsert {
	u.Set(extraserviceorder.FieldExtraServiceType, v)
	return u
}

// UpdateExtraServiceType sets the "extra_service_type" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsert) UpdateExtraServiceType() *ExtraServiceOrderUpsert {
	u.SetExcluded(extraserviceorder.FieldExtraServiceType)
	return u
}

// SetBuyDuration sets the "buy_duration" field.
func (u *ExtraServiceOrderUpsert) SetBuyDuration(v int64) *ExtraServiceOrderUpsert {
	u.Set(extraserviceorder.FieldBuyDuration, v)
	return u
}

// UpdateBuyDuration sets the "buy_duration" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsert) UpdateBuyDuration() *ExtraServiceOrderUpsert {
	u.SetExcluded(extraserviceorder.FieldBuyDuration)
	return u
}

// AddBuyDuration adds v to the "buy_duration" field.
func (u *ExtraServiceOrderUpsert) AddBuyDuration(v int64) *ExtraServiceOrderUpsert {
	u.Add(extraserviceorder.FieldBuyDuration, v)
	return u
}

// SetStartedAt sets the "started_at" field.
func (u *ExtraServiceOrderUpsert) SetStartedAt(v time.Time) *ExtraServiceOrderUpsert {
	u.Set(extraserviceorder.FieldStartedAt, v)
	return u
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsert) UpdateStartedAt() *ExtraServiceOrderUpsert {
	u.SetExcluded(extraserviceorder.FieldStartedAt)
	return u
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *ExtraServiceOrderUpsert) ClearStartedAt() *ExtraServiceOrderUpsert {
	u.SetNull(extraserviceorder.FieldStartedAt)
	return u
}

// SetFinishedAt sets the "finished_at" field.
func (u *ExtraServiceOrderUpsert) SetFinishedAt(v time.Time) *ExtraServiceOrderUpsert {
	u.Set(extraserviceorder.FieldFinishedAt, v)
	return u
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsert) UpdateFinishedAt() *ExtraServiceOrderUpsert {
	u.SetExcluded(extraserviceorder.FieldFinishedAt)
	return u
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (u *ExtraServiceOrderUpsert) ClearFinishedAt() *ExtraServiceOrderUpsert {
	u.SetNull(extraserviceorder.FieldFinishedAt)
	return u
}

// SetPlanStartedAt sets the "plan_started_at" field.
func (u *ExtraServiceOrderUpsert) SetPlanStartedAt(v time.Time) *ExtraServiceOrderUpsert {
	u.Set(extraserviceorder.FieldPlanStartedAt, v)
	return u
}

// UpdatePlanStartedAt sets the "plan_started_at" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsert) UpdatePlanStartedAt() *ExtraServiceOrderUpsert {
	u.SetExcluded(extraserviceorder.FieldPlanStartedAt)
	return u
}

// ClearPlanStartedAt clears the value of the "plan_started_at" field.
func (u *ExtraServiceOrderUpsert) ClearPlanStartedAt() *ExtraServiceOrderUpsert {
	u.SetNull(extraserviceorder.FieldPlanStartedAt)
	return u
}

// SetPlanFinishedAt sets the "plan_finished_at" field.
func (u *ExtraServiceOrderUpsert) SetPlanFinishedAt(v time.Time) *ExtraServiceOrderUpsert {
	u.Set(extraserviceorder.FieldPlanFinishedAt, v)
	return u
}

// UpdatePlanFinishedAt sets the "plan_finished_at" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsert) UpdatePlanFinishedAt() *ExtraServiceOrderUpsert {
	u.SetExcluded(extraserviceorder.FieldPlanFinishedAt)
	return u
}

// ClearPlanFinishedAt clears the value of the "plan_finished_at" field.
func (u *ExtraServiceOrderUpsert) ClearPlanFinishedAt() *ExtraServiceOrderUpsert {
	u.SetNull(extraserviceorder.FieldPlanFinishedAt)
	return u
}

// SetMissionBatchID sets the "mission_batch_id" field.
func (u *ExtraServiceOrderUpsert) SetMissionBatchID(v int64) *ExtraServiceOrderUpsert {
	u.Set(extraserviceorder.FieldMissionBatchID, v)
	return u
}

// UpdateMissionBatchID sets the "mission_batch_id" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsert) UpdateMissionBatchID() *ExtraServiceOrderUpsert {
	u.SetExcluded(extraserviceorder.FieldMissionBatchID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ExtraServiceOrder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(extraserviceorder.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ExtraServiceOrderUpsertOne) UpdateNewValues() *ExtraServiceOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(extraserviceorder.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(extraserviceorder.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ExtraServiceOrder.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ExtraServiceOrderUpsertOne) Ignore() *ExtraServiceOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ExtraServiceOrderUpsertOne) DoNothing() *ExtraServiceOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ExtraServiceOrderCreate.OnConflict
// documentation for more info.
func (u *ExtraServiceOrderUpsertOne) Update(set func(*ExtraServiceOrderUpsert)) *ExtraServiceOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ExtraServiceOrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *ExtraServiceOrderUpsertOne) SetCreatedBy(v int64) *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *ExtraServiceOrderUpsertOne) AddCreatedBy(v int64) *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsertOne) UpdateCreatedBy() *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ExtraServiceOrderUpsertOne) SetUpdatedBy(v int64) *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ExtraServiceOrderUpsertOne) AddUpdatedBy(v int64) *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsertOne) UpdateUpdatedBy() *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ExtraServiceOrderUpsertOne) SetUpdatedAt(v time.Time) *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsertOne) UpdateUpdatedAt() *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ExtraServiceOrderUpsertOne) SetDeletedAt(v time.Time) *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsertOne) UpdateDeletedAt() *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetMissionID sets the "mission_id" field.
func (u *ExtraServiceOrderUpsertOne) SetMissionID(v int64) *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.SetMissionID(v)
	})
}

// UpdateMissionID sets the "mission_id" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsertOne) UpdateMissionID() *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.UpdateMissionID()
	})
}

// SetMissionOrderID sets the "mission_order_id" field.
func (u *ExtraServiceOrderUpsertOne) SetMissionOrderID(v int64) *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.SetMissionOrderID(v)
	})
}

// UpdateMissionOrderID sets the "mission_order_id" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsertOne) UpdateMissionOrderID() *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.UpdateMissionOrderID()
	})
}

// SetExtraServiceBillingType sets the "extra_service_billing_type" field.
func (u *ExtraServiceOrderUpsertOne) SetExtraServiceBillingType(v enums.ExtraServiceBillingType) *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.SetExtraServiceBillingType(v)
	})
}

// UpdateExtraServiceBillingType sets the "extra_service_billing_type" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsertOne) UpdateExtraServiceBillingType() *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.UpdateExtraServiceBillingType()
	})
}

// SetAmount sets the "amount" field.
func (u *ExtraServiceOrderUpsertOne) SetAmount(v int64) *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *ExtraServiceOrderUpsertOne) AddAmount(v int64) *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsertOne) UpdateAmount() *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.UpdateAmount()
	})
}

// SetSymbolID sets the "symbol_id" field.
func (u *ExtraServiceOrderUpsertOne) SetSymbolID(v int64) *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.SetSymbolID(v)
	})
}

// UpdateSymbolID sets the "symbol_id" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsertOne) UpdateSymbolID() *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.UpdateSymbolID()
	})
}

// SetUnitCep sets the "unit_cep" field.
func (u *ExtraServiceOrderUpsertOne) SetUnitCep(v int64) *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.SetUnitCep(v)
	})
}

// AddUnitCep adds v to the "unit_cep" field.
func (u *ExtraServiceOrderUpsertOne) AddUnitCep(v int64) *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.AddUnitCep(v)
	})
}

// UpdateUnitCep sets the "unit_cep" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsertOne) UpdateUnitCep() *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.UpdateUnitCep()
	})
}

// SetExtraServiceType sets the "extra_service_type" field.
func (u *ExtraServiceOrderUpsertOne) SetExtraServiceType(v enums.ExtraServiceType) *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.SetExtraServiceType(v)
	})
}

// UpdateExtraServiceType sets the "extra_service_type" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsertOne) UpdateExtraServiceType() *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.UpdateExtraServiceType()
	})
}

// SetBuyDuration sets the "buy_duration" field.
func (u *ExtraServiceOrderUpsertOne) SetBuyDuration(v int64) *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.SetBuyDuration(v)
	})
}

// AddBuyDuration adds v to the "buy_duration" field.
func (u *ExtraServiceOrderUpsertOne) AddBuyDuration(v int64) *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.AddBuyDuration(v)
	})
}

// UpdateBuyDuration sets the "buy_duration" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsertOne) UpdateBuyDuration() *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.UpdateBuyDuration()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *ExtraServiceOrderUpsertOne) SetStartedAt(v time.Time) *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsertOne) UpdateStartedAt() *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.UpdateStartedAt()
	})
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *ExtraServiceOrderUpsertOne) ClearStartedAt() *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.ClearStartedAt()
	})
}

// SetFinishedAt sets the "finished_at" field.
func (u *ExtraServiceOrderUpsertOne) SetFinishedAt(v time.Time) *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.SetFinishedAt(v)
	})
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsertOne) UpdateFinishedAt() *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.UpdateFinishedAt()
	})
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (u *ExtraServiceOrderUpsertOne) ClearFinishedAt() *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.ClearFinishedAt()
	})
}

// SetPlanStartedAt sets the "plan_started_at" field.
func (u *ExtraServiceOrderUpsertOne) SetPlanStartedAt(v time.Time) *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.SetPlanStartedAt(v)
	})
}

// UpdatePlanStartedAt sets the "plan_started_at" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsertOne) UpdatePlanStartedAt() *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.UpdatePlanStartedAt()
	})
}

// ClearPlanStartedAt clears the value of the "plan_started_at" field.
func (u *ExtraServiceOrderUpsertOne) ClearPlanStartedAt() *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.ClearPlanStartedAt()
	})
}

// SetPlanFinishedAt sets the "plan_finished_at" field.
func (u *ExtraServiceOrderUpsertOne) SetPlanFinishedAt(v time.Time) *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.SetPlanFinishedAt(v)
	})
}

// UpdatePlanFinishedAt sets the "plan_finished_at" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsertOne) UpdatePlanFinishedAt() *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.UpdatePlanFinishedAt()
	})
}

// ClearPlanFinishedAt clears the value of the "plan_finished_at" field.
func (u *ExtraServiceOrderUpsertOne) ClearPlanFinishedAt() *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.ClearPlanFinishedAt()
	})
}

// SetMissionBatchID sets the "mission_batch_id" field.
func (u *ExtraServiceOrderUpsertOne) SetMissionBatchID(v int64) *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.SetMissionBatchID(v)
	})
}

// UpdateMissionBatchID sets the "mission_batch_id" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsertOne) UpdateMissionBatchID() *ExtraServiceOrderUpsertOne {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.UpdateMissionBatchID()
	})
}

// Exec executes the query.
func (u *ExtraServiceOrderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for ExtraServiceOrderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ExtraServiceOrderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ExtraServiceOrderUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ExtraServiceOrderUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ExtraServiceOrderCreateBulk is the builder for creating many ExtraServiceOrder entities in bulk.
type ExtraServiceOrderCreateBulk struct {
	config
	err      error
	builders []*ExtraServiceOrderCreate
	conflict []sql.ConflictOption
}

// Save creates the ExtraServiceOrder entities in the database.
func (esocb *ExtraServiceOrderCreateBulk) Save(ctx context.Context) ([]*ExtraServiceOrder, error) {
	if esocb.err != nil {
		return nil, esocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(esocb.builders))
	nodes := make([]*ExtraServiceOrder, len(esocb.builders))
	mutators := make([]Mutator, len(esocb.builders))
	for i := range esocb.builders {
		func(i int, root context.Context) {
			builder := esocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExtraServiceOrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, esocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = esocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, esocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, esocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (esocb *ExtraServiceOrderCreateBulk) SaveX(ctx context.Context) []*ExtraServiceOrder {
	v, err := esocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (esocb *ExtraServiceOrderCreateBulk) Exec(ctx context.Context) error {
	_, err := esocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esocb *ExtraServiceOrderCreateBulk) ExecX(ctx context.Context) {
	if err := esocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ExtraServiceOrder.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ExtraServiceOrderUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (esocb *ExtraServiceOrderCreateBulk) OnConflict(opts ...sql.ConflictOption) *ExtraServiceOrderUpsertBulk {
	esocb.conflict = opts
	return &ExtraServiceOrderUpsertBulk{
		create: esocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ExtraServiceOrder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (esocb *ExtraServiceOrderCreateBulk) OnConflictColumns(columns ...string) *ExtraServiceOrderUpsertBulk {
	esocb.conflict = append(esocb.conflict, sql.ConflictColumns(columns...))
	return &ExtraServiceOrderUpsertBulk{
		create: esocb,
	}
}

// ExtraServiceOrderUpsertBulk is the builder for "upsert"-ing
// a bulk of ExtraServiceOrder nodes.
type ExtraServiceOrderUpsertBulk struct {
	create *ExtraServiceOrderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ExtraServiceOrder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(extraserviceorder.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ExtraServiceOrderUpsertBulk) UpdateNewValues() *ExtraServiceOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(extraserviceorder.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(extraserviceorder.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ExtraServiceOrder.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ExtraServiceOrderUpsertBulk) Ignore() *ExtraServiceOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ExtraServiceOrderUpsertBulk) DoNothing() *ExtraServiceOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ExtraServiceOrderCreateBulk.OnConflict
// documentation for more info.
func (u *ExtraServiceOrderUpsertBulk) Update(set func(*ExtraServiceOrderUpsert)) *ExtraServiceOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ExtraServiceOrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *ExtraServiceOrderUpsertBulk) SetCreatedBy(v int64) *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *ExtraServiceOrderUpsertBulk) AddCreatedBy(v int64) *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsertBulk) UpdateCreatedBy() *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ExtraServiceOrderUpsertBulk) SetUpdatedBy(v int64) *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ExtraServiceOrderUpsertBulk) AddUpdatedBy(v int64) *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsertBulk) UpdateUpdatedBy() *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ExtraServiceOrderUpsertBulk) SetUpdatedAt(v time.Time) *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsertBulk) UpdateUpdatedAt() *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ExtraServiceOrderUpsertBulk) SetDeletedAt(v time.Time) *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsertBulk) UpdateDeletedAt() *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetMissionID sets the "mission_id" field.
func (u *ExtraServiceOrderUpsertBulk) SetMissionID(v int64) *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.SetMissionID(v)
	})
}

// UpdateMissionID sets the "mission_id" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsertBulk) UpdateMissionID() *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.UpdateMissionID()
	})
}

// SetMissionOrderID sets the "mission_order_id" field.
func (u *ExtraServiceOrderUpsertBulk) SetMissionOrderID(v int64) *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.SetMissionOrderID(v)
	})
}

// UpdateMissionOrderID sets the "mission_order_id" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsertBulk) UpdateMissionOrderID() *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.UpdateMissionOrderID()
	})
}

// SetExtraServiceBillingType sets the "extra_service_billing_type" field.
func (u *ExtraServiceOrderUpsertBulk) SetExtraServiceBillingType(v enums.ExtraServiceBillingType) *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.SetExtraServiceBillingType(v)
	})
}

// UpdateExtraServiceBillingType sets the "extra_service_billing_type" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsertBulk) UpdateExtraServiceBillingType() *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.UpdateExtraServiceBillingType()
	})
}

// SetAmount sets the "amount" field.
func (u *ExtraServiceOrderUpsertBulk) SetAmount(v int64) *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *ExtraServiceOrderUpsertBulk) AddAmount(v int64) *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsertBulk) UpdateAmount() *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.UpdateAmount()
	})
}

// SetSymbolID sets the "symbol_id" field.
func (u *ExtraServiceOrderUpsertBulk) SetSymbolID(v int64) *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.SetSymbolID(v)
	})
}

// UpdateSymbolID sets the "symbol_id" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsertBulk) UpdateSymbolID() *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.UpdateSymbolID()
	})
}

// SetUnitCep sets the "unit_cep" field.
func (u *ExtraServiceOrderUpsertBulk) SetUnitCep(v int64) *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.SetUnitCep(v)
	})
}

// AddUnitCep adds v to the "unit_cep" field.
func (u *ExtraServiceOrderUpsertBulk) AddUnitCep(v int64) *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.AddUnitCep(v)
	})
}

// UpdateUnitCep sets the "unit_cep" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsertBulk) UpdateUnitCep() *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.UpdateUnitCep()
	})
}

// SetExtraServiceType sets the "extra_service_type" field.
func (u *ExtraServiceOrderUpsertBulk) SetExtraServiceType(v enums.ExtraServiceType) *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.SetExtraServiceType(v)
	})
}

// UpdateExtraServiceType sets the "extra_service_type" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsertBulk) UpdateExtraServiceType() *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.UpdateExtraServiceType()
	})
}

// SetBuyDuration sets the "buy_duration" field.
func (u *ExtraServiceOrderUpsertBulk) SetBuyDuration(v int64) *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.SetBuyDuration(v)
	})
}

// AddBuyDuration adds v to the "buy_duration" field.
func (u *ExtraServiceOrderUpsertBulk) AddBuyDuration(v int64) *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.AddBuyDuration(v)
	})
}

// UpdateBuyDuration sets the "buy_duration" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsertBulk) UpdateBuyDuration() *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.UpdateBuyDuration()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *ExtraServiceOrderUpsertBulk) SetStartedAt(v time.Time) *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsertBulk) UpdateStartedAt() *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.UpdateStartedAt()
	})
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *ExtraServiceOrderUpsertBulk) ClearStartedAt() *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.ClearStartedAt()
	})
}

// SetFinishedAt sets the "finished_at" field.
func (u *ExtraServiceOrderUpsertBulk) SetFinishedAt(v time.Time) *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.SetFinishedAt(v)
	})
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsertBulk) UpdateFinishedAt() *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.UpdateFinishedAt()
	})
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (u *ExtraServiceOrderUpsertBulk) ClearFinishedAt() *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.ClearFinishedAt()
	})
}

// SetPlanStartedAt sets the "plan_started_at" field.
func (u *ExtraServiceOrderUpsertBulk) SetPlanStartedAt(v time.Time) *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.SetPlanStartedAt(v)
	})
}

// UpdatePlanStartedAt sets the "plan_started_at" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsertBulk) UpdatePlanStartedAt() *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.UpdatePlanStartedAt()
	})
}

// ClearPlanStartedAt clears the value of the "plan_started_at" field.
func (u *ExtraServiceOrderUpsertBulk) ClearPlanStartedAt() *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.ClearPlanStartedAt()
	})
}

// SetPlanFinishedAt sets the "plan_finished_at" field.
func (u *ExtraServiceOrderUpsertBulk) SetPlanFinishedAt(v time.Time) *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.SetPlanFinishedAt(v)
	})
}

// UpdatePlanFinishedAt sets the "plan_finished_at" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsertBulk) UpdatePlanFinishedAt() *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.UpdatePlanFinishedAt()
	})
}

// ClearPlanFinishedAt clears the value of the "plan_finished_at" field.
func (u *ExtraServiceOrderUpsertBulk) ClearPlanFinishedAt() *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.ClearPlanFinishedAt()
	})
}

// SetMissionBatchID sets the "mission_batch_id" field.
func (u *ExtraServiceOrderUpsertBulk) SetMissionBatchID(v int64) *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.SetMissionBatchID(v)
	})
}

// UpdateMissionBatchID sets the "mission_batch_id" field to the value that was provided on create.
func (u *ExtraServiceOrderUpsertBulk) UpdateMissionBatchID() *ExtraServiceOrderUpsertBulk {
	return u.Update(func(s *ExtraServiceOrderUpsert) {
		s.UpdateMissionBatchID()
	})
}

// Exec executes the query.
func (u *ExtraServiceOrderUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the ExtraServiceOrderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for ExtraServiceOrderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ExtraServiceOrderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
