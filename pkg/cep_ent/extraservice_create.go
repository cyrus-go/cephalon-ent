// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/extraservice"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/extraserviceprice"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/mission"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionextraservice"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// ExtraServiceCreate is the builder for creating a ExtraService entity.
type ExtraServiceCreate struct {
	config
	mutation *ExtraServiceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (esc *ExtraServiceCreate) SetCreatedBy(i int64) *ExtraServiceCreate {
	esc.mutation.SetCreatedBy(i)
	return esc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (esc *ExtraServiceCreate) SetNillableCreatedBy(i *int64) *ExtraServiceCreate {
	if i != nil {
		esc.SetCreatedBy(*i)
	}
	return esc
}

// SetUpdatedBy sets the "updated_by" field.
func (esc *ExtraServiceCreate) SetUpdatedBy(i int64) *ExtraServiceCreate {
	esc.mutation.SetUpdatedBy(i)
	return esc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (esc *ExtraServiceCreate) SetNillableUpdatedBy(i *int64) *ExtraServiceCreate {
	if i != nil {
		esc.SetUpdatedBy(*i)
	}
	return esc
}

// SetCreatedAt sets the "created_at" field.
func (esc *ExtraServiceCreate) SetCreatedAt(t time.Time) *ExtraServiceCreate {
	esc.mutation.SetCreatedAt(t)
	return esc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (esc *ExtraServiceCreate) SetNillableCreatedAt(t *time.Time) *ExtraServiceCreate {
	if t != nil {
		esc.SetCreatedAt(*t)
	}
	return esc
}

// SetUpdatedAt sets the "updated_at" field.
func (esc *ExtraServiceCreate) SetUpdatedAt(t time.Time) *ExtraServiceCreate {
	esc.mutation.SetUpdatedAt(t)
	return esc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (esc *ExtraServiceCreate) SetNillableUpdatedAt(t *time.Time) *ExtraServiceCreate {
	if t != nil {
		esc.SetUpdatedAt(*t)
	}
	return esc
}

// SetDeletedAt sets the "deleted_at" field.
func (esc *ExtraServiceCreate) SetDeletedAt(t time.Time) *ExtraServiceCreate {
	esc.mutation.SetDeletedAt(t)
	return esc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (esc *ExtraServiceCreate) SetNillableDeletedAt(t *time.Time) *ExtraServiceCreate {
	if t != nil {
		esc.SetDeletedAt(*t)
	}
	return esc
}

// SetName sets the "name" field.
func (esc *ExtraServiceCreate) SetName(s string) *ExtraServiceCreate {
	esc.mutation.SetName(s)
	return esc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (esc *ExtraServiceCreate) SetNillableName(s *string) *ExtraServiceCreate {
	if s != nil {
		esc.SetName(*s)
	}
	return esc
}

// SetExtraServiceType sets the "extra_service_type" field.
func (esc *ExtraServiceCreate) SetExtraServiceType(est enums.ExtraServiceType) *ExtraServiceCreate {
	esc.mutation.SetExtraServiceType(est)
	return esc
}

// SetNillableExtraServiceType sets the "extra_service_type" field if the given value is not nil.
func (esc *ExtraServiceCreate) SetNillableExtraServiceType(est *enums.ExtraServiceType) *ExtraServiceCreate {
	if est != nil {
		esc.SetExtraServiceType(*est)
	}
	return esc
}

// SetStartedAt sets the "started_at" field.
func (esc *ExtraServiceCreate) SetStartedAt(t time.Time) *ExtraServiceCreate {
	esc.mutation.SetStartedAt(t)
	return esc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (esc *ExtraServiceCreate) SetNillableStartedAt(t *time.Time) *ExtraServiceCreate {
	if t != nil {
		esc.SetStartedAt(*t)
	}
	return esc
}

// SetFinishedAt sets the "finished_at" field.
func (esc *ExtraServiceCreate) SetFinishedAt(t time.Time) *ExtraServiceCreate {
	esc.mutation.SetFinishedAt(t)
	return esc
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (esc *ExtraServiceCreate) SetNillableFinishedAt(t *time.Time) *ExtraServiceCreate {
	if t != nil {
		esc.SetFinishedAt(*t)
	}
	return esc
}

// SetID sets the "id" field.
func (esc *ExtraServiceCreate) SetID(i int64) *ExtraServiceCreate {
	esc.mutation.SetID(i)
	return esc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (esc *ExtraServiceCreate) SetNillableID(i *int64) *ExtraServiceCreate {
	if i != nil {
		esc.SetID(*i)
	}
	return esc
}

// AddMissionIDs adds the "missions" edge to the Mission entity by IDs.
func (esc *ExtraServiceCreate) AddMissionIDs(ids ...int64) *ExtraServiceCreate {
	esc.mutation.AddMissionIDs(ids...)
	return esc
}

// AddMissions adds the "missions" edges to the Mission entity.
func (esc *ExtraServiceCreate) AddMissions(m ...*Mission) *ExtraServiceCreate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return esc.AddMissionIDs(ids...)
}

// AddMissionExtraServiceIDs adds the "mission_extra_services" edge to the MissionExtraService entity by IDs.
func (esc *ExtraServiceCreate) AddMissionExtraServiceIDs(ids ...int64) *ExtraServiceCreate {
	esc.mutation.AddMissionExtraServiceIDs(ids...)
	return esc
}

// AddMissionExtraServices adds the "mission_extra_services" edges to the MissionExtraService entity.
func (esc *ExtraServiceCreate) AddMissionExtraServices(m ...*MissionExtraService) *ExtraServiceCreate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return esc.AddMissionExtraServiceIDs(ids...)
}

// AddExtraServicePriceIDs adds the "extra_service_prices" edge to the ExtraServicePrice entity by IDs.
func (esc *ExtraServiceCreate) AddExtraServicePriceIDs(ids ...int64) *ExtraServiceCreate {
	esc.mutation.AddExtraServicePriceIDs(ids...)
	return esc
}

// AddExtraServicePrices adds the "extra_service_prices" edges to the ExtraServicePrice entity.
func (esc *ExtraServiceCreate) AddExtraServicePrices(e ...*ExtraServicePrice) *ExtraServiceCreate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return esc.AddExtraServicePriceIDs(ids...)
}

// Mutation returns the ExtraServiceMutation object of the builder.
func (esc *ExtraServiceCreate) Mutation() *ExtraServiceMutation {
	return esc.mutation
}

// Save creates the ExtraService in the database.
func (esc *ExtraServiceCreate) Save(ctx context.Context) (*ExtraService, error) {
	esc.defaults()
	return withHooks(ctx, esc.sqlSave, esc.mutation, esc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (esc *ExtraServiceCreate) SaveX(ctx context.Context) *ExtraService {
	v, err := esc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (esc *ExtraServiceCreate) Exec(ctx context.Context) error {
	_, err := esc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esc *ExtraServiceCreate) ExecX(ctx context.Context) {
	if err := esc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (esc *ExtraServiceCreate) defaults() {
	if _, ok := esc.mutation.CreatedBy(); !ok {
		v := extraservice.DefaultCreatedBy
		esc.mutation.SetCreatedBy(v)
	}
	if _, ok := esc.mutation.UpdatedBy(); !ok {
		v := extraservice.DefaultUpdatedBy
		esc.mutation.SetUpdatedBy(v)
	}
	if _, ok := esc.mutation.CreatedAt(); !ok {
		v := extraservice.DefaultCreatedAt()
		esc.mutation.SetCreatedAt(v)
	}
	if _, ok := esc.mutation.UpdatedAt(); !ok {
		v := extraservice.DefaultUpdatedAt()
		esc.mutation.SetUpdatedAt(v)
	}
	if _, ok := esc.mutation.DeletedAt(); !ok {
		v := extraservice.DefaultDeletedAt
		esc.mutation.SetDeletedAt(v)
	}
	if _, ok := esc.mutation.Name(); !ok {
		v := extraservice.DefaultName
		esc.mutation.SetName(v)
	}
	if _, ok := esc.mutation.ExtraServiceType(); !ok {
		v := extraservice.DefaultExtraServiceType
		esc.mutation.SetExtraServiceType(v)
	}
	if _, ok := esc.mutation.ID(); !ok {
		v := extraservice.DefaultID()
		esc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (esc *ExtraServiceCreate) check() error {
	if _, ok := esc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "ExtraService.created_by"`)}
	}
	if _, ok := esc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "ExtraService.updated_by"`)}
	}
	if _, ok := esc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "ExtraService.created_at"`)}
	}
	if _, ok := esc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "ExtraService.updated_at"`)}
	}
	if _, ok := esc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "ExtraService.deleted_at"`)}
	}
	if _, ok := esc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`cep_ent: missing required field "ExtraService.name"`)}
	}
	if _, ok := esc.mutation.ExtraServiceType(); !ok {
		return &ValidationError{Name: "extra_service_type", err: errors.New(`cep_ent: missing required field "ExtraService.extra_service_type"`)}
	}
	if v, ok := esc.mutation.ExtraServiceType(); ok {
		if err := extraservice.ExtraServiceTypeValidator(v); err != nil {
			return &ValidationError{Name: "extra_service_type", err: fmt.Errorf(`cep_ent: validator failed for field "ExtraService.extra_service_type": %w`, err)}
		}
	}
	return nil
}

func (esc *ExtraServiceCreate) sqlSave(ctx context.Context) (*ExtraService, error) {
	if err := esc.check(); err != nil {
		return nil, err
	}
	_node, _spec := esc.createSpec()
	if err := sqlgraph.CreateNode(ctx, esc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	esc.mutation.id = &_node.ID
	esc.mutation.done = true
	return _node, nil
}

func (esc *ExtraServiceCreate) createSpec() (*ExtraService, *sqlgraph.CreateSpec) {
	var (
		_node = &ExtraService{config: esc.config}
		_spec = sqlgraph.NewCreateSpec(extraservice.Table, sqlgraph.NewFieldSpec(extraservice.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = esc.conflict
	if id, ok := esc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := esc.mutation.CreatedBy(); ok {
		_spec.SetField(extraservice.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := esc.mutation.UpdatedBy(); ok {
		_spec.SetField(extraservice.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := esc.mutation.CreatedAt(); ok {
		_spec.SetField(extraservice.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := esc.mutation.UpdatedAt(); ok {
		_spec.SetField(extraservice.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := esc.mutation.DeletedAt(); ok {
		_spec.SetField(extraservice.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := esc.mutation.Name(); ok {
		_spec.SetField(extraservice.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := esc.mutation.ExtraServiceType(); ok {
		_spec.SetField(extraservice.FieldExtraServiceType, field.TypeEnum, value)
		_node.ExtraServiceType = value
	}
	if value, ok := esc.mutation.StartedAt(); ok {
		_spec.SetField(extraservice.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = &value
	}
	if value, ok := esc.mutation.FinishedAt(); ok {
		_spec.SetField(extraservice.FieldFinishedAt, field.TypeTime, value)
		_node.FinishedAt = &value
	}
	if nodes := esc.mutation.MissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   extraservice.MissionsTable,
			Columns: []string{extraservice.MissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := esc.mutation.MissionExtraServicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   extraservice.MissionExtraServicesTable,
			Columns: []string{extraservice.MissionExtraServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionextraservice.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := esc.mutation.ExtraServicePricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   extraservice.ExtraServicePricesTable,
			Columns: []string{extraservice.ExtraServicePricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extraserviceprice.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ExtraService.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ExtraServiceUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (esc *ExtraServiceCreate) OnConflict(opts ...sql.ConflictOption) *ExtraServiceUpsertOne {
	esc.conflict = opts
	return &ExtraServiceUpsertOne{
		create: esc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ExtraService.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (esc *ExtraServiceCreate) OnConflictColumns(columns ...string) *ExtraServiceUpsertOne {
	esc.conflict = append(esc.conflict, sql.ConflictColumns(columns...))
	return &ExtraServiceUpsertOne{
		create: esc,
	}
}

type (
	// ExtraServiceUpsertOne is the builder for "upsert"-ing
	//  one ExtraService node.
	ExtraServiceUpsertOne struct {
		create *ExtraServiceCreate
	}

	// ExtraServiceUpsert is the "OnConflict" setter.
	ExtraServiceUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *ExtraServiceUpsert) SetCreatedBy(v int64) *ExtraServiceUpsert {
	u.Set(extraservice.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ExtraServiceUpsert) UpdateCreatedBy() *ExtraServiceUpsert {
	u.SetExcluded(extraservice.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *ExtraServiceUpsert) AddCreatedBy(v int64) *ExtraServiceUpsert {
	u.Add(extraservice.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ExtraServiceUpsert) SetUpdatedBy(v int64) *ExtraServiceUpsert {
	u.Set(extraservice.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ExtraServiceUpsert) UpdateUpdatedBy() *ExtraServiceUpsert {
	u.SetExcluded(extraservice.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ExtraServiceUpsert) AddUpdatedBy(v int64) *ExtraServiceUpsert {
	u.Add(extraservice.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ExtraServiceUpsert) SetUpdatedAt(v time.Time) *ExtraServiceUpsert {
	u.Set(extraservice.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ExtraServiceUpsert) UpdateUpdatedAt() *ExtraServiceUpsert {
	u.SetExcluded(extraservice.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ExtraServiceUpsert) SetDeletedAt(v time.Time) *ExtraServiceUpsert {
	u.Set(extraservice.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ExtraServiceUpsert) UpdateDeletedAt() *ExtraServiceUpsert {
	u.SetExcluded(extraservice.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *ExtraServiceUpsert) SetName(v string) *ExtraServiceUpsert {
	u.Set(extraservice.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ExtraServiceUpsert) UpdateName() *ExtraServiceUpsert {
	u.SetExcluded(extraservice.FieldName)
	return u
}

// SetExtraServiceType sets the "extra_service_type" field.
func (u *ExtraServiceUpsert) SetExtraServiceType(v enums.ExtraServiceType) *ExtraServiceUpsert {
	u.Set(extraservice.FieldExtraServiceType, v)
	return u
}

// UpdateExtraServiceType sets the "extra_service_type" field to the value that was provided on create.
func (u *ExtraServiceUpsert) UpdateExtraServiceType() *ExtraServiceUpsert {
	u.SetExcluded(extraservice.FieldExtraServiceType)
	return u
}

// SetStartedAt sets the "started_at" field.
func (u *ExtraServiceUpsert) SetStartedAt(v time.Time) *ExtraServiceUpsert {
	u.Set(extraservice.FieldStartedAt, v)
	return u
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *ExtraServiceUpsert) UpdateStartedAt() *ExtraServiceUpsert {
	u.SetExcluded(extraservice.FieldStartedAt)
	return u
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *ExtraServiceUpsert) ClearStartedAt() *ExtraServiceUpsert {
	u.SetNull(extraservice.FieldStartedAt)
	return u
}

// SetFinishedAt sets the "finished_at" field.
func (u *ExtraServiceUpsert) SetFinishedAt(v time.Time) *ExtraServiceUpsert {
	u.Set(extraservice.FieldFinishedAt, v)
	return u
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *ExtraServiceUpsert) UpdateFinishedAt() *ExtraServiceUpsert {
	u.SetExcluded(extraservice.FieldFinishedAt)
	return u
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (u *ExtraServiceUpsert) ClearFinishedAt() *ExtraServiceUpsert {
	u.SetNull(extraservice.FieldFinishedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ExtraService.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(extraservice.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ExtraServiceUpsertOne) UpdateNewValues() *ExtraServiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(extraservice.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(extraservice.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ExtraService.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ExtraServiceUpsertOne) Ignore() *ExtraServiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ExtraServiceUpsertOne) DoNothing() *ExtraServiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ExtraServiceCreate.OnConflict
// documentation for more info.
func (u *ExtraServiceUpsertOne) Update(set func(*ExtraServiceUpsert)) *ExtraServiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ExtraServiceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *ExtraServiceUpsertOne) SetCreatedBy(v int64) *ExtraServiceUpsertOne {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *ExtraServiceUpsertOne) AddCreatedBy(v int64) *ExtraServiceUpsertOne {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ExtraServiceUpsertOne) UpdateCreatedBy() *ExtraServiceUpsertOne {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ExtraServiceUpsertOne) SetUpdatedBy(v int64) *ExtraServiceUpsertOne {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ExtraServiceUpsertOne) AddUpdatedBy(v int64) *ExtraServiceUpsertOne {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ExtraServiceUpsertOne) UpdateUpdatedBy() *ExtraServiceUpsertOne {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ExtraServiceUpsertOne) SetUpdatedAt(v time.Time) *ExtraServiceUpsertOne {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ExtraServiceUpsertOne) UpdateUpdatedAt() *ExtraServiceUpsertOne {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ExtraServiceUpsertOne) SetDeletedAt(v time.Time) *ExtraServiceUpsertOne {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ExtraServiceUpsertOne) UpdateDeletedAt() *ExtraServiceUpsertOne {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *ExtraServiceUpsertOne) SetName(v string) *ExtraServiceUpsertOne {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ExtraServiceUpsertOne) UpdateName() *ExtraServiceUpsertOne {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.UpdateName()
	})
}

// SetExtraServiceType sets the "extra_service_type" field.
func (u *ExtraServiceUpsertOne) SetExtraServiceType(v enums.ExtraServiceType) *ExtraServiceUpsertOne {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.SetExtraServiceType(v)
	})
}

// UpdateExtraServiceType sets the "extra_service_type" field to the value that was provided on create.
func (u *ExtraServiceUpsertOne) UpdateExtraServiceType() *ExtraServiceUpsertOne {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.UpdateExtraServiceType()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *ExtraServiceUpsertOne) SetStartedAt(v time.Time) *ExtraServiceUpsertOne {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *ExtraServiceUpsertOne) UpdateStartedAt() *ExtraServiceUpsertOne {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.UpdateStartedAt()
	})
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *ExtraServiceUpsertOne) ClearStartedAt() *ExtraServiceUpsertOne {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.ClearStartedAt()
	})
}

// SetFinishedAt sets the "finished_at" field.
func (u *ExtraServiceUpsertOne) SetFinishedAt(v time.Time) *ExtraServiceUpsertOne {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.SetFinishedAt(v)
	})
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *ExtraServiceUpsertOne) UpdateFinishedAt() *ExtraServiceUpsertOne {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.UpdateFinishedAt()
	})
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (u *ExtraServiceUpsertOne) ClearFinishedAt() *ExtraServiceUpsertOne {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.ClearFinishedAt()
	})
}

// Exec executes the query.
func (u *ExtraServiceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for ExtraServiceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ExtraServiceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ExtraServiceUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ExtraServiceUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ExtraServiceCreateBulk is the builder for creating many ExtraService entities in bulk.
type ExtraServiceCreateBulk struct {
	config
	err      error
	builders []*ExtraServiceCreate
	conflict []sql.ConflictOption
}

// Save creates the ExtraService entities in the database.
func (escb *ExtraServiceCreateBulk) Save(ctx context.Context) ([]*ExtraService, error) {
	if escb.err != nil {
		return nil, escb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(escb.builders))
	nodes := make([]*ExtraService, len(escb.builders))
	mutators := make([]Mutator, len(escb.builders))
	for i := range escb.builders {
		func(i int, root context.Context) {
			builder := escb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExtraServiceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, escb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = escb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, escb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, escb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (escb *ExtraServiceCreateBulk) SaveX(ctx context.Context) []*ExtraService {
	v, err := escb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (escb *ExtraServiceCreateBulk) Exec(ctx context.Context) error {
	_, err := escb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (escb *ExtraServiceCreateBulk) ExecX(ctx context.Context) {
	if err := escb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ExtraService.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ExtraServiceUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (escb *ExtraServiceCreateBulk) OnConflict(opts ...sql.ConflictOption) *ExtraServiceUpsertBulk {
	escb.conflict = opts
	return &ExtraServiceUpsertBulk{
		create: escb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ExtraService.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (escb *ExtraServiceCreateBulk) OnConflictColumns(columns ...string) *ExtraServiceUpsertBulk {
	escb.conflict = append(escb.conflict, sql.ConflictColumns(columns...))
	return &ExtraServiceUpsertBulk{
		create: escb,
	}
}

// ExtraServiceUpsertBulk is the builder for "upsert"-ing
// a bulk of ExtraService nodes.
type ExtraServiceUpsertBulk struct {
	create *ExtraServiceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ExtraService.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(extraservice.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ExtraServiceUpsertBulk) UpdateNewValues() *ExtraServiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(extraservice.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(extraservice.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ExtraService.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ExtraServiceUpsertBulk) Ignore() *ExtraServiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ExtraServiceUpsertBulk) DoNothing() *ExtraServiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ExtraServiceCreateBulk.OnConflict
// documentation for more info.
func (u *ExtraServiceUpsertBulk) Update(set func(*ExtraServiceUpsert)) *ExtraServiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ExtraServiceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *ExtraServiceUpsertBulk) SetCreatedBy(v int64) *ExtraServiceUpsertBulk {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *ExtraServiceUpsertBulk) AddCreatedBy(v int64) *ExtraServiceUpsertBulk {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ExtraServiceUpsertBulk) UpdateCreatedBy() *ExtraServiceUpsertBulk {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ExtraServiceUpsertBulk) SetUpdatedBy(v int64) *ExtraServiceUpsertBulk {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ExtraServiceUpsertBulk) AddUpdatedBy(v int64) *ExtraServiceUpsertBulk {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ExtraServiceUpsertBulk) UpdateUpdatedBy() *ExtraServiceUpsertBulk {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ExtraServiceUpsertBulk) SetUpdatedAt(v time.Time) *ExtraServiceUpsertBulk {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ExtraServiceUpsertBulk) UpdateUpdatedAt() *ExtraServiceUpsertBulk {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ExtraServiceUpsertBulk) SetDeletedAt(v time.Time) *ExtraServiceUpsertBulk {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ExtraServiceUpsertBulk) UpdateDeletedAt() *ExtraServiceUpsertBulk {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *ExtraServiceUpsertBulk) SetName(v string) *ExtraServiceUpsertBulk {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ExtraServiceUpsertBulk) UpdateName() *ExtraServiceUpsertBulk {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.UpdateName()
	})
}

// SetExtraServiceType sets the "extra_service_type" field.
func (u *ExtraServiceUpsertBulk) SetExtraServiceType(v enums.ExtraServiceType) *ExtraServiceUpsertBulk {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.SetExtraServiceType(v)
	})
}

// UpdateExtraServiceType sets the "extra_service_type" field to the value that was provided on create.
func (u *ExtraServiceUpsertBulk) UpdateExtraServiceType() *ExtraServiceUpsertBulk {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.UpdateExtraServiceType()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *ExtraServiceUpsertBulk) SetStartedAt(v time.Time) *ExtraServiceUpsertBulk {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *ExtraServiceUpsertBulk) UpdateStartedAt() *ExtraServiceUpsertBulk {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.UpdateStartedAt()
	})
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *ExtraServiceUpsertBulk) ClearStartedAt() *ExtraServiceUpsertBulk {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.ClearStartedAt()
	})
}

// SetFinishedAt sets the "finished_at" field.
func (u *ExtraServiceUpsertBulk) SetFinishedAt(v time.Time) *ExtraServiceUpsertBulk {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.SetFinishedAt(v)
	})
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *ExtraServiceUpsertBulk) UpdateFinishedAt() *ExtraServiceUpsertBulk {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.UpdateFinishedAt()
	})
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (u *ExtraServiceUpsertBulk) ClearFinishedAt() *ExtraServiceUpsertBulk {
	return u.Update(func(s *ExtraServiceUpsert) {
		s.ClearFinishedAt()
	})
}

// Exec executes the query.
func (u *ExtraServiceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the ExtraServiceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for ExtraServiceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ExtraServiceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
