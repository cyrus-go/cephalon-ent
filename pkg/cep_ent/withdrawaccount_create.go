// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/withdrawaccount"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// WithdrawAccountCreate is the builder for creating a WithdrawAccount entity.
type WithdrawAccountCreate struct {
	config
	mutation *WithdrawAccountMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (wac *WithdrawAccountCreate) SetCreatedBy(i int64) *WithdrawAccountCreate {
	wac.mutation.SetCreatedBy(i)
	return wac
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (wac *WithdrawAccountCreate) SetNillableCreatedBy(i *int64) *WithdrawAccountCreate {
	if i != nil {
		wac.SetCreatedBy(*i)
	}
	return wac
}

// SetUpdatedBy sets the "updated_by" field.
func (wac *WithdrawAccountCreate) SetUpdatedBy(i int64) *WithdrawAccountCreate {
	wac.mutation.SetUpdatedBy(i)
	return wac
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (wac *WithdrawAccountCreate) SetNillableUpdatedBy(i *int64) *WithdrawAccountCreate {
	if i != nil {
		wac.SetUpdatedBy(*i)
	}
	return wac
}

// SetCreatedAt sets the "created_at" field.
func (wac *WithdrawAccountCreate) SetCreatedAt(t time.Time) *WithdrawAccountCreate {
	wac.mutation.SetCreatedAt(t)
	return wac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wac *WithdrawAccountCreate) SetNillableCreatedAt(t *time.Time) *WithdrawAccountCreate {
	if t != nil {
		wac.SetCreatedAt(*t)
	}
	return wac
}

// SetUpdatedAt sets the "updated_at" field.
func (wac *WithdrawAccountCreate) SetUpdatedAt(t time.Time) *WithdrawAccountCreate {
	wac.mutation.SetUpdatedAt(t)
	return wac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wac *WithdrawAccountCreate) SetNillableUpdatedAt(t *time.Time) *WithdrawAccountCreate {
	if t != nil {
		wac.SetUpdatedAt(*t)
	}
	return wac
}

// SetDeletedAt sets the "deleted_at" field.
func (wac *WithdrawAccountCreate) SetDeletedAt(t time.Time) *WithdrawAccountCreate {
	wac.mutation.SetDeletedAt(t)
	return wac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wac *WithdrawAccountCreate) SetNillableDeletedAt(t *time.Time) *WithdrawAccountCreate {
	if t != nil {
		wac.SetDeletedAt(*t)
	}
	return wac
}

// SetUserID sets the "user_id" field.
func (wac *WithdrawAccountCreate) SetUserID(i int64) *WithdrawAccountCreate {
	wac.mutation.SetUserID(i)
	return wac
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (wac *WithdrawAccountCreate) SetNillableUserID(i *int64) *WithdrawAccountCreate {
	if i != nil {
		wac.SetUserID(*i)
	}
	return wac
}

// SetBusinessName sets the "business_name" field.
func (wac *WithdrawAccountCreate) SetBusinessName(s string) *WithdrawAccountCreate {
	wac.mutation.SetBusinessName(s)
	return wac
}

// SetNillableBusinessName sets the "business_name" field if the given value is not nil.
func (wac *WithdrawAccountCreate) SetNillableBusinessName(s *string) *WithdrawAccountCreate {
	if s != nil {
		wac.SetBusinessName(*s)
	}
	return wac
}

// SetBusinessID sets the "business_id" field.
func (wac *WithdrawAccountCreate) SetBusinessID(i int64) *WithdrawAccountCreate {
	wac.mutation.SetBusinessID(i)
	return wac
}

// SetNillableBusinessID sets the "business_id" field if the given value is not nil.
func (wac *WithdrawAccountCreate) SetNillableBusinessID(i *int64) *WithdrawAccountCreate {
	if i != nil {
		wac.SetBusinessID(*i)
	}
	return wac
}

// SetBusinessType sets the "business_type" field.
func (wac *WithdrawAccountCreate) SetBusinessType(et enums.BusinessType) *WithdrawAccountCreate {
	wac.mutation.SetBusinessType(et)
	return wac
}

// SetNillableBusinessType sets the "business_type" field if the given value is not nil.
func (wac *WithdrawAccountCreate) SetNillableBusinessType(et *enums.BusinessType) *WithdrawAccountCreate {
	if et != nil {
		wac.SetBusinessType(*et)
	}
	return wac
}

// SetIDCard sets the "id_card" field.
func (wac *WithdrawAccountCreate) SetIDCard(s string) *WithdrawAccountCreate {
	wac.mutation.SetIDCard(s)
	return wac
}

// SetNillableIDCard sets the "id_card" field if the given value is not nil.
func (wac *WithdrawAccountCreate) SetNillableIDCard(s *string) *WithdrawAccountCreate {
	if s != nil {
		wac.SetIDCard(*s)
	}
	return wac
}

// SetPersonalName sets the "personal_name" field.
func (wac *WithdrawAccountCreate) SetPersonalName(s string) *WithdrawAccountCreate {
	wac.mutation.SetPersonalName(s)
	return wac
}

// SetNillablePersonalName sets the "personal_name" field if the given value is not nil.
func (wac *WithdrawAccountCreate) SetNillablePersonalName(s *string) *WithdrawAccountCreate {
	if s != nil {
		wac.SetPersonalName(*s)
	}
	return wac
}

// SetPhone sets the "phone" field.
func (wac *WithdrawAccountCreate) SetPhone(s string) *WithdrawAccountCreate {
	wac.mutation.SetPhone(s)
	return wac
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (wac *WithdrawAccountCreate) SetNillablePhone(s *string) *WithdrawAccountCreate {
	if s != nil {
		wac.SetPhone(*s)
	}
	return wac
}

// SetBankCardNumber sets the "bank_card_number" field.
func (wac *WithdrawAccountCreate) SetBankCardNumber(s string) *WithdrawAccountCreate {
	wac.mutation.SetBankCardNumber(s)
	return wac
}

// SetNillableBankCardNumber sets the "bank_card_number" field if the given value is not nil.
func (wac *WithdrawAccountCreate) SetNillableBankCardNumber(s *string) *WithdrawAccountCreate {
	if s != nil {
		wac.SetBankCardNumber(*s)
	}
	return wac
}

// SetBank sets the "bank" field.
func (wac *WithdrawAccountCreate) SetBank(s string) *WithdrawAccountCreate {
	wac.mutation.SetBank(s)
	return wac
}

// SetNillableBank sets the "bank" field if the given value is not nil.
func (wac *WithdrawAccountCreate) SetNillableBank(s *string) *WithdrawAccountCreate {
	if s != nil {
		wac.SetBank(*s)
	}
	return wac
}

// SetWay sets the "way" field.
func (wac *WithdrawAccountCreate) SetWay(eot enums.TransferOrderType) *WithdrawAccountCreate {
	wac.mutation.SetWay(eot)
	return wac
}

// SetNillableWay sets the "way" field if the given value is not nil.
func (wac *WithdrawAccountCreate) SetNillableWay(eot *enums.TransferOrderType) *WithdrawAccountCreate {
	if eot != nil {
		wac.SetWay(*eot)
	}
	return wac
}

// SetAlipayCardNo sets the "alipay_card_no" field.
func (wac *WithdrawAccountCreate) SetAlipayCardNo(s string) *WithdrawAccountCreate {
	wac.mutation.SetAlipayCardNo(s)
	return wac
}

// SetNillableAlipayCardNo sets the "alipay_card_no" field if the given value is not nil.
func (wac *WithdrawAccountCreate) SetNillableAlipayCardNo(s *string) *WithdrawAccountCreate {
	if s != nil {
		wac.SetAlipayCardNo(*s)
	}
	return wac
}

// SetID sets the "id" field.
func (wac *WithdrawAccountCreate) SetID(i int64) *WithdrawAccountCreate {
	wac.mutation.SetID(i)
	return wac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wac *WithdrawAccountCreate) SetNillableID(i *int64) *WithdrawAccountCreate {
	if i != nil {
		wac.SetID(*i)
	}
	return wac
}

// SetUser sets the "user" edge to the User entity.
func (wac *WithdrawAccountCreate) SetUser(u *User) *WithdrawAccountCreate {
	return wac.SetUserID(u.ID)
}

// Mutation returns the WithdrawAccountMutation object of the builder.
func (wac *WithdrawAccountCreate) Mutation() *WithdrawAccountMutation {
	return wac.mutation
}

// Save creates the WithdrawAccount in the database.
func (wac *WithdrawAccountCreate) Save(ctx context.Context) (*WithdrawAccount, error) {
	wac.defaults()
	return withHooks(ctx, wac.sqlSave, wac.mutation, wac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wac *WithdrawAccountCreate) SaveX(ctx context.Context) *WithdrawAccount {
	v, err := wac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wac *WithdrawAccountCreate) Exec(ctx context.Context) error {
	_, err := wac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wac *WithdrawAccountCreate) ExecX(ctx context.Context) {
	if err := wac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wac *WithdrawAccountCreate) defaults() {
	if _, ok := wac.mutation.CreatedBy(); !ok {
		v := withdrawaccount.DefaultCreatedBy
		wac.mutation.SetCreatedBy(v)
	}
	if _, ok := wac.mutation.UpdatedBy(); !ok {
		v := withdrawaccount.DefaultUpdatedBy
		wac.mutation.SetUpdatedBy(v)
	}
	if _, ok := wac.mutation.CreatedAt(); !ok {
		v := withdrawaccount.DefaultCreatedAt()
		wac.mutation.SetCreatedAt(v)
	}
	if _, ok := wac.mutation.UpdatedAt(); !ok {
		v := withdrawaccount.DefaultUpdatedAt()
		wac.mutation.SetUpdatedAt(v)
	}
	if _, ok := wac.mutation.DeletedAt(); !ok {
		v := withdrawaccount.DefaultDeletedAt
		wac.mutation.SetDeletedAt(v)
	}
	if _, ok := wac.mutation.UserID(); !ok {
		v := withdrawaccount.DefaultUserID
		wac.mutation.SetUserID(v)
	}
	if _, ok := wac.mutation.BusinessName(); !ok {
		v := withdrawaccount.DefaultBusinessName
		wac.mutation.SetBusinessName(v)
	}
	if _, ok := wac.mutation.BusinessID(); !ok {
		v := withdrawaccount.DefaultBusinessID
		wac.mutation.SetBusinessID(v)
	}
	if _, ok := wac.mutation.BusinessType(); !ok {
		v := withdrawaccount.DefaultBusinessType
		wac.mutation.SetBusinessType(v)
	}
	if _, ok := wac.mutation.IDCard(); !ok {
		v := withdrawaccount.DefaultIDCard
		wac.mutation.SetIDCard(v)
	}
	if _, ok := wac.mutation.PersonalName(); !ok {
		v := withdrawaccount.DefaultPersonalName
		wac.mutation.SetPersonalName(v)
	}
	if _, ok := wac.mutation.Phone(); !ok {
		v := withdrawaccount.DefaultPhone
		wac.mutation.SetPhone(v)
	}
	if _, ok := wac.mutation.BankCardNumber(); !ok {
		v := withdrawaccount.DefaultBankCardNumber
		wac.mutation.SetBankCardNumber(v)
	}
	if _, ok := wac.mutation.Bank(); !ok {
		v := withdrawaccount.DefaultBank
		wac.mutation.SetBank(v)
	}
	if _, ok := wac.mutation.Way(); !ok {
		v := withdrawaccount.DefaultWay
		wac.mutation.SetWay(v)
	}
	if _, ok := wac.mutation.AlipayCardNo(); !ok {
		v := withdrawaccount.DefaultAlipayCardNo
		wac.mutation.SetAlipayCardNo(v)
	}
	if _, ok := wac.mutation.ID(); !ok {
		v := withdrawaccount.DefaultID()
		wac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wac *WithdrawAccountCreate) check() error {
	if _, ok := wac.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "WithdrawAccount.created_by"`)}
	}
	if _, ok := wac.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "WithdrawAccount.updated_by"`)}
	}
	if _, ok := wac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "WithdrawAccount.created_at"`)}
	}
	if _, ok := wac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "WithdrawAccount.updated_at"`)}
	}
	if _, ok := wac.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "WithdrawAccount.deleted_at"`)}
	}
	if _, ok := wac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "WithdrawAccount.user_id"`)}
	}
	if _, ok := wac.mutation.BusinessName(); !ok {
		return &ValidationError{Name: "business_name", err: errors.New(`cep_ent: missing required field "WithdrawAccount.business_name"`)}
	}
	if _, ok := wac.mutation.BusinessID(); !ok {
		return &ValidationError{Name: "business_id", err: errors.New(`cep_ent: missing required field "WithdrawAccount.business_id"`)}
	}
	if _, ok := wac.mutation.BusinessType(); !ok {
		return &ValidationError{Name: "business_type", err: errors.New(`cep_ent: missing required field "WithdrawAccount.business_type"`)}
	}
	if v, ok := wac.mutation.BusinessType(); ok {
		if err := withdrawaccount.BusinessTypeValidator(v); err != nil {
			return &ValidationError{Name: "business_type", err: fmt.Errorf(`cep_ent: validator failed for field "WithdrawAccount.business_type": %w`, err)}
		}
	}
	if _, ok := wac.mutation.IDCard(); !ok {
		return &ValidationError{Name: "id_card", err: errors.New(`cep_ent: missing required field "WithdrawAccount.id_card"`)}
	}
	if _, ok := wac.mutation.PersonalName(); !ok {
		return &ValidationError{Name: "personal_name", err: errors.New(`cep_ent: missing required field "WithdrawAccount.personal_name"`)}
	}
	if _, ok := wac.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`cep_ent: missing required field "WithdrawAccount.phone"`)}
	}
	if _, ok := wac.mutation.BankCardNumber(); !ok {
		return &ValidationError{Name: "bank_card_number", err: errors.New(`cep_ent: missing required field "WithdrawAccount.bank_card_number"`)}
	}
	if _, ok := wac.mutation.Bank(); !ok {
		return &ValidationError{Name: "bank", err: errors.New(`cep_ent: missing required field "WithdrawAccount.bank"`)}
	}
	if _, ok := wac.mutation.Way(); !ok {
		return &ValidationError{Name: "way", err: errors.New(`cep_ent: missing required field "WithdrawAccount.way"`)}
	}
	if v, ok := wac.mutation.Way(); ok {
		if err := withdrawaccount.WayValidator(v); err != nil {
			return &ValidationError{Name: "way", err: fmt.Errorf(`cep_ent: validator failed for field "WithdrawAccount.way": %w`, err)}
		}
	}
	if _, ok := wac.mutation.AlipayCardNo(); !ok {
		return &ValidationError{Name: "alipay_card_no", err: errors.New(`cep_ent: missing required field "WithdrawAccount.alipay_card_no"`)}
	}
	if _, ok := wac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "WithdrawAccount.user"`)}
	}
	return nil
}

func (wac *WithdrawAccountCreate) sqlSave(ctx context.Context) (*WithdrawAccount, error) {
	if err := wac.check(); err != nil {
		return nil, err
	}
	_node, _spec := wac.createSpec()
	if err := sqlgraph.CreateNode(ctx, wac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	wac.mutation.id = &_node.ID
	wac.mutation.done = true
	return _node, nil
}

func (wac *WithdrawAccountCreate) createSpec() (*WithdrawAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &WithdrawAccount{config: wac.config}
		_spec = sqlgraph.NewCreateSpec(withdrawaccount.Table, sqlgraph.NewFieldSpec(withdrawaccount.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = wac.conflict
	if id, ok := wac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := wac.mutation.CreatedBy(); ok {
		_spec.SetField(withdrawaccount.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := wac.mutation.UpdatedBy(); ok {
		_spec.SetField(withdrawaccount.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := wac.mutation.CreatedAt(); ok {
		_spec.SetField(withdrawaccount.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wac.mutation.UpdatedAt(); ok {
		_spec.SetField(withdrawaccount.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := wac.mutation.DeletedAt(); ok {
		_spec.SetField(withdrawaccount.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := wac.mutation.BusinessName(); ok {
		_spec.SetField(withdrawaccount.FieldBusinessName, field.TypeString, value)
		_node.BusinessName = value
	}
	if value, ok := wac.mutation.BusinessID(); ok {
		_spec.SetField(withdrawaccount.FieldBusinessID, field.TypeInt64, value)
		_node.BusinessID = value
	}
	if value, ok := wac.mutation.BusinessType(); ok {
		_spec.SetField(withdrawaccount.FieldBusinessType, field.TypeEnum, value)
		_node.BusinessType = value
	}
	if value, ok := wac.mutation.IDCard(); ok {
		_spec.SetField(withdrawaccount.FieldIDCard, field.TypeString, value)
		_node.IDCard = value
	}
	if value, ok := wac.mutation.PersonalName(); ok {
		_spec.SetField(withdrawaccount.FieldPersonalName, field.TypeString, value)
		_node.PersonalName = value
	}
	if value, ok := wac.mutation.Phone(); ok {
		_spec.SetField(withdrawaccount.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := wac.mutation.BankCardNumber(); ok {
		_spec.SetField(withdrawaccount.FieldBankCardNumber, field.TypeString, value)
		_node.BankCardNumber = value
	}
	if value, ok := wac.mutation.Bank(); ok {
		_spec.SetField(withdrawaccount.FieldBank, field.TypeString, value)
		_node.Bank = value
	}
	if value, ok := wac.mutation.Way(); ok {
		_spec.SetField(withdrawaccount.FieldWay, field.TypeEnum, value)
		_node.Way = value
	}
	if value, ok := wac.mutation.AlipayCardNo(); ok {
		_spec.SetField(withdrawaccount.FieldAlipayCardNo, field.TypeString, value)
		_node.AlipayCardNo = value
	}
	if nodes := wac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   withdrawaccount.UserTable,
			Columns: []string{withdrawaccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WithdrawAccount.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WithdrawAccountUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (wac *WithdrawAccountCreate) OnConflict(opts ...sql.ConflictOption) *WithdrawAccountUpsertOne {
	wac.conflict = opts
	return &WithdrawAccountUpsertOne{
		create: wac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WithdrawAccount.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wac *WithdrawAccountCreate) OnConflictColumns(columns ...string) *WithdrawAccountUpsertOne {
	wac.conflict = append(wac.conflict, sql.ConflictColumns(columns...))
	return &WithdrawAccountUpsertOne{
		create: wac,
	}
}

type (
	// WithdrawAccountUpsertOne is the builder for "upsert"-ing
	//  one WithdrawAccount node.
	WithdrawAccountUpsertOne struct {
		create *WithdrawAccountCreate
	}

	// WithdrawAccountUpsert is the "OnConflict" setter.
	WithdrawAccountUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *WithdrawAccountUpsert) SetCreatedBy(v int64) *WithdrawAccountUpsert {
	u.Set(withdrawaccount.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *WithdrawAccountUpsert) UpdateCreatedBy() *WithdrawAccountUpsert {
	u.SetExcluded(withdrawaccount.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *WithdrawAccountUpsert) AddCreatedBy(v int64) *WithdrawAccountUpsert {
	u.Add(withdrawaccount.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *WithdrawAccountUpsert) SetUpdatedBy(v int64) *WithdrawAccountUpsert {
	u.Set(withdrawaccount.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *WithdrawAccountUpsert) UpdateUpdatedBy() *WithdrawAccountUpsert {
	u.SetExcluded(withdrawaccount.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *WithdrawAccountUpsert) AddUpdatedBy(v int64) *WithdrawAccountUpsert {
	u.Add(withdrawaccount.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WithdrawAccountUpsert) SetUpdatedAt(v time.Time) *WithdrawAccountUpsert {
	u.Set(withdrawaccount.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WithdrawAccountUpsert) UpdateUpdatedAt() *WithdrawAccountUpsert {
	u.SetExcluded(withdrawaccount.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WithdrawAccountUpsert) SetDeletedAt(v time.Time) *WithdrawAccountUpsert {
	u.Set(withdrawaccount.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WithdrawAccountUpsert) UpdateDeletedAt() *WithdrawAccountUpsert {
	u.SetExcluded(withdrawaccount.FieldDeletedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *WithdrawAccountUpsert) SetUserID(v int64) *WithdrawAccountUpsert {
	u.Set(withdrawaccount.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *WithdrawAccountUpsert) UpdateUserID() *WithdrawAccountUpsert {
	u.SetExcluded(withdrawaccount.FieldUserID)
	return u
}

// SetBusinessName sets the "business_name" field.
func (u *WithdrawAccountUpsert) SetBusinessName(v string) *WithdrawAccountUpsert {
	u.Set(withdrawaccount.FieldBusinessName, v)
	return u
}

// UpdateBusinessName sets the "business_name" field to the value that was provided on create.
func (u *WithdrawAccountUpsert) UpdateBusinessName() *WithdrawAccountUpsert {
	u.SetExcluded(withdrawaccount.FieldBusinessName)
	return u
}

// SetBusinessID sets the "business_id" field.
func (u *WithdrawAccountUpsert) SetBusinessID(v int64) *WithdrawAccountUpsert {
	u.Set(withdrawaccount.FieldBusinessID, v)
	return u
}

// UpdateBusinessID sets the "business_id" field to the value that was provided on create.
func (u *WithdrawAccountUpsert) UpdateBusinessID() *WithdrawAccountUpsert {
	u.SetExcluded(withdrawaccount.FieldBusinessID)
	return u
}

// AddBusinessID adds v to the "business_id" field.
func (u *WithdrawAccountUpsert) AddBusinessID(v int64) *WithdrawAccountUpsert {
	u.Add(withdrawaccount.FieldBusinessID, v)
	return u
}

// SetBusinessType sets the "business_type" field.
func (u *WithdrawAccountUpsert) SetBusinessType(v enums.BusinessType) *WithdrawAccountUpsert {
	u.Set(withdrawaccount.FieldBusinessType, v)
	return u
}

// UpdateBusinessType sets the "business_type" field to the value that was provided on create.
func (u *WithdrawAccountUpsert) UpdateBusinessType() *WithdrawAccountUpsert {
	u.SetExcluded(withdrawaccount.FieldBusinessType)
	return u
}

// SetIDCard sets the "id_card" field.
func (u *WithdrawAccountUpsert) SetIDCard(v string) *WithdrawAccountUpsert {
	u.Set(withdrawaccount.FieldIDCard, v)
	return u
}

// UpdateIDCard sets the "id_card" field to the value that was provided on create.
func (u *WithdrawAccountUpsert) UpdateIDCard() *WithdrawAccountUpsert {
	u.SetExcluded(withdrawaccount.FieldIDCard)
	return u
}

// SetPersonalName sets the "personal_name" field.
func (u *WithdrawAccountUpsert) SetPersonalName(v string) *WithdrawAccountUpsert {
	u.Set(withdrawaccount.FieldPersonalName, v)
	return u
}

// UpdatePersonalName sets the "personal_name" field to the value that was provided on create.
func (u *WithdrawAccountUpsert) UpdatePersonalName() *WithdrawAccountUpsert {
	u.SetExcluded(withdrawaccount.FieldPersonalName)
	return u
}

// SetPhone sets the "phone" field.
func (u *WithdrawAccountUpsert) SetPhone(v string) *WithdrawAccountUpsert {
	u.Set(withdrawaccount.FieldPhone, v)
	return u
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *WithdrawAccountUpsert) UpdatePhone() *WithdrawAccountUpsert {
	u.SetExcluded(withdrawaccount.FieldPhone)
	return u
}

// SetBankCardNumber sets the "bank_card_number" field.
func (u *WithdrawAccountUpsert) SetBankCardNumber(v string) *WithdrawAccountUpsert {
	u.Set(withdrawaccount.FieldBankCardNumber, v)
	return u
}

// UpdateBankCardNumber sets the "bank_card_number" field to the value that was provided on create.
func (u *WithdrawAccountUpsert) UpdateBankCardNumber() *WithdrawAccountUpsert {
	u.SetExcluded(withdrawaccount.FieldBankCardNumber)
	return u
}

// SetBank sets the "bank" field.
func (u *WithdrawAccountUpsert) SetBank(v string) *WithdrawAccountUpsert {
	u.Set(withdrawaccount.FieldBank, v)
	return u
}

// UpdateBank sets the "bank" field to the value that was provided on create.
func (u *WithdrawAccountUpsert) UpdateBank() *WithdrawAccountUpsert {
	u.SetExcluded(withdrawaccount.FieldBank)
	return u
}

// SetWay sets the "way" field.
func (u *WithdrawAccountUpsert) SetWay(v enums.TransferOrderType) *WithdrawAccountUpsert {
	u.Set(withdrawaccount.FieldWay, v)
	return u
}

// UpdateWay sets the "way" field to the value that was provided on create.
func (u *WithdrawAccountUpsert) UpdateWay() *WithdrawAccountUpsert {
	u.SetExcluded(withdrawaccount.FieldWay)
	return u
}

// SetAlipayCardNo sets the "alipay_card_no" field.
func (u *WithdrawAccountUpsert) SetAlipayCardNo(v string) *WithdrawAccountUpsert {
	u.Set(withdrawaccount.FieldAlipayCardNo, v)
	return u
}

// UpdateAlipayCardNo sets the "alipay_card_no" field to the value that was provided on create.
func (u *WithdrawAccountUpsert) UpdateAlipayCardNo() *WithdrawAccountUpsert {
	u.SetExcluded(withdrawaccount.FieldAlipayCardNo)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.WithdrawAccount.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(withdrawaccount.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WithdrawAccountUpsertOne) UpdateNewValues() *WithdrawAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(withdrawaccount.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(withdrawaccount.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WithdrawAccount.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WithdrawAccountUpsertOne) Ignore() *WithdrawAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WithdrawAccountUpsertOne) DoNothing() *WithdrawAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WithdrawAccountCreate.OnConflict
// documentation for more info.
func (u *WithdrawAccountUpsertOne) Update(set func(*WithdrawAccountUpsert)) *WithdrawAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WithdrawAccountUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *WithdrawAccountUpsertOne) SetCreatedBy(v int64) *WithdrawAccountUpsertOne {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *WithdrawAccountUpsertOne) AddCreatedBy(v int64) *WithdrawAccountUpsertOne {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *WithdrawAccountUpsertOne) UpdateCreatedBy() *WithdrawAccountUpsertOne {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *WithdrawAccountUpsertOne) SetUpdatedBy(v int64) *WithdrawAccountUpsertOne {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *WithdrawAccountUpsertOne) AddUpdatedBy(v int64) *WithdrawAccountUpsertOne {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *WithdrawAccountUpsertOne) UpdateUpdatedBy() *WithdrawAccountUpsertOne {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WithdrawAccountUpsertOne) SetUpdatedAt(v time.Time) *WithdrawAccountUpsertOne {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WithdrawAccountUpsertOne) UpdateUpdatedAt() *WithdrawAccountUpsertOne {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WithdrawAccountUpsertOne) SetDeletedAt(v time.Time) *WithdrawAccountUpsertOne {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WithdrawAccountUpsertOne) UpdateDeletedAt() *WithdrawAccountUpsertOne {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *WithdrawAccountUpsertOne) SetUserID(v int64) *WithdrawAccountUpsertOne {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *WithdrawAccountUpsertOne) UpdateUserID() *WithdrawAccountUpsertOne {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.UpdateUserID()
	})
}

// SetBusinessName sets the "business_name" field.
func (u *WithdrawAccountUpsertOne) SetBusinessName(v string) *WithdrawAccountUpsertOne {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.SetBusinessName(v)
	})
}

// UpdateBusinessName sets the "business_name" field to the value that was provided on create.
func (u *WithdrawAccountUpsertOne) UpdateBusinessName() *WithdrawAccountUpsertOne {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.UpdateBusinessName()
	})
}

// SetBusinessID sets the "business_id" field.
func (u *WithdrawAccountUpsertOne) SetBusinessID(v int64) *WithdrawAccountUpsertOne {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.SetBusinessID(v)
	})
}

// AddBusinessID adds v to the "business_id" field.
func (u *WithdrawAccountUpsertOne) AddBusinessID(v int64) *WithdrawAccountUpsertOne {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.AddBusinessID(v)
	})
}

// UpdateBusinessID sets the "business_id" field to the value that was provided on create.
func (u *WithdrawAccountUpsertOne) UpdateBusinessID() *WithdrawAccountUpsertOne {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.UpdateBusinessID()
	})
}

// SetBusinessType sets the "business_type" field.
func (u *WithdrawAccountUpsertOne) SetBusinessType(v enums.BusinessType) *WithdrawAccountUpsertOne {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.SetBusinessType(v)
	})
}

// UpdateBusinessType sets the "business_type" field to the value that was provided on create.
func (u *WithdrawAccountUpsertOne) UpdateBusinessType() *WithdrawAccountUpsertOne {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.UpdateBusinessType()
	})
}

// SetIDCard sets the "id_card" field.
func (u *WithdrawAccountUpsertOne) SetIDCard(v string) *WithdrawAccountUpsertOne {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.SetIDCard(v)
	})
}

// UpdateIDCard sets the "id_card" field to the value that was provided on create.
func (u *WithdrawAccountUpsertOne) UpdateIDCard() *WithdrawAccountUpsertOne {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.UpdateIDCard()
	})
}

// SetPersonalName sets the "personal_name" field.
func (u *WithdrawAccountUpsertOne) SetPersonalName(v string) *WithdrawAccountUpsertOne {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.SetPersonalName(v)
	})
}

// UpdatePersonalName sets the "personal_name" field to the value that was provided on create.
func (u *WithdrawAccountUpsertOne) UpdatePersonalName() *WithdrawAccountUpsertOne {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.UpdatePersonalName()
	})
}

// SetPhone sets the "phone" field.
func (u *WithdrawAccountUpsertOne) SetPhone(v string) *WithdrawAccountUpsertOne {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *WithdrawAccountUpsertOne) UpdatePhone() *WithdrawAccountUpsertOne {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.UpdatePhone()
	})
}

// SetBankCardNumber sets the "bank_card_number" field.
func (u *WithdrawAccountUpsertOne) SetBankCardNumber(v string) *WithdrawAccountUpsertOne {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.SetBankCardNumber(v)
	})
}

// UpdateBankCardNumber sets the "bank_card_number" field to the value that was provided on create.
func (u *WithdrawAccountUpsertOne) UpdateBankCardNumber() *WithdrawAccountUpsertOne {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.UpdateBankCardNumber()
	})
}

// SetBank sets the "bank" field.
func (u *WithdrawAccountUpsertOne) SetBank(v string) *WithdrawAccountUpsertOne {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.SetBank(v)
	})
}

// UpdateBank sets the "bank" field to the value that was provided on create.
func (u *WithdrawAccountUpsertOne) UpdateBank() *WithdrawAccountUpsertOne {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.UpdateBank()
	})
}

// SetWay sets the "way" field.
func (u *WithdrawAccountUpsertOne) SetWay(v enums.TransferOrderType) *WithdrawAccountUpsertOne {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.SetWay(v)
	})
}

// UpdateWay sets the "way" field to the value that was provided on create.
func (u *WithdrawAccountUpsertOne) UpdateWay() *WithdrawAccountUpsertOne {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.UpdateWay()
	})
}

// SetAlipayCardNo sets the "alipay_card_no" field.
func (u *WithdrawAccountUpsertOne) SetAlipayCardNo(v string) *WithdrawAccountUpsertOne {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.SetAlipayCardNo(v)
	})
}

// UpdateAlipayCardNo sets the "alipay_card_no" field to the value that was provided on create.
func (u *WithdrawAccountUpsertOne) UpdateAlipayCardNo() *WithdrawAccountUpsertOne {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.UpdateAlipayCardNo()
	})
}

// Exec executes the query.
func (u *WithdrawAccountUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for WithdrawAccountCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WithdrawAccountUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WithdrawAccountUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WithdrawAccountUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WithdrawAccountCreateBulk is the builder for creating many WithdrawAccount entities in bulk.
type WithdrawAccountCreateBulk struct {
	config
	err      error
	builders []*WithdrawAccountCreate
	conflict []sql.ConflictOption
}

// Save creates the WithdrawAccount entities in the database.
func (wacb *WithdrawAccountCreateBulk) Save(ctx context.Context) ([]*WithdrawAccount, error) {
	if wacb.err != nil {
		return nil, wacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wacb.builders))
	nodes := make([]*WithdrawAccount, len(wacb.builders))
	mutators := make([]Mutator, len(wacb.builders))
	for i := range wacb.builders {
		func(i int, root context.Context) {
			builder := wacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WithdrawAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wacb *WithdrawAccountCreateBulk) SaveX(ctx context.Context) []*WithdrawAccount {
	v, err := wacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wacb *WithdrawAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := wacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wacb *WithdrawAccountCreateBulk) ExecX(ctx context.Context) {
	if err := wacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WithdrawAccount.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WithdrawAccountUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (wacb *WithdrawAccountCreateBulk) OnConflict(opts ...sql.ConflictOption) *WithdrawAccountUpsertBulk {
	wacb.conflict = opts
	return &WithdrawAccountUpsertBulk{
		create: wacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WithdrawAccount.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wacb *WithdrawAccountCreateBulk) OnConflictColumns(columns ...string) *WithdrawAccountUpsertBulk {
	wacb.conflict = append(wacb.conflict, sql.ConflictColumns(columns...))
	return &WithdrawAccountUpsertBulk{
		create: wacb,
	}
}

// WithdrawAccountUpsertBulk is the builder for "upsert"-ing
// a bulk of WithdrawAccount nodes.
type WithdrawAccountUpsertBulk struct {
	create *WithdrawAccountCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.WithdrawAccount.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(withdrawaccount.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WithdrawAccountUpsertBulk) UpdateNewValues() *WithdrawAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(withdrawaccount.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(withdrawaccount.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WithdrawAccount.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WithdrawAccountUpsertBulk) Ignore() *WithdrawAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WithdrawAccountUpsertBulk) DoNothing() *WithdrawAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WithdrawAccountCreateBulk.OnConflict
// documentation for more info.
func (u *WithdrawAccountUpsertBulk) Update(set func(*WithdrawAccountUpsert)) *WithdrawAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WithdrawAccountUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *WithdrawAccountUpsertBulk) SetCreatedBy(v int64) *WithdrawAccountUpsertBulk {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *WithdrawAccountUpsertBulk) AddCreatedBy(v int64) *WithdrawAccountUpsertBulk {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *WithdrawAccountUpsertBulk) UpdateCreatedBy() *WithdrawAccountUpsertBulk {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *WithdrawAccountUpsertBulk) SetUpdatedBy(v int64) *WithdrawAccountUpsertBulk {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *WithdrawAccountUpsertBulk) AddUpdatedBy(v int64) *WithdrawAccountUpsertBulk {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *WithdrawAccountUpsertBulk) UpdateUpdatedBy() *WithdrawAccountUpsertBulk {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WithdrawAccountUpsertBulk) SetUpdatedAt(v time.Time) *WithdrawAccountUpsertBulk {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WithdrawAccountUpsertBulk) UpdateUpdatedAt() *WithdrawAccountUpsertBulk {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WithdrawAccountUpsertBulk) SetDeletedAt(v time.Time) *WithdrawAccountUpsertBulk {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WithdrawAccountUpsertBulk) UpdateDeletedAt() *WithdrawAccountUpsertBulk {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *WithdrawAccountUpsertBulk) SetUserID(v int64) *WithdrawAccountUpsertBulk {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *WithdrawAccountUpsertBulk) UpdateUserID() *WithdrawAccountUpsertBulk {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.UpdateUserID()
	})
}

// SetBusinessName sets the "business_name" field.
func (u *WithdrawAccountUpsertBulk) SetBusinessName(v string) *WithdrawAccountUpsertBulk {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.SetBusinessName(v)
	})
}

// UpdateBusinessName sets the "business_name" field to the value that was provided on create.
func (u *WithdrawAccountUpsertBulk) UpdateBusinessName() *WithdrawAccountUpsertBulk {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.UpdateBusinessName()
	})
}

// SetBusinessID sets the "business_id" field.
func (u *WithdrawAccountUpsertBulk) SetBusinessID(v int64) *WithdrawAccountUpsertBulk {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.SetBusinessID(v)
	})
}

// AddBusinessID adds v to the "business_id" field.
func (u *WithdrawAccountUpsertBulk) AddBusinessID(v int64) *WithdrawAccountUpsertBulk {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.AddBusinessID(v)
	})
}

// UpdateBusinessID sets the "business_id" field to the value that was provided on create.
func (u *WithdrawAccountUpsertBulk) UpdateBusinessID() *WithdrawAccountUpsertBulk {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.UpdateBusinessID()
	})
}

// SetBusinessType sets the "business_type" field.
func (u *WithdrawAccountUpsertBulk) SetBusinessType(v enums.BusinessType) *WithdrawAccountUpsertBulk {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.SetBusinessType(v)
	})
}

// UpdateBusinessType sets the "business_type" field to the value that was provided on create.
func (u *WithdrawAccountUpsertBulk) UpdateBusinessType() *WithdrawAccountUpsertBulk {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.UpdateBusinessType()
	})
}

// SetIDCard sets the "id_card" field.
func (u *WithdrawAccountUpsertBulk) SetIDCard(v string) *WithdrawAccountUpsertBulk {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.SetIDCard(v)
	})
}

// UpdateIDCard sets the "id_card" field to the value that was provided on create.
func (u *WithdrawAccountUpsertBulk) UpdateIDCard() *WithdrawAccountUpsertBulk {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.UpdateIDCard()
	})
}

// SetPersonalName sets the "personal_name" field.
func (u *WithdrawAccountUpsertBulk) SetPersonalName(v string) *WithdrawAccountUpsertBulk {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.SetPersonalName(v)
	})
}

// UpdatePersonalName sets the "personal_name" field to the value that was provided on create.
func (u *WithdrawAccountUpsertBulk) UpdatePersonalName() *WithdrawAccountUpsertBulk {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.UpdatePersonalName()
	})
}

// SetPhone sets the "phone" field.
func (u *WithdrawAccountUpsertBulk) SetPhone(v string) *WithdrawAccountUpsertBulk {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *WithdrawAccountUpsertBulk) UpdatePhone() *WithdrawAccountUpsertBulk {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.UpdatePhone()
	})
}

// SetBankCardNumber sets the "bank_card_number" field.
func (u *WithdrawAccountUpsertBulk) SetBankCardNumber(v string) *WithdrawAccountUpsertBulk {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.SetBankCardNumber(v)
	})
}

// UpdateBankCardNumber sets the "bank_card_number" field to the value that was provided on create.
func (u *WithdrawAccountUpsertBulk) UpdateBankCardNumber() *WithdrawAccountUpsertBulk {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.UpdateBankCardNumber()
	})
}

// SetBank sets the "bank" field.
func (u *WithdrawAccountUpsertBulk) SetBank(v string) *WithdrawAccountUpsertBulk {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.SetBank(v)
	})
}

// UpdateBank sets the "bank" field to the value that was provided on create.
func (u *WithdrawAccountUpsertBulk) UpdateBank() *WithdrawAccountUpsertBulk {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.UpdateBank()
	})
}

// SetWay sets the "way" field.
func (u *WithdrawAccountUpsertBulk) SetWay(v enums.TransferOrderType) *WithdrawAccountUpsertBulk {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.SetWay(v)
	})
}

// UpdateWay sets the "way" field to the value that was provided on create.
func (u *WithdrawAccountUpsertBulk) UpdateWay() *WithdrawAccountUpsertBulk {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.UpdateWay()
	})
}

// SetAlipayCardNo sets the "alipay_card_no" field.
func (u *WithdrawAccountUpsertBulk) SetAlipayCardNo(v string) *WithdrawAccountUpsertBulk {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.SetAlipayCardNo(v)
	})
}

// UpdateAlipayCardNo sets the "alipay_card_no" field to the value that was provided on create.
func (u *WithdrawAccountUpsertBulk) UpdateAlipayCardNo() *WithdrawAccountUpsertBulk {
	return u.Update(func(s *WithdrawAccountUpsert) {
		s.UpdateAlipayCardNo()
	})
}

// Exec executes the query.
func (u *WithdrawAccountUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the WithdrawAccountCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for WithdrawAccountCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WithdrawAccountUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
