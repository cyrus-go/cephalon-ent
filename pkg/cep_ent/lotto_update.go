// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lotto"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottochancerule"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottogetcountrecord"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottoprize"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottorecord"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottousercount"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// LottoUpdate is the builder for updating Lotto entities.
type LottoUpdate struct {
	config
	hooks     []Hook
	mutation  *LottoMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the LottoUpdate builder.
func (lu *LottoUpdate) Where(ps ...predicate.Lotto) *LottoUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetCreatedBy sets the "created_by" field.
func (lu *LottoUpdate) SetCreatedBy(i int64) *LottoUpdate {
	lu.mutation.ResetCreatedBy()
	lu.mutation.SetCreatedBy(i)
	return lu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (lu *LottoUpdate) SetNillableCreatedBy(i *int64) *LottoUpdate {
	if i != nil {
		lu.SetCreatedBy(*i)
	}
	return lu
}

// AddCreatedBy adds i to the "created_by" field.
func (lu *LottoUpdate) AddCreatedBy(i int64) *LottoUpdate {
	lu.mutation.AddCreatedBy(i)
	return lu
}

// SetUpdatedBy sets the "updated_by" field.
func (lu *LottoUpdate) SetUpdatedBy(i int64) *LottoUpdate {
	lu.mutation.ResetUpdatedBy()
	lu.mutation.SetUpdatedBy(i)
	return lu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (lu *LottoUpdate) SetNillableUpdatedBy(i *int64) *LottoUpdate {
	if i != nil {
		lu.SetUpdatedBy(*i)
	}
	return lu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (lu *LottoUpdate) AddUpdatedBy(i int64) *LottoUpdate {
	lu.mutation.AddUpdatedBy(i)
	return lu
}

// SetUpdatedAt sets the "updated_at" field.
func (lu *LottoUpdate) SetUpdatedAt(t time.Time) *LottoUpdate {
	lu.mutation.SetUpdatedAt(t)
	return lu
}

// SetDeletedAt sets the "deleted_at" field.
func (lu *LottoUpdate) SetDeletedAt(t time.Time) *LottoUpdate {
	lu.mutation.SetDeletedAt(t)
	return lu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lu *LottoUpdate) SetNillableDeletedAt(t *time.Time) *LottoUpdate {
	if t != nil {
		lu.SetDeletedAt(*t)
	}
	return lu
}

// SetName sets the "name" field.
func (lu *LottoUpdate) SetName(s string) *LottoUpdate {
	lu.mutation.SetName(s)
	return lu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (lu *LottoUpdate) SetNillableName(s *string) *LottoUpdate {
	if s != nil {
		lu.SetName(*s)
	}
	return lu
}

// SetTotalWeight sets the "total_weight" field.
func (lu *LottoUpdate) SetTotalWeight(i int64) *LottoUpdate {
	lu.mutation.ResetTotalWeight()
	lu.mutation.SetTotalWeight(i)
	return lu
}

// SetNillableTotalWeight sets the "total_weight" field if the given value is not nil.
func (lu *LottoUpdate) SetNillableTotalWeight(i *int64) *LottoUpdate {
	if i != nil {
		lu.SetTotalWeight(*i)
	}
	return lu
}

// AddTotalWeight adds i to the "total_weight" field.
func (lu *LottoUpdate) AddTotalWeight(i int64) *LottoUpdate {
	lu.mutation.AddTotalWeight(i)
	return lu
}

// SetStartedAt sets the "started_at" field.
func (lu *LottoUpdate) SetStartedAt(t time.Time) *LottoUpdate {
	lu.mutation.SetStartedAt(t)
	return lu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (lu *LottoUpdate) SetNillableStartedAt(t *time.Time) *LottoUpdate {
	if t != nil {
		lu.SetStartedAt(*t)
	}
	return lu
}

// SetEndedAt sets the "ended_at" field.
func (lu *LottoUpdate) SetEndedAt(t time.Time) *LottoUpdate {
	lu.mutation.SetEndedAt(t)
	return lu
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (lu *LottoUpdate) SetNillableEndedAt(t *time.Time) *LottoUpdate {
	if t != nil {
		lu.SetEndedAt(*t)
	}
	return lu
}

// SetStatus sets the "status" field.
func (lu *LottoUpdate) SetStatus(es enums.LottoStatus) *LottoUpdate {
	lu.mutation.SetStatus(es)
	return lu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (lu *LottoUpdate) SetNillableStatus(es *enums.LottoStatus) *LottoUpdate {
	if es != nil {
		lu.SetStatus(*es)
	}
	return lu
}

// SetRemark sets the "remark" field.
func (lu *LottoUpdate) SetRemark(s string) *LottoUpdate {
	lu.mutation.SetRemark(s)
	return lu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (lu *LottoUpdate) SetNillableRemark(s *string) *LottoUpdate {
	if s != nil {
		lu.SetRemark(*s)
	}
	return lu
}

// AddLottoPrizeIDs adds the "lotto_prizes" edge to the LottoPrize entity by IDs.
func (lu *LottoUpdate) AddLottoPrizeIDs(ids ...int64) *LottoUpdate {
	lu.mutation.AddLottoPrizeIDs(ids...)
	return lu
}

// AddLottoPrizes adds the "lotto_prizes" edges to the LottoPrize entity.
func (lu *LottoUpdate) AddLottoPrizes(l ...*LottoPrize) *LottoUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lu.AddLottoPrizeIDs(ids...)
}

// AddLottoRecordIDs adds the "lotto_records" edge to the LottoRecord entity by IDs.
func (lu *LottoUpdate) AddLottoRecordIDs(ids ...int64) *LottoUpdate {
	lu.mutation.AddLottoRecordIDs(ids...)
	return lu
}

// AddLottoRecords adds the "lotto_records" edges to the LottoRecord entity.
func (lu *LottoUpdate) AddLottoRecords(l ...*LottoRecord) *LottoUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lu.AddLottoRecordIDs(ids...)
}

// AddLottoUserCountIDs adds the "lotto_user_counts" edge to the LottoUserCount entity by IDs.
func (lu *LottoUpdate) AddLottoUserCountIDs(ids ...int64) *LottoUpdate {
	lu.mutation.AddLottoUserCountIDs(ids...)
	return lu
}

// AddLottoUserCounts adds the "lotto_user_counts" edges to the LottoUserCount entity.
func (lu *LottoUpdate) AddLottoUserCounts(l ...*LottoUserCount) *LottoUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lu.AddLottoUserCountIDs(ids...)
}

// AddLottoGetCountRecordIDs adds the "lotto_get_count_records" edge to the LottoGetCountRecord entity by IDs.
func (lu *LottoUpdate) AddLottoGetCountRecordIDs(ids ...int64) *LottoUpdate {
	lu.mutation.AddLottoGetCountRecordIDs(ids...)
	return lu
}

// AddLottoGetCountRecords adds the "lotto_get_count_records" edges to the LottoGetCountRecord entity.
func (lu *LottoUpdate) AddLottoGetCountRecords(l ...*LottoGetCountRecord) *LottoUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lu.AddLottoGetCountRecordIDs(ids...)
}

// AddLottoChangeRuleIDs adds the "lotto_Change_rules" edge to the LottoChanceRule entity by IDs.
func (lu *LottoUpdate) AddLottoChangeRuleIDs(ids ...int64) *LottoUpdate {
	lu.mutation.AddLottoChangeRuleIDs(ids...)
	return lu
}

// AddLottoChangeRules adds the "lotto_Change_rules" edges to the LottoChanceRule entity.
func (lu *LottoUpdate) AddLottoChangeRules(l ...*LottoChanceRule) *LottoUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lu.AddLottoChangeRuleIDs(ids...)
}

// Mutation returns the LottoMutation object of the builder.
func (lu *LottoUpdate) Mutation() *LottoMutation {
	return lu.mutation
}

// ClearLottoPrizes clears all "lotto_prizes" edges to the LottoPrize entity.
func (lu *LottoUpdate) ClearLottoPrizes() *LottoUpdate {
	lu.mutation.ClearLottoPrizes()
	return lu
}

// RemoveLottoPrizeIDs removes the "lotto_prizes" edge to LottoPrize entities by IDs.
func (lu *LottoUpdate) RemoveLottoPrizeIDs(ids ...int64) *LottoUpdate {
	lu.mutation.RemoveLottoPrizeIDs(ids...)
	return lu
}

// RemoveLottoPrizes removes "lotto_prizes" edges to LottoPrize entities.
func (lu *LottoUpdate) RemoveLottoPrizes(l ...*LottoPrize) *LottoUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lu.RemoveLottoPrizeIDs(ids...)
}

// ClearLottoRecords clears all "lotto_records" edges to the LottoRecord entity.
func (lu *LottoUpdate) ClearLottoRecords() *LottoUpdate {
	lu.mutation.ClearLottoRecords()
	return lu
}

// RemoveLottoRecordIDs removes the "lotto_records" edge to LottoRecord entities by IDs.
func (lu *LottoUpdate) RemoveLottoRecordIDs(ids ...int64) *LottoUpdate {
	lu.mutation.RemoveLottoRecordIDs(ids...)
	return lu
}

// RemoveLottoRecords removes "lotto_records" edges to LottoRecord entities.
func (lu *LottoUpdate) RemoveLottoRecords(l ...*LottoRecord) *LottoUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lu.RemoveLottoRecordIDs(ids...)
}

// ClearLottoUserCounts clears all "lotto_user_counts" edges to the LottoUserCount entity.
func (lu *LottoUpdate) ClearLottoUserCounts() *LottoUpdate {
	lu.mutation.ClearLottoUserCounts()
	return lu
}

// RemoveLottoUserCountIDs removes the "lotto_user_counts" edge to LottoUserCount entities by IDs.
func (lu *LottoUpdate) RemoveLottoUserCountIDs(ids ...int64) *LottoUpdate {
	lu.mutation.RemoveLottoUserCountIDs(ids...)
	return lu
}

// RemoveLottoUserCounts removes "lotto_user_counts" edges to LottoUserCount entities.
func (lu *LottoUpdate) RemoveLottoUserCounts(l ...*LottoUserCount) *LottoUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lu.RemoveLottoUserCountIDs(ids...)
}

// ClearLottoGetCountRecords clears all "lotto_get_count_records" edges to the LottoGetCountRecord entity.
func (lu *LottoUpdate) ClearLottoGetCountRecords() *LottoUpdate {
	lu.mutation.ClearLottoGetCountRecords()
	return lu
}

// RemoveLottoGetCountRecordIDs removes the "lotto_get_count_records" edge to LottoGetCountRecord entities by IDs.
func (lu *LottoUpdate) RemoveLottoGetCountRecordIDs(ids ...int64) *LottoUpdate {
	lu.mutation.RemoveLottoGetCountRecordIDs(ids...)
	return lu
}

// RemoveLottoGetCountRecords removes "lotto_get_count_records" edges to LottoGetCountRecord entities.
func (lu *LottoUpdate) RemoveLottoGetCountRecords(l ...*LottoGetCountRecord) *LottoUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lu.RemoveLottoGetCountRecordIDs(ids...)
}

// ClearLottoChangeRules clears all "lotto_Change_rules" edges to the LottoChanceRule entity.
func (lu *LottoUpdate) ClearLottoChangeRules() *LottoUpdate {
	lu.mutation.ClearLottoChangeRules()
	return lu
}

// RemoveLottoChangeRuleIDs removes the "lotto_Change_rules" edge to LottoChanceRule entities by IDs.
func (lu *LottoUpdate) RemoveLottoChangeRuleIDs(ids ...int64) *LottoUpdate {
	lu.mutation.RemoveLottoChangeRuleIDs(ids...)
	return lu
}

// RemoveLottoChangeRules removes "lotto_Change_rules" edges to LottoChanceRule entities.
func (lu *LottoUpdate) RemoveLottoChangeRules(l ...*LottoChanceRule) *LottoUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lu.RemoveLottoChangeRuleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LottoUpdate) Save(ctx context.Context) (int, error) {
	lu.defaults()
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LottoUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LottoUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LottoUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lu *LottoUpdate) defaults() {
	if _, ok := lu.mutation.UpdatedAt(); !ok {
		v := lotto.UpdateDefaultUpdatedAt()
		lu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lu *LottoUpdate) check() error {
	if v, ok := lu.mutation.Status(); ok {
		if err := lotto.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "Lotto.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (lu *LottoUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LottoUpdate {
	lu.modifiers = append(lu.modifiers, modifiers...)
	return lu
}

func (lu *LottoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(lotto.Table, lotto.Columns, sqlgraph.NewFieldSpec(lotto.FieldID, field.TypeInt64))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.CreatedBy(); ok {
		_spec.SetField(lotto.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := lu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(lotto.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := lu.mutation.UpdatedBy(); ok {
		_spec.SetField(lotto.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := lu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(lotto.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := lu.mutation.UpdatedAt(); ok {
		_spec.SetField(lotto.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lu.mutation.DeletedAt(); ok {
		_spec.SetField(lotto.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := lu.mutation.Name(); ok {
		_spec.SetField(lotto.FieldName, field.TypeString, value)
	}
	if value, ok := lu.mutation.TotalWeight(); ok {
		_spec.SetField(lotto.FieldTotalWeight, field.TypeInt64, value)
	}
	if value, ok := lu.mutation.AddedTotalWeight(); ok {
		_spec.AddField(lotto.FieldTotalWeight, field.TypeInt64, value)
	}
	if value, ok := lu.mutation.StartedAt(); ok {
		_spec.SetField(lotto.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := lu.mutation.EndedAt(); ok {
		_spec.SetField(lotto.FieldEndedAt, field.TypeTime, value)
	}
	if value, ok := lu.mutation.Status(); ok {
		_spec.SetField(lotto.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := lu.mutation.Remark(); ok {
		_spec.SetField(lotto.FieldRemark, field.TypeString, value)
	}
	if lu.mutation.LottoPrizesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoPrizesTable,
			Columns: []string{lotto.LottoPrizesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottoprize.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedLottoPrizesIDs(); len(nodes) > 0 && !lu.mutation.LottoPrizesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoPrizesTable,
			Columns: []string{lotto.LottoPrizesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottoprize.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.LottoPrizesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoPrizesTable,
			Columns: []string{lotto.LottoPrizesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottoprize.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.LottoRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoRecordsTable,
			Columns: []string{lotto.LottoRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottorecord.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedLottoRecordsIDs(); len(nodes) > 0 && !lu.mutation.LottoRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoRecordsTable,
			Columns: []string{lotto.LottoRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottorecord.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.LottoRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoRecordsTable,
			Columns: []string{lotto.LottoRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottorecord.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.LottoUserCountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoUserCountsTable,
			Columns: []string{lotto.LottoUserCountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottousercount.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedLottoUserCountsIDs(); len(nodes) > 0 && !lu.mutation.LottoUserCountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoUserCountsTable,
			Columns: []string{lotto.LottoUserCountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottousercount.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.LottoUserCountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoUserCountsTable,
			Columns: []string{lotto.LottoUserCountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottousercount.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.LottoGetCountRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoGetCountRecordsTable,
			Columns: []string{lotto.LottoGetCountRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottogetcountrecord.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedLottoGetCountRecordsIDs(); len(nodes) > 0 && !lu.mutation.LottoGetCountRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoGetCountRecordsTable,
			Columns: []string{lotto.LottoGetCountRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottogetcountrecord.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.LottoGetCountRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoGetCountRecordsTable,
			Columns: []string{lotto.LottoGetCountRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottogetcountrecord.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.LottoChangeRulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoChangeRulesTable,
			Columns: []string{lotto.LottoChangeRulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottochancerule.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedLottoChangeRulesIDs(); len(nodes) > 0 && !lu.mutation.LottoChangeRulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoChangeRulesTable,
			Columns: []string{lotto.LottoChangeRulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottochancerule.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.LottoChangeRulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoChangeRulesTable,
			Columns: []string{lotto.LottoChangeRulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottochancerule.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(lu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lotto.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LottoUpdateOne is the builder for updating a single Lotto entity.
type LottoUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *LottoMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedBy sets the "created_by" field.
func (luo *LottoUpdateOne) SetCreatedBy(i int64) *LottoUpdateOne {
	luo.mutation.ResetCreatedBy()
	luo.mutation.SetCreatedBy(i)
	return luo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (luo *LottoUpdateOne) SetNillableCreatedBy(i *int64) *LottoUpdateOne {
	if i != nil {
		luo.SetCreatedBy(*i)
	}
	return luo
}

// AddCreatedBy adds i to the "created_by" field.
func (luo *LottoUpdateOne) AddCreatedBy(i int64) *LottoUpdateOne {
	luo.mutation.AddCreatedBy(i)
	return luo
}

// SetUpdatedBy sets the "updated_by" field.
func (luo *LottoUpdateOne) SetUpdatedBy(i int64) *LottoUpdateOne {
	luo.mutation.ResetUpdatedBy()
	luo.mutation.SetUpdatedBy(i)
	return luo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (luo *LottoUpdateOne) SetNillableUpdatedBy(i *int64) *LottoUpdateOne {
	if i != nil {
		luo.SetUpdatedBy(*i)
	}
	return luo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (luo *LottoUpdateOne) AddUpdatedBy(i int64) *LottoUpdateOne {
	luo.mutation.AddUpdatedBy(i)
	return luo
}

// SetUpdatedAt sets the "updated_at" field.
func (luo *LottoUpdateOne) SetUpdatedAt(t time.Time) *LottoUpdateOne {
	luo.mutation.SetUpdatedAt(t)
	return luo
}

// SetDeletedAt sets the "deleted_at" field.
func (luo *LottoUpdateOne) SetDeletedAt(t time.Time) *LottoUpdateOne {
	luo.mutation.SetDeletedAt(t)
	return luo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (luo *LottoUpdateOne) SetNillableDeletedAt(t *time.Time) *LottoUpdateOne {
	if t != nil {
		luo.SetDeletedAt(*t)
	}
	return luo
}

// SetName sets the "name" field.
func (luo *LottoUpdateOne) SetName(s string) *LottoUpdateOne {
	luo.mutation.SetName(s)
	return luo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (luo *LottoUpdateOne) SetNillableName(s *string) *LottoUpdateOne {
	if s != nil {
		luo.SetName(*s)
	}
	return luo
}

// SetTotalWeight sets the "total_weight" field.
func (luo *LottoUpdateOne) SetTotalWeight(i int64) *LottoUpdateOne {
	luo.mutation.ResetTotalWeight()
	luo.mutation.SetTotalWeight(i)
	return luo
}

// SetNillableTotalWeight sets the "total_weight" field if the given value is not nil.
func (luo *LottoUpdateOne) SetNillableTotalWeight(i *int64) *LottoUpdateOne {
	if i != nil {
		luo.SetTotalWeight(*i)
	}
	return luo
}

// AddTotalWeight adds i to the "total_weight" field.
func (luo *LottoUpdateOne) AddTotalWeight(i int64) *LottoUpdateOne {
	luo.mutation.AddTotalWeight(i)
	return luo
}

// SetStartedAt sets the "started_at" field.
func (luo *LottoUpdateOne) SetStartedAt(t time.Time) *LottoUpdateOne {
	luo.mutation.SetStartedAt(t)
	return luo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (luo *LottoUpdateOne) SetNillableStartedAt(t *time.Time) *LottoUpdateOne {
	if t != nil {
		luo.SetStartedAt(*t)
	}
	return luo
}

// SetEndedAt sets the "ended_at" field.
func (luo *LottoUpdateOne) SetEndedAt(t time.Time) *LottoUpdateOne {
	luo.mutation.SetEndedAt(t)
	return luo
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (luo *LottoUpdateOne) SetNillableEndedAt(t *time.Time) *LottoUpdateOne {
	if t != nil {
		luo.SetEndedAt(*t)
	}
	return luo
}

// SetStatus sets the "status" field.
func (luo *LottoUpdateOne) SetStatus(es enums.LottoStatus) *LottoUpdateOne {
	luo.mutation.SetStatus(es)
	return luo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (luo *LottoUpdateOne) SetNillableStatus(es *enums.LottoStatus) *LottoUpdateOne {
	if es != nil {
		luo.SetStatus(*es)
	}
	return luo
}

// SetRemark sets the "remark" field.
func (luo *LottoUpdateOne) SetRemark(s string) *LottoUpdateOne {
	luo.mutation.SetRemark(s)
	return luo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (luo *LottoUpdateOne) SetNillableRemark(s *string) *LottoUpdateOne {
	if s != nil {
		luo.SetRemark(*s)
	}
	return luo
}

// AddLottoPrizeIDs adds the "lotto_prizes" edge to the LottoPrize entity by IDs.
func (luo *LottoUpdateOne) AddLottoPrizeIDs(ids ...int64) *LottoUpdateOne {
	luo.mutation.AddLottoPrizeIDs(ids...)
	return luo
}

// AddLottoPrizes adds the "lotto_prizes" edges to the LottoPrize entity.
func (luo *LottoUpdateOne) AddLottoPrizes(l ...*LottoPrize) *LottoUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return luo.AddLottoPrizeIDs(ids...)
}

// AddLottoRecordIDs adds the "lotto_records" edge to the LottoRecord entity by IDs.
func (luo *LottoUpdateOne) AddLottoRecordIDs(ids ...int64) *LottoUpdateOne {
	luo.mutation.AddLottoRecordIDs(ids...)
	return luo
}

// AddLottoRecords adds the "lotto_records" edges to the LottoRecord entity.
func (luo *LottoUpdateOne) AddLottoRecords(l ...*LottoRecord) *LottoUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return luo.AddLottoRecordIDs(ids...)
}

// AddLottoUserCountIDs adds the "lotto_user_counts" edge to the LottoUserCount entity by IDs.
func (luo *LottoUpdateOne) AddLottoUserCountIDs(ids ...int64) *LottoUpdateOne {
	luo.mutation.AddLottoUserCountIDs(ids...)
	return luo
}

// AddLottoUserCounts adds the "lotto_user_counts" edges to the LottoUserCount entity.
func (luo *LottoUpdateOne) AddLottoUserCounts(l ...*LottoUserCount) *LottoUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return luo.AddLottoUserCountIDs(ids...)
}

// AddLottoGetCountRecordIDs adds the "lotto_get_count_records" edge to the LottoGetCountRecord entity by IDs.
func (luo *LottoUpdateOne) AddLottoGetCountRecordIDs(ids ...int64) *LottoUpdateOne {
	luo.mutation.AddLottoGetCountRecordIDs(ids...)
	return luo
}

// AddLottoGetCountRecords adds the "lotto_get_count_records" edges to the LottoGetCountRecord entity.
func (luo *LottoUpdateOne) AddLottoGetCountRecords(l ...*LottoGetCountRecord) *LottoUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return luo.AddLottoGetCountRecordIDs(ids...)
}

// AddLottoChangeRuleIDs adds the "lotto_Change_rules" edge to the LottoChanceRule entity by IDs.
func (luo *LottoUpdateOne) AddLottoChangeRuleIDs(ids ...int64) *LottoUpdateOne {
	luo.mutation.AddLottoChangeRuleIDs(ids...)
	return luo
}

// AddLottoChangeRules adds the "lotto_Change_rules" edges to the LottoChanceRule entity.
func (luo *LottoUpdateOne) AddLottoChangeRules(l ...*LottoChanceRule) *LottoUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return luo.AddLottoChangeRuleIDs(ids...)
}

// Mutation returns the LottoMutation object of the builder.
func (luo *LottoUpdateOne) Mutation() *LottoMutation {
	return luo.mutation
}

// ClearLottoPrizes clears all "lotto_prizes" edges to the LottoPrize entity.
func (luo *LottoUpdateOne) ClearLottoPrizes() *LottoUpdateOne {
	luo.mutation.ClearLottoPrizes()
	return luo
}

// RemoveLottoPrizeIDs removes the "lotto_prizes" edge to LottoPrize entities by IDs.
func (luo *LottoUpdateOne) RemoveLottoPrizeIDs(ids ...int64) *LottoUpdateOne {
	luo.mutation.RemoveLottoPrizeIDs(ids...)
	return luo
}

// RemoveLottoPrizes removes "lotto_prizes" edges to LottoPrize entities.
func (luo *LottoUpdateOne) RemoveLottoPrizes(l ...*LottoPrize) *LottoUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return luo.RemoveLottoPrizeIDs(ids...)
}

// ClearLottoRecords clears all "lotto_records" edges to the LottoRecord entity.
func (luo *LottoUpdateOne) ClearLottoRecords() *LottoUpdateOne {
	luo.mutation.ClearLottoRecords()
	return luo
}

// RemoveLottoRecordIDs removes the "lotto_records" edge to LottoRecord entities by IDs.
func (luo *LottoUpdateOne) RemoveLottoRecordIDs(ids ...int64) *LottoUpdateOne {
	luo.mutation.RemoveLottoRecordIDs(ids...)
	return luo
}

// RemoveLottoRecords removes "lotto_records" edges to LottoRecord entities.
func (luo *LottoUpdateOne) RemoveLottoRecords(l ...*LottoRecord) *LottoUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return luo.RemoveLottoRecordIDs(ids...)
}

// ClearLottoUserCounts clears all "lotto_user_counts" edges to the LottoUserCount entity.
func (luo *LottoUpdateOne) ClearLottoUserCounts() *LottoUpdateOne {
	luo.mutation.ClearLottoUserCounts()
	return luo
}

// RemoveLottoUserCountIDs removes the "lotto_user_counts" edge to LottoUserCount entities by IDs.
func (luo *LottoUpdateOne) RemoveLottoUserCountIDs(ids ...int64) *LottoUpdateOne {
	luo.mutation.RemoveLottoUserCountIDs(ids...)
	return luo
}

// RemoveLottoUserCounts removes "lotto_user_counts" edges to LottoUserCount entities.
func (luo *LottoUpdateOne) RemoveLottoUserCounts(l ...*LottoUserCount) *LottoUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return luo.RemoveLottoUserCountIDs(ids...)
}

// ClearLottoGetCountRecords clears all "lotto_get_count_records" edges to the LottoGetCountRecord entity.
func (luo *LottoUpdateOne) ClearLottoGetCountRecords() *LottoUpdateOne {
	luo.mutation.ClearLottoGetCountRecords()
	return luo
}

// RemoveLottoGetCountRecordIDs removes the "lotto_get_count_records" edge to LottoGetCountRecord entities by IDs.
func (luo *LottoUpdateOne) RemoveLottoGetCountRecordIDs(ids ...int64) *LottoUpdateOne {
	luo.mutation.RemoveLottoGetCountRecordIDs(ids...)
	return luo
}

// RemoveLottoGetCountRecords removes "lotto_get_count_records" edges to LottoGetCountRecord entities.
func (luo *LottoUpdateOne) RemoveLottoGetCountRecords(l ...*LottoGetCountRecord) *LottoUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return luo.RemoveLottoGetCountRecordIDs(ids...)
}

// ClearLottoChangeRules clears all "lotto_Change_rules" edges to the LottoChanceRule entity.
func (luo *LottoUpdateOne) ClearLottoChangeRules() *LottoUpdateOne {
	luo.mutation.ClearLottoChangeRules()
	return luo
}

// RemoveLottoChangeRuleIDs removes the "lotto_Change_rules" edge to LottoChanceRule entities by IDs.
func (luo *LottoUpdateOne) RemoveLottoChangeRuleIDs(ids ...int64) *LottoUpdateOne {
	luo.mutation.RemoveLottoChangeRuleIDs(ids...)
	return luo
}

// RemoveLottoChangeRules removes "lotto_Change_rules" edges to LottoChanceRule entities.
func (luo *LottoUpdateOne) RemoveLottoChangeRules(l ...*LottoChanceRule) *LottoUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return luo.RemoveLottoChangeRuleIDs(ids...)
}

// Where appends a list predicates to the LottoUpdate builder.
func (luo *LottoUpdateOne) Where(ps ...predicate.Lotto) *LottoUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LottoUpdateOne) Select(field string, fields ...string) *LottoUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Lotto entity.
func (luo *LottoUpdateOne) Save(ctx context.Context) (*Lotto, error) {
	luo.defaults()
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LottoUpdateOne) SaveX(ctx context.Context) *Lotto {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LottoUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LottoUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (luo *LottoUpdateOne) defaults() {
	if _, ok := luo.mutation.UpdatedAt(); !ok {
		v := lotto.UpdateDefaultUpdatedAt()
		luo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luo *LottoUpdateOne) check() error {
	if v, ok := luo.mutation.Status(); ok {
		if err := lotto.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "Lotto.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (luo *LottoUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LottoUpdateOne {
	luo.modifiers = append(luo.modifiers, modifiers...)
	return luo
}

func (luo *LottoUpdateOne) sqlSave(ctx context.Context) (_node *Lotto, err error) {
	if err := luo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(lotto.Table, lotto.Columns, sqlgraph.NewFieldSpec(lotto.FieldID, field.TypeInt64))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "Lotto.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lotto.FieldID)
		for _, f := range fields {
			if !lotto.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != lotto.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.CreatedBy(); ok {
		_spec.SetField(lotto.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := luo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(lotto.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := luo.mutation.UpdatedBy(); ok {
		_spec.SetField(lotto.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := luo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(lotto.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := luo.mutation.UpdatedAt(); ok {
		_spec.SetField(lotto.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := luo.mutation.DeletedAt(); ok {
		_spec.SetField(lotto.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := luo.mutation.Name(); ok {
		_spec.SetField(lotto.FieldName, field.TypeString, value)
	}
	if value, ok := luo.mutation.TotalWeight(); ok {
		_spec.SetField(lotto.FieldTotalWeight, field.TypeInt64, value)
	}
	if value, ok := luo.mutation.AddedTotalWeight(); ok {
		_spec.AddField(lotto.FieldTotalWeight, field.TypeInt64, value)
	}
	if value, ok := luo.mutation.StartedAt(); ok {
		_spec.SetField(lotto.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := luo.mutation.EndedAt(); ok {
		_spec.SetField(lotto.FieldEndedAt, field.TypeTime, value)
	}
	if value, ok := luo.mutation.Status(); ok {
		_spec.SetField(lotto.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := luo.mutation.Remark(); ok {
		_spec.SetField(lotto.FieldRemark, field.TypeString, value)
	}
	if luo.mutation.LottoPrizesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoPrizesTable,
			Columns: []string{lotto.LottoPrizesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottoprize.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedLottoPrizesIDs(); len(nodes) > 0 && !luo.mutation.LottoPrizesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoPrizesTable,
			Columns: []string{lotto.LottoPrizesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottoprize.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.LottoPrizesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoPrizesTable,
			Columns: []string{lotto.LottoPrizesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottoprize.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.LottoRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoRecordsTable,
			Columns: []string{lotto.LottoRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottorecord.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedLottoRecordsIDs(); len(nodes) > 0 && !luo.mutation.LottoRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoRecordsTable,
			Columns: []string{lotto.LottoRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottorecord.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.LottoRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoRecordsTable,
			Columns: []string{lotto.LottoRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottorecord.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.LottoUserCountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoUserCountsTable,
			Columns: []string{lotto.LottoUserCountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottousercount.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedLottoUserCountsIDs(); len(nodes) > 0 && !luo.mutation.LottoUserCountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoUserCountsTable,
			Columns: []string{lotto.LottoUserCountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottousercount.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.LottoUserCountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoUserCountsTable,
			Columns: []string{lotto.LottoUserCountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottousercount.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.LottoGetCountRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoGetCountRecordsTable,
			Columns: []string{lotto.LottoGetCountRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottogetcountrecord.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedLottoGetCountRecordsIDs(); len(nodes) > 0 && !luo.mutation.LottoGetCountRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoGetCountRecordsTable,
			Columns: []string{lotto.LottoGetCountRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottogetcountrecord.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.LottoGetCountRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoGetCountRecordsTable,
			Columns: []string{lotto.LottoGetCountRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottogetcountrecord.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.LottoChangeRulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoChangeRulesTable,
			Columns: []string{lotto.LottoChangeRulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottochancerule.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedLottoChangeRulesIDs(); len(nodes) > 0 && !luo.mutation.LottoChangeRulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoChangeRulesTable,
			Columns: []string{lotto.LottoChangeRulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottochancerule.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.LottoChangeRulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoChangeRulesTable,
			Columns: []string{lotto.LottoChangeRulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottochancerule.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(luo.modifiers...)
	_node = &Lotto{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lotto.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
