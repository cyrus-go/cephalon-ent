// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/hmackeypair"
	"cephalon-ent/pkg/cep_ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Hmac 密钥对，用于没有登录态时安全调用任务相关接口的场景
type HmacKeyPair struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int64 `json:"created_by"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int64 `json:"updated_by"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at"`
	// 密钥对的 key 值，用于检索密钥
	Key string `json:"key"`
	// 加密密钥
	Secret string `json:"secret"`
	// 请求方
	Caller string `json:"caller"`
	// 外键用户 ID
	UserID int64 `json:"user_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HmacKeyPairQuery when eager-loading is set.
	Edges        HmacKeyPairEdges `json:"edges"`
	selectValues sql.SelectValues
}

// HmacKeyPairEdges holds the relations/edges for other nodes in the graph.
type HmacKeyPairEdges struct {
	// MissionProductions holds the value of the mission_productions edge.
	MissionProductions []*MissionProduction `json:"mission_productions,omitempty"`
	// CreatedMissions holds the value of the created_missions edge.
	CreatedMissions []*Mission `json:"created_missions,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// MissionProductionsOrErr returns the MissionProductions value or an error if the edge
// was not loaded in eager-loading.
func (e HmacKeyPairEdges) MissionProductionsOrErr() ([]*MissionProduction, error) {
	if e.loadedTypes[0] {
		return e.MissionProductions, nil
	}
	return nil, &NotLoadedError{edge: "mission_productions"}
}

// CreatedMissionsOrErr returns the CreatedMissions value or an error if the edge
// was not loaded in eager-loading.
func (e HmacKeyPairEdges) CreatedMissionsOrErr() ([]*Mission, error) {
	if e.loadedTypes[1] {
		return e.CreatedMissions, nil
	}
	return nil, &NotLoadedError{edge: "created_missions"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HmacKeyPairEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HmacKeyPair) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hmackeypair.FieldID, hmackeypair.FieldCreatedBy, hmackeypair.FieldUpdatedBy, hmackeypair.FieldUserID:
			values[i] = new(sql.NullInt64)
		case hmackeypair.FieldKey, hmackeypair.FieldSecret, hmackeypair.FieldCaller:
			values[i] = new(sql.NullString)
		case hmackeypair.FieldCreatedAt, hmackeypair.FieldUpdatedAt, hmackeypair.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HmacKeyPair fields.
func (hkp *HmacKeyPair) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hmackeypair.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			hkp.ID = int64(value.Int64)
		case hmackeypair.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				hkp.CreatedBy = value.Int64
			}
		case hmackeypair.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				hkp.UpdatedBy = value.Int64
			}
		case hmackeypair.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				hkp.CreatedAt = value.Time
			}
		case hmackeypair.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				hkp.UpdatedAt = value.Time
			}
		case hmackeypair.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				hkp.DeletedAt = value.Time
			}
		case hmackeypair.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				hkp.Key = value.String
			}
		case hmackeypair.FieldSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field secret", values[i])
			} else if value.Valid {
				hkp.Secret = value.String
			}
		case hmackeypair.FieldCaller:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field caller", values[i])
			} else if value.Valid {
				hkp.Caller = value.String
			}
		case hmackeypair.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				hkp.UserID = value.Int64
			}
		default:
			hkp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HmacKeyPair.
// This includes values selected through modifiers, order, etc.
func (hkp *HmacKeyPair) Value(name string) (ent.Value, error) {
	return hkp.selectValues.Get(name)
}

// QueryMissionProductions queries the "mission_productions" edge of the HmacKeyPair entity.
func (hkp *HmacKeyPair) QueryMissionProductions() *MissionProductionQuery {
	return NewHmacKeyPairClient(hkp.config).QueryMissionProductions(hkp)
}

// QueryCreatedMissions queries the "created_missions" edge of the HmacKeyPair entity.
func (hkp *HmacKeyPair) QueryCreatedMissions() *MissionQuery {
	return NewHmacKeyPairClient(hkp.config).QueryCreatedMissions(hkp)
}

// QueryUser queries the "user" edge of the HmacKeyPair entity.
func (hkp *HmacKeyPair) QueryUser() *UserQuery {
	return NewHmacKeyPairClient(hkp.config).QueryUser(hkp)
}

// Update returns a builder for updating this HmacKeyPair.
// Note that you need to call HmacKeyPair.Unwrap() before calling this method if this HmacKeyPair
// was returned from a transaction, and the transaction was committed or rolled back.
func (hkp *HmacKeyPair) Update() *HmacKeyPairUpdateOne {
	return NewHmacKeyPairClient(hkp.config).UpdateOne(hkp)
}

// Unwrap unwraps the HmacKeyPair entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hkp *HmacKeyPair) Unwrap() *HmacKeyPair {
	_tx, ok := hkp.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: HmacKeyPair is not a transactional entity")
	}
	hkp.config.driver = _tx.drv
	return hkp
}

// String implements the fmt.Stringer.
func (hkp *HmacKeyPair) String() string {
	var builder strings.Builder
	builder.WriteString("HmacKeyPair(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hkp.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", hkp.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", hkp.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(hkp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(hkp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(hkp.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(hkp.Key)
	builder.WriteString(", ")
	builder.WriteString("secret=")
	builder.WriteString(hkp.Secret)
	builder.WriteString(", ")
	builder.WriteString("caller=")
	builder.WriteString(hkp.Caller)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", hkp.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// HmacKeyPairs is a parsable slice of HmacKeyPair.
type HmacKeyPairs []*HmacKeyPair
