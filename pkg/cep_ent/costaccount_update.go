// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/costaccount"
	"cephalon-ent/pkg/cep_ent/costbill"
	"cephalon-ent/pkg/cep_ent/predicate"
	"cephalon-ent/pkg/cep_ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CostAccountUpdate is the builder for updating CostAccount entities.
type CostAccountUpdate struct {
	config
	hooks    []Hook
	mutation *CostAccountMutation
}

// Where appends a list predicates to the CostAccountUpdate builder.
func (cau *CostAccountUpdate) Where(ps ...predicate.CostAccount) *CostAccountUpdate {
	cau.mutation.Where(ps...)
	return cau
}

// SetCreatedBy sets the "created_by" field.
func (cau *CostAccountUpdate) SetCreatedBy(i int64) *CostAccountUpdate {
	cau.mutation.ResetCreatedBy()
	cau.mutation.SetCreatedBy(i)
	return cau
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cau *CostAccountUpdate) SetNillableCreatedBy(i *int64) *CostAccountUpdate {
	if i != nil {
		cau.SetCreatedBy(*i)
	}
	return cau
}

// AddCreatedBy adds i to the "created_by" field.
func (cau *CostAccountUpdate) AddCreatedBy(i int64) *CostAccountUpdate {
	cau.mutation.AddCreatedBy(i)
	return cau
}

// SetUpdatedBy sets the "updated_by" field.
func (cau *CostAccountUpdate) SetUpdatedBy(i int64) *CostAccountUpdate {
	cau.mutation.ResetUpdatedBy()
	cau.mutation.SetUpdatedBy(i)
	return cau
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cau *CostAccountUpdate) SetNillableUpdatedBy(i *int64) *CostAccountUpdate {
	if i != nil {
		cau.SetUpdatedBy(*i)
	}
	return cau
}

// AddUpdatedBy adds i to the "updated_by" field.
func (cau *CostAccountUpdate) AddUpdatedBy(i int64) *CostAccountUpdate {
	cau.mutation.AddUpdatedBy(i)
	return cau
}

// SetUpdatedAt sets the "updated_at" field.
func (cau *CostAccountUpdate) SetUpdatedAt(t time.Time) *CostAccountUpdate {
	cau.mutation.SetUpdatedAt(t)
	return cau
}

// SetDeletedAt sets the "deleted_at" field.
func (cau *CostAccountUpdate) SetDeletedAt(t time.Time) *CostAccountUpdate {
	cau.mutation.SetDeletedAt(t)
	return cau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cau *CostAccountUpdate) SetNillableDeletedAt(t *time.Time) *CostAccountUpdate {
	if t != nil {
		cau.SetDeletedAt(*t)
	}
	return cau
}

// SetUserID sets the "user_id" field.
func (cau *CostAccountUpdate) SetUserID(i int64) *CostAccountUpdate {
	cau.mutation.SetUserID(i)
	return cau
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cau *CostAccountUpdate) SetNillableUserID(i *int64) *CostAccountUpdate {
	if i != nil {
		cau.SetUserID(*i)
	}
	return cau
}

// SetTotalCep sets the "total_cep" field.
func (cau *CostAccountUpdate) SetTotalCep(i int64) *CostAccountUpdate {
	cau.mutation.ResetTotalCep()
	cau.mutation.SetTotalCep(i)
	return cau
}

// SetNillableTotalCep sets the "total_cep" field if the given value is not nil.
func (cau *CostAccountUpdate) SetNillableTotalCep(i *int64) *CostAccountUpdate {
	if i != nil {
		cau.SetTotalCep(*i)
	}
	return cau
}

// AddTotalCep adds i to the "total_cep" field.
func (cau *CostAccountUpdate) AddTotalCep(i int64) *CostAccountUpdate {
	cau.mutation.AddTotalCep(i)
	return cau
}

// SetSumTotalCep sets the "sum_total_cep" field.
func (cau *CostAccountUpdate) SetSumTotalCep(i int64) *CostAccountUpdate {
	cau.mutation.ResetSumTotalCep()
	cau.mutation.SetSumTotalCep(i)
	return cau
}

// SetNillableSumTotalCep sets the "sum_total_cep" field if the given value is not nil.
func (cau *CostAccountUpdate) SetNillableSumTotalCep(i *int64) *CostAccountUpdate {
	if i != nil {
		cau.SetSumTotalCep(*i)
	}
	return cau
}

// AddSumTotalCep adds i to the "sum_total_cep" field.
func (cau *CostAccountUpdate) AddSumTotalCep(i int64) *CostAccountUpdate {
	cau.mutation.AddSumTotalCep(i)
	return cau
}

// SetFrozenTotalCep sets the "frozen_total_cep" field.
func (cau *CostAccountUpdate) SetFrozenTotalCep(i int64) *CostAccountUpdate {
	cau.mutation.ResetFrozenTotalCep()
	cau.mutation.SetFrozenTotalCep(i)
	return cau
}

// SetNillableFrozenTotalCep sets the "frozen_total_cep" field if the given value is not nil.
func (cau *CostAccountUpdate) SetNillableFrozenTotalCep(i *int64) *CostAccountUpdate {
	if i != nil {
		cau.SetFrozenTotalCep(*i)
	}
	return cau
}

// AddFrozenTotalCep adds i to the "frozen_total_cep" field.
func (cau *CostAccountUpdate) AddFrozenTotalCep(i int64) *CostAccountUpdate {
	cau.mutation.AddFrozenTotalCep(i)
	return cau
}

// SetPureCep sets the "pure_cep" field.
func (cau *CostAccountUpdate) SetPureCep(i int64) *CostAccountUpdate {
	cau.mutation.ResetPureCep()
	cau.mutation.SetPureCep(i)
	return cau
}

// SetNillablePureCep sets the "pure_cep" field if the given value is not nil.
func (cau *CostAccountUpdate) SetNillablePureCep(i *int64) *CostAccountUpdate {
	if i != nil {
		cau.SetPureCep(*i)
	}
	return cau
}

// AddPureCep adds i to the "pure_cep" field.
func (cau *CostAccountUpdate) AddPureCep(i int64) *CostAccountUpdate {
	cau.mutation.AddPureCep(i)
	return cau
}

// SetSumPureCep sets the "sum_pure_cep" field.
func (cau *CostAccountUpdate) SetSumPureCep(i int64) *CostAccountUpdate {
	cau.mutation.ResetSumPureCep()
	cau.mutation.SetSumPureCep(i)
	return cau
}

// SetNillableSumPureCep sets the "sum_pure_cep" field if the given value is not nil.
func (cau *CostAccountUpdate) SetNillableSumPureCep(i *int64) *CostAccountUpdate {
	if i != nil {
		cau.SetSumPureCep(*i)
	}
	return cau
}

// AddSumPureCep adds i to the "sum_pure_cep" field.
func (cau *CostAccountUpdate) AddSumPureCep(i int64) *CostAccountUpdate {
	cau.mutation.AddSumPureCep(i)
	return cau
}

// SetFrozenPureCep sets the "frozen_pure_cep" field.
func (cau *CostAccountUpdate) SetFrozenPureCep(i int64) *CostAccountUpdate {
	cau.mutation.ResetFrozenPureCep()
	cau.mutation.SetFrozenPureCep(i)
	return cau
}

// SetNillableFrozenPureCep sets the "frozen_pure_cep" field if the given value is not nil.
func (cau *CostAccountUpdate) SetNillableFrozenPureCep(i *int64) *CostAccountUpdate {
	if i != nil {
		cau.SetFrozenPureCep(*i)
	}
	return cau
}

// AddFrozenPureCep adds i to the "frozen_pure_cep" field.
func (cau *CostAccountUpdate) AddFrozenPureCep(i int64) *CostAccountUpdate {
	cau.mutation.AddFrozenPureCep(i)
	return cau
}

// SetGiftCep sets the "gift_cep" field.
func (cau *CostAccountUpdate) SetGiftCep(i int64) *CostAccountUpdate {
	cau.mutation.ResetGiftCep()
	cau.mutation.SetGiftCep(i)
	return cau
}

// SetNillableGiftCep sets the "gift_cep" field if the given value is not nil.
func (cau *CostAccountUpdate) SetNillableGiftCep(i *int64) *CostAccountUpdate {
	if i != nil {
		cau.SetGiftCep(*i)
	}
	return cau
}

// AddGiftCep adds i to the "gift_cep" field.
func (cau *CostAccountUpdate) AddGiftCep(i int64) *CostAccountUpdate {
	cau.mutation.AddGiftCep(i)
	return cau
}

// SetSumGiftCep sets the "sum_gift_cep" field.
func (cau *CostAccountUpdate) SetSumGiftCep(i int64) *CostAccountUpdate {
	cau.mutation.ResetSumGiftCep()
	cau.mutation.SetSumGiftCep(i)
	return cau
}

// SetNillableSumGiftCep sets the "sum_gift_cep" field if the given value is not nil.
func (cau *CostAccountUpdate) SetNillableSumGiftCep(i *int64) *CostAccountUpdate {
	if i != nil {
		cau.SetSumGiftCep(*i)
	}
	return cau
}

// AddSumGiftCep adds i to the "sum_gift_cep" field.
func (cau *CostAccountUpdate) AddSumGiftCep(i int64) *CostAccountUpdate {
	cau.mutation.AddSumGiftCep(i)
	return cau
}

// SetFrozenGiftCep sets the "frozen_gift_cep" field.
func (cau *CostAccountUpdate) SetFrozenGiftCep(i int64) *CostAccountUpdate {
	cau.mutation.ResetFrozenGiftCep()
	cau.mutation.SetFrozenGiftCep(i)
	return cau
}

// SetNillableFrozenGiftCep sets the "frozen_gift_cep" field if the given value is not nil.
func (cau *CostAccountUpdate) SetNillableFrozenGiftCep(i *int64) *CostAccountUpdate {
	if i != nil {
		cau.SetFrozenGiftCep(*i)
	}
	return cau
}

// AddFrozenGiftCep adds i to the "frozen_gift_cep" field.
func (cau *CostAccountUpdate) AddFrozenGiftCep(i int64) *CostAccountUpdate {
	cau.mutation.AddFrozenGiftCep(i)
	return cau
}

// SetUser sets the "user" edge to the User entity.
func (cau *CostAccountUpdate) SetUser(u *User) *CostAccountUpdate {
	return cau.SetUserID(u.ID)
}

// AddCostBillIDs adds the "cost_bills" edge to the CostBill entity by IDs.
func (cau *CostAccountUpdate) AddCostBillIDs(ids ...int64) *CostAccountUpdate {
	cau.mutation.AddCostBillIDs(ids...)
	return cau
}

// AddCostBills adds the "cost_bills" edges to the CostBill entity.
func (cau *CostAccountUpdate) AddCostBills(c ...*CostBill) *CostAccountUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cau.AddCostBillIDs(ids...)
}

// Mutation returns the CostAccountMutation object of the builder.
func (cau *CostAccountUpdate) Mutation() *CostAccountMutation {
	return cau.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cau *CostAccountUpdate) ClearUser() *CostAccountUpdate {
	cau.mutation.ClearUser()
	return cau
}

// ClearCostBills clears all "cost_bills" edges to the CostBill entity.
func (cau *CostAccountUpdate) ClearCostBills() *CostAccountUpdate {
	cau.mutation.ClearCostBills()
	return cau
}

// RemoveCostBillIDs removes the "cost_bills" edge to CostBill entities by IDs.
func (cau *CostAccountUpdate) RemoveCostBillIDs(ids ...int64) *CostAccountUpdate {
	cau.mutation.RemoveCostBillIDs(ids...)
	return cau
}

// RemoveCostBills removes "cost_bills" edges to CostBill entities.
func (cau *CostAccountUpdate) RemoveCostBills(c ...*CostBill) *CostAccountUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cau.RemoveCostBillIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cau *CostAccountUpdate) Save(ctx context.Context) (int, error) {
	cau.defaults()
	return withHooks(ctx, cau.sqlSave, cau.mutation, cau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cau *CostAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := cau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cau *CostAccountUpdate) Exec(ctx context.Context) error {
	_, err := cau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cau *CostAccountUpdate) ExecX(ctx context.Context) {
	if err := cau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cau *CostAccountUpdate) defaults() {
	if _, ok := cau.mutation.UpdatedAt(); !ok {
		v := costaccount.UpdateDefaultUpdatedAt()
		cau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cau *CostAccountUpdate) check() error {
	if _, ok := cau.mutation.UserID(); cau.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "CostAccount.user"`)
	}
	return nil
}

func (cau *CostAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(costaccount.Table, costaccount.Columns, sqlgraph.NewFieldSpec(costaccount.FieldID, field.TypeInt64))
	if ps := cau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cau.mutation.CreatedBy(); ok {
		_spec.SetField(costaccount.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := cau.mutation.AddedCreatedBy(); ok {
		_spec.AddField(costaccount.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := cau.mutation.UpdatedBy(); ok {
		_spec.SetField(costaccount.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := cau.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(costaccount.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := cau.mutation.UpdatedAt(); ok {
		_spec.SetField(costaccount.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cau.mutation.DeletedAt(); ok {
		_spec.SetField(costaccount.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := cau.mutation.TotalCep(); ok {
		_spec.SetField(costaccount.FieldTotalCep, field.TypeInt64, value)
	}
	if value, ok := cau.mutation.AddedTotalCep(); ok {
		_spec.AddField(costaccount.FieldTotalCep, field.TypeInt64, value)
	}
	if value, ok := cau.mutation.SumTotalCep(); ok {
		_spec.SetField(costaccount.FieldSumTotalCep, field.TypeInt64, value)
	}
	if value, ok := cau.mutation.AddedSumTotalCep(); ok {
		_spec.AddField(costaccount.FieldSumTotalCep, field.TypeInt64, value)
	}
	if value, ok := cau.mutation.FrozenTotalCep(); ok {
		_spec.SetField(costaccount.FieldFrozenTotalCep, field.TypeInt64, value)
	}
	if value, ok := cau.mutation.AddedFrozenTotalCep(); ok {
		_spec.AddField(costaccount.FieldFrozenTotalCep, field.TypeInt64, value)
	}
	if value, ok := cau.mutation.PureCep(); ok {
		_spec.SetField(costaccount.FieldPureCep, field.TypeInt64, value)
	}
	if value, ok := cau.mutation.AddedPureCep(); ok {
		_spec.AddField(costaccount.FieldPureCep, field.TypeInt64, value)
	}
	if value, ok := cau.mutation.SumPureCep(); ok {
		_spec.SetField(costaccount.FieldSumPureCep, field.TypeInt64, value)
	}
	if value, ok := cau.mutation.AddedSumPureCep(); ok {
		_spec.AddField(costaccount.FieldSumPureCep, field.TypeInt64, value)
	}
	if value, ok := cau.mutation.FrozenPureCep(); ok {
		_spec.SetField(costaccount.FieldFrozenPureCep, field.TypeInt64, value)
	}
	if value, ok := cau.mutation.AddedFrozenPureCep(); ok {
		_spec.AddField(costaccount.FieldFrozenPureCep, field.TypeInt64, value)
	}
	if value, ok := cau.mutation.GiftCep(); ok {
		_spec.SetField(costaccount.FieldGiftCep, field.TypeInt64, value)
	}
	if value, ok := cau.mutation.AddedGiftCep(); ok {
		_spec.AddField(costaccount.FieldGiftCep, field.TypeInt64, value)
	}
	if value, ok := cau.mutation.SumGiftCep(); ok {
		_spec.SetField(costaccount.FieldSumGiftCep, field.TypeInt64, value)
	}
	if value, ok := cau.mutation.AddedSumGiftCep(); ok {
		_spec.AddField(costaccount.FieldSumGiftCep, field.TypeInt64, value)
	}
	if value, ok := cau.mutation.FrozenGiftCep(); ok {
		_spec.SetField(costaccount.FieldFrozenGiftCep, field.TypeInt64, value)
	}
	if value, ok := cau.mutation.AddedFrozenGiftCep(); ok {
		_spec.AddField(costaccount.FieldFrozenGiftCep, field.TypeInt64, value)
	}
	if cau.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   costaccount.UserTable,
			Columns: []string{costaccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cau.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   costaccount.UserTable,
			Columns: []string{costaccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cau.mutation.CostBillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   costaccount.CostBillsTable,
			Columns: []string{costaccount.CostBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costbill.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cau.mutation.RemovedCostBillsIDs(); len(nodes) > 0 && !cau.mutation.CostBillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   costaccount.CostBillsTable,
			Columns: []string{costaccount.CostBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costbill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cau.mutation.CostBillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   costaccount.CostBillsTable,
			Columns: []string{costaccount.CostBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costbill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{costaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cau.mutation.done = true
	return n, nil
}

// CostAccountUpdateOne is the builder for updating a single CostAccount entity.
type CostAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CostAccountMutation
}

// SetCreatedBy sets the "created_by" field.
func (cauo *CostAccountUpdateOne) SetCreatedBy(i int64) *CostAccountUpdateOne {
	cauo.mutation.ResetCreatedBy()
	cauo.mutation.SetCreatedBy(i)
	return cauo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cauo *CostAccountUpdateOne) SetNillableCreatedBy(i *int64) *CostAccountUpdateOne {
	if i != nil {
		cauo.SetCreatedBy(*i)
	}
	return cauo
}

// AddCreatedBy adds i to the "created_by" field.
func (cauo *CostAccountUpdateOne) AddCreatedBy(i int64) *CostAccountUpdateOne {
	cauo.mutation.AddCreatedBy(i)
	return cauo
}

// SetUpdatedBy sets the "updated_by" field.
func (cauo *CostAccountUpdateOne) SetUpdatedBy(i int64) *CostAccountUpdateOne {
	cauo.mutation.ResetUpdatedBy()
	cauo.mutation.SetUpdatedBy(i)
	return cauo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cauo *CostAccountUpdateOne) SetNillableUpdatedBy(i *int64) *CostAccountUpdateOne {
	if i != nil {
		cauo.SetUpdatedBy(*i)
	}
	return cauo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (cauo *CostAccountUpdateOne) AddUpdatedBy(i int64) *CostAccountUpdateOne {
	cauo.mutation.AddUpdatedBy(i)
	return cauo
}

// SetUpdatedAt sets the "updated_at" field.
func (cauo *CostAccountUpdateOne) SetUpdatedAt(t time.Time) *CostAccountUpdateOne {
	cauo.mutation.SetUpdatedAt(t)
	return cauo
}

// SetDeletedAt sets the "deleted_at" field.
func (cauo *CostAccountUpdateOne) SetDeletedAt(t time.Time) *CostAccountUpdateOne {
	cauo.mutation.SetDeletedAt(t)
	return cauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cauo *CostAccountUpdateOne) SetNillableDeletedAt(t *time.Time) *CostAccountUpdateOne {
	if t != nil {
		cauo.SetDeletedAt(*t)
	}
	return cauo
}

// SetUserID sets the "user_id" field.
func (cauo *CostAccountUpdateOne) SetUserID(i int64) *CostAccountUpdateOne {
	cauo.mutation.SetUserID(i)
	return cauo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cauo *CostAccountUpdateOne) SetNillableUserID(i *int64) *CostAccountUpdateOne {
	if i != nil {
		cauo.SetUserID(*i)
	}
	return cauo
}

// SetTotalCep sets the "total_cep" field.
func (cauo *CostAccountUpdateOne) SetTotalCep(i int64) *CostAccountUpdateOne {
	cauo.mutation.ResetTotalCep()
	cauo.mutation.SetTotalCep(i)
	return cauo
}

// SetNillableTotalCep sets the "total_cep" field if the given value is not nil.
func (cauo *CostAccountUpdateOne) SetNillableTotalCep(i *int64) *CostAccountUpdateOne {
	if i != nil {
		cauo.SetTotalCep(*i)
	}
	return cauo
}

// AddTotalCep adds i to the "total_cep" field.
func (cauo *CostAccountUpdateOne) AddTotalCep(i int64) *CostAccountUpdateOne {
	cauo.mutation.AddTotalCep(i)
	return cauo
}

// SetSumTotalCep sets the "sum_total_cep" field.
func (cauo *CostAccountUpdateOne) SetSumTotalCep(i int64) *CostAccountUpdateOne {
	cauo.mutation.ResetSumTotalCep()
	cauo.mutation.SetSumTotalCep(i)
	return cauo
}

// SetNillableSumTotalCep sets the "sum_total_cep" field if the given value is not nil.
func (cauo *CostAccountUpdateOne) SetNillableSumTotalCep(i *int64) *CostAccountUpdateOne {
	if i != nil {
		cauo.SetSumTotalCep(*i)
	}
	return cauo
}

// AddSumTotalCep adds i to the "sum_total_cep" field.
func (cauo *CostAccountUpdateOne) AddSumTotalCep(i int64) *CostAccountUpdateOne {
	cauo.mutation.AddSumTotalCep(i)
	return cauo
}

// SetFrozenTotalCep sets the "frozen_total_cep" field.
func (cauo *CostAccountUpdateOne) SetFrozenTotalCep(i int64) *CostAccountUpdateOne {
	cauo.mutation.ResetFrozenTotalCep()
	cauo.mutation.SetFrozenTotalCep(i)
	return cauo
}

// SetNillableFrozenTotalCep sets the "frozen_total_cep" field if the given value is not nil.
func (cauo *CostAccountUpdateOne) SetNillableFrozenTotalCep(i *int64) *CostAccountUpdateOne {
	if i != nil {
		cauo.SetFrozenTotalCep(*i)
	}
	return cauo
}

// AddFrozenTotalCep adds i to the "frozen_total_cep" field.
func (cauo *CostAccountUpdateOne) AddFrozenTotalCep(i int64) *CostAccountUpdateOne {
	cauo.mutation.AddFrozenTotalCep(i)
	return cauo
}

// SetPureCep sets the "pure_cep" field.
func (cauo *CostAccountUpdateOne) SetPureCep(i int64) *CostAccountUpdateOne {
	cauo.mutation.ResetPureCep()
	cauo.mutation.SetPureCep(i)
	return cauo
}

// SetNillablePureCep sets the "pure_cep" field if the given value is not nil.
func (cauo *CostAccountUpdateOne) SetNillablePureCep(i *int64) *CostAccountUpdateOne {
	if i != nil {
		cauo.SetPureCep(*i)
	}
	return cauo
}

// AddPureCep adds i to the "pure_cep" field.
func (cauo *CostAccountUpdateOne) AddPureCep(i int64) *CostAccountUpdateOne {
	cauo.mutation.AddPureCep(i)
	return cauo
}

// SetSumPureCep sets the "sum_pure_cep" field.
func (cauo *CostAccountUpdateOne) SetSumPureCep(i int64) *CostAccountUpdateOne {
	cauo.mutation.ResetSumPureCep()
	cauo.mutation.SetSumPureCep(i)
	return cauo
}

// SetNillableSumPureCep sets the "sum_pure_cep" field if the given value is not nil.
func (cauo *CostAccountUpdateOne) SetNillableSumPureCep(i *int64) *CostAccountUpdateOne {
	if i != nil {
		cauo.SetSumPureCep(*i)
	}
	return cauo
}

// AddSumPureCep adds i to the "sum_pure_cep" field.
func (cauo *CostAccountUpdateOne) AddSumPureCep(i int64) *CostAccountUpdateOne {
	cauo.mutation.AddSumPureCep(i)
	return cauo
}

// SetFrozenPureCep sets the "frozen_pure_cep" field.
func (cauo *CostAccountUpdateOne) SetFrozenPureCep(i int64) *CostAccountUpdateOne {
	cauo.mutation.ResetFrozenPureCep()
	cauo.mutation.SetFrozenPureCep(i)
	return cauo
}

// SetNillableFrozenPureCep sets the "frozen_pure_cep" field if the given value is not nil.
func (cauo *CostAccountUpdateOne) SetNillableFrozenPureCep(i *int64) *CostAccountUpdateOne {
	if i != nil {
		cauo.SetFrozenPureCep(*i)
	}
	return cauo
}

// AddFrozenPureCep adds i to the "frozen_pure_cep" field.
func (cauo *CostAccountUpdateOne) AddFrozenPureCep(i int64) *CostAccountUpdateOne {
	cauo.mutation.AddFrozenPureCep(i)
	return cauo
}

// SetGiftCep sets the "gift_cep" field.
func (cauo *CostAccountUpdateOne) SetGiftCep(i int64) *CostAccountUpdateOne {
	cauo.mutation.ResetGiftCep()
	cauo.mutation.SetGiftCep(i)
	return cauo
}

// SetNillableGiftCep sets the "gift_cep" field if the given value is not nil.
func (cauo *CostAccountUpdateOne) SetNillableGiftCep(i *int64) *CostAccountUpdateOne {
	if i != nil {
		cauo.SetGiftCep(*i)
	}
	return cauo
}

// AddGiftCep adds i to the "gift_cep" field.
func (cauo *CostAccountUpdateOne) AddGiftCep(i int64) *CostAccountUpdateOne {
	cauo.mutation.AddGiftCep(i)
	return cauo
}

// SetSumGiftCep sets the "sum_gift_cep" field.
func (cauo *CostAccountUpdateOne) SetSumGiftCep(i int64) *CostAccountUpdateOne {
	cauo.mutation.ResetSumGiftCep()
	cauo.mutation.SetSumGiftCep(i)
	return cauo
}

// SetNillableSumGiftCep sets the "sum_gift_cep" field if the given value is not nil.
func (cauo *CostAccountUpdateOne) SetNillableSumGiftCep(i *int64) *CostAccountUpdateOne {
	if i != nil {
		cauo.SetSumGiftCep(*i)
	}
	return cauo
}

// AddSumGiftCep adds i to the "sum_gift_cep" field.
func (cauo *CostAccountUpdateOne) AddSumGiftCep(i int64) *CostAccountUpdateOne {
	cauo.mutation.AddSumGiftCep(i)
	return cauo
}

// SetFrozenGiftCep sets the "frozen_gift_cep" field.
func (cauo *CostAccountUpdateOne) SetFrozenGiftCep(i int64) *CostAccountUpdateOne {
	cauo.mutation.ResetFrozenGiftCep()
	cauo.mutation.SetFrozenGiftCep(i)
	return cauo
}

// SetNillableFrozenGiftCep sets the "frozen_gift_cep" field if the given value is not nil.
func (cauo *CostAccountUpdateOne) SetNillableFrozenGiftCep(i *int64) *CostAccountUpdateOne {
	if i != nil {
		cauo.SetFrozenGiftCep(*i)
	}
	return cauo
}

// AddFrozenGiftCep adds i to the "frozen_gift_cep" field.
func (cauo *CostAccountUpdateOne) AddFrozenGiftCep(i int64) *CostAccountUpdateOne {
	cauo.mutation.AddFrozenGiftCep(i)
	return cauo
}

// SetUser sets the "user" edge to the User entity.
func (cauo *CostAccountUpdateOne) SetUser(u *User) *CostAccountUpdateOne {
	return cauo.SetUserID(u.ID)
}

// AddCostBillIDs adds the "cost_bills" edge to the CostBill entity by IDs.
func (cauo *CostAccountUpdateOne) AddCostBillIDs(ids ...int64) *CostAccountUpdateOne {
	cauo.mutation.AddCostBillIDs(ids...)
	return cauo
}

// AddCostBills adds the "cost_bills" edges to the CostBill entity.
func (cauo *CostAccountUpdateOne) AddCostBills(c ...*CostBill) *CostAccountUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cauo.AddCostBillIDs(ids...)
}

// Mutation returns the CostAccountMutation object of the builder.
func (cauo *CostAccountUpdateOne) Mutation() *CostAccountMutation {
	return cauo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cauo *CostAccountUpdateOne) ClearUser() *CostAccountUpdateOne {
	cauo.mutation.ClearUser()
	return cauo
}

// ClearCostBills clears all "cost_bills" edges to the CostBill entity.
func (cauo *CostAccountUpdateOne) ClearCostBills() *CostAccountUpdateOne {
	cauo.mutation.ClearCostBills()
	return cauo
}

// RemoveCostBillIDs removes the "cost_bills" edge to CostBill entities by IDs.
func (cauo *CostAccountUpdateOne) RemoveCostBillIDs(ids ...int64) *CostAccountUpdateOne {
	cauo.mutation.RemoveCostBillIDs(ids...)
	return cauo
}

// RemoveCostBills removes "cost_bills" edges to CostBill entities.
func (cauo *CostAccountUpdateOne) RemoveCostBills(c ...*CostBill) *CostAccountUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cauo.RemoveCostBillIDs(ids...)
}

// Where appends a list predicates to the CostAccountUpdate builder.
func (cauo *CostAccountUpdateOne) Where(ps ...predicate.CostAccount) *CostAccountUpdateOne {
	cauo.mutation.Where(ps...)
	return cauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cauo *CostAccountUpdateOne) Select(field string, fields ...string) *CostAccountUpdateOne {
	cauo.fields = append([]string{field}, fields...)
	return cauo
}

// Save executes the query and returns the updated CostAccount entity.
func (cauo *CostAccountUpdateOne) Save(ctx context.Context) (*CostAccount, error) {
	cauo.defaults()
	return withHooks(ctx, cauo.sqlSave, cauo.mutation, cauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cauo *CostAccountUpdateOne) SaveX(ctx context.Context) *CostAccount {
	node, err := cauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cauo *CostAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := cauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cauo *CostAccountUpdateOne) ExecX(ctx context.Context) {
	if err := cauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cauo *CostAccountUpdateOne) defaults() {
	if _, ok := cauo.mutation.UpdatedAt(); !ok {
		v := costaccount.UpdateDefaultUpdatedAt()
		cauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cauo *CostAccountUpdateOne) check() error {
	if _, ok := cauo.mutation.UserID(); cauo.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "CostAccount.user"`)
	}
	return nil
}

func (cauo *CostAccountUpdateOne) sqlSave(ctx context.Context) (_node *CostAccount, err error) {
	if err := cauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(costaccount.Table, costaccount.Columns, sqlgraph.NewFieldSpec(costaccount.FieldID, field.TypeInt64))
	id, ok := cauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "CostAccount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, costaccount.FieldID)
		for _, f := range fields {
			if !costaccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != costaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cauo.mutation.CreatedBy(); ok {
		_spec.SetField(costaccount.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := cauo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(costaccount.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := cauo.mutation.UpdatedBy(); ok {
		_spec.SetField(costaccount.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := cauo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(costaccount.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := cauo.mutation.UpdatedAt(); ok {
		_spec.SetField(costaccount.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cauo.mutation.DeletedAt(); ok {
		_spec.SetField(costaccount.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := cauo.mutation.TotalCep(); ok {
		_spec.SetField(costaccount.FieldTotalCep, field.TypeInt64, value)
	}
	if value, ok := cauo.mutation.AddedTotalCep(); ok {
		_spec.AddField(costaccount.FieldTotalCep, field.TypeInt64, value)
	}
	if value, ok := cauo.mutation.SumTotalCep(); ok {
		_spec.SetField(costaccount.FieldSumTotalCep, field.TypeInt64, value)
	}
	if value, ok := cauo.mutation.AddedSumTotalCep(); ok {
		_spec.AddField(costaccount.FieldSumTotalCep, field.TypeInt64, value)
	}
	if value, ok := cauo.mutation.FrozenTotalCep(); ok {
		_spec.SetField(costaccount.FieldFrozenTotalCep, field.TypeInt64, value)
	}
	if value, ok := cauo.mutation.AddedFrozenTotalCep(); ok {
		_spec.AddField(costaccount.FieldFrozenTotalCep, field.TypeInt64, value)
	}
	if value, ok := cauo.mutation.PureCep(); ok {
		_spec.SetField(costaccount.FieldPureCep, field.TypeInt64, value)
	}
	if value, ok := cauo.mutation.AddedPureCep(); ok {
		_spec.AddField(costaccount.FieldPureCep, field.TypeInt64, value)
	}
	if value, ok := cauo.mutation.SumPureCep(); ok {
		_spec.SetField(costaccount.FieldSumPureCep, field.TypeInt64, value)
	}
	if value, ok := cauo.mutation.AddedSumPureCep(); ok {
		_spec.AddField(costaccount.FieldSumPureCep, field.TypeInt64, value)
	}
	if value, ok := cauo.mutation.FrozenPureCep(); ok {
		_spec.SetField(costaccount.FieldFrozenPureCep, field.TypeInt64, value)
	}
	if value, ok := cauo.mutation.AddedFrozenPureCep(); ok {
		_spec.AddField(costaccount.FieldFrozenPureCep, field.TypeInt64, value)
	}
	if value, ok := cauo.mutation.GiftCep(); ok {
		_spec.SetField(costaccount.FieldGiftCep, field.TypeInt64, value)
	}
	if value, ok := cauo.mutation.AddedGiftCep(); ok {
		_spec.AddField(costaccount.FieldGiftCep, field.TypeInt64, value)
	}
	if value, ok := cauo.mutation.SumGiftCep(); ok {
		_spec.SetField(costaccount.FieldSumGiftCep, field.TypeInt64, value)
	}
	if value, ok := cauo.mutation.AddedSumGiftCep(); ok {
		_spec.AddField(costaccount.FieldSumGiftCep, field.TypeInt64, value)
	}
	if value, ok := cauo.mutation.FrozenGiftCep(); ok {
		_spec.SetField(costaccount.FieldFrozenGiftCep, field.TypeInt64, value)
	}
	if value, ok := cauo.mutation.AddedFrozenGiftCep(); ok {
		_spec.AddField(costaccount.FieldFrozenGiftCep, field.TypeInt64, value)
	}
	if cauo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   costaccount.UserTable,
			Columns: []string{costaccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cauo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   costaccount.UserTable,
			Columns: []string{costaccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cauo.mutation.CostBillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   costaccount.CostBillsTable,
			Columns: []string{costaccount.CostBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costbill.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cauo.mutation.RemovedCostBillsIDs(); len(nodes) > 0 && !cauo.mutation.CostBillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   costaccount.CostBillsTable,
			Columns: []string{costaccount.CostBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costbill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cauo.mutation.CostBillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   costaccount.CostBillsTable,
			Columns: []string{costaccount.CostBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costbill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CostAccount{config: cauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{costaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cauo.mutation.done = true
	return _node, nil
}
