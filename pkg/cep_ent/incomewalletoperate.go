// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/incomewalletoperate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// 收益补发记录，需要系统补发的收益，记录到这个表里
type IncomeWalletOperate struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建者 ID
	CreatedBy int64 `json:"created_by"`
	// 更新者 ID
	UpdatedBy int64 `json:"updated_by"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// 用戶 id
	UserID int64 `json:"user_id,string"`
	// 用户手机号
	Phone string `json:"phone"`
	// 类型
	Type enums.IncomeWalletOperateType `json:"type"`
	// 金额，单位：厘
	Amount int64 `json:"amount"`
	// 操作该用户收益钱包的原因
	Reason string `json:"reason"`
	// 当前余额（在生成这条记录时刻的余额），单位：厘
	CurrentBalance int64 `json:"current_balance"`
	// 审批前最后一次编辑的时间
	LastEditedAt time.Time `json:"last_updated_at"`
	// 拒绝此条记录原因
	RejectReason string `json:"reject_reason"`
	// 状态
	Status enums.IncomeWalletOperateStatus `json:"status"`
	// 审批人 id
	ApproveUserID int64 `json:"approve_user_id,string"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IncomeWalletOperateQuery when eager-loading is set.
	Edges        IncomeWalletOperateEdges `json:"edges"`
	selectValues sql.SelectValues
}

// IncomeWalletOperateEdges holds the relations/edges for other nodes in the graph.
type IncomeWalletOperateEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// ApproveUser holds the value of the approve_user edge.
	ApproveUser *User `json:"approve_user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IncomeWalletOperateEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ApproveUserOrErr returns the ApproveUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IncomeWalletOperateEdges) ApproveUserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.ApproveUser == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.ApproveUser, nil
	}
	return nil, &NotLoadedError{edge: "approve_user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IncomeWalletOperate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case incomewalletoperate.FieldID, incomewalletoperate.FieldCreatedBy, incomewalletoperate.FieldUpdatedBy, incomewalletoperate.FieldUserID, incomewalletoperate.FieldAmount, incomewalletoperate.FieldCurrentBalance, incomewalletoperate.FieldApproveUserID:
			values[i] = new(sql.NullInt64)
		case incomewalletoperate.FieldPhone, incomewalletoperate.FieldType, incomewalletoperate.FieldReason, incomewalletoperate.FieldRejectReason, incomewalletoperate.FieldStatus:
			values[i] = new(sql.NullString)
		case incomewalletoperate.FieldCreatedAt, incomewalletoperate.FieldUpdatedAt, incomewalletoperate.FieldDeletedAt, incomewalletoperate.FieldLastEditedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IncomeWalletOperate fields.
func (iwo *IncomeWalletOperate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case incomewalletoperate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			iwo.ID = int64(value.Int64)
		case incomewalletoperate.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				iwo.CreatedBy = value.Int64
			}
		case incomewalletoperate.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				iwo.UpdatedBy = value.Int64
			}
		case incomewalletoperate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				iwo.CreatedAt = value.Time
			}
		case incomewalletoperate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				iwo.UpdatedAt = value.Time
			}
		case incomewalletoperate.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				iwo.DeletedAt = value.Time
			}
		case incomewalletoperate.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				iwo.UserID = value.Int64
			}
		case incomewalletoperate.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				iwo.Phone = value.String
			}
		case incomewalletoperate.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				iwo.Type = enums.IncomeWalletOperateType(value.String)
			}
		case incomewalletoperate.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				iwo.Amount = value.Int64
			}
		case incomewalletoperate.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				iwo.Reason = value.String
			}
		case incomewalletoperate.FieldCurrentBalance:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field current_balance", values[i])
			} else if value.Valid {
				iwo.CurrentBalance = value.Int64
			}
		case incomewalletoperate.FieldLastEditedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_edited_at", values[i])
			} else if value.Valid {
				iwo.LastEditedAt = value.Time
			}
		case incomewalletoperate.FieldRejectReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reject_reason", values[i])
			} else if value.Valid {
				iwo.RejectReason = value.String
			}
		case incomewalletoperate.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				iwo.Status = enums.IncomeWalletOperateStatus(value.String)
			}
		case incomewalletoperate.FieldApproveUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field approve_user_id", values[i])
			} else if value.Valid {
				iwo.ApproveUserID = value.Int64
			}
		default:
			iwo.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IncomeWalletOperate.
// This includes values selected through modifiers, order, etc.
func (iwo *IncomeWalletOperate) Value(name string) (ent.Value, error) {
	return iwo.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the IncomeWalletOperate entity.
func (iwo *IncomeWalletOperate) QueryUser() *UserQuery {
	return NewIncomeWalletOperateClient(iwo.config).QueryUser(iwo)
}

// QueryApproveUser queries the "approve_user" edge of the IncomeWalletOperate entity.
func (iwo *IncomeWalletOperate) QueryApproveUser() *UserQuery {
	return NewIncomeWalletOperateClient(iwo.config).QueryApproveUser(iwo)
}

// Update returns a builder for updating this IncomeWalletOperate.
// Note that you need to call IncomeWalletOperate.Unwrap() before calling this method if this IncomeWalletOperate
// was returned from a transaction, and the transaction was committed or rolled back.
func (iwo *IncomeWalletOperate) Update() *IncomeWalletOperateUpdateOne {
	return NewIncomeWalletOperateClient(iwo.config).UpdateOne(iwo)
}

// Unwrap unwraps the IncomeWalletOperate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (iwo *IncomeWalletOperate) Unwrap() *IncomeWalletOperate {
	_tx, ok := iwo.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: IncomeWalletOperate is not a transactional entity")
	}
	iwo.config.driver = _tx.drv
	return iwo
}

// String implements the fmt.Stringer.
func (iwo *IncomeWalletOperate) String() string {
	var builder strings.Builder
	builder.WriteString("IncomeWalletOperate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", iwo.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", iwo.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", iwo.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(iwo.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(iwo.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(iwo.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", iwo.UserID))
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(iwo.Phone)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", iwo.Type))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", iwo.Amount))
	builder.WriteString(", ")
	builder.WriteString("reason=")
	builder.WriteString(iwo.Reason)
	builder.WriteString(", ")
	builder.WriteString("current_balance=")
	builder.WriteString(fmt.Sprintf("%v", iwo.CurrentBalance))
	builder.WriteString(", ")
	builder.WriteString("last_edited_at=")
	builder.WriteString(iwo.LastEditedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("reject_reason=")
	builder.WriteString(iwo.RejectReason)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", iwo.Status))
	builder.WriteString(", ")
	builder.WriteString("approve_user_id=")
	builder.WriteString(fmt.Sprintf("%v", iwo.ApproveUserID))
	builder.WriteByte(')')
	return builder.String()
}

// IncomeWalletOperates is a parsable slice of IncomeWalletOperate.
type IncomeWalletOperates []*IncomeWalletOperate
