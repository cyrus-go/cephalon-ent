// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/outputlog"
)

// OutputLogCreate is the builder for creating a OutputLog entity.
type OutputLogCreate struct {
	config
	mutation *OutputLogMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (olc *OutputLogCreate) SetCreatedBy(i int64) *OutputLogCreate {
	olc.mutation.SetCreatedBy(i)
	return olc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (olc *OutputLogCreate) SetNillableCreatedBy(i *int64) *OutputLogCreate {
	if i != nil {
		olc.SetCreatedBy(*i)
	}
	return olc
}

// SetUpdatedBy sets the "updated_by" field.
func (olc *OutputLogCreate) SetUpdatedBy(i int64) *OutputLogCreate {
	olc.mutation.SetUpdatedBy(i)
	return olc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (olc *OutputLogCreate) SetNillableUpdatedBy(i *int64) *OutputLogCreate {
	if i != nil {
		olc.SetUpdatedBy(*i)
	}
	return olc
}

// SetCreatedAt sets the "created_at" field.
func (olc *OutputLogCreate) SetCreatedAt(t time.Time) *OutputLogCreate {
	olc.mutation.SetCreatedAt(t)
	return olc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (olc *OutputLogCreate) SetNillableCreatedAt(t *time.Time) *OutputLogCreate {
	if t != nil {
		olc.SetCreatedAt(*t)
	}
	return olc
}

// SetUpdatedAt sets the "updated_at" field.
func (olc *OutputLogCreate) SetUpdatedAt(t time.Time) *OutputLogCreate {
	olc.mutation.SetUpdatedAt(t)
	return olc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (olc *OutputLogCreate) SetNillableUpdatedAt(t *time.Time) *OutputLogCreate {
	if t != nil {
		olc.SetUpdatedAt(*t)
	}
	return olc
}

// SetDeletedAt sets the "deleted_at" field.
func (olc *OutputLogCreate) SetDeletedAt(t time.Time) *OutputLogCreate {
	olc.mutation.SetDeletedAt(t)
	return olc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (olc *OutputLogCreate) SetNillableDeletedAt(t *time.Time) *OutputLogCreate {
	if t != nil {
		olc.SetDeletedAt(*t)
	}
	return olc
}

// SetTraceID sets the "trace_id" field.
func (olc *OutputLogCreate) SetTraceID(i int64) *OutputLogCreate {
	olc.mutation.SetTraceID(i)
	return olc
}

// SetHeaders sets the "headers" field.
func (olc *OutputLogCreate) SetHeaders(s string) *OutputLogCreate {
	olc.mutation.SetHeaders(s)
	return olc
}

// SetBody sets the "body" field.
func (olc *OutputLogCreate) SetBody(s string) *OutputLogCreate {
	olc.mutation.SetBody(s)
	return olc
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (olc *OutputLogCreate) SetNillableBody(s *string) *OutputLogCreate {
	if s != nil {
		olc.SetBody(*s)
	}
	return olc
}

// SetURL sets the "url" field.
func (olc *OutputLogCreate) SetURL(s string) *OutputLogCreate {
	olc.mutation.SetURL(s)
	return olc
}

// SetIP sets the "ip" field.
func (olc *OutputLogCreate) SetIP(s string) *OutputLogCreate {
	olc.mutation.SetIP(s)
	return olc
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (olc *OutputLogCreate) SetNillableIP(s *string) *OutputLogCreate {
	if s != nil {
		olc.SetIP(*s)
	}
	return olc
}

// SetCaller sets the "caller" field.
func (olc *OutputLogCreate) SetCaller(s string) *OutputLogCreate {
	olc.mutation.SetCaller(s)
	return olc
}

// SetNillableCaller sets the "caller" field if the given value is not nil.
func (olc *OutputLogCreate) SetNillableCaller(s *string) *OutputLogCreate {
	if s != nil {
		olc.SetCaller(*s)
	}
	return olc
}

// SetStatus sets the "status" field.
func (olc *OutputLogCreate) SetStatus(i int16) *OutputLogCreate {
	olc.mutation.SetStatus(i)
	return olc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (olc *OutputLogCreate) SetNillableStatus(i *int16) *OutputLogCreate {
	if i != nil {
		olc.SetStatus(*i)
	}
	return olc
}

// SetHmacKey sets the "hmac_key" field.
func (olc *OutputLogCreate) SetHmacKey(s string) *OutputLogCreate {
	olc.mutation.SetHmacKey(s)
	return olc
}

// SetNillableHmacKey sets the "hmac_key" field if the given value is not nil.
func (olc *OutputLogCreate) SetNillableHmacKey(s *string) *OutputLogCreate {
	if s != nil {
		olc.SetHmacKey(*s)
	}
	return olc
}

// SetID sets the "id" field.
func (olc *OutputLogCreate) SetID(i int64) *OutputLogCreate {
	olc.mutation.SetID(i)
	return olc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (olc *OutputLogCreate) SetNillableID(i *int64) *OutputLogCreate {
	if i != nil {
		olc.SetID(*i)
	}
	return olc
}

// Mutation returns the OutputLogMutation object of the builder.
func (olc *OutputLogCreate) Mutation() *OutputLogMutation {
	return olc.mutation
}

// Save creates the OutputLog in the database.
func (olc *OutputLogCreate) Save(ctx context.Context) (*OutputLog, error) {
	olc.defaults()
	return withHooks(ctx, olc.sqlSave, olc.mutation, olc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (olc *OutputLogCreate) SaveX(ctx context.Context) *OutputLog {
	v, err := olc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (olc *OutputLogCreate) Exec(ctx context.Context) error {
	_, err := olc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (olc *OutputLogCreate) ExecX(ctx context.Context) {
	if err := olc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (olc *OutputLogCreate) defaults() {
	if _, ok := olc.mutation.CreatedBy(); !ok {
		v := outputlog.DefaultCreatedBy
		olc.mutation.SetCreatedBy(v)
	}
	if _, ok := olc.mutation.UpdatedBy(); !ok {
		v := outputlog.DefaultUpdatedBy
		olc.mutation.SetUpdatedBy(v)
	}
	if _, ok := olc.mutation.CreatedAt(); !ok {
		v := outputlog.DefaultCreatedAt()
		olc.mutation.SetCreatedAt(v)
	}
	if _, ok := olc.mutation.UpdatedAt(); !ok {
		v := outputlog.DefaultUpdatedAt()
		olc.mutation.SetUpdatedAt(v)
	}
	if _, ok := olc.mutation.DeletedAt(); !ok {
		v := outputlog.DefaultDeletedAt
		olc.mutation.SetDeletedAt(v)
	}
	if _, ok := olc.mutation.Body(); !ok {
		v := outputlog.DefaultBody
		olc.mutation.SetBody(v)
	}
	if _, ok := olc.mutation.IP(); !ok {
		v := outputlog.DefaultIP
		olc.mutation.SetIP(v)
	}
	if _, ok := olc.mutation.Caller(); !ok {
		v := outputlog.DefaultCaller
		olc.mutation.SetCaller(v)
	}
	if _, ok := olc.mutation.Status(); !ok {
		v := outputlog.DefaultStatus
		olc.mutation.SetStatus(v)
	}
	if _, ok := olc.mutation.HmacKey(); !ok {
		v := outputlog.DefaultHmacKey
		olc.mutation.SetHmacKey(v)
	}
	if _, ok := olc.mutation.ID(); !ok {
		v := outputlog.DefaultID()
		olc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (olc *OutputLogCreate) check() error {
	if _, ok := olc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "OutputLog.created_by"`)}
	}
	if _, ok := olc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "OutputLog.updated_by"`)}
	}
	if _, ok := olc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "OutputLog.created_at"`)}
	}
	if _, ok := olc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "OutputLog.updated_at"`)}
	}
	if _, ok := olc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "OutputLog.deleted_at"`)}
	}
	if _, ok := olc.mutation.TraceID(); !ok {
		return &ValidationError{Name: "trace_id", err: errors.New(`cep_ent: missing required field "OutputLog.trace_id"`)}
	}
	if _, ok := olc.mutation.Headers(); !ok {
		return &ValidationError{Name: "headers", err: errors.New(`cep_ent: missing required field "OutputLog.headers"`)}
	}
	if _, ok := olc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`cep_ent: missing required field "OutputLog.url"`)}
	}
	if _, ok := olc.mutation.Caller(); !ok {
		return &ValidationError{Name: "caller", err: errors.New(`cep_ent: missing required field "OutputLog.caller"`)}
	}
	if _, ok := olc.mutation.HmacKey(); !ok {
		return &ValidationError{Name: "hmac_key", err: errors.New(`cep_ent: missing required field "OutputLog.hmac_key"`)}
	}
	return nil
}

func (olc *OutputLogCreate) sqlSave(ctx context.Context) (*OutputLog, error) {
	if err := olc.check(); err != nil {
		return nil, err
	}
	_node, _spec := olc.createSpec()
	if err := sqlgraph.CreateNode(ctx, olc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	olc.mutation.id = &_node.ID
	olc.mutation.done = true
	return _node, nil
}

func (olc *OutputLogCreate) createSpec() (*OutputLog, *sqlgraph.CreateSpec) {
	var (
		_node = &OutputLog{config: olc.config}
		_spec = sqlgraph.NewCreateSpec(outputlog.Table, sqlgraph.NewFieldSpec(outputlog.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = olc.conflict
	if id, ok := olc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := olc.mutation.CreatedBy(); ok {
		_spec.SetField(outputlog.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := olc.mutation.UpdatedBy(); ok {
		_spec.SetField(outputlog.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := olc.mutation.CreatedAt(); ok {
		_spec.SetField(outputlog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := olc.mutation.UpdatedAt(); ok {
		_spec.SetField(outputlog.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := olc.mutation.DeletedAt(); ok {
		_spec.SetField(outputlog.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := olc.mutation.TraceID(); ok {
		_spec.SetField(outputlog.FieldTraceID, field.TypeInt64, value)
		_node.TraceID = value
	}
	if value, ok := olc.mutation.Headers(); ok {
		_spec.SetField(outputlog.FieldHeaders, field.TypeString, value)
		_node.Headers = value
	}
	if value, ok := olc.mutation.Body(); ok {
		_spec.SetField(outputlog.FieldBody, field.TypeString, value)
		_node.Body = value
	}
	if value, ok := olc.mutation.URL(); ok {
		_spec.SetField(outputlog.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := olc.mutation.IP(); ok {
		_spec.SetField(outputlog.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	if value, ok := olc.mutation.Caller(); ok {
		_spec.SetField(outputlog.FieldCaller, field.TypeString, value)
		_node.Caller = value
	}
	if value, ok := olc.mutation.Status(); ok {
		_spec.SetField(outputlog.FieldStatus, field.TypeInt16, value)
		_node.Status = value
	}
	if value, ok := olc.mutation.HmacKey(); ok {
		_spec.SetField(outputlog.FieldHmacKey, field.TypeString, value)
		_node.HmacKey = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OutputLog.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OutputLogUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (olc *OutputLogCreate) OnConflict(opts ...sql.ConflictOption) *OutputLogUpsertOne {
	olc.conflict = opts
	return &OutputLogUpsertOne{
		create: olc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OutputLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (olc *OutputLogCreate) OnConflictColumns(columns ...string) *OutputLogUpsertOne {
	olc.conflict = append(olc.conflict, sql.ConflictColumns(columns...))
	return &OutputLogUpsertOne{
		create: olc,
	}
}

type (
	// OutputLogUpsertOne is the builder for "upsert"-ing
	//  one OutputLog node.
	OutputLogUpsertOne struct {
		create *OutputLogCreate
	}

	// OutputLogUpsert is the "OnConflict" setter.
	OutputLogUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *OutputLogUpsert) SetCreatedBy(v int64) *OutputLogUpsert {
	u.Set(outputlog.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *OutputLogUpsert) UpdateCreatedBy() *OutputLogUpsert {
	u.SetExcluded(outputlog.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *OutputLogUpsert) AddCreatedBy(v int64) *OutputLogUpsert {
	u.Add(outputlog.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *OutputLogUpsert) SetUpdatedBy(v int64) *OutputLogUpsert {
	u.Set(outputlog.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *OutputLogUpsert) UpdateUpdatedBy() *OutputLogUpsert {
	u.SetExcluded(outputlog.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *OutputLogUpsert) AddUpdatedBy(v int64) *OutputLogUpsert {
	u.Add(outputlog.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OutputLogUpsert) SetUpdatedAt(v time.Time) *OutputLogUpsert {
	u.Set(outputlog.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OutputLogUpsert) UpdateUpdatedAt() *OutputLogUpsert {
	u.SetExcluded(outputlog.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OutputLogUpsert) SetDeletedAt(v time.Time) *OutputLogUpsert {
	u.Set(outputlog.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OutputLogUpsert) UpdateDeletedAt() *OutputLogUpsert {
	u.SetExcluded(outputlog.FieldDeletedAt)
	return u
}

// SetHeaders sets the "headers" field.
func (u *OutputLogUpsert) SetHeaders(v string) *OutputLogUpsert {
	u.Set(outputlog.FieldHeaders, v)
	return u
}

// UpdateHeaders sets the "headers" field to the value that was provided on create.
func (u *OutputLogUpsert) UpdateHeaders() *OutputLogUpsert {
	u.SetExcluded(outputlog.FieldHeaders)
	return u
}

// SetBody sets the "body" field.
func (u *OutputLogUpsert) SetBody(v string) *OutputLogUpsert {
	u.Set(outputlog.FieldBody, v)
	return u
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *OutputLogUpsert) UpdateBody() *OutputLogUpsert {
	u.SetExcluded(outputlog.FieldBody)
	return u
}

// ClearBody clears the value of the "body" field.
func (u *OutputLogUpsert) ClearBody() *OutputLogUpsert {
	u.SetNull(outputlog.FieldBody)
	return u
}

// SetURL sets the "url" field.
func (u *OutputLogUpsert) SetURL(v string) *OutputLogUpsert {
	u.Set(outputlog.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *OutputLogUpsert) UpdateURL() *OutputLogUpsert {
	u.SetExcluded(outputlog.FieldURL)
	return u
}

// SetIP sets the "ip" field.
func (u *OutputLogUpsert) SetIP(v string) *OutputLogUpsert {
	u.Set(outputlog.FieldIP, v)
	return u
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *OutputLogUpsert) UpdateIP() *OutputLogUpsert {
	u.SetExcluded(outputlog.FieldIP)
	return u
}

// ClearIP clears the value of the "ip" field.
func (u *OutputLogUpsert) ClearIP() *OutputLogUpsert {
	u.SetNull(outputlog.FieldIP)
	return u
}

// SetCaller sets the "caller" field.
func (u *OutputLogUpsert) SetCaller(v string) *OutputLogUpsert {
	u.Set(outputlog.FieldCaller, v)
	return u
}

// UpdateCaller sets the "caller" field to the value that was provided on create.
func (u *OutputLogUpsert) UpdateCaller() *OutputLogUpsert {
	u.SetExcluded(outputlog.FieldCaller)
	return u
}

// SetStatus sets the "status" field.
func (u *OutputLogUpsert) SetStatus(v int16) *OutputLogUpsert {
	u.Set(outputlog.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OutputLogUpsert) UpdateStatus() *OutputLogUpsert {
	u.SetExcluded(outputlog.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *OutputLogUpsert) AddStatus(v int16) *OutputLogUpsert {
	u.Add(outputlog.FieldStatus, v)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *OutputLogUpsert) ClearStatus() *OutputLogUpsert {
	u.SetNull(outputlog.FieldStatus)
	return u
}

// SetHmacKey sets the "hmac_key" field.
func (u *OutputLogUpsert) SetHmacKey(v string) *OutputLogUpsert {
	u.Set(outputlog.FieldHmacKey, v)
	return u
}

// UpdateHmacKey sets the "hmac_key" field to the value that was provided on create.
func (u *OutputLogUpsert) UpdateHmacKey() *OutputLogUpsert {
	u.SetExcluded(outputlog.FieldHmacKey)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OutputLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(outputlog.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OutputLogUpsertOne) UpdateNewValues() *OutputLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(outputlog.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(outputlog.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.TraceID(); exists {
			s.SetIgnore(outputlog.FieldTraceID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OutputLog.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OutputLogUpsertOne) Ignore() *OutputLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OutputLogUpsertOne) DoNothing() *OutputLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OutputLogCreate.OnConflict
// documentation for more info.
func (u *OutputLogUpsertOne) Update(set func(*OutputLogUpsert)) *OutputLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OutputLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *OutputLogUpsertOne) SetCreatedBy(v int64) *OutputLogUpsertOne {
	return u.Update(func(s *OutputLogUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *OutputLogUpsertOne) AddCreatedBy(v int64) *OutputLogUpsertOne {
	return u.Update(func(s *OutputLogUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *OutputLogUpsertOne) UpdateCreatedBy() *OutputLogUpsertOne {
	return u.Update(func(s *OutputLogUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *OutputLogUpsertOne) SetUpdatedBy(v int64) *OutputLogUpsertOne {
	return u.Update(func(s *OutputLogUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *OutputLogUpsertOne) AddUpdatedBy(v int64) *OutputLogUpsertOne {
	return u.Update(func(s *OutputLogUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *OutputLogUpsertOne) UpdateUpdatedBy() *OutputLogUpsertOne {
	return u.Update(func(s *OutputLogUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OutputLogUpsertOne) SetUpdatedAt(v time.Time) *OutputLogUpsertOne {
	return u.Update(func(s *OutputLogUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OutputLogUpsertOne) UpdateUpdatedAt() *OutputLogUpsertOne {
	return u.Update(func(s *OutputLogUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OutputLogUpsertOne) SetDeletedAt(v time.Time) *OutputLogUpsertOne {
	return u.Update(func(s *OutputLogUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OutputLogUpsertOne) UpdateDeletedAt() *OutputLogUpsertOne {
	return u.Update(func(s *OutputLogUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetHeaders sets the "headers" field.
func (u *OutputLogUpsertOne) SetHeaders(v string) *OutputLogUpsertOne {
	return u.Update(func(s *OutputLogUpsert) {
		s.SetHeaders(v)
	})
}

// UpdateHeaders sets the "headers" field to the value that was provided on create.
func (u *OutputLogUpsertOne) UpdateHeaders() *OutputLogUpsertOne {
	return u.Update(func(s *OutputLogUpsert) {
		s.UpdateHeaders()
	})
}

// SetBody sets the "body" field.
func (u *OutputLogUpsertOne) SetBody(v string) *OutputLogUpsertOne {
	return u.Update(func(s *OutputLogUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *OutputLogUpsertOne) UpdateBody() *OutputLogUpsertOne {
	return u.Update(func(s *OutputLogUpsert) {
		s.UpdateBody()
	})
}

// ClearBody clears the value of the "body" field.
func (u *OutputLogUpsertOne) ClearBody() *OutputLogUpsertOne {
	return u.Update(func(s *OutputLogUpsert) {
		s.ClearBody()
	})
}

// SetURL sets the "url" field.
func (u *OutputLogUpsertOne) SetURL(v string) *OutputLogUpsertOne {
	return u.Update(func(s *OutputLogUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *OutputLogUpsertOne) UpdateURL() *OutputLogUpsertOne {
	return u.Update(func(s *OutputLogUpsert) {
		s.UpdateURL()
	})
}

// SetIP sets the "ip" field.
func (u *OutputLogUpsertOne) SetIP(v string) *OutputLogUpsertOne {
	return u.Update(func(s *OutputLogUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *OutputLogUpsertOne) UpdateIP() *OutputLogUpsertOne {
	return u.Update(func(s *OutputLogUpsert) {
		s.UpdateIP()
	})
}

// ClearIP clears the value of the "ip" field.
func (u *OutputLogUpsertOne) ClearIP() *OutputLogUpsertOne {
	return u.Update(func(s *OutputLogUpsert) {
		s.ClearIP()
	})
}

// SetCaller sets the "caller" field.
func (u *OutputLogUpsertOne) SetCaller(v string) *OutputLogUpsertOne {
	return u.Update(func(s *OutputLogUpsert) {
		s.SetCaller(v)
	})
}

// UpdateCaller sets the "caller" field to the value that was provided on create.
func (u *OutputLogUpsertOne) UpdateCaller() *OutputLogUpsertOne {
	return u.Update(func(s *OutputLogUpsert) {
		s.UpdateCaller()
	})
}

// SetStatus sets the "status" field.
func (u *OutputLogUpsertOne) SetStatus(v int16) *OutputLogUpsertOne {
	return u.Update(func(s *OutputLogUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *OutputLogUpsertOne) AddStatus(v int16) *OutputLogUpsertOne {
	return u.Update(func(s *OutputLogUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OutputLogUpsertOne) UpdateStatus() *OutputLogUpsertOne {
	return u.Update(func(s *OutputLogUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *OutputLogUpsertOne) ClearStatus() *OutputLogUpsertOne {
	return u.Update(func(s *OutputLogUpsert) {
		s.ClearStatus()
	})
}

// SetHmacKey sets the "hmac_key" field.
func (u *OutputLogUpsertOne) SetHmacKey(v string) *OutputLogUpsertOne {
	return u.Update(func(s *OutputLogUpsert) {
		s.SetHmacKey(v)
	})
}

// UpdateHmacKey sets the "hmac_key" field to the value that was provided on create.
func (u *OutputLogUpsertOne) UpdateHmacKey() *OutputLogUpsertOne {
	return u.Update(func(s *OutputLogUpsert) {
		s.UpdateHmacKey()
	})
}

// Exec executes the query.
func (u *OutputLogUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for OutputLogCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OutputLogUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OutputLogUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OutputLogUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OutputLogCreateBulk is the builder for creating many OutputLog entities in bulk.
type OutputLogCreateBulk struct {
	config
	err      error
	builders []*OutputLogCreate
	conflict []sql.ConflictOption
}

// Save creates the OutputLog entities in the database.
func (olcb *OutputLogCreateBulk) Save(ctx context.Context) ([]*OutputLog, error) {
	if olcb.err != nil {
		return nil, olcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(olcb.builders))
	nodes := make([]*OutputLog, len(olcb.builders))
	mutators := make([]Mutator, len(olcb.builders))
	for i := range olcb.builders {
		func(i int, root context.Context) {
			builder := olcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OutputLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, olcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = olcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, olcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, olcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (olcb *OutputLogCreateBulk) SaveX(ctx context.Context) []*OutputLog {
	v, err := olcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (olcb *OutputLogCreateBulk) Exec(ctx context.Context) error {
	_, err := olcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (olcb *OutputLogCreateBulk) ExecX(ctx context.Context) {
	if err := olcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OutputLog.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OutputLogUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (olcb *OutputLogCreateBulk) OnConflict(opts ...sql.ConflictOption) *OutputLogUpsertBulk {
	olcb.conflict = opts
	return &OutputLogUpsertBulk{
		create: olcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OutputLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (olcb *OutputLogCreateBulk) OnConflictColumns(columns ...string) *OutputLogUpsertBulk {
	olcb.conflict = append(olcb.conflict, sql.ConflictColumns(columns...))
	return &OutputLogUpsertBulk{
		create: olcb,
	}
}

// OutputLogUpsertBulk is the builder for "upsert"-ing
// a bulk of OutputLog nodes.
type OutputLogUpsertBulk struct {
	create *OutputLogCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OutputLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(outputlog.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OutputLogUpsertBulk) UpdateNewValues() *OutputLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(outputlog.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(outputlog.FieldCreatedAt)
			}
			if _, exists := b.mutation.TraceID(); exists {
				s.SetIgnore(outputlog.FieldTraceID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OutputLog.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OutputLogUpsertBulk) Ignore() *OutputLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OutputLogUpsertBulk) DoNothing() *OutputLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OutputLogCreateBulk.OnConflict
// documentation for more info.
func (u *OutputLogUpsertBulk) Update(set func(*OutputLogUpsert)) *OutputLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OutputLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *OutputLogUpsertBulk) SetCreatedBy(v int64) *OutputLogUpsertBulk {
	return u.Update(func(s *OutputLogUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *OutputLogUpsertBulk) AddCreatedBy(v int64) *OutputLogUpsertBulk {
	return u.Update(func(s *OutputLogUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *OutputLogUpsertBulk) UpdateCreatedBy() *OutputLogUpsertBulk {
	return u.Update(func(s *OutputLogUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *OutputLogUpsertBulk) SetUpdatedBy(v int64) *OutputLogUpsertBulk {
	return u.Update(func(s *OutputLogUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *OutputLogUpsertBulk) AddUpdatedBy(v int64) *OutputLogUpsertBulk {
	return u.Update(func(s *OutputLogUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *OutputLogUpsertBulk) UpdateUpdatedBy() *OutputLogUpsertBulk {
	return u.Update(func(s *OutputLogUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OutputLogUpsertBulk) SetUpdatedAt(v time.Time) *OutputLogUpsertBulk {
	return u.Update(func(s *OutputLogUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OutputLogUpsertBulk) UpdateUpdatedAt() *OutputLogUpsertBulk {
	return u.Update(func(s *OutputLogUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OutputLogUpsertBulk) SetDeletedAt(v time.Time) *OutputLogUpsertBulk {
	return u.Update(func(s *OutputLogUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OutputLogUpsertBulk) UpdateDeletedAt() *OutputLogUpsertBulk {
	return u.Update(func(s *OutputLogUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetHeaders sets the "headers" field.
func (u *OutputLogUpsertBulk) SetHeaders(v string) *OutputLogUpsertBulk {
	return u.Update(func(s *OutputLogUpsert) {
		s.SetHeaders(v)
	})
}

// UpdateHeaders sets the "headers" field to the value that was provided on create.
func (u *OutputLogUpsertBulk) UpdateHeaders() *OutputLogUpsertBulk {
	return u.Update(func(s *OutputLogUpsert) {
		s.UpdateHeaders()
	})
}

// SetBody sets the "body" field.
func (u *OutputLogUpsertBulk) SetBody(v string) *OutputLogUpsertBulk {
	return u.Update(func(s *OutputLogUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *OutputLogUpsertBulk) UpdateBody() *OutputLogUpsertBulk {
	return u.Update(func(s *OutputLogUpsert) {
		s.UpdateBody()
	})
}

// ClearBody clears the value of the "body" field.
func (u *OutputLogUpsertBulk) ClearBody() *OutputLogUpsertBulk {
	return u.Update(func(s *OutputLogUpsert) {
		s.ClearBody()
	})
}

// SetURL sets the "url" field.
func (u *OutputLogUpsertBulk) SetURL(v string) *OutputLogUpsertBulk {
	return u.Update(func(s *OutputLogUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *OutputLogUpsertBulk) UpdateURL() *OutputLogUpsertBulk {
	return u.Update(func(s *OutputLogUpsert) {
		s.UpdateURL()
	})
}

// SetIP sets the "ip" field.
func (u *OutputLogUpsertBulk) SetIP(v string) *OutputLogUpsertBulk {
	return u.Update(func(s *OutputLogUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *OutputLogUpsertBulk) UpdateIP() *OutputLogUpsertBulk {
	return u.Update(func(s *OutputLogUpsert) {
		s.UpdateIP()
	})
}

// ClearIP clears the value of the "ip" field.
func (u *OutputLogUpsertBulk) ClearIP() *OutputLogUpsertBulk {
	return u.Update(func(s *OutputLogUpsert) {
		s.ClearIP()
	})
}

// SetCaller sets the "caller" field.
func (u *OutputLogUpsertBulk) SetCaller(v string) *OutputLogUpsertBulk {
	return u.Update(func(s *OutputLogUpsert) {
		s.SetCaller(v)
	})
}

// UpdateCaller sets the "caller" field to the value that was provided on create.
func (u *OutputLogUpsertBulk) UpdateCaller() *OutputLogUpsertBulk {
	return u.Update(func(s *OutputLogUpsert) {
		s.UpdateCaller()
	})
}

// SetStatus sets the "status" field.
func (u *OutputLogUpsertBulk) SetStatus(v int16) *OutputLogUpsertBulk {
	return u.Update(func(s *OutputLogUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *OutputLogUpsertBulk) AddStatus(v int16) *OutputLogUpsertBulk {
	return u.Update(func(s *OutputLogUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OutputLogUpsertBulk) UpdateStatus() *OutputLogUpsertBulk {
	return u.Update(func(s *OutputLogUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *OutputLogUpsertBulk) ClearStatus() *OutputLogUpsertBulk {
	return u.Update(func(s *OutputLogUpsert) {
		s.ClearStatus()
	})
}

// SetHmacKey sets the "hmac_key" field.
func (u *OutputLogUpsertBulk) SetHmacKey(v string) *OutputLogUpsertBulk {
	return u.Update(func(s *OutputLogUpsert) {
		s.SetHmacKey(v)
	})
}

// UpdateHmacKey sets the "hmac_key" field to the value that was provided on create.
func (u *OutputLogUpsertBulk) UpdateHmacKey() *OutputLogUpsertBulk {
	return u.Update(func(s *OutputLogUpsert) {
		s.UpdateHmacKey()
	})
}

// Exec executes the query.
func (u *OutputLogUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the OutputLogCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for OutputLogCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OutputLogUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
