// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionloadbalance"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// 任务负载均衡，多个应用自动启动，访问多的时候多启点，访问少的时候减少点
type MissionLoadBalance struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建者 ID
	CreatedBy int64 `json:"created_by,string"`
	// 更新者 ID
	UpdatedBy int64 `json:"updated_by,string"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// 任务类型
	MissionType enums.MissionType `json:"type"`
	// 用户 ID
	UserID int64 `json:"user_id,string"`
	// mission 负载均衡总状态
	State enums.MissionLoadBalanceState `json:"state"`
	// 任务开始时刻
	StartedAt time.Time `json:"started_at"`
	// 任务完成时刻
	FinishedAt time.Time `json:"finished_at"`
	// 任务使用什么显卡在执行
	GpuVersion enums.GpuVersion `json:"gpu_version"`
	// 使用显卡数量
	GpuNum int8 `json:"gpu_num"`
	// 应用数浮动上限
	MaxMissionCount int8 `json:"max_mission_count"`
	// 应用数浮动下限
	MinMissionCount int8 `json:"min_mission_count"`
	// 外键关联任务批次
	MissionBatchID int64 `json:"mission_batch_id,string"`
	// 任务批次号
	MissionBatchNumber string `json:"mission_batch_number"`
	selectValues       sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MissionLoadBalance) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case missionloadbalance.FieldID, missionloadbalance.FieldCreatedBy, missionloadbalance.FieldUpdatedBy, missionloadbalance.FieldUserID, missionloadbalance.FieldGpuNum, missionloadbalance.FieldMaxMissionCount, missionloadbalance.FieldMinMissionCount, missionloadbalance.FieldMissionBatchID:
			values[i] = new(sql.NullInt64)
		case missionloadbalance.FieldMissionType, missionloadbalance.FieldState, missionloadbalance.FieldGpuVersion, missionloadbalance.FieldMissionBatchNumber:
			values[i] = new(sql.NullString)
		case missionloadbalance.FieldCreatedAt, missionloadbalance.FieldUpdatedAt, missionloadbalance.FieldDeletedAt, missionloadbalance.FieldStartedAt, missionloadbalance.FieldFinishedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MissionLoadBalance fields.
func (mlb *MissionLoadBalance) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case missionloadbalance.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mlb.ID = int64(value.Int64)
		case missionloadbalance.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				mlb.CreatedBy = value.Int64
			}
		case missionloadbalance.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				mlb.UpdatedBy = value.Int64
			}
		case missionloadbalance.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mlb.CreatedAt = value.Time
			}
		case missionloadbalance.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mlb.UpdatedAt = value.Time
			}
		case missionloadbalance.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				mlb.DeletedAt = value.Time
			}
		case missionloadbalance.FieldMissionType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mission_type", values[i])
			} else if value.Valid {
				mlb.MissionType = enums.MissionType(value.String)
			}
		case missionloadbalance.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				mlb.UserID = value.Int64
			}
		case missionloadbalance.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				mlb.State = enums.MissionLoadBalanceState(value.String)
			}
		case missionloadbalance.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				mlb.StartedAt = value.Time
			}
		case missionloadbalance.FieldFinishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field finished_at", values[i])
			} else if value.Valid {
				mlb.FinishedAt = value.Time
			}
		case missionloadbalance.FieldGpuVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gpu_version", values[i])
			} else if value.Valid {
				mlb.GpuVersion = enums.GpuVersion(value.String)
			}
		case missionloadbalance.FieldGpuNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gpu_num", values[i])
			} else if value.Valid {
				mlb.GpuNum = int8(value.Int64)
			}
		case missionloadbalance.FieldMaxMissionCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_mission_count", values[i])
			} else if value.Valid {
				mlb.MaxMissionCount = int8(value.Int64)
			}
		case missionloadbalance.FieldMinMissionCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field min_mission_count", values[i])
			} else if value.Valid {
				mlb.MinMissionCount = int8(value.Int64)
			}
		case missionloadbalance.FieldMissionBatchID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mission_batch_id", values[i])
			} else if value.Valid {
				mlb.MissionBatchID = value.Int64
			}
		case missionloadbalance.FieldMissionBatchNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mission_batch_number", values[i])
			} else if value.Valid {
				mlb.MissionBatchNumber = value.String
			}
		default:
			mlb.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MissionLoadBalance.
// This includes values selected through modifiers, order, etc.
func (mlb *MissionLoadBalance) Value(name string) (ent.Value, error) {
	return mlb.selectValues.Get(name)
}

// Update returns a builder for updating this MissionLoadBalance.
// Note that you need to call MissionLoadBalance.Unwrap() before calling this method if this MissionLoadBalance
// was returned from a transaction, and the transaction was committed or rolled back.
func (mlb *MissionLoadBalance) Update() *MissionLoadBalanceUpdateOne {
	return NewMissionLoadBalanceClient(mlb.config).UpdateOne(mlb)
}

// Unwrap unwraps the MissionLoadBalance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mlb *MissionLoadBalance) Unwrap() *MissionLoadBalance {
	_tx, ok := mlb.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: MissionLoadBalance is not a transactional entity")
	}
	mlb.config.driver = _tx.drv
	return mlb
}

// String implements the fmt.Stringer.
func (mlb *MissionLoadBalance) String() string {
	var builder strings.Builder
	builder.WriteString("MissionLoadBalance(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mlb.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", mlb.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", mlb.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(mlb.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(mlb.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(mlb.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("mission_type=")
	builder.WriteString(fmt.Sprintf("%v", mlb.MissionType))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", mlb.UserID))
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", mlb.State))
	builder.WriteString(", ")
	builder.WriteString("started_at=")
	builder.WriteString(mlb.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("finished_at=")
	builder.WriteString(mlb.FinishedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("gpu_version=")
	builder.WriteString(fmt.Sprintf("%v", mlb.GpuVersion))
	builder.WriteString(", ")
	builder.WriteString("gpu_num=")
	builder.WriteString(fmt.Sprintf("%v", mlb.GpuNum))
	builder.WriteString(", ")
	builder.WriteString("max_mission_count=")
	builder.WriteString(fmt.Sprintf("%v", mlb.MaxMissionCount))
	builder.WriteString(", ")
	builder.WriteString("min_mission_count=")
	builder.WriteString(fmt.Sprintf("%v", mlb.MinMissionCount))
	builder.WriteString(", ")
	builder.WriteString("mission_batch_id=")
	builder.WriteString(fmt.Sprintf("%v", mlb.MissionBatchID))
	builder.WriteString(", ")
	builder.WriteString("mission_batch_number=")
	builder.WriteString(mlb.MissionBatchNumber)
	builder.WriteByte(')')
	return builder.String()
}

// MissionLoadBalances is a parsable slice of MissionLoadBalance.
type MissionLoadBalances []*MissionLoadBalance
