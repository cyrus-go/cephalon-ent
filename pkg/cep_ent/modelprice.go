// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/model"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/modelprice"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// ModelPrice is the model entity for the ModelPrice schema.
type ModelPrice struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建者 ID
	CreatedBy int64 `json:"created_by,string"`
	// 更新者 ID
	UpdatedBy int64 `json:"updated_by,string"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// 模型ID
	ModelID int64 `json:"model_id,string"`
	// 调用类型
	InvokeType enums.InvokeType `json:"invoke_type"`
	// GPU 版本
	GpuVersion enums.GpuVersion `json:"gpu_version"`
	// 输入算力价格
	InputGpuPrice int `json:"input_gpu_price"`
	// 输出算力价格
	OutputGpuPrice int `json:"output_gpu_price"`
	// 输入模型使用价格
	InputModelPrice int `json:"input_model_price"`
	// 输出模型使用价格
	OutputModelPrice int `json:"output_model_price"`
	// 上面cep价格对应的token数量
	TokenPerCep int64 `json:"token_per_cep"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ModelPriceQuery when eager-loading is set.
	Edges        ModelPriceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ModelPriceEdges holds the relations/edges for other nodes in the graph.
type ModelPriceEdges struct {
	// Model holds the value of the model edge.
	Model *Model `json:"model,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ModelOrErr returns the Model value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ModelPriceEdges) ModelOrErr() (*Model, error) {
	if e.loadedTypes[0] {
		if e.Model == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: model.Label}
		}
		return e.Model, nil
	}
	return nil, &NotLoadedError{edge: "model"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ModelPrice) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case modelprice.FieldID, modelprice.FieldCreatedBy, modelprice.FieldUpdatedBy, modelprice.FieldModelID, modelprice.FieldInputGpuPrice, modelprice.FieldOutputGpuPrice, modelprice.FieldInputModelPrice, modelprice.FieldOutputModelPrice, modelprice.FieldTokenPerCep:
			values[i] = new(sql.NullInt64)
		case modelprice.FieldInvokeType, modelprice.FieldGpuVersion:
			values[i] = new(sql.NullString)
		case modelprice.FieldCreatedAt, modelprice.FieldUpdatedAt, modelprice.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ModelPrice fields.
func (mp *ModelPrice) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case modelprice.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mp.ID = int64(value.Int64)
		case modelprice.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				mp.CreatedBy = value.Int64
			}
		case modelprice.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				mp.UpdatedBy = value.Int64
			}
		case modelprice.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mp.CreatedAt = value.Time
			}
		case modelprice.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mp.UpdatedAt = value.Time
			}
		case modelprice.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				mp.DeletedAt = value.Time
			}
		case modelprice.FieldModelID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field model_id", values[i])
			} else if value.Valid {
				mp.ModelID = value.Int64
			}
		case modelprice.FieldInvokeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoke_type", values[i])
			} else if value.Valid {
				mp.InvokeType = enums.InvokeType(value.String)
			}
		case modelprice.FieldGpuVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gpu_version", values[i])
			} else if value.Valid {
				mp.GpuVersion = enums.GpuVersion(value.String)
			}
		case modelprice.FieldInputGpuPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field input_gpu_price", values[i])
			} else if value.Valid {
				mp.InputGpuPrice = int(value.Int64)
			}
		case modelprice.FieldOutputGpuPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field output_gpu_price", values[i])
			} else if value.Valid {
				mp.OutputGpuPrice = int(value.Int64)
			}
		case modelprice.FieldInputModelPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field input_model_price", values[i])
			} else if value.Valid {
				mp.InputModelPrice = int(value.Int64)
			}
		case modelprice.FieldOutputModelPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field output_model_price", values[i])
			} else if value.Valid {
				mp.OutputModelPrice = int(value.Int64)
			}
		case modelprice.FieldTokenPerCep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field token_per_cep", values[i])
			} else if value.Valid {
				mp.TokenPerCep = value.Int64
			}
		default:
			mp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ModelPrice.
// This includes values selected through modifiers, order, etc.
func (mp *ModelPrice) Value(name string) (ent.Value, error) {
	return mp.selectValues.Get(name)
}

// QueryModel queries the "model" edge of the ModelPrice entity.
func (mp *ModelPrice) QueryModel() *ModelQuery {
	return NewModelPriceClient(mp.config).QueryModel(mp)
}

// Update returns a builder for updating this ModelPrice.
// Note that you need to call ModelPrice.Unwrap() before calling this method if this ModelPrice
// was returned from a transaction, and the transaction was committed or rolled back.
func (mp *ModelPrice) Update() *ModelPriceUpdateOne {
	return NewModelPriceClient(mp.config).UpdateOne(mp)
}

// Unwrap unwraps the ModelPrice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mp *ModelPrice) Unwrap() *ModelPrice {
	_tx, ok := mp.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: ModelPrice is not a transactional entity")
	}
	mp.config.driver = _tx.drv
	return mp
}

// String implements the fmt.Stringer.
func (mp *ModelPrice) String() string {
	var builder strings.Builder
	builder.WriteString("ModelPrice(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mp.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", mp.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", mp.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(mp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(mp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(mp.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("model_id=")
	builder.WriteString(fmt.Sprintf("%v", mp.ModelID))
	builder.WriteString(", ")
	builder.WriteString("invoke_type=")
	builder.WriteString(fmt.Sprintf("%v", mp.InvokeType))
	builder.WriteString(", ")
	builder.WriteString("gpu_version=")
	builder.WriteString(fmt.Sprintf("%v", mp.GpuVersion))
	builder.WriteString(", ")
	builder.WriteString("input_gpu_price=")
	builder.WriteString(fmt.Sprintf("%v", mp.InputGpuPrice))
	builder.WriteString(", ")
	builder.WriteString("output_gpu_price=")
	builder.WriteString(fmt.Sprintf("%v", mp.OutputGpuPrice))
	builder.WriteString(", ")
	builder.WriteString("input_model_price=")
	builder.WriteString(fmt.Sprintf("%v", mp.InputModelPrice))
	builder.WriteString(", ")
	builder.WriteString("output_model_price=")
	builder.WriteString(fmt.Sprintf("%v", mp.OutputModelPrice))
	builder.WriteString(", ")
	builder.WriteString("token_per_cep=")
	builder.WriteString(fmt.Sprintf("%v", mp.TokenPerCep))
	builder.WriteByte(')')
	return builder.String()
}

// ModelPrices is a parsable slice of ModelPrice.
type ModelPrices []*ModelPrice
