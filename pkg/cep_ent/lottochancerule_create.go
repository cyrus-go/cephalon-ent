// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lotto"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottochancerule"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// LottoChanceRuleCreate is the builder for creating a LottoChanceRule entity.
type LottoChanceRuleCreate struct {
	config
	mutation *LottoChanceRuleMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (lcrc *LottoChanceRuleCreate) SetCreatedBy(i int64) *LottoChanceRuleCreate {
	lcrc.mutation.SetCreatedBy(i)
	return lcrc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (lcrc *LottoChanceRuleCreate) SetNillableCreatedBy(i *int64) *LottoChanceRuleCreate {
	if i != nil {
		lcrc.SetCreatedBy(*i)
	}
	return lcrc
}

// SetUpdatedBy sets the "updated_by" field.
func (lcrc *LottoChanceRuleCreate) SetUpdatedBy(i int64) *LottoChanceRuleCreate {
	lcrc.mutation.SetUpdatedBy(i)
	return lcrc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (lcrc *LottoChanceRuleCreate) SetNillableUpdatedBy(i *int64) *LottoChanceRuleCreate {
	if i != nil {
		lcrc.SetUpdatedBy(*i)
	}
	return lcrc
}

// SetCreatedAt sets the "created_at" field.
func (lcrc *LottoChanceRuleCreate) SetCreatedAt(t time.Time) *LottoChanceRuleCreate {
	lcrc.mutation.SetCreatedAt(t)
	return lcrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lcrc *LottoChanceRuleCreate) SetNillableCreatedAt(t *time.Time) *LottoChanceRuleCreate {
	if t != nil {
		lcrc.SetCreatedAt(*t)
	}
	return lcrc
}

// SetUpdatedAt sets the "updated_at" field.
func (lcrc *LottoChanceRuleCreate) SetUpdatedAt(t time.Time) *LottoChanceRuleCreate {
	lcrc.mutation.SetUpdatedAt(t)
	return lcrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lcrc *LottoChanceRuleCreate) SetNillableUpdatedAt(t *time.Time) *LottoChanceRuleCreate {
	if t != nil {
		lcrc.SetUpdatedAt(*t)
	}
	return lcrc
}

// SetDeletedAt sets the "deleted_at" field.
func (lcrc *LottoChanceRuleCreate) SetDeletedAt(t time.Time) *LottoChanceRuleCreate {
	lcrc.mutation.SetDeletedAt(t)
	return lcrc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lcrc *LottoChanceRuleCreate) SetNillableDeletedAt(t *time.Time) *LottoChanceRuleCreate {
	if t != nil {
		lcrc.SetDeletedAt(*t)
	}
	return lcrc
}

// SetLottoID sets the "lotto_id" field.
func (lcrc *LottoChanceRuleCreate) SetLottoID(i int64) *LottoChanceRuleCreate {
	lcrc.mutation.SetLottoID(i)
	return lcrc
}

// SetNillableLottoID sets the "lotto_id" field if the given value is not nil.
func (lcrc *LottoChanceRuleCreate) SetNillableLottoID(i *int64) *LottoChanceRuleCreate {
	if i != nil {
		lcrc.SetLottoID(*i)
	}
	return lcrc
}

// SetCondition sets the "condition" field.
func (lcrc *LottoChanceRuleCreate) SetCondition(ec enums.LottoCondition) *LottoChanceRuleCreate {
	lcrc.mutation.SetCondition(ec)
	return lcrc
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (lcrc *LottoChanceRuleCreate) SetNillableCondition(ec *enums.LottoCondition) *LottoChanceRuleCreate {
	if ec != nil {
		lcrc.SetCondition(*ec)
	}
	return lcrc
}

// SetAwardCount sets the "award_count" field.
func (lcrc *LottoChanceRuleCreate) SetAwardCount(i int64) *LottoChanceRuleCreate {
	lcrc.mutation.SetAwardCount(i)
	return lcrc
}

// SetNillableAwardCount sets the "award_count" field if the given value is not nil.
func (lcrc *LottoChanceRuleCreate) SetNillableAwardCount(i *int64) *LottoChanceRuleCreate {
	if i != nil {
		lcrc.SetAwardCount(*i)
	}
	return lcrc
}

// SetRechargeAmount sets the "recharge_amount" field.
func (lcrc *LottoChanceRuleCreate) SetRechargeAmount(i int64) *LottoChanceRuleCreate {
	lcrc.mutation.SetRechargeAmount(i)
	return lcrc
}

// SetNillableRechargeAmount sets the "recharge_amount" field if the given value is not nil.
func (lcrc *LottoChanceRuleCreate) SetNillableRechargeAmount(i *int64) *LottoChanceRuleCreate {
	if i != nil {
		lcrc.SetRechargeAmount(*i)
	}
	return lcrc
}

// SetID sets the "id" field.
func (lcrc *LottoChanceRuleCreate) SetID(i int64) *LottoChanceRuleCreate {
	lcrc.mutation.SetID(i)
	return lcrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lcrc *LottoChanceRuleCreate) SetNillableID(i *int64) *LottoChanceRuleCreate {
	if i != nil {
		lcrc.SetID(*i)
	}
	return lcrc
}

// SetLotto sets the "lotto" edge to the Lotto entity.
func (lcrc *LottoChanceRuleCreate) SetLotto(l *Lotto) *LottoChanceRuleCreate {
	return lcrc.SetLottoID(l.ID)
}

// Mutation returns the LottoChanceRuleMutation object of the builder.
func (lcrc *LottoChanceRuleCreate) Mutation() *LottoChanceRuleMutation {
	return lcrc.mutation
}

// Save creates the LottoChanceRule in the database.
func (lcrc *LottoChanceRuleCreate) Save(ctx context.Context) (*LottoChanceRule, error) {
	lcrc.defaults()
	return withHooks(ctx, lcrc.sqlSave, lcrc.mutation, lcrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lcrc *LottoChanceRuleCreate) SaveX(ctx context.Context) *LottoChanceRule {
	v, err := lcrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcrc *LottoChanceRuleCreate) Exec(ctx context.Context) error {
	_, err := lcrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcrc *LottoChanceRuleCreate) ExecX(ctx context.Context) {
	if err := lcrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lcrc *LottoChanceRuleCreate) defaults() {
	if _, ok := lcrc.mutation.CreatedBy(); !ok {
		v := lottochancerule.DefaultCreatedBy
		lcrc.mutation.SetCreatedBy(v)
	}
	if _, ok := lcrc.mutation.UpdatedBy(); !ok {
		v := lottochancerule.DefaultUpdatedBy
		lcrc.mutation.SetUpdatedBy(v)
	}
	if _, ok := lcrc.mutation.CreatedAt(); !ok {
		v := lottochancerule.DefaultCreatedAt()
		lcrc.mutation.SetCreatedAt(v)
	}
	if _, ok := lcrc.mutation.UpdatedAt(); !ok {
		v := lottochancerule.DefaultUpdatedAt()
		lcrc.mutation.SetUpdatedAt(v)
	}
	if _, ok := lcrc.mutation.DeletedAt(); !ok {
		v := lottochancerule.DefaultDeletedAt
		lcrc.mutation.SetDeletedAt(v)
	}
	if _, ok := lcrc.mutation.LottoID(); !ok {
		v := lottochancerule.DefaultLottoID
		lcrc.mutation.SetLottoID(v)
	}
	if _, ok := lcrc.mutation.Condition(); !ok {
		v := lottochancerule.DefaultCondition
		lcrc.mutation.SetCondition(v)
	}
	if _, ok := lcrc.mutation.AwardCount(); !ok {
		v := lottochancerule.DefaultAwardCount
		lcrc.mutation.SetAwardCount(v)
	}
	if _, ok := lcrc.mutation.RechargeAmount(); !ok {
		v := lottochancerule.DefaultRechargeAmount
		lcrc.mutation.SetRechargeAmount(v)
	}
	if _, ok := lcrc.mutation.ID(); !ok {
		v := lottochancerule.DefaultID()
		lcrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lcrc *LottoChanceRuleCreate) check() error {
	if _, ok := lcrc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "LottoChanceRule.created_by"`)}
	}
	if _, ok := lcrc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "LottoChanceRule.updated_by"`)}
	}
	if _, ok := lcrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "LottoChanceRule.created_at"`)}
	}
	if _, ok := lcrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "LottoChanceRule.updated_at"`)}
	}
	if _, ok := lcrc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "LottoChanceRule.deleted_at"`)}
	}
	if _, ok := lcrc.mutation.LottoID(); !ok {
		return &ValidationError{Name: "lotto_id", err: errors.New(`cep_ent: missing required field "LottoChanceRule.lotto_id"`)}
	}
	if _, ok := lcrc.mutation.Condition(); !ok {
		return &ValidationError{Name: "condition", err: errors.New(`cep_ent: missing required field "LottoChanceRule.condition"`)}
	}
	if v, ok := lcrc.mutation.Condition(); ok {
		if err := lottochancerule.ConditionValidator(v); err != nil {
			return &ValidationError{Name: "condition", err: fmt.Errorf(`cep_ent: validator failed for field "LottoChanceRule.condition": %w`, err)}
		}
	}
	if _, ok := lcrc.mutation.AwardCount(); !ok {
		return &ValidationError{Name: "award_count", err: errors.New(`cep_ent: missing required field "LottoChanceRule.award_count"`)}
	}
	if _, ok := lcrc.mutation.RechargeAmount(); !ok {
		return &ValidationError{Name: "recharge_amount", err: errors.New(`cep_ent: missing required field "LottoChanceRule.recharge_amount"`)}
	}
	if _, ok := lcrc.mutation.LottoID(); !ok {
		return &ValidationError{Name: "lotto", err: errors.New(`cep_ent: missing required edge "LottoChanceRule.lotto"`)}
	}
	return nil
}

func (lcrc *LottoChanceRuleCreate) sqlSave(ctx context.Context) (*LottoChanceRule, error) {
	if err := lcrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lcrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lcrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	lcrc.mutation.id = &_node.ID
	lcrc.mutation.done = true
	return _node, nil
}

func (lcrc *LottoChanceRuleCreate) createSpec() (*LottoChanceRule, *sqlgraph.CreateSpec) {
	var (
		_node = &LottoChanceRule{config: lcrc.config}
		_spec = sqlgraph.NewCreateSpec(lottochancerule.Table, sqlgraph.NewFieldSpec(lottochancerule.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = lcrc.conflict
	if id, ok := lcrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lcrc.mutation.CreatedBy(); ok {
		_spec.SetField(lottochancerule.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := lcrc.mutation.UpdatedBy(); ok {
		_spec.SetField(lottochancerule.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := lcrc.mutation.CreatedAt(); ok {
		_spec.SetField(lottochancerule.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lcrc.mutation.UpdatedAt(); ok {
		_spec.SetField(lottochancerule.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := lcrc.mutation.DeletedAt(); ok {
		_spec.SetField(lottochancerule.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := lcrc.mutation.Condition(); ok {
		_spec.SetField(lottochancerule.FieldCondition, field.TypeEnum, value)
		_node.Condition = value
	}
	if value, ok := lcrc.mutation.AwardCount(); ok {
		_spec.SetField(lottochancerule.FieldAwardCount, field.TypeInt64, value)
		_node.AwardCount = value
	}
	if value, ok := lcrc.mutation.RechargeAmount(); ok {
		_spec.SetField(lottochancerule.FieldRechargeAmount, field.TypeInt64, value)
		_node.RechargeAmount = value
	}
	if nodes := lcrc.mutation.LottoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottochancerule.LottoTable,
			Columns: []string{lottochancerule.LottoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lotto.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LottoID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LottoChanceRule.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LottoChanceRuleUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (lcrc *LottoChanceRuleCreate) OnConflict(opts ...sql.ConflictOption) *LottoChanceRuleUpsertOne {
	lcrc.conflict = opts
	return &LottoChanceRuleUpsertOne{
		create: lcrc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LottoChanceRule.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lcrc *LottoChanceRuleCreate) OnConflictColumns(columns ...string) *LottoChanceRuleUpsertOne {
	lcrc.conflict = append(lcrc.conflict, sql.ConflictColumns(columns...))
	return &LottoChanceRuleUpsertOne{
		create: lcrc,
	}
}

type (
	// LottoChanceRuleUpsertOne is the builder for "upsert"-ing
	//  one LottoChanceRule node.
	LottoChanceRuleUpsertOne struct {
		create *LottoChanceRuleCreate
	}

	// LottoChanceRuleUpsert is the "OnConflict" setter.
	LottoChanceRuleUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *LottoChanceRuleUpsert) SetCreatedBy(v int64) *LottoChanceRuleUpsert {
	u.Set(lottochancerule.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *LottoChanceRuleUpsert) UpdateCreatedBy() *LottoChanceRuleUpsert {
	u.SetExcluded(lottochancerule.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *LottoChanceRuleUpsert) AddCreatedBy(v int64) *LottoChanceRuleUpsert {
	u.Add(lottochancerule.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *LottoChanceRuleUpsert) SetUpdatedBy(v int64) *LottoChanceRuleUpsert {
	u.Set(lottochancerule.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *LottoChanceRuleUpsert) UpdateUpdatedBy() *LottoChanceRuleUpsert {
	u.SetExcluded(lottochancerule.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *LottoChanceRuleUpsert) AddUpdatedBy(v int64) *LottoChanceRuleUpsert {
	u.Add(lottochancerule.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LottoChanceRuleUpsert) SetUpdatedAt(v time.Time) *LottoChanceRuleUpsert {
	u.Set(lottochancerule.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LottoChanceRuleUpsert) UpdateUpdatedAt() *LottoChanceRuleUpsert {
	u.SetExcluded(lottochancerule.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LottoChanceRuleUpsert) SetDeletedAt(v time.Time) *LottoChanceRuleUpsert {
	u.Set(lottochancerule.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LottoChanceRuleUpsert) UpdateDeletedAt() *LottoChanceRuleUpsert {
	u.SetExcluded(lottochancerule.FieldDeletedAt)
	return u
}

// SetLottoID sets the "lotto_id" field.
func (u *LottoChanceRuleUpsert) SetLottoID(v int64) *LottoChanceRuleUpsert {
	u.Set(lottochancerule.FieldLottoID, v)
	return u
}

// UpdateLottoID sets the "lotto_id" field to the value that was provided on create.
func (u *LottoChanceRuleUpsert) UpdateLottoID() *LottoChanceRuleUpsert {
	u.SetExcluded(lottochancerule.FieldLottoID)
	return u
}

// SetCondition sets the "condition" field.
func (u *LottoChanceRuleUpsert) SetCondition(v enums.LottoCondition) *LottoChanceRuleUpsert {
	u.Set(lottochancerule.FieldCondition, v)
	return u
}

// UpdateCondition sets the "condition" field to the value that was provided on create.
func (u *LottoChanceRuleUpsert) UpdateCondition() *LottoChanceRuleUpsert {
	u.SetExcluded(lottochancerule.FieldCondition)
	return u
}

// SetAwardCount sets the "award_count" field.
func (u *LottoChanceRuleUpsert) SetAwardCount(v int64) *LottoChanceRuleUpsert {
	u.Set(lottochancerule.FieldAwardCount, v)
	return u
}

// UpdateAwardCount sets the "award_count" field to the value that was provided on create.
func (u *LottoChanceRuleUpsert) UpdateAwardCount() *LottoChanceRuleUpsert {
	u.SetExcluded(lottochancerule.FieldAwardCount)
	return u
}

// AddAwardCount adds v to the "award_count" field.
func (u *LottoChanceRuleUpsert) AddAwardCount(v int64) *LottoChanceRuleUpsert {
	u.Add(lottochancerule.FieldAwardCount, v)
	return u
}

// SetRechargeAmount sets the "recharge_amount" field.
func (u *LottoChanceRuleUpsert) SetRechargeAmount(v int64) *LottoChanceRuleUpsert {
	u.Set(lottochancerule.FieldRechargeAmount, v)
	return u
}

// UpdateRechargeAmount sets the "recharge_amount" field to the value that was provided on create.
func (u *LottoChanceRuleUpsert) UpdateRechargeAmount() *LottoChanceRuleUpsert {
	u.SetExcluded(lottochancerule.FieldRechargeAmount)
	return u
}

// AddRechargeAmount adds v to the "recharge_amount" field.
func (u *LottoChanceRuleUpsert) AddRechargeAmount(v int64) *LottoChanceRuleUpsert {
	u.Add(lottochancerule.FieldRechargeAmount, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.LottoChanceRule.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(lottochancerule.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LottoChanceRuleUpsertOne) UpdateNewValues() *LottoChanceRuleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(lottochancerule.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(lottochancerule.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LottoChanceRule.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LottoChanceRuleUpsertOne) Ignore() *LottoChanceRuleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LottoChanceRuleUpsertOne) DoNothing() *LottoChanceRuleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LottoChanceRuleCreate.OnConflict
// documentation for more info.
func (u *LottoChanceRuleUpsertOne) Update(set func(*LottoChanceRuleUpsert)) *LottoChanceRuleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LottoChanceRuleUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *LottoChanceRuleUpsertOne) SetCreatedBy(v int64) *LottoChanceRuleUpsertOne {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *LottoChanceRuleUpsertOne) AddCreatedBy(v int64) *LottoChanceRuleUpsertOne {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *LottoChanceRuleUpsertOne) UpdateCreatedBy() *LottoChanceRuleUpsertOne {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *LottoChanceRuleUpsertOne) SetUpdatedBy(v int64) *LottoChanceRuleUpsertOne {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *LottoChanceRuleUpsertOne) AddUpdatedBy(v int64) *LottoChanceRuleUpsertOne {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *LottoChanceRuleUpsertOne) UpdateUpdatedBy() *LottoChanceRuleUpsertOne {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LottoChanceRuleUpsertOne) SetUpdatedAt(v time.Time) *LottoChanceRuleUpsertOne {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LottoChanceRuleUpsertOne) UpdateUpdatedAt() *LottoChanceRuleUpsertOne {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LottoChanceRuleUpsertOne) SetDeletedAt(v time.Time) *LottoChanceRuleUpsertOne {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LottoChanceRuleUpsertOne) UpdateDeletedAt() *LottoChanceRuleUpsertOne {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetLottoID sets the "lotto_id" field.
func (u *LottoChanceRuleUpsertOne) SetLottoID(v int64) *LottoChanceRuleUpsertOne {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.SetLottoID(v)
	})
}

// UpdateLottoID sets the "lotto_id" field to the value that was provided on create.
func (u *LottoChanceRuleUpsertOne) UpdateLottoID() *LottoChanceRuleUpsertOne {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.UpdateLottoID()
	})
}

// SetCondition sets the "condition" field.
func (u *LottoChanceRuleUpsertOne) SetCondition(v enums.LottoCondition) *LottoChanceRuleUpsertOne {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.SetCondition(v)
	})
}

// UpdateCondition sets the "condition" field to the value that was provided on create.
func (u *LottoChanceRuleUpsertOne) UpdateCondition() *LottoChanceRuleUpsertOne {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.UpdateCondition()
	})
}

// SetAwardCount sets the "award_count" field.
func (u *LottoChanceRuleUpsertOne) SetAwardCount(v int64) *LottoChanceRuleUpsertOne {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.SetAwardCount(v)
	})
}

// AddAwardCount adds v to the "award_count" field.
func (u *LottoChanceRuleUpsertOne) AddAwardCount(v int64) *LottoChanceRuleUpsertOne {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.AddAwardCount(v)
	})
}

// UpdateAwardCount sets the "award_count" field to the value that was provided on create.
func (u *LottoChanceRuleUpsertOne) UpdateAwardCount() *LottoChanceRuleUpsertOne {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.UpdateAwardCount()
	})
}

// SetRechargeAmount sets the "recharge_amount" field.
func (u *LottoChanceRuleUpsertOne) SetRechargeAmount(v int64) *LottoChanceRuleUpsertOne {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.SetRechargeAmount(v)
	})
}

// AddRechargeAmount adds v to the "recharge_amount" field.
func (u *LottoChanceRuleUpsertOne) AddRechargeAmount(v int64) *LottoChanceRuleUpsertOne {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.AddRechargeAmount(v)
	})
}

// UpdateRechargeAmount sets the "recharge_amount" field to the value that was provided on create.
func (u *LottoChanceRuleUpsertOne) UpdateRechargeAmount() *LottoChanceRuleUpsertOne {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.UpdateRechargeAmount()
	})
}

// Exec executes the query.
func (u *LottoChanceRuleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for LottoChanceRuleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LottoChanceRuleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LottoChanceRuleUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LottoChanceRuleUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LottoChanceRuleCreateBulk is the builder for creating many LottoChanceRule entities in bulk.
type LottoChanceRuleCreateBulk struct {
	config
	err      error
	builders []*LottoChanceRuleCreate
	conflict []sql.ConflictOption
}

// Save creates the LottoChanceRule entities in the database.
func (lcrcb *LottoChanceRuleCreateBulk) Save(ctx context.Context) ([]*LottoChanceRule, error) {
	if lcrcb.err != nil {
		return nil, lcrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lcrcb.builders))
	nodes := make([]*LottoChanceRule, len(lcrcb.builders))
	mutators := make([]Mutator, len(lcrcb.builders))
	for i := range lcrcb.builders {
		func(i int, root context.Context) {
			builder := lcrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LottoChanceRuleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lcrcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcrcb *LottoChanceRuleCreateBulk) SaveX(ctx context.Context) []*LottoChanceRule {
	v, err := lcrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcrcb *LottoChanceRuleCreateBulk) Exec(ctx context.Context) error {
	_, err := lcrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcrcb *LottoChanceRuleCreateBulk) ExecX(ctx context.Context) {
	if err := lcrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LottoChanceRule.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LottoChanceRuleUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (lcrcb *LottoChanceRuleCreateBulk) OnConflict(opts ...sql.ConflictOption) *LottoChanceRuleUpsertBulk {
	lcrcb.conflict = opts
	return &LottoChanceRuleUpsertBulk{
		create: lcrcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LottoChanceRule.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lcrcb *LottoChanceRuleCreateBulk) OnConflictColumns(columns ...string) *LottoChanceRuleUpsertBulk {
	lcrcb.conflict = append(lcrcb.conflict, sql.ConflictColumns(columns...))
	return &LottoChanceRuleUpsertBulk{
		create: lcrcb,
	}
}

// LottoChanceRuleUpsertBulk is the builder for "upsert"-ing
// a bulk of LottoChanceRule nodes.
type LottoChanceRuleUpsertBulk struct {
	create *LottoChanceRuleCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.LottoChanceRule.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(lottochancerule.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LottoChanceRuleUpsertBulk) UpdateNewValues() *LottoChanceRuleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(lottochancerule.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(lottochancerule.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LottoChanceRule.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LottoChanceRuleUpsertBulk) Ignore() *LottoChanceRuleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LottoChanceRuleUpsertBulk) DoNothing() *LottoChanceRuleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LottoChanceRuleCreateBulk.OnConflict
// documentation for more info.
func (u *LottoChanceRuleUpsertBulk) Update(set func(*LottoChanceRuleUpsert)) *LottoChanceRuleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LottoChanceRuleUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *LottoChanceRuleUpsertBulk) SetCreatedBy(v int64) *LottoChanceRuleUpsertBulk {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *LottoChanceRuleUpsertBulk) AddCreatedBy(v int64) *LottoChanceRuleUpsertBulk {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *LottoChanceRuleUpsertBulk) UpdateCreatedBy() *LottoChanceRuleUpsertBulk {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *LottoChanceRuleUpsertBulk) SetUpdatedBy(v int64) *LottoChanceRuleUpsertBulk {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *LottoChanceRuleUpsertBulk) AddUpdatedBy(v int64) *LottoChanceRuleUpsertBulk {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *LottoChanceRuleUpsertBulk) UpdateUpdatedBy() *LottoChanceRuleUpsertBulk {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LottoChanceRuleUpsertBulk) SetUpdatedAt(v time.Time) *LottoChanceRuleUpsertBulk {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LottoChanceRuleUpsertBulk) UpdateUpdatedAt() *LottoChanceRuleUpsertBulk {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LottoChanceRuleUpsertBulk) SetDeletedAt(v time.Time) *LottoChanceRuleUpsertBulk {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LottoChanceRuleUpsertBulk) UpdateDeletedAt() *LottoChanceRuleUpsertBulk {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetLottoID sets the "lotto_id" field.
func (u *LottoChanceRuleUpsertBulk) SetLottoID(v int64) *LottoChanceRuleUpsertBulk {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.SetLottoID(v)
	})
}

// UpdateLottoID sets the "lotto_id" field to the value that was provided on create.
func (u *LottoChanceRuleUpsertBulk) UpdateLottoID() *LottoChanceRuleUpsertBulk {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.UpdateLottoID()
	})
}

// SetCondition sets the "condition" field.
func (u *LottoChanceRuleUpsertBulk) SetCondition(v enums.LottoCondition) *LottoChanceRuleUpsertBulk {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.SetCondition(v)
	})
}

// UpdateCondition sets the "condition" field to the value that was provided on create.
func (u *LottoChanceRuleUpsertBulk) UpdateCondition() *LottoChanceRuleUpsertBulk {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.UpdateCondition()
	})
}

// SetAwardCount sets the "award_count" field.
func (u *LottoChanceRuleUpsertBulk) SetAwardCount(v int64) *LottoChanceRuleUpsertBulk {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.SetAwardCount(v)
	})
}

// AddAwardCount adds v to the "award_count" field.
func (u *LottoChanceRuleUpsertBulk) AddAwardCount(v int64) *LottoChanceRuleUpsertBulk {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.AddAwardCount(v)
	})
}

// UpdateAwardCount sets the "award_count" field to the value that was provided on create.
func (u *LottoChanceRuleUpsertBulk) UpdateAwardCount() *LottoChanceRuleUpsertBulk {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.UpdateAwardCount()
	})
}

// SetRechargeAmount sets the "recharge_amount" field.
func (u *LottoChanceRuleUpsertBulk) SetRechargeAmount(v int64) *LottoChanceRuleUpsertBulk {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.SetRechargeAmount(v)
	})
}

// AddRechargeAmount adds v to the "recharge_amount" field.
func (u *LottoChanceRuleUpsertBulk) AddRechargeAmount(v int64) *LottoChanceRuleUpsertBulk {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.AddRechargeAmount(v)
	})
}

// UpdateRechargeAmount sets the "recharge_amount" field to the value that was provided on create.
func (u *LottoChanceRuleUpsertBulk) UpdateRechargeAmount() *LottoChanceRuleUpsertBulk {
	return u.Update(func(s *LottoChanceRuleUpsert) {
		s.UpdateRechargeAmount()
	})
}

// Exec executes the query.
func (u *LottoChanceRuleUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the LottoChanceRuleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for LottoChanceRuleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LottoChanceRuleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
