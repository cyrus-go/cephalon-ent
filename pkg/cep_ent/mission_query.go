// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/extraservice"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/extraserviceorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/hmackeypair"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/mission"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionbatch"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionconsumeorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionextraservice"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionkeypair"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionkind"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionproduceorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionproduction"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/renewalagreement"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
)

// MissionQuery is the builder for querying Mission entities.
type MissionQuery struct {
	config
	ctx                      *QueryContext
	order                    []mission.OrderOption
	inters                   []Interceptor
	predicates               []predicate.Mission
	withMissionKind          *MissionKindQuery
	withUser                 *UserQuery
	withKeyPair              *HmacKeyPairQuery
	withMissionBatch         *MissionBatchQuery
	withOldMission           *MissionQuery
	withMissionKeyPairs      *MissionKeyPairQuery
	withMissionConsumeOrder  *MissionConsumeOrderQuery
	withMissionProduceOrders *MissionProduceOrderQuery
	withMissionProductions   *MissionProductionQuery
	withMissionOrders        *MissionOrderQuery
	withRenewalAgreements    *RenewalAgreementQuery
	withMissionExtraServices *MissionExtraServiceQuery
	withExtraServices        *ExtraServiceQuery
	withExtraServiceOrders   *ExtraServiceOrderQuery
	withRebootMissions       *MissionQuery
	withFKs                  bool
	modifiers                []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MissionQuery builder.
func (mq *MissionQuery) Where(ps ...predicate.Mission) *MissionQuery {
	mq.predicates = append(mq.predicates, ps...)
	return mq
}

// Limit the number of records to be returned by this query.
func (mq *MissionQuery) Limit(limit int) *MissionQuery {
	mq.ctx.Limit = &limit
	return mq
}

// Offset to start from.
func (mq *MissionQuery) Offset(offset int) *MissionQuery {
	mq.ctx.Offset = &offset
	return mq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mq *MissionQuery) Unique(unique bool) *MissionQuery {
	mq.ctx.Unique = &unique
	return mq
}

// Order specifies how the records should be ordered.
func (mq *MissionQuery) Order(o ...mission.OrderOption) *MissionQuery {
	mq.order = append(mq.order, o...)
	return mq
}

// QueryMissionKind chains the current query on the "mission_kind" edge.
func (mq *MissionQuery) QueryMissionKind() *MissionKindQuery {
	query := (&MissionKindClient{config: mq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(mission.Table, mission.FieldID, selector),
			sqlgraph.To(missionkind.Table, missionkind.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, mission.MissionKindTable, mission.MissionKindColumn),
		)
		fromU = sqlgraph.SetNeighbors(mq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (mq *MissionQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: mq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(mission.Table, mission.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, mission.UserTable, mission.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(mq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryKeyPair chains the current query on the "key_pair" edge.
func (mq *MissionQuery) QueryKeyPair() *HmacKeyPairQuery {
	query := (&HmacKeyPairClient{config: mq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(mission.Table, mission.FieldID, selector),
			sqlgraph.To(hmackeypair.Table, hmackeypair.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, mission.KeyPairTable, mission.KeyPairColumn),
		)
		fromU = sqlgraph.SetNeighbors(mq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMissionBatch chains the current query on the "mission_batch" edge.
func (mq *MissionQuery) QueryMissionBatch() *MissionBatchQuery {
	query := (&MissionBatchClient{config: mq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(mission.Table, mission.FieldID, selector),
			sqlgraph.To(missionbatch.Table, missionbatch.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, mission.MissionBatchTable, mission.MissionBatchColumn),
		)
		fromU = sqlgraph.SetNeighbors(mq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOldMission chains the current query on the "old_mission" edge.
func (mq *MissionQuery) QueryOldMission() *MissionQuery {
	query := (&MissionClient{config: mq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(mission.Table, mission.FieldID, selector),
			sqlgraph.To(mission.Table, mission.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, mission.OldMissionTable, mission.OldMissionColumn),
		)
		fromU = sqlgraph.SetNeighbors(mq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMissionKeyPairs chains the current query on the "mission_key_pairs" edge.
func (mq *MissionQuery) QueryMissionKeyPairs() *MissionKeyPairQuery {
	query := (&MissionKeyPairClient{config: mq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(mission.Table, mission.FieldID, selector),
			sqlgraph.To(missionkeypair.Table, missionkeypair.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, mission.MissionKeyPairsTable, mission.MissionKeyPairsColumn),
		)
		fromU = sqlgraph.SetNeighbors(mq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMissionConsumeOrder chains the current query on the "mission_consume_order" edge.
func (mq *MissionQuery) QueryMissionConsumeOrder() *MissionConsumeOrderQuery {
	query := (&MissionConsumeOrderClient{config: mq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(mission.Table, mission.FieldID, selector),
			sqlgraph.To(missionconsumeorder.Table, missionconsumeorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, mission.MissionConsumeOrderTable, mission.MissionConsumeOrderColumn),
		)
		fromU = sqlgraph.SetNeighbors(mq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMissionProduceOrders chains the current query on the "mission_produce_orders" edge.
func (mq *MissionQuery) QueryMissionProduceOrders() *MissionProduceOrderQuery {
	query := (&MissionProduceOrderClient{config: mq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(mission.Table, mission.FieldID, selector),
			sqlgraph.To(missionproduceorder.Table, missionproduceorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, mission.MissionProduceOrdersTable, mission.MissionProduceOrdersColumn),
		)
		fromU = sqlgraph.SetNeighbors(mq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMissionProductions chains the current query on the "mission_productions" edge.
func (mq *MissionQuery) QueryMissionProductions() *MissionProductionQuery {
	query := (&MissionProductionClient{config: mq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(mission.Table, mission.FieldID, selector),
			sqlgraph.To(missionproduction.Table, missionproduction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, mission.MissionProductionsTable, mission.MissionProductionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(mq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMissionOrders chains the current query on the "mission_orders" edge.
func (mq *MissionQuery) QueryMissionOrders() *MissionOrderQuery {
	query := (&MissionOrderClient{config: mq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(mission.Table, mission.FieldID, selector),
			sqlgraph.To(missionorder.Table, missionorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, mission.MissionOrdersTable, mission.MissionOrdersColumn),
		)
		fromU = sqlgraph.SetNeighbors(mq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRenewalAgreements chains the current query on the "renewal_agreements" edge.
func (mq *MissionQuery) QueryRenewalAgreements() *RenewalAgreementQuery {
	query := (&RenewalAgreementClient{config: mq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(mission.Table, mission.FieldID, selector),
			sqlgraph.To(renewalagreement.Table, renewalagreement.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, mission.RenewalAgreementsTable, mission.RenewalAgreementsColumn),
		)
		fromU = sqlgraph.SetNeighbors(mq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMissionExtraServices chains the current query on the "mission_extra_services" edge.
func (mq *MissionQuery) QueryMissionExtraServices() *MissionExtraServiceQuery {
	query := (&MissionExtraServiceClient{config: mq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(mission.Table, mission.FieldID, selector),
			sqlgraph.To(missionextraservice.Table, missionextraservice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, mission.MissionExtraServicesTable, mission.MissionExtraServicesColumn),
		)
		fromU = sqlgraph.SetNeighbors(mq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExtraServices chains the current query on the "extra_services" edge.
func (mq *MissionQuery) QueryExtraServices() *ExtraServiceQuery {
	query := (&ExtraServiceClient{config: mq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(mission.Table, mission.FieldID, selector),
			sqlgraph.To(extraservice.Table, extraservice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, mission.ExtraServicesTable, mission.ExtraServicesColumn),
		)
		fromU = sqlgraph.SetNeighbors(mq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExtraServiceOrders chains the current query on the "extra_service_orders" edge.
func (mq *MissionQuery) QueryExtraServiceOrders() *ExtraServiceOrderQuery {
	query := (&ExtraServiceOrderClient{config: mq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(mission.Table, mission.FieldID, selector),
			sqlgraph.To(extraserviceorder.Table, extraserviceorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, mission.ExtraServiceOrdersTable, mission.ExtraServiceOrdersColumn),
		)
		fromU = sqlgraph.SetNeighbors(mq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRebootMissions chains the current query on the "reboot_missions" edge.
func (mq *MissionQuery) QueryRebootMissions() *MissionQuery {
	query := (&MissionClient{config: mq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(mission.Table, mission.FieldID, selector),
			sqlgraph.To(mission.Table, mission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, mission.RebootMissionsTable, mission.RebootMissionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(mq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Mission entity from the query.
// Returns a *NotFoundError when no Mission was found.
func (mq *MissionQuery) First(ctx context.Context) (*Mission, error) {
	nodes, err := mq.Limit(1).All(setContextOp(ctx, mq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{mission.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mq *MissionQuery) FirstX(ctx context.Context) *Mission {
	node, err := mq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Mission ID from the query.
// Returns a *NotFoundError when no Mission ID was found.
func (mq *MissionQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = mq.Limit(1).IDs(setContextOp(ctx, mq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{mission.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mq *MissionQuery) FirstIDX(ctx context.Context) int64 {
	id, err := mq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Mission entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Mission entity is found.
// Returns a *NotFoundError when no Mission entities are found.
func (mq *MissionQuery) Only(ctx context.Context) (*Mission, error) {
	nodes, err := mq.Limit(2).All(setContextOp(ctx, mq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{mission.Label}
	default:
		return nil, &NotSingularError{mission.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mq *MissionQuery) OnlyX(ctx context.Context) *Mission {
	node, err := mq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Mission ID in the query.
// Returns a *NotSingularError when more than one Mission ID is found.
// Returns a *NotFoundError when no entities are found.
func (mq *MissionQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = mq.Limit(2).IDs(setContextOp(ctx, mq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{mission.Label}
	default:
		err = &NotSingularError{mission.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mq *MissionQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := mq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Missions.
func (mq *MissionQuery) All(ctx context.Context) ([]*Mission, error) {
	ctx = setContextOp(ctx, mq.ctx, "All")
	if err := mq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Mission, *MissionQuery]()
	return withInterceptors[[]*Mission](ctx, mq, qr, mq.inters)
}

// AllX is like All, but panics if an error occurs.
func (mq *MissionQuery) AllX(ctx context.Context) []*Mission {
	nodes, err := mq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Mission IDs.
func (mq *MissionQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if mq.ctx.Unique == nil && mq.path != nil {
		mq.Unique(true)
	}
	ctx = setContextOp(ctx, mq.ctx, "IDs")
	if err = mq.Select(mission.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mq *MissionQuery) IDsX(ctx context.Context) []int64 {
	ids, err := mq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mq *MissionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, mq.ctx, "Count")
	if err := mq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, mq, querierCount[*MissionQuery](), mq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (mq *MissionQuery) CountX(ctx context.Context) int {
	count, err := mq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mq *MissionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, mq.ctx, "Exist")
	switch _, err := mq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("cep_ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (mq *MissionQuery) ExistX(ctx context.Context) bool {
	exist, err := mq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MissionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mq *MissionQuery) Clone() *MissionQuery {
	if mq == nil {
		return nil
	}
	return &MissionQuery{
		config:                   mq.config,
		ctx:                      mq.ctx.Clone(),
		order:                    append([]mission.OrderOption{}, mq.order...),
		inters:                   append([]Interceptor{}, mq.inters...),
		predicates:               append([]predicate.Mission{}, mq.predicates...),
		withMissionKind:          mq.withMissionKind.Clone(),
		withUser:                 mq.withUser.Clone(),
		withKeyPair:              mq.withKeyPair.Clone(),
		withMissionBatch:         mq.withMissionBatch.Clone(),
		withOldMission:           mq.withOldMission.Clone(),
		withMissionKeyPairs:      mq.withMissionKeyPairs.Clone(),
		withMissionConsumeOrder:  mq.withMissionConsumeOrder.Clone(),
		withMissionProduceOrders: mq.withMissionProduceOrders.Clone(),
		withMissionProductions:   mq.withMissionProductions.Clone(),
		withMissionOrders:        mq.withMissionOrders.Clone(),
		withRenewalAgreements:    mq.withRenewalAgreements.Clone(),
		withMissionExtraServices: mq.withMissionExtraServices.Clone(),
		withExtraServices:        mq.withExtraServices.Clone(),
		withExtraServiceOrders:   mq.withExtraServiceOrders.Clone(),
		withRebootMissions:       mq.withRebootMissions.Clone(),
		// clone intermediate query.
		sql:  mq.sql.Clone(),
		path: mq.path,
	}
}

// WithMissionKind tells the query-builder to eager-load the nodes that are connected to
// the "mission_kind" edge. The optional arguments are used to configure the query builder of the edge.
func (mq *MissionQuery) WithMissionKind(opts ...func(*MissionKindQuery)) *MissionQuery {
	query := (&MissionKindClient{config: mq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mq.withMissionKind = query
	return mq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (mq *MissionQuery) WithUser(opts ...func(*UserQuery)) *MissionQuery {
	query := (&UserClient{config: mq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mq.withUser = query
	return mq
}

// WithKeyPair tells the query-builder to eager-load the nodes that are connected to
// the "key_pair" edge. The optional arguments are used to configure the query builder of the edge.
func (mq *MissionQuery) WithKeyPair(opts ...func(*HmacKeyPairQuery)) *MissionQuery {
	query := (&HmacKeyPairClient{config: mq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mq.withKeyPair = query
	return mq
}

// WithMissionBatch tells the query-builder to eager-load the nodes that are connected to
// the "mission_batch" edge. The optional arguments are used to configure the query builder of the edge.
func (mq *MissionQuery) WithMissionBatch(opts ...func(*MissionBatchQuery)) *MissionQuery {
	query := (&MissionBatchClient{config: mq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mq.withMissionBatch = query
	return mq
}

// WithOldMission tells the query-builder to eager-load the nodes that are connected to
// the "old_mission" edge. The optional arguments are used to configure the query builder of the edge.
func (mq *MissionQuery) WithOldMission(opts ...func(*MissionQuery)) *MissionQuery {
	query := (&MissionClient{config: mq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mq.withOldMission = query
	return mq
}

// WithMissionKeyPairs tells the query-builder to eager-load the nodes that are connected to
// the "mission_key_pairs" edge. The optional arguments are used to configure the query builder of the edge.
func (mq *MissionQuery) WithMissionKeyPairs(opts ...func(*MissionKeyPairQuery)) *MissionQuery {
	query := (&MissionKeyPairClient{config: mq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mq.withMissionKeyPairs = query
	return mq
}

// WithMissionConsumeOrder tells the query-builder to eager-load the nodes that are connected to
// the "mission_consume_order" edge. The optional arguments are used to configure the query builder of the edge.
func (mq *MissionQuery) WithMissionConsumeOrder(opts ...func(*MissionConsumeOrderQuery)) *MissionQuery {
	query := (&MissionConsumeOrderClient{config: mq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mq.withMissionConsumeOrder = query
	return mq
}

// WithMissionProduceOrders tells the query-builder to eager-load the nodes that are connected to
// the "mission_produce_orders" edge. The optional arguments are used to configure the query builder of the edge.
func (mq *MissionQuery) WithMissionProduceOrders(opts ...func(*MissionProduceOrderQuery)) *MissionQuery {
	query := (&MissionProduceOrderClient{config: mq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mq.withMissionProduceOrders = query
	return mq
}

// WithMissionProductions tells the query-builder to eager-load the nodes that are connected to
// the "mission_productions" edge. The optional arguments are used to configure the query builder of the edge.
func (mq *MissionQuery) WithMissionProductions(opts ...func(*MissionProductionQuery)) *MissionQuery {
	query := (&MissionProductionClient{config: mq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mq.withMissionProductions = query
	return mq
}

// WithMissionOrders tells the query-builder to eager-load the nodes that are connected to
// the "mission_orders" edge. The optional arguments are used to configure the query builder of the edge.
func (mq *MissionQuery) WithMissionOrders(opts ...func(*MissionOrderQuery)) *MissionQuery {
	query := (&MissionOrderClient{config: mq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mq.withMissionOrders = query
	return mq
}

// WithRenewalAgreements tells the query-builder to eager-load the nodes that are connected to
// the "renewal_agreements" edge. The optional arguments are used to configure the query builder of the edge.
func (mq *MissionQuery) WithRenewalAgreements(opts ...func(*RenewalAgreementQuery)) *MissionQuery {
	query := (&RenewalAgreementClient{config: mq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mq.withRenewalAgreements = query
	return mq
}

// WithMissionExtraServices tells the query-builder to eager-load the nodes that are connected to
// the "mission_extra_services" edge. The optional arguments are used to configure the query builder of the edge.
func (mq *MissionQuery) WithMissionExtraServices(opts ...func(*MissionExtraServiceQuery)) *MissionQuery {
	query := (&MissionExtraServiceClient{config: mq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mq.withMissionExtraServices = query
	return mq
}

// WithExtraServices tells the query-builder to eager-load the nodes that are connected to
// the "extra_services" edge. The optional arguments are used to configure the query builder of the edge.
func (mq *MissionQuery) WithExtraServices(opts ...func(*ExtraServiceQuery)) *MissionQuery {
	query := (&ExtraServiceClient{config: mq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mq.withExtraServices = query
	return mq
}

// WithExtraServiceOrders tells the query-builder to eager-load the nodes that are connected to
// the "extra_service_orders" edge. The optional arguments are used to configure the query builder of the edge.
func (mq *MissionQuery) WithExtraServiceOrders(opts ...func(*ExtraServiceOrderQuery)) *MissionQuery {
	query := (&ExtraServiceOrderClient{config: mq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mq.withExtraServiceOrders = query
	return mq
}

// WithRebootMissions tells the query-builder to eager-load the nodes that are connected to
// the "reboot_missions" edge. The optional arguments are used to configure the query builder of the edge.
func (mq *MissionQuery) WithRebootMissions(opts ...func(*MissionQuery)) *MissionQuery {
	query := (&MissionClient{config: mq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mq.withRebootMissions = query
	return mq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by,string"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Mission.Query().
//		GroupBy(mission.FieldCreatedBy).
//		Aggregate(cep_ent.Count()).
//		Scan(ctx, &v)
func (mq *MissionQuery) GroupBy(field string, fields ...string) *MissionGroupBy {
	mq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &MissionGroupBy{build: mq}
	grbuild.flds = &mq.ctx.Fields
	grbuild.label = mission.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by,string"`
//	}
//
//	client.Mission.Query().
//		Select(mission.FieldCreatedBy).
//		Scan(ctx, &v)
func (mq *MissionQuery) Select(fields ...string) *MissionSelect {
	mq.ctx.Fields = append(mq.ctx.Fields, fields...)
	sbuild := &MissionSelect{MissionQuery: mq}
	sbuild.label = mission.Label
	sbuild.flds, sbuild.scan = &mq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a MissionSelect configured with the given aggregations.
func (mq *MissionQuery) Aggregate(fns ...AggregateFunc) *MissionSelect {
	return mq.Select().Aggregate(fns...)
}

func (mq *MissionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range mq.inters {
		if inter == nil {
			return fmt.Errorf("cep_ent: uninitialized interceptor (forgotten import cep_ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, mq); err != nil {
				return err
			}
		}
	}
	for _, f := range mq.ctx.Fields {
		if !mission.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
		}
	}
	if mq.path != nil {
		prev, err := mq.path(ctx)
		if err != nil {
			return err
		}
		mq.sql = prev
	}
	return nil
}

func (mq *MissionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Mission, error) {
	var (
		nodes       = []*Mission{}
		withFKs     = mq.withFKs
		_spec       = mq.querySpec()
		loadedTypes = [15]bool{
			mq.withMissionKind != nil,
			mq.withUser != nil,
			mq.withKeyPair != nil,
			mq.withMissionBatch != nil,
			mq.withOldMission != nil,
			mq.withMissionKeyPairs != nil,
			mq.withMissionConsumeOrder != nil,
			mq.withMissionProduceOrders != nil,
			mq.withMissionProductions != nil,
			mq.withMissionOrders != nil,
			mq.withRenewalAgreements != nil,
			mq.withMissionExtraServices != nil,
			mq.withExtraServices != nil,
			mq.withExtraServiceOrders != nil,
			mq.withRebootMissions != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, mission.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Mission).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Mission{config: mq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(mq.modifiers) > 0 {
		_spec.Modifiers = mq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, mq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := mq.withMissionKind; query != nil {
		if err := mq.loadMissionKind(ctx, query, nodes, nil,
			func(n *Mission, e *MissionKind) { n.Edges.MissionKind = e }); err != nil {
			return nil, err
		}
	}
	if query := mq.withUser; query != nil {
		if err := mq.loadUser(ctx, query, nodes, nil,
			func(n *Mission, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := mq.withKeyPair; query != nil {
		if err := mq.loadKeyPair(ctx, query, nodes, nil,
			func(n *Mission, e *HmacKeyPair) { n.Edges.KeyPair = e }); err != nil {
			return nil, err
		}
	}
	if query := mq.withMissionBatch; query != nil {
		if err := mq.loadMissionBatch(ctx, query, nodes, nil,
			func(n *Mission, e *MissionBatch) { n.Edges.MissionBatch = e }); err != nil {
			return nil, err
		}
	}
	if query := mq.withOldMission; query != nil {
		if err := mq.loadOldMission(ctx, query, nodes, nil,
			func(n *Mission, e *Mission) { n.Edges.OldMission = e }); err != nil {
			return nil, err
		}
	}
	if query := mq.withMissionKeyPairs; query != nil {
		if err := mq.loadMissionKeyPairs(ctx, query, nodes,
			func(n *Mission) { n.Edges.MissionKeyPairs = []*MissionKeyPair{} },
			func(n *Mission, e *MissionKeyPair) { n.Edges.MissionKeyPairs = append(n.Edges.MissionKeyPairs, e) }); err != nil {
			return nil, err
		}
	}
	if query := mq.withMissionConsumeOrder; query != nil {
		if err := mq.loadMissionConsumeOrder(ctx, query, nodes, nil,
			func(n *Mission, e *MissionConsumeOrder) { n.Edges.MissionConsumeOrder = e }); err != nil {
			return nil, err
		}
	}
	if query := mq.withMissionProduceOrders; query != nil {
		if err := mq.loadMissionProduceOrders(ctx, query, nodes,
			func(n *Mission) { n.Edges.MissionProduceOrders = []*MissionProduceOrder{} },
			func(n *Mission, e *MissionProduceOrder) {
				n.Edges.MissionProduceOrders = append(n.Edges.MissionProduceOrders, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := mq.withMissionProductions; query != nil {
		if err := mq.loadMissionProductions(ctx, query, nodes,
			func(n *Mission) { n.Edges.MissionProductions = []*MissionProduction{} },
			func(n *Mission, e *MissionProduction) {
				n.Edges.MissionProductions = append(n.Edges.MissionProductions, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := mq.withMissionOrders; query != nil {
		if err := mq.loadMissionOrders(ctx, query, nodes,
			func(n *Mission) { n.Edges.MissionOrders = []*MissionOrder{} },
			func(n *Mission, e *MissionOrder) { n.Edges.MissionOrders = append(n.Edges.MissionOrders, e) }); err != nil {
			return nil, err
		}
	}
	if query := mq.withRenewalAgreements; query != nil {
		if err := mq.loadRenewalAgreements(ctx, query, nodes,
			func(n *Mission) { n.Edges.RenewalAgreements = []*RenewalAgreement{} },
			func(n *Mission, e *RenewalAgreement) {
				n.Edges.RenewalAgreements = append(n.Edges.RenewalAgreements, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := mq.withMissionExtraServices; query != nil {
		if err := mq.loadMissionExtraServices(ctx, query, nodes,
			func(n *Mission) { n.Edges.MissionExtraServices = []*MissionExtraService{} },
			func(n *Mission, e *MissionExtraService) {
				n.Edges.MissionExtraServices = append(n.Edges.MissionExtraServices, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := mq.withExtraServices; query != nil {
		if err := mq.loadExtraServices(ctx, query, nodes,
			func(n *Mission) { n.Edges.ExtraServices = []*ExtraService{} },
			func(n *Mission, e *ExtraService) { n.Edges.ExtraServices = append(n.Edges.ExtraServices, e) }); err != nil {
			return nil, err
		}
	}
	if query := mq.withExtraServiceOrders; query != nil {
		if err := mq.loadExtraServiceOrders(ctx, query, nodes,
			func(n *Mission) { n.Edges.ExtraServiceOrders = []*ExtraServiceOrder{} },
			func(n *Mission, e *ExtraServiceOrder) {
				n.Edges.ExtraServiceOrders = append(n.Edges.ExtraServiceOrders, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := mq.withRebootMissions; query != nil {
		if err := mq.loadRebootMissions(ctx, query, nodes,
			func(n *Mission) { n.Edges.RebootMissions = []*Mission{} },
			func(n *Mission, e *Mission) { n.Edges.RebootMissions = append(n.Edges.RebootMissions, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (mq *MissionQuery) loadMissionKind(ctx context.Context, query *MissionKindQuery, nodes []*Mission, init func(*Mission), assign func(*Mission, *MissionKind)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*Mission)
	for i := range nodes {
		fk := nodes[i].MissionKindID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(missionkind.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "mission_kind_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (mq *MissionQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*Mission, init func(*Mission), assign func(*Mission, *User)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*Mission)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (mq *MissionQuery) loadKeyPair(ctx context.Context, query *HmacKeyPairQuery, nodes []*Mission, init func(*Mission), assign func(*Mission, *HmacKeyPair)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*Mission)
	for i := range nodes {
		fk := nodes[i].KeyPairID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(hmackeypair.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "key_pair_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (mq *MissionQuery) loadMissionBatch(ctx context.Context, query *MissionBatchQuery, nodes []*Mission, init func(*Mission), assign func(*Mission, *MissionBatch)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*Mission)
	for i := range nodes {
		fk := nodes[i].MissionBatchID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(missionbatch.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "mission_batch_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (mq *MissionQuery) loadOldMission(ctx context.Context, query *MissionQuery, nodes []*Mission, init func(*Mission), assign func(*Mission, *Mission)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*Mission)
	for i := range nodes {
		fk := nodes[i].OldMissionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(mission.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "old_mission_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (mq *MissionQuery) loadMissionKeyPairs(ctx context.Context, query *MissionKeyPairQuery, nodes []*Mission, init func(*Mission), assign func(*Mission, *MissionKeyPair)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Mission)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(missionkeypair.FieldMissionID)
	}
	query.Where(predicate.MissionKeyPair(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(mission.MissionKeyPairsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.MissionID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "mission_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (mq *MissionQuery) loadMissionConsumeOrder(ctx context.Context, query *MissionConsumeOrderQuery, nodes []*Mission, init func(*Mission), assign func(*Mission, *MissionConsumeOrder)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Mission)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(missionconsumeorder.FieldMissionID)
	}
	query.Where(predicate.MissionConsumeOrder(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(mission.MissionConsumeOrderColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.MissionID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "mission_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (mq *MissionQuery) loadMissionProduceOrders(ctx context.Context, query *MissionProduceOrderQuery, nodes []*Mission, init func(*Mission), assign func(*Mission, *MissionProduceOrder)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Mission)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.MissionProduceOrder(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(mission.MissionProduceOrdersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.mission_mission_produce_orders
		if fk == nil {
			return fmt.Errorf(`foreign-key "mission_mission_produce_orders" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "mission_mission_produce_orders" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (mq *MissionQuery) loadMissionProductions(ctx context.Context, query *MissionProductionQuery, nodes []*Mission, init func(*Mission), assign func(*Mission, *MissionProduction)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Mission)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(missionproduction.FieldMissionID)
	}
	query.Where(predicate.MissionProduction(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(mission.MissionProductionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.MissionID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "mission_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (mq *MissionQuery) loadMissionOrders(ctx context.Context, query *MissionOrderQuery, nodes []*Mission, init func(*Mission), assign func(*Mission, *MissionOrder)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Mission)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(missionorder.FieldMissionID)
	}
	query.Where(predicate.MissionOrder(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(mission.MissionOrdersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.MissionID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "mission_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (mq *MissionQuery) loadRenewalAgreements(ctx context.Context, query *RenewalAgreementQuery, nodes []*Mission, init func(*Mission), assign func(*Mission, *RenewalAgreement)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Mission)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(renewalagreement.FieldMissionID)
	}
	query.Where(predicate.RenewalAgreement(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(mission.RenewalAgreementsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.MissionID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "mission_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (mq *MissionQuery) loadMissionExtraServices(ctx context.Context, query *MissionExtraServiceQuery, nodes []*Mission, init func(*Mission), assign func(*Mission, *MissionExtraService)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Mission)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(missionextraservice.FieldMissionID)
	}
	query.Where(predicate.MissionExtraService(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(mission.MissionExtraServicesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.MissionID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "mission_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (mq *MissionQuery) loadExtraServices(ctx context.Context, query *ExtraServiceQuery, nodes []*Mission, init func(*Mission), assign func(*Mission, *ExtraService)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Mission)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ExtraService(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(mission.ExtraServicesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.mission_extra_services
		if fk == nil {
			return fmt.Errorf(`foreign-key "mission_extra_services" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "mission_extra_services" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (mq *MissionQuery) loadExtraServiceOrders(ctx context.Context, query *ExtraServiceOrderQuery, nodes []*Mission, init func(*Mission), assign func(*Mission, *ExtraServiceOrder)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Mission)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(extraserviceorder.FieldMissionID)
	}
	query.Where(predicate.ExtraServiceOrder(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(mission.ExtraServiceOrdersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.MissionID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "mission_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (mq *MissionQuery) loadRebootMissions(ctx context.Context, query *MissionQuery, nodes []*Mission, init func(*Mission), assign func(*Mission, *Mission)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Mission)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(mission.FieldOldMissionID)
	}
	query.Where(predicate.Mission(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(mission.RebootMissionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OldMissionID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "old_mission_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (mq *MissionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mq.querySpec()
	if len(mq.modifiers) > 0 {
		_spec.Modifiers = mq.modifiers
	}
	_spec.Node.Columns = mq.ctx.Fields
	if len(mq.ctx.Fields) > 0 {
		_spec.Unique = mq.ctx.Unique != nil && *mq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, mq.driver, _spec)
}

func (mq *MissionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(mission.Table, mission.Columns, sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64))
	_spec.From = mq.sql
	if unique := mq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if mq.path != nil {
		_spec.Unique = true
	}
	if fields := mq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mission.FieldID)
		for i := range fields {
			if fields[i] != mission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if mq.withMissionKind != nil {
			_spec.Node.AddColumnOnce(mission.FieldMissionKindID)
		}
		if mq.withUser != nil {
			_spec.Node.AddColumnOnce(mission.FieldUserID)
		}
		if mq.withKeyPair != nil {
			_spec.Node.AddColumnOnce(mission.FieldKeyPairID)
		}
		if mq.withMissionBatch != nil {
			_spec.Node.AddColumnOnce(mission.FieldMissionBatchID)
		}
		if mq.withOldMission != nil {
			_spec.Node.AddColumnOnce(mission.FieldOldMissionID)
		}
	}
	if ps := mq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mq *MissionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mq.driver.Dialect())
	t1 := builder.Table(mission.Table)
	columns := mq.ctx.Fields
	if len(columns) == 0 {
		columns = mission.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mq.sql != nil {
		selector = mq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if mq.ctx.Unique != nil && *mq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range mq.modifiers {
		m(selector)
	}
	for _, p := range mq.predicates {
		p(selector)
	}
	for _, p := range mq.order {
		p(selector)
	}
	if offset := mq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (mq *MissionQuery) Modify(modifiers ...func(s *sql.Selector)) *MissionSelect {
	mq.modifiers = append(mq.modifiers, modifiers...)
	return mq.Select()
}

// MissionGroupBy is the group-by builder for Mission entities.
type MissionGroupBy struct {
	selector
	build *MissionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mgb *MissionGroupBy) Aggregate(fns ...AggregateFunc) *MissionGroupBy {
	mgb.fns = append(mgb.fns, fns...)
	return mgb
}

// Scan applies the selector query and scans the result into the given value.
func (mgb *MissionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mgb.build.ctx, "GroupBy")
	if err := mgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MissionQuery, *MissionGroupBy](ctx, mgb.build, mgb, mgb.build.inters, v)
}

func (mgb *MissionGroupBy) sqlScan(ctx context.Context, root *MissionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(mgb.fns))
	for _, fn := range mgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*mgb.flds)+len(mgb.fns))
		for _, f := range *mgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*mgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// MissionSelect is the builder for selecting fields of Mission entities.
type MissionSelect struct {
	*MissionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ms *MissionSelect) Aggregate(fns ...AggregateFunc) *MissionSelect {
	ms.fns = append(ms.fns, fns...)
	return ms
}

// Scan applies the selector query and scans the result into the given value.
func (ms *MissionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ms.ctx, "Select")
	if err := ms.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MissionQuery, *MissionSelect](ctx, ms.MissionQuery, ms, ms.inters, v)
}

func (ms *MissionSelect) sqlScan(ctx context.Context, root *MissionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ms.fns))
	for _, fn := range ms.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ms.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ms *MissionSelect) Modify(modifiers ...func(s *sql.Selector)) *MissionSelect {
	ms.modifiers = append(ms.modifiers, modifiers...)
	return ms
}
