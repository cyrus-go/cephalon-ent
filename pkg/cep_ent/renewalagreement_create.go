// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/mission"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/renewalagreement"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// RenewalAgreementCreate is the builder for creating a RenewalAgreement entity.
type RenewalAgreementCreate struct {
	config
	mutation *RenewalAgreementMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (rac *RenewalAgreementCreate) SetCreatedBy(i int64) *RenewalAgreementCreate {
	rac.mutation.SetCreatedBy(i)
	return rac
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (rac *RenewalAgreementCreate) SetNillableCreatedBy(i *int64) *RenewalAgreementCreate {
	if i != nil {
		rac.SetCreatedBy(*i)
	}
	return rac
}

// SetUpdatedBy sets the "updated_by" field.
func (rac *RenewalAgreementCreate) SetUpdatedBy(i int64) *RenewalAgreementCreate {
	rac.mutation.SetUpdatedBy(i)
	return rac
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (rac *RenewalAgreementCreate) SetNillableUpdatedBy(i *int64) *RenewalAgreementCreate {
	if i != nil {
		rac.SetUpdatedBy(*i)
	}
	return rac
}

// SetCreatedAt sets the "created_at" field.
func (rac *RenewalAgreementCreate) SetCreatedAt(t time.Time) *RenewalAgreementCreate {
	rac.mutation.SetCreatedAt(t)
	return rac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rac *RenewalAgreementCreate) SetNillableCreatedAt(t *time.Time) *RenewalAgreementCreate {
	if t != nil {
		rac.SetCreatedAt(*t)
	}
	return rac
}

// SetUpdatedAt sets the "updated_at" field.
func (rac *RenewalAgreementCreate) SetUpdatedAt(t time.Time) *RenewalAgreementCreate {
	rac.mutation.SetUpdatedAt(t)
	return rac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rac *RenewalAgreementCreate) SetNillableUpdatedAt(t *time.Time) *RenewalAgreementCreate {
	if t != nil {
		rac.SetUpdatedAt(*t)
	}
	return rac
}

// SetDeletedAt sets the "deleted_at" field.
func (rac *RenewalAgreementCreate) SetDeletedAt(t time.Time) *RenewalAgreementCreate {
	rac.mutation.SetDeletedAt(t)
	return rac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rac *RenewalAgreementCreate) SetNillableDeletedAt(t *time.Time) *RenewalAgreementCreate {
	if t != nil {
		rac.SetDeletedAt(*t)
	}
	return rac
}

// SetNextPayTime sets the "next_pay_time" field.
func (rac *RenewalAgreementCreate) SetNextPayTime(t time.Time) *RenewalAgreementCreate {
	rac.mutation.SetNextPayTime(t)
	return rac
}

// SetNillableNextPayTime sets the "next_pay_time" field if the given value is not nil.
func (rac *RenewalAgreementCreate) SetNillableNextPayTime(t *time.Time) *RenewalAgreementCreate {
	if t != nil {
		rac.SetNextPayTime(*t)
	}
	return rac
}

// SetType sets the "type" field.
func (rac *RenewalAgreementCreate) SetType(et enums.RenewalType) *RenewalAgreementCreate {
	rac.mutation.SetType(et)
	return rac
}

// SetNillableType sets the "type" field if the given value is not nil.
func (rac *RenewalAgreementCreate) SetNillableType(et *enums.RenewalType) *RenewalAgreementCreate {
	if et != nil {
		rac.SetType(*et)
	}
	return rac
}

// SetSubStatus sets the "sub_status" field.
func (rac *RenewalAgreementCreate) SetSubStatus(ess enums.RenewalSubStatus) *RenewalAgreementCreate {
	rac.mutation.SetSubStatus(ess)
	return rac
}

// SetNillableSubStatus sets the "sub_status" field if the given value is not nil.
func (rac *RenewalAgreementCreate) SetNillableSubStatus(ess *enums.RenewalSubStatus) *RenewalAgreementCreate {
	if ess != nil {
		rac.SetSubStatus(*ess)
	}
	return rac
}

// SetPayStatus sets the "pay_status" field.
func (rac *RenewalAgreementCreate) SetPayStatus(eps enums.RenewalPayStatus) *RenewalAgreementCreate {
	rac.mutation.SetPayStatus(eps)
	return rac
}

// SetNillablePayStatus sets the "pay_status" field if the given value is not nil.
func (rac *RenewalAgreementCreate) SetNillablePayStatus(eps *enums.RenewalPayStatus) *RenewalAgreementCreate {
	if eps != nil {
		rac.SetPayStatus(*eps)
	}
	return rac
}

// SetSymbolID sets the "symbol_id" field.
func (rac *RenewalAgreementCreate) SetSymbolID(i int64) *RenewalAgreementCreate {
	rac.mutation.SetSymbolID(i)
	return rac
}

// SetNillableSymbolID sets the "symbol_id" field if the given value is not nil.
func (rac *RenewalAgreementCreate) SetNillableSymbolID(i *int64) *RenewalAgreementCreate {
	if i != nil {
		rac.SetSymbolID(*i)
	}
	return rac
}

// SetFirstPay sets the "first_pay" field.
func (rac *RenewalAgreementCreate) SetFirstPay(i int64) *RenewalAgreementCreate {
	rac.mutation.SetFirstPay(i)
	return rac
}

// SetNillableFirstPay sets the "first_pay" field if the given value is not nil.
func (rac *RenewalAgreementCreate) SetNillableFirstPay(i *int64) *RenewalAgreementCreate {
	if i != nil {
		rac.SetFirstPay(*i)
	}
	return rac
}

// SetAfterPay sets the "after_pay" field.
func (rac *RenewalAgreementCreate) SetAfterPay(i int64) *RenewalAgreementCreate {
	rac.mutation.SetAfterPay(i)
	return rac
}

// SetNillableAfterPay sets the "after_pay" field if the given value is not nil.
func (rac *RenewalAgreementCreate) SetNillableAfterPay(i *int64) *RenewalAgreementCreate {
	if i != nil {
		rac.SetAfterPay(*i)
	}
	return rac
}

// SetLastWarningTime sets the "last_warning_time" field.
func (rac *RenewalAgreementCreate) SetLastWarningTime(t time.Time) *RenewalAgreementCreate {
	rac.mutation.SetLastWarningTime(t)
	return rac
}

// SetNillableLastWarningTime sets the "last_warning_time" field if the given value is not nil.
func (rac *RenewalAgreementCreate) SetNillableLastWarningTime(t *time.Time) *RenewalAgreementCreate {
	if t != nil {
		rac.SetLastWarningTime(*t)
	}
	return rac
}

// SetSubFinishedTime sets the "sub_finished_time" field.
func (rac *RenewalAgreementCreate) SetSubFinishedTime(t time.Time) *RenewalAgreementCreate {
	rac.mutation.SetSubFinishedTime(t)
	return rac
}

// SetNillableSubFinishedTime sets the "sub_finished_time" field if the given value is not nil.
func (rac *RenewalAgreementCreate) SetNillableSubFinishedTime(t *time.Time) *RenewalAgreementCreate {
	if t != nil {
		rac.SetSubFinishedTime(*t)
	}
	return rac
}

// SetUserID sets the "user_id" field.
func (rac *RenewalAgreementCreate) SetUserID(i int64) *RenewalAgreementCreate {
	rac.mutation.SetUserID(i)
	return rac
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (rac *RenewalAgreementCreate) SetNillableUserID(i *int64) *RenewalAgreementCreate {
	if i != nil {
		rac.SetUserID(*i)
	}
	return rac
}

// SetMissionID sets the "mission_id" field.
func (rac *RenewalAgreementCreate) SetMissionID(i int64) *RenewalAgreementCreate {
	rac.mutation.SetMissionID(i)
	return rac
}

// SetNillableMissionID sets the "mission_id" field if the given value is not nil.
func (rac *RenewalAgreementCreate) SetNillableMissionID(i *int64) *RenewalAgreementCreate {
	if i != nil {
		rac.SetMissionID(*i)
	}
	return rac
}

// SetID sets the "id" field.
func (rac *RenewalAgreementCreate) SetID(i int64) *RenewalAgreementCreate {
	rac.mutation.SetID(i)
	return rac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rac *RenewalAgreementCreate) SetNillableID(i *int64) *RenewalAgreementCreate {
	if i != nil {
		rac.SetID(*i)
	}
	return rac
}

// SetUser sets the "user" edge to the User entity.
func (rac *RenewalAgreementCreate) SetUser(u *User) *RenewalAgreementCreate {
	return rac.SetUserID(u.ID)
}

// SetMission sets the "mission" edge to the Mission entity.
func (rac *RenewalAgreementCreate) SetMission(m *Mission) *RenewalAgreementCreate {
	return rac.SetMissionID(m.ID)
}

// Mutation returns the RenewalAgreementMutation object of the builder.
func (rac *RenewalAgreementCreate) Mutation() *RenewalAgreementMutation {
	return rac.mutation
}

// Save creates the RenewalAgreement in the database.
func (rac *RenewalAgreementCreate) Save(ctx context.Context) (*RenewalAgreement, error) {
	rac.defaults()
	return withHooks(ctx, rac.sqlSave, rac.mutation, rac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rac *RenewalAgreementCreate) SaveX(ctx context.Context) *RenewalAgreement {
	v, err := rac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rac *RenewalAgreementCreate) Exec(ctx context.Context) error {
	_, err := rac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rac *RenewalAgreementCreate) ExecX(ctx context.Context) {
	if err := rac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rac *RenewalAgreementCreate) defaults() {
	if _, ok := rac.mutation.CreatedBy(); !ok {
		v := renewalagreement.DefaultCreatedBy
		rac.mutation.SetCreatedBy(v)
	}
	if _, ok := rac.mutation.UpdatedBy(); !ok {
		v := renewalagreement.DefaultUpdatedBy
		rac.mutation.SetUpdatedBy(v)
	}
	if _, ok := rac.mutation.CreatedAt(); !ok {
		v := renewalagreement.DefaultCreatedAt()
		rac.mutation.SetCreatedAt(v)
	}
	if _, ok := rac.mutation.UpdatedAt(); !ok {
		v := renewalagreement.DefaultUpdatedAt()
		rac.mutation.SetUpdatedAt(v)
	}
	if _, ok := rac.mutation.DeletedAt(); !ok {
		v := renewalagreement.DefaultDeletedAt
		rac.mutation.SetDeletedAt(v)
	}
	if _, ok := rac.mutation.NextPayTime(); !ok {
		v := renewalagreement.DefaultNextPayTime
		rac.mutation.SetNextPayTime(v)
	}
	if _, ok := rac.mutation.GetType(); !ok {
		v := renewalagreement.DefaultType
		rac.mutation.SetType(v)
	}
	if _, ok := rac.mutation.SubStatus(); !ok {
		v := renewalagreement.DefaultSubStatus
		rac.mutation.SetSubStatus(v)
	}
	if _, ok := rac.mutation.PayStatus(); !ok {
		v := renewalagreement.DefaultPayStatus
		rac.mutation.SetPayStatus(v)
	}
	if _, ok := rac.mutation.SymbolID(); !ok {
		v := renewalagreement.DefaultSymbolID
		rac.mutation.SetSymbolID(v)
	}
	if _, ok := rac.mutation.FirstPay(); !ok {
		v := renewalagreement.DefaultFirstPay
		rac.mutation.SetFirstPay(v)
	}
	if _, ok := rac.mutation.AfterPay(); !ok {
		v := renewalagreement.DefaultAfterPay
		rac.mutation.SetAfterPay(v)
	}
	if _, ok := rac.mutation.LastWarningTime(); !ok {
		v := renewalagreement.DefaultLastWarningTime
		rac.mutation.SetLastWarningTime(v)
	}
	if _, ok := rac.mutation.SubFinishedTime(); !ok {
		v := renewalagreement.DefaultSubFinishedTime
		rac.mutation.SetSubFinishedTime(v)
	}
	if _, ok := rac.mutation.UserID(); !ok {
		v := renewalagreement.DefaultUserID
		rac.mutation.SetUserID(v)
	}
	if _, ok := rac.mutation.MissionID(); !ok {
		v := renewalagreement.DefaultMissionID
		rac.mutation.SetMissionID(v)
	}
	if _, ok := rac.mutation.ID(); !ok {
		v := renewalagreement.DefaultID()
		rac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rac *RenewalAgreementCreate) check() error {
	if _, ok := rac.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "RenewalAgreement.created_by"`)}
	}
	if _, ok := rac.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "RenewalAgreement.updated_by"`)}
	}
	if _, ok := rac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "RenewalAgreement.created_at"`)}
	}
	if _, ok := rac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "RenewalAgreement.updated_at"`)}
	}
	if _, ok := rac.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "RenewalAgreement.deleted_at"`)}
	}
	if _, ok := rac.mutation.NextPayTime(); !ok {
		return &ValidationError{Name: "next_pay_time", err: errors.New(`cep_ent: missing required field "RenewalAgreement.next_pay_time"`)}
	}
	if _, ok := rac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`cep_ent: missing required field "RenewalAgreement.type"`)}
	}
	if v, ok := rac.mutation.GetType(); ok {
		if err := renewalagreement.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "RenewalAgreement.type": %w`, err)}
		}
	}
	if _, ok := rac.mutation.SubStatus(); !ok {
		return &ValidationError{Name: "sub_status", err: errors.New(`cep_ent: missing required field "RenewalAgreement.sub_status"`)}
	}
	if v, ok := rac.mutation.SubStatus(); ok {
		if err := renewalagreement.SubStatusValidator(v); err != nil {
			return &ValidationError{Name: "sub_status", err: fmt.Errorf(`cep_ent: validator failed for field "RenewalAgreement.sub_status": %w`, err)}
		}
	}
	if _, ok := rac.mutation.PayStatus(); !ok {
		return &ValidationError{Name: "pay_status", err: errors.New(`cep_ent: missing required field "RenewalAgreement.pay_status"`)}
	}
	if v, ok := rac.mutation.PayStatus(); ok {
		if err := renewalagreement.PayStatusValidator(v); err != nil {
			return &ValidationError{Name: "pay_status", err: fmt.Errorf(`cep_ent: validator failed for field "RenewalAgreement.pay_status": %w`, err)}
		}
	}
	if _, ok := rac.mutation.SymbolID(); !ok {
		return &ValidationError{Name: "symbol_id", err: errors.New(`cep_ent: missing required field "RenewalAgreement.symbol_id"`)}
	}
	if _, ok := rac.mutation.FirstPay(); !ok {
		return &ValidationError{Name: "first_pay", err: errors.New(`cep_ent: missing required field "RenewalAgreement.first_pay"`)}
	}
	if _, ok := rac.mutation.AfterPay(); !ok {
		return &ValidationError{Name: "after_pay", err: errors.New(`cep_ent: missing required field "RenewalAgreement.after_pay"`)}
	}
	if _, ok := rac.mutation.LastWarningTime(); !ok {
		return &ValidationError{Name: "last_warning_time", err: errors.New(`cep_ent: missing required field "RenewalAgreement.last_warning_time"`)}
	}
	if _, ok := rac.mutation.SubFinishedTime(); !ok {
		return &ValidationError{Name: "sub_finished_time", err: errors.New(`cep_ent: missing required field "RenewalAgreement.sub_finished_time"`)}
	}
	if _, ok := rac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "RenewalAgreement.user_id"`)}
	}
	if _, ok := rac.mutation.MissionID(); !ok {
		return &ValidationError{Name: "mission_id", err: errors.New(`cep_ent: missing required field "RenewalAgreement.mission_id"`)}
	}
	if _, ok := rac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "RenewalAgreement.user"`)}
	}
	if _, ok := rac.mutation.MissionID(); !ok {
		return &ValidationError{Name: "mission", err: errors.New(`cep_ent: missing required edge "RenewalAgreement.mission"`)}
	}
	return nil
}

func (rac *RenewalAgreementCreate) sqlSave(ctx context.Context) (*RenewalAgreement, error) {
	if err := rac.check(); err != nil {
		return nil, err
	}
	_node, _spec := rac.createSpec()
	if err := sqlgraph.CreateNode(ctx, rac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	rac.mutation.id = &_node.ID
	rac.mutation.done = true
	return _node, nil
}

func (rac *RenewalAgreementCreate) createSpec() (*RenewalAgreement, *sqlgraph.CreateSpec) {
	var (
		_node = &RenewalAgreement{config: rac.config}
		_spec = sqlgraph.NewCreateSpec(renewalagreement.Table, sqlgraph.NewFieldSpec(renewalagreement.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = rac.conflict
	if id, ok := rac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rac.mutation.CreatedBy(); ok {
		_spec.SetField(renewalagreement.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := rac.mutation.UpdatedBy(); ok {
		_spec.SetField(renewalagreement.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := rac.mutation.CreatedAt(); ok {
		_spec.SetField(renewalagreement.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rac.mutation.UpdatedAt(); ok {
		_spec.SetField(renewalagreement.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rac.mutation.DeletedAt(); ok {
		_spec.SetField(renewalagreement.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := rac.mutation.NextPayTime(); ok {
		_spec.SetField(renewalagreement.FieldNextPayTime, field.TypeTime, value)
		_node.NextPayTime = value
	}
	if value, ok := rac.mutation.GetType(); ok {
		_spec.SetField(renewalagreement.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := rac.mutation.SubStatus(); ok {
		_spec.SetField(renewalagreement.FieldSubStatus, field.TypeEnum, value)
		_node.SubStatus = value
	}
	if value, ok := rac.mutation.PayStatus(); ok {
		_spec.SetField(renewalagreement.FieldPayStatus, field.TypeEnum, value)
		_node.PayStatus = value
	}
	if value, ok := rac.mutation.SymbolID(); ok {
		_spec.SetField(renewalagreement.FieldSymbolID, field.TypeInt64, value)
		_node.SymbolID = value
	}
	if value, ok := rac.mutation.FirstPay(); ok {
		_spec.SetField(renewalagreement.FieldFirstPay, field.TypeInt64, value)
		_node.FirstPay = value
	}
	if value, ok := rac.mutation.AfterPay(); ok {
		_spec.SetField(renewalagreement.FieldAfterPay, field.TypeInt64, value)
		_node.AfterPay = value
	}
	if value, ok := rac.mutation.LastWarningTime(); ok {
		_spec.SetField(renewalagreement.FieldLastWarningTime, field.TypeTime, value)
		_node.LastWarningTime = value
	}
	if value, ok := rac.mutation.SubFinishedTime(); ok {
		_spec.SetField(renewalagreement.FieldSubFinishedTime, field.TypeTime, value)
		_node.SubFinishedTime = value
	}
	if nodes := rac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   renewalagreement.UserTable,
			Columns: []string{renewalagreement.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rac.mutation.MissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   renewalagreement.MissionTable,
			Columns: []string{renewalagreement.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MissionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RenewalAgreement.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RenewalAgreementUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (rac *RenewalAgreementCreate) OnConflict(opts ...sql.ConflictOption) *RenewalAgreementUpsertOne {
	rac.conflict = opts
	return &RenewalAgreementUpsertOne{
		create: rac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RenewalAgreement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rac *RenewalAgreementCreate) OnConflictColumns(columns ...string) *RenewalAgreementUpsertOne {
	rac.conflict = append(rac.conflict, sql.ConflictColumns(columns...))
	return &RenewalAgreementUpsertOne{
		create: rac,
	}
}

type (
	// RenewalAgreementUpsertOne is the builder for "upsert"-ing
	//  one RenewalAgreement node.
	RenewalAgreementUpsertOne struct {
		create *RenewalAgreementCreate
	}

	// RenewalAgreementUpsert is the "OnConflict" setter.
	RenewalAgreementUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *RenewalAgreementUpsert) SetCreatedBy(v int64) *RenewalAgreementUpsert {
	u.Set(renewalagreement.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *RenewalAgreementUpsert) UpdateCreatedBy() *RenewalAgreementUpsert {
	u.SetExcluded(renewalagreement.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *RenewalAgreementUpsert) AddCreatedBy(v int64) *RenewalAgreementUpsert {
	u.Add(renewalagreement.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *RenewalAgreementUpsert) SetUpdatedBy(v int64) *RenewalAgreementUpsert {
	u.Set(renewalagreement.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *RenewalAgreementUpsert) UpdateUpdatedBy() *RenewalAgreementUpsert {
	u.SetExcluded(renewalagreement.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *RenewalAgreementUpsert) AddUpdatedBy(v int64) *RenewalAgreementUpsert {
	u.Add(renewalagreement.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RenewalAgreementUpsert) SetUpdatedAt(v time.Time) *RenewalAgreementUpsert {
	u.Set(renewalagreement.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RenewalAgreementUpsert) UpdateUpdatedAt() *RenewalAgreementUpsert {
	u.SetExcluded(renewalagreement.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RenewalAgreementUpsert) SetDeletedAt(v time.Time) *RenewalAgreementUpsert {
	u.Set(renewalagreement.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RenewalAgreementUpsert) UpdateDeletedAt() *RenewalAgreementUpsert {
	u.SetExcluded(renewalagreement.FieldDeletedAt)
	return u
}

// SetNextPayTime sets the "next_pay_time" field.
func (u *RenewalAgreementUpsert) SetNextPayTime(v time.Time) *RenewalAgreementUpsert {
	u.Set(renewalagreement.FieldNextPayTime, v)
	return u
}

// UpdateNextPayTime sets the "next_pay_time" field to the value that was provided on create.
func (u *RenewalAgreementUpsert) UpdateNextPayTime() *RenewalAgreementUpsert {
	u.SetExcluded(renewalagreement.FieldNextPayTime)
	return u
}

// SetType sets the "type" field.
func (u *RenewalAgreementUpsert) SetType(v enums.RenewalType) *RenewalAgreementUpsert {
	u.Set(renewalagreement.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *RenewalAgreementUpsert) UpdateType() *RenewalAgreementUpsert {
	u.SetExcluded(renewalagreement.FieldType)
	return u
}

// SetSubStatus sets the "sub_status" field.
func (u *RenewalAgreementUpsert) SetSubStatus(v enums.RenewalSubStatus) *RenewalAgreementUpsert {
	u.Set(renewalagreement.FieldSubStatus, v)
	return u
}

// UpdateSubStatus sets the "sub_status" field to the value that was provided on create.
func (u *RenewalAgreementUpsert) UpdateSubStatus() *RenewalAgreementUpsert {
	u.SetExcluded(renewalagreement.FieldSubStatus)
	return u
}

// SetPayStatus sets the "pay_status" field.
func (u *RenewalAgreementUpsert) SetPayStatus(v enums.RenewalPayStatus) *RenewalAgreementUpsert {
	u.Set(renewalagreement.FieldPayStatus, v)
	return u
}

// UpdatePayStatus sets the "pay_status" field to the value that was provided on create.
func (u *RenewalAgreementUpsert) UpdatePayStatus() *RenewalAgreementUpsert {
	u.SetExcluded(renewalagreement.FieldPayStatus)
	return u
}

// SetSymbolID sets the "symbol_id" field.
func (u *RenewalAgreementUpsert) SetSymbolID(v int64) *RenewalAgreementUpsert {
	u.Set(renewalagreement.FieldSymbolID, v)
	return u
}

// UpdateSymbolID sets the "symbol_id" field to the value that was provided on create.
func (u *RenewalAgreementUpsert) UpdateSymbolID() *RenewalAgreementUpsert {
	u.SetExcluded(renewalagreement.FieldSymbolID)
	return u
}

// AddSymbolID adds v to the "symbol_id" field.
func (u *RenewalAgreementUpsert) AddSymbolID(v int64) *RenewalAgreementUpsert {
	u.Add(renewalagreement.FieldSymbolID, v)
	return u
}

// SetFirstPay sets the "first_pay" field.
func (u *RenewalAgreementUpsert) SetFirstPay(v int64) *RenewalAgreementUpsert {
	u.Set(renewalagreement.FieldFirstPay, v)
	return u
}

// UpdateFirstPay sets the "first_pay" field to the value that was provided on create.
func (u *RenewalAgreementUpsert) UpdateFirstPay() *RenewalAgreementUpsert {
	u.SetExcluded(renewalagreement.FieldFirstPay)
	return u
}

// AddFirstPay adds v to the "first_pay" field.
func (u *RenewalAgreementUpsert) AddFirstPay(v int64) *RenewalAgreementUpsert {
	u.Add(renewalagreement.FieldFirstPay, v)
	return u
}

// SetAfterPay sets the "after_pay" field.
func (u *RenewalAgreementUpsert) SetAfterPay(v int64) *RenewalAgreementUpsert {
	u.Set(renewalagreement.FieldAfterPay, v)
	return u
}

// UpdateAfterPay sets the "after_pay" field to the value that was provided on create.
func (u *RenewalAgreementUpsert) UpdateAfterPay() *RenewalAgreementUpsert {
	u.SetExcluded(renewalagreement.FieldAfterPay)
	return u
}

// AddAfterPay adds v to the "after_pay" field.
func (u *RenewalAgreementUpsert) AddAfterPay(v int64) *RenewalAgreementUpsert {
	u.Add(renewalagreement.FieldAfterPay, v)
	return u
}

// SetLastWarningTime sets the "last_warning_time" field.
func (u *RenewalAgreementUpsert) SetLastWarningTime(v time.Time) *RenewalAgreementUpsert {
	u.Set(renewalagreement.FieldLastWarningTime, v)
	return u
}

// UpdateLastWarningTime sets the "last_warning_time" field to the value that was provided on create.
func (u *RenewalAgreementUpsert) UpdateLastWarningTime() *RenewalAgreementUpsert {
	u.SetExcluded(renewalagreement.FieldLastWarningTime)
	return u
}

// SetSubFinishedTime sets the "sub_finished_time" field.
func (u *RenewalAgreementUpsert) SetSubFinishedTime(v time.Time) *RenewalAgreementUpsert {
	u.Set(renewalagreement.FieldSubFinishedTime, v)
	return u
}

// UpdateSubFinishedTime sets the "sub_finished_time" field to the value that was provided on create.
func (u *RenewalAgreementUpsert) UpdateSubFinishedTime() *RenewalAgreementUpsert {
	u.SetExcluded(renewalagreement.FieldSubFinishedTime)
	return u
}

// SetUserID sets the "user_id" field.
func (u *RenewalAgreementUpsert) SetUserID(v int64) *RenewalAgreementUpsert {
	u.Set(renewalagreement.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *RenewalAgreementUpsert) UpdateUserID() *RenewalAgreementUpsert {
	u.SetExcluded(renewalagreement.FieldUserID)
	return u
}

// SetMissionID sets the "mission_id" field.
func (u *RenewalAgreementUpsert) SetMissionID(v int64) *RenewalAgreementUpsert {
	u.Set(renewalagreement.FieldMissionID, v)
	return u
}

// UpdateMissionID sets the "mission_id" field to the value that was provided on create.
func (u *RenewalAgreementUpsert) UpdateMissionID() *RenewalAgreementUpsert {
	u.SetExcluded(renewalagreement.FieldMissionID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.RenewalAgreement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(renewalagreement.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RenewalAgreementUpsertOne) UpdateNewValues() *RenewalAgreementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(renewalagreement.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(renewalagreement.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RenewalAgreement.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RenewalAgreementUpsertOne) Ignore() *RenewalAgreementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RenewalAgreementUpsertOne) DoNothing() *RenewalAgreementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RenewalAgreementCreate.OnConflict
// documentation for more info.
func (u *RenewalAgreementUpsertOne) Update(set func(*RenewalAgreementUpsert)) *RenewalAgreementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RenewalAgreementUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *RenewalAgreementUpsertOne) SetCreatedBy(v int64) *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *RenewalAgreementUpsertOne) AddCreatedBy(v int64) *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *RenewalAgreementUpsertOne) UpdateCreatedBy() *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *RenewalAgreementUpsertOne) SetUpdatedBy(v int64) *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *RenewalAgreementUpsertOne) AddUpdatedBy(v int64) *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *RenewalAgreementUpsertOne) UpdateUpdatedBy() *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RenewalAgreementUpsertOne) SetUpdatedAt(v time.Time) *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RenewalAgreementUpsertOne) UpdateUpdatedAt() *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RenewalAgreementUpsertOne) SetDeletedAt(v time.Time) *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RenewalAgreementUpsertOne) UpdateDeletedAt() *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetNextPayTime sets the "next_pay_time" field.
func (u *RenewalAgreementUpsertOne) SetNextPayTime(v time.Time) *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.SetNextPayTime(v)
	})
}

// UpdateNextPayTime sets the "next_pay_time" field to the value that was provided on create.
func (u *RenewalAgreementUpsertOne) UpdateNextPayTime() *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.UpdateNextPayTime()
	})
}

// SetType sets the "type" field.
func (u *RenewalAgreementUpsertOne) SetType(v enums.RenewalType) *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *RenewalAgreementUpsertOne) UpdateType() *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.UpdateType()
	})
}

// SetSubStatus sets the "sub_status" field.
func (u *RenewalAgreementUpsertOne) SetSubStatus(v enums.RenewalSubStatus) *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.SetSubStatus(v)
	})
}

// UpdateSubStatus sets the "sub_status" field to the value that was provided on create.
func (u *RenewalAgreementUpsertOne) UpdateSubStatus() *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.UpdateSubStatus()
	})
}

// SetPayStatus sets the "pay_status" field.
func (u *RenewalAgreementUpsertOne) SetPayStatus(v enums.RenewalPayStatus) *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.SetPayStatus(v)
	})
}

// UpdatePayStatus sets the "pay_status" field to the value that was provided on create.
func (u *RenewalAgreementUpsertOne) UpdatePayStatus() *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.UpdatePayStatus()
	})
}

// SetSymbolID sets the "symbol_id" field.
func (u *RenewalAgreementUpsertOne) SetSymbolID(v int64) *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.SetSymbolID(v)
	})
}

// AddSymbolID adds v to the "symbol_id" field.
func (u *RenewalAgreementUpsertOne) AddSymbolID(v int64) *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.AddSymbolID(v)
	})
}

// UpdateSymbolID sets the "symbol_id" field to the value that was provided on create.
func (u *RenewalAgreementUpsertOne) UpdateSymbolID() *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.UpdateSymbolID()
	})
}

// SetFirstPay sets the "first_pay" field.
func (u *RenewalAgreementUpsertOne) SetFirstPay(v int64) *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.SetFirstPay(v)
	})
}

// AddFirstPay adds v to the "first_pay" field.
func (u *RenewalAgreementUpsertOne) AddFirstPay(v int64) *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.AddFirstPay(v)
	})
}

// UpdateFirstPay sets the "first_pay" field to the value that was provided on create.
func (u *RenewalAgreementUpsertOne) UpdateFirstPay() *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.UpdateFirstPay()
	})
}

// SetAfterPay sets the "after_pay" field.
func (u *RenewalAgreementUpsertOne) SetAfterPay(v int64) *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.SetAfterPay(v)
	})
}

// AddAfterPay adds v to the "after_pay" field.
func (u *RenewalAgreementUpsertOne) AddAfterPay(v int64) *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.AddAfterPay(v)
	})
}

// UpdateAfterPay sets the "after_pay" field to the value that was provided on create.
func (u *RenewalAgreementUpsertOne) UpdateAfterPay() *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.UpdateAfterPay()
	})
}

// SetLastWarningTime sets the "last_warning_time" field.
func (u *RenewalAgreementUpsertOne) SetLastWarningTime(v time.Time) *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.SetLastWarningTime(v)
	})
}

// UpdateLastWarningTime sets the "last_warning_time" field to the value that was provided on create.
func (u *RenewalAgreementUpsertOne) UpdateLastWarningTime() *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.UpdateLastWarningTime()
	})
}

// SetSubFinishedTime sets the "sub_finished_time" field.
func (u *RenewalAgreementUpsertOne) SetSubFinishedTime(v time.Time) *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.SetSubFinishedTime(v)
	})
}

// UpdateSubFinishedTime sets the "sub_finished_time" field to the value that was provided on create.
func (u *RenewalAgreementUpsertOne) UpdateSubFinishedTime() *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.UpdateSubFinishedTime()
	})
}

// SetUserID sets the "user_id" field.
func (u *RenewalAgreementUpsertOne) SetUserID(v int64) *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *RenewalAgreementUpsertOne) UpdateUserID() *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.UpdateUserID()
	})
}

// SetMissionID sets the "mission_id" field.
func (u *RenewalAgreementUpsertOne) SetMissionID(v int64) *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.SetMissionID(v)
	})
}

// UpdateMissionID sets the "mission_id" field to the value that was provided on create.
func (u *RenewalAgreementUpsertOne) UpdateMissionID() *RenewalAgreementUpsertOne {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.UpdateMissionID()
	})
}

// Exec executes the query.
func (u *RenewalAgreementUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for RenewalAgreementCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RenewalAgreementUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RenewalAgreementUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RenewalAgreementUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RenewalAgreementCreateBulk is the builder for creating many RenewalAgreement entities in bulk.
type RenewalAgreementCreateBulk struct {
	config
	err      error
	builders []*RenewalAgreementCreate
	conflict []sql.ConflictOption
}

// Save creates the RenewalAgreement entities in the database.
func (racb *RenewalAgreementCreateBulk) Save(ctx context.Context) ([]*RenewalAgreement, error) {
	if racb.err != nil {
		return nil, racb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(racb.builders))
	nodes := make([]*RenewalAgreement, len(racb.builders))
	mutators := make([]Mutator, len(racb.builders))
	for i := range racb.builders {
		func(i int, root context.Context) {
			builder := racb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RenewalAgreementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, racb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = racb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, racb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, racb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (racb *RenewalAgreementCreateBulk) SaveX(ctx context.Context) []*RenewalAgreement {
	v, err := racb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (racb *RenewalAgreementCreateBulk) Exec(ctx context.Context) error {
	_, err := racb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (racb *RenewalAgreementCreateBulk) ExecX(ctx context.Context) {
	if err := racb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RenewalAgreement.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RenewalAgreementUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (racb *RenewalAgreementCreateBulk) OnConflict(opts ...sql.ConflictOption) *RenewalAgreementUpsertBulk {
	racb.conflict = opts
	return &RenewalAgreementUpsertBulk{
		create: racb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RenewalAgreement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (racb *RenewalAgreementCreateBulk) OnConflictColumns(columns ...string) *RenewalAgreementUpsertBulk {
	racb.conflict = append(racb.conflict, sql.ConflictColumns(columns...))
	return &RenewalAgreementUpsertBulk{
		create: racb,
	}
}

// RenewalAgreementUpsertBulk is the builder for "upsert"-ing
// a bulk of RenewalAgreement nodes.
type RenewalAgreementUpsertBulk struct {
	create *RenewalAgreementCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RenewalAgreement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(renewalagreement.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RenewalAgreementUpsertBulk) UpdateNewValues() *RenewalAgreementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(renewalagreement.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(renewalagreement.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RenewalAgreement.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RenewalAgreementUpsertBulk) Ignore() *RenewalAgreementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RenewalAgreementUpsertBulk) DoNothing() *RenewalAgreementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RenewalAgreementCreateBulk.OnConflict
// documentation for more info.
func (u *RenewalAgreementUpsertBulk) Update(set func(*RenewalAgreementUpsert)) *RenewalAgreementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RenewalAgreementUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *RenewalAgreementUpsertBulk) SetCreatedBy(v int64) *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *RenewalAgreementUpsertBulk) AddCreatedBy(v int64) *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *RenewalAgreementUpsertBulk) UpdateCreatedBy() *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *RenewalAgreementUpsertBulk) SetUpdatedBy(v int64) *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *RenewalAgreementUpsertBulk) AddUpdatedBy(v int64) *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *RenewalAgreementUpsertBulk) UpdateUpdatedBy() *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RenewalAgreementUpsertBulk) SetUpdatedAt(v time.Time) *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RenewalAgreementUpsertBulk) UpdateUpdatedAt() *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RenewalAgreementUpsertBulk) SetDeletedAt(v time.Time) *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RenewalAgreementUpsertBulk) UpdateDeletedAt() *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetNextPayTime sets the "next_pay_time" field.
func (u *RenewalAgreementUpsertBulk) SetNextPayTime(v time.Time) *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.SetNextPayTime(v)
	})
}

// UpdateNextPayTime sets the "next_pay_time" field to the value that was provided on create.
func (u *RenewalAgreementUpsertBulk) UpdateNextPayTime() *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.UpdateNextPayTime()
	})
}

// SetType sets the "type" field.
func (u *RenewalAgreementUpsertBulk) SetType(v enums.RenewalType) *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *RenewalAgreementUpsertBulk) UpdateType() *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.UpdateType()
	})
}

// SetSubStatus sets the "sub_status" field.
func (u *RenewalAgreementUpsertBulk) SetSubStatus(v enums.RenewalSubStatus) *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.SetSubStatus(v)
	})
}

// UpdateSubStatus sets the "sub_status" field to the value that was provided on create.
func (u *RenewalAgreementUpsertBulk) UpdateSubStatus() *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.UpdateSubStatus()
	})
}

// SetPayStatus sets the "pay_status" field.
func (u *RenewalAgreementUpsertBulk) SetPayStatus(v enums.RenewalPayStatus) *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.SetPayStatus(v)
	})
}

// UpdatePayStatus sets the "pay_status" field to the value that was provided on create.
func (u *RenewalAgreementUpsertBulk) UpdatePayStatus() *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.UpdatePayStatus()
	})
}

// SetSymbolID sets the "symbol_id" field.
func (u *RenewalAgreementUpsertBulk) SetSymbolID(v int64) *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.SetSymbolID(v)
	})
}

// AddSymbolID adds v to the "symbol_id" field.
func (u *RenewalAgreementUpsertBulk) AddSymbolID(v int64) *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.AddSymbolID(v)
	})
}

// UpdateSymbolID sets the "symbol_id" field to the value that was provided on create.
func (u *RenewalAgreementUpsertBulk) UpdateSymbolID() *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.UpdateSymbolID()
	})
}

// SetFirstPay sets the "first_pay" field.
func (u *RenewalAgreementUpsertBulk) SetFirstPay(v int64) *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.SetFirstPay(v)
	})
}

// AddFirstPay adds v to the "first_pay" field.
func (u *RenewalAgreementUpsertBulk) AddFirstPay(v int64) *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.AddFirstPay(v)
	})
}

// UpdateFirstPay sets the "first_pay" field to the value that was provided on create.
func (u *RenewalAgreementUpsertBulk) UpdateFirstPay() *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.UpdateFirstPay()
	})
}

// SetAfterPay sets the "after_pay" field.
func (u *RenewalAgreementUpsertBulk) SetAfterPay(v int64) *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.SetAfterPay(v)
	})
}

// AddAfterPay adds v to the "after_pay" field.
func (u *RenewalAgreementUpsertBulk) AddAfterPay(v int64) *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.AddAfterPay(v)
	})
}

// UpdateAfterPay sets the "after_pay" field to the value that was provided on create.
func (u *RenewalAgreementUpsertBulk) UpdateAfterPay() *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.UpdateAfterPay()
	})
}

// SetLastWarningTime sets the "last_warning_time" field.
func (u *RenewalAgreementUpsertBulk) SetLastWarningTime(v time.Time) *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.SetLastWarningTime(v)
	})
}

// UpdateLastWarningTime sets the "last_warning_time" field to the value that was provided on create.
func (u *RenewalAgreementUpsertBulk) UpdateLastWarningTime() *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.UpdateLastWarningTime()
	})
}

// SetSubFinishedTime sets the "sub_finished_time" field.
func (u *RenewalAgreementUpsertBulk) SetSubFinishedTime(v time.Time) *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.SetSubFinishedTime(v)
	})
}

// UpdateSubFinishedTime sets the "sub_finished_time" field to the value that was provided on create.
func (u *RenewalAgreementUpsertBulk) UpdateSubFinishedTime() *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.UpdateSubFinishedTime()
	})
}

// SetUserID sets the "user_id" field.
func (u *RenewalAgreementUpsertBulk) SetUserID(v int64) *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *RenewalAgreementUpsertBulk) UpdateUserID() *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.UpdateUserID()
	})
}

// SetMissionID sets the "mission_id" field.
func (u *RenewalAgreementUpsertBulk) SetMissionID(v int64) *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.SetMissionID(v)
	})
}

// UpdateMissionID sets the "mission_id" field to the value that was provided on create.
func (u *RenewalAgreementUpsertBulk) UpdateMissionID() *RenewalAgreementUpsertBulk {
	return u.Update(func(s *RenewalAgreementUpsert) {
		s.UpdateMissionID()
	})
}

// Exec executes the query.
func (u *RenewalAgreementUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the RenewalAgreementCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for RenewalAgreementCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RenewalAgreementUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
