// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/apitoken"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// ApiToken is the model entity for the ApiToken schema.
type ApiToken struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建者 ID
	CreatedBy int64 `json:"created_by,string"`
	// 更新者 ID
	UpdatedBy int64 `json:"updated_by,string"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// 用户ID
	UserID int64 `json:"user_id"`
	// token 名称
	Name string `json:"name"`
	// token 内容
	Token string `json:"-"`
	// token 状态
	Status enums.ApiTokenStatus `json:"status,omitempty" "json:"status"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ApiTokenQuery when eager-loading is set.
	Edges        ApiTokenEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ApiTokenEdges holds the relations/edges for other nodes in the graph.
type ApiTokenEdges struct {
	// InvokeModelOrders holds the value of the invoke_model_orders edge.
	InvokeModelOrders []*InvokeModelOrder `json:"invoke_model_orders,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// InvokeModelOrdersOrErr returns the InvokeModelOrders value or an error if the edge
// was not loaded in eager-loading.
func (e ApiTokenEdges) InvokeModelOrdersOrErr() ([]*InvokeModelOrder, error) {
	if e.loadedTypes[0] {
		return e.InvokeModelOrders, nil
	}
	return nil, &NotLoadedError{edge: "invoke_model_orders"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApiTokenEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ApiToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case apitoken.FieldID, apitoken.FieldCreatedBy, apitoken.FieldUpdatedBy, apitoken.FieldUserID:
			values[i] = new(sql.NullInt64)
		case apitoken.FieldName, apitoken.FieldToken, apitoken.FieldStatus:
			values[i] = new(sql.NullString)
		case apitoken.FieldCreatedAt, apitoken.FieldUpdatedAt, apitoken.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ApiToken fields.
func (at *ApiToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case apitoken.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			at.ID = int64(value.Int64)
		case apitoken.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				at.CreatedBy = value.Int64
			}
		case apitoken.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				at.UpdatedBy = value.Int64
			}
		case apitoken.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				at.CreatedAt = value.Time
			}
		case apitoken.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				at.UpdatedAt = value.Time
			}
		case apitoken.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				at.DeletedAt = value.Time
			}
		case apitoken.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				at.UserID = value.Int64
			}
		case apitoken.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				at.Name = value.String
			}
		case apitoken.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				at.Token = value.String
			}
		case apitoken.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				at.Status = enums.ApiTokenStatus(value.String)
			}
		default:
			at.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ApiToken.
// This includes values selected through modifiers, order, etc.
func (at *ApiToken) Value(name string) (ent.Value, error) {
	return at.selectValues.Get(name)
}

// QueryInvokeModelOrders queries the "invoke_model_orders" edge of the ApiToken entity.
func (at *ApiToken) QueryInvokeModelOrders() *InvokeModelOrderQuery {
	return NewApiTokenClient(at.config).QueryInvokeModelOrders(at)
}

// QueryUser queries the "user" edge of the ApiToken entity.
func (at *ApiToken) QueryUser() *UserQuery {
	return NewApiTokenClient(at.config).QueryUser(at)
}

// Update returns a builder for updating this ApiToken.
// Note that you need to call ApiToken.Unwrap() before calling this method if this ApiToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (at *ApiToken) Update() *ApiTokenUpdateOne {
	return NewApiTokenClient(at.config).UpdateOne(at)
}

// Unwrap unwraps the ApiToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (at *ApiToken) Unwrap() *ApiToken {
	_tx, ok := at.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: ApiToken is not a transactional entity")
	}
	at.config.driver = _tx.drv
	return at
}

// String implements the fmt.Stringer.
func (at *ApiToken) String() string {
	var builder strings.Builder
	builder.WriteString("ApiToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", at.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", at.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", at.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(at.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(at.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(at.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", at.UserID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(at.Name)
	builder.WriteString(", ")
	builder.WriteString("token=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", at.Status))
	builder.WriteByte(')')
	return builder.String()
}

// ApiTokens is a parsable slice of ApiToken.
type ApiTokens []*ApiToken
