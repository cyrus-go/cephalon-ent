// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/model"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/usermodel"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// UserModelCreate is the builder for creating a UserModel entity.
type UserModelCreate struct {
	config
	mutation *UserModelMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (umc *UserModelCreate) SetCreatedBy(i int64) *UserModelCreate {
	umc.mutation.SetCreatedBy(i)
	return umc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (umc *UserModelCreate) SetNillableCreatedBy(i *int64) *UserModelCreate {
	if i != nil {
		umc.SetCreatedBy(*i)
	}
	return umc
}

// SetUpdatedBy sets the "updated_by" field.
func (umc *UserModelCreate) SetUpdatedBy(i int64) *UserModelCreate {
	umc.mutation.SetUpdatedBy(i)
	return umc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (umc *UserModelCreate) SetNillableUpdatedBy(i *int64) *UserModelCreate {
	if i != nil {
		umc.SetUpdatedBy(*i)
	}
	return umc
}

// SetCreatedAt sets the "created_at" field.
func (umc *UserModelCreate) SetCreatedAt(t time.Time) *UserModelCreate {
	umc.mutation.SetCreatedAt(t)
	return umc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (umc *UserModelCreate) SetNillableCreatedAt(t *time.Time) *UserModelCreate {
	if t != nil {
		umc.SetCreatedAt(*t)
	}
	return umc
}

// SetUpdatedAt sets the "updated_at" field.
func (umc *UserModelCreate) SetUpdatedAt(t time.Time) *UserModelCreate {
	umc.mutation.SetUpdatedAt(t)
	return umc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (umc *UserModelCreate) SetNillableUpdatedAt(t *time.Time) *UserModelCreate {
	if t != nil {
		umc.SetUpdatedAt(*t)
	}
	return umc
}

// SetDeletedAt sets the "deleted_at" field.
func (umc *UserModelCreate) SetDeletedAt(t time.Time) *UserModelCreate {
	umc.mutation.SetDeletedAt(t)
	return umc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (umc *UserModelCreate) SetNillableDeletedAt(t *time.Time) *UserModelCreate {
	if t != nil {
		umc.SetDeletedAt(*t)
	}
	return umc
}

// SetUserID sets the "user_id" field.
func (umc *UserModelCreate) SetUserID(i int64) *UserModelCreate {
	umc.mutation.SetUserID(i)
	return umc
}

// SetModelID sets the "model_id" field.
func (umc *UserModelCreate) SetModelID(i int64) *UserModelCreate {
	umc.mutation.SetModelID(i)
	return umc
}

// SetRelation sets the "relation" field.
func (umc *UserModelCreate) SetRelation(emr enums.UserModelRelation) *UserModelCreate {
	umc.mutation.SetRelation(emr)
	return umc
}

// SetNillableRelation sets the "relation" field if the given value is not nil.
func (umc *UserModelCreate) SetNillableRelation(emr *enums.UserModelRelation) *UserModelCreate {
	if emr != nil {
		umc.SetRelation(*emr)
	}
	return umc
}

// SetStatus sets the "status" field.
func (umc *UserModelCreate) SetStatus(emrs enums.UserModelRelationStatus) *UserModelCreate {
	umc.mutation.SetStatus(emrs)
	return umc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (umc *UserModelCreate) SetNillableStatus(emrs *enums.UserModelRelationStatus) *UserModelCreate {
	if emrs != nil {
		umc.SetStatus(*emrs)
	}
	return umc
}

// SetID sets the "id" field.
func (umc *UserModelCreate) SetID(i int64) *UserModelCreate {
	umc.mutation.SetID(i)
	return umc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (umc *UserModelCreate) SetNillableID(i *int64) *UserModelCreate {
	if i != nil {
		umc.SetID(*i)
	}
	return umc
}

// SetUser sets the "user" edge to the User entity.
func (umc *UserModelCreate) SetUser(u *User) *UserModelCreate {
	return umc.SetUserID(u.ID)
}

// SetModel sets the "model" edge to the Model entity.
func (umc *UserModelCreate) SetModel(m *Model) *UserModelCreate {
	return umc.SetModelID(m.ID)
}

// Mutation returns the UserModelMutation object of the builder.
func (umc *UserModelCreate) Mutation() *UserModelMutation {
	return umc.mutation
}

// Save creates the UserModel in the database.
func (umc *UserModelCreate) Save(ctx context.Context) (*UserModel, error) {
	umc.defaults()
	return withHooks(ctx, umc.sqlSave, umc.mutation, umc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (umc *UserModelCreate) SaveX(ctx context.Context) *UserModel {
	v, err := umc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (umc *UserModelCreate) Exec(ctx context.Context) error {
	_, err := umc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umc *UserModelCreate) ExecX(ctx context.Context) {
	if err := umc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (umc *UserModelCreate) defaults() {
	if _, ok := umc.mutation.CreatedBy(); !ok {
		v := usermodel.DefaultCreatedBy
		umc.mutation.SetCreatedBy(v)
	}
	if _, ok := umc.mutation.UpdatedBy(); !ok {
		v := usermodel.DefaultUpdatedBy
		umc.mutation.SetUpdatedBy(v)
	}
	if _, ok := umc.mutation.CreatedAt(); !ok {
		v := usermodel.DefaultCreatedAt()
		umc.mutation.SetCreatedAt(v)
	}
	if _, ok := umc.mutation.UpdatedAt(); !ok {
		v := usermodel.DefaultUpdatedAt()
		umc.mutation.SetUpdatedAt(v)
	}
	if _, ok := umc.mutation.DeletedAt(); !ok {
		v := usermodel.DefaultDeletedAt
		umc.mutation.SetDeletedAt(v)
	}
	if _, ok := umc.mutation.Relation(); !ok {
		v := usermodel.DefaultRelation
		umc.mutation.SetRelation(v)
	}
	if _, ok := umc.mutation.Status(); !ok {
		v := usermodel.DefaultStatus
		umc.mutation.SetStatus(v)
	}
	if _, ok := umc.mutation.ID(); !ok {
		v := usermodel.DefaultID()
		umc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (umc *UserModelCreate) check() error {
	if _, ok := umc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "UserModel.created_by"`)}
	}
	if _, ok := umc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "UserModel.updated_by"`)}
	}
	if _, ok := umc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "UserModel.created_at"`)}
	}
	if _, ok := umc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "UserModel.updated_at"`)}
	}
	if _, ok := umc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "UserModel.deleted_at"`)}
	}
	if _, ok := umc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "UserModel.user_id"`)}
	}
	if _, ok := umc.mutation.ModelID(); !ok {
		return &ValidationError{Name: "model_id", err: errors.New(`cep_ent: missing required field "UserModel.model_id"`)}
	}
	if _, ok := umc.mutation.Relation(); !ok {
		return &ValidationError{Name: "relation", err: errors.New(`cep_ent: missing required field "UserModel.relation"`)}
	}
	if v, ok := umc.mutation.Relation(); ok {
		if err := usermodel.RelationValidator(v); err != nil {
			return &ValidationError{Name: "relation", err: fmt.Errorf(`cep_ent: validator failed for field "UserModel.relation": %w`, err)}
		}
	}
	if _, ok := umc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`cep_ent: missing required field "UserModel.status"`)}
	}
	if v, ok := umc.mutation.Status(); ok {
		if err := usermodel.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "UserModel.status": %w`, err)}
		}
	}
	if _, ok := umc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "UserModel.user"`)}
	}
	if _, ok := umc.mutation.ModelID(); !ok {
		return &ValidationError{Name: "model", err: errors.New(`cep_ent: missing required edge "UserModel.model"`)}
	}
	return nil
}

func (umc *UserModelCreate) sqlSave(ctx context.Context) (*UserModel, error) {
	if err := umc.check(); err != nil {
		return nil, err
	}
	_node, _spec := umc.createSpec()
	if err := sqlgraph.CreateNode(ctx, umc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	umc.mutation.id = &_node.ID
	umc.mutation.done = true
	return _node, nil
}

func (umc *UserModelCreate) createSpec() (*UserModel, *sqlgraph.CreateSpec) {
	var (
		_node = &UserModel{config: umc.config}
		_spec = sqlgraph.NewCreateSpec(usermodel.Table, sqlgraph.NewFieldSpec(usermodel.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = umc.conflict
	if id, ok := umc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := umc.mutation.CreatedBy(); ok {
		_spec.SetField(usermodel.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := umc.mutation.UpdatedBy(); ok {
		_spec.SetField(usermodel.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := umc.mutation.CreatedAt(); ok {
		_spec.SetField(usermodel.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := umc.mutation.UpdatedAt(); ok {
		_spec.SetField(usermodel.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := umc.mutation.DeletedAt(); ok {
		_spec.SetField(usermodel.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := umc.mutation.Relation(); ok {
		_spec.SetField(usermodel.FieldRelation, field.TypeEnum, value)
		_node.Relation = value
	}
	if value, ok := umc.mutation.Status(); ok {
		_spec.SetField(usermodel.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := umc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usermodel.UserTable,
			Columns: []string{usermodel.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := umc.mutation.ModelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usermodel.ModelTable,
			Columns: []string{usermodel.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(model.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ModelID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserModel.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserModelUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (umc *UserModelCreate) OnConflict(opts ...sql.ConflictOption) *UserModelUpsertOne {
	umc.conflict = opts
	return &UserModelUpsertOne{
		create: umc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserModel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (umc *UserModelCreate) OnConflictColumns(columns ...string) *UserModelUpsertOne {
	umc.conflict = append(umc.conflict, sql.ConflictColumns(columns...))
	return &UserModelUpsertOne{
		create: umc,
	}
}

type (
	// UserModelUpsertOne is the builder for "upsert"-ing
	//  one UserModel node.
	UserModelUpsertOne struct {
		create *UserModelCreate
	}

	// UserModelUpsert is the "OnConflict" setter.
	UserModelUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *UserModelUpsert) SetCreatedBy(v int64) *UserModelUpsert {
	u.Set(usermodel.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *UserModelUpsert) UpdateCreatedBy() *UserModelUpsert {
	u.SetExcluded(usermodel.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *UserModelUpsert) AddCreatedBy(v int64) *UserModelUpsert {
	u.Add(usermodel.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *UserModelUpsert) SetUpdatedBy(v int64) *UserModelUpsert {
	u.Set(usermodel.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *UserModelUpsert) UpdateUpdatedBy() *UserModelUpsert {
	u.SetExcluded(usermodel.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *UserModelUpsert) AddUpdatedBy(v int64) *UserModelUpsert {
	u.Add(usermodel.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserModelUpsert) SetUpdatedAt(v time.Time) *UserModelUpsert {
	u.Set(usermodel.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserModelUpsert) UpdateUpdatedAt() *UserModelUpsert {
	u.SetExcluded(usermodel.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserModelUpsert) SetDeletedAt(v time.Time) *UserModelUpsert {
	u.Set(usermodel.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserModelUpsert) UpdateDeletedAt() *UserModelUpsert {
	u.SetExcluded(usermodel.FieldDeletedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserModelUpsert) SetUserID(v int64) *UserModelUpsert {
	u.Set(usermodel.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserModelUpsert) UpdateUserID() *UserModelUpsert {
	u.SetExcluded(usermodel.FieldUserID)
	return u
}

// SetModelID sets the "model_id" field.
func (u *UserModelUpsert) SetModelID(v int64) *UserModelUpsert {
	u.Set(usermodel.FieldModelID, v)
	return u
}

// UpdateModelID sets the "model_id" field to the value that was provided on create.
func (u *UserModelUpsert) UpdateModelID() *UserModelUpsert {
	u.SetExcluded(usermodel.FieldModelID)
	return u
}

// SetRelation sets the "relation" field.
func (u *UserModelUpsert) SetRelation(v enums.UserModelRelation) *UserModelUpsert {
	u.Set(usermodel.FieldRelation, v)
	return u
}

// UpdateRelation sets the "relation" field to the value that was provided on create.
func (u *UserModelUpsert) UpdateRelation() *UserModelUpsert {
	u.SetExcluded(usermodel.FieldRelation)
	return u
}

// SetStatus sets the "status" field.
func (u *UserModelUpsert) SetStatus(v enums.UserModelRelationStatus) *UserModelUpsert {
	u.Set(usermodel.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserModelUpsert) UpdateStatus() *UserModelUpsert {
	u.SetExcluded(usermodel.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UserModel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(usermodel.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserModelUpsertOne) UpdateNewValues() *UserModelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(usermodel.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(usermodel.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserModel.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserModelUpsertOne) Ignore() *UserModelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserModelUpsertOne) DoNothing() *UserModelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserModelCreate.OnConflict
// documentation for more info.
func (u *UserModelUpsertOne) Update(set func(*UserModelUpsert)) *UserModelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserModelUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *UserModelUpsertOne) SetCreatedBy(v int64) *UserModelUpsertOne {
	return u.Update(func(s *UserModelUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *UserModelUpsertOne) AddCreatedBy(v int64) *UserModelUpsertOne {
	return u.Update(func(s *UserModelUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *UserModelUpsertOne) UpdateCreatedBy() *UserModelUpsertOne {
	return u.Update(func(s *UserModelUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *UserModelUpsertOne) SetUpdatedBy(v int64) *UserModelUpsertOne {
	return u.Update(func(s *UserModelUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *UserModelUpsertOne) AddUpdatedBy(v int64) *UserModelUpsertOne {
	return u.Update(func(s *UserModelUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *UserModelUpsertOne) UpdateUpdatedBy() *UserModelUpsertOne {
	return u.Update(func(s *UserModelUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserModelUpsertOne) SetUpdatedAt(v time.Time) *UserModelUpsertOne {
	return u.Update(func(s *UserModelUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserModelUpsertOne) UpdateUpdatedAt() *UserModelUpsertOne {
	return u.Update(func(s *UserModelUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserModelUpsertOne) SetDeletedAt(v time.Time) *UserModelUpsertOne {
	return u.Update(func(s *UserModelUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserModelUpsertOne) UpdateDeletedAt() *UserModelUpsertOne {
	return u.Update(func(s *UserModelUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *UserModelUpsertOne) SetUserID(v int64) *UserModelUpsertOne {
	return u.Update(func(s *UserModelUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserModelUpsertOne) UpdateUserID() *UserModelUpsertOne {
	return u.Update(func(s *UserModelUpsert) {
		s.UpdateUserID()
	})
}

// SetModelID sets the "model_id" field.
func (u *UserModelUpsertOne) SetModelID(v int64) *UserModelUpsertOne {
	return u.Update(func(s *UserModelUpsert) {
		s.SetModelID(v)
	})
}

// UpdateModelID sets the "model_id" field to the value that was provided on create.
func (u *UserModelUpsertOne) UpdateModelID() *UserModelUpsertOne {
	return u.Update(func(s *UserModelUpsert) {
		s.UpdateModelID()
	})
}

// SetRelation sets the "relation" field.
func (u *UserModelUpsertOne) SetRelation(v enums.UserModelRelation) *UserModelUpsertOne {
	return u.Update(func(s *UserModelUpsert) {
		s.SetRelation(v)
	})
}

// UpdateRelation sets the "relation" field to the value that was provided on create.
func (u *UserModelUpsertOne) UpdateRelation() *UserModelUpsertOne {
	return u.Update(func(s *UserModelUpsert) {
		s.UpdateRelation()
	})
}

// SetStatus sets the "status" field.
func (u *UserModelUpsertOne) SetStatus(v enums.UserModelRelationStatus) *UserModelUpsertOne {
	return u.Update(func(s *UserModelUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserModelUpsertOne) UpdateStatus() *UserModelUpsertOne {
	return u.Update(func(s *UserModelUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *UserModelUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for UserModelCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserModelUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserModelUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserModelUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserModelCreateBulk is the builder for creating many UserModel entities in bulk.
type UserModelCreateBulk struct {
	config
	err      error
	builders []*UserModelCreate
	conflict []sql.ConflictOption
}

// Save creates the UserModel entities in the database.
func (umcb *UserModelCreateBulk) Save(ctx context.Context) ([]*UserModel, error) {
	if umcb.err != nil {
		return nil, umcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(umcb.builders))
	nodes := make([]*UserModel, len(umcb.builders))
	mutators := make([]Mutator, len(umcb.builders))
	for i := range umcb.builders {
		func(i int, root context.Context) {
			builder := umcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserModelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, umcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = umcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, umcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, umcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (umcb *UserModelCreateBulk) SaveX(ctx context.Context) []*UserModel {
	v, err := umcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (umcb *UserModelCreateBulk) Exec(ctx context.Context) error {
	_, err := umcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umcb *UserModelCreateBulk) ExecX(ctx context.Context) {
	if err := umcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserModel.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserModelUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (umcb *UserModelCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserModelUpsertBulk {
	umcb.conflict = opts
	return &UserModelUpsertBulk{
		create: umcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserModel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (umcb *UserModelCreateBulk) OnConflictColumns(columns ...string) *UserModelUpsertBulk {
	umcb.conflict = append(umcb.conflict, sql.ConflictColumns(columns...))
	return &UserModelUpsertBulk{
		create: umcb,
	}
}

// UserModelUpsertBulk is the builder for "upsert"-ing
// a bulk of UserModel nodes.
type UserModelUpsertBulk struct {
	create *UserModelCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserModel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(usermodel.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserModelUpsertBulk) UpdateNewValues() *UserModelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(usermodel.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(usermodel.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserModel.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserModelUpsertBulk) Ignore() *UserModelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserModelUpsertBulk) DoNothing() *UserModelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserModelCreateBulk.OnConflict
// documentation for more info.
func (u *UserModelUpsertBulk) Update(set func(*UserModelUpsert)) *UserModelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserModelUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *UserModelUpsertBulk) SetCreatedBy(v int64) *UserModelUpsertBulk {
	return u.Update(func(s *UserModelUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *UserModelUpsertBulk) AddCreatedBy(v int64) *UserModelUpsertBulk {
	return u.Update(func(s *UserModelUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *UserModelUpsertBulk) UpdateCreatedBy() *UserModelUpsertBulk {
	return u.Update(func(s *UserModelUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *UserModelUpsertBulk) SetUpdatedBy(v int64) *UserModelUpsertBulk {
	return u.Update(func(s *UserModelUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *UserModelUpsertBulk) AddUpdatedBy(v int64) *UserModelUpsertBulk {
	return u.Update(func(s *UserModelUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *UserModelUpsertBulk) UpdateUpdatedBy() *UserModelUpsertBulk {
	return u.Update(func(s *UserModelUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserModelUpsertBulk) SetUpdatedAt(v time.Time) *UserModelUpsertBulk {
	return u.Update(func(s *UserModelUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserModelUpsertBulk) UpdateUpdatedAt() *UserModelUpsertBulk {
	return u.Update(func(s *UserModelUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserModelUpsertBulk) SetDeletedAt(v time.Time) *UserModelUpsertBulk {
	return u.Update(func(s *UserModelUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserModelUpsertBulk) UpdateDeletedAt() *UserModelUpsertBulk {
	return u.Update(func(s *UserModelUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *UserModelUpsertBulk) SetUserID(v int64) *UserModelUpsertBulk {
	return u.Update(func(s *UserModelUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserModelUpsertBulk) UpdateUserID() *UserModelUpsertBulk {
	return u.Update(func(s *UserModelUpsert) {
		s.UpdateUserID()
	})
}

// SetModelID sets the "model_id" field.
func (u *UserModelUpsertBulk) SetModelID(v int64) *UserModelUpsertBulk {
	return u.Update(func(s *UserModelUpsert) {
		s.SetModelID(v)
	})
}

// UpdateModelID sets the "model_id" field to the value that was provided on create.
func (u *UserModelUpsertBulk) UpdateModelID() *UserModelUpsertBulk {
	return u.Update(func(s *UserModelUpsert) {
		s.UpdateModelID()
	})
}

// SetRelation sets the "relation" field.
func (u *UserModelUpsertBulk) SetRelation(v enums.UserModelRelation) *UserModelUpsertBulk {
	return u.Update(func(s *UserModelUpsert) {
		s.SetRelation(v)
	})
}

// UpdateRelation sets the "relation" field to the value that was provided on create.
func (u *UserModelUpsertBulk) UpdateRelation() *UserModelUpsertBulk {
	return u.Update(func(s *UserModelUpsert) {
		s.UpdateRelation()
	})
}

// SetStatus sets the "status" field.
func (u *UserModelUpsertBulk) SetStatus(v enums.UserModelRelationStatus) *UserModelUpsertBulk {
	return u.Update(func(s *UserModelUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserModelUpsertBulk) UpdateStatus() *UserModelUpsertBulk {
	return u.Update(func(s *UserModelUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *UserModelUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the UserModelCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for UserModelCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserModelUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
