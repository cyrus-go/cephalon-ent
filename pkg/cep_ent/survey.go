// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/survey"
)

// 问卷表
type Survey struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建者 ID
	CreatedBy int64 `json:"created_by,string"`
	// 更新者 ID
	UpdatedBy int64 `json:"updated_by,string"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// 标题
	Title string `json:"title"`
	// 填写问卷开始的时间
	StartedAt *time.Time `json:"started_at"`
	// 填写问卷结束的时间
	EndedAt *time.Time `json:"ended_at"`
	// 分组排序序列号
	SortNum int64 `json:"sort_num"`
	// 问卷分组（自定义，可以为空），同组问卷可以根据序号强关联
	Group string `json:"group"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SurveyQuery when eager-loading is set.
	Edges        SurveyEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SurveyEdges holds the relations/edges for other nodes in the graph.
type SurveyEdges struct {
	// SurveyQuestions holds the value of the survey_questions edge.
	SurveyQuestions []*SurveyQuestion `json:"survey_questions,omitempty"`
	// SurveyResponses holds the value of the survey_responses edge.
	SurveyResponses []*SurveyResponse `json:"survey_responses,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SurveyQuestionsOrErr returns the SurveyQuestions value or an error if the edge
// was not loaded in eager-loading.
func (e SurveyEdges) SurveyQuestionsOrErr() ([]*SurveyQuestion, error) {
	if e.loadedTypes[0] {
		return e.SurveyQuestions, nil
	}
	return nil, &NotLoadedError{edge: "survey_questions"}
}

// SurveyResponsesOrErr returns the SurveyResponses value or an error if the edge
// was not loaded in eager-loading.
func (e SurveyEdges) SurveyResponsesOrErr() ([]*SurveyResponse, error) {
	if e.loadedTypes[1] {
		return e.SurveyResponses, nil
	}
	return nil, &NotLoadedError{edge: "survey_responses"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Survey) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case survey.FieldID, survey.FieldCreatedBy, survey.FieldUpdatedBy, survey.FieldSortNum:
			values[i] = new(sql.NullInt64)
		case survey.FieldTitle, survey.FieldGroup:
			values[i] = new(sql.NullString)
		case survey.FieldCreatedAt, survey.FieldUpdatedAt, survey.FieldDeletedAt, survey.FieldStartedAt, survey.FieldEndedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Survey fields.
func (s *Survey) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case survey.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int64(value.Int64)
		case survey.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				s.CreatedBy = value.Int64
			}
		case survey.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				s.UpdatedBy = value.Int64
			}
		case survey.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case survey.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case survey.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				s.DeletedAt = value.Time
			}
		case survey.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				s.Title = value.String
			}
		case survey.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				s.StartedAt = new(time.Time)
				*s.StartedAt = value.Time
			}
		case survey.FieldEndedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ended_at", values[i])
			} else if value.Valid {
				s.EndedAt = new(time.Time)
				*s.EndedAt = value.Time
			}
		case survey.FieldSortNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort_num", values[i])
			} else if value.Valid {
				s.SortNum = value.Int64
			}
		case survey.FieldGroup:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field group", values[i])
			} else if value.Valid {
				s.Group = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Survey.
// This includes values selected through modifiers, order, etc.
func (s *Survey) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QuerySurveyQuestions queries the "survey_questions" edge of the Survey entity.
func (s *Survey) QuerySurveyQuestions() *SurveyQuestionQuery {
	return NewSurveyClient(s.config).QuerySurveyQuestions(s)
}

// QuerySurveyResponses queries the "survey_responses" edge of the Survey entity.
func (s *Survey) QuerySurveyResponses() *SurveyResponseQuery {
	return NewSurveyClient(s.config).QuerySurveyResponses(s)
}

// Update returns a builder for updating this Survey.
// Note that you need to call Survey.Unwrap() before calling this method if this Survey
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Survey) Update() *SurveyUpdateOne {
	return NewSurveyClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Survey entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Survey) Unwrap() *Survey {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: Survey is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Survey) String() string {
	var builder strings.Builder
	builder.WriteString("Survey(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", s.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", s.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(s.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(s.Title)
	builder.WriteString(", ")
	if v := s.StartedAt; v != nil {
		builder.WriteString("started_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := s.EndedAt; v != nil {
		builder.WriteString("ended_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("sort_num=")
	builder.WriteString(fmt.Sprintf("%v", s.SortNum))
	builder.WriteString(", ")
	builder.WriteString("group=")
	builder.WriteString(s.Group)
	builder.WriteByte(')')
	return builder.String()
}

// Surveys is a parsable slice of Survey.
type Surveys []*Survey
