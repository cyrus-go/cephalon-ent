// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/giftmissionconfig"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// 补贴任务参数配置（需要初始化数据）
type GiftMissionConfig struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建者 ID
	CreatedBy int64 `json:"created_by,string"`
	// 更新者 ID
	UpdatedBy int64 `json:"updated_by,string"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// 稳定性等级
	StabilityLevel enums.DeviceStabilityType `json:"stability_level"`
	// GPU 版本
	GpuVersion enums.GpuVersion `json:"gpu_version"`
	// 间隔基数
	GapBase int64 `json:"gap_base"`
	// 间隔随机范围最大值
	GapRandomMax int64 `json:"gap_random_max"`
	// 间隔随机范围最小值
	GapRandomMin int64 `json:"gap_random_min"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GiftMissionConfigQuery when eager-loading is set.
	Edges        GiftMissionConfigEdges `json:"edges"`
	selectValues sql.SelectValues
}

// GiftMissionConfigEdges holds the relations/edges for other nodes in the graph.
type GiftMissionConfigEdges struct {
	// Devices holds the value of the devices edge.
	Devices []*Device `json:"devices,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DevicesOrErr returns the Devices value or an error if the edge
// was not loaded in eager-loading.
func (e GiftMissionConfigEdges) DevicesOrErr() ([]*Device, error) {
	if e.loadedTypes[0] {
		return e.Devices, nil
	}
	return nil, &NotLoadedError{edge: "devices"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GiftMissionConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case giftmissionconfig.FieldID, giftmissionconfig.FieldCreatedBy, giftmissionconfig.FieldUpdatedBy, giftmissionconfig.FieldGapBase, giftmissionconfig.FieldGapRandomMax, giftmissionconfig.FieldGapRandomMin:
			values[i] = new(sql.NullInt64)
		case giftmissionconfig.FieldStabilityLevel, giftmissionconfig.FieldGpuVersion:
			values[i] = new(sql.NullString)
		case giftmissionconfig.FieldCreatedAt, giftmissionconfig.FieldUpdatedAt, giftmissionconfig.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GiftMissionConfig fields.
func (gmc *GiftMissionConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case giftmissionconfig.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gmc.ID = int64(value.Int64)
		case giftmissionconfig.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				gmc.CreatedBy = value.Int64
			}
		case giftmissionconfig.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				gmc.UpdatedBy = value.Int64
			}
		case giftmissionconfig.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gmc.CreatedAt = value.Time
			}
		case giftmissionconfig.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				gmc.UpdatedAt = value.Time
			}
		case giftmissionconfig.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				gmc.DeletedAt = value.Time
			}
		case giftmissionconfig.FieldStabilityLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stability_level", values[i])
			} else if value.Valid {
				gmc.StabilityLevel = enums.DeviceStabilityType(value.String)
			}
		case giftmissionconfig.FieldGpuVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gpu_version", values[i])
			} else if value.Valid {
				gmc.GpuVersion = enums.GpuVersion(value.String)
			}
		case giftmissionconfig.FieldGapBase:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gap_base", values[i])
			} else if value.Valid {
				gmc.GapBase = value.Int64
			}
		case giftmissionconfig.FieldGapRandomMax:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gap_random_max", values[i])
			} else if value.Valid {
				gmc.GapRandomMax = value.Int64
			}
		case giftmissionconfig.FieldGapRandomMin:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gap_random_min", values[i])
			} else if value.Valid {
				gmc.GapRandomMin = value.Int64
			}
		default:
			gmc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GiftMissionConfig.
// This includes values selected through modifiers, order, etc.
func (gmc *GiftMissionConfig) Value(name string) (ent.Value, error) {
	return gmc.selectValues.Get(name)
}

// QueryDevices queries the "devices" edge of the GiftMissionConfig entity.
func (gmc *GiftMissionConfig) QueryDevices() *DeviceQuery {
	return NewGiftMissionConfigClient(gmc.config).QueryDevices(gmc)
}

// Update returns a builder for updating this GiftMissionConfig.
// Note that you need to call GiftMissionConfig.Unwrap() before calling this method if this GiftMissionConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (gmc *GiftMissionConfig) Update() *GiftMissionConfigUpdateOne {
	return NewGiftMissionConfigClient(gmc.config).UpdateOne(gmc)
}

// Unwrap unwraps the GiftMissionConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gmc *GiftMissionConfig) Unwrap() *GiftMissionConfig {
	_tx, ok := gmc.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: GiftMissionConfig is not a transactional entity")
	}
	gmc.config.driver = _tx.drv
	return gmc
}

// String implements the fmt.Stringer.
func (gmc *GiftMissionConfig) String() string {
	var builder strings.Builder
	builder.WriteString("GiftMissionConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gmc.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", gmc.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", gmc.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(gmc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(gmc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(gmc.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("stability_level=")
	builder.WriteString(fmt.Sprintf("%v", gmc.StabilityLevel))
	builder.WriteString(", ")
	builder.WriteString("gpu_version=")
	builder.WriteString(fmt.Sprintf("%v", gmc.GpuVersion))
	builder.WriteString(", ")
	builder.WriteString("gap_base=")
	builder.WriteString(fmt.Sprintf("%v", gmc.GapBase))
	builder.WriteString(", ")
	builder.WriteString("gap_random_max=")
	builder.WriteString(fmt.Sprintf("%v", gmc.GapRandomMax))
	builder.WriteString(", ")
	builder.WriteString("gap_random_min=")
	builder.WriteString(fmt.Sprintf("%v", gmc.GapRandomMin))
	builder.WriteByte(')')
	return builder.String()
}

// GiftMissionConfigs is a parsable slice of GiftMissionConfig.
type GiftMissionConfigs []*GiftMissionConfig
