// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/modelstar"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// ModelStarDelete is the builder for deleting a ModelStar entity.
type ModelStarDelete struct {
	config
	hooks    []Hook
	mutation *ModelStarMutation
}

// Where appends a list predicates to the ModelStarDelete builder.
func (msd *ModelStarDelete) Where(ps ...predicate.ModelStar) *ModelStarDelete {
	msd.mutation.Where(ps...)
	return msd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (msd *ModelStarDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, msd.sqlExec, msd.mutation, msd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (msd *ModelStarDelete) ExecX(ctx context.Context) int {
	n, err := msd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (msd *ModelStarDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(modelstar.Table, sqlgraph.NewFieldSpec(modelstar.FieldID, field.TypeInt64))
	if ps := msd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, msd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	msd.mutation.done = true
	return affected, err
}

// ModelStarDeleteOne is the builder for deleting a single ModelStar entity.
type ModelStarDeleteOne struct {
	msd *ModelStarDelete
}

// Where appends a list predicates to the ModelStarDelete builder.
func (msdo *ModelStarDeleteOne) Where(ps ...predicate.ModelStar) *ModelStarDeleteOne {
	msdo.msd.mutation.Where(ps...)
	return msdo
}

// Exec executes the deletion query.
func (msdo *ModelStarDeleteOne) Exec(ctx context.Context) error {
	n, err := msdo.msd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{modelstar.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (msdo *ModelStarDeleteOne) ExecX(ctx context.Context) {
	if err := msdo.Exec(ctx); err != nil {
		panic(err)
	}
}
