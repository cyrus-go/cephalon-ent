// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/campaignorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/rechargeorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/vxsocial"
)

// 充值订单，被 transfer_orders 取代，充值定义为从上帝账户转账到用户
type RechargeOrder struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建者 ID
	CreatedBy int64 `json:"created_by,string"`
	// 更新者 ID
	UpdatedBy int64 `json:"updated_by,string"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// 充值的用户 id
	UserID int64 `json:"user_id"`
	// 充值订单的状态，比如微信发起支付后可能没完成支付
	Status rechargeorder.Status `json:"status"`
	// 充值多少本金
	PureCep int64 `json:"pure_cep"`
	// 赠金
	GiftCep int64 `json:"gift_cep"`
	// 关联充值来源的身份源 id
	SocialID int64 `json:"social_id"`
	// 充值订单的类型
	Type rechargeorder.Type `json:"type"`
	// 充值订单的序列号
	SerialNumber string `json:"serial_number"`
	// 第三方平台的返回，给到前端才能发起支付
	ThirdAPIResp string `json:"third_api_resp"`
	// 由谁发起的充值
	FromUserID int64 `json:"from_user_id"`
	// 平台方订单号
	OutTransactionID string `json:"out_transaction_id"`
	// 活动订单 id
	CampaignOrderID *int64 `json:"campaign_order_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RechargeOrderQuery when eager-loading is set.
	Edges        RechargeOrderEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RechargeOrderEdges holds the relations/edges for other nodes in the graph.
type RechargeOrderEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// CostBills holds the value of the cost_bills edge.
	CostBills []*CostBill `json:"cost_bills,omitempty"`
	// VxSocial holds the value of the vx_social edge.
	VxSocial *VXSocial `json:"vx_social,omitempty"`
	// CampaignOrder holds the value of the campaign_order edge.
	CampaignOrder *CampaignOrder `json:"campaign_order,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RechargeOrderEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// CostBillsOrErr returns the CostBills value or an error if the edge
// was not loaded in eager-loading.
func (e RechargeOrderEdges) CostBillsOrErr() ([]*CostBill, error) {
	if e.loadedTypes[1] {
		return e.CostBills, nil
	}
	return nil, &NotLoadedError{edge: "cost_bills"}
}

// VxSocialOrErr returns the VxSocial value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RechargeOrderEdges) VxSocialOrErr() (*VXSocial, error) {
	if e.loadedTypes[2] {
		if e.VxSocial == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: vxsocial.Label}
		}
		return e.VxSocial, nil
	}
	return nil, &NotLoadedError{edge: "vx_social"}
}

// CampaignOrderOrErr returns the CampaignOrder value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RechargeOrderEdges) CampaignOrderOrErr() (*CampaignOrder, error) {
	if e.loadedTypes[3] {
		if e.CampaignOrder == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: campaignorder.Label}
		}
		return e.CampaignOrder, nil
	}
	return nil, &NotLoadedError{edge: "campaign_order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RechargeOrder) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rechargeorder.FieldID, rechargeorder.FieldCreatedBy, rechargeorder.FieldUpdatedBy, rechargeorder.FieldUserID, rechargeorder.FieldPureCep, rechargeorder.FieldGiftCep, rechargeorder.FieldSocialID, rechargeorder.FieldFromUserID, rechargeorder.FieldCampaignOrderID:
			values[i] = new(sql.NullInt64)
		case rechargeorder.FieldStatus, rechargeorder.FieldType, rechargeorder.FieldSerialNumber, rechargeorder.FieldThirdAPIResp, rechargeorder.FieldOutTransactionID:
			values[i] = new(sql.NullString)
		case rechargeorder.FieldCreatedAt, rechargeorder.FieldUpdatedAt, rechargeorder.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RechargeOrder fields.
func (ro *RechargeOrder) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rechargeorder.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ro.ID = int64(value.Int64)
		case rechargeorder.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ro.CreatedBy = value.Int64
			}
		case rechargeorder.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ro.UpdatedBy = value.Int64
			}
		case rechargeorder.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ro.CreatedAt = value.Time
			}
		case rechargeorder.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ro.UpdatedAt = value.Time
			}
		case rechargeorder.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ro.DeletedAt = value.Time
			}
		case rechargeorder.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ro.UserID = value.Int64
			}
		case rechargeorder.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ro.Status = rechargeorder.Status(value.String)
			}
		case rechargeorder.FieldPureCep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pure_cep", values[i])
			} else if value.Valid {
				ro.PureCep = value.Int64
			}
		case rechargeorder.FieldGiftCep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gift_cep", values[i])
			} else if value.Valid {
				ro.GiftCep = value.Int64
			}
		case rechargeorder.FieldSocialID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field social_id", values[i])
			} else if value.Valid {
				ro.SocialID = value.Int64
			}
		case rechargeorder.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ro.Type = rechargeorder.Type(value.String)
			}
		case rechargeorder.FieldSerialNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field serial_number", values[i])
			} else if value.Valid {
				ro.SerialNumber = value.String
			}
		case rechargeorder.FieldThirdAPIResp:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field third_api_resp", values[i])
			} else if value.Valid {
				ro.ThirdAPIResp = value.String
			}
		case rechargeorder.FieldFromUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field from_user_id", values[i])
			} else if value.Valid {
				ro.FromUserID = value.Int64
			}
		case rechargeorder.FieldOutTransactionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field out_transaction_id", values[i])
			} else if value.Valid {
				ro.OutTransactionID = value.String
			}
		case rechargeorder.FieldCampaignOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field campaign_order_id", values[i])
			} else if value.Valid {
				ro.CampaignOrderID = new(int64)
				*ro.CampaignOrderID = value.Int64
			}
		default:
			ro.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RechargeOrder.
// This includes values selected through modifiers, order, etc.
func (ro *RechargeOrder) Value(name string) (ent.Value, error) {
	return ro.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the RechargeOrder entity.
func (ro *RechargeOrder) QueryUser() *UserQuery {
	return NewRechargeOrderClient(ro.config).QueryUser(ro)
}

// QueryCostBills queries the "cost_bills" edge of the RechargeOrder entity.
func (ro *RechargeOrder) QueryCostBills() *CostBillQuery {
	return NewRechargeOrderClient(ro.config).QueryCostBills(ro)
}

// QueryVxSocial queries the "vx_social" edge of the RechargeOrder entity.
func (ro *RechargeOrder) QueryVxSocial() *VXSocialQuery {
	return NewRechargeOrderClient(ro.config).QueryVxSocial(ro)
}

// QueryCampaignOrder queries the "campaign_order" edge of the RechargeOrder entity.
func (ro *RechargeOrder) QueryCampaignOrder() *CampaignOrderQuery {
	return NewRechargeOrderClient(ro.config).QueryCampaignOrder(ro)
}

// Update returns a builder for updating this RechargeOrder.
// Note that you need to call RechargeOrder.Unwrap() before calling this method if this RechargeOrder
// was returned from a transaction, and the transaction was committed or rolled back.
func (ro *RechargeOrder) Update() *RechargeOrderUpdateOne {
	return NewRechargeOrderClient(ro.config).UpdateOne(ro)
}

// Unwrap unwraps the RechargeOrder entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ro *RechargeOrder) Unwrap() *RechargeOrder {
	_tx, ok := ro.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: RechargeOrder is not a transactional entity")
	}
	ro.config.driver = _tx.drv
	return ro
}

// String implements the fmt.Stringer.
func (ro *RechargeOrder) String() string {
	var builder strings.Builder
	builder.WriteString("RechargeOrder(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ro.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", ro.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", ro.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ro.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ro.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(ro.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ro.UserID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ro.Status))
	builder.WriteString(", ")
	builder.WriteString("pure_cep=")
	builder.WriteString(fmt.Sprintf("%v", ro.PureCep))
	builder.WriteString(", ")
	builder.WriteString("gift_cep=")
	builder.WriteString(fmt.Sprintf("%v", ro.GiftCep))
	builder.WriteString(", ")
	builder.WriteString("social_id=")
	builder.WriteString(fmt.Sprintf("%v", ro.SocialID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", ro.Type))
	builder.WriteString(", ")
	builder.WriteString("serial_number=")
	builder.WriteString(ro.SerialNumber)
	builder.WriteString(", ")
	builder.WriteString("third_api_resp=")
	builder.WriteString(ro.ThirdAPIResp)
	builder.WriteString(", ")
	builder.WriteString("from_user_id=")
	builder.WriteString(fmt.Sprintf("%v", ro.FromUserID))
	builder.WriteString(", ")
	builder.WriteString("out_transaction_id=")
	builder.WriteString(ro.OutTransactionID)
	builder.WriteString(", ")
	if v := ro.CampaignOrderID; v != nil {
		builder.WriteString("campaign_order_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// RechargeOrders is a parsable slice of RechargeOrder.
type RechargeOrders []*RechargeOrder
