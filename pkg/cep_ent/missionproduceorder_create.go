// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/device"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/earnbill"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionconsumeorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionproduceorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// MissionProduceOrderCreate is the builder for creating a MissionProduceOrder entity.
type MissionProduceOrderCreate struct {
	config
	mutation *MissionProduceOrderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (mpoc *MissionProduceOrderCreate) SetCreatedBy(i int64) *MissionProduceOrderCreate {
	mpoc.mutation.SetCreatedBy(i)
	return mpoc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mpoc *MissionProduceOrderCreate) SetNillableCreatedBy(i *int64) *MissionProduceOrderCreate {
	if i != nil {
		mpoc.SetCreatedBy(*i)
	}
	return mpoc
}

// SetUpdatedBy sets the "updated_by" field.
func (mpoc *MissionProduceOrderCreate) SetUpdatedBy(i int64) *MissionProduceOrderCreate {
	mpoc.mutation.SetUpdatedBy(i)
	return mpoc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mpoc *MissionProduceOrderCreate) SetNillableUpdatedBy(i *int64) *MissionProduceOrderCreate {
	if i != nil {
		mpoc.SetUpdatedBy(*i)
	}
	return mpoc
}

// SetCreatedAt sets the "created_at" field.
func (mpoc *MissionProduceOrderCreate) SetCreatedAt(t time.Time) *MissionProduceOrderCreate {
	mpoc.mutation.SetCreatedAt(t)
	return mpoc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mpoc *MissionProduceOrderCreate) SetNillableCreatedAt(t *time.Time) *MissionProduceOrderCreate {
	if t != nil {
		mpoc.SetCreatedAt(*t)
	}
	return mpoc
}

// SetUpdatedAt sets the "updated_at" field.
func (mpoc *MissionProduceOrderCreate) SetUpdatedAt(t time.Time) *MissionProduceOrderCreate {
	mpoc.mutation.SetUpdatedAt(t)
	return mpoc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mpoc *MissionProduceOrderCreate) SetNillableUpdatedAt(t *time.Time) *MissionProduceOrderCreate {
	if t != nil {
		mpoc.SetUpdatedAt(*t)
	}
	return mpoc
}

// SetDeletedAt sets the "deleted_at" field.
func (mpoc *MissionProduceOrderCreate) SetDeletedAt(t time.Time) *MissionProduceOrderCreate {
	mpoc.mutation.SetDeletedAt(t)
	return mpoc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mpoc *MissionProduceOrderCreate) SetNillableDeletedAt(t *time.Time) *MissionProduceOrderCreate {
	if t != nil {
		mpoc.SetDeletedAt(*t)
	}
	return mpoc
}

// SetUserID sets the "user_id" field.
func (mpoc *MissionProduceOrderCreate) SetUserID(i int64) *MissionProduceOrderCreate {
	mpoc.mutation.SetUserID(i)
	return mpoc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (mpoc *MissionProduceOrderCreate) SetNillableUserID(i *int64) *MissionProduceOrderCreate {
	if i != nil {
		mpoc.SetUserID(*i)
	}
	return mpoc
}

// SetMissionID sets the "mission_id" field.
func (mpoc *MissionProduceOrderCreate) SetMissionID(i int64) *MissionProduceOrderCreate {
	mpoc.mutation.SetMissionID(i)
	return mpoc
}

// SetNillableMissionID sets the "mission_id" field if the given value is not nil.
func (mpoc *MissionProduceOrderCreate) SetNillableMissionID(i *int64) *MissionProduceOrderCreate {
	if i != nil {
		mpoc.SetMissionID(*i)
	}
	return mpoc
}

// SetStatus sets the "status" field.
func (mpoc *MissionProduceOrderCreate) SetStatus(eos enums.MissionOrderStatus) *MissionProduceOrderCreate {
	mpoc.mutation.SetStatus(eos)
	return mpoc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mpoc *MissionProduceOrderCreate) SetNillableStatus(eos *enums.MissionOrderStatus) *MissionProduceOrderCreate {
	if eos != nil {
		mpoc.SetStatus(*eos)
	}
	return mpoc
}

// SetPureCep sets the "pure_cep" field.
func (mpoc *MissionProduceOrderCreate) SetPureCep(i int64) *MissionProduceOrderCreate {
	mpoc.mutation.SetPureCep(i)
	return mpoc
}

// SetNillablePureCep sets the "pure_cep" field if the given value is not nil.
func (mpoc *MissionProduceOrderCreate) SetNillablePureCep(i *int64) *MissionProduceOrderCreate {
	if i != nil {
		mpoc.SetPureCep(*i)
	}
	return mpoc
}

// SetGiftCep sets the "gift_cep" field.
func (mpoc *MissionProduceOrderCreate) SetGiftCep(i int64) *MissionProduceOrderCreate {
	mpoc.mutation.SetGiftCep(i)
	return mpoc
}

// SetNillableGiftCep sets the "gift_cep" field if the given value is not nil.
func (mpoc *MissionProduceOrderCreate) SetNillableGiftCep(i *int64) *MissionProduceOrderCreate {
	if i != nil {
		mpoc.SetGiftCep(*i)
	}
	return mpoc
}

// SetType sets the "type" field.
func (mpoc *MissionProduceOrderCreate) SetType(et enums.MissionType) *MissionProduceOrderCreate {
	mpoc.mutation.SetType(et)
	return mpoc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mpoc *MissionProduceOrderCreate) SetNillableType(et *enums.MissionType) *MissionProduceOrderCreate {
	if et != nil {
		mpoc.SetType(*et)
	}
	return mpoc
}

// SetIsTime sets the "is_time" field.
func (mpoc *MissionProduceOrderCreate) SetIsTime(b bool) *MissionProduceOrderCreate {
	mpoc.mutation.SetIsTime(b)
	return mpoc
}

// SetNillableIsTime sets the "is_time" field if the given value is not nil.
func (mpoc *MissionProduceOrderCreate) SetNillableIsTime(b *bool) *MissionProduceOrderCreate {
	if b != nil {
		mpoc.SetIsTime(*b)
	}
	return mpoc
}

// SetDeviceID sets the "device_id" field.
func (mpoc *MissionProduceOrderCreate) SetDeviceID(i int64) *MissionProduceOrderCreate {
	mpoc.mutation.SetDeviceID(i)
	return mpoc
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (mpoc *MissionProduceOrderCreate) SetNillableDeviceID(i *int64) *MissionProduceOrderCreate {
	if i != nil {
		mpoc.SetDeviceID(*i)
	}
	return mpoc
}

// SetSerialNumber sets the "serial_number" field.
func (mpoc *MissionProduceOrderCreate) SetSerialNumber(s string) *MissionProduceOrderCreate {
	mpoc.mutation.SetSerialNumber(s)
	return mpoc
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (mpoc *MissionProduceOrderCreate) SetNillableSerialNumber(s *string) *MissionProduceOrderCreate {
	if s != nil {
		mpoc.SetSerialNumber(*s)
	}
	return mpoc
}

// SetMissionConsumeOrderID sets the "mission_consume_order_id" field.
func (mpoc *MissionProduceOrderCreate) SetMissionConsumeOrderID(i int64) *MissionProduceOrderCreate {
	mpoc.mutation.SetMissionConsumeOrderID(i)
	return mpoc
}

// SetNillableMissionConsumeOrderID sets the "mission_consume_order_id" field if the given value is not nil.
func (mpoc *MissionProduceOrderCreate) SetNillableMissionConsumeOrderID(i *int64) *MissionProduceOrderCreate {
	if i != nil {
		mpoc.SetMissionConsumeOrderID(*i)
	}
	return mpoc
}

// SetID sets the "id" field.
func (mpoc *MissionProduceOrderCreate) SetID(i int64) *MissionProduceOrderCreate {
	mpoc.mutation.SetID(i)
	return mpoc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mpoc *MissionProduceOrderCreate) SetNillableID(i *int64) *MissionProduceOrderCreate {
	if i != nil {
		mpoc.SetID(*i)
	}
	return mpoc
}

// SetUser sets the "user" edge to the User entity.
func (mpoc *MissionProduceOrderCreate) SetUser(u *User) *MissionProduceOrderCreate {
	return mpoc.SetUserID(u.ID)
}

// AddEarnBillIDs adds the "earn_bills" edge to the EarnBill entity by IDs.
func (mpoc *MissionProduceOrderCreate) AddEarnBillIDs(ids ...int64) *MissionProduceOrderCreate {
	mpoc.mutation.AddEarnBillIDs(ids...)
	return mpoc
}

// AddEarnBills adds the "earn_bills" edges to the EarnBill entity.
func (mpoc *MissionProduceOrderCreate) AddEarnBills(e ...*EarnBill) *MissionProduceOrderCreate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return mpoc.AddEarnBillIDs(ids...)
}

// SetDevice sets the "device" edge to the Device entity.
func (mpoc *MissionProduceOrderCreate) SetDevice(d *Device) *MissionProduceOrderCreate {
	return mpoc.SetDeviceID(d.ID)
}

// SetMissionConsumeOrder sets the "mission_consume_order" edge to the MissionConsumeOrder entity.
func (mpoc *MissionProduceOrderCreate) SetMissionConsumeOrder(m *MissionConsumeOrder) *MissionProduceOrderCreate {
	return mpoc.SetMissionConsumeOrderID(m.ID)
}

// Mutation returns the MissionProduceOrderMutation object of the builder.
func (mpoc *MissionProduceOrderCreate) Mutation() *MissionProduceOrderMutation {
	return mpoc.mutation
}

// Save creates the MissionProduceOrder in the database.
func (mpoc *MissionProduceOrderCreate) Save(ctx context.Context) (*MissionProduceOrder, error) {
	mpoc.defaults()
	return withHooks(ctx, mpoc.sqlSave, mpoc.mutation, mpoc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mpoc *MissionProduceOrderCreate) SaveX(ctx context.Context) *MissionProduceOrder {
	v, err := mpoc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mpoc *MissionProduceOrderCreate) Exec(ctx context.Context) error {
	_, err := mpoc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpoc *MissionProduceOrderCreate) ExecX(ctx context.Context) {
	if err := mpoc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpoc *MissionProduceOrderCreate) defaults() {
	if _, ok := mpoc.mutation.CreatedBy(); !ok {
		v := missionproduceorder.DefaultCreatedBy
		mpoc.mutation.SetCreatedBy(v)
	}
	if _, ok := mpoc.mutation.UpdatedBy(); !ok {
		v := missionproduceorder.DefaultUpdatedBy
		mpoc.mutation.SetUpdatedBy(v)
	}
	if _, ok := mpoc.mutation.CreatedAt(); !ok {
		v := missionproduceorder.DefaultCreatedAt()
		mpoc.mutation.SetCreatedAt(v)
	}
	if _, ok := mpoc.mutation.UpdatedAt(); !ok {
		v := missionproduceorder.DefaultUpdatedAt()
		mpoc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mpoc.mutation.DeletedAt(); !ok {
		v := missionproduceorder.DefaultDeletedAt
		mpoc.mutation.SetDeletedAt(v)
	}
	if _, ok := mpoc.mutation.UserID(); !ok {
		v := missionproduceorder.DefaultUserID
		mpoc.mutation.SetUserID(v)
	}
	if _, ok := mpoc.mutation.MissionID(); !ok {
		v := missionproduceorder.DefaultMissionID
		mpoc.mutation.SetMissionID(v)
	}
	if _, ok := mpoc.mutation.Status(); !ok {
		v := missionproduceorder.DefaultStatus
		mpoc.mutation.SetStatus(v)
	}
	if _, ok := mpoc.mutation.PureCep(); !ok {
		v := missionproduceorder.DefaultPureCep
		mpoc.mutation.SetPureCep(v)
	}
	if _, ok := mpoc.mutation.GiftCep(); !ok {
		v := missionproduceorder.DefaultGiftCep
		mpoc.mutation.SetGiftCep(v)
	}
	if _, ok := mpoc.mutation.GetType(); !ok {
		v := missionproduceorder.DefaultType
		mpoc.mutation.SetType(v)
	}
	if _, ok := mpoc.mutation.IsTime(); !ok {
		v := missionproduceorder.DefaultIsTime
		mpoc.mutation.SetIsTime(v)
	}
	if _, ok := mpoc.mutation.DeviceID(); !ok {
		v := missionproduceorder.DefaultDeviceID
		mpoc.mutation.SetDeviceID(v)
	}
	if _, ok := mpoc.mutation.SerialNumber(); !ok {
		v := missionproduceorder.DefaultSerialNumber
		mpoc.mutation.SetSerialNumber(v)
	}
	if _, ok := mpoc.mutation.MissionConsumeOrderID(); !ok {
		v := missionproduceorder.DefaultMissionConsumeOrderID
		mpoc.mutation.SetMissionConsumeOrderID(v)
	}
	if _, ok := mpoc.mutation.ID(); !ok {
		v := missionproduceorder.DefaultID()
		mpoc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpoc *MissionProduceOrderCreate) check() error {
	if _, ok := mpoc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "MissionProduceOrder.created_by"`)}
	}
	if _, ok := mpoc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "MissionProduceOrder.updated_by"`)}
	}
	if _, ok := mpoc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "MissionProduceOrder.created_at"`)}
	}
	if _, ok := mpoc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "MissionProduceOrder.updated_at"`)}
	}
	if _, ok := mpoc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "MissionProduceOrder.deleted_at"`)}
	}
	if _, ok := mpoc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "MissionProduceOrder.user_id"`)}
	}
	if _, ok := mpoc.mutation.MissionID(); !ok {
		return &ValidationError{Name: "mission_id", err: errors.New(`cep_ent: missing required field "MissionProduceOrder.mission_id"`)}
	}
	if _, ok := mpoc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`cep_ent: missing required field "MissionProduceOrder.status"`)}
	}
	if v, ok := mpoc.mutation.Status(); ok {
		if err := missionproduceorder.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "MissionProduceOrder.status": %w`, err)}
		}
	}
	if _, ok := mpoc.mutation.PureCep(); !ok {
		return &ValidationError{Name: "pure_cep", err: errors.New(`cep_ent: missing required field "MissionProduceOrder.pure_cep"`)}
	}
	if _, ok := mpoc.mutation.GiftCep(); !ok {
		return &ValidationError{Name: "gift_cep", err: errors.New(`cep_ent: missing required field "MissionProduceOrder.gift_cep"`)}
	}
	if _, ok := mpoc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`cep_ent: missing required field "MissionProduceOrder.type"`)}
	}
	if v, ok := mpoc.mutation.GetType(); ok {
		if err := missionproduceorder.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "MissionProduceOrder.type": %w`, err)}
		}
	}
	if _, ok := mpoc.mutation.IsTime(); !ok {
		return &ValidationError{Name: "is_time", err: errors.New(`cep_ent: missing required field "MissionProduceOrder.is_time"`)}
	}
	if _, ok := mpoc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`cep_ent: missing required field "MissionProduceOrder.device_id"`)}
	}
	if _, ok := mpoc.mutation.SerialNumber(); !ok {
		return &ValidationError{Name: "serial_number", err: errors.New(`cep_ent: missing required field "MissionProduceOrder.serial_number"`)}
	}
	if _, ok := mpoc.mutation.MissionConsumeOrderID(); !ok {
		return &ValidationError{Name: "mission_consume_order_id", err: errors.New(`cep_ent: missing required field "MissionProduceOrder.mission_consume_order_id"`)}
	}
	if _, ok := mpoc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "MissionProduceOrder.user"`)}
	}
	if _, ok := mpoc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device", err: errors.New(`cep_ent: missing required edge "MissionProduceOrder.device"`)}
	}
	if _, ok := mpoc.mutation.MissionConsumeOrderID(); !ok {
		return &ValidationError{Name: "mission_consume_order", err: errors.New(`cep_ent: missing required edge "MissionProduceOrder.mission_consume_order"`)}
	}
	return nil
}

func (mpoc *MissionProduceOrderCreate) sqlSave(ctx context.Context) (*MissionProduceOrder, error) {
	if err := mpoc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mpoc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mpoc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	mpoc.mutation.id = &_node.ID
	mpoc.mutation.done = true
	return _node, nil
}

func (mpoc *MissionProduceOrderCreate) createSpec() (*MissionProduceOrder, *sqlgraph.CreateSpec) {
	var (
		_node = &MissionProduceOrder{config: mpoc.config}
		_spec = sqlgraph.NewCreateSpec(missionproduceorder.Table, sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = mpoc.conflict
	if id, ok := mpoc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mpoc.mutation.CreatedBy(); ok {
		_spec.SetField(missionproduceorder.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := mpoc.mutation.UpdatedBy(); ok {
		_spec.SetField(missionproduceorder.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := mpoc.mutation.CreatedAt(); ok {
		_spec.SetField(missionproduceorder.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mpoc.mutation.UpdatedAt(); ok {
		_spec.SetField(missionproduceorder.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mpoc.mutation.DeletedAt(); ok {
		_spec.SetField(missionproduceorder.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := mpoc.mutation.MissionID(); ok {
		_spec.SetField(missionproduceorder.FieldMissionID, field.TypeInt64, value)
		_node.MissionID = value
	}
	if value, ok := mpoc.mutation.Status(); ok {
		_spec.SetField(missionproduceorder.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := mpoc.mutation.PureCep(); ok {
		_spec.SetField(missionproduceorder.FieldPureCep, field.TypeInt64, value)
		_node.PureCep = value
	}
	if value, ok := mpoc.mutation.GiftCep(); ok {
		_spec.SetField(missionproduceorder.FieldGiftCep, field.TypeInt64, value)
		_node.GiftCep = value
	}
	if value, ok := mpoc.mutation.GetType(); ok {
		_spec.SetField(missionproduceorder.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := mpoc.mutation.IsTime(); ok {
		_spec.SetField(missionproduceorder.FieldIsTime, field.TypeBool, value)
		_node.IsTime = value
	}
	if value, ok := mpoc.mutation.SerialNumber(); ok {
		_spec.SetField(missionproduceorder.FieldSerialNumber, field.TypeString, value)
		_node.SerialNumber = value
	}
	if nodes := mpoc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduceorder.UserTable,
			Columns: []string{missionproduceorder.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mpoc.mutation.EarnBillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionproduceorder.EarnBillsTable,
			Columns: []string{missionproduceorder.EarnBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earnbill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mpoc.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduceorder.DeviceTable,
			Columns: []string{missionproduceorder.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DeviceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mpoc.mutation.MissionConsumeOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduceorder.MissionConsumeOrderTable,
			Columns: []string{missionproduceorder.MissionConsumeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MissionConsumeOrderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MissionProduceOrder.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MissionProduceOrderUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (mpoc *MissionProduceOrderCreate) OnConflict(opts ...sql.ConflictOption) *MissionProduceOrderUpsertOne {
	mpoc.conflict = opts
	return &MissionProduceOrderUpsertOne{
		create: mpoc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MissionProduceOrder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mpoc *MissionProduceOrderCreate) OnConflictColumns(columns ...string) *MissionProduceOrderUpsertOne {
	mpoc.conflict = append(mpoc.conflict, sql.ConflictColumns(columns...))
	return &MissionProduceOrderUpsertOne{
		create: mpoc,
	}
}

type (
	// MissionProduceOrderUpsertOne is the builder for "upsert"-ing
	//  one MissionProduceOrder node.
	MissionProduceOrderUpsertOne struct {
		create *MissionProduceOrderCreate
	}

	// MissionProduceOrderUpsert is the "OnConflict" setter.
	MissionProduceOrderUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *MissionProduceOrderUpsert) SetCreatedBy(v int64) *MissionProduceOrderUpsert {
	u.Set(missionproduceorder.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MissionProduceOrderUpsert) UpdateCreatedBy() *MissionProduceOrderUpsert {
	u.SetExcluded(missionproduceorder.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *MissionProduceOrderUpsert) AddCreatedBy(v int64) *MissionProduceOrderUpsert {
	u.Add(missionproduceorder.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MissionProduceOrderUpsert) SetUpdatedBy(v int64) *MissionProduceOrderUpsert {
	u.Set(missionproduceorder.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MissionProduceOrderUpsert) UpdateUpdatedBy() *MissionProduceOrderUpsert {
	u.SetExcluded(missionproduceorder.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MissionProduceOrderUpsert) AddUpdatedBy(v int64) *MissionProduceOrderUpsert {
	u.Add(missionproduceorder.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MissionProduceOrderUpsert) SetUpdatedAt(v time.Time) *MissionProduceOrderUpsert {
	u.Set(missionproduceorder.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MissionProduceOrderUpsert) UpdateUpdatedAt() *MissionProduceOrderUpsert {
	u.SetExcluded(missionproduceorder.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MissionProduceOrderUpsert) SetDeletedAt(v time.Time) *MissionProduceOrderUpsert {
	u.Set(missionproduceorder.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MissionProduceOrderUpsert) UpdateDeletedAt() *MissionProduceOrderUpsert {
	u.SetExcluded(missionproduceorder.FieldDeletedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *MissionProduceOrderUpsert) SetUserID(v int64) *MissionProduceOrderUpsert {
	u.Set(missionproduceorder.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *MissionProduceOrderUpsert) UpdateUserID() *MissionProduceOrderUpsert {
	u.SetExcluded(missionproduceorder.FieldUserID)
	return u
}

// SetMissionID sets the "mission_id" field.
func (u *MissionProduceOrderUpsert) SetMissionID(v int64) *MissionProduceOrderUpsert {
	u.Set(missionproduceorder.FieldMissionID, v)
	return u
}

// UpdateMissionID sets the "mission_id" field to the value that was provided on create.
func (u *MissionProduceOrderUpsert) UpdateMissionID() *MissionProduceOrderUpsert {
	u.SetExcluded(missionproduceorder.FieldMissionID)
	return u
}

// AddMissionID adds v to the "mission_id" field.
func (u *MissionProduceOrderUpsert) AddMissionID(v int64) *MissionProduceOrderUpsert {
	u.Add(missionproduceorder.FieldMissionID, v)
	return u
}

// SetStatus sets the "status" field.
func (u *MissionProduceOrderUpsert) SetStatus(v enums.MissionOrderStatus) *MissionProduceOrderUpsert {
	u.Set(missionproduceorder.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MissionProduceOrderUpsert) UpdateStatus() *MissionProduceOrderUpsert {
	u.SetExcluded(missionproduceorder.FieldStatus)
	return u
}

// SetPureCep sets the "pure_cep" field.
func (u *MissionProduceOrderUpsert) SetPureCep(v int64) *MissionProduceOrderUpsert {
	u.Set(missionproduceorder.FieldPureCep, v)
	return u
}

// UpdatePureCep sets the "pure_cep" field to the value that was provided on create.
func (u *MissionProduceOrderUpsert) UpdatePureCep() *MissionProduceOrderUpsert {
	u.SetExcluded(missionproduceorder.FieldPureCep)
	return u
}

// AddPureCep adds v to the "pure_cep" field.
func (u *MissionProduceOrderUpsert) AddPureCep(v int64) *MissionProduceOrderUpsert {
	u.Add(missionproduceorder.FieldPureCep, v)
	return u
}

// SetGiftCep sets the "gift_cep" field.
func (u *MissionProduceOrderUpsert) SetGiftCep(v int64) *MissionProduceOrderUpsert {
	u.Set(missionproduceorder.FieldGiftCep, v)
	return u
}

// UpdateGiftCep sets the "gift_cep" field to the value that was provided on create.
func (u *MissionProduceOrderUpsert) UpdateGiftCep() *MissionProduceOrderUpsert {
	u.SetExcluded(missionproduceorder.FieldGiftCep)
	return u
}

// AddGiftCep adds v to the "gift_cep" field.
func (u *MissionProduceOrderUpsert) AddGiftCep(v int64) *MissionProduceOrderUpsert {
	u.Add(missionproduceorder.FieldGiftCep, v)
	return u
}

// SetType sets the "type" field.
func (u *MissionProduceOrderUpsert) SetType(v enums.MissionType) *MissionProduceOrderUpsert {
	u.Set(missionproduceorder.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MissionProduceOrderUpsert) UpdateType() *MissionProduceOrderUpsert {
	u.SetExcluded(missionproduceorder.FieldType)
	return u
}

// SetIsTime sets the "is_time" field.
func (u *MissionProduceOrderUpsert) SetIsTime(v bool) *MissionProduceOrderUpsert {
	u.Set(missionproduceorder.FieldIsTime, v)
	return u
}

// UpdateIsTime sets the "is_time" field to the value that was provided on create.
func (u *MissionProduceOrderUpsert) UpdateIsTime() *MissionProduceOrderUpsert {
	u.SetExcluded(missionproduceorder.FieldIsTime)
	return u
}

// SetDeviceID sets the "device_id" field.
func (u *MissionProduceOrderUpsert) SetDeviceID(v int64) *MissionProduceOrderUpsert {
	u.Set(missionproduceorder.FieldDeviceID, v)
	return u
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *MissionProduceOrderUpsert) UpdateDeviceID() *MissionProduceOrderUpsert {
	u.SetExcluded(missionproduceorder.FieldDeviceID)
	return u
}

// SetSerialNumber sets the "serial_number" field.
func (u *MissionProduceOrderUpsert) SetSerialNumber(v string) *MissionProduceOrderUpsert {
	u.Set(missionproduceorder.FieldSerialNumber, v)
	return u
}

// UpdateSerialNumber sets the "serial_number" field to the value that was provided on create.
func (u *MissionProduceOrderUpsert) UpdateSerialNumber() *MissionProduceOrderUpsert {
	u.SetExcluded(missionproduceorder.FieldSerialNumber)
	return u
}

// SetMissionConsumeOrderID sets the "mission_consume_order_id" field.
func (u *MissionProduceOrderUpsert) SetMissionConsumeOrderID(v int64) *MissionProduceOrderUpsert {
	u.Set(missionproduceorder.FieldMissionConsumeOrderID, v)
	return u
}

// UpdateMissionConsumeOrderID sets the "mission_consume_order_id" field to the value that was provided on create.
func (u *MissionProduceOrderUpsert) UpdateMissionConsumeOrderID() *MissionProduceOrderUpsert {
	u.SetExcluded(missionproduceorder.FieldMissionConsumeOrderID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MissionProduceOrder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(missionproduceorder.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MissionProduceOrderUpsertOne) UpdateNewValues() *MissionProduceOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(missionproduceorder.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(missionproduceorder.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MissionProduceOrder.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MissionProduceOrderUpsertOne) Ignore() *MissionProduceOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MissionProduceOrderUpsertOne) DoNothing() *MissionProduceOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MissionProduceOrderCreate.OnConflict
// documentation for more info.
func (u *MissionProduceOrderUpsertOne) Update(set func(*MissionProduceOrderUpsert)) *MissionProduceOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MissionProduceOrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *MissionProduceOrderUpsertOne) SetCreatedBy(v int64) *MissionProduceOrderUpsertOne {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *MissionProduceOrderUpsertOne) AddCreatedBy(v int64) *MissionProduceOrderUpsertOne {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MissionProduceOrderUpsertOne) UpdateCreatedBy() *MissionProduceOrderUpsertOne {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MissionProduceOrderUpsertOne) SetUpdatedBy(v int64) *MissionProduceOrderUpsertOne {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MissionProduceOrderUpsertOne) AddUpdatedBy(v int64) *MissionProduceOrderUpsertOne {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MissionProduceOrderUpsertOne) UpdateUpdatedBy() *MissionProduceOrderUpsertOne {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MissionProduceOrderUpsertOne) SetUpdatedAt(v time.Time) *MissionProduceOrderUpsertOne {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MissionProduceOrderUpsertOne) UpdateUpdatedAt() *MissionProduceOrderUpsertOne {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MissionProduceOrderUpsertOne) SetDeletedAt(v time.Time) *MissionProduceOrderUpsertOne {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MissionProduceOrderUpsertOne) UpdateDeletedAt() *MissionProduceOrderUpsertOne {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *MissionProduceOrderUpsertOne) SetUserID(v int64) *MissionProduceOrderUpsertOne {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *MissionProduceOrderUpsertOne) UpdateUserID() *MissionProduceOrderUpsertOne {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.UpdateUserID()
	})
}

// SetMissionID sets the "mission_id" field.
func (u *MissionProduceOrderUpsertOne) SetMissionID(v int64) *MissionProduceOrderUpsertOne {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.SetMissionID(v)
	})
}

// AddMissionID adds v to the "mission_id" field.
func (u *MissionProduceOrderUpsertOne) AddMissionID(v int64) *MissionProduceOrderUpsertOne {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.AddMissionID(v)
	})
}

// UpdateMissionID sets the "mission_id" field to the value that was provided on create.
func (u *MissionProduceOrderUpsertOne) UpdateMissionID() *MissionProduceOrderUpsertOne {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.UpdateMissionID()
	})
}

// SetStatus sets the "status" field.
func (u *MissionProduceOrderUpsertOne) SetStatus(v enums.MissionOrderStatus) *MissionProduceOrderUpsertOne {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MissionProduceOrderUpsertOne) UpdateStatus() *MissionProduceOrderUpsertOne {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.UpdateStatus()
	})
}

// SetPureCep sets the "pure_cep" field.
func (u *MissionProduceOrderUpsertOne) SetPureCep(v int64) *MissionProduceOrderUpsertOne {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.SetPureCep(v)
	})
}

// AddPureCep adds v to the "pure_cep" field.
func (u *MissionProduceOrderUpsertOne) AddPureCep(v int64) *MissionProduceOrderUpsertOne {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.AddPureCep(v)
	})
}

// UpdatePureCep sets the "pure_cep" field to the value that was provided on create.
func (u *MissionProduceOrderUpsertOne) UpdatePureCep() *MissionProduceOrderUpsertOne {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.UpdatePureCep()
	})
}

// SetGiftCep sets the "gift_cep" field.
func (u *MissionProduceOrderUpsertOne) SetGiftCep(v int64) *MissionProduceOrderUpsertOne {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.SetGiftCep(v)
	})
}

// AddGiftCep adds v to the "gift_cep" field.
func (u *MissionProduceOrderUpsertOne) AddGiftCep(v int64) *MissionProduceOrderUpsertOne {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.AddGiftCep(v)
	})
}

// UpdateGiftCep sets the "gift_cep" field to the value that was provided on create.
func (u *MissionProduceOrderUpsertOne) UpdateGiftCep() *MissionProduceOrderUpsertOne {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.UpdateGiftCep()
	})
}

// SetType sets the "type" field.
func (u *MissionProduceOrderUpsertOne) SetType(v enums.MissionType) *MissionProduceOrderUpsertOne {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MissionProduceOrderUpsertOne) UpdateType() *MissionProduceOrderUpsertOne {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.UpdateType()
	})
}

// SetIsTime sets the "is_time" field.
func (u *MissionProduceOrderUpsertOne) SetIsTime(v bool) *MissionProduceOrderUpsertOne {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.SetIsTime(v)
	})
}

// UpdateIsTime sets the "is_time" field to the value that was provided on create.
func (u *MissionProduceOrderUpsertOne) UpdateIsTime() *MissionProduceOrderUpsertOne {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.UpdateIsTime()
	})
}

// SetDeviceID sets the "device_id" field.
func (u *MissionProduceOrderUpsertOne) SetDeviceID(v int64) *MissionProduceOrderUpsertOne {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.SetDeviceID(v)
	})
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *MissionProduceOrderUpsertOne) UpdateDeviceID() *MissionProduceOrderUpsertOne {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.UpdateDeviceID()
	})
}

// SetSerialNumber sets the "serial_number" field.
func (u *MissionProduceOrderUpsertOne) SetSerialNumber(v string) *MissionProduceOrderUpsertOne {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.SetSerialNumber(v)
	})
}

// UpdateSerialNumber sets the "serial_number" field to the value that was provided on create.
func (u *MissionProduceOrderUpsertOne) UpdateSerialNumber() *MissionProduceOrderUpsertOne {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.UpdateSerialNumber()
	})
}

// SetMissionConsumeOrderID sets the "mission_consume_order_id" field.
func (u *MissionProduceOrderUpsertOne) SetMissionConsumeOrderID(v int64) *MissionProduceOrderUpsertOne {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.SetMissionConsumeOrderID(v)
	})
}

// UpdateMissionConsumeOrderID sets the "mission_consume_order_id" field to the value that was provided on create.
func (u *MissionProduceOrderUpsertOne) UpdateMissionConsumeOrderID() *MissionProduceOrderUpsertOne {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.UpdateMissionConsumeOrderID()
	})
}

// Exec executes the query.
func (u *MissionProduceOrderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for MissionProduceOrderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MissionProduceOrderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MissionProduceOrderUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MissionProduceOrderUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MissionProduceOrderCreateBulk is the builder for creating many MissionProduceOrder entities in bulk.
type MissionProduceOrderCreateBulk struct {
	config
	builders []*MissionProduceOrderCreate
	conflict []sql.ConflictOption
}

// Save creates the MissionProduceOrder entities in the database.
func (mpocb *MissionProduceOrderCreateBulk) Save(ctx context.Context) ([]*MissionProduceOrder, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mpocb.builders))
	nodes := make([]*MissionProduceOrder, len(mpocb.builders))
	mutators := make([]Mutator, len(mpocb.builders))
	for i := range mpocb.builders {
		func(i int, root context.Context) {
			builder := mpocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MissionProduceOrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mpocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mpocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mpocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mpocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mpocb *MissionProduceOrderCreateBulk) SaveX(ctx context.Context) []*MissionProduceOrder {
	v, err := mpocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mpocb *MissionProduceOrderCreateBulk) Exec(ctx context.Context) error {
	_, err := mpocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpocb *MissionProduceOrderCreateBulk) ExecX(ctx context.Context) {
	if err := mpocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MissionProduceOrder.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MissionProduceOrderUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (mpocb *MissionProduceOrderCreateBulk) OnConflict(opts ...sql.ConflictOption) *MissionProduceOrderUpsertBulk {
	mpocb.conflict = opts
	return &MissionProduceOrderUpsertBulk{
		create: mpocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MissionProduceOrder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mpocb *MissionProduceOrderCreateBulk) OnConflictColumns(columns ...string) *MissionProduceOrderUpsertBulk {
	mpocb.conflict = append(mpocb.conflict, sql.ConflictColumns(columns...))
	return &MissionProduceOrderUpsertBulk{
		create: mpocb,
	}
}

// MissionProduceOrderUpsertBulk is the builder for "upsert"-ing
// a bulk of MissionProduceOrder nodes.
type MissionProduceOrderUpsertBulk struct {
	create *MissionProduceOrderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MissionProduceOrder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(missionproduceorder.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MissionProduceOrderUpsertBulk) UpdateNewValues() *MissionProduceOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(missionproduceorder.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(missionproduceorder.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MissionProduceOrder.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MissionProduceOrderUpsertBulk) Ignore() *MissionProduceOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MissionProduceOrderUpsertBulk) DoNothing() *MissionProduceOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MissionProduceOrderCreateBulk.OnConflict
// documentation for more info.
func (u *MissionProduceOrderUpsertBulk) Update(set func(*MissionProduceOrderUpsert)) *MissionProduceOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MissionProduceOrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *MissionProduceOrderUpsertBulk) SetCreatedBy(v int64) *MissionProduceOrderUpsertBulk {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *MissionProduceOrderUpsertBulk) AddCreatedBy(v int64) *MissionProduceOrderUpsertBulk {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MissionProduceOrderUpsertBulk) UpdateCreatedBy() *MissionProduceOrderUpsertBulk {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MissionProduceOrderUpsertBulk) SetUpdatedBy(v int64) *MissionProduceOrderUpsertBulk {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MissionProduceOrderUpsertBulk) AddUpdatedBy(v int64) *MissionProduceOrderUpsertBulk {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MissionProduceOrderUpsertBulk) UpdateUpdatedBy() *MissionProduceOrderUpsertBulk {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MissionProduceOrderUpsertBulk) SetUpdatedAt(v time.Time) *MissionProduceOrderUpsertBulk {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MissionProduceOrderUpsertBulk) UpdateUpdatedAt() *MissionProduceOrderUpsertBulk {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MissionProduceOrderUpsertBulk) SetDeletedAt(v time.Time) *MissionProduceOrderUpsertBulk {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MissionProduceOrderUpsertBulk) UpdateDeletedAt() *MissionProduceOrderUpsertBulk {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *MissionProduceOrderUpsertBulk) SetUserID(v int64) *MissionProduceOrderUpsertBulk {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *MissionProduceOrderUpsertBulk) UpdateUserID() *MissionProduceOrderUpsertBulk {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.UpdateUserID()
	})
}

// SetMissionID sets the "mission_id" field.
func (u *MissionProduceOrderUpsertBulk) SetMissionID(v int64) *MissionProduceOrderUpsertBulk {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.SetMissionID(v)
	})
}

// AddMissionID adds v to the "mission_id" field.
func (u *MissionProduceOrderUpsertBulk) AddMissionID(v int64) *MissionProduceOrderUpsertBulk {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.AddMissionID(v)
	})
}

// UpdateMissionID sets the "mission_id" field to the value that was provided on create.
func (u *MissionProduceOrderUpsertBulk) UpdateMissionID() *MissionProduceOrderUpsertBulk {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.UpdateMissionID()
	})
}

// SetStatus sets the "status" field.
func (u *MissionProduceOrderUpsertBulk) SetStatus(v enums.MissionOrderStatus) *MissionProduceOrderUpsertBulk {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MissionProduceOrderUpsertBulk) UpdateStatus() *MissionProduceOrderUpsertBulk {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.UpdateStatus()
	})
}

// SetPureCep sets the "pure_cep" field.
func (u *MissionProduceOrderUpsertBulk) SetPureCep(v int64) *MissionProduceOrderUpsertBulk {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.SetPureCep(v)
	})
}

// AddPureCep adds v to the "pure_cep" field.
func (u *MissionProduceOrderUpsertBulk) AddPureCep(v int64) *MissionProduceOrderUpsertBulk {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.AddPureCep(v)
	})
}

// UpdatePureCep sets the "pure_cep" field to the value that was provided on create.
func (u *MissionProduceOrderUpsertBulk) UpdatePureCep() *MissionProduceOrderUpsertBulk {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.UpdatePureCep()
	})
}

// SetGiftCep sets the "gift_cep" field.
func (u *MissionProduceOrderUpsertBulk) SetGiftCep(v int64) *MissionProduceOrderUpsertBulk {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.SetGiftCep(v)
	})
}

// AddGiftCep adds v to the "gift_cep" field.
func (u *MissionProduceOrderUpsertBulk) AddGiftCep(v int64) *MissionProduceOrderUpsertBulk {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.AddGiftCep(v)
	})
}

// UpdateGiftCep sets the "gift_cep" field to the value that was provided on create.
func (u *MissionProduceOrderUpsertBulk) UpdateGiftCep() *MissionProduceOrderUpsertBulk {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.UpdateGiftCep()
	})
}

// SetType sets the "type" field.
func (u *MissionProduceOrderUpsertBulk) SetType(v enums.MissionType) *MissionProduceOrderUpsertBulk {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MissionProduceOrderUpsertBulk) UpdateType() *MissionProduceOrderUpsertBulk {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.UpdateType()
	})
}

// SetIsTime sets the "is_time" field.
func (u *MissionProduceOrderUpsertBulk) SetIsTime(v bool) *MissionProduceOrderUpsertBulk {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.SetIsTime(v)
	})
}

// UpdateIsTime sets the "is_time" field to the value that was provided on create.
func (u *MissionProduceOrderUpsertBulk) UpdateIsTime() *MissionProduceOrderUpsertBulk {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.UpdateIsTime()
	})
}

// SetDeviceID sets the "device_id" field.
func (u *MissionProduceOrderUpsertBulk) SetDeviceID(v int64) *MissionProduceOrderUpsertBulk {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.SetDeviceID(v)
	})
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *MissionProduceOrderUpsertBulk) UpdateDeviceID() *MissionProduceOrderUpsertBulk {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.UpdateDeviceID()
	})
}

// SetSerialNumber sets the "serial_number" field.
func (u *MissionProduceOrderUpsertBulk) SetSerialNumber(v string) *MissionProduceOrderUpsertBulk {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.SetSerialNumber(v)
	})
}

// UpdateSerialNumber sets the "serial_number" field to the value that was provided on create.
func (u *MissionProduceOrderUpsertBulk) UpdateSerialNumber() *MissionProduceOrderUpsertBulk {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.UpdateSerialNumber()
	})
}

// SetMissionConsumeOrderID sets the "mission_consume_order_id" field.
func (u *MissionProduceOrderUpsertBulk) SetMissionConsumeOrderID(v int64) *MissionProduceOrderUpsertBulk {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.SetMissionConsumeOrderID(v)
	})
}

// UpdateMissionConsumeOrderID sets the "mission_consume_order_id" field to the value that was provided on create.
func (u *MissionProduceOrderUpsertBulk) UpdateMissionConsumeOrderID() *MissionProduceOrderUpsertBulk {
	return u.Update(func(s *MissionProduceOrderUpsert) {
		s.UpdateMissionConsumeOrderID()
	})
}

// Exec executes the query.
func (u *MissionProduceOrderUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the MissionProduceOrderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for MissionProduceOrderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MissionProduceOrderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
