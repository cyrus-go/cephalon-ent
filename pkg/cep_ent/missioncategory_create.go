// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missioncategory"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// MissionCategoryCreate is the builder for creating a MissionCategory entity.
type MissionCategoryCreate struct {
	config
	mutation *MissionCategoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (mcc *MissionCategoryCreate) SetCreatedBy(i int64) *MissionCategoryCreate {
	mcc.mutation.SetCreatedBy(i)
	return mcc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mcc *MissionCategoryCreate) SetNillableCreatedBy(i *int64) *MissionCategoryCreate {
	if i != nil {
		mcc.SetCreatedBy(*i)
	}
	return mcc
}

// SetUpdatedBy sets the "updated_by" field.
func (mcc *MissionCategoryCreate) SetUpdatedBy(i int64) *MissionCategoryCreate {
	mcc.mutation.SetUpdatedBy(i)
	return mcc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mcc *MissionCategoryCreate) SetNillableUpdatedBy(i *int64) *MissionCategoryCreate {
	if i != nil {
		mcc.SetUpdatedBy(*i)
	}
	return mcc
}

// SetCreatedAt sets the "created_at" field.
func (mcc *MissionCategoryCreate) SetCreatedAt(t time.Time) *MissionCategoryCreate {
	mcc.mutation.SetCreatedAt(t)
	return mcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mcc *MissionCategoryCreate) SetNillableCreatedAt(t *time.Time) *MissionCategoryCreate {
	if t != nil {
		mcc.SetCreatedAt(*t)
	}
	return mcc
}

// SetUpdatedAt sets the "updated_at" field.
func (mcc *MissionCategoryCreate) SetUpdatedAt(t time.Time) *MissionCategoryCreate {
	mcc.mutation.SetUpdatedAt(t)
	return mcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mcc *MissionCategoryCreate) SetNillableUpdatedAt(t *time.Time) *MissionCategoryCreate {
	if t != nil {
		mcc.SetUpdatedAt(*t)
	}
	return mcc
}

// SetDeletedAt sets the "deleted_at" field.
func (mcc *MissionCategoryCreate) SetDeletedAt(t time.Time) *MissionCategoryCreate {
	mcc.mutation.SetDeletedAt(t)
	return mcc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mcc *MissionCategoryCreate) SetNillableDeletedAt(t *time.Time) *MissionCategoryCreate {
	if t != nil {
		mcc.SetDeletedAt(*t)
	}
	return mcc
}

// SetCategory sets the "category" field.
func (mcc *MissionCategoryCreate) SetCategory(s string) *MissionCategoryCreate {
	mcc.mutation.SetCategory(s)
	return mcc
}

// SetType sets the "type" field.
func (mcc *MissionCategoryCreate) SetType(et enums.CategoryType) *MissionCategoryCreate {
	mcc.mutation.SetType(et)
	return mcc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mcc *MissionCategoryCreate) SetNillableType(et *enums.CategoryType) *MissionCategoryCreate {
	if et != nil {
		mcc.SetType(*et)
	}
	return mcc
}

// SetWeight sets the "weight" field.
func (mcc *MissionCategoryCreate) SetWeight(i int) *MissionCategoryCreate {
	mcc.mutation.SetWeight(i)
	return mcc
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (mcc *MissionCategoryCreate) SetNillableWeight(i *int) *MissionCategoryCreate {
	if i != nil {
		mcc.SetWeight(*i)
	}
	return mcc
}

// SetID sets the "id" field.
func (mcc *MissionCategoryCreate) SetID(i int64) *MissionCategoryCreate {
	mcc.mutation.SetID(i)
	return mcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mcc *MissionCategoryCreate) SetNillableID(i *int64) *MissionCategoryCreate {
	if i != nil {
		mcc.SetID(*i)
	}
	return mcc
}

// Mutation returns the MissionCategoryMutation object of the builder.
func (mcc *MissionCategoryCreate) Mutation() *MissionCategoryMutation {
	return mcc.mutation
}

// Save creates the MissionCategory in the database.
func (mcc *MissionCategoryCreate) Save(ctx context.Context) (*MissionCategory, error) {
	mcc.defaults()
	return withHooks(ctx, mcc.sqlSave, mcc.mutation, mcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mcc *MissionCategoryCreate) SaveX(ctx context.Context) *MissionCategory {
	v, err := mcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcc *MissionCategoryCreate) Exec(ctx context.Context) error {
	_, err := mcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcc *MissionCategoryCreate) ExecX(ctx context.Context) {
	if err := mcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mcc *MissionCategoryCreate) defaults() {
	if _, ok := mcc.mutation.CreatedBy(); !ok {
		v := missioncategory.DefaultCreatedBy
		mcc.mutation.SetCreatedBy(v)
	}
	if _, ok := mcc.mutation.UpdatedBy(); !ok {
		v := missioncategory.DefaultUpdatedBy
		mcc.mutation.SetUpdatedBy(v)
	}
	if _, ok := mcc.mutation.CreatedAt(); !ok {
		v := missioncategory.DefaultCreatedAt()
		mcc.mutation.SetCreatedAt(v)
	}
	if _, ok := mcc.mutation.UpdatedAt(); !ok {
		v := missioncategory.DefaultUpdatedAt()
		mcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mcc.mutation.DeletedAt(); !ok {
		v := missioncategory.DefaultDeletedAt
		mcc.mutation.SetDeletedAt(v)
	}
	if _, ok := mcc.mutation.GetType(); !ok {
		v := missioncategory.DefaultType
		mcc.mutation.SetType(v)
	}
	if _, ok := mcc.mutation.Weight(); !ok {
		v := missioncategory.DefaultWeight
		mcc.mutation.SetWeight(v)
	}
	if _, ok := mcc.mutation.ID(); !ok {
		v := missioncategory.DefaultID()
		mcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mcc *MissionCategoryCreate) check() error {
	if _, ok := mcc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "MissionCategory.created_by"`)}
	}
	if _, ok := mcc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "MissionCategory.updated_by"`)}
	}
	if _, ok := mcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "MissionCategory.created_at"`)}
	}
	if _, ok := mcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "MissionCategory.updated_at"`)}
	}
	if _, ok := mcc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "MissionCategory.deleted_at"`)}
	}
	if _, ok := mcc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`cep_ent: missing required field "MissionCategory.category"`)}
	}
	if _, ok := mcc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`cep_ent: missing required field "MissionCategory.type"`)}
	}
	if v, ok := mcc.mutation.GetType(); ok {
		if err := missioncategory.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "MissionCategory.type": %w`, err)}
		}
	}
	if _, ok := mcc.mutation.Weight(); !ok {
		return &ValidationError{Name: "weight", err: errors.New(`cep_ent: missing required field "MissionCategory.weight"`)}
	}
	return nil
}

func (mcc *MissionCategoryCreate) sqlSave(ctx context.Context) (*MissionCategory, error) {
	if err := mcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	mcc.mutation.id = &_node.ID
	mcc.mutation.done = true
	return _node, nil
}

func (mcc *MissionCategoryCreate) createSpec() (*MissionCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &MissionCategory{config: mcc.config}
		_spec = sqlgraph.NewCreateSpec(missioncategory.Table, sqlgraph.NewFieldSpec(missioncategory.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = mcc.conflict
	if id, ok := mcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mcc.mutation.CreatedBy(); ok {
		_spec.SetField(missioncategory.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := mcc.mutation.UpdatedBy(); ok {
		_spec.SetField(missioncategory.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := mcc.mutation.CreatedAt(); ok {
		_spec.SetField(missioncategory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mcc.mutation.UpdatedAt(); ok {
		_spec.SetField(missioncategory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mcc.mutation.DeletedAt(); ok {
		_spec.SetField(missioncategory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := mcc.mutation.Category(); ok {
		_spec.SetField(missioncategory.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := mcc.mutation.GetType(); ok {
		_spec.SetField(missioncategory.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := mcc.mutation.Weight(); ok {
		_spec.SetField(missioncategory.FieldWeight, field.TypeInt, value)
		_node.Weight = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MissionCategory.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MissionCategoryUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (mcc *MissionCategoryCreate) OnConflict(opts ...sql.ConflictOption) *MissionCategoryUpsertOne {
	mcc.conflict = opts
	return &MissionCategoryUpsertOne{
		create: mcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MissionCategory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcc *MissionCategoryCreate) OnConflictColumns(columns ...string) *MissionCategoryUpsertOne {
	mcc.conflict = append(mcc.conflict, sql.ConflictColumns(columns...))
	return &MissionCategoryUpsertOne{
		create: mcc,
	}
}

type (
	// MissionCategoryUpsertOne is the builder for "upsert"-ing
	//  one MissionCategory node.
	MissionCategoryUpsertOne struct {
		create *MissionCategoryCreate
	}

	// MissionCategoryUpsert is the "OnConflict" setter.
	MissionCategoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *MissionCategoryUpsert) SetCreatedBy(v int64) *MissionCategoryUpsert {
	u.Set(missioncategory.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MissionCategoryUpsert) UpdateCreatedBy() *MissionCategoryUpsert {
	u.SetExcluded(missioncategory.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *MissionCategoryUpsert) AddCreatedBy(v int64) *MissionCategoryUpsert {
	u.Add(missioncategory.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MissionCategoryUpsert) SetUpdatedBy(v int64) *MissionCategoryUpsert {
	u.Set(missioncategory.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MissionCategoryUpsert) UpdateUpdatedBy() *MissionCategoryUpsert {
	u.SetExcluded(missioncategory.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MissionCategoryUpsert) AddUpdatedBy(v int64) *MissionCategoryUpsert {
	u.Add(missioncategory.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MissionCategoryUpsert) SetUpdatedAt(v time.Time) *MissionCategoryUpsert {
	u.Set(missioncategory.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MissionCategoryUpsert) UpdateUpdatedAt() *MissionCategoryUpsert {
	u.SetExcluded(missioncategory.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MissionCategoryUpsert) SetDeletedAt(v time.Time) *MissionCategoryUpsert {
	u.Set(missioncategory.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MissionCategoryUpsert) UpdateDeletedAt() *MissionCategoryUpsert {
	u.SetExcluded(missioncategory.FieldDeletedAt)
	return u
}

// SetCategory sets the "category" field.
func (u *MissionCategoryUpsert) SetCategory(v string) *MissionCategoryUpsert {
	u.Set(missioncategory.FieldCategory, v)
	return u
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *MissionCategoryUpsert) UpdateCategory() *MissionCategoryUpsert {
	u.SetExcluded(missioncategory.FieldCategory)
	return u
}

// SetType sets the "type" field.
func (u *MissionCategoryUpsert) SetType(v enums.CategoryType) *MissionCategoryUpsert {
	u.Set(missioncategory.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MissionCategoryUpsert) UpdateType() *MissionCategoryUpsert {
	u.SetExcluded(missioncategory.FieldType)
	return u
}

// SetWeight sets the "weight" field.
func (u *MissionCategoryUpsert) SetWeight(v int) *MissionCategoryUpsert {
	u.Set(missioncategory.FieldWeight, v)
	return u
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *MissionCategoryUpsert) UpdateWeight() *MissionCategoryUpsert {
	u.SetExcluded(missioncategory.FieldWeight)
	return u
}

// AddWeight adds v to the "weight" field.
func (u *MissionCategoryUpsert) AddWeight(v int) *MissionCategoryUpsert {
	u.Add(missioncategory.FieldWeight, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MissionCategory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(missioncategory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MissionCategoryUpsertOne) UpdateNewValues() *MissionCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(missioncategory.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(missioncategory.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MissionCategory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MissionCategoryUpsertOne) Ignore() *MissionCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MissionCategoryUpsertOne) DoNothing() *MissionCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MissionCategoryCreate.OnConflict
// documentation for more info.
func (u *MissionCategoryUpsertOne) Update(set func(*MissionCategoryUpsert)) *MissionCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MissionCategoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *MissionCategoryUpsertOne) SetCreatedBy(v int64) *MissionCategoryUpsertOne {
	return u.Update(func(s *MissionCategoryUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *MissionCategoryUpsertOne) AddCreatedBy(v int64) *MissionCategoryUpsertOne {
	return u.Update(func(s *MissionCategoryUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MissionCategoryUpsertOne) UpdateCreatedBy() *MissionCategoryUpsertOne {
	return u.Update(func(s *MissionCategoryUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MissionCategoryUpsertOne) SetUpdatedBy(v int64) *MissionCategoryUpsertOne {
	return u.Update(func(s *MissionCategoryUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MissionCategoryUpsertOne) AddUpdatedBy(v int64) *MissionCategoryUpsertOne {
	return u.Update(func(s *MissionCategoryUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MissionCategoryUpsertOne) UpdateUpdatedBy() *MissionCategoryUpsertOne {
	return u.Update(func(s *MissionCategoryUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MissionCategoryUpsertOne) SetUpdatedAt(v time.Time) *MissionCategoryUpsertOne {
	return u.Update(func(s *MissionCategoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MissionCategoryUpsertOne) UpdateUpdatedAt() *MissionCategoryUpsertOne {
	return u.Update(func(s *MissionCategoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MissionCategoryUpsertOne) SetDeletedAt(v time.Time) *MissionCategoryUpsertOne {
	return u.Update(func(s *MissionCategoryUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MissionCategoryUpsertOne) UpdateDeletedAt() *MissionCategoryUpsertOne {
	return u.Update(func(s *MissionCategoryUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetCategory sets the "category" field.
func (u *MissionCategoryUpsertOne) SetCategory(v string) *MissionCategoryUpsertOne {
	return u.Update(func(s *MissionCategoryUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *MissionCategoryUpsertOne) UpdateCategory() *MissionCategoryUpsertOne {
	return u.Update(func(s *MissionCategoryUpsert) {
		s.UpdateCategory()
	})
}

// SetType sets the "type" field.
func (u *MissionCategoryUpsertOne) SetType(v enums.CategoryType) *MissionCategoryUpsertOne {
	return u.Update(func(s *MissionCategoryUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MissionCategoryUpsertOne) UpdateType() *MissionCategoryUpsertOne {
	return u.Update(func(s *MissionCategoryUpsert) {
		s.UpdateType()
	})
}

// SetWeight sets the "weight" field.
func (u *MissionCategoryUpsertOne) SetWeight(v int) *MissionCategoryUpsertOne {
	return u.Update(func(s *MissionCategoryUpsert) {
		s.SetWeight(v)
	})
}

// AddWeight adds v to the "weight" field.
func (u *MissionCategoryUpsertOne) AddWeight(v int) *MissionCategoryUpsertOne {
	return u.Update(func(s *MissionCategoryUpsert) {
		s.AddWeight(v)
	})
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *MissionCategoryUpsertOne) UpdateWeight() *MissionCategoryUpsertOne {
	return u.Update(func(s *MissionCategoryUpsert) {
		s.UpdateWeight()
	})
}

// Exec executes the query.
func (u *MissionCategoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for MissionCategoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MissionCategoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MissionCategoryUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MissionCategoryUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MissionCategoryCreateBulk is the builder for creating many MissionCategory entities in bulk.
type MissionCategoryCreateBulk struct {
	config
	err      error
	builders []*MissionCategoryCreate
	conflict []sql.ConflictOption
}

// Save creates the MissionCategory entities in the database.
func (mccb *MissionCategoryCreateBulk) Save(ctx context.Context) ([]*MissionCategory, error) {
	if mccb.err != nil {
		return nil, mccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mccb.builders))
	nodes := make([]*MissionCategory, len(mccb.builders))
	mutators := make([]Mutator, len(mccb.builders))
	for i := range mccb.builders {
		func(i int, root context.Context) {
			builder := mccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MissionCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mccb *MissionCategoryCreateBulk) SaveX(ctx context.Context) []*MissionCategory {
	v, err := mccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mccb *MissionCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := mccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mccb *MissionCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := mccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MissionCategory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MissionCategoryUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (mccb *MissionCategoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *MissionCategoryUpsertBulk {
	mccb.conflict = opts
	return &MissionCategoryUpsertBulk{
		create: mccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MissionCategory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mccb *MissionCategoryCreateBulk) OnConflictColumns(columns ...string) *MissionCategoryUpsertBulk {
	mccb.conflict = append(mccb.conflict, sql.ConflictColumns(columns...))
	return &MissionCategoryUpsertBulk{
		create: mccb,
	}
}

// MissionCategoryUpsertBulk is the builder for "upsert"-ing
// a bulk of MissionCategory nodes.
type MissionCategoryUpsertBulk struct {
	create *MissionCategoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MissionCategory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(missioncategory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MissionCategoryUpsertBulk) UpdateNewValues() *MissionCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(missioncategory.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(missioncategory.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MissionCategory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MissionCategoryUpsertBulk) Ignore() *MissionCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MissionCategoryUpsertBulk) DoNothing() *MissionCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MissionCategoryCreateBulk.OnConflict
// documentation for more info.
func (u *MissionCategoryUpsertBulk) Update(set func(*MissionCategoryUpsert)) *MissionCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MissionCategoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *MissionCategoryUpsertBulk) SetCreatedBy(v int64) *MissionCategoryUpsertBulk {
	return u.Update(func(s *MissionCategoryUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *MissionCategoryUpsertBulk) AddCreatedBy(v int64) *MissionCategoryUpsertBulk {
	return u.Update(func(s *MissionCategoryUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MissionCategoryUpsertBulk) UpdateCreatedBy() *MissionCategoryUpsertBulk {
	return u.Update(func(s *MissionCategoryUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MissionCategoryUpsertBulk) SetUpdatedBy(v int64) *MissionCategoryUpsertBulk {
	return u.Update(func(s *MissionCategoryUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MissionCategoryUpsertBulk) AddUpdatedBy(v int64) *MissionCategoryUpsertBulk {
	return u.Update(func(s *MissionCategoryUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MissionCategoryUpsertBulk) UpdateUpdatedBy() *MissionCategoryUpsertBulk {
	return u.Update(func(s *MissionCategoryUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MissionCategoryUpsertBulk) SetUpdatedAt(v time.Time) *MissionCategoryUpsertBulk {
	return u.Update(func(s *MissionCategoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MissionCategoryUpsertBulk) UpdateUpdatedAt() *MissionCategoryUpsertBulk {
	return u.Update(func(s *MissionCategoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MissionCategoryUpsertBulk) SetDeletedAt(v time.Time) *MissionCategoryUpsertBulk {
	return u.Update(func(s *MissionCategoryUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MissionCategoryUpsertBulk) UpdateDeletedAt() *MissionCategoryUpsertBulk {
	return u.Update(func(s *MissionCategoryUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetCategory sets the "category" field.
func (u *MissionCategoryUpsertBulk) SetCategory(v string) *MissionCategoryUpsertBulk {
	return u.Update(func(s *MissionCategoryUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *MissionCategoryUpsertBulk) UpdateCategory() *MissionCategoryUpsertBulk {
	return u.Update(func(s *MissionCategoryUpsert) {
		s.UpdateCategory()
	})
}

// SetType sets the "type" field.
func (u *MissionCategoryUpsertBulk) SetType(v enums.CategoryType) *MissionCategoryUpsertBulk {
	return u.Update(func(s *MissionCategoryUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MissionCategoryUpsertBulk) UpdateType() *MissionCategoryUpsertBulk {
	return u.Update(func(s *MissionCategoryUpsert) {
		s.UpdateType()
	})
}

// SetWeight sets the "weight" field.
func (u *MissionCategoryUpsertBulk) SetWeight(v int) *MissionCategoryUpsertBulk {
	return u.Update(func(s *MissionCategoryUpsert) {
		s.SetWeight(v)
	})
}

// AddWeight adds v to the "weight" field.
func (u *MissionCategoryUpsertBulk) AddWeight(v int) *MissionCategoryUpsertBulk {
	return u.Update(func(s *MissionCategoryUpsert) {
		s.AddWeight(v)
	})
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *MissionCategoryUpsertBulk) UpdateWeight() *MissionCategoryUpsertBulk {
	return u.Update(func(s *MissionCategoryUpsert) {
		s.UpdateWeight()
	})
}

// Exec executes the query.
func (u *MissionCategoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the MissionCategoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for MissionCategoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MissionCategoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
