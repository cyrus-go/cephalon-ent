// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/apitoken"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/bill"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/invokemodelorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/model"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// InvokeModelOrderCreate is the builder for creating a InvokeModelOrder entity.
type InvokeModelOrderCreate struct {
	config
	mutation *InvokeModelOrderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (imoc *InvokeModelOrderCreate) SetCreatedBy(i int64) *InvokeModelOrderCreate {
	imoc.mutation.SetCreatedBy(i)
	return imoc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (imoc *InvokeModelOrderCreate) SetNillableCreatedBy(i *int64) *InvokeModelOrderCreate {
	if i != nil {
		imoc.SetCreatedBy(*i)
	}
	return imoc
}

// SetUpdatedBy sets the "updated_by" field.
func (imoc *InvokeModelOrderCreate) SetUpdatedBy(i int64) *InvokeModelOrderCreate {
	imoc.mutation.SetUpdatedBy(i)
	return imoc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (imoc *InvokeModelOrderCreate) SetNillableUpdatedBy(i *int64) *InvokeModelOrderCreate {
	if i != nil {
		imoc.SetUpdatedBy(*i)
	}
	return imoc
}

// SetCreatedAt sets the "created_at" field.
func (imoc *InvokeModelOrderCreate) SetCreatedAt(t time.Time) *InvokeModelOrderCreate {
	imoc.mutation.SetCreatedAt(t)
	return imoc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (imoc *InvokeModelOrderCreate) SetNillableCreatedAt(t *time.Time) *InvokeModelOrderCreate {
	if t != nil {
		imoc.SetCreatedAt(*t)
	}
	return imoc
}

// SetUpdatedAt sets the "updated_at" field.
func (imoc *InvokeModelOrderCreate) SetUpdatedAt(t time.Time) *InvokeModelOrderCreate {
	imoc.mutation.SetUpdatedAt(t)
	return imoc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (imoc *InvokeModelOrderCreate) SetNillableUpdatedAt(t *time.Time) *InvokeModelOrderCreate {
	if t != nil {
		imoc.SetUpdatedAt(*t)
	}
	return imoc
}

// SetDeletedAt sets the "deleted_at" field.
func (imoc *InvokeModelOrderCreate) SetDeletedAt(t time.Time) *InvokeModelOrderCreate {
	imoc.mutation.SetDeletedAt(t)
	return imoc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (imoc *InvokeModelOrderCreate) SetNillableDeletedAt(t *time.Time) *InvokeModelOrderCreate {
	if t != nil {
		imoc.SetDeletedAt(*t)
	}
	return imoc
}

// SetUserID sets the "user_id" field.
func (imoc *InvokeModelOrderCreate) SetUserID(i int64) *InvokeModelOrderCreate {
	imoc.mutation.SetUserID(i)
	return imoc
}

// SetModelID sets the "model_id" field.
func (imoc *InvokeModelOrderCreate) SetModelID(i int64) *InvokeModelOrderCreate {
	imoc.mutation.SetModelID(i)
	return imoc
}

// SetAPITokenID sets the "api_token_id" field.
func (imoc *InvokeModelOrderCreate) SetAPITokenID(i int64) *InvokeModelOrderCreate {
	imoc.mutation.SetAPITokenID(i)
	return imoc
}

// SetInvokeType sets the "invoke_type" field.
func (imoc *InvokeModelOrderCreate) SetInvokeType(et enums.InvokeType) *InvokeModelOrderCreate {
	imoc.mutation.SetInvokeType(et)
	return imoc
}

// SetNillableInvokeType sets the "invoke_type" field if the given value is not nil.
func (imoc *InvokeModelOrderCreate) SetNillableInvokeType(et *enums.InvokeType) *InvokeModelOrderCreate {
	if et != nil {
		imoc.SetInvokeType(*et)
	}
	return imoc
}

// SetInvokeTimes sets the "invoke_times" field.
func (imoc *InvokeModelOrderCreate) SetInvokeTimes(i int) *InvokeModelOrderCreate {
	imoc.mutation.SetInvokeTimes(i)
	return imoc
}

// SetNillableInvokeTimes sets the "invoke_times" field if the given value is not nil.
func (imoc *InvokeModelOrderCreate) SetNillableInvokeTimes(i *int) *InvokeModelOrderCreate {
	if i != nil {
		imoc.SetInvokeTimes(*i)
	}
	return imoc
}

// SetInputTokenCost sets the "input_token_cost" field.
func (imoc *InvokeModelOrderCreate) SetInputTokenCost(i int) *InvokeModelOrderCreate {
	imoc.mutation.SetInputTokenCost(i)
	return imoc
}

// SetNillableInputTokenCost sets the "input_token_cost" field if the given value is not nil.
func (imoc *InvokeModelOrderCreate) SetNillableInputTokenCost(i *int) *InvokeModelOrderCreate {
	if i != nil {
		imoc.SetInputTokenCost(*i)
	}
	return imoc
}

// SetOutputTokenCost sets the "output_token_cost" field.
func (imoc *InvokeModelOrderCreate) SetOutputTokenCost(i int) *InvokeModelOrderCreate {
	imoc.mutation.SetOutputTokenCost(i)
	return imoc
}

// SetNillableOutputTokenCost sets the "output_token_cost" field if the given value is not nil.
func (imoc *InvokeModelOrderCreate) SetNillableOutputTokenCost(i *int) *InvokeModelOrderCreate {
	if i != nil {
		imoc.SetOutputTokenCost(*i)
	}
	return imoc
}

// SetInputCepCost sets the "input_cep_cost" field.
func (imoc *InvokeModelOrderCreate) SetInputCepCost(i int) *InvokeModelOrderCreate {
	imoc.mutation.SetInputCepCost(i)
	return imoc
}

// SetNillableInputCepCost sets the "input_cep_cost" field if the given value is not nil.
func (imoc *InvokeModelOrderCreate) SetNillableInputCepCost(i *int) *InvokeModelOrderCreate {
	if i != nil {
		imoc.SetInputCepCost(*i)
	}
	return imoc
}

// SetOutputCepCost sets the "output_cep_cost" field.
func (imoc *InvokeModelOrderCreate) SetOutputCepCost(i int) *InvokeModelOrderCreate {
	imoc.mutation.SetOutputCepCost(i)
	return imoc
}

// SetNillableOutputCepCost sets the "output_cep_cost" field if the given value is not nil.
func (imoc *InvokeModelOrderCreate) SetNillableOutputCepCost(i *int) *InvokeModelOrderCreate {
	if i != nil {
		imoc.SetOutputCepCost(*i)
	}
	return imoc
}

// SetID sets the "id" field.
func (imoc *InvokeModelOrderCreate) SetID(i int64) *InvokeModelOrderCreate {
	imoc.mutation.SetID(i)
	return imoc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (imoc *InvokeModelOrderCreate) SetNillableID(i *int64) *InvokeModelOrderCreate {
	if i != nil {
		imoc.SetID(*i)
	}
	return imoc
}

// AddBillIDs adds the "bills" edge to the Bill entity by IDs.
func (imoc *InvokeModelOrderCreate) AddBillIDs(ids ...int64) *InvokeModelOrderCreate {
	imoc.mutation.AddBillIDs(ids...)
	return imoc
}

// AddBills adds the "bills" edges to the Bill entity.
func (imoc *InvokeModelOrderCreate) AddBills(b ...*Bill) *InvokeModelOrderCreate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return imoc.AddBillIDs(ids...)
}

// SetUser sets the "user" edge to the User entity.
func (imoc *InvokeModelOrderCreate) SetUser(u *User) *InvokeModelOrderCreate {
	return imoc.SetUserID(u.ID)
}

// SetModel sets the "model" edge to the Model entity.
func (imoc *InvokeModelOrderCreate) SetModel(m *Model) *InvokeModelOrderCreate {
	return imoc.SetModelID(m.ID)
}

// SetAPIToken sets the "api_token" edge to the ApiToken entity.
func (imoc *InvokeModelOrderCreate) SetAPIToken(a *ApiToken) *InvokeModelOrderCreate {
	return imoc.SetAPITokenID(a.ID)
}

// Mutation returns the InvokeModelOrderMutation object of the builder.
func (imoc *InvokeModelOrderCreate) Mutation() *InvokeModelOrderMutation {
	return imoc.mutation
}

// Save creates the InvokeModelOrder in the database.
func (imoc *InvokeModelOrderCreate) Save(ctx context.Context) (*InvokeModelOrder, error) {
	imoc.defaults()
	return withHooks(ctx, imoc.sqlSave, imoc.mutation, imoc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (imoc *InvokeModelOrderCreate) SaveX(ctx context.Context) *InvokeModelOrder {
	v, err := imoc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (imoc *InvokeModelOrderCreate) Exec(ctx context.Context) error {
	_, err := imoc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (imoc *InvokeModelOrderCreate) ExecX(ctx context.Context) {
	if err := imoc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (imoc *InvokeModelOrderCreate) defaults() {
	if _, ok := imoc.mutation.CreatedBy(); !ok {
		v := invokemodelorder.DefaultCreatedBy
		imoc.mutation.SetCreatedBy(v)
	}
	if _, ok := imoc.mutation.UpdatedBy(); !ok {
		v := invokemodelorder.DefaultUpdatedBy
		imoc.mutation.SetUpdatedBy(v)
	}
	if _, ok := imoc.mutation.CreatedAt(); !ok {
		v := invokemodelorder.DefaultCreatedAt()
		imoc.mutation.SetCreatedAt(v)
	}
	if _, ok := imoc.mutation.UpdatedAt(); !ok {
		v := invokemodelorder.DefaultUpdatedAt()
		imoc.mutation.SetUpdatedAt(v)
	}
	if _, ok := imoc.mutation.DeletedAt(); !ok {
		v := invokemodelorder.DefaultDeletedAt
		imoc.mutation.SetDeletedAt(v)
	}
	if _, ok := imoc.mutation.InvokeType(); !ok {
		v := invokemodelorder.DefaultInvokeType
		imoc.mutation.SetInvokeType(v)
	}
	if _, ok := imoc.mutation.InvokeTimes(); !ok {
		v := invokemodelorder.DefaultInvokeTimes
		imoc.mutation.SetInvokeTimes(v)
	}
	if _, ok := imoc.mutation.InputTokenCost(); !ok {
		v := invokemodelorder.DefaultInputTokenCost
		imoc.mutation.SetInputTokenCost(v)
	}
	if _, ok := imoc.mutation.OutputTokenCost(); !ok {
		v := invokemodelorder.DefaultOutputTokenCost
		imoc.mutation.SetOutputTokenCost(v)
	}
	if _, ok := imoc.mutation.InputCepCost(); !ok {
		v := invokemodelorder.DefaultInputCepCost
		imoc.mutation.SetInputCepCost(v)
	}
	if _, ok := imoc.mutation.OutputCepCost(); !ok {
		v := invokemodelorder.DefaultOutputCepCost
		imoc.mutation.SetOutputCepCost(v)
	}
	if _, ok := imoc.mutation.ID(); !ok {
		v := invokemodelorder.DefaultID()
		imoc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (imoc *InvokeModelOrderCreate) check() error {
	if _, ok := imoc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "InvokeModelOrder.created_by"`)}
	}
	if _, ok := imoc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "InvokeModelOrder.updated_by"`)}
	}
	if _, ok := imoc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "InvokeModelOrder.created_at"`)}
	}
	if _, ok := imoc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "InvokeModelOrder.updated_at"`)}
	}
	if _, ok := imoc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "InvokeModelOrder.deleted_at"`)}
	}
	if _, ok := imoc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "InvokeModelOrder.user_id"`)}
	}
	if _, ok := imoc.mutation.ModelID(); !ok {
		return &ValidationError{Name: "model_id", err: errors.New(`cep_ent: missing required field "InvokeModelOrder.model_id"`)}
	}
	if _, ok := imoc.mutation.APITokenID(); !ok {
		return &ValidationError{Name: "api_token_id", err: errors.New(`cep_ent: missing required field "InvokeModelOrder.api_token_id"`)}
	}
	if _, ok := imoc.mutation.InvokeType(); !ok {
		return &ValidationError{Name: "invoke_type", err: errors.New(`cep_ent: missing required field "InvokeModelOrder.invoke_type"`)}
	}
	if v, ok := imoc.mutation.InvokeType(); ok {
		if err := invokemodelorder.InvokeTypeValidator(v); err != nil {
			return &ValidationError{Name: "invoke_type", err: fmt.Errorf(`cep_ent: validator failed for field "InvokeModelOrder.invoke_type": %w`, err)}
		}
	}
	if _, ok := imoc.mutation.InvokeTimes(); !ok {
		return &ValidationError{Name: "invoke_times", err: errors.New(`cep_ent: missing required field "InvokeModelOrder.invoke_times"`)}
	}
	if _, ok := imoc.mutation.InputTokenCost(); !ok {
		return &ValidationError{Name: "input_token_cost", err: errors.New(`cep_ent: missing required field "InvokeModelOrder.input_token_cost"`)}
	}
	if _, ok := imoc.mutation.OutputTokenCost(); !ok {
		return &ValidationError{Name: "output_token_cost", err: errors.New(`cep_ent: missing required field "InvokeModelOrder.output_token_cost"`)}
	}
	if _, ok := imoc.mutation.InputCepCost(); !ok {
		return &ValidationError{Name: "input_cep_cost", err: errors.New(`cep_ent: missing required field "InvokeModelOrder.input_cep_cost"`)}
	}
	if _, ok := imoc.mutation.OutputCepCost(); !ok {
		return &ValidationError{Name: "output_cep_cost", err: errors.New(`cep_ent: missing required field "InvokeModelOrder.output_cep_cost"`)}
	}
	if _, ok := imoc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "InvokeModelOrder.user"`)}
	}
	if _, ok := imoc.mutation.ModelID(); !ok {
		return &ValidationError{Name: "model", err: errors.New(`cep_ent: missing required edge "InvokeModelOrder.model"`)}
	}
	if _, ok := imoc.mutation.APITokenID(); !ok {
		return &ValidationError{Name: "api_token", err: errors.New(`cep_ent: missing required edge "InvokeModelOrder.api_token"`)}
	}
	return nil
}

func (imoc *InvokeModelOrderCreate) sqlSave(ctx context.Context) (*InvokeModelOrder, error) {
	if err := imoc.check(); err != nil {
		return nil, err
	}
	_node, _spec := imoc.createSpec()
	if err := sqlgraph.CreateNode(ctx, imoc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	imoc.mutation.id = &_node.ID
	imoc.mutation.done = true
	return _node, nil
}

func (imoc *InvokeModelOrderCreate) createSpec() (*InvokeModelOrder, *sqlgraph.CreateSpec) {
	var (
		_node = &InvokeModelOrder{config: imoc.config}
		_spec = sqlgraph.NewCreateSpec(invokemodelorder.Table, sqlgraph.NewFieldSpec(invokemodelorder.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = imoc.conflict
	if id, ok := imoc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := imoc.mutation.CreatedBy(); ok {
		_spec.SetField(invokemodelorder.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := imoc.mutation.UpdatedBy(); ok {
		_spec.SetField(invokemodelorder.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := imoc.mutation.CreatedAt(); ok {
		_spec.SetField(invokemodelorder.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := imoc.mutation.UpdatedAt(); ok {
		_spec.SetField(invokemodelorder.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := imoc.mutation.DeletedAt(); ok {
		_spec.SetField(invokemodelorder.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := imoc.mutation.InvokeType(); ok {
		_spec.SetField(invokemodelorder.FieldInvokeType, field.TypeEnum, value)
		_node.InvokeType = value
	}
	if value, ok := imoc.mutation.InvokeTimes(); ok {
		_spec.SetField(invokemodelorder.FieldInvokeTimes, field.TypeInt, value)
		_node.InvokeTimes = value
	}
	if value, ok := imoc.mutation.InputTokenCost(); ok {
		_spec.SetField(invokemodelorder.FieldInputTokenCost, field.TypeInt, value)
		_node.InputTokenCost = value
	}
	if value, ok := imoc.mutation.OutputTokenCost(); ok {
		_spec.SetField(invokemodelorder.FieldOutputTokenCost, field.TypeInt, value)
		_node.OutputTokenCost = value
	}
	if value, ok := imoc.mutation.InputCepCost(); ok {
		_spec.SetField(invokemodelorder.FieldInputCepCost, field.TypeInt, value)
		_node.InputCepCost = value
	}
	if value, ok := imoc.mutation.OutputCepCost(); ok {
		_spec.SetField(invokemodelorder.FieldOutputCepCost, field.TypeInt, value)
		_node.OutputCepCost = value
	}
	if nodes := imoc.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invokemodelorder.BillsTable,
			Columns: []string{invokemodelorder.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := imoc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invokemodelorder.UserTable,
			Columns: []string{invokemodelorder.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := imoc.mutation.ModelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invokemodelorder.ModelTable,
			Columns: []string{invokemodelorder.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(model.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ModelID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := imoc.mutation.APITokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invokemodelorder.APITokenTable,
			Columns: []string{invokemodelorder.APITokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.APITokenID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.InvokeModelOrder.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InvokeModelOrderUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (imoc *InvokeModelOrderCreate) OnConflict(opts ...sql.ConflictOption) *InvokeModelOrderUpsertOne {
	imoc.conflict = opts
	return &InvokeModelOrderUpsertOne{
		create: imoc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.InvokeModelOrder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (imoc *InvokeModelOrderCreate) OnConflictColumns(columns ...string) *InvokeModelOrderUpsertOne {
	imoc.conflict = append(imoc.conflict, sql.ConflictColumns(columns...))
	return &InvokeModelOrderUpsertOne{
		create: imoc,
	}
}

type (
	// InvokeModelOrderUpsertOne is the builder for "upsert"-ing
	//  one InvokeModelOrder node.
	InvokeModelOrderUpsertOne struct {
		create *InvokeModelOrderCreate
	}

	// InvokeModelOrderUpsert is the "OnConflict" setter.
	InvokeModelOrderUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *InvokeModelOrderUpsert) SetCreatedBy(v int64) *InvokeModelOrderUpsert {
	u.Set(invokemodelorder.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *InvokeModelOrderUpsert) UpdateCreatedBy() *InvokeModelOrderUpsert {
	u.SetExcluded(invokemodelorder.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *InvokeModelOrderUpsert) AddCreatedBy(v int64) *InvokeModelOrderUpsert {
	u.Add(invokemodelorder.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *InvokeModelOrderUpsert) SetUpdatedBy(v int64) *InvokeModelOrderUpsert {
	u.Set(invokemodelorder.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *InvokeModelOrderUpsert) UpdateUpdatedBy() *InvokeModelOrderUpsert {
	u.SetExcluded(invokemodelorder.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *InvokeModelOrderUpsert) AddUpdatedBy(v int64) *InvokeModelOrderUpsert {
	u.Add(invokemodelorder.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InvokeModelOrderUpsert) SetUpdatedAt(v time.Time) *InvokeModelOrderUpsert {
	u.Set(invokemodelorder.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InvokeModelOrderUpsert) UpdateUpdatedAt() *InvokeModelOrderUpsert {
	u.SetExcluded(invokemodelorder.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *InvokeModelOrderUpsert) SetDeletedAt(v time.Time) *InvokeModelOrderUpsert {
	u.Set(invokemodelorder.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *InvokeModelOrderUpsert) UpdateDeletedAt() *InvokeModelOrderUpsert {
	u.SetExcluded(invokemodelorder.FieldDeletedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *InvokeModelOrderUpsert) SetUserID(v int64) *InvokeModelOrderUpsert {
	u.Set(invokemodelorder.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *InvokeModelOrderUpsert) UpdateUserID() *InvokeModelOrderUpsert {
	u.SetExcluded(invokemodelorder.FieldUserID)
	return u
}

// SetModelID sets the "model_id" field.
func (u *InvokeModelOrderUpsert) SetModelID(v int64) *InvokeModelOrderUpsert {
	u.Set(invokemodelorder.FieldModelID, v)
	return u
}

// UpdateModelID sets the "model_id" field to the value that was provided on create.
func (u *InvokeModelOrderUpsert) UpdateModelID() *InvokeModelOrderUpsert {
	u.SetExcluded(invokemodelorder.FieldModelID)
	return u
}

// SetAPITokenID sets the "api_token_id" field.
func (u *InvokeModelOrderUpsert) SetAPITokenID(v int64) *InvokeModelOrderUpsert {
	u.Set(invokemodelorder.FieldAPITokenID, v)
	return u
}

// UpdateAPITokenID sets the "api_token_id" field to the value that was provided on create.
func (u *InvokeModelOrderUpsert) UpdateAPITokenID() *InvokeModelOrderUpsert {
	u.SetExcluded(invokemodelorder.FieldAPITokenID)
	return u
}

// SetInvokeType sets the "invoke_type" field.
func (u *InvokeModelOrderUpsert) SetInvokeType(v enums.InvokeType) *InvokeModelOrderUpsert {
	u.Set(invokemodelorder.FieldInvokeType, v)
	return u
}

// UpdateInvokeType sets the "invoke_type" field to the value that was provided on create.
func (u *InvokeModelOrderUpsert) UpdateInvokeType() *InvokeModelOrderUpsert {
	u.SetExcluded(invokemodelorder.FieldInvokeType)
	return u
}

// SetInvokeTimes sets the "invoke_times" field.
func (u *InvokeModelOrderUpsert) SetInvokeTimes(v int) *InvokeModelOrderUpsert {
	u.Set(invokemodelorder.FieldInvokeTimes, v)
	return u
}

// UpdateInvokeTimes sets the "invoke_times" field to the value that was provided on create.
func (u *InvokeModelOrderUpsert) UpdateInvokeTimes() *InvokeModelOrderUpsert {
	u.SetExcluded(invokemodelorder.FieldInvokeTimes)
	return u
}

// AddInvokeTimes adds v to the "invoke_times" field.
func (u *InvokeModelOrderUpsert) AddInvokeTimes(v int) *InvokeModelOrderUpsert {
	u.Add(invokemodelorder.FieldInvokeTimes, v)
	return u
}

// SetInputTokenCost sets the "input_token_cost" field.
func (u *InvokeModelOrderUpsert) SetInputTokenCost(v int) *InvokeModelOrderUpsert {
	u.Set(invokemodelorder.FieldInputTokenCost, v)
	return u
}

// UpdateInputTokenCost sets the "input_token_cost" field to the value that was provided on create.
func (u *InvokeModelOrderUpsert) UpdateInputTokenCost() *InvokeModelOrderUpsert {
	u.SetExcluded(invokemodelorder.FieldInputTokenCost)
	return u
}

// AddInputTokenCost adds v to the "input_token_cost" field.
func (u *InvokeModelOrderUpsert) AddInputTokenCost(v int) *InvokeModelOrderUpsert {
	u.Add(invokemodelorder.FieldInputTokenCost, v)
	return u
}

// SetOutputTokenCost sets the "output_token_cost" field.
func (u *InvokeModelOrderUpsert) SetOutputTokenCost(v int) *InvokeModelOrderUpsert {
	u.Set(invokemodelorder.FieldOutputTokenCost, v)
	return u
}

// UpdateOutputTokenCost sets the "output_token_cost" field to the value that was provided on create.
func (u *InvokeModelOrderUpsert) UpdateOutputTokenCost() *InvokeModelOrderUpsert {
	u.SetExcluded(invokemodelorder.FieldOutputTokenCost)
	return u
}

// AddOutputTokenCost adds v to the "output_token_cost" field.
func (u *InvokeModelOrderUpsert) AddOutputTokenCost(v int) *InvokeModelOrderUpsert {
	u.Add(invokemodelorder.FieldOutputTokenCost, v)
	return u
}

// SetInputCepCost sets the "input_cep_cost" field.
func (u *InvokeModelOrderUpsert) SetInputCepCost(v int) *InvokeModelOrderUpsert {
	u.Set(invokemodelorder.FieldInputCepCost, v)
	return u
}

// UpdateInputCepCost sets the "input_cep_cost" field to the value that was provided on create.
func (u *InvokeModelOrderUpsert) UpdateInputCepCost() *InvokeModelOrderUpsert {
	u.SetExcluded(invokemodelorder.FieldInputCepCost)
	return u
}

// AddInputCepCost adds v to the "input_cep_cost" field.
func (u *InvokeModelOrderUpsert) AddInputCepCost(v int) *InvokeModelOrderUpsert {
	u.Add(invokemodelorder.FieldInputCepCost, v)
	return u
}

// SetOutputCepCost sets the "output_cep_cost" field.
func (u *InvokeModelOrderUpsert) SetOutputCepCost(v int) *InvokeModelOrderUpsert {
	u.Set(invokemodelorder.FieldOutputCepCost, v)
	return u
}

// UpdateOutputCepCost sets the "output_cep_cost" field to the value that was provided on create.
func (u *InvokeModelOrderUpsert) UpdateOutputCepCost() *InvokeModelOrderUpsert {
	u.SetExcluded(invokemodelorder.FieldOutputCepCost)
	return u
}

// AddOutputCepCost adds v to the "output_cep_cost" field.
func (u *InvokeModelOrderUpsert) AddOutputCepCost(v int) *InvokeModelOrderUpsert {
	u.Add(invokemodelorder.FieldOutputCepCost, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.InvokeModelOrder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(invokemodelorder.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InvokeModelOrderUpsertOne) UpdateNewValues() *InvokeModelOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(invokemodelorder.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(invokemodelorder.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.InvokeModelOrder.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *InvokeModelOrderUpsertOne) Ignore() *InvokeModelOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InvokeModelOrderUpsertOne) DoNothing() *InvokeModelOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InvokeModelOrderCreate.OnConflict
// documentation for more info.
func (u *InvokeModelOrderUpsertOne) Update(set func(*InvokeModelOrderUpsert)) *InvokeModelOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InvokeModelOrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *InvokeModelOrderUpsertOne) SetCreatedBy(v int64) *InvokeModelOrderUpsertOne {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *InvokeModelOrderUpsertOne) AddCreatedBy(v int64) *InvokeModelOrderUpsertOne {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *InvokeModelOrderUpsertOne) UpdateCreatedBy() *InvokeModelOrderUpsertOne {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *InvokeModelOrderUpsertOne) SetUpdatedBy(v int64) *InvokeModelOrderUpsertOne {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *InvokeModelOrderUpsertOne) AddUpdatedBy(v int64) *InvokeModelOrderUpsertOne {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *InvokeModelOrderUpsertOne) UpdateUpdatedBy() *InvokeModelOrderUpsertOne {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InvokeModelOrderUpsertOne) SetUpdatedAt(v time.Time) *InvokeModelOrderUpsertOne {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InvokeModelOrderUpsertOne) UpdateUpdatedAt() *InvokeModelOrderUpsertOne {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *InvokeModelOrderUpsertOne) SetDeletedAt(v time.Time) *InvokeModelOrderUpsertOne {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *InvokeModelOrderUpsertOne) UpdateDeletedAt() *InvokeModelOrderUpsertOne {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *InvokeModelOrderUpsertOne) SetUserID(v int64) *InvokeModelOrderUpsertOne {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *InvokeModelOrderUpsertOne) UpdateUserID() *InvokeModelOrderUpsertOne {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.UpdateUserID()
	})
}

// SetModelID sets the "model_id" field.
func (u *InvokeModelOrderUpsertOne) SetModelID(v int64) *InvokeModelOrderUpsertOne {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.SetModelID(v)
	})
}

// UpdateModelID sets the "model_id" field to the value that was provided on create.
func (u *InvokeModelOrderUpsertOne) UpdateModelID() *InvokeModelOrderUpsertOne {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.UpdateModelID()
	})
}

// SetAPITokenID sets the "api_token_id" field.
func (u *InvokeModelOrderUpsertOne) SetAPITokenID(v int64) *InvokeModelOrderUpsertOne {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.SetAPITokenID(v)
	})
}

// UpdateAPITokenID sets the "api_token_id" field to the value that was provided on create.
func (u *InvokeModelOrderUpsertOne) UpdateAPITokenID() *InvokeModelOrderUpsertOne {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.UpdateAPITokenID()
	})
}

// SetInvokeType sets the "invoke_type" field.
func (u *InvokeModelOrderUpsertOne) SetInvokeType(v enums.InvokeType) *InvokeModelOrderUpsertOne {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.SetInvokeType(v)
	})
}

// UpdateInvokeType sets the "invoke_type" field to the value that was provided on create.
func (u *InvokeModelOrderUpsertOne) UpdateInvokeType() *InvokeModelOrderUpsertOne {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.UpdateInvokeType()
	})
}

// SetInvokeTimes sets the "invoke_times" field.
func (u *InvokeModelOrderUpsertOne) SetInvokeTimes(v int) *InvokeModelOrderUpsertOne {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.SetInvokeTimes(v)
	})
}

// AddInvokeTimes adds v to the "invoke_times" field.
func (u *InvokeModelOrderUpsertOne) AddInvokeTimes(v int) *InvokeModelOrderUpsertOne {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.AddInvokeTimes(v)
	})
}

// UpdateInvokeTimes sets the "invoke_times" field to the value that was provided on create.
func (u *InvokeModelOrderUpsertOne) UpdateInvokeTimes() *InvokeModelOrderUpsertOne {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.UpdateInvokeTimes()
	})
}

// SetInputTokenCost sets the "input_token_cost" field.
func (u *InvokeModelOrderUpsertOne) SetInputTokenCost(v int) *InvokeModelOrderUpsertOne {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.SetInputTokenCost(v)
	})
}

// AddInputTokenCost adds v to the "input_token_cost" field.
func (u *InvokeModelOrderUpsertOne) AddInputTokenCost(v int) *InvokeModelOrderUpsertOne {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.AddInputTokenCost(v)
	})
}

// UpdateInputTokenCost sets the "input_token_cost" field to the value that was provided on create.
func (u *InvokeModelOrderUpsertOne) UpdateInputTokenCost() *InvokeModelOrderUpsertOne {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.UpdateInputTokenCost()
	})
}

// SetOutputTokenCost sets the "output_token_cost" field.
func (u *InvokeModelOrderUpsertOne) SetOutputTokenCost(v int) *InvokeModelOrderUpsertOne {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.SetOutputTokenCost(v)
	})
}

// AddOutputTokenCost adds v to the "output_token_cost" field.
func (u *InvokeModelOrderUpsertOne) AddOutputTokenCost(v int) *InvokeModelOrderUpsertOne {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.AddOutputTokenCost(v)
	})
}

// UpdateOutputTokenCost sets the "output_token_cost" field to the value that was provided on create.
func (u *InvokeModelOrderUpsertOne) UpdateOutputTokenCost() *InvokeModelOrderUpsertOne {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.UpdateOutputTokenCost()
	})
}

// SetInputCepCost sets the "input_cep_cost" field.
func (u *InvokeModelOrderUpsertOne) SetInputCepCost(v int) *InvokeModelOrderUpsertOne {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.SetInputCepCost(v)
	})
}

// AddInputCepCost adds v to the "input_cep_cost" field.
func (u *InvokeModelOrderUpsertOne) AddInputCepCost(v int) *InvokeModelOrderUpsertOne {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.AddInputCepCost(v)
	})
}

// UpdateInputCepCost sets the "input_cep_cost" field to the value that was provided on create.
func (u *InvokeModelOrderUpsertOne) UpdateInputCepCost() *InvokeModelOrderUpsertOne {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.UpdateInputCepCost()
	})
}

// SetOutputCepCost sets the "output_cep_cost" field.
func (u *InvokeModelOrderUpsertOne) SetOutputCepCost(v int) *InvokeModelOrderUpsertOne {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.SetOutputCepCost(v)
	})
}

// AddOutputCepCost adds v to the "output_cep_cost" field.
func (u *InvokeModelOrderUpsertOne) AddOutputCepCost(v int) *InvokeModelOrderUpsertOne {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.AddOutputCepCost(v)
	})
}

// UpdateOutputCepCost sets the "output_cep_cost" field to the value that was provided on create.
func (u *InvokeModelOrderUpsertOne) UpdateOutputCepCost() *InvokeModelOrderUpsertOne {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.UpdateOutputCepCost()
	})
}

// Exec executes the query.
func (u *InvokeModelOrderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for InvokeModelOrderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InvokeModelOrderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *InvokeModelOrderUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *InvokeModelOrderUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// InvokeModelOrderCreateBulk is the builder for creating many InvokeModelOrder entities in bulk.
type InvokeModelOrderCreateBulk struct {
	config
	err      error
	builders []*InvokeModelOrderCreate
	conflict []sql.ConflictOption
}

// Save creates the InvokeModelOrder entities in the database.
func (imocb *InvokeModelOrderCreateBulk) Save(ctx context.Context) ([]*InvokeModelOrder, error) {
	if imocb.err != nil {
		return nil, imocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(imocb.builders))
	nodes := make([]*InvokeModelOrder, len(imocb.builders))
	mutators := make([]Mutator, len(imocb.builders))
	for i := range imocb.builders {
		func(i int, root context.Context) {
			builder := imocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InvokeModelOrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, imocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = imocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, imocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, imocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (imocb *InvokeModelOrderCreateBulk) SaveX(ctx context.Context) []*InvokeModelOrder {
	v, err := imocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (imocb *InvokeModelOrderCreateBulk) Exec(ctx context.Context) error {
	_, err := imocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (imocb *InvokeModelOrderCreateBulk) ExecX(ctx context.Context) {
	if err := imocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.InvokeModelOrder.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InvokeModelOrderUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (imocb *InvokeModelOrderCreateBulk) OnConflict(opts ...sql.ConflictOption) *InvokeModelOrderUpsertBulk {
	imocb.conflict = opts
	return &InvokeModelOrderUpsertBulk{
		create: imocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.InvokeModelOrder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (imocb *InvokeModelOrderCreateBulk) OnConflictColumns(columns ...string) *InvokeModelOrderUpsertBulk {
	imocb.conflict = append(imocb.conflict, sql.ConflictColumns(columns...))
	return &InvokeModelOrderUpsertBulk{
		create: imocb,
	}
}

// InvokeModelOrderUpsertBulk is the builder for "upsert"-ing
// a bulk of InvokeModelOrder nodes.
type InvokeModelOrderUpsertBulk struct {
	create *InvokeModelOrderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.InvokeModelOrder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(invokemodelorder.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InvokeModelOrderUpsertBulk) UpdateNewValues() *InvokeModelOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(invokemodelorder.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(invokemodelorder.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.InvokeModelOrder.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *InvokeModelOrderUpsertBulk) Ignore() *InvokeModelOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InvokeModelOrderUpsertBulk) DoNothing() *InvokeModelOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InvokeModelOrderCreateBulk.OnConflict
// documentation for more info.
func (u *InvokeModelOrderUpsertBulk) Update(set func(*InvokeModelOrderUpsert)) *InvokeModelOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InvokeModelOrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *InvokeModelOrderUpsertBulk) SetCreatedBy(v int64) *InvokeModelOrderUpsertBulk {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *InvokeModelOrderUpsertBulk) AddCreatedBy(v int64) *InvokeModelOrderUpsertBulk {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *InvokeModelOrderUpsertBulk) UpdateCreatedBy() *InvokeModelOrderUpsertBulk {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *InvokeModelOrderUpsertBulk) SetUpdatedBy(v int64) *InvokeModelOrderUpsertBulk {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *InvokeModelOrderUpsertBulk) AddUpdatedBy(v int64) *InvokeModelOrderUpsertBulk {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *InvokeModelOrderUpsertBulk) UpdateUpdatedBy() *InvokeModelOrderUpsertBulk {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InvokeModelOrderUpsertBulk) SetUpdatedAt(v time.Time) *InvokeModelOrderUpsertBulk {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InvokeModelOrderUpsertBulk) UpdateUpdatedAt() *InvokeModelOrderUpsertBulk {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *InvokeModelOrderUpsertBulk) SetDeletedAt(v time.Time) *InvokeModelOrderUpsertBulk {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *InvokeModelOrderUpsertBulk) UpdateDeletedAt() *InvokeModelOrderUpsertBulk {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *InvokeModelOrderUpsertBulk) SetUserID(v int64) *InvokeModelOrderUpsertBulk {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *InvokeModelOrderUpsertBulk) UpdateUserID() *InvokeModelOrderUpsertBulk {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.UpdateUserID()
	})
}

// SetModelID sets the "model_id" field.
func (u *InvokeModelOrderUpsertBulk) SetModelID(v int64) *InvokeModelOrderUpsertBulk {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.SetModelID(v)
	})
}

// UpdateModelID sets the "model_id" field to the value that was provided on create.
func (u *InvokeModelOrderUpsertBulk) UpdateModelID() *InvokeModelOrderUpsertBulk {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.UpdateModelID()
	})
}

// SetAPITokenID sets the "api_token_id" field.
func (u *InvokeModelOrderUpsertBulk) SetAPITokenID(v int64) *InvokeModelOrderUpsertBulk {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.SetAPITokenID(v)
	})
}

// UpdateAPITokenID sets the "api_token_id" field to the value that was provided on create.
func (u *InvokeModelOrderUpsertBulk) UpdateAPITokenID() *InvokeModelOrderUpsertBulk {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.UpdateAPITokenID()
	})
}

// SetInvokeType sets the "invoke_type" field.
func (u *InvokeModelOrderUpsertBulk) SetInvokeType(v enums.InvokeType) *InvokeModelOrderUpsertBulk {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.SetInvokeType(v)
	})
}

// UpdateInvokeType sets the "invoke_type" field to the value that was provided on create.
func (u *InvokeModelOrderUpsertBulk) UpdateInvokeType() *InvokeModelOrderUpsertBulk {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.UpdateInvokeType()
	})
}

// SetInvokeTimes sets the "invoke_times" field.
func (u *InvokeModelOrderUpsertBulk) SetInvokeTimes(v int) *InvokeModelOrderUpsertBulk {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.SetInvokeTimes(v)
	})
}

// AddInvokeTimes adds v to the "invoke_times" field.
func (u *InvokeModelOrderUpsertBulk) AddInvokeTimes(v int) *InvokeModelOrderUpsertBulk {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.AddInvokeTimes(v)
	})
}

// UpdateInvokeTimes sets the "invoke_times" field to the value that was provided on create.
func (u *InvokeModelOrderUpsertBulk) UpdateInvokeTimes() *InvokeModelOrderUpsertBulk {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.UpdateInvokeTimes()
	})
}

// SetInputTokenCost sets the "input_token_cost" field.
func (u *InvokeModelOrderUpsertBulk) SetInputTokenCost(v int) *InvokeModelOrderUpsertBulk {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.SetInputTokenCost(v)
	})
}

// AddInputTokenCost adds v to the "input_token_cost" field.
func (u *InvokeModelOrderUpsertBulk) AddInputTokenCost(v int) *InvokeModelOrderUpsertBulk {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.AddInputTokenCost(v)
	})
}

// UpdateInputTokenCost sets the "input_token_cost" field to the value that was provided on create.
func (u *InvokeModelOrderUpsertBulk) UpdateInputTokenCost() *InvokeModelOrderUpsertBulk {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.UpdateInputTokenCost()
	})
}

// SetOutputTokenCost sets the "output_token_cost" field.
func (u *InvokeModelOrderUpsertBulk) SetOutputTokenCost(v int) *InvokeModelOrderUpsertBulk {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.SetOutputTokenCost(v)
	})
}

// AddOutputTokenCost adds v to the "output_token_cost" field.
func (u *InvokeModelOrderUpsertBulk) AddOutputTokenCost(v int) *InvokeModelOrderUpsertBulk {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.AddOutputTokenCost(v)
	})
}

// UpdateOutputTokenCost sets the "output_token_cost" field to the value that was provided on create.
func (u *InvokeModelOrderUpsertBulk) UpdateOutputTokenCost() *InvokeModelOrderUpsertBulk {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.UpdateOutputTokenCost()
	})
}

// SetInputCepCost sets the "input_cep_cost" field.
func (u *InvokeModelOrderUpsertBulk) SetInputCepCost(v int) *InvokeModelOrderUpsertBulk {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.SetInputCepCost(v)
	})
}

// AddInputCepCost adds v to the "input_cep_cost" field.
func (u *InvokeModelOrderUpsertBulk) AddInputCepCost(v int) *InvokeModelOrderUpsertBulk {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.AddInputCepCost(v)
	})
}

// UpdateInputCepCost sets the "input_cep_cost" field to the value that was provided on create.
func (u *InvokeModelOrderUpsertBulk) UpdateInputCepCost() *InvokeModelOrderUpsertBulk {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.UpdateInputCepCost()
	})
}

// SetOutputCepCost sets the "output_cep_cost" field.
func (u *InvokeModelOrderUpsertBulk) SetOutputCepCost(v int) *InvokeModelOrderUpsertBulk {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.SetOutputCepCost(v)
	})
}

// AddOutputCepCost adds v to the "output_cep_cost" field.
func (u *InvokeModelOrderUpsertBulk) AddOutputCepCost(v int) *InvokeModelOrderUpsertBulk {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.AddOutputCepCost(v)
	})
}

// UpdateOutputCepCost sets the "output_cep_cost" field to the value that was provided on create.
func (u *InvokeModelOrderUpsertBulk) UpdateOutputCepCost() *InvokeModelOrderUpsertBulk {
	return u.Update(func(s *InvokeModelOrderUpsert) {
		s.UpdateOutputCepCost()
	})
}

// Exec executes the query.
func (u *InvokeModelOrderUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the InvokeModelOrderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for InvokeModelOrderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InvokeModelOrderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
