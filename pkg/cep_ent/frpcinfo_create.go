// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/device"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/frpcinfo"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/frpsinfo"
)

// FrpcInfoCreate is the builder for creating a FrpcInfo entity.
type FrpcInfoCreate struct {
	config
	mutation *FrpcInfoMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (fic *FrpcInfoCreate) SetCreatedBy(i int64) *FrpcInfoCreate {
	fic.mutation.SetCreatedBy(i)
	return fic
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (fic *FrpcInfoCreate) SetNillableCreatedBy(i *int64) *FrpcInfoCreate {
	if i != nil {
		fic.SetCreatedBy(*i)
	}
	return fic
}

// SetUpdatedBy sets the "updated_by" field.
func (fic *FrpcInfoCreate) SetUpdatedBy(i int64) *FrpcInfoCreate {
	fic.mutation.SetUpdatedBy(i)
	return fic
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fic *FrpcInfoCreate) SetNillableUpdatedBy(i *int64) *FrpcInfoCreate {
	if i != nil {
		fic.SetUpdatedBy(*i)
	}
	return fic
}

// SetCreatedAt sets the "created_at" field.
func (fic *FrpcInfoCreate) SetCreatedAt(t time.Time) *FrpcInfoCreate {
	fic.mutation.SetCreatedAt(t)
	return fic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fic *FrpcInfoCreate) SetNillableCreatedAt(t *time.Time) *FrpcInfoCreate {
	if t != nil {
		fic.SetCreatedAt(*t)
	}
	return fic
}

// SetUpdatedAt sets the "updated_at" field.
func (fic *FrpcInfoCreate) SetUpdatedAt(t time.Time) *FrpcInfoCreate {
	fic.mutation.SetUpdatedAt(t)
	return fic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fic *FrpcInfoCreate) SetNillableUpdatedAt(t *time.Time) *FrpcInfoCreate {
	if t != nil {
		fic.SetUpdatedAt(*t)
	}
	return fic
}

// SetDeletedAt sets the "deleted_at" field.
func (fic *FrpcInfoCreate) SetDeletedAt(t time.Time) *FrpcInfoCreate {
	fic.mutation.SetDeletedAt(t)
	return fic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fic *FrpcInfoCreate) SetNillableDeletedAt(t *time.Time) *FrpcInfoCreate {
	if t != nil {
		fic.SetDeletedAt(*t)
	}
	return fic
}

// SetTag sets the "tag" field.
func (fic *FrpcInfoCreate) SetTag(s string) *FrpcInfoCreate {
	fic.mutation.SetTag(s)
	return fic
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (fic *FrpcInfoCreate) SetNillableTag(s *string) *FrpcInfoCreate {
	if s != nil {
		fic.SetTag(*s)
	}
	return fic
}

// SetType sets the "type" field.
func (fic *FrpcInfoCreate) SetType(s string) *FrpcInfoCreate {
	fic.mutation.SetType(s)
	return fic
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fic *FrpcInfoCreate) SetNillableType(s *string) *FrpcInfoCreate {
	if s != nil {
		fic.SetType(*s)
	}
	return fic
}

// SetLocalIP sets the "local_ip" field.
func (fic *FrpcInfoCreate) SetLocalIP(s string) *FrpcInfoCreate {
	fic.mutation.SetLocalIP(s)
	return fic
}

// SetNillableLocalIP sets the "local_ip" field if the given value is not nil.
func (fic *FrpcInfoCreate) SetNillableLocalIP(s *string) *FrpcInfoCreate {
	if s != nil {
		fic.SetLocalIP(*s)
	}
	return fic
}

// SetLocalPort sets the "local_port" field.
func (fic *FrpcInfoCreate) SetLocalPort(i int) *FrpcInfoCreate {
	fic.mutation.SetLocalPort(i)
	return fic
}

// SetNillableLocalPort sets the "local_port" field if the given value is not nil.
func (fic *FrpcInfoCreate) SetNillableLocalPort(i *int) *FrpcInfoCreate {
	if i != nil {
		fic.SetLocalPort(*i)
	}
	return fic
}

// SetRemotePort sets the "remote_port" field.
func (fic *FrpcInfoCreate) SetRemotePort(i int) *FrpcInfoCreate {
	fic.mutation.SetRemotePort(i)
	return fic
}

// SetNillableRemotePort sets the "remote_port" field if the given value is not nil.
func (fic *FrpcInfoCreate) SetNillableRemotePort(i *int) *FrpcInfoCreate {
	if i != nil {
		fic.SetRemotePort(*i)
	}
	return fic
}

// SetFrpsID sets the "frps_id" field.
func (fic *FrpcInfoCreate) SetFrpsID(i int64) *FrpcInfoCreate {
	fic.mutation.SetFrpsID(i)
	return fic
}

// SetNillableFrpsID sets the "frps_id" field if the given value is not nil.
func (fic *FrpcInfoCreate) SetNillableFrpsID(i *int64) *FrpcInfoCreate {
	if i != nil {
		fic.SetFrpsID(*i)
	}
	return fic
}

// SetDeviceID sets the "device_id" field.
func (fic *FrpcInfoCreate) SetDeviceID(i int64) *FrpcInfoCreate {
	fic.mutation.SetDeviceID(i)
	return fic
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (fic *FrpcInfoCreate) SetNillableDeviceID(i *int64) *FrpcInfoCreate {
	if i != nil {
		fic.SetDeviceID(*i)
	}
	return fic
}

// SetID sets the "id" field.
func (fic *FrpcInfoCreate) SetID(i int64) *FrpcInfoCreate {
	fic.mutation.SetID(i)
	return fic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fic *FrpcInfoCreate) SetNillableID(i *int64) *FrpcInfoCreate {
	if i != nil {
		fic.SetID(*i)
	}
	return fic
}

// SetFrpsInfoID sets the "frps_info" edge to the FrpsInfo entity by ID.
func (fic *FrpcInfoCreate) SetFrpsInfoID(id int64) *FrpcInfoCreate {
	fic.mutation.SetFrpsInfoID(id)
	return fic
}

// SetFrpsInfo sets the "frps_info" edge to the FrpsInfo entity.
func (fic *FrpcInfoCreate) SetFrpsInfo(f *FrpsInfo) *FrpcInfoCreate {
	return fic.SetFrpsInfoID(f.ID)
}

// SetDevice sets the "device" edge to the Device entity.
func (fic *FrpcInfoCreate) SetDevice(d *Device) *FrpcInfoCreate {
	return fic.SetDeviceID(d.ID)
}

// Mutation returns the FrpcInfoMutation object of the builder.
func (fic *FrpcInfoCreate) Mutation() *FrpcInfoMutation {
	return fic.mutation
}

// Save creates the FrpcInfo in the database.
func (fic *FrpcInfoCreate) Save(ctx context.Context) (*FrpcInfo, error) {
	fic.defaults()
	return withHooks(ctx, fic.sqlSave, fic.mutation, fic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fic *FrpcInfoCreate) SaveX(ctx context.Context) *FrpcInfo {
	v, err := fic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fic *FrpcInfoCreate) Exec(ctx context.Context) error {
	_, err := fic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fic *FrpcInfoCreate) ExecX(ctx context.Context) {
	if err := fic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fic *FrpcInfoCreate) defaults() {
	if _, ok := fic.mutation.CreatedBy(); !ok {
		v := frpcinfo.DefaultCreatedBy
		fic.mutation.SetCreatedBy(v)
	}
	if _, ok := fic.mutation.UpdatedBy(); !ok {
		v := frpcinfo.DefaultUpdatedBy
		fic.mutation.SetUpdatedBy(v)
	}
	if _, ok := fic.mutation.CreatedAt(); !ok {
		v := frpcinfo.DefaultCreatedAt()
		fic.mutation.SetCreatedAt(v)
	}
	if _, ok := fic.mutation.UpdatedAt(); !ok {
		v := frpcinfo.DefaultUpdatedAt()
		fic.mutation.SetUpdatedAt(v)
	}
	if _, ok := fic.mutation.DeletedAt(); !ok {
		v := frpcinfo.DefaultDeletedAt
		fic.mutation.SetDeletedAt(v)
	}
	if _, ok := fic.mutation.Tag(); !ok {
		v := frpcinfo.DefaultTag
		fic.mutation.SetTag(v)
	}
	if _, ok := fic.mutation.GetType(); !ok {
		v := frpcinfo.DefaultType
		fic.mutation.SetType(v)
	}
	if _, ok := fic.mutation.LocalIP(); !ok {
		v := frpcinfo.DefaultLocalIP
		fic.mutation.SetLocalIP(v)
	}
	if _, ok := fic.mutation.LocalPort(); !ok {
		v := frpcinfo.DefaultLocalPort
		fic.mutation.SetLocalPort(v)
	}
	if _, ok := fic.mutation.RemotePort(); !ok {
		v := frpcinfo.DefaultRemotePort
		fic.mutation.SetRemotePort(v)
	}
	if _, ok := fic.mutation.FrpsID(); !ok {
		v := frpcinfo.DefaultFrpsID
		fic.mutation.SetFrpsID(v)
	}
	if _, ok := fic.mutation.DeviceID(); !ok {
		v := frpcinfo.DefaultDeviceID
		fic.mutation.SetDeviceID(v)
	}
	if _, ok := fic.mutation.ID(); !ok {
		v := frpcinfo.DefaultID()
		fic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fic *FrpcInfoCreate) check() error {
	if _, ok := fic.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "FrpcInfo.created_by"`)}
	}
	if _, ok := fic.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "FrpcInfo.updated_by"`)}
	}
	if _, ok := fic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "FrpcInfo.created_at"`)}
	}
	if _, ok := fic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "FrpcInfo.updated_at"`)}
	}
	if _, ok := fic.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "FrpcInfo.deleted_at"`)}
	}
	if _, ok := fic.mutation.Tag(); !ok {
		return &ValidationError{Name: "tag", err: errors.New(`cep_ent: missing required field "FrpcInfo.tag"`)}
	}
	if _, ok := fic.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`cep_ent: missing required field "FrpcInfo.type"`)}
	}
	if _, ok := fic.mutation.LocalIP(); !ok {
		return &ValidationError{Name: "local_ip", err: errors.New(`cep_ent: missing required field "FrpcInfo.local_ip"`)}
	}
	if _, ok := fic.mutation.LocalPort(); !ok {
		return &ValidationError{Name: "local_port", err: errors.New(`cep_ent: missing required field "FrpcInfo.local_port"`)}
	}
	if _, ok := fic.mutation.RemotePort(); !ok {
		return &ValidationError{Name: "remote_port", err: errors.New(`cep_ent: missing required field "FrpcInfo.remote_port"`)}
	}
	if _, ok := fic.mutation.FrpsID(); !ok {
		return &ValidationError{Name: "frps_id", err: errors.New(`cep_ent: missing required field "FrpcInfo.frps_id"`)}
	}
	if _, ok := fic.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`cep_ent: missing required field "FrpcInfo.device_id"`)}
	}
	if _, ok := fic.mutation.FrpsInfoID(); !ok {
		return &ValidationError{Name: "frps_info", err: errors.New(`cep_ent: missing required edge "FrpcInfo.frps_info"`)}
	}
	if _, ok := fic.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device", err: errors.New(`cep_ent: missing required edge "FrpcInfo.device"`)}
	}
	return nil
}

func (fic *FrpcInfoCreate) sqlSave(ctx context.Context) (*FrpcInfo, error) {
	if err := fic.check(); err != nil {
		return nil, err
	}
	_node, _spec := fic.createSpec()
	if err := sqlgraph.CreateNode(ctx, fic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	fic.mutation.id = &_node.ID
	fic.mutation.done = true
	return _node, nil
}

func (fic *FrpcInfoCreate) createSpec() (*FrpcInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &FrpcInfo{config: fic.config}
		_spec = sqlgraph.NewCreateSpec(frpcinfo.Table, sqlgraph.NewFieldSpec(frpcinfo.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = fic.conflict
	if id, ok := fic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fic.mutation.CreatedBy(); ok {
		_spec.SetField(frpcinfo.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := fic.mutation.UpdatedBy(); ok {
		_spec.SetField(frpcinfo.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := fic.mutation.CreatedAt(); ok {
		_spec.SetField(frpcinfo.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fic.mutation.UpdatedAt(); ok {
		_spec.SetField(frpcinfo.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := fic.mutation.DeletedAt(); ok {
		_spec.SetField(frpcinfo.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := fic.mutation.Tag(); ok {
		_spec.SetField(frpcinfo.FieldTag, field.TypeString, value)
		_node.Tag = value
	}
	if value, ok := fic.mutation.GetType(); ok {
		_spec.SetField(frpcinfo.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := fic.mutation.LocalIP(); ok {
		_spec.SetField(frpcinfo.FieldLocalIP, field.TypeString, value)
		_node.LocalIP = value
	}
	if value, ok := fic.mutation.LocalPort(); ok {
		_spec.SetField(frpcinfo.FieldLocalPort, field.TypeInt, value)
		_node.LocalPort = value
	}
	if value, ok := fic.mutation.RemotePort(); ok {
		_spec.SetField(frpcinfo.FieldRemotePort, field.TypeInt, value)
		_node.RemotePort = value
	}
	if nodes := fic.mutation.FrpsInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   frpcinfo.FrpsInfoTable,
			Columns: []string{frpcinfo.FrpsInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(frpsinfo.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FrpsID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fic.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   frpcinfo.DeviceTable,
			Columns: []string{frpcinfo.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DeviceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FrpcInfo.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FrpcInfoUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (fic *FrpcInfoCreate) OnConflict(opts ...sql.ConflictOption) *FrpcInfoUpsertOne {
	fic.conflict = opts
	return &FrpcInfoUpsertOne{
		create: fic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FrpcInfo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fic *FrpcInfoCreate) OnConflictColumns(columns ...string) *FrpcInfoUpsertOne {
	fic.conflict = append(fic.conflict, sql.ConflictColumns(columns...))
	return &FrpcInfoUpsertOne{
		create: fic,
	}
}

type (
	// FrpcInfoUpsertOne is the builder for "upsert"-ing
	//  one FrpcInfo node.
	FrpcInfoUpsertOne struct {
		create *FrpcInfoCreate
	}

	// FrpcInfoUpsert is the "OnConflict" setter.
	FrpcInfoUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *FrpcInfoUpsert) SetCreatedBy(v int64) *FrpcInfoUpsert {
	u.Set(frpcinfo.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *FrpcInfoUpsert) UpdateCreatedBy() *FrpcInfoUpsert {
	u.SetExcluded(frpcinfo.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *FrpcInfoUpsert) AddCreatedBy(v int64) *FrpcInfoUpsert {
	u.Add(frpcinfo.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *FrpcInfoUpsert) SetUpdatedBy(v int64) *FrpcInfoUpsert {
	u.Set(frpcinfo.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *FrpcInfoUpsert) UpdateUpdatedBy() *FrpcInfoUpsert {
	u.SetExcluded(frpcinfo.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *FrpcInfoUpsert) AddUpdatedBy(v int64) *FrpcInfoUpsert {
	u.Add(frpcinfo.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FrpcInfoUpsert) SetUpdatedAt(v time.Time) *FrpcInfoUpsert {
	u.Set(frpcinfo.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FrpcInfoUpsert) UpdateUpdatedAt() *FrpcInfoUpsert {
	u.SetExcluded(frpcinfo.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FrpcInfoUpsert) SetDeletedAt(v time.Time) *FrpcInfoUpsert {
	u.Set(frpcinfo.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FrpcInfoUpsert) UpdateDeletedAt() *FrpcInfoUpsert {
	u.SetExcluded(frpcinfo.FieldDeletedAt)
	return u
}

// SetTag sets the "tag" field.
func (u *FrpcInfoUpsert) SetTag(v string) *FrpcInfoUpsert {
	u.Set(frpcinfo.FieldTag, v)
	return u
}

// UpdateTag sets the "tag" field to the value that was provided on create.
func (u *FrpcInfoUpsert) UpdateTag() *FrpcInfoUpsert {
	u.SetExcluded(frpcinfo.FieldTag)
	return u
}

// SetType sets the "type" field.
func (u *FrpcInfoUpsert) SetType(v string) *FrpcInfoUpsert {
	u.Set(frpcinfo.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *FrpcInfoUpsert) UpdateType() *FrpcInfoUpsert {
	u.SetExcluded(frpcinfo.FieldType)
	return u
}

// SetLocalIP sets the "local_ip" field.
func (u *FrpcInfoUpsert) SetLocalIP(v string) *FrpcInfoUpsert {
	u.Set(frpcinfo.FieldLocalIP, v)
	return u
}

// UpdateLocalIP sets the "local_ip" field to the value that was provided on create.
func (u *FrpcInfoUpsert) UpdateLocalIP() *FrpcInfoUpsert {
	u.SetExcluded(frpcinfo.FieldLocalIP)
	return u
}

// SetLocalPort sets the "local_port" field.
func (u *FrpcInfoUpsert) SetLocalPort(v int) *FrpcInfoUpsert {
	u.Set(frpcinfo.FieldLocalPort, v)
	return u
}

// UpdateLocalPort sets the "local_port" field to the value that was provided on create.
func (u *FrpcInfoUpsert) UpdateLocalPort() *FrpcInfoUpsert {
	u.SetExcluded(frpcinfo.FieldLocalPort)
	return u
}

// AddLocalPort adds v to the "local_port" field.
func (u *FrpcInfoUpsert) AddLocalPort(v int) *FrpcInfoUpsert {
	u.Add(frpcinfo.FieldLocalPort, v)
	return u
}

// SetRemotePort sets the "remote_port" field.
func (u *FrpcInfoUpsert) SetRemotePort(v int) *FrpcInfoUpsert {
	u.Set(frpcinfo.FieldRemotePort, v)
	return u
}

// UpdateRemotePort sets the "remote_port" field to the value that was provided on create.
func (u *FrpcInfoUpsert) UpdateRemotePort() *FrpcInfoUpsert {
	u.SetExcluded(frpcinfo.FieldRemotePort)
	return u
}

// AddRemotePort adds v to the "remote_port" field.
func (u *FrpcInfoUpsert) AddRemotePort(v int) *FrpcInfoUpsert {
	u.Add(frpcinfo.FieldRemotePort, v)
	return u
}

// SetFrpsID sets the "frps_id" field.
func (u *FrpcInfoUpsert) SetFrpsID(v int64) *FrpcInfoUpsert {
	u.Set(frpcinfo.FieldFrpsID, v)
	return u
}

// UpdateFrpsID sets the "frps_id" field to the value that was provided on create.
func (u *FrpcInfoUpsert) UpdateFrpsID() *FrpcInfoUpsert {
	u.SetExcluded(frpcinfo.FieldFrpsID)
	return u
}

// SetDeviceID sets the "device_id" field.
func (u *FrpcInfoUpsert) SetDeviceID(v int64) *FrpcInfoUpsert {
	u.Set(frpcinfo.FieldDeviceID, v)
	return u
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *FrpcInfoUpsert) UpdateDeviceID() *FrpcInfoUpsert {
	u.SetExcluded(frpcinfo.FieldDeviceID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.FrpcInfo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(frpcinfo.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FrpcInfoUpsertOne) UpdateNewValues() *FrpcInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(frpcinfo.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(frpcinfo.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FrpcInfo.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FrpcInfoUpsertOne) Ignore() *FrpcInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FrpcInfoUpsertOne) DoNothing() *FrpcInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FrpcInfoCreate.OnConflict
// documentation for more info.
func (u *FrpcInfoUpsertOne) Update(set func(*FrpcInfoUpsert)) *FrpcInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FrpcInfoUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *FrpcInfoUpsertOne) SetCreatedBy(v int64) *FrpcInfoUpsertOne {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *FrpcInfoUpsertOne) AddCreatedBy(v int64) *FrpcInfoUpsertOne {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *FrpcInfoUpsertOne) UpdateCreatedBy() *FrpcInfoUpsertOne {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *FrpcInfoUpsertOne) SetUpdatedBy(v int64) *FrpcInfoUpsertOne {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *FrpcInfoUpsertOne) AddUpdatedBy(v int64) *FrpcInfoUpsertOne {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *FrpcInfoUpsertOne) UpdateUpdatedBy() *FrpcInfoUpsertOne {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FrpcInfoUpsertOne) SetUpdatedAt(v time.Time) *FrpcInfoUpsertOne {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FrpcInfoUpsertOne) UpdateUpdatedAt() *FrpcInfoUpsertOne {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FrpcInfoUpsertOne) SetDeletedAt(v time.Time) *FrpcInfoUpsertOne {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FrpcInfoUpsertOne) UpdateDeletedAt() *FrpcInfoUpsertOne {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetTag sets the "tag" field.
func (u *FrpcInfoUpsertOne) SetTag(v string) *FrpcInfoUpsertOne {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.SetTag(v)
	})
}

// UpdateTag sets the "tag" field to the value that was provided on create.
func (u *FrpcInfoUpsertOne) UpdateTag() *FrpcInfoUpsertOne {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.UpdateTag()
	})
}

// SetType sets the "type" field.
func (u *FrpcInfoUpsertOne) SetType(v string) *FrpcInfoUpsertOne {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *FrpcInfoUpsertOne) UpdateType() *FrpcInfoUpsertOne {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.UpdateType()
	})
}

// SetLocalIP sets the "local_ip" field.
func (u *FrpcInfoUpsertOne) SetLocalIP(v string) *FrpcInfoUpsertOne {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.SetLocalIP(v)
	})
}

// UpdateLocalIP sets the "local_ip" field to the value that was provided on create.
func (u *FrpcInfoUpsertOne) UpdateLocalIP() *FrpcInfoUpsertOne {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.UpdateLocalIP()
	})
}

// SetLocalPort sets the "local_port" field.
func (u *FrpcInfoUpsertOne) SetLocalPort(v int) *FrpcInfoUpsertOne {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.SetLocalPort(v)
	})
}

// AddLocalPort adds v to the "local_port" field.
func (u *FrpcInfoUpsertOne) AddLocalPort(v int) *FrpcInfoUpsertOne {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.AddLocalPort(v)
	})
}

// UpdateLocalPort sets the "local_port" field to the value that was provided on create.
func (u *FrpcInfoUpsertOne) UpdateLocalPort() *FrpcInfoUpsertOne {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.UpdateLocalPort()
	})
}

// SetRemotePort sets the "remote_port" field.
func (u *FrpcInfoUpsertOne) SetRemotePort(v int) *FrpcInfoUpsertOne {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.SetRemotePort(v)
	})
}

// AddRemotePort adds v to the "remote_port" field.
func (u *FrpcInfoUpsertOne) AddRemotePort(v int) *FrpcInfoUpsertOne {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.AddRemotePort(v)
	})
}

// UpdateRemotePort sets the "remote_port" field to the value that was provided on create.
func (u *FrpcInfoUpsertOne) UpdateRemotePort() *FrpcInfoUpsertOne {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.UpdateRemotePort()
	})
}

// SetFrpsID sets the "frps_id" field.
func (u *FrpcInfoUpsertOne) SetFrpsID(v int64) *FrpcInfoUpsertOne {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.SetFrpsID(v)
	})
}

// UpdateFrpsID sets the "frps_id" field to the value that was provided on create.
func (u *FrpcInfoUpsertOne) UpdateFrpsID() *FrpcInfoUpsertOne {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.UpdateFrpsID()
	})
}

// SetDeviceID sets the "device_id" field.
func (u *FrpcInfoUpsertOne) SetDeviceID(v int64) *FrpcInfoUpsertOne {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.SetDeviceID(v)
	})
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *FrpcInfoUpsertOne) UpdateDeviceID() *FrpcInfoUpsertOne {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.UpdateDeviceID()
	})
}

// Exec executes the query.
func (u *FrpcInfoUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for FrpcInfoCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FrpcInfoUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FrpcInfoUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FrpcInfoUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FrpcInfoCreateBulk is the builder for creating many FrpcInfo entities in bulk.
type FrpcInfoCreateBulk struct {
	config
	err      error
	builders []*FrpcInfoCreate
	conflict []sql.ConflictOption
}

// Save creates the FrpcInfo entities in the database.
func (ficb *FrpcInfoCreateBulk) Save(ctx context.Context) ([]*FrpcInfo, error) {
	if ficb.err != nil {
		return nil, ficb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ficb.builders))
	nodes := make([]*FrpcInfo, len(ficb.builders))
	mutators := make([]Mutator, len(ficb.builders))
	for i := range ficb.builders {
		func(i int, root context.Context) {
			builder := ficb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FrpcInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ficb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ficb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ficb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ficb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ficb *FrpcInfoCreateBulk) SaveX(ctx context.Context) []*FrpcInfo {
	v, err := ficb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ficb *FrpcInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := ficb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ficb *FrpcInfoCreateBulk) ExecX(ctx context.Context) {
	if err := ficb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FrpcInfo.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FrpcInfoUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (ficb *FrpcInfoCreateBulk) OnConflict(opts ...sql.ConflictOption) *FrpcInfoUpsertBulk {
	ficb.conflict = opts
	return &FrpcInfoUpsertBulk{
		create: ficb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FrpcInfo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ficb *FrpcInfoCreateBulk) OnConflictColumns(columns ...string) *FrpcInfoUpsertBulk {
	ficb.conflict = append(ficb.conflict, sql.ConflictColumns(columns...))
	return &FrpcInfoUpsertBulk{
		create: ficb,
	}
}

// FrpcInfoUpsertBulk is the builder for "upsert"-ing
// a bulk of FrpcInfo nodes.
type FrpcInfoUpsertBulk struct {
	create *FrpcInfoCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FrpcInfo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(frpcinfo.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FrpcInfoUpsertBulk) UpdateNewValues() *FrpcInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(frpcinfo.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(frpcinfo.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FrpcInfo.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FrpcInfoUpsertBulk) Ignore() *FrpcInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FrpcInfoUpsertBulk) DoNothing() *FrpcInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FrpcInfoCreateBulk.OnConflict
// documentation for more info.
func (u *FrpcInfoUpsertBulk) Update(set func(*FrpcInfoUpsert)) *FrpcInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FrpcInfoUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *FrpcInfoUpsertBulk) SetCreatedBy(v int64) *FrpcInfoUpsertBulk {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *FrpcInfoUpsertBulk) AddCreatedBy(v int64) *FrpcInfoUpsertBulk {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *FrpcInfoUpsertBulk) UpdateCreatedBy() *FrpcInfoUpsertBulk {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *FrpcInfoUpsertBulk) SetUpdatedBy(v int64) *FrpcInfoUpsertBulk {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *FrpcInfoUpsertBulk) AddUpdatedBy(v int64) *FrpcInfoUpsertBulk {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *FrpcInfoUpsertBulk) UpdateUpdatedBy() *FrpcInfoUpsertBulk {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FrpcInfoUpsertBulk) SetUpdatedAt(v time.Time) *FrpcInfoUpsertBulk {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FrpcInfoUpsertBulk) UpdateUpdatedAt() *FrpcInfoUpsertBulk {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FrpcInfoUpsertBulk) SetDeletedAt(v time.Time) *FrpcInfoUpsertBulk {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FrpcInfoUpsertBulk) UpdateDeletedAt() *FrpcInfoUpsertBulk {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetTag sets the "tag" field.
func (u *FrpcInfoUpsertBulk) SetTag(v string) *FrpcInfoUpsertBulk {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.SetTag(v)
	})
}

// UpdateTag sets the "tag" field to the value that was provided on create.
func (u *FrpcInfoUpsertBulk) UpdateTag() *FrpcInfoUpsertBulk {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.UpdateTag()
	})
}

// SetType sets the "type" field.
func (u *FrpcInfoUpsertBulk) SetType(v string) *FrpcInfoUpsertBulk {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *FrpcInfoUpsertBulk) UpdateType() *FrpcInfoUpsertBulk {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.UpdateType()
	})
}

// SetLocalIP sets the "local_ip" field.
func (u *FrpcInfoUpsertBulk) SetLocalIP(v string) *FrpcInfoUpsertBulk {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.SetLocalIP(v)
	})
}

// UpdateLocalIP sets the "local_ip" field to the value that was provided on create.
func (u *FrpcInfoUpsertBulk) UpdateLocalIP() *FrpcInfoUpsertBulk {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.UpdateLocalIP()
	})
}

// SetLocalPort sets the "local_port" field.
func (u *FrpcInfoUpsertBulk) SetLocalPort(v int) *FrpcInfoUpsertBulk {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.SetLocalPort(v)
	})
}

// AddLocalPort adds v to the "local_port" field.
func (u *FrpcInfoUpsertBulk) AddLocalPort(v int) *FrpcInfoUpsertBulk {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.AddLocalPort(v)
	})
}

// UpdateLocalPort sets the "local_port" field to the value that was provided on create.
func (u *FrpcInfoUpsertBulk) UpdateLocalPort() *FrpcInfoUpsertBulk {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.UpdateLocalPort()
	})
}

// SetRemotePort sets the "remote_port" field.
func (u *FrpcInfoUpsertBulk) SetRemotePort(v int) *FrpcInfoUpsertBulk {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.SetRemotePort(v)
	})
}

// AddRemotePort adds v to the "remote_port" field.
func (u *FrpcInfoUpsertBulk) AddRemotePort(v int) *FrpcInfoUpsertBulk {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.AddRemotePort(v)
	})
}

// UpdateRemotePort sets the "remote_port" field to the value that was provided on create.
func (u *FrpcInfoUpsertBulk) UpdateRemotePort() *FrpcInfoUpsertBulk {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.UpdateRemotePort()
	})
}

// SetFrpsID sets the "frps_id" field.
func (u *FrpcInfoUpsertBulk) SetFrpsID(v int64) *FrpcInfoUpsertBulk {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.SetFrpsID(v)
	})
}

// UpdateFrpsID sets the "frps_id" field to the value that was provided on create.
func (u *FrpcInfoUpsertBulk) UpdateFrpsID() *FrpcInfoUpsertBulk {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.UpdateFrpsID()
	})
}

// SetDeviceID sets the "device_id" field.
func (u *FrpcInfoUpsertBulk) SetDeviceID(v int64) *FrpcInfoUpsertBulk {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.SetDeviceID(v)
	})
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *FrpcInfoUpsertBulk) UpdateDeviceID() *FrpcInfoUpsertBulk {
	return u.Update(func(s *FrpcInfoUpsert) {
		s.UpdateDeviceID()
	})
}

// Exec executes the query.
func (u *FrpcInfoUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the FrpcInfoCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for FrpcInfoCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FrpcInfoUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
