// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/earnbill"
	"cephalon-ent/pkg/cep_ent/missionproduceorder"
	"cephalon-ent/pkg/cep_ent/platformaccount"
	"cephalon-ent/pkg/cep_ent/profitaccount"
	"cephalon-ent/pkg/cep_ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EarnBillCreate is the builder for creating a EarnBill entity.
type EarnBillCreate struct {
	config
	mutation *EarnBillMutation
	hooks    []Hook
}

// SetCreatedBy sets the "created_by" field.
func (ebc *EarnBillCreate) SetCreatedBy(i int64) *EarnBillCreate {
	ebc.mutation.SetCreatedBy(i)
	return ebc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ebc *EarnBillCreate) SetNillableCreatedBy(i *int64) *EarnBillCreate {
	if i != nil {
		ebc.SetCreatedBy(*i)
	}
	return ebc
}

// SetUpdatedBy sets the "updated_by" field.
func (ebc *EarnBillCreate) SetUpdatedBy(i int64) *EarnBillCreate {
	ebc.mutation.SetUpdatedBy(i)
	return ebc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ebc *EarnBillCreate) SetNillableUpdatedBy(i *int64) *EarnBillCreate {
	if i != nil {
		ebc.SetUpdatedBy(*i)
	}
	return ebc
}

// SetCreatedAt sets the "created_at" field.
func (ebc *EarnBillCreate) SetCreatedAt(t time.Time) *EarnBillCreate {
	ebc.mutation.SetCreatedAt(t)
	return ebc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ebc *EarnBillCreate) SetNillableCreatedAt(t *time.Time) *EarnBillCreate {
	if t != nil {
		ebc.SetCreatedAt(*t)
	}
	return ebc
}

// SetUpdatedAt sets the "updated_at" field.
func (ebc *EarnBillCreate) SetUpdatedAt(t time.Time) *EarnBillCreate {
	ebc.mutation.SetUpdatedAt(t)
	return ebc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ebc *EarnBillCreate) SetNillableUpdatedAt(t *time.Time) *EarnBillCreate {
	if t != nil {
		ebc.SetUpdatedAt(*t)
	}
	return ebc
}

// SetDeletedAt sets the "deleted_at" field.
func (ebc *EarnBillCreate) SetDeletedAt(t time.Time) *EarnBillCreate {
	ebc.mutation.SetDeletedAt(t)
	return ebc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ebc *EarnBillCreate) SetNillableDeletedAt(t *time.Time) *EarnBillCreate {
	if t != nil {
		ebc.SetDeletedAt(*t)
	}
	return ebc
}

// SetType sets the "type" field.
func (ebc *EarnBillCreate) SetType(e earnbill.Type) *EarnBillCreate {
	ebc.mutation.SetType(e)
	return ebc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ebc *EarnBillCreate) SetNillableType(e *earnbill.Type) *EarnBillCreate {
	if e != nil {
		ebc.SetType(*e)
	}
	return ebc
}

// SetIsMinus sets the "is_minus" field.
func (ebc *EarnBillCreate) SetIsMinus(b bool) *EarnBillCreate {
	ebc.mutation.SetIsMinus(b)
	return ebc
}

// SetNillableIsMinus sets the "is_minus" field if the given value is not nil.
func (ebc *EarnBillCreate) SetNillableIsMinus(b *bool) *EarnBillCreate {
	if b != nil {
		ebc.SetIsMinus(*b)
	}
	return ebc
}

// SetUserID sets the "user_id" field.
func (ebc *EarnBillCreate) SetUserID(i int64) *EarnBillCreate {
	ebc.mutation.SetUserID(i)
	return ebc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ebc *EarnBillCreate) SetNillableUserID(i *int64) *EarnBillCreate {
	if i != nil {
		ebc.SetUserID(*i)
	}
	return ebc
}

// SetSerialNumber sets the "serial_number" field.
func (ebc *EarnBillCreate) SetSerialNumber(s string) *EarnBillCreate {
	ebc.mutation.SetSerialNumber(s)
	return ebc
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (ebc *EarnBillCreate) SetNillableSerialNumber(s *string) *EarnBillCreate {
	if s != nil {
		ebc.SetSerialNumber(*s)
	}
	return ebc
}

// SetProfitAccountID sets the "profit_account_id" field.
func (ebc *EarnBillCreate) SetProfitAccountID(i int64) *EarnBillCreate {
	ebc.mutation.SetProfitAccountID(i)
	return ebc
}

// SetNillableProfitAccountID sets the "profit_account_id" field if the given value is not nil.
func (ebc *EarnBillCreate) SetNillableProfitAccountID(i *int64) *EarnBillCreate {
	if i != nil {
		ebc.SetProfitAccountID(*i)
	}
	return ebc
}

// SetPureCep sets the "pure_cep" field.
func (ebc *EarnBillCreate) SetPureCep(i int64) *EarnBillCreate {
	ebc.mutation.SetPureCep(i)
	return ebc
}

// SetNillablePureCep sets the "pure_cep" field if the given value is not nil.
func (ebc *EarnBillCreate) SetNillablePureCep(i *int64) *EarnBillCreate {
	if i != nil {
		ebc.SetPureCep(*i)
	}
	return ebc
}

// SetGiftCep sets the "gift_cep" field.
func (ebc *EarnBillCreate) SetGiftCep(i int64) *EarnBillCreate {
	ebc.mutation.SetGiftCep(i)
	return ebc
}

// SetNillableGiftCep sets the "gift_cep" field if the given value is not nil.
func (ebc *EarnBillCreate) SetNillableGiftCep(i *int64) *EarnBillCreate {
	if i != nil {
		ebc.SetGiftCep(*i)
	}
	return ebc
}

// SetPlatformAccountID sets the "platform_account_id" field.
func (ebc *EarnBillCreate) SetPlatformAccountID(i int64) *EarnBillCreate {
	ebc.mutation.SetPlatformAccountID(i)
	return ebc
}

// SetNillablePlatformAccountID sets the "platform_account_id" field if the given value is not nil.
func (ebc *EarnBillCreate) SetNillablePlatformAccountID(i *int64) *EarnBillCreate {
	if i != nil {
		ebc.SetPlatformAccountID(*i)
	}
	return ebc
}

// SetPlatformPureCep sets the "platform_pure_cep" field.
func (ebc *EarnBillCreate) SetPlatformPureCep(i int64) *EarnBillCreate {
	ebc.mutation.SetPlatformPureCep(i)
	return ebc
}

// SetNillablePlatformPureCep sets the "platform_pure_cep" field if the given value is not nil.
func (ebc *EarnBillCreate) SetNillablePlatformPureCep(i *int64) *EarnBillCreate {
	if i != nil {
		ebc.SetPlatformPureCep(*i)
	}
	return ebc
}

// SetPlatformGiftCep sets the "platform_gift_cep" field.
func (ebc *EarnBillCreate) SetPlatformGiftCep(i int64) *EarnBillCreate {
	ebc.mutation.SetPlatformGiftCep(i)
	return ebc
}

// SetNillablePlatformGiftCep sets the "platform_gift_cep" field if the given value is not nil.
func (ebc *EarnBillCreate) SetNillablePlatformGiftCep(i *int64) *EarnBillCreate {
	if i != nil {
		ebc.SetPlatformGiftCep(*i)
	}
	return ebc
}

// SetReasonID sets the "reason_id" field.
func (ebc *EarnBillCreate) SetReasonID(i int64) *EarnBillCreate {
	ebc.mutation.SetReasonID(i)
	return ebc
}

// SetNillableReasonID sets the "reason_id" field if the given value is not nil.
func (ebc *EarnBillCreate) SetNillableReasonID(i *int64) *EarnBillCreate {
	if i != nil {
		ebc.SetReasonID(*i)
	}
	return ebc
}

// SetID sets the "id" field.
func (ebc *EarnBillCreate) SetID(i int64) *EarnBillCreate {
	ebc.mutation.SetID(i)
	return ebc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ebc *EarnBillCreate) SetNillableID(i *int64) *EarnBillCreate {
	if i != nil {
		ebc.SetID(*i)
	}
	return ebc
}

// SetUser sets the "user" edge to the User entity.
func (ebc *EarnBillCreate) SetUser(u *User) *EarnBillCreate {
	return ebc.SetUserID(u.ID)
}

// SetProfitAccount sets the "profit_account" edge to the ProfitAccount entity.
func (ebc *EarnBillCreate) SetProfitAccount(p *ProfitAccount) *EarnBillCreate {
	return ebc.SetProfitAccountID(p.ID)
}

// SetPlatformAccount sets the "platform_account" edge to the PlatformAccount entity.
func (ebc *EarnBillCreate) SetPlatformAccount(p *PlatformAccount) *EarnBillCreate {
	return ebc.SetPlatformAccountID(p.ID)
}

// SetMissionProduceOrdersID sets the "mission_produce_orders" edge to the MissionProduceOrder entity by ID.
func (ebc *EarnBillCreate) SetMissionProduceOrdersID(id int64) *EarnBillCreate {
	ebc.mutation.SetMissionProduceOrdersID(id)
	return ebc
}

// SetNillableMissionProduceOrdersID sets the "mission_produce_orders" edge to the MissionProduceOrder entity by ID if the given value is not nil.
func (ebc *EarnBillCreate) SetNillableMissionProduceOrdersID(id *int64) *EarnBillCreate {
	if id != nil {
		ebc = ebc.SetMissionProduceOrdersID(*id)
	}
	return ebc
}

// SetMissionProduceOrders sets the "mission_produce_orders" edge to the MissionProduceOrder entity.
func (ebc *EarnBillCreate) SetMissionProduceOrders(m *MissionProduceOrder) *EarnBillCreate {
	return ebc.SetMissionProduceOrdersID(m.ID)
}

// Mutation returns the EarnBillMutation object of the builder.
func (ebc *EarnBillCreate) Mutation() *EarnBillMutation {
	return ebc.mutation
}

// Save creates the EarnBill in the database.
func (ebc *EarnBillCreate) Save(ctx context.Context) (*EarnBill, error) {
	ebc.defaults()
	return withHooks(ctx, ebc.sqlSave, ebc.mutation, ebc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ebc *EarnBillCreate) SaveX(ctx context.Context) *EarnBill {
	v, err := ebc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ebc *EarnBillCreate) Exec(ctx context.Context) error {
	_, err := ebc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ebc *EarnBillCreate) ExecX(ctx context.Context) {
	if err := ebc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ebc *EarnBillCreate) defaults() {
	if _, ok := ebc.mutation.CreatedBy(); !ok {
		v := earnbill.DefaultCreatedBy
		ebc.mutation.SetCreatedBy(v)
	}
	if _, ok := ebc.mutation.UpdatedBy(); !ok {
		v := earnbill.DefaultUpdatedBy
		ebc.mutation.SetUpdatedBy(v)
	}
	if _, ok := ebc.mutation.CreatedAt(); !ok {
		v := earnbill.DefaultCreatedAt()
		ebc.mutation.SetCreatedAt(v)
	}
	if _, ok := ebc.mutation.UpdatedAt(); !ok {
		v := earnbill.DefaultUpdatedAt()
		ebc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ebc.mutation.DeletedAt(); !ok {
		v := earnbill.DefaultDeletedAt
		ebc.mutation.SetDeletedAt(v)
	}
	if _, ok := ebc.mutation.GetType(); !ok {
		v := earnbill.DefaultType
		ebc.mutation.SetType(v)
	}
	if _, ok := ebc.mutation.IsMinus(); !ok {
		v := earnbill.DefaultIsMinus
		ebc.mutation.SetIsMinus(v)
	}
	if _, ok := ebc.mutation.UserID(); !ok {
		v := earnbill.DefaultUserID
		ebc.mutation.SetUserID(v)
	}
	if _, ok := ebc.mutation.SerialNumber(); !ok {
		v := earnbill.DefaultSerialNumber
		ebc.mutation.SetSerialNumber(v)
	}
	if _, ok := ebc.mutation.ProfitAccountID(); !ok {
		v := earnbill.DefaultProfitAccountID
		ebc.mutation.SetProfitAccountID(v)
	}
	if _, ok := ebc.mutation.PureCep(); !ok {
		v := earnbill.DefaultPureCep
		ebc.mutation.SetPureCep(v)
	}
	if _, ok := ebc.mutation.GiftCep(); !ok {
		v := earnbill.DefaultGiftCep
		ebc.mutation.SetGiftCep(v)
	}
	if _, ok := ebc.mutation.PlatformAccountID(); !ok {
		v := earnbill.DefaultPlatformAccountID
		ebc.mutation.SetPlatformAccountID(v)
	}
	if _, ok := ebc.mutation.PlatformPureCep(); !ok {
		v := earnbill.DefaultPlatformPureCep
		ebc.mutation.SetPlatformPureCep(v)
	}
	if _, ok := ebc.mutation.PlatformGiftCep(); !ok {
		v := earnbill.DefaultPlatformGiftCep
		ebc.mutation.SetPlatformGiftCep(v)
	}
	if _, ok := ebc.mutation.ReasonID(); !ok {
		v := earnbill.DefaultReasonID
		ebc.mutation.SetReasonID(v)
	}
	if _, ok := ebc.mutation.ID(); !ok {
		v := earnbill.DefaultID()
		ebc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ebc *EarnBillCreate) check() error {
	if _, ok := ebc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "EarnBill.created_by"`)}
	}
	if _, ok := ebc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "EarnBill.updated_by"`)}
	}
	if _, ok := ebc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "EarnBill.created_at"`)}
	}
	if _, ok := ebc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "EarnBill.updated_at"`)}
	}
	if _, ok := ebc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "EarnBill.deleted_at"`)}
	}
	if _, ok := ebc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`cep_ent: missing required field "EarnBill.type"`)}
	}
	if v, ok := ebc.mutation.GetType(); ok {
		if err := earnbill.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "EarnBill.type": %w`, err)}
		}
	}
	if _, ok := ebc.mutation.IsMinus(); !ok {
		return &ValidationError{Name: "is_minus", err: errors.New(`cep_ent: missing required field "EarnBill.is_minus"`)}
	}
	if _, ok := ebc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "EarnBill.user_id"`)}
	}
	if _, ok := ebc.mutation.SerialNumber(); !ok {
		return &ValidationError{Name: "serial_number", err: errors.New(`cep_ent: missing required field "EarnBill.serial_number"`)}
	}
	if _, ok := ebc.mutation.ProfitAccountID(); !ok {
		return &ValidationError{Name: "profit_account_id", err: errors.New(`cep_ent: missing required field "EarnBill.profit_account_id"`)}
	}
	if _, ok := ebc.mutation.PureCep(); !ok {
		return &ValidationError{Name: "pure_cep", err: errors.New(`cep_ent: missing required field "EarnBill.pure_cep"`)}
	}
	if _, ok := ebc.mutation.GiftCep(); !ok {
		return &ValidationError{Name: "gift_cep", err: errors.New(`cep_ent: missing required field "EarnBill.gift_cep"`)}
	}
	if _, ok := ebc.mutation.PlatformAccountID(); !ok {
		return &ValidationError{Name: "platform_account_id", err: errors.New(`cep_ent: missing required field "EarnBill.platform_account_id"`)}
	}
	if _, ok := ebc.mutation.PlatformPureCep(); !ok {
		return &ValidationError{Name: "platform_pure_cep", err: errors.New(`cep_ent: missing required field "EarnBill.platform_pure_cep"`)}
	}
	if _, ok := ebc.mutation.PlatformGiftCep(); !ok {
		return &ValidationError{Name: "platform_gift_cep", err: errors.New(`cep_ent: missing required field "EarnBill.platform_gift_cep"`)}
	}
	if _, ok := ebc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "EarnBill.user"`)}
	}
	if _, ok := ebc.mutation.ProfitAccountID(); !ok {
		return &ValidationError{Name: "profit_account", err: errors.New(`cep_ent: missing required edge "EarnBill.profit_account"`)}
	}
	if _, ok := ebc.mutation.PlatformAccountID(); !ok {
		return &ValidationError{Name: "platform_account", err: errors.New(`cep_ent: missing required edge "EarnBill.platform_account"`)}
	}
	return nil
}

func (ebc *EarnBillCreate) sqlSave(ctx context.Context) (*EarnBill, error) {
	if err := ebc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ebc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ebc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	ebc.mutation.id = &_node.ID
	ebc.mutation.done = true
	return _node, nil
}

func (ebc *EarnBillCreate) createSpec() (*EarnBill, *sqlgraph.CreateSpec) {
	var (
		_node = &EarnBill{config: ebc.config}
		_spec = sqlgraph.NewCreateSpec(earnbill.Table, sqlgraph.NewFieldSpec(earnbill.FieldID, field.TypeInt64))
	)
	if id, ok := ebc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ebc.mutation.CreatedBy(); ok {
		_spec.SetField(earnbill.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := ebc.mutation.UpdatedBy(); ok {
		_spec.SetField(earnbill.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := ebc.mutation.CreatedAt(); ok {
		_spec.SetField(earnbill.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ebc.mutation.UpdatedAt(); ok {
		_spec.SetField(earnbill.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ebc.mutation.DeletedAt(); ok {
		_spec.SetField(earnbill.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := ebc.mutation.GetType(); ok {
		_spec.SetField(earnbill.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := ebc.mutation.IsMinus(); ok {
		_spec.SetField(earnbill.FieldIsMinus, field.TypeBool, value)
		_node.IsMinus = value
	}
	if value, ok := ebc.mutation.SerialNumber(); ok {
		_spec.SetField(earnbill.FieldSerialNumber, field.TypeString, value)
		_node.SerialNumber = value
	}
	if value, ok := ebc.mutation.PureCep(); ok {
		_spec.SetField(earnbill.FieldPureCep, field.TypeInt64, value)
		_node.PureCep = value
	}
	if value, ok := ebc.mutation.GiftCep(); ok {
		_spec.SetField(earnbill.FieldGiftCep, field.TypeInt64, value)
		_node.GiftCep = value
	}
	if value, ok := ebc.mutation.PlatformPureCep(); ok {
		_spec.SetField(earnbill.FieldPlatformPureCep, field.TypeInt64, value)
		_node.PlatformPureCep = value
	}
	if value, ok := ebc.mutation.PlatformGiftCep(); ok {
		_spec.SetField(earnbill.FieldPlatformGiftCep, field.TypeInt64, value)
		_node.PlatformGiftCep = value
	}
	if nodes := ebc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   earnbill.UserTable,
			Columns: []string{earnbill.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ebc.mutation.ProfitAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   earnbill.ProfitAccountTable,
			Columns: []string{earnbill.ProfitAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profitaccount.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProfitAccountID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ebc.mutation.PlatformAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   earnbill.PlatformAccountTable,
			Columns: []string{earnbill.PlatformAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformaccount.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PlatformAccountID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ebc.mutation.MissionProduceOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   earnbill.MissionProduceOrdersTable,
			Columns: []string{earnbill.MissionProduceOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ReasonID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EarnBillCreateBulk is the builder for creating many EarnBill entities in bulk.
type EarnBillCreateBulk struct {
	config
	builders []*EarnBillCreate
}

// Save creates the EarnBill entities in the database.
func (ebcb *EarnBillCreateBulk) Save(ctx context.Context) ([]*EarnBill, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ebcb.builders))
	nodes := make([]*EarnBill, len(ebcb.builders))
	mutators := make([]Mutator, len(ebcb.builders))
	for i := range ebcb.builders {
		func(i int, root context.Context) {
			builder := ebcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EarnBillMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ebcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ebcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ebcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ebcb *EarnBillCreateBulk) SaveX(ctx context.Context) []*EarnBill {
	v, err := ebcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ebcb *EarnBillCreateBulk) Exec(ctx context.Context) error {
	_, err := ebcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ebcb *EarnBillCreateBulk) ExecX(ctx context.Context) {
	if err := ebcb.Exec(ctx); err != nil {
		panic(err)
	}
}
