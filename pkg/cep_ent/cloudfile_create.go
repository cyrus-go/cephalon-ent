// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/cloudfile"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
)

// CloudFileCreate is the builder for creating a CloudFile entity.
type CloudFileCreate struct {
	config
	mutation *CloudFileMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (cfc *CloudFileCreate) SetCreatedBy(i int64) *CloudFileCreate {
	cfc.mutation.SetCreatedBy(i)
	return cfc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cfc *CloudFileCreate) SetNillableCreatedBy(i *int64) *CloudFileCreate {
	if i != nil {
		cfc.SetCreatedBy(*i)
	}
	return cfc
}

// SetUpdatedBy sets the "updated_by" field.
func (cfc *CloudFileCreate) SetUpdatedBy(i int64) *CloudFileCreate {
	cfc.mutation.SetUpdatedBy(i)
	return cfc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cfc *CloudFileCreate) SetNillableUpdatedBy(i *int64) *CloudFileCreate {
	if i != nil {
		cfc.SetUpdatedBy(*i)
	}
	return cfc
}

// SetCreatedAt sets the "created_at" field.
func (cfc *CloudFileCreate) SetCreatedAt(t time.Time) *CloudFileCreate {
	cfc.mutation.SetCreatedAt(t)
	return cfc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cfc *CloudFileCreate) SetNillableCreatedAt(t *time.Time) *CloudFileCreate {
	if t != nil {
		cfc.SetCreatedAt(*t)
	}
	return cfc
}

// SetUpdatedAt sets the "updated_at" field.
func (cfc *CloudFileCreate) SetUpdatedAt(t time.Time) *CloudFileCreate {
	cfc.mutation.SetUpdatedAt(t)
	return cfc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cfc *CloudFileCreate) SetNillableUpdatedAt(t *time.Time) *CloudFileCreate {
	if t != nil {
		cfc.SetUpdatedAt(*t)
	}
	return cfc
}

// SetDeletedAt sets the "deleted_at" field.
func (cfc *CloudFileCreate) SetDeletedAt(t time.Time) *CloudFileCreate {
	cfc.mutation.SetDeletedAt(t)
	return cfc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cfc *CloudFileCreate) SetNillableDeletedAt(t *time.Time) *CloudFileCreate {
	if t != nil {
		cfc.SetDeletedAt(*t)
	}
	return cfc
}

// SetUserID sets the "user_id" field.
func (cfc *CloudFileCreate) SetUserID(i int64) *CloudFileCreate {
	cfc.mutation.SetUserID(i)
	return cfc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cfc *CloudFileCreate) SetNillableUserID(i *int64) *CloudFileCreate {
	if i != nil {
		cfc.SetUserID(*i)
	}
	return cfc
}

// SetName sets the "name" field.
func (cfc *CloudFileCreate) SetName(s string) *CloudFileCreate {
	cfc.mutation.SetName(s)
	return cfc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cfc *CloudFileCreate) SetNillableName(s *string) *CloudFileCreate {
	if s != nil {
		cfc.SetName(*s)
	}
	return cfc
}

// SetIcon sets the "icon" field.
func (cfc *CloudFileCreate) SetIcon(s string) *CloudFileCreate {
	cfc.mutation.SetIcon(s)
	return cfc
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (cfc *CloudFileCreate) SetNillableIcon(s *string) *CloudFileCreate {
	if s != nil {
		cfc.SetIcon(*s)
	}
	return cfc
}

// SetSize sets the "size" field.
func (cfc *CloudFileCreate) SetSize(i int64) *CloudFileCreate {
	cfc.mutation.SetSize(i)
	return cfc
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (cfc *CloudFileCreate) SetNillableSize(i *int64) *CloudFileCreate {
	if i != nil {
		cfc.SetSize(*i)
	}
	return cfc
}

// SetMd5 sets the "md5" field.
func (cfc *CloudFileCreate) SetMd5(s string) *CloudFileCreate {
	cfc.mutation.SetMd5(s)
	return cfc
}

// SetNillableMd5 sets the "md5" field if the given value is not nil.
func (cfc *CloudFileCreate) SetNillableMd5(s *string) *CloudFileCreate {
	if s != nil {
		cfc.SetMd5(*s)
	}
	return cfc
}

// SetID sets the "id" field.
func (cfc *CloudFileCreate) SetID(i int64) *CloudFileCreate {
	cfc.mutation.SetID(i)
	return cfc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cfc *CloudFileCreate) SetNillableID(i *int64) *CloudFileCreate {
	if i != nil {
		cfc.SetID(*i)
	}
	return cfc
}

// SetUser sets the "user" edge to the User entity.
func (cfc *CloudFileCreate) SetUser(u *User) *CloudFileCreate {
	return cfc.SetUserID(u.ID)
}

// Mutation returns the CloudFileMutation object of the builder.
func (cfc *CloudFileCreate) Mutation() *CloudFileMutation {
	return cfc.mutation
}

// Save creates the CloudFile in the database.
func (cfc *CloudFileCreate) Save(ctx context.Context) (*CloudFile, error) {
	cfc.defaults()
	return withHooks(ctx, cfc.sqlSave, cfc.mutation, cfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cfc *CloudFileCreate) SaveX(ctx context.Context) *CloudFile {
	v, err := cfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cfc *CloudFileCreate) Exec(ctx context.Context) error {
	_, err := cfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfc *CloudFileCreate) ExecX(ctx context.Context) {
	if err := cfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cfc *CloudFileCreate) defaults() {
	if _, ok := cfc.mutation.CreatedBy(); !ok {
		v := cloudfile.DefaultCreatedBy
		cfc.mutation.SetCreatedBy(v)
	}
	if _, ok := cfc.mutation.UpdatedBy(); !ok {
		v := cloudfile.DefaultUpdatedBy
		cfc.mutation.SetUpdatedBy(v)
	}
	if _, ok := cfc.mutation.CreatedAt(); !ok {
		v := cloudfile.DefaultCreatedAt()
		cfc.mutation.SetCreatedAt(v)
	}
	if _, ok := cfc.mutation.UpdatedAt(); !ok {
		v := cloudfile.DefaultUpdatedAt()
		cfc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cfc.mutation.DeletedAt(); !ok {
		v := cloudfile.DefaultDeletedAt
		cfc.mutation.SetDeletedAt(v)
	}
	if _, ok := cfc.mutation.UserID(); !ok {
		v := cloudfile.DefaultUserID
		cfc.mutation.SetUserID(v)
	}
	if _, ok := cfc.mutation.Name(); !ok {
		v := cloudfile.DefaultName
		cfc.mutation.SetName(v)
	}
	if _, ok := cfc.mutation.Icon(); !ok {
		v := cloudfile.DefaultIcon
		cfc.mutation.SetIcon(v)
	}
	if _, ok := cfc.mutation.Size(); !ok {
		v := cloudfile.DefaultSize
		cfc.mutation.SetSize(v)
	}
	if _, ok := cfc.mutation.Md5(); !ok {
		v := cloudfile.DefaultMd5
		cfc.mutation.SetMd5(v)
	}
	if _, ok := cfc.mutation.ID(); !ok {
		v := cloudfile.DefaultID()
		cfc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cfc *CloudFileCreate) check() error {
	if _, ok := cfc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "CloudFile.created_by"`)}
	}
	if _, ok := cfc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "CloudFile.updated_by"`)}
	}
	if _, ok := cfc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "CloudFile.created_at"`)}
	}
	if _, ok := cfc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "CloudFile.updated_at"`)}
	}
	if _, ok := cfc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "CloudFile.deleted_at"`)}
	}
	if _, ok := cfc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "CloudFile.user_id"`)}
	}
	if _, ok := cfc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`cep_ent: missing required field "CloudFile.name"`)}
	}
	if _, ok := cfc.mutation.Icon(); !ok {
		return &ValidationError{Name: "icon", err: errors.New(`cep_ent: missing required field "CloudFile.icon"`)}
	}
	if _, ok := cfc.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`cep_ent: missing required field "CloudFile.size"`)}
	}
	if _, ok := cfc.mutation.Md5(); !ok {
		return &ValidationError{Name: "md5", err: errors.New(`cep_ent: missing required field "CloudFile.md5"`)}
	}
	if _, ok := cfc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "CloudFile.user"`)}
	}
	return nil
}

func (cfc *CloudFileCreate) sqlSave(ctx context.Context) (*CloudFile, error) {
	if err := cfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	cfc.mutation.id = &_node.ID
	cfc.mutation.done = true
	return _node, nil
}

func (cfc *CloudFileCreate) createSpec() (*CloudFile, *sqlgraph.CreateSpec) {
	var (
		_node = &CloudFile{config: cfc.config}
		_spec = sqlgraph.NewCreateSpec(cloudfile.Table, sqlgraph.NewFieldSpec(cloudfile.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = cfc.conflict
	if id, ok := cfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cfc.mutation.CreatedBy(); ok {
		_spec.SetField(cloudfile.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := cfc.mutation.UpdatedBy(); ok {
		_spec.SetField(cloudfile.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := cfc.mutation.CreatedAt(); ok {
		_spec.SetField(cloudfile.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cfc.mutation.UpdatedAt(); ok {
		_spec.SetField(cloudfile.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cfc.mutation.DeletedAt(); ok {
		_spec.SetField(cloudfile.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := cfc.mutation.Name(); ok {
		_spec.SetField(cloudfile.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cfc.mutation.Icon(); ok {
		_spec.SetField(cloudfile.FieldIcon, field.TypeString, value)
		_node.Icon = value
	}
	if value, ok := cfc.mutation.Size(); ok {
		_spec.SetField(cloudfile.FieldSize, field.TypeInt64, value)
		_node.Size = value
	}
	if value, ok := cfc.mutation.Md5(); ok {
		_spec.SetField(cloudfile.FieldMd5, field.TypeString, value)
		_node.Md5 = value
	}
	if nodes := cfc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cloudfile.UserTable,
			Columns: []string{cloudfile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CloudFile.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CloudFileUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (cfc *CloudFileCreate) OnConflict(opts ...sql.ConflictOption) *CloudFileUpsertOne {
	cfc.conflict = opts
	return &CloudFileUpsertOne{
		create: cfc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CloudFile.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cfc *CloudFileCreate) OnConflictColumns(columns ...string) *CloudFileUpsertOne {
	cfc.conflict = append(cfc.conflict, sql.ConflictColumns(columns...))
	return &CloudFileUpsertOne{
		create: cfc,
	}
}

type (
	// CloudFileUpsertOne is the builder for "upsert"-ing
	//  one CloudFile node.
	CloudFileUpsertOne struct {
		create *CloudFileCreate
	}

	// CloudFileUpsert is the "OnConflict" setter.
	CloudFileUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *CloudFileUpsert) SetCreatedBy(v int64) *CloudFileUpsert {
	u.Set(cloudfile.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *CloudFileUpsert) UpdateCreatedBy() *CloudFileUpsert {
	u.SetExcluded(cloudfile.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *CloudFileUpsert) AddCreatedBy(v int64) *CloudFileUpsert {
	u.Add(cloudfile.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *CloudFileUpsert) SetUpdatedBy(v int64) *CloudFileUpsert {
	u.Set(cloudfile.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *CloudFileUpsert) UpdateUpdatedBy() *CloudFileUpsert {
	u.SetExcluded(cloudfile.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *CloudFileUpsert) AddUpdatedBy(v int64) *CloudFileUpsert {
	u.Add(cloudfile.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CloudFileUpsert) SetUpdatedAt(v time.Time) *CloudFileUpsert {
	u.Set(cloudfile.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CloudFileUpsert) UpdateUpdatedAt() *CloudFileUpsert {
	u.SetExcluded(cloudfile.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CloudFileUpsert) SetDeletedAt(v time.Time) *CloudFileUpsert {
	u.Set(cloudfile.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CloudFileUpsert) UpdateDeletedAt() *CloudFileUpsert {
	u.SetExcluded(cloudfile.FieldDeletedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *CloudFileUpsert) SetUserID(v int64) *CloudFileUpsert {
	u.Set(cloudfile.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CloudFileUpsert) UpdateUserID() *CloudFileUpsert {
	u.SetExcluded(cloudfile.FieldUserID)
	return u
}

// SetName sets the "name" field.
func (u *CloudFileUpsert) SetName(v string) *CloudFileUpsert {
	u.Set(cloudfile.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CloudFileUpsert) UpdateName() *CloudFileUpsert {
	u.SetExcluded(cloudfile.FieldName)
	return u
}

// SetIcon sets the "icon" field.
func (u *CloudFileUpsert) SetIcon(v string) *CloudFileUpsert {
	u.Set(cloudfile.FieldIcon, v)
	return u
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *CloudFileUpsert) UpdateIcon() *CloudFileUpsert {
	u.SetExcluded(cloudfile.FieldIcon)
	return u
}

// SetSize sets the "size" field.
func (u *CloudFileUpsert) SetSize(v int64) *CloudFileUpsert {
	u.Set(cloudfile.FieldSize, v)
	return u
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *CloudFileUpsert) UpdateSize() *CloudFileUpsert {
	u.SetExcluded(cloudfile.FieldSize)
	return u
}

// AddSize adds v to the "size" field.
func (u *CloudFileUpsert) AddSize(v int64) *CloudFileUpsert {
	u.Add(cloudfile.FieldSize, v)
	return u
}

// SetMd5 sets the "md5" field.
func (u *CloudFileUpsert) SetMd5(v string) *CloudFileUpsert {
	u.Set(cloudfile.FieldMd5, v)
	return u
}

// UpdateMd5 sets the "md5" field to the value that was provided on create.
func (u *CloudFileUpsert) UpdateMd5() *CloudFileUpsert {
	u.SetExcluded(cloudfile.FieldMd5)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CloudFile.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(cloudfile.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CloudFileUpsertOne) UpdateNewValues() *CloudFileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(cloudfile.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(cloudfile.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CloudFile.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CloudFileUpsertOne) Ignore() *CloudFileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CloudFileUpsertOne) DoNothing() *CloudFileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CloudFileCreate.OnConflict
// documentation for more info.
func (u *CloudFileUpsertOne) Update(set func(*CloudFileUpsert)) *CloudFileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CloudFileUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *CloudFileUpsertOne) SetCreatedBy(v int64) *CloudFileUpsertOne {
	return u.Update(func(s *CloudFileUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *CloudFileUpsertOne) AddCreatedBy(v int64) *CloudFileUpsertOne {
	return u.Update(func(s *CloudFileUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *CloudFileUpsertOne) UpdateCreatedBy() *CloudFileUpsertOne {
	return u.Update(func(s *CloudFileUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *CloudFileUpsertOne) SetUpdatedBy(v int64) *CloudFileUpsertOne {
	return u.Update(func(s *CloudFileUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *CloudFileUpsertOne) AddUpdatedBy(v int64) *CloudFileUpsertOne {
	return u.Update(func(s *CloudFileUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *CloudFileUpsertOne) UpdateUpdatedBy() *CloudFileUpsertOne {
	return u.Update(func(s *CloudFileUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CloudFileUpsertOne) SetUpdatedAt(v time.Time) *CloudFileUpsertOne {
	return u.Update(func(s *CloudFileUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CloudFileUpsertOne) UpdateUpdatedAt() *CloudFileUpsertOne {
	return u.Update(func(s *CloudFileUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CloudFileUpsertOne) SetDeletedAt(v time.Time) *CloudFileUpsertOne {
	return u.Update(func(s *CloudFileUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CloudFileUpsertOne) UpdateDeletedAt() *CloudFileUpsertOne {
	return u.Update(func(s *CloudFileUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *CloudFileUpsertOne) SetUserID(v int64) *CloudFileUpsertOne {
	return u.Update(func(s *CloudFileUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CloudFileUpsertOne) UpdateUserID() *CloudFileUpsertOne {
	return u.Update(func(s *CloudFileUpsert) {
		s.UpdateUserID()
	})
}

// SetName sets the "name" field.
func (u *CloudFileUpsertOne) SetName(v string) *CloudFileUpsertOne {
	return u.Update(func(s *CloudFileUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CloudFileUpsertOne) UpdateName() *CloudFileUpsertOne {
	return u.Update(func(s *CloudFileUpsert) {
		s.UpdateName()
	})
}

// SetIcon sets the "icon" field.
func (u *CloudFileUpsertOne) SetIcon(v string) *CloudFileUpsertOne {
	return u.Update(func(s *CloudFileUpsert) {
		s.SetIcon(v)
	})
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *CloudFileUpsertOne) UpdateIcon() *CloudFileUpsertOne {
	return u.Update(func(s *CloudFileUpsert) {
		s.UpdateIcon()
	})
}

// SetSize sets the "size" field.
func (u *CloudFileUpsertOne) SetSize(v int64) *CloudFileUpsertOne {
	return u.Update(func(s *CloudFileUpsert) {
		s.SetSize(v)
	})
}

// AddSize adds v to the "size" field.
func (u *CloudFileUpsertOne) AddSize(v int64) *CloudFileUpsertOne {
	return u.Update(func(s *CloudFileUpsert) {
		s.AddSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *CloudFileUpsertOne) UpdateSize() *CloudFileUpsertOne {
	return u.Update(func(s *CloudFileUpsert) {
		s.UpdateSize()
	})
}

// SetMd5 sets the "md5" field.
func (u *CloudFileUpsertOne) SetMd5(v string) *CloudFileUpsertOne {
	return u.Update(func(s *CloudFileUpsert) {
		s.SetMd5(v)
	})
}

// UpdateMd5 sets the "md5" field to the value that was provided on create.
func (u *CloudFileUpsertOne) UpdateMd5() *CloudFileUpsertOne {
	return u.Update(func(s *CloudFileUpsert) {
		s.UpdateMd5()
	})
}

// Exec executes the query.
func (u *CloudFileUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for CloudFileCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CloudFileUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CloudFileUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CloudFileUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CloudFileCreateBulk is the builder for creating many CloudFile entities in bulk.
type CloudFileCreateBulk struct {
	config
	err      error
	builders []*CloudFileCreate
	conflict []sql.ConflictOption
}

// Save creates the CloudFile entities in the database.
func (cfcb *CloudFileCreateBulk) Save(ctx context.Context) ([]*CloudFile, error) {
	if cfcb.err != nil {
		return nil, cfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cfcb.builders))
	nodes := make([]*CloudFile, len(cfcb.builders))
	mutators := make([]Mutator, len(cfcb.builders))
	for i := range cfcb.builders {
		func(i int, root context.Context) {
			builder := cfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CloudFileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cfcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cfcb *CloudFileCreateBulk) SaveX(ctx context.Context) []*CloudFile {
	v, err := cfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cfcb *CloudFileCreateBulk) Exec(ctx context.Context) error {
	_, err := cfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfcb *CloudFileCreateBulk) ExecX(ctx context.Context) {
	if err := cfcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CloudFile.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CloudFileUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (cfcb *CloudFileCreateBulk) OnConflict(opts ...sql.ConflictOption) *CloudFileUpsertBulk {
	cfcb.conflict = opts
	return &CloudFileUpsertBulk{
		create: cfcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CloudFile.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cfcb *CloudFileCreateBulk) OnConflictColumns(columns ...string) *CloudFileUpsertBulk {
	cfcb.conflict = append(cfcb.conflict, sql.ConflictColumns(columns...))
	return &CloudFileUpsertBulk{
		create: cfcb,
	}
}

// CloudFileUpsertBulk is the builder for "upsert"-ing
// a bulk of CloudFile nodes.
type CloudFileUpsertBulk struct {
	create *CloudFileCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CloudFile.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(cloudfile.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CloudFileUpsertBulk) UpdateNewValues() *CloudFileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(cloudfile.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(cloudfile.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CloudFile.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CloudFileUpsertBulk) Ignore() *CloudFileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CloudFileUpsertBulk) DoNothing() *CloudFileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CloudFileCreateBulk.OnConflict
// documentation for more info.
func (u *CloudFileUpsertBulk) Update(set func(*CloudFileUpsert)) *CloudFileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CloudFileUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *CloudFileUpsertBulk) SetCreatedBy(v int64) *CloudFileUpsertBulk {
	return u.Update(func(s *CloudFileUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *CloudFileUpsertBulk) AddCreatedBy(v int64) *CloudFileUpsertBulk {
	return u.Update(func(s *CloudFileUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *CloudFileUpsertBulk) UpdateCreatedBy() *CloudFileUpsertBulk {
	return u.Update(func(s *CloudFileUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *CloudFileUpsertBulk) SetUpdatedBy(v int64) *CloudFileUpsertBulk {
	return u.Update(func(s *CloudFileUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *CloudFileUpsertBulk) AddUpdatedBy(v int64) *CloudFileUpsertBulk {
	return u.Update(func(s *CloudFileUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *CloudFileUpsertBulk) UpdateUpdatedBy() *CloudFileUpsertBulk {
	return u.Update(func(s *CloudFileUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CloudFileUpsertBulk) SetUpdatedAt(v time.Time) *CloudFileUpsertBulk {
	return u.Update(func(s *CloudFileUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CloudFileUpsertBulk) UpdateUpdatedAt() *CloudFileUpsertBulk {
	return u.Update(func(s *CloudFileUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CloudFileUpsertBulk) SetDeletedAt(v time.Time) *CloudFileUpsertBulk {
	return u.Update(func(s *CloudFileUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CloudFileUpsertBulk) UpdateDeletedAt() *CloudFileUpsertBulk {
	return u.Update(func(s *CloudFileUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *CloudFileUpsertBulk) SetUserID(v int64) *CloudFileUpsertBulk {
	return u.Update(func(s *CloudFileUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CloudFileUpsertBulk) UpdateUserID() *CloudFileUpsertBulk {
	return u.Update(func(s *CloudFileUpsert) {
		s.UpdateUserID()
	})
}

// SetName sets the "name" field.
func (u *CloudFileUpsertBulk) SetName(v string) *CloudFileUpsertBulk {
	return u.Update(func(s *CloudFileUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CloudFileUpsertBulk) UpdateName() *CloudFileUpsertBulk {
	return u.Update(func(s *CloudFileUpsert) {
		s.UpdateName()
	})
}

// SetIcon sets the "icon" field.
func (u *CloudFileUpsertBulk) SetIcon(v string) *CloudFileUpsertBulk {
	return u.Update(func(s *CloudFileUpsert) {
		s.SetIcon(v)
	})
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *CloudFileUpsertBulk) UpdateIcon() *CloudFileUpsertBulk {
	return u.Update(func(s *CloudFileUpsert) {
		s.UpdateIcon()
	})
}

// SetSize sets the "size" field.
func (u *CloudFileUpsertBulk) SetSize(v int64) *CloudFileUpsertBulk {
	return u.Update(func(s *CloudFileUpsert) {
		s.SetSize(v)
	})
}

// AddSize adds v to the "size" field.
func (u *CloudFileUpsertBulk) AddSize(v int64) *CloudFileUpsertBulk {
	return u.Update(func(s *CloudFileUpsert) {
		s.AddSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *CloudFileUpsertBulk) UpdateSize() *CloudFileUpsertBulk {
	return u.Update(func(s *CloudFileUpsert) {
		s.UpdateSize()
	})
}

// SetMd5 sets the "md5" field.
func (u *CloudFileUpsertBulk) SetMd5(v string) *CloudFileUpsertBulk {
	return u.Update(func(s *CloudFileUpsert) {
		s.SetMd5(v)
	})
}

// UpdateMd5 sets the "md5" field to the value that was provided on create.
func (u *CloudFileUpsertBulk) UpdateMd5() *CloudFileUpsertBulk {
	return u.Update(func(s *CloudFileUpsert) {
		s.UpdateMd5()
	})
}

// Exec executes the query.
func (u *CloudFileUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the CloudFileCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for CloudFileCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CloudFileUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
