// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/earnbill"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionproduceorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/platformaccount"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/profitaccount"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
)

// EarnBill is the model entity for the EarnBill schema.
type EarnBill struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int64 `json:"created_by"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int64 `json:"updated_by"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at"`
	// 分润账户变动类型
	Type earnbill.Type `json:"type"`
	// 是否减少分润钱包余额，默认为否
	IsMinus bool `json:"is_minus"`
	// 外键用户 id
	UserID int64 `json:"user_id"`
	// 账单序列号
	SerialNumber string `json:"serial_number"`
	// 外键分润账户 id
	ProfitAccountID int64 `json:"profit_account_id"`
	// 分润多少本金余额
	PureCep int64 `json:"pure_cep"`
	// 分润多少赠送余额
	GiftCep int64 `json:"gift_cep"`
	// 平台分润账户 id
	PlatformAccountID int64 `json:"-"`
	// 平台收取多少本金余额
	PlatformPureCep int64 `json:"-"`
	// 平台收取多少赠送余额
	PlatformGiftCep int64 `json:"-"`
	// 关联分润产生的来源外键 id，比如 type 为 mission 时关联任务订单
	ReasonID int64 `json:"reason_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EarnBillQuery when eager-loading is set.
	Edges        EarnBillEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EarnBillEdges holds the relations/edges for other nodes in the graph.
type EarnBillEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// ProfitAccount holds the value of the profit_account edge.
	ProfitAccount *ProfitAccount `json:"profit_account,omitempty"`
	// PlatformAccount holds the value of the platform_account edge.
	PlatformAccount *PlatformAccount `json:"platform_account,omitempty"`
	// MissionProduceOrders holds the value of the mission_produce_orders edge.
	MissionProduceOrders *MissionProduceOrder `json:"mission_produce_orders,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EarnBillEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ProfitAccountOrErr returns the ProfitAccount value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EarnBillEdges) ProfitAccountOrErr() (*ProfitAccount, error) {
	if e.loadedTypes[1] {
		if e.ProfitAccount == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: profitaccount.Label}
		}
		return e.ProfitAccount, nil
	}
	return nil, &NotLoadedError{edge: "profit_account"}
}

// PlatformAccountOrErr returns the PlatformAccount value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EarnBillEdges) PlatformAccountOrErr() (*PlatformAccount, error) {
	if e.loadedTypes[2] {
		if e.PlatformAccount == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: platformaccount.Label}
		}
		return e.PlatformAccount, nil
	}
	return nil, &NotLoadedError{edge: "platform_account"}
}

// MissionProduceOrdersOrErr returns the MissionProduceOrders value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EarnBillEdges) MissionProduceOrdersOrErr() (*MissionProduceOrder, error) {
	if e.loadedTypes[3] {
		if e.MissionProduceOrders == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: missionproduceorder.Label}
		}
		return e.MissionProduceOrders, nil
	}
	return nil, &NotLoadedError{edge: "mission_produce_orders"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EarnBill) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case earnbill.FieldIsMinus:
			values[i] = new(sql.NullBool)
		case earnbill.FieldID, earnbill.FieldCreatedBy, earnbill.FieldUpdatedBy, earnbill.FieldUserID, earnbill.FieldProfitAccountID, earnbill.FieldPureCep, earnbill.FieldGiftCep, earnbill.FieldPlatformAccountID, earnbill.FieldPlatformPureCep, earnbill.FieldPlatformGiftCep, earnbill.FieldReasonID:
			values[i] = new(sql.NullInt64)
		case earnbill.FieldType, earnbill.FieldSerialNumber:
			values[i] = new(sql.NullString)
		case earnbill.FieldCreatedAt, earnbill.FieldUpdatedAt, earnbill.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EarnBill fields.
func (eb *EarnBill) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case earnbill.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			eb.ID = int64(value.Int64)
		case earnbill.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				eb.CreatedBy = value.Int64
			}
		case earnbill.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				eb.UpdatedBy = value.Int64
			}
		case earnbill.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				eb.CreatedAt = value.Time
			}
		case earnbill.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				eb.UpdatedAt = value.Time
			}
		case earnbill.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				eb.DeletedAt = value.Time
			}
		case earnbill.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				eb.Type = earnbill.Type(value.String)
			}
		case earnbill.FieldIsMinus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_minus", values[i])
			} else if value.Valid {
				eb.IsMinus = value.Bool
			}
		case earnbill.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				eb.UserID = value.Int64
			}
		case earnbill.FieldSerialNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field serial_number", values[i])
			} else if value.Valid {
				eb.SerialNumber = value.String
			}
		case earnbill.FieldProfitAccountID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field profit_account_id", values[i])
			} else if value.Valid {
				eb.ProfitAccountID = value.Int64
			}
		case earnbill.FieldPureCep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pure_cep", values[i])
			} else if value.Valid {
				eb.PureCep = value.Int64
			}
		case earnbill.FieldGiftCep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gift_cep", values[i])
			} else if value.Valid {
				eb.GiftCep = value.Int64
			}
		case earnbill.FieldPlatformAccountID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field platform_account_id", values[i])
			} else if value.Valid {
				eb.PlatformAccountID = value.Int64
			}
		case earnbill.FieldPlatformPureCep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field platform_pure_cep", values[i])
			} else if value.Valid {
				eb.PlatformPureCep = value.Int64
			}
		case earnbill.FieldPlatformGiftCep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field platform_gift_cep", values[i])
			} else if value.Valid {
				eb.PlatformGiftCep = value.Int64
			}
		case earnbill.FieldReasonID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reason_id", values[i])
			} else if value.Valid {
				eb.ReasonID = value.Int64
			}
		default:
			eb.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EarnBill.
// This includes values selected through modifiers, order, etc.
func (eb *EarnBill) Value(name string) (ent.Value, error) {
	return eb.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the EarnBill entity.
func (eb *EarnBill) QueryUser() *UserQuery {
	return NewEarnBillClient(eb.config).QueryUser(eb)
}

// QueryProfitAccount queries the "profit_account" edge of the EarnBill entity.
func (eb *EarnBill) QueryProfitAccount() *ProfitAccountQuery {
	return NewEarnBillClient(eb.config).QueryProfitAccount(eb)
}

// QueryPlatformAccount queries the "platform_account" edge of the EarnBill entity.
func (eb *EarnBill) QueryPlatformAccount() *PlatformAccountQuery {
	return NewEarnBillClient(eb.config).QueryPlatformAccount(eb)
}

// QueryMissionProduceOrders queries the "mission_produce_orders" edge of the EarnBill entity.
func (eb *EarnBill) QueryMissionProduceOrders() *MissionProduceOrderQuery {
	return NewEarnBillClient(eb.config).QueryMissionProduceOrders(eb)
}

// Update returns a builder for updating this EarnBill.
// Note that you need to call EarnBill.Unwrap() before calling this method if this EarnBill
// was returned from a transaction, and the transaction was committed or rolled back.
func (eb *EarnBill) Update() *EarnBillUpdateOne {
	return NewEarnBillClient(eb.config).UpdateOne(eb)
}

// Unwrap unwraps the EarnBill entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (eb *EarnBill) Unwrap() *EarnBill {
	_tx, ok := eb.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: EarnBill is not a transactional entity")
	}
	eb.config.driver = _tx.drv
	return eb
}

// String implements the fmt.Stringer.
func (eb *EarnBill) String() string {
	var builder strings.Builder
	builder.WriteString("EarnBill(")
	builder.WriteString(fmt.Sprintf("id=%v, ", eb.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", eb.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", eb.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(eb.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(eb.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(eb.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", eb.Type))
	builder.WriteString(", ")
	builder.WriteString("is_minus=")
	builder.WriteString(fmt.Sprintf("%v", eb.IsMinus))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", eb.UserID))
	builder.WriteString(", ")
	builder.WriteString("serial_number=")
	builder.WriteString(eb.SerialNumber)
	builder.WriteString(", ")
	builder.WriteString("profit_account_id=")
	builder.WriteString(fmt.Sprintf("%v", eb.ProfitAccountID))
	builder.WriteString(", ")
	builder.WriteString("pure_cep=")
	builder.WriteString(fmt.Sprintf("%v", eb.PureCep))
	builder.WriteString(", ")
	builder.WriteString("gift_cep=")
	builder.WriteString(fmt.Sprintf("%v", eb.GiftCep))
	builder.WriteString(", ")
	builder.WriteString("platform_account_id=")
	builder.WriteString(fmt.Sprintf("%v", eb.PlatformAccountID))
	builder.WriteString(", ")
	builder.WriteString("platform_pure_cep=")
	builder.WriteString(fmt.Sprintf("%v", eb.PlatformPureCep))
	builder.WriteString(", ")
	builder.WriteString("platform_gift_cep=")
	builder.WriteString(fmt.Sprintf("%v", eb.PlatformGiftCep))
	builder.WriteString(", ")
	builder.WriteString("reason_id=")
	builder.WriteString(fmt.Sprintf("%v", eb.ReasonID))
	builder.WriteByte(')')
	return builder.String()
}

// EarnBills is a parsable slice of EarnBill.
type EarnBills []*EarnBill
