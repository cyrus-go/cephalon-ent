// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/extraservice"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/mission"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionextraservice"
)

// 任务与附加服务的中间关系
type MissionExtraService struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建者 ID
	CreatedBy int64 `json:"created_by"`
	// 更新者 ID
	UpdatedBy int64 `json:"updated_by"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// 外键任务 id
	MissionID int64 `json:"mission_id,string"`
	// 外键附加服务 id
	ExtraServiceID int64 `json:"extra_service_id,string"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MissionExtraServiceQuery when eager-loading is set.
	Edges        MissionExtraServiceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MissionExtraServiceEdges holds the relations/edges for other nodes in the graph.
type MissionExtraServiceEdges struct {
	// Mission holds the value of the mission edge.
	Mission *Mission `json:"mission,omitempty"`
	// ExtraService holds the value of the extra_service edge.
	ExtraService *ExtraService `json:"extra_service,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MissionOrErr returns the Mission value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MissionExtraServiceEdges) MissionOrErr() (*Mission, error) {
	if e.loadedTypes[0] {
		if e.Mission == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: mission.Label}
		}
		return e.Mission, nil
	}
	return nil, &NotLoadedError{edge: "mission"}
}

// ExtraServiceOrErr returns the ExtraService value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MissionExtraServiceEdges) ExtraServiceOrErr() (*ExtraService, error) {
	if e.loadedTypes[1] {
		if e.ExtraService == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: extraservice.Label}
		}
		return e.ExtraService, nil
	}
	return nil, &NotLoadedError{edge: "extra_service"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MissionExtraService) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case missionextraservice.FieldID, missionextraservice.FieldCreatedBy, missionextraservice.FieldUpdatedBy, missionextraservice.FieldMissionID, missionextraservice.FieldExtraServiceID:
			values[i] = new(sql.NullInt64)
		case missionextraservice.FieldCreatedAt, missionextraservice.FieldUpdatedAt, missionextraservice.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MissionExtraService fields.
func (mes *MissionExtraService) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case missionextraservice.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mes.ID = int64(value.Int64)
		case missionextraservice.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				mes.CreatedBy = value.Int64
			}
		case missionextraservice.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				mes.UpdatedBy = value.Int64
			}
		case missionextraservice.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mes.CreatedAt = value.Time
			}
		case missionextraservice.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mes.UpdatedAt = value.Time
			}
		case missionextraservice.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				mes.DeletedAt = value.Time
			}
		case missionextraservice.FieldMissionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mission_id", values[i])
			} else if value.Valid {
				mes.MissionID = value.Int64
			}
		case missionextraservice.FieldExtraServiceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field extra_service_id", values[i])
			} else if value.Valid {
				mes.ExtraServiceID = value.Int64
			}
		default:
			mes.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MissionExtraService.
// This includes values selected through modifiers, order, etc.
func (mes *MissionExtraService) Value(name string) (ent.Value, error) {
	return mes.selectValues.Get(name)
}

// QueryMission queries the "mission" edge of the MissionExtraService entity.
func (mes *MissionExtraService) QueryMission() *MissionQuery {
	return NewMissionExtraServiceClient(mes.config).QueryMission(mes)
}

// QueryExtraService queries the "extra_service" edge of the MissionExtraService entity.
func (mes *MissionExtraService) QueryExtraService() *ExtraServiceQuery {
	return NewMissionExtraServiceClient(mes.config).QueryExtraService(mes)
}

// Update returns a builder for updating this MissionExtraService.
// Note that you need to call MissionExtraService.Unwrap() before calling this method if this MissionExtraService
// was returned from a transaction, and the transaction was committed or rolled back.
func (mes *MissionExtraService) Update() *MissionExtraServiceUpdateOne {
	return NewMissionExtraServiceClient(mes.config).UpdateOne(mes)
}

// Unwrap unwraps the MissionExtraService entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mes *MissionExtraService) Unwrap() *MissionExtraService {
	_tx, ok := mes.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: MissionExtraService is not a transactional entity")
	}
	mes.config.driver = _tx.drv
	return mes
}

// String implements the fmt.Stringer.
func (mes *MissionExtraService) String() string {
	var builder strings.Builder
	builder.WriteString("MissionExtraService(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mes.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", mes.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", mes.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(mes.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(mes.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(mes.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("mission_id=")
	builder.WriteString(fmt.Sprintf("%v", mes.MissionID))
	builder.WriteString(", ")
	builder.WriteString("extra_service_id=")
	builder.WriteString(fmt.Sprintf("%v", mes.ExtraServiceID))
	builder.WriteByte(')')
	return builder.String()
}

// MissionExtraServices is a parsable slice of MissionExtraService.
type MissionExtraServices []*MissionExtraService
