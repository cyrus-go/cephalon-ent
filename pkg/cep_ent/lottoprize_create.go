// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lotto"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottoprize"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottorecord"
)

// LottoPrizeCreate is the builder for creating a LottoPrize entity.
type LottoPrizeCreate struct {
	config
	mutation *LottoPrizeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (lpc *LottoPrizeCreate) SetCreatedBy(i int64) *LottoPrizeCreate {
	lpc.mutation.SetCreatedBy(i)
	return lpc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (lpc *LottoPrizeCreate) SetNillableCreatedBy(i *int64) *LottoPrizeCreate {
	if i != nil {
		lpc.SetCreatedBy(*i)
	}
	return lpc
}

// SetUpdatedBy sets the "updated_by" field.
func (lpc *LottoPrizeCreate) SetUpdatedBy(i int64) *LottoPrizeCreate {
	lpc.mutation.SetUpdatedBy(i)
	return lpc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (lpc *LottoPrizeCreate) SetNillableUpdatedBy(i *int64) *LottoPrizeCreate {
	if i != nil {
		lpc.SetUpdatedBy(*i)
	}
	return lpc
}

// SetCreatedAt sets the "created_at" field.
func (lpc *LottoPrizeCreate) SetCreatedAt(t time.Time) *LottoPrizeCreate {
	lpc.mutation.SetCreatedAt(t)
	return lpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lpc *LottoPrizeCreate) SetNillableCreatedAt(t *time.Time) *LottoPrizeCreate {
	if t != nil {
		lpc.SetCreatedAt(*t)
	}
	return lpc
}

// SetUpdatedAt sets the "updated_at" field.
func (lpc *LottoPrizeCreate) SetUpdatedAt(t time.Time) *LottoPrizeCreate {
	lpc.mutation.SetUpdatedAt(t)
	return lpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lpc *LottoPrizeCreate) SetNillableUpdatedAt(t *time.Time) *LottoPrizeCreate {
	if t != nil {
		lpc.SetUpdatedAt(*t)
	}
	return lpc
}

// SetDeletedAt sets the "deleted_at" field.
func (lpc *LottoPrizeCreate) SetDeletedAt(t time.Time) *LottoPrizeCreate {
	lpc.mutation.SetDeletedAt(t)
	return lpc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lpc *LottoPrizeCreate) SetNillableDeletedAt(t *time.Time) *LottoPrizeCreate {
	if t != nil {
		lpc.SetDeletedAt(*t)
	}
	return lpc
}

// SetLottoID sets the "lotto_id" field.
func (lpc *LottoPrizeCreate) SetLottoID(i int64) *LottoPrizeCreate {
	lpc.mutation.SetLottoID(i)
	return lpc
}

// SetNillableLottoID sets the "lotto_id" field if the given value is not nil.
func (lpc *LottoPrizeCreate) SetNillableLottoID(i *int64) *LottoPrizeCreate {
	if i != nil {
		lpc.SetLottoID(*i)
	}
	return lpc
}

// SetLevelName sets the "level_name" field.
func (lpc *LottoPrizeCreate) SetLevelName(s string) *LottoPrizeCreate {
	lpc.mutation.SetLevelName(s)
	return lpc
}

// SetNillableLevelName sets the "level_name" field if the given value is not nil.
func (lpc *LottoPrizeCreate) SetNillableLevelName(s *string) *LottoPrizeCreate {
	if s != nil {
		lpc.SetLevelName(*s)
	}
	return lpc
}

// SetWeight sets the "weight" field.
func (lpc *LottoPrizeCreate) SetWeight(i int64) *LottoPrizeCreate {
	lpc.mutation.SetWeight(i)
	return lpc
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (lpc *LottoPrizeCreate) SetNillableWeight(i *int64) *LottoPrizeCreate {
	if i != nil {
		lpc.SetWeight(*i)
	}
	return lpc
}

// SetName sets the "name" field.
func (lpc *LottoPrizeCreate) SetName(s string) *LottoPrizeCreate {
	lpc.mutation.SetName(s)
	return lpc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (lpc *LottoPrizeCreate) SetNillableName(s *string) *LottoPrizeCreate {
	if s != nil {
		lpc.SetName(*s)
	}
	return lpc
}

// SetStatus sets the "status" field.
func (lpc *LottoPrizeCreate) SetStatus(l lottoprize.Status) *LottoPrizeCreate {
	lpc.mutation.SetStatus(l)
	return lpc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (lpc *LottoPrizeCreate) SetNillableStatus(l *lottoprize.Status) *LottoPrizeCreate {
	if l != nil {
		lpc.SetStatus(*l)
	}
	return lpc
}

// SetType sets the "type" field.
func (lpc *LottoPrizeCreate) SetType(l lottoprize.Type) *LottoPrizeCreate {
	lpc.mutation.SetType(l)
	return lpc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (lpc *LottoPrizeCreate) SetNillableType(l *lottoprize.Type) *LottoPrizeCreate {
	if l != nil {
		lpc.SetType(*l)
	}
	return lpc
}

// SetCepAmount sets the "cep_amount" field.
func (lpc *LottoPrizeCreate) SetCepAmount(i int64) *LottoPrizeCreate {
	lpc.mutation.SetCepAmount(i)
	return lpc
}

// SetNillableCepAmount sets the "cep_amount" field if the given value is not nil.
func (lpc *LottoPrizeCreate) SetNillableCepAmount(i *int64) *LottoPrizeCreate {
	if i != nil {
		lpc.SetCepAmount(*i)
	}
	return lpc
}

// SetID sets the "id" field.
func (lpc *LottoPrizeCreate) SetID(i int64) *LottoPrizeCreate {
	lpc.mutation.SetID(i)
	return lpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lpc *LottoPrizeCreate) SetNillableID(i *int64) *LottoPrizeCreate {
	if i != nil {
		lpc.SetID(*i)
	}
	return lpc
}

// SetLotto sets the "lotto" edge to the Lotto entity.
func (lpc *LottoPrizeCreate) SetLotto(l *Lotto) *LottoPrizeCreate {
	return lpc.SetLottoID(l.ID)
}

// AddLottoRecordIDs adds the "lotto_records" edge to the LottoRecord entity by IDs.
func (lpc *LottoPrizeCreate) AddLottoRecordIDs(ids ...int64) *LottoPrizeCreate {
	lpc.mutation.AddLottoRecordIDs(ids...)
	return lpc
}

// AddLottoRecords adds the "lotto_records" edges to the LottoRecord entity.
func (lpc *LottoPrizeCreate) AddLottoRecords(l ...*LottoRecord) *LottoPrizeCreate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lpc.AddLottoRecordIDs(ids...)
}

// Mutation returns the LottoPrizeMutation object of the builder.
func (lpc *LottoPrizeCreate) Mutation() *LottoPrizeMutation {
	return lpc.mutation
}

// Save creates the LottoPrize in the database.
func (lpc *LottoPrizeCreate) Save(ctx context.Context) (*LottoPrize, error) {
	lpc.defaults()
	return withHooks(ctx, lpc.sqlSave, lpc.mutation, lpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lpc *LottoPrizeCreate) SaveX(ctx context.Context) *LottoPrize {
	v, err := lpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lpc *LottoPrizeCreate) Exec(ctx context.Context) error {
	_, err := lpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpc *LottoPrizeCreate) ExecX(ctx context.Context) {
	if err := lpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lpc *LottoPrizeCreate) defaults() {
	if _, ok := lpc.mutation.CreatedBy(); !ok {
		v := lottoprize.DefaultCreatedBy
		lpc.mutation.SetCreatedBy(v)
	}
	if _, ok := lpc.mutation.UpdatedBy(); !ok {
		v := lottoprize.DefaultUpdatedBy
		lpc.mutation.SetUpdatedBy(v)
	}
	if _, ok := lpc.mutation.CreatedAt(); !ok {
		v := lottoprize.DefaultCreatedAt()
		lpc.mutation.SetCreatedAt(v)
	}
	if _, ok := lpc.mutation.UpdatedAt(); !ok {
		v := lottoprize.DefaultUpdatedAt()
		lpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := lpc.mutation.DeletedAt(); !ok {
		v := lottoprize.DefaultDeletedAt
		lpc.mutation.SetDeletedAt(v)
	}
	if _, ok := lpc.mutation.LottoID(); !ok {
		v := lottoprize.DefaultLottoID
		lpc.mutation.SetLottoID(v)
	}
	if _, ok := lpc.mutation.LevelName(); !ok {
		v := lottoprize.DefaultLevelName
		lpc.mutation.SetLevelName(v)
	}
	if _, ok := lpc.mutation.Weight(); !ok {
		v := lottoprize.DefaultWeight
		lpc.mutation.SetWeight(v)
	}
	if _, ok := lpc.mutation.Name(); !ok {
		v := lottoprize.DefaultName
		lpc.mutation.SetName(v)
	}
	if _, ok := lpc.mutation.Status(); !ok {
		v := lottoprize.DefaultStatus
		lpc.mutation.SetStatus(v)
	}
	if _, ok := lpc.mutation.GetType(); !ok {
		v := lottoprize.DefaultType
		lpc.mutation.SetType(v)
	}
	if _, ok := lpc.mutation.CepAmount(); !ok {
		v := lottoprize.DefaultCepAmount
		lpc.mutation.SetCepAmount(v)
	}
	if _, ok := lpc.mutation.ID(); !ok {
		v := lottoprize.DefaultID()
		lpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lpc *LottoPrizeCreate) check() error {
	if _, ok := lpc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "LottoPrize.created_by"`)}
	}
	if _, ok := lpc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "LottoPrize.updated_by"`)}
	}
	if _, ok := lpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "LottoPrize.created_at"`)}
	}
	if _, ok := lpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "LottoPrize.updated_at"`)}
	}
	if _, ok := lpc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "LottoPrize.deleted_at"`)}
	}
	if _, ok := lpc.mutation.LottoID(); !ok {
		return &ValidationError{Name: "lotto_id", err: errors.New(`cep_ent: missing required field "LottoPrize.lotto_id"`)}
	}
	if _, ok := lpc.mutation.LevelName(); !ok {
		return &ValidationError{Name: "level_name", err: errors.New(`cep_ent: missing required field "LottoPrize.level_name"`)}
	}
	if _, ok := lpc.mutation.Weight(); !ok {
		return &ValidationError{Name: "weight", err: errors.New(`cep_ent: missing required field "LottoPrize.weight"`)}
	}
	if _, ok := lpc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`cep_ent: missing required field "LottoPrize.name"`)}
	}
	if _, ok := lpc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`cep_ent: missing required field "LottoPrize.status"`)}
	}
	if v, ok := lpc.mutation.Status(); ok {
		if err := lottoprize.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "LottoPrize.status": %w`, err)}
		}
	}
	if _, ok := lpc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`cep_ent: missing required field "LottoPrize.type"`)}
	}
	if v, ok := lpc.mutation.GetType(); ok {
		if err := lottoprize.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "LottoPrize.type": %w`, err)}
		}
	}
	if _, ok := lpc.mutation.CepAmount(); !ok {
		return &ValidationError{Name: "cep_amount", err: errors.New(`cep_ent: missing required field "LottoPrize.cep_amount"`)}
	}
	if _, ok := lpc.mutation.LottoID(); !ok {
		return &ValidationError{Name: "lotto", err: errors.New(`cep_ent: missing required edge "LottoPrize.lotto"`)}
	}
	return nil
}

func (lpc *LottoPrizeCreate) sqlSave(ctx context.Context) (*LottoPrize, error) {
	if err := lpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	lpc.mutation.id = &_node.ID
	lpc.mutation.done = true
	return _node, nil
}

func (lpc *LottoPrizeCreate) createSpec() (*LottoPrize, *sqlgraph.CreateSpec) {
	var (
		_node = &LottoPrize{config: lpc.config}
		_spec = sqlgraph.NewCreateSpec(lottoprize.Table, sqlgraph.NewFieldSpec(lottoprize.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = lpc.conflict
	if id, ok := lpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lpc.mutation.CreatedBy(); ok {
		_spec.SetField(lottoprize.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := lpc.mutation.UpdatedBy(); ok {
		_spec.SetField(lottoprize.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := lpc.mutation.CreatedAt(); ok {
		_spec.SetField(lottoprize.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lpc.mutation.UpdatedAt(); ok {
		_spec.SetField(lottoprize.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := lpc.mutation.DeletedAt(); ok {
		_spec.SetField(lottoprize.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := lpc.mutation.LevelName(); ok {
		_spec.SetField(lottoprize.FieldLevelName, field.TypeString, value)
		_node.LevelName = value
	}
	if value, ok := lpc.mutation.Weight(); ok {
		_spec.SetField(lottoprize.FieldWeight, field.TypeInt64, value)
		_node.Weight = value
	}
	if value, ok := lpc.mutation.Name(); ok {
		_spec.SetField(lottoprize.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := lpc.mutation.Status(); ok {
		_spec.SetField(lottoprize.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := lpc.mutation.GetType(); ok {
		_spec.SetField(lottoprize.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := lpc.mutation.CepAmount(); ok {
		_spec.SetField(lottoprize.FieldCepAmount, field.TypeInt64, value)
		_node.CepAmount = value
	}
	if nodes := lpc.mutation.LottoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottoprize.LottoTable,
			Columns: []string{lottoprize.LottoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lotto.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LottoID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lpc.mutation.LottoRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lottoprize.LottoRecordsTable,
			Columns: []string{lottoprize.LottoRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottorecord.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LottoPrize.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LottoPrizeUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (lpc *LottoPrizeCreate) OnConflict(opts ...sql.ConflictOption) *LottoPrizeUpsertOne {
	lpc.conflict = opts
	return &LottoPrizeUpsertOne{
		create: lpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LottoPrize.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lpc *LottoPrizeCreate) OnConflictColumns(columns ...string) *LottoPrizeUpsertOne {
	lpc.conflict = append(lpc.conflict, sql.ConflictColumns(columns...))
	return &LottoPrizeUpsertOne{
		create: lpc,
	}
}

type (
	// LottoPrizeUpsertOne is the builder for "upsert"-ing
	//  one LottoPrize node.
	LottoPrizeUpsertOne struct {
		create *LottoPrizeCreate
	}

	// LottoPrizeUpsert is the "OnConflict" setter.
	LottoPrizeUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *LottoPrizeUpsert) SetCreatedBy(v int64) *LottoPrizeUpsert {
	u.Set(lottoprize.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *LottoPrizeUpsert) UpdateCreatedBy() *LottoPrizeUpsert {
	u.SetExcluded(lottoprize.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *LottoPrizeUpsert) AddCreatedBy(v int64) *LottoPrizeUpsert {
	u.Add(lottoprize.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *LottoPrizeUpsert) SetUpdatedBy(v int64) *LottoPrizeUpsert {
	u.Set(lottoprize.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *LottoPrizeUpsert) UpdateUpdatedBy() *LottoPrizeUpsert {
	u.SetExcluded(lottoprize.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *LottoPrizeUpsert) AddUpdatedBy(v int64) *LottoPrizeUpsert {
	u.Add(lottoprize.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LottoPrizeUpsert) SetUpdatedAt(v time.Time) *LottoPrizeUpsert {
	u.Set(lottoprize.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LottoPrizeUpsert) UpdateUpdatedAt() *LottoPrizeUpsert {
	u.SetExcluded(lottoprize.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LottoPrizeUpsert) SetDeletedAt(v time.Time) *LottoPrizeUpsert {
	u.Set(lottoprize.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LottoPrizeUpsert) UpdateDeletedAt() *LottoPrizeUpsert {
	u.SetExcluded(lottoprize.FieldDeletedAt)
	return u
}

// SetLottoID sets the "lotto_id" field.
func (u *LottoPrizeUpsert) SetLottoID(v int64) *LottoPrizeUpsert {
	u.Set(lottoprize.FieldLottoID, v)
	return u
}

// UpdateLottoID sets the "lotto_id" field to the value that was provided on create.
func (u *LottoPrizeUpsert) UpdateLottoID() *LottoPrizeUpsert {
	u.SetExcluded(lottoprize.FieldLottoID)
	return u
}

// SetLevelName sets the "level_name" field.
func (u *LottoPrizeUpsert) SetLevelName(v string) *LottoPrizeUpsert {
	u.Set(lottoprize.FieldLevelName, v)
	return u
}

// UpdateLevelName sets the "level_name" field to the value that was provided on create.
func (u *LottoPrizeUpsert) UpdateLevelName() *LottoPrizeUpsert {
	u.SetExcluded(lottoprize.FieldLevelName)
	return u
}

// SetWeight sets the "weight" field.
func (u *LottoPrizeUpsert) SetWeight(v int64) *LottoPrizeUpsert {
	u.Set(lottoprize.FieldWeight, v)
	return u
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *LottoPrizeUpsert) UpdateWeight() *LottoPrizeUpsert {
	u.SetExcluded(lottoprize.FieldWeight)
	return u
}

// AddWeight adds v to the "weight" field.
func (u *LottoPrizeUpsert) AddWeight(v int64) *LottoPrizeUpsert {
	u.Add(lottoprize.FieldWeight, v)
	return u
}

// SetName sets the "name" field.
func (u *LottoPrizeUpsert) SetName(v string) *LottoPrizeUpsert {
	u.Set(lottoprize.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *LottoPrizeUpsert) UpdateName() *LottoPrizeUpsert {
	u.SetExcluded(lottoprize.FieldName)
	return u
}

// SetStatus sets the "status" field.
func (u *LottoPrizeUpsert) SetStatus(v lottoprize.Status) *LottoPrizeUpsert {
	u.Set(lottoprize.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *LottoPrizeUpsert) UpdateStatus() *LottoPrizeUpsert {
	u.SetExcluded(lottoprize.FieldStatus)
	return u
}

// SetType sets the "type" field.
func (u *LottoPrizeUpsert) SetType(v lottoprize.Type) *LottoPrizeUpsert {
	u.Set(lottoprize.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *LottoPrizeUpsert) UpdateType() *LottoPrizeUpsert {
	u.SetExcluded(lottoprize.FieldType)
	return u
}

// SetCepAmount sets the "cep_amount" field.
func (u *LottoPrizeUpsert) SetCepAmount(v int64) *LottoPrizeUpsert {
	u.Set(lottoprize.FieldCepAmount, v)
	return u
}

// UpdateCepAmount sets the "cep_amount" field to the value that was provided on create.
func (u *LottoPrizeUpsert) UpdateCepAmount() *LottoPrizeUpsert {
	u.SetExcluded(lottoprize.FieldCepAmount)
	return u
}

// AddCepAmount adds v to the "cep_amount" field.
func (u *LottoPrizeUpsert) AddCepAmount(v int64) *LottoPrizeUpsert {
	u.Add(lottoprize.FieldCepAmount, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.LottoPrize.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(lottoprize.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LottoPrizeUpsertOne) UpdateNewValues() *LottoPrizeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(lottoprize.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(lottoprize.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LottoPrize.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LottoPrizeUpsertOne) Ignore() *LottoPrizeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LottoPrizeUpsertOne) DoNothing() *LottoPrizeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LottoPrizeCreate.OnConflict
// documentation for more info.
func (u *LottoPrizeUpsertOne) Update(set func(*LottoPrizeUpsert)) *LottoPrizeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LottoPrizeUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *LottoPrizeUpsertOne) SetCreatedBy(v int64) *LottoPrizeUpsertOne {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *LottoPrizeUpsertOne) AddCreatedBy(v int64) *LottoPrizeUpsertOne {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *LottoPrizeUpsertOne) UpdateCreatedBy() *LottoPrizeUpsertOne {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *LottoPrizeUpsertOne) SetUpdatedBy(v int64) *LottoPrizeUpsertOne {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *LottoPrizeUpsertOne) AddUpdatedBy(v int64) *LottoPrizeUpsertOne {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *LottoPrizeUpsertOne) UpdateUpdatedBy() *LottoPrizeUpsertOne {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LottoPrizeUpsertOne) SetUpdatedAt(v time.Time) *LottoPrizeUpsertOne {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LottoPrizeUpsertOne) UpdateUpdatedAt() *LottoPrizeUpsertOne {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LottoPrizeUpsertOne) SetDeletedAt(v time.Time) *LottoPrizeUpsertOne {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LottoPrizeUpsertOne) UpdateDeletedAt() *LottoPrizeUpsertOne {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetLottoID sets the "lotto_id" field.
func (u *LottoPrizeUpsertOne) SetLottoID(v int64) *LottoPrizeUpsertOne {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.SetLottoID(v)
	})
}

// UpdateLottoID sets the "lotto_id" field to the value that was provided on create.
func (u *LottoPrizeUpsertOne) UpdateLottoID() *LottoPrizeUpsertOne {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.UpdateLottoID()
	})
}

// SetLevelName sets the "level_name" field.
func (u *LottoPrizeUpsertOne) SetLevelName(v string) *LottoPrizeUpsertOne {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.SetLevelName(v)
	})
}

// UpdateLevelName sets the "level_name" field to the value that was provided on create.
func (u *LottoPrizeUpsertOne) UpdateLevelName() *LottoPrizeUpsertOne {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.UpdateLevelName()
	})
}

// SetWeight sets the "weight" field.
func (u *LottoPrizeUpsertOne) SetWeight(v int64) *LottoPrizeUpsertOne {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.SetWeight(v)
	})
}

// AddWeight adds v to the "weight" field.
func (u *LottoPrizeUpsertOne) AddWeight(v int64) *LottoPrizeUpsertOne {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.AddWeight(v)
	})
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *LottoPrizeUpsertOne) UpdateWeight() *LottoPrizeUpsertOne {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.UpdateWeight()
	})
}

// SetName sets the "name" field.
func (u *LottoPrizeUpsertOne) SetName(v string) *LottoPrizeUpsertOne {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *LottoPrizeUpsertOne) UpdateName() *LottoPrizeUpsertOne {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.UpdateName()
	})
}

// SetStatus sets the "status" field.
func (u *LottoPrizeUpsertOne) SetStatus(v lottoprize.Status) *LottoPrizeUpsertOne {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *LottoPrizeUpsertOne) UpdateStatus() *LottoPrizeUpsertOne {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.UpdateStatus()
	})
}

// SetType sets the "type" field.
func (u *LottoPrizeUpsertOne) SetType(v lottoprize.Type) *LottoPrizeUpsertOne {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *LottoPrizeUpsertOne) UpdateType() *LottoPrizeUpsertOne {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.UpdateType()
	})
}

// SetCepAmount sets the "cep_amount" field.
func (u *LottoPrizeUpsertOne) SetCepAmount(v int64) *LottoPrizeUpsertOne {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.SetCepAmount(v)
	})
}

// AddCepAmount adds v to the "cep_amount" field.
func (u *LottoPrizeUpsertOne) AddCepAmount(v int64) *LottoPrizeUpsertOne {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.AddCepAmount(v)
	})
}

// UpdateCepAmount sets the "cep_amount" field to the value that was provided on create.
func (u *LottoPrizeUpsertOne) UpdateCepAmount() *LottoPrizeUpsertOne {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.UpdateCepAmount()
	})
}

// Exec executes the query.
func (u *LottoPrizeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for LottoPrizeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LottoPrizeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LottoPrizeUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LottoPrizeUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LottoPrizeCreateBulk is the builder for creating many LottoPrize entities in bulk.
type LottoPrizeCreateBulk struct {
	config
	err      error
	builders []*LottoPrizeCreate
	conflict []sql.ConflictOption
}

// Save creates the LottoPrize entities in the database.
func (lpcb *LottoPrizeCreateBulk) Save(ctx context.Context) ([]*LottoPrize, error) {
	if lpcb.err != nil {
		return nil, lpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lpcb.builders))
	nodes := make([]*LottoPrize, len(lpcb.builders))
	mutators := make([]Mutator, len(lpcb.builders))
	for i := range lpcb.builders {
		func(i int, root context.Context) {
			builder := lpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LottoPrizeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lpcb *LottoPrizeCreateBulk) SaveX(ctx context.Context) []*LottoPrize {
	v, err := lpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lpcb *LottoPrizeCreateBulk) Exec(ctx context.Context) error {
	_, err := lpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpcb *LottoPrizeCreateBulk) ExecX(ctx context.Context) {
	if err := lpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LottoPrize.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LottoPrizeUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (lpcb *LottoPrizeCreateBulk) OnConflict(opts ...sql.ConflictOption) *LottoPrizeUpsertBulk {
	lpcb.conflict = opts
	return &LottoPrizeUpsertBulk{
		create: lpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LottoPrize.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lpcb *LottoPrizeCreateBulk) OnConflictColumns(columns ...string) *LottoPrizeUpsertBulk {
	lpcb.conflict = append(lpcb.conflict, sql.ConflictColumns(columns...))
	return &LottoPrizeUpsertBulk{
		create: lpcb,
	}
}

// LottoPrizeUpsertBulk is the builder for "upsert"-ing
// a bulk of LottoPrize nodes.
type LottoPrizeUpsertBulk struct {
	create *LottoPrizeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.LottoPrize.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(lottoprize.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LottoPrizeUpsertBulk) UpdateNewValues() *LottoPrizeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(lottoprize.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(lottoprize.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LottoPrize.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LottoPrizeUpsertBulk) Ignore() *LottoPrizeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LottoPrizeUpsertBulk) DoNothing() *LottoPrizeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LottoPrizeCreateBulk.OnConflict
// documentation for more info.
func (u *LottoPrizeUpsertBulk) Update(set func(*LottoPrizeUpsert)) *LottoPrizeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LottoPrizeUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *LottoPrizeUpsertBulk) SetCreatedBy(v int64) *LottoPrizeUpsertBulk {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *LottoPrizeUpsertBulk) AddCreatedBy(v int64) *LottoPrizeUpsertBulk {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *LottoPrizeUpsertBulk) UpdateCreatedBy() *LottoPrizeUpsertBulk {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *LottoPrizeUpsertBulk) SetUpdatedBy(v int64) *LottoPrizeUpsertBulk {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *LottoPrizeUpsertBulk) AddUpdatedBy(v int64) *LottoPrizeUpsertBulk {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *LottoPrizeUpsertBulk) UpdateUpdatedBy() *LottoPrizeUpsertBulk {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LottoPrizeUpsertBulk) SetUpdatedAt(v time.Time) *LottoPrizeUpsertBulk {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LottoPrizeUpsertBulk) UpdateUpdatedAt() *LottoPrizeUpsertBulk {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LottoPrizeUpsertBulk) SetDeletedAt(v time.Time) *LottoPrizeUpsertBulk {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LottoPrizeUpsertBulk) UpdateDeletedAt() *LottoPrizeUpsertBulk {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetLottoID sets the "lotto_id" field.
func (u *LottoPrizeUpsertBulk) SetLottoID(v int64) *LottoPrizeUpsertBulk {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.SetLottoID(v)
	})
}

// UpdateLottoID sets the "lotto_id" field to the value that was provided on create.
func (u *LottoPrizeUpsertBulk) UpdateLottoID() *LottoPrizeUpsertBulk {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.UpdateLottoID()
	})
}

// SetLevelName sets the "level_name" field.
func (u *LottoPrizeUpsertBulk) SetLevelName(v string) *LottoPrizeUpsertBulk {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.SetLevelName(v)
	})
}

// UpdateLevelName sets the "level_name" field to the value that was provided on create.
func (u *LottoPrizeUpsertBulk) UpdateLevelName() *LottoPrizeUpsertBulk {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.UpdateLevelName()
	})
}

// SetWeight sets the "weight" field.
func (u *LottoPrizeUpsertBulk) SetWeight(v int64) *LottoPrizeUpsertBulk {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.SetWeight(v)
	})
}

// AddWeight adds v to the "weight" field.
func (u *LottoPrizeUpsertBulk) AddWeight(v int64) *LottoPrizeUpsertBulk {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.AddWeight(v)
	})
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *LottoPrizeUpsertBulk) UpdateWeight() *LottoPrizeUpsertBulk {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.UpdateWeight()
	})
}

// SetName sets the "name" field.
func (u *LottoPrizeUpsertBulk) SetName(v string) *LottoPrizeUpsertBulk {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *LottoPrizeUpsertBulk) UpdateName() *LottoPrizeUpsertBulk {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.UpdateName()
	})
}

// SetStatus sets the "status" field.
func (u *LottoPrizeUpsertBulk) SetStatus(v lottoprize.Status) *LottoPrizeUpsertBulk {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *LottoPrizeUpsertBulk) UpdateStatus() *LottoPrizeUpsertBulk {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.UpdateStatus()
	})
}

// SetType sets the "type" field.
func (u *LottoPrizeUpsertBulk) SetType(v lottoprize.Type) *LottoPrizeUpsertBulk {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *LottoPrizeUpsertBulk) UpdateType() *LottoPrizeUpsertBulk {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.UpdateType()
	})
}

// SetCepAmount sets the "cep_amount" field.
func (u *LottoPrizeUpsertBulk) SetCepAmount(v int64) *LottoPrizeUpsertBulk {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.SetCepAmount(v)
	})
}

// AddCepAmount adds v to the "cep_amount" field.
func (u *LottoPrizeUpsertBulk) AddCepAmount(v int64) *LottoPrizeUpsertBulk {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.AddCepAmount(v)
	})
}

// UpdateCepAmount sets the "cep_amount" field to the value that was provided on create.
func (u *LottoPrizeUpsertBulk) UpdateCepAmount() *LottoPrizeUpsertBulk {
	return u.Update(func(s *LottoPrizeUpsert) {
		s.UpdateCepAmount()
	})
}

// Exec executes the query.
func (u *LottoPrizeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the LottoPrizeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for LottoPrizeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LottoPrizeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
