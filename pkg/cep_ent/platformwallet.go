// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/platformwallet"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 平台钱包账户，独立于用户，每种类型的 cep 余额，比如分润获取的都集中到一条数据，即一个钱包
type PlatformWallet struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int64 `json:"created_by"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int64 `json:"updated_by"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at"`
	// Type holds the value of the "type" field.
	Type platformwallet.Type `json:"type"`
	// 累计总余额
	SumCep int64 `json:"sum_total_cep"`
	// 剩余总余额
	Cep int64 `json:"total_cep"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlatformWalletQuery when eager-loading is set.
	Edges        PlatformWalletEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PlatformWalletEdges holds the relations/edges for other nodes in the graph.
type PlatformWalletEdges struct {
	// Bills holds the value of the bills edge.
	Bills []*Bill `json:"bills,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BillsOrErr returns the Bills value or an error if the edge
// was not loaded in eager-loading.
func (e PlatformWalletEdges) BillsOrErr() ([]*Bill, error) {
	if e.loadedTypes[0] {
		return e.Bills, nil
	}
	return nil, &NotLoadedError{edge: "bills"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PlatformWallet) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case platformwallet.FieldID, platformwallet.FieldCreatedBy, platformwallet.FieldUpdatedBy, platformwallet.FieldSumCep, platformwallet.FieldCep:
			values[i] = new(sql.NullInt64)
		case platformwallet.FieldType:
			values[i] = new(sql.NullString)
		case platformwallet.FieldCreatedAt, platformwallet.FieldUpdatedAt, platformwallet.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PlatformWallet fields.
func (pw *PlatformWallet) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case platformwallet.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pw.ID = int64(value.Int64)
		case platformwallet.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				pw.CreatedBy = value.Int64
			}
		case platformwallet.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				pw.UpdatedBy = value.Int64
			}
		case platformwallet.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pw.CreatedAt = value.Time
			}
		case platformwallet.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pw.UpdatedAt = value.Time
			}
		case platformwallet.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pw.DeletedAt = value.Time
			}
		case platformwallet.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pw.Type = platformwallet.Type(value.String)
			}
		case platformwallet.FieldSumCep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sum_cep", values[i])
			} else if value.Valid {
				pw.SumCep = value.Int64
			}
		case platformwallet.FieldCep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cep", values[i])
			} else if value.Valid {
				pw.Cep = value.Int64
			}
		default:
			pw.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PlatformWallet.
// This includes values selected through modifiers, order, etc.
func (pw *PlatformWallet) Value(name string) (ent.Value, error) {
	return pw.selectValues.Get(name)
}

// QueryBills queries the "bills" edge of the PlatformWallet entity.
func (pw *PlatformWallet) QueryBills() *BillQuery {
	return NewPlatformWalletClient(pw.config).QueryBills(pw)
}

// Update returns a builder for updating this PlatformWallet.
// Note that you need to call PlatformWallet.Unwrap() before calling this method if this PlatformWallet
// was returned from a transaction, and the transaction was committed or rolled back.
func (pw *PlatformWallet) Update() *PlatformWalletUpdateOne {
	return NewPlatformWalletClient(pw.config).UpdateOne(pw)
}

// Unwrap unwraps the PlatformWallet entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pw *PlatformWallet) Unwrap() *PlatformWallet {
	_tx, ok := pw.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: PlatformWallet is not a transactional entity")
	}
	pw.config.driver = _tx.drv
	return pw
}

// String implements the fmt.Stringer.
func (pw *PlatformWallet) String() string {
	var builder strings.Builder
	builder.WriteString("PlatformWallet(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pw.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", pw.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", pw.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pw.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pw.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(pw.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", pw.Type))
	builder.WriteString(", ")
	builder.WriteString("sum_cep=")
	builder.WriteString(fmt.Sprintf("%v", pw.SumCep))
	builder.WriteString(", ")
	builder.WriteString("cep=")
	builder.WriteString(fmt.Sprintf("%v", pw.Cep))
	builder.WriteByte(')')
	return builder.String()
}

// PlatformWallets is a parsable slice of PlatformWallet.
type PlatformWallets []*PlatformWallet
