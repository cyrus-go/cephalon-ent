// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/device"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/mission"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionfailedfeedback"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
)

// MissionFailedFeedbackQuery is the builder for querying MissionFailedFeedback entities.
type MissionFailedFeedbackQuery struct {
	config
	ctx         *QueryContext
	order       []missionfailedfeedback.OrderOption
	inters      []Interceptor
	predicates  []predicate.MissionFailedFeedback
	withUser    *UserQuery
	withDevice  *DeviceQuery
	withMission *MissionQuery
	modifiers   []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MissionFailedFeedbackQuery builder.
func (mffq *MissionFailedFeedbackQuery) Where(ps ...predicate.MissionFailedFeedback) *MissionFailedFeedbackQuery {
	mffq.predicates = append(mffq.predicates, ps...)
	return mffq
}

// Limit the number of records to be returned by this query.
func (mffq *MissionFailedFeedbackQuery) Limit(limit int) *MissionFailedFeedbackQuery {
	mffq.ctx.Limit = &limit
	return mffq
}

// Offset to start from.
func (mffq *MissionFailedFeedbackQuery) Offset(offset int) *MissionFailedFeedbackQuery {
	mffq.ctx.Offset = &offset
	return mffq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mffq *MissionFailedFeedbackQuery) Unique(unique bool) *MissionFailedFeedbackQuery {
	mffq.ctx.Unique = &unique
	return mffq
}

// Order specifies how the records should be ordered.
func (mffq *MissionFailedFeedbackQuery) Order(o ...missionfailedfeedback.OrderOption) *MissionFailedFeedbackQuery {
	mffq.order = append(mffq.order, o...)
	return mffq
}

// QueryUser chains the current query on the "user" edge.
func (mffq *MissionFailedFeedbackQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: mffq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mffq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mffq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(missionfailedfeedback.Table, missionfailedfeedback.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, missionfailedfeedback.UserTable, missionfailedfeedback.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(mffq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDevice chains the current query on the "device" edge.
func (mffq *MissionFailedFeedbackQuery) QueryDevice() *DeviceQuery {
	query := (&DeviceClient{config: mffq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mffq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mffq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(missionfailedfeedback.Table, missionfailedfeedback.FieldID, selector),
			sqlgraph.To(device.Table, device.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, missionfailedfeedback.DeviceTable, missionfailedfeedback.DeviceColumn),
		)
		fromU = sqlgraph.SetNeighbors(mffq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMission chains the current query on the "mission" edge.
func (mffq *MissionFailedFeedbackQuery) QueryMission() *MissionQuery {
	query := (&MissionClient{config: mffq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mffq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mffq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(missionfailedfeedback.Table, missionfailedfeedback.FieldID, selector),
			sqlgraph.To(mission.Table, mission.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, missionfailedfeedback.MissionTable, missionfailedfeedback.MissionColumn),
		)
		fromU = sqlgraph.SetNeighbors(mffq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first MissionFailedFeedback entity from the query.
// Returns a *NotFoundError when no MissionFailedFeedback was found.
func (mffq *MissionFailedFeedbackQuery) First(ctx context.Context) (*MissionFailedFeedback, error) {
	nodes, err := mffq.Limit(1).All(setContextOp(ctx, mffq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{missionfailedfeedback.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mffq *MissionFailedFeedbackQuery) FirstX(ctx context.Context) *MissionFailedFeedback {
	node, err := mffq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MissionFailedFeedback ID from the query.
// Returns a *NotFoundError when no MissionFailedFeedback ID was found.
func (mffq *MissionFailedFeedbackQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = mffq.Limit(1).IDs(setContextOp(ctx, mffq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{missionfailedfeedback.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mffq *MissionFailedFeedbackQuery) FirstIDX(ctx context.Context) int64 {
	id, err := mffq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single MissionFailedFeedback entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one MissionFailedFeedback entity is found.
// Returns a *NotFoundError when no MissionFailedFeedback entities are found.
func (mffq *MissionFailedFeedbackQuery) Only(ctx context.Context) (*MissionFailedFeedback, error) {
	nodes, err := mffq.Limit(2).All(setContextOp(ctx, mffq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{missionfailedfeedback.Label}
	default:
		return nil, &NotSingularError{missionfailedfeedback.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mffq *MissionFailedFeedbackQuery) OnlyX(ctx context.Context) *MissionFailedFeedback {
	node, err := mffq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only MissionFailedFeedback ID in the query.
// Returns a *NotSingularError when more than one MissionFailedFeedback ID is found.
// Returns a *NotFoundError when no entities are found.
func (mffq *MissionFailedFeedbackQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = mffq.Limit(2).IDs(setContextOp(ctx, mffq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{missionfailedfeedback.Label}
	default:
		err = &NotSingularError{missionfailedfeedback.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mffq *MissionFailedFeedbackQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := mffq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MissionFailedFeedbacks.
func (mffq *MissionFailedFeedbackQuery) All(ctx context.Context) ([]*MissionFailedFeedback, error) {
	ctx = setContextOp(ctx, mffq.ctx, "All")
	if err := mffq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*MissionFailedFeedback, *MissionFailedFeedbackQuery]()
	return withInterceptors[[]*MissionFailedFeedback](ctx, mffq, qr, mffq.inters)
}

// AllX is like All, but panics if an error occurs.
func (mffq *MissionFailedFeedbackQuery) AllX(ctx context.Context) []*MissionFailedFeedback {
	nodes, err := mffq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MissionFailedFeedback IDs.
func (mffq *MissionFailedFeedbackQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if mffq.ctx.Unique == nil && mffq.path != nil {
		mffq.Unique(true)
	}
	ctx = setContextOp(ctx, mffq.ctx, "IDs")
	if err = mffq.Select(missionfailedfeedback.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mffq *MissionFailedFeedbackQuery) IDsX(ctx context.Context) []int64 {
	ids, err := mffq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mffq *MissionFailedFeedbackQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, mffq.ctx, "Count")
	if err := mffq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, mffq, querierCount[*MissionFailedFeedbackQuery](), mffq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (mffq *MissionFailedFeedbackQuery) CountX(ctx context.Context) int {
	count, err := mffq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mffq *MissionFailedFeedbackQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, mffq.ctx, "Exist")
	switch _, err := mffq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("cep_ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (mffq *MissionFailedFeedbackQuery) ExistX(ctx context.Context) bool {
	exist, err := mffq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MissionFailedFeedbackQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mffq *MissionFailedFeedbackQuery) Clone() *MissionFailedFeedbackQuery {
	if mffq == nil {
		return nil
	}
	return &MissionFailedFeedbackQuery{
		config:      mffq.config,
		ctx:         mffq.ctx.Clone(),
		order:       append([]missionfailedfeedback.OrderOption{}, mffq.order...),
		inters:      append([]Interceptor{}, mffq.inters...),
		predicates:  append([]predicate.MissionFailedFeedback{}, mffq.predicates...),
		withUser:    mffq.withUser.Clone(),
		withDevice:  mffq.withDevice.Clone(),
		withMission: mffq.withMission.Clone(),
		// clone intermediate query.
		sql:  mffq.sql.Clone(),
		path: mffq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (mffq *MissionFailedFeedbackQuery) WithUser(opts ...func(*UserQuery)) *MissionFailedFeedbackQuery {
	query := (&UserClient{config: mffq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mffq.withUser = query
	return mffq
}

// WithDevice tells the query-builder to eager-load the nodes that are connected to
// the "device" edge. The optional arguments are used to configure the query builder of the edge.
func (mffq *MissionFailedFeedbackQuery) WithDevice(opts ...func(*DeviceQuery)) *MissionFailedFeedbackQuery {
	query := (&DeviceClient{config: mffq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mffq.withDevice = query
	return mffq
}

// WithMission tells the query-builder to eager-load the nodes that are connected to
// the "mission" edge. The optional arguments are used to configure the query builder of the edge.
func (mffq *MissionFailedFeedbackQuery) WithMission(opts ...func(*MissionQuery)) *MissionFailedFeedbackQuery {
	query := (&MissionClient{config: mffq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mffq.withMission = query
	return mffq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by,string"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MissionFailedFeedback.Query().
//		GroupBy(missionfailedfeedback.FieldCreatedBy).
//		Aggregate(cep_ent.Count()).
//		Scan(ctx, &v)
func (mffq *MissionFailedFeedbackQuery) GroupBy(field string, fields ...string) *MissionFailedFeedbackGroupBy {
	mffq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &MissionFailedFeedbackGroupBy{build: mffq}
	grbuild.flds = &mffq.ctx.Fields
	grbuild.label = missionfailedfeedback.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by,string"`
//	}
//
//	client.MissionFailedFeedback.Query().
//		Select(missionfailedfeedback.FieldCreatedBy).
//		Scan(ctx, &v)
func (mffq *MissionFailedFeedbackQuery) Select(fields ...string) *MissionFailedFeedbackSelect {
	mffq.ctx.Fields = append(mffq.ctx.Fields, fields...)
	sbuild := &MissionFailedFeedbackSelect{MissionFailedFeedbackQuery: mffq}
	sbuild.label = missionfailedfeedback.Label
	sbuild.flds, sbuild.scan = &mffq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a MissionFailedFeedbackSelect configured with the given aggregations.
func (mffq *MissionFailedFeedbackQuery) Aggregate(fns ...AggregateFunc) *MissionFailedFeedbackSelect {
	return mffq.Select().Aggregate(fns...)
}

func (mffq *MissionFailedFeedbackQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range mffq.inters {
		if inter == nil {
			return fmt.Errorf("cep_ent: uninitialized interceptor (forgotten import cep_ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, mffq); err != nil {
				return err
			}
		}
	}
	for _, f := range mffq.ctx.Fields {
		if !missionfailedfeedback.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
		}
	}
	if mffq.path != nil {
		prev, err := mffq.path(ctx)
		if err != nil {
			return err
		}
		mffq.sql = prev
	}
	return nil
}

func (mffq *MissionFailedFeedbackQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*MissionFailedFeedback, error) {
	var (
		nodes       = []*MissionFailedFeedback{}
		_spec       = mffq.querySpec()
		loadedTypes = [3]bool{
			mffq.withUser != nil,
			mffq.withDevice != nil,
			mffq.withMission != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*MissionFailedFeedback).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &MissionFailedFeedback{config: mffq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(mffq.modifiers) > 0 {
		_spec.Modifiers = mffq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, mffq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := mffq.withUser; query != nil {
		if err := mffq.loadUser(ctx, query, nodes, nil,
			func(n *MissionFailedFeedback, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := mffq.withDevice; query != nil {
		if err := mffq.loadDevice(ctx, query, nodes, nil,
			func(n *MissionFailedFeedback, e *Device) { n.Edges.Device = e }); err != nil {
			return nil, err
		}
	}
	if query := mffq.withMission; query != nil {
		if err := mffq.loadMission(ctx, query, nodes, nil,
			func(n *MissionFailedFeedback, e *Mission) { n.Edges.Mission = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (mffq *MissionFailedFeedbackQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*MissionFailedFeedback, init func(*MissionFailedFeedback), assign func(*MissionFailedFeedback, *User)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*MissionFailedFeedback)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (mffq *MissionFailedFeedbackQuery) loadDevice(ctx context.Context, query *DeviceQuery, nodes []*MissionFailedFeedback, init func(*MissionFailedFeedback), assign func(*MissionFailedFeedback, *Device)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*MissionFailedFeedback)
	for i := range nodes {
		fk := nodes[i].DeviceID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(device.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "device_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (mffq *MissionFailedFeedbackQuery) loadMission(ctx context.Context, query *MissionQuery, nodes []*MissionFailedFeedback, init func(*MissionFailedFeedback), assign func(*MissionFailedFeedback, *Mission)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*MissionFailedFeedback)
	for i := range nodes {
		fk := nodes[i].MissionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(mission.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "mission_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (mffq *MissionFailedFeedbackQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mffq.querySpec()
	if len(mffq.modifiers) > 0 {
		_spec.Modifiers = mffq.modifiers
	}
	_spec.Node.Columns = mffq.ctx.Fields
	if len(mffq.ctx.Fields) > 0 {
		_spec.Unique = mffq.ctx.Unique != nil && *mffq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, mffq.driver, _spec)
}

func (mffq *MissionFailedFeedbackQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(missionfailedfeedback.Table, missionfailedfeedback.Columns, sqlgraph.NewFieldSpec(missionfailedfeedback.FieldID, field.TypeInt64))
	_spec.From = mffq.sql
	if unique := mffq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if mffq.path != nil {
		_spec.Unique = true
	}
	if fields := mffq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, missionfailedfeedback.FieldID)
		for i := range fields {
			if fields[i] != missionfailedfeedback.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if mffq.withUser != nil {
			_spec.Node.AddColumnOnce(missionfailedfeedback.FieldUserID)
		}
		if mffq.withDevice != nil {
			_spec.Node.AddColumnOnce(missionfailedfeedback.FieldDeviceID)
		}
		if mffq.withMission != nil {
			_spec.Node.AddColumnOnce(missionfailedfeedback.FieldMissionID)
		}
	}
	if ps := mffq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mffq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mffq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mffq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mffq *MissionFailedFeedbackQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mffq.driver.Dialect())
	t1 := builder.Table(missionfailedfeedback.Table)
	columns := mffq.ctx.Fields
	if len(columns) == 0 {
		columns = missionfailedfeedback.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mffq.sql != nil {
		selector = mffq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if mffq.ctx.Unique != nil && *mffq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range mffq.modifiers {
		m(selector)
	}
	for _, p := range mffq.predicates {
		p(selector)
	}
	for _, p := range mffq.order {
		p(selector)
	}
	if offset := mffq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mffq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (mffq *MissionFailedFeedbackQuery) Modify(modifiers ...func(s *sql.Selector)) *MissionFailedFeedbackSelect {
	mffq.modifiers = append(mffq.modifiers, modifiers...)
	return mffq.Select()
}

// MissionFailedFeedbackGroupBy is the group-by builder for MissionFailedFeedback entities.
type MissionFailedFeedbackGroupBy struct {
	selector
	build *MissionFailedFeedbackQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mffgb *MissionFailedFeedbackGroupBy) Aggregate(fns ...AggregateFunc) *MissionFailedFeedbackGroupBy {
	mffgb.fns = append(mffgb.fns, fns...)
	return mffgb
}

// Scan applies the selector query and scans the result into the given value.
func (mffgb *MissionFailedFeedbackGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mffgb.build.ctx, "GroupBy")
	if err := mffgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MissionFailedFeedbackQuery, *MissionFailedFeedbackGroupBy](ctx, mffgb.build, mffgb, mffgb.build.inters, v)
}

func (mffgb *MissionFailedFeedbackGroupBy) sqlScan(ctx context.Context, root *MissionFailedFeedbackQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(mffgb.fns))
	for _, fn := range mffgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*mffgb.flds)+len(mffgb.fns))
		for _, f := range *mffgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*mffgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mffgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// MissionFailedFeedbackSelect is the builder for selecting fields of MissionFailedFeedback entities.
type MissionFailedFeedbackSelect struct {
	*MissionFailedFeedbackQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (mffs *MissionFailedFeedbackSelect) Aggregate(fns ...AggregateFunc) *MissionFailedFeedbackSelect {
	mffs.fns = append(mffs.fns, fns...)
	return mffs
}

// Scan applies the selector query and scans the result into the given value.
func (mffs *MissionFailedFeedbackSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mffs.ctx, "Select")
	if err := mffs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MissionFailedFeedbackQuery, *MissionFailedFeedbackSelect](ctx, mffs.MissionFailedFeedbackQuery, mffs, mffs.inters, v)
}

func (mffs *MissionFailedFeedbackSelect) sqlScan(ctx context.Context, root *MissionFailedFeedbackQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(mffs.fns))
	for _, fn := range mffs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*mffs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mffs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (mffs *MissionFailedFeedbackSelect) Modify(modifiers ...func(s *sql.Selector)) *MissionFailedFeedbackSelect {
	mffs.modifiers = append(mffs.modifiers, modifiers...)
	return mffs
}
