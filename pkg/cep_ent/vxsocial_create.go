// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/rechargeorder"
	"cephalon-ent/pkg/cep_ent/user"
	"cephalon-ent/pkg/cep_ent/vxsocial"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VXSocialCreate is the builder for creating a VXSocial entity.
type VXSocialCreate struct {
	config
	mutation *VXSocialMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (vsc *VXSocialCreate) SetCreatedBy(i int64) *VXSocialCreate {
	vsc.mutation.SetCreatedBy(i)
	return vsc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (vsc *VXSocialCreate) SetNillableCreatedBy(i *int64) *VXSocialCreate {
	if i != nil {
		vsc.SetCreatedBy(*i)
	}
	return vsc
}

// SetUpdatedBy sets the "updated_by" field.
func (vsc *VXSocialCreate) SetUpdatedBy(i int64) *VXSocialCreate {
	vsc.mutation.SetUpdatedBy(i)
	return vsc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vsc *VXSocialCreate) SetNillableUpdatedBy(i *int64) *VXSocialCreate {
	if i != nil {
		vsc.SetUpdatedBy(*i)
	}
	return vsc
}

// SetCreatedAt sets the "created_at" field.
func (vsc *VXSocialCreate) SetCreatedAt(t time.Time) *VXSocialCreate {
	vsc.mutation.SetCreatedAt(t)
	return vsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vsc *VXSocialCreate) SetNillableCreatedAt(t *time.Time) *VXSocialCreate {
	if t != nil {
		vsc.SetCreatedAt(*t)
	}
	return vsc
}

// SetUpdatedAt sets the "updated_at" field.
func (vsc *VXSocialCreate) SetUpdatedAt(t time.Time) *VXSocialCreate {
	vsc.mutation.SetUpdatedAt(t)
	return vsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vsc *VXSocialCreate) SetNillableUpdatedAt(t *time.Time) *VXSocialCreate {
	if t != nil {
		vsc.SetUpdatedAt(*t)
	}
	return vsc
}

// SetDeletedAt sets the "deleted_at" field.
func (vsc *VXSocialCreate) SetDeletedAt(t time.Time) *VXSocialCreate {
	vsc.mutation.SetDeletedAt(t)
	return vsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vsc *VXSocialCreate) SetNillableDeletedAt(t *time.Time) *VXSocialCreate {
	if t != nil {
		vsc.SetDeletedAt(*t)
	}
	return vsc
}

// SetAppID sets the "app_id" field.
func (vsc *VXSocialCreate) SetAppID(s string) *VXSocialCreate {
	vsc.mutation.SetAppID(s)
	return vsc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (vsc *VXSocialCreate) SetNillableAppID(s *string) *VXSocialCreate {
	if s != nil {
		vsc.SetAppID(*s)
	}
	return vsc
}

// SetOpenID sets the "open_id" field.
func (vsc *VXSocialCreate) SetOpenID(s string) *VXSocialCreate {
	vsc.mutation.SetOpenID(s)
	return vsc
}

// SetNillableOpenID sets the "open_id" field if the given value is not nil.
func (vsc *VXSocialCreate) SetNillableOpenID(s *string) *VXSocialCreate {
	if s != nil {
		vsc.SetOpenID(*s)
	}
	return vsc
}

// SetUnionID sets the "union_id" field.
func (vsc *VXSocialCreate) SetUnionID(s string) *VXSocialCreate {
	vsc.mutation.SetUnionID(s)
	return vsc
}

// SetNillableUnionID sets the "union_id" field if the given value is not nil.
func (vsc *VXSocialCreate) SetNillableUnionID(s *string) *VXSocialCreate {
	if s != nil {
		vsc.SetUnionID(*s)
	}
	return vsc
}

// SetScope sets the "scope" field.
func (vsc *VXSocialCreate) SetScope(v vxsocial.Scope) *VXSocialCreate {
	vsc.mutation.SetScope(v)
	return vsc
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (vsc *VXSocialCreate) SetNillableScope(v *vxsocial.Scope) *VXSocialCreate {
	if v != nil {
		vsc.SetScope(*v)
	}
	return vsc
}

// SetSessionKey sets the "session_key" field.
func (vsc *VXSocialCreate) SetSessionKey(s string) *VXSocialCreate {
	vsc.mutation.SetSessionKey(s)
	return vsc
}

// SetNillableSessionKey sets the "session_key" field if the given value is not nil.
func (vsc *VXSocialCreate) SetNillableSessionKey(s *string) *VXSocialCreate {
	if s != nil {
		vsc.SetSessionKey(*s)
	}
	return vsc
}

// SetAccessToken sets the "access_token" field.
func (vsc *VXSocialCreate) SetAccessToken(s string) *VXSocialCreate {
	vsc.mutation.SetAccessToken(s)
	return vsc
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (vsc *VXSocialCreate) SetNillableAccessToken(s *string) *VXSocialCreate {
	if s != nil {
		vsc.SetAccessToken(*s)
	}
	return vsc
}

// SetRefreshToken sets the "refresh_token" field.
func (vsc *VXSocialCreate) SetRefreshToken(s string) *VXSocialCreate {
	vsc.mutation.SetRefreshToken(s)
	return vsc
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (vsc *VXSocialCreate) SetNillableRefreshToken(s *string) *VXSocialCreate {
	if s != nil {
		vsc.SetRefreshToken(*s)
	}
	return vsc
}

// SetUserID sets the "user_id" field.
func (vsc *VXSocialCreate) SetUserID(i int64) *VXSocialCreate {
	vsc.mutation.SetUserID(i)
	return vsc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (vsc *VXSocialCreate) SetNillableUserID(i *int64) *VXSocialCreate {
	if i != nil {
		vsc.SetUserID(*i)
	}
	return vsc
}

// SetID sets the "id" field.
func (vsc *VXSocialCreate) SetID(i int64) *VXSocialCreate {
	vsc.mutation.SetID(i)
	return vsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vsc *VXSocialCreate) SetNillableID(i *int64) *VXSocialCreate {
	if i != nil {
		vsc.SetID(*i)
	}
	return vsc
}

// SetUser sets the "user" edge to the User entity.
func (vsc *VXSocialCreate) SetUser(u *User) *VXSocialCreate {
	return vsc.SetUserID(u.ID)
}

// AddRechargeOrderIDs adds the "recharge_orders" edge to the RechargeOrder entity by IDs.
func (vsc *VXSocialCreate) AddRechargeOrderIDs(ids ...int64) *VXSocialCreate {
	vsc.mutation.AddRechargeOrderIDs(ids...)
	return vsc
}

// AddRechargeOrders adds the "recharge_orders" edges to the RechargeOrder entity.
func (vsc *VXSocialCreate) AddRechargeOrders(r ...*RechargeOrder) *VXSocialCreate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vsc.AddRechargeOrderIDs(ids...)
}

// Mutation returns the VXSocialMutation object of the builder.
func (vsc *VXSocialCreate) Mutation() *VXSocialMutation {
	return vsc.mutation
}

// Save creates the VXSocial in the database.
func (vsc *VXSocialCreate) Save(ctx context.Context) (*VXSocial, error) {
	vsc.defaults()
	return withHooks(ctx, vsc.sqlSave, vsc.mutation, vsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vsc *VXSocialCreate) SaveX(ctx context.Context) *VXSocial {
	v, err := vsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vsc *VXSocialCreate) Exec(ctx context.Context) error {
	_, err := vsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vsc *VXSocialCreate) ExecX(ctx context.Context) {
	if err := vsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vsc *VXSocialCreate) defaults() {
	if _, ok := vsc.mutation.CreatedBy(); !ok {
		v := vxsocial.DefaultCreatedBy
		vsc.mutation.SetCreatedBy(v)
	}
	if _, ok := vsc.mutation.UpdatedBy(); !ok {
		v := vxsocial.DefaultUpdatedBy
		vsc.mutation.SetUpdatedBy(v)
	}
	if _, ok := vsc.mutation.CreatedAt(); !ok {
		v := vxsocial.DefaultCreatedAt()
		vsc.mutation.SetCreatedAt(v)
	}
	if _, ok := vsc.mutation.UpdatedAt(); !ok {
		v := vxsocial.DefaultUpdatedAt()
		vsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := vsc.mutation.DeletedAt(); !ok {
		v := vxsocial.DefaultDeletedAt
		vsc.mutation.SetDeletedAt(v)
	}
	if _, ok := vsc.mutation.AppID(); !ok {
		v := vxsocial.DefaultAppID
		vsc.mutation.SetAppID(v)
	}
	if _, ok := vsc.mutation.OpenID(); !ok {
		v := vxsocial.DefaultOpenID
		vsc.mutation.SetOpenID(v)
	}
	if _, ok := vsc.mutation.UnionID(); !ok {
		v := vxsocial.DefaultUnionID
		vsc.mutation.SetUnionID(v)
	}
	if _, ok := vsc.mutation.Scope(); !ok {
		v := vxsocial.DefaultScope
		vsc.mutation.SetScope(v)
	}
	if _, ok := vsc.mutation.SessionKey(); !ok {
		v := vxsocial.DefaultSessionKey
		vsc.mutation.SetSessionKey(v)
	}
	if _, ok := vsc.mutation.AccessToken(); !ok {
		v := vxsocial.DefaultAccessToken
		vsc.mutation.SetAccessToken(v)
	}
	if _, ok := vsc.mutation.RefreshToken(); !ok {
		v := vxsocial.DefaultRefreshToken
		vsc.mutation.SetRefreshToken(v)
	}
	if _, ok := vsc.mutation.UserID(); !ok {
		v := vxsocial.DefaultUserID
		vsc.mutation.SetUserID(v)
	}
	if _, ok := vsc.mutation.ID(); !ok {
		v := vxsocial.DefaultID()
		vsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vsc *VXSocialCreate) check() error {
	if _, ok := vsc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "VXSocial.created_by"`)}
	}
	if _, ok := vsc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "VXSocial.updated_by"`)}
	}
	if _, ok := vsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "VXSocial.created_at"`)}
	}
	if _, ok := vsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "VXSocial.updated_at"`)}
	}
	if _, ok := vsc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "VXSocial.deleted_at"`)}
	}
	if _, ok := vsc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`cep_ent: missing required field "VXSocial.app_id"`)}
	}
	if _, ok := vsc.mutation.OpenID(); !ok {
		return &ValidationError{Name: "open_id", err: errors.New(`cep_ent: missing required field "VXSocial.open_id"`)}
	}
	if _, ok := vsc.mutation.UnionID(); !ok {
		return &ValidationError{Name: "union_id", err: errors.New(`cep_ent: missing required field "VXSocial.union_id"`)}
	}
	if _, ok := vsc.mutation.Scope(); !ok {
		return &ValidationError{Name: "scope", err: errors.New(`cep_ent: missing required field "VXSocial.scope"`)}
	}
	if v, ok := vsc.mutation.Scope(); ok {
		if err := vxsocial.ScopeValidator(v); err != nil {
			return &ValidationError{Name: "scope", err: fmt.Errorf(`cep_ent: validator failed for field "VXSocial.scope": %w`, err)}
		}
	}
	if _, ok := vsc.mutation.SessionKey(); !ok {
		return &ValidationError{Name: "session_key", err: errors.New(`cep_ent: missing required field "VXSocial.session_key"`)}
	}
	if _, ok := vsc.mutation.AccessToken(); !ok {
		return &ValidationError{Name: "access_token", err: errors.New(`cep_ent: missing required field "VXSocial.access_token"`)}
	}
	if _, ok := vsc.mutation.RefreshToken(); !ok {
		return &ValidationError{Name: "refresh_token", err: errors.New(`cep_ent: missing required field "VXSocial.refresh_token"`)}
	}
	if _, ok := vsc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "VXSocial.user_id"`)}
	}
	if _, ok := vsc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "VXSocial.user"`)}
	}
	return nil
}

func (vsc *VXSocialCreate) sqlSave(ctx context.Context) (*VXSocial, error) {
	if err := vsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	vsc.mutation.id = &_node.ID
	vsc.mutation.done = true
	return _node, nil
}

func (vsc *VXSocialCreate) createSpec() (*VXSocial, *sqlgraph.CreateSpec) {
	var (
		_node = &VXSocial{config: vsc.config}
		_spec = sqlgraph.NewCreateSpec(vxsocial.Table, sqlgraph.NewFieldSpec(vxsocial.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = vsc.conflict
	if id, ok := vsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vsc.mutation.CreatedBy(); ok {
		_spec.SetField(vxsocial.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := vsc.mutation.UpdatedBy(); ok {
		_spec.SetField(vxsocial.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := vsc.mutation.CreatedAt(); ok {
		_spec.SetField(vxsocial.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vsc.mutation.UpdatedAt(); ok {
		_spec.SetField(vxsocial.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vsc.mutation.DeletedAt(); ok {
		_spec.SetField(vxsocial.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := vsc.mutation.AppID(); ok {
		_spec.SetField(vxsocial.FieldAppID, field.TypeString, value)
		_node.AppID = value
	}
	if value, ok := vsc.mutation.OpenID(); ok {
		_spec.SetField(vxsocial.FieldOpenID, field.TypeString, value)
		_node.OpenID = value
	}
	if value, ok := vsc.mutation.UnionID(); ok {
		_spec.SetField(vxsocial.FieldUnionID, field.TypeString, value)
		_node.UnionID = value
	}
	if value, ok := vsc.mutation.Scope(); ok {
		_spec.SetField(vxsocial.FieldScope, field.TypeEnum, value)
		_node.Scope = value
	}
	if value, ok := vsc.mutation.SessionKey(); ok {
		_spec.SetField(vxsocial.FieldSessionKey, field.TypeString, value)
		_node.SessionKey = value
	}
	if value, ok := vsc.mutation.AccessToken(); ok {
		_spec.SetField(vxsocial.FieldAccessToken, field.TypeString, value)
		_node.AccessToken = value
	}
	if value, ok := vsc.mutation.RefreshToken(); ok {
		_spec.SetField(vxsocial.FieldRefreshToken, field.TypeString, value)
		_node.RefreshToken = value
	}
	if nodes := vsc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vxsocial.UserTable,
			Columns: []string{vxsocial.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vsc.mutation.RechargeOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vxsocial.RechargeOrdersTable,
			Columns: []string{vxsocial.RechargeOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rechargeorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VXSocial.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VXSocialUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (vsc *VXSocialCreate) OnConflict(opts ...sql.ConflictOption) *VXSocialUpsertOne {
	vsc.conflict = opts
	return &VXSocialUpsertOne{
		create: vsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VXSocial.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vsc *VXSocialCreate) OnConflictColumns(columns ...string) *VXSocialUpsertOne {
	vsc.conflict = append(vsc.conflict, sql.ConflictColumns(columns...))
	return &VXSocialUpsertOne{
		create: vsc,
	}
}

type (
	// VXSocialUpsertOne is the builder for "upsert"-ing
	//  one VXSocial node.
	VXSocialUpsertOne struct {
		create *VXSocialCreate
	}

	// VXSocialUpsert is the "OnConflict" setter.
	VXSocialUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *VXSocialUpsert) SetCreatedBy(v int64) *VXSocialUpsert {
	u.Set(vxsocial.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *VXSocialUpsert) UpdateCreatedBy() *VXSocialUpsert {
	u.SetExcluded(vxsocial.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *VXSocialUpsert) AddCreatedBy(v int64) *VXSocialUpsert {
	u.Add(vxsocial.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *VXSocialUpsert) SetUpdatedBy(v int64) *VXSocialUpsert {
	u.Set(vxsocial.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *VXSocialUpsert) UpdateUpdatedBy() *VXSocialUpsert {
	u.SetExcluded(vxsocial.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *VXSocialUpsert) AddUpdatedBy(v int64) *VXSocialUpsert {
	u.Add(vxsocial.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VXSocialUpsert) SetUpdatedAt(v time.Time) *VXSocialUpsert {
	u.Set(vxsocial.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VXSocialUpsert) UpdateUpdatedAt() *VXSocialUpsert {
	u.SetExcluded(vxsocial.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *VXSocialUpsert) SetDeletedAt(v time.Time) *VXSocialUpsert {
	u.Set(vxsocial.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *VXSocialUpsert) UpdateDeletedAt() *VXSocialUpsert {
	u.SetExcluded(vxsocial.FieldDeletedAt)
	return u
}

// SetAppID sets the "app_id" field.
func (u *VXSocialUpsert) SetAppID(v string) *VXSocialUpsert {
	u.Set(vxsocial.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *VXSocialUpsert) UpdateAppID() *VXSocialUpsert {
	u.SetExcluded(vxsocial.FieldAppID)
	return u
}

// SetOpenID sets the "open_id" field.
func (u *VXSocialUpsert) SetOpenID(v string) *VXSocialUpsert {
	u.Set(vxsocial.FieldOpenID, v)
	return u
}

// UpdateOpenID sets the "open_id" field to the value that was provided on create.
func (u *VXSocialUpsert) UpdateOpenID() *VXSocialUpsert {
	u.SetExcluded(vxsocial.FieldOpenID)
	return u
}

// SetUnionID sets the "union_id" field.
func (u *VXSocialUpsert) SetUnionID(v string) *VXSocialUpsert {
	u.Set(vxsocial.FieldUnionID, v)
	return u
}

// UpdateUnionID sets the "union_id" field to the value that was provided on create.
func (u *VXSocialUpsert) UpdateUnionID() *VXSocialUpsert {
	u.SetExcluded(vxsocial.FieldUnionID)
	return u
}

// SetScope sets the "scope" field.
func (u *VXSocialUpsert) SetScope(v vxsocial.Scope) *VXSocialUpsert {
	u.Set(vxsocial.FieldScope, v)
	return u
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *VXSocialUpsert) UpdateScope() *VXSocialUpsert {
	u.SetExcluded(vxsocial.FieldScope)
	return u
}

// SetSessionKey sets the "session_key" field.
func (u *VXSocialUpsert) SetSessionKey(v string) *VXSocialUpsert {
	u.Set(vxsocial.FieldSessionKey, v)
	return u
}

// UpdateSessionKey sets the "session_key" field to the value that was provided on create.
func (u *VXSocialUpsert) UpdateSessionKey() *VXSocialUpsert {
	u.SetExcluded(vxsocial.FieldSessionKey)
	return u
}

// SetAccessToken sets the "access_token" field.
func (u *VXSocialUpsert) SetAccessToken(v string) *VXSocialUpsert {
	u.Set(vxsocial.FieldAccessToken, v)
	return u
}

// UpdateAccessToken sets the "access_token" field to the value that was provided on create.
func (u *VXSocialUpsert) UpdateAccessToken() *VXSocialUpsert {
	u.SetExcluded(vxsocial.FieldAccessToken)
	return u
}

// SetRefreshToken sets the "refresh_token" field.
func (u *VXSocialUpsert) SetRefreshToken(v string) *VXSocialUpsert {
	u.Set(vxsocial.FieldRefreshToken, v)
	return u
}

// UpdateRefreshToken sets the "refresh_token" field to the value that was provided on create.
func (u *VXSocialUpsert) UpdateRefreshToken() *VXSocialUpsert {
	u.SetExcluded(vxsocial.FieldRefreshToken)
	return u
}

// SetUserID sets the "user_id" field.
func (u *VXSocialUpsert) SetUserID(v int64) *VXSocialUpsert {
	u.Set(vxsocial.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *VXSocialUpsert) UpdateUserID() *VXSocialUpsert {
	u.SetExcluded(vxsocial.FieldUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.VXSocial.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(vxsocial.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *VXSocialUpsertOne) UpdateNewValues() *VXSocialUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(vxsocial.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(vxsocial.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VXSocial.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *VXSocialUpsertOne) Ignore() *VXSocialUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VXSocialUpsertOne) DoNothing() *VXSocialUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VXSocialCreate.OnConflict
// documentation for more info.
func (u *VXSocialUpsertOne) Update(set func(*VXSocialUpsert)) *VXSocialUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VXSocialUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *VXSocialUpsertOne) SetCreatedBy(v int64) *VXSocialUpsertOne {
	return u.Update(func(s *VXSocialUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *VXSocialUpsertOne) AddCreatedBy(v int64) *VXSocialUpsertOne {
	return u.Update(func(s *VXSocialUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *VXSocialUpsertOne) UpdateCreatedBy() *VXSocialUpsertOne {
	return u.Update(func(s *VXSocialUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *VXSocialUpsertOne) SetUpdatedBy(v int64) *VXSocialUpsertOne {
	return u.Update(func(s *VXSocialUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *VXSocialUpsertOne) AddUpdatedBy(v int64) *VXSocialUpsertOne {
	return u.Update(func(s *VXSocialUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *VXSocialUpsertOne) UpdateUpdatedBy() *VXSocialUpsertOne {
	return u.Update(func(s *VXSocialUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VXSocialUpsertOne) SetUpdatedAt(v time.Time) *VXSocialUpsertOne {
	return u.Update(func(s *VXSocialUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VXSocialUpsertOne) UpdateUpdatedAt() *VXSocialUpsertOne {
	return u.Update(func(s *VXSocialUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *VXSocialUpsertOne) SetDeletedAt(v time.Time) *VXSocialUpsertOne {
	return u.Update(func(s *VXSocialUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *VXSocialUpsertOne) UpdateDeletedAt() *VXSocialUpsertOne {
	return u.Update(func(s *VXSocialUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *VXSocialUpsertOne) SetAppID(v string) *VXSocialUpsertOne {
	return u.Update(func(s *VXSocialUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *VXSocialUpsertOne) UpdateAppID() *VXSocialUpsertOne {
	return u.Update(func(s *VXSocialUpsert) {
		s.UpdateAppID()
	})
}

// SetOpenID sets the "open_id" field.
func (u *VXSocialUpsertOne) SetOpenID(v string) *VXSocialUpsertOne {
	return u.Update(func(s *VXSocialUpsert) {
		s.SetOpenID(v)
	})
}

// UpdateOpenID sets the "open_id" field to the value that was provided on create.
func (u *VXSocialUpsertOne) UpdateOpenID() *VXSocialUpsertOne {
	return u.Update(func(s *VXSocialUpsert) {
		s.UpdateOpenID()
	})
}

// SetUnionID sets the "union_id" field.
func (u *VXSocialUpsertOne) SetUnionID(v string) *VXSocialUpsertOne {
	return u.Update(func(s *VXSocialUpsert) {
		s.SetUnionID(v)
	})
}

// UpdateUnionID sets the "union_id" field to the value that was provided on create.
func (u *VXSocialUpsertOne) UpdateUnionID() *VXSocialUpsertOne {
	return u.Update(func(s *VXSocialUpsert) {
		s.UpdateUnionID()
	})
}

// SetScope sets the "scope" field.
func (u *VXSocialUpsertOne) SetScope(v vxsocial.Scope) *VXSocialUpsertOne {
	return u.Update(func(s *VXSocialUpsert) {
		s.SetScope(v)
	})
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *VXSocialUpsertOne) UpdateScope() *VXSocialUpsertOne {
	return u.Update(func(s *VXSocialUpsert) {
		s.UpdateScope()
	})
}

// SetSessionKey sets the "session_key" field.
func (u *VXSocialUpsertOne) SetSessionKey(v string) *VXSocialUpsertOne {
	return u.Update(func(s *VXSocialUpsert) {
		s.SetSessionKey(v)
	})
}

// UpdateSessionKey sets the "session_key" field to the value that was provided on create.
func (u *VXSocialUpsertOne) UpdateSessionKey() *VXSocialUpsertOne {
	return u.Update(func(s *VXSocialUpsert) {
		s.UpdateSessionKey()
	})
}

// SetAccessToken sets the "access_token" field.
func (u *VXSocialUpsertOne) SetAccessToken(v string) *VXSocialUpsertOne {
	return u.Update(func(s *VXSocialUpsert) {
		s.SetAccessToken(v)
	})
}

// UpdateAccessToken sets the "access_token" field to the value that was provided on create.
func (u *VXSocialUpsertOne) UpdateAccessToken() *VXSocialUpsertOne {
	return u.Update(func(s *VXSocialUpsert) {
		s.UpdateAccessToken()
	})
}

// SetRefreshToken sets the "refresh_token" field.
func (u *VXSocialUpsertOne) SetRefreshToken(v string) *VXSocialUpsertOne {
	return u.Update(func(s *VXSocialUpsert) {
		s.SetRefreshToken(v)
	})
}

// UpdateRefreshToken sets the "refresh_token" field to the value that was provided on create.
func (u *VXSocialUpsertOne) UpdateRefreshToken() *VXSocialUpsertOne {
	return u.Update(func(s *VXSocialUpsert) {
		s.UpdateRefreshToken()
	})
}

// SetUserID sets the "user_id" field.
func (u *VXSocialUpsertOne) SetUserID(v int64) *VXSocialUpsertOne {
	return u.Update(func(s *VXSocialUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *VXSocialUpsertOne) UpdateUserID() *VXSocialUpsertOne {
	return u.Update(func(s *VXSocialUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *VXSocialUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for VXSocialCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VXSocialUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VXSocialUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VXSocialUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VXSocialCreateBulk is the builder for creating many VXSocial entities in bulk.
type VXSocialCreateBulk struct {
	config
	builders []*VXSocialCreate
	conflict []sql.ConflictOption
}

// Save creates the VXSocial entities in the database.
func (vscb *VXSocialCreateBulk) Save(ctx context.Context) ([]*VXSocial, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vscb.builders))
	nodes := make([]*VXSocial, len(vscb.builders))
	mutators := make([]Mutator, len(vscb.builders))
	for i := range vscb.builders {
		func(i int, root context.Context) {
			builder := vscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VXSocialMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = vscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vscb *VXSocialCreateBulk) SaveX(ctx context.Context) []*VXSocial {
	v, err := vscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vscb *VXSocialCreateBulk) Exec(ctx context.Context) error {
	_, err := vscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vscb *VXSocialCreateBulk) ExecX(ctx context.Context) {
	if err := vscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VXSocial.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VXSocialUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (vscb *VXSocialCreateBulk) OnConflict(opts ...sql.ConflictOption) *VXSocialUpsertBulk {
	vscb.conflict = opts
	return &VXSocialUpsertBulk{
		create: vscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VXSocial.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vscb *VXSocialCreateBulk) OnConflictColumns(columns ...string) *VXSocialUpsertBulk {
	vscb.conflict = append(vscb.conflict, sql.ConflictColumns(columns...))
	return &VXSocialUpsertBulk{
		create: vscb,
	}
}

// VXSocialUpsertBulk is the builder for "upsert"-ing
// a bulk of VXSocial nodes.
type VXSocialUpsertBulk struct {
	create *VXSocialCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.VXSocial.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(vxsocial.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *VXSocialUpsertBulk) UpdateNewValues() *VXSocialUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(vxsocial.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(vxsocial.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VXSocial.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *VXSocialUpsertBulk) Ignore() *VXSocialUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VXSocialUpsertBulk) DoNothing() *VXSocialUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VXSocialCreateBulk.OnConflict
// documentation for more info.
func (u *VXSocialUpsertBulk) Update(set func(*VXSocialUpsert)) *VXSocialUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VXSocialUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *VXSocialUpsertBulk) SetCreatedBy(v int64) *VXSocialUpsertBulk {
	return u.Update(func(s *VXSocialUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *VXSocialUpsertBulk) AddCreatedBy(v int64) *VXSocialUpsertBulk {
	return u.Update(func(s *VXSocialUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *VXSocialUpsertBulk) UpdateCreatedBy() *VXSocialUpsertBulk {
	return u.Update(func(s *VXSocialUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *VXSocialUpsertBulk) SetUpdatedBy(v int64) *VXSocialUpsertBulk {
	return u.Update(func(s *VXSocialUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *VXSocialUpsertBulk) AddUpdatedBy(v int64) *VXSocialUpsertBulk {
	return u.Update(func(s *VXSocialUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *VXSocialUpsertBulk) UpdateUpdatedBy() *VXSocialUpsertBulk {
	return u.Update(func(s *VXSocialUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VXSocialUpsertBulk) SetUpdatedAt(v time.Time) *VXSocialUpsertBulk {
	return u.Update(func(s *VXSocialUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VXSocialUpsertBulk) UpdateUpdatedAt() *VXSocialUpsertBulk {
	return u.Update(func(s *VXSocialUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *VXSocialUpsertBulk) SetDeletedAt(v time.Time) *VXSocialUpsertBulk {
	return u.Update(func(s *VXSocialUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *VXSocialUpsertBulk) UpdateDeletedAt() *VXSocialUpsertBulk {
	return u.Update(func(s *VXSocialUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *VXSocialUpsertBulk) SetAppID(v string) *VXSocialUpsertBulk {
	return u.Update(func(s *VXSocialUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *VXSocialUpsertBulk) UpdateAppID() *VXSocialUpsertBulk {
	return u.Update(func(s *VXSocialUpsert) {
		s.UpdateAppID()
	})
}

// SetOpenID sets the "open_id" field.
func (u *VXSocialUpsertBulk) SetOpenID(v string) *VXSocialUpsertBulk {
	return u.Update(func(s *VXSocialUpsert) {
		s.SetOpenID(v)
	})
}

// UpdateOpenID sets the "open_id" field to the value that was provided on create.
func (u *VXSocialUpsertBulk) UpdateOpenID() *VXSocialUpsertBulk {
	return u.Update(func(s *VXSocialUpsert) {
		s.UpdateOpenID()
	})
}

// SetUnionID sets the "union_id" field.
func (u *VXSocialUpsertBulk) SetUnionID(v string) *VXSocialUpsertBulk {
	return u.Update(func(s *VXSocialUpsert) {
		s.SetUnionID(v)
	})
}

// UpdateUnionID sets the "union_id" field to the value that was provided on create.
func (u *VXSocialUpsertBulk) UpdateUnionID() *VXSocialUpsertBulk {
	return u.Update(func(s *VXSocialUpsert) {
		s.UpdateUnionID()
	})
}

// SetScope sets the "scope" field.
func (u *VXSocialUpsertBulk) SetScope(v vxsocial.Scope) *VXSocialUpsertBulk {
	return u.Update(func(s *VXSocialUpsert) {
		s.SetScope(v)
	})
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *VXSocialUpsertBulk) UpdateScope() *VXSocialUpsertBulk {
	return u.Update(func(s *VXSocialUpsert) {
		s.UpdateScope()
	})
}

// SetSessionKey sets the "session_key" field.
func (u *VXSocialUpsertBulk) SetSessionKey(v string) *VXSocialUpsertBulk {
	return u.Update(func(s *VXSocialUpsert) {
		s.SetSessionKey(v)
	})
}

// UpdateSessionKey sets the "session_key" field to the value that was provided on create.
func (u *VXSocialUpsertBulk) UpdateSessionKey() *VXSocialUpsertBulk {
	return u.Update(func(s *VXSocialUpsert) {
		s.UpdateSessionKey()
	})
}

// SetAccessToken sets the "access_token" field.
func (u *VXSocialUpsertBulk) SetAccessToken(v string) *VXSocialUpsertBulk {
	return u.Update(func(s *VXSocialUpsert) {
		s.SetAccessToken(v)
	})
}

// UpdateAccessToken sets the "access_token" field to the value that was provided on create.
func (u *VXSocialUpsertBulk) UpdateAccessToken() *VXSocialUpsertBulk {
	return u.Update(func(s *VXSocialUpsert) {
		s.UpdateAccessToken()
	})
}

// SetRefreshToken sets the "refresh_token" field.
func (u *VXSocialUpsertBulk) SetRefreshToken(v string) *VXSocialUpsertBulk {
	return u.Update(func(s *VXSocialUpsert) {
		s.SetRefreshToken(v)
	})
}

// UpdateRefreshToken sets the "refresh_token" field to the value that was provided on create.
func (u *VXSocialUpsertBulk) UpdateRefreshToken() *VXSocialUpsertBulk {
	return u.Update(func(s *VXSocialUpsert) {
		s.UpdateRefreshToken()
	})
}

// SetUserID sets the "user_id" field.
func (u *VXSocialUpsertBulk) SetUserID(v int64) *VXSocialUpsertBulk {
	return u.Update(func(s *VXSocialUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *VXSocialUpsertBulk) UpdateUserID() *VXSocialUpsertBulk {
	return u.Update(func(s *VXSocialUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *VXSocialUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the VXSocialCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for VXSocialCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VXSocialUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
