// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/rechargeorder"
	"cephalon-ent/pkg/cep_ent/user"
	"cephalon-ent/pkg/cep_ent/vxsocial"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VXSocialCreate is the builder for creating a VXSocial entity.
type VXSocialCreate struct {
	config
	mutation *VXSocialMutation
	hooks    []Hook
}

// SetCreatedBy sets the "created_by" field.
func (vsc *VXSocialCreate) SetCreatedBy(i int64) *VXSocialCreate {
	vsc.mutation.SetCreatedBy(i)
	return vsc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (vsc *VXSocialCreate) SetNillableCreatedBy(i *int64) *VXSocialCreate {
	if i != nil {
		vsc.SetCreatedBy(*i)
	}
	return vsc
}

// SetUpdatedBy sets the "updated_by" field.
func (vsc *VXSocialCreate) SetUpdatedBy(i int64) *VXSocialCreate {
	vsc.mutation.SetUpdatedBy(i)
	return vsc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vsc *VXSocialCreate) SetNillableUpdatedBy(i *int64) *VXSocialCreate {
	if i != nil {
		vsc.SetUpdatedBy(*i)
	}
	return vsc
}

// SetCreatedAt sets the "created_at" field.
func (vsc *VXSocialCreate) SetCreatedAt(t time.Time) *VXSocialCreate {
	vsc.mutation.SetCreatedAt(t)
	return vsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vsc *VXSocialCreate) SetNillableCreatedAt(t *time.Time) *VXSocialCreate {
	if t != nil {
		vsc.SetCreatedAt(*t)
	}
	return vsc
}

// SetUpdatedAt sets the "updated_at" field.
func (vsc *VXSocialCreate) SetUpdatedAt(t time.Time) *VXSocialCreate {
	vsc.mutation.SetUpdatedAt(t)
	return vsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vsc *VXSocialCreate) SetNillableUpdatedAt(t *time.Time) *VXSocialCreate {
	if t != nil {
		vsc.SetUpdatedAt(*t)
	}
	return vsc
}

// SetDeletedAt sets the "deleted_at" field.
func (vsc *VXSocialCreate) SetDeletedAt(t time.Time) *VXSocialCreate {
	vsc.mutation.SetDeletedAt(t)
	return vsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vsc *VXSocialCreate) SetNillableDeletedAt(t *time.Time) *VXSocialCreate {
	if t != nil {
		vsc.SetDeletedAt(*t)
	}
	return vsc
}

// SetAppID sets the "app_id" field.
func (vsc *VXSocialCreate) SetAppID(s string) *VXSocialCreate {
	vsc.mutation.SetAppID(s)
	return vsc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (vsc *VXSocialCreate) SetNillableAppID(s *string) *VXSocialCreate {
	if s != nil {
		vsc.SetAppID(*s)
	}
	return vsc
}

// SetOpenID sets the "open_id" field.
func (vsc *VXSocialCreate) SetOpenID(s string) *VXSocialCreate {
	vsc.mutation.SetOpenID(s)
	return vsc
}

// SetNillableOpenID sets the "open_id" field if the given value is not nil.
func (vsc *VXSocialCreate) SetNillableOpenID(s *string) *VXSocialCreate {
	if s != nil {
		vsc.SetOpenID(*s)
	}
	return vsc
}

// SetUnionID sets the "union_id" field.
func (vsc *VXSocialCreate) SetUnionID(s string) *VXSocialCreate {
	vsc.mutation.SetUnionID(s)
	return vsc
}

// SetNillableUnionID sets the "union_id" field if the given value is not nil.
func (vsc *VXSocialCreate) SetNillableUnionID(s *string) *VXSocialCreate {
	if s != nil {
		vsc.SetUnionID(*s)
	}
	return vsc
}

// SetScope sets the "scope" field.
func (vsc *VXSocialCreate) SetScope(v vxsocial.Scope) *VXSocialCreate {
	vsc.mutation.SetScope(v)
	return vsc
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (vsc *VXSocialCreate) SetNillableScope(v *vxsocial.Scope) *VXSocialCreate {
	if v != nil {
		vsc.SetScope(*v)
	}
	return vsc
}

// SetSessionKey sets the "session_key" field.
func (vsc *VXSocialCreate) SetSessionKey(s string) *VXSocialCreate {
	vsc.mutation.SetSessionKey(s)
	return vsc
}

// SetNillableSessionKey sets the "session_key" field if the given value is not nil.
func (vsc *VXSocialCreate) SetNillableSessionKey(s *string) *VXSocialCreate {
	if s != nil {
		vsc.SetSessionKey(*s)
	}
	return vsc
}

// SetAccessToken sets the "access_token" field.
func (vsc *VXSocialCreate) SetAccessToken(s string) *VXSocialCreate {
	vsc.mutation.SetAccessToken(s)
	return vsc
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (vsc *VXSocialCreate) SetNillableAccessToken(s *string) *VXSocialCreate {
	if s != nil {
		vsc.SetAccessToken(*s)
	}
	return vsc
}

// SetRefreshToken sets the "refresh_token" field.
func (vsc *VXSocialCreate) SetRefreshToken(s string) *VXSocialCreate {
	vsc.mutation.SetRefreshToken(s)
	return vsc
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (vsc *VXSocialCreate) SetNillableRefreshToken(s *string) *VXSocialCreate {
	if s != nil {
		vsc.SetRefreshToken(*s)
	}
	return vsc
}

// SetUserID sets the "user_id" field.
func (vsc *VXSocialCreate) SetUserID(i int64) *VXSocialCreate {
	vsc.mutation.SetUserID(i)
	return vsc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (vsc *VXSocialCreate) SetNillableUserID(i *int64) *VXSocialCreate {
	if i != nil {
		vsc.SetUserID(*i)
	}
	return vsc
}

// SetID sets the "id" field.
func (vsc *VXSocialCreate) SetID(i int64) *VXSocialCreate {
	vsc.mutation.SetID(i)
	return vsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vsc *VXSocialCreate) SetNillableID(i *int64) *VXSocialCreate {
	if i != nil {
		vsc.SetID(*i)
	}
	return vsc
}

// SetUser sets the "user" edge to the User entity.
func (vsc *VXSocialCreate) SetUser(u *User) *VXSocialCreate {
	return vsc.SetUserID(u.ID)
}

// AddRechargeOrderIDs adds the "recharge_orders" edge to the RechargeOrder entity by IDs.
func (vsc *VXSocialCreate) AddRechargeOrderIDs(ids ...int64) *VXSocialCreate {
	vsc.mutation.AddRechargeOrderIDs(ids...)
	return vsc
}

// AddRechargeOrders adds the "recharge_orders" edges to the RechargeOrder entity.
func (vsc *VXSocialCreate) AddRechargeOrders(r ...*RechargeOrder) *VXSocialCreate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vsc.AddRechargeOrderIDs(ids...)
}

// Mutation returns the VXSocialMutation object of the builder.
func (vsc *VXSocialCreate) Mutation() *VXSocialMutation {
	return vsc.mutation
}

// Save creates the VXSocial in the database.
func (vsc *VXSocialCreate) Save(ctx context.Context) (*VXSocial, error) {
	vsc.defaults()
	return withHooks(ctx, vsc.sqlSave, vsc.mutation, vsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vsc *VXSocialCreate) SaveX(ctx context.Context) *VXSocial {
	v, err := vsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vsc *VXSocialCreate) Exec(ctx context.Context) error {
	_, err := vsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vsc *VXSocialCreate) ExecX(ctx context.Context) {
	if err := vsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vsc *VXSocialCreate) defaults() {
	if _, ok := vsc.mutation.CreatedBy(); !ok {
		v := vxsocial.DefaultCreatedBy
		vsc.mutation.SetCreatedBy(v)
	}
	if _, ok := vsc.mutation.UpdatedBy(); !ok {
		v := vxsocial.DefaultUpdatedBy
		vsc.mutation.SetUpdatedBy(v)
	}
	if _, ok := vsc.mutation.CreatedAt(); !ok {
		v := vxsocial.DefaultCreatedAt()
		vsc.mutation.SetCreatedAt(v)
	}
	if _, ok := vsc.mutation.UpdatedAt(); !ok {
		v := vxsocial.DefaultUpdatedAt()
		vsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := vsc.mutation.DeletedAt(); !ok {
		v := vxsocial.DefaultDeletedAt
		vsc.mutation.SetDeletedAt(v)
	}
	if _, ok := vsc.mutation.AppID(); !ok {
		v := vxsocial.DefaultAppID
		vsc.mutation.SetAppID(v)
	}
	if _, ok := vsc.mutation.OpenID(); !ok {
		v := vxsocial.DefaultOpenID
		vsc.mutation.SetOpenID(v)
	}
	if _, ok := vsc.mutation.UnionID(); !ok {
		v := vxsocial.DefaultUnionID
		vsc.mutation.SetUnionID(v)
	}
	if _, ok := vsc.mutation.Scope(); !ok {
		v := vxsocial.DefaultScope
		vsc.mutation.SetScope(v)
	}
	if _, ok := vsc.mutation.SessionKey(); !ok {
		v := vxsocial.DefaultSessionKey
		vsc.mutation.SetSessionKey(v)
	}
	if _, ok := vsc.mutation.AccessToken(); !ok {
		v := vxsocial.DefaultAccessToken
		vsc.mutation.SetAccessToken(v)
	}
	if _, ok := vsc.mutation.RefreshToken(); !ok {
		v := vxsocial.DefaultRefreshToken
		vsc.mutation.SetRefreshToken(v)
	}
	if _, ok := vsc.mutation.UserID(); !ok {
		v := vxsocial.DefaultUserID
		vsc.mutation.SetUserID(v)
	}
	if _, ok := vsc.mutation.ID(); !ok {
		v := vxsocial.DefaultID()
		vsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vsc *VXSocialCreate) check() error {
	if _, ok := vsc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "VXSocial.created_by"`)}
	}
	if _, ok := vsc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "VXSocial.updated_by"`)}
	}
	if _, ok := vsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "VXSocial.created_at"`)}
	}
	if _, ok := vsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "VXSocial.updated_at"`)}
	}
	if _, ok := vsc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "VXSocial.deleted_at"`)}
	}
	if _, ok := vsc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`cep_ent: missing required field "VXSocial.app_id"`)}
	}
	if _, ok := vsc.mutation.OpenID(); !ok {
		return &ValidationError{Name: "open_id", err: errors.New(`cep_ent: missing required field "VXSocial.open_id"`)}
	}
	if _, ok := vsc.mutation.UnionID(); !ok {
		return &ValidationError{Name: "union_id", err: errors.New(`cep_ent: missing required field "VXSocial.union_id"`)}
	}
	if _, ok := vsc.mutation.Scope(); !ok {
		return &ValidationError{Name: "scope", err: errors.New(`cep_ent: missing required field "VXSocial.scope"`)}
	}
	if v, ok := vsc.mutation.Scope(); ok {
		if err := vxsocial.ScopeValidator(v); err != nil {
			return &ValidationError{Name: "scope", err: fmt.Errorf(`cep_ent: validator failed for field "VXSocial.scope": %w`, err)}
		}
	}
	if _, ok := vsc.mutation.SessionKey(); !ok {
		return &ValidationError{Name: "session_key", err: errors.New(`cep_ent: missing required field "VXSocial.session_key"`)}
	}
	if _, ok := vsc.mutation.AccessToken(); !ok {
		return &ValidationError{Name: "access_token", err: errors.New(`cep_ent: missing required field "VXSocial.access_token"`)}
	}
	if _, ok := vsc.mutation.RefreshToken(); !ok {
		return &ValidationError{Name: "refresh_token", err: errors.New(`cep_ent: missing required field "VXSocial.refresh_token"`)}
	}
	if _, ok := vsc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "VXSocial.user_id"`)}
	}
	if _, ok := vsc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "VXSocial.user"`)}
	}
	return nil
}

func (vsc *VXSocialCreate) sqlSave(ctx context.Context) (*VXSocial, error) {
	if err := vsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	vsc.mutation.id = &_node.ID
	vsc.mutation.done = true
	return _node, nil
}

func (vsc *VXSocialCreate) createSpec() (*VXSocial, *sqlgraph.CreateSpec) {
	var (
		_node = &VXSocial{config: vsc.config}
		_spec = sqlgraph.NewCreateSpec(vxsocial.Table, sqlgraph.NewFieldSpec(vxsocial.FieldID, field.TypeInt64))
	)
	if id, ok := vsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vsc.mutation.CreatedBy(); ok {
		_spec.SetField(vxsocial.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := vsc.mutation.UpdatedBy(); ok {
		_spec.SetField(vxsocial.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := vsc.mutation.CreatedAt(); ok {
		_spec.SetField(vxsocial.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vsc.mutation.UpdatedAt(); ok {
		_spec.SetField(vxsocial.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vsc.mutation.DeletedAt(); ok {
		_spec.SetField(vxsocial.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := vsc.mutation.AppID(); ok {
		_spec.SetField(vxsocial.FieldAppID, field.TypeString, value)
		_node.AppID = value
	}
	if value, ok := vsc.mutation.OpenID(); ok {
		_spec.SetField(vxsocial.FieldOpenID, field.TypeString, value)
		_node.OpenID = value
	}
	if value, ok := vsc.mutation.UnionID(); ok {
		_spec.SetField(vxsocial.FieldUnionID, field.TypeString, value)
		_node.UnionID = value
	}
	if value, ok := vsc.mutation.Scope(); ok {
		_spec.SetField(vxsocial.FieldScope, field.TypeEnum, value)
		_node.Scope = value
	}
	if value, ok := vsc.mutation.SessionKey(); ok {
		_spec.SetField(vxsocial.FieldSessionKey, field.TypeString, value)
		_node.SessionKey = value
	}
	if value, ok := vsc.mutation.AccessToken(); ok {
		_spec.SetField(vxsocial.FieldAccessToken, field.TypeString, value)
		_node.AccessToken = value
	}
	if value, ok := vsc.mutation.RefreshToken(); ok {
		_spec.SetField(vxsocial.FieldRefreshToken, field.TypeString, value)
		_node.RefreshToken = value
	}
	if nodes := vsc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vxsocial.UserTable,
			Columns: []string{vxsocial.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vsc.mutation.RechargeOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vxsocial.RechargeOrdersTable,
			Columns: []string{vxsocial.RechargeOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rechargeorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VXSocialCreateBulk is the builder for creating many VXSocial entities in bulk.
type VXSocialCreateBulk struct {
	config
	builders []*VXSocialCreate
}

// Save creates the VXSocial entities in the database.
func (vscb *VXSocialCreateBulk) Save(ctx context.Context) ([]*VXSocial, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vscb.builders))
	nodes := make([]*VXSocial, len(vscb.builders))
	mutators := make([]Mutator, len(vscb.builders))
	for i := range vscb.builders {
		func(i int, root context.Context) {
			builder := vscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VXSocialMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vscb *VXSocialCreateBulk) SaveX(ctx context.Context) []*VXSocial {
	v, err := vscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vscb *VXSocialCreateBulk) Exec(ctx context.Context) error {
	_, err := vscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vscb *VXSocialCreateBulk) ExecX(ctx context.Context) {
	if err := vscb.Exec(ctx); err != nil {
		panic(err)
	}
}
