// Code generated by ent, DO NOT EDIT.

package surveyanswer

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldLTE(FieldID, id))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldEQ(FieldDeletedAt, v))
}

// SurveyResponseID applies equality check predicate on the "survey_response_id" field. It's identical to SurveyResponseIDEQ.
func SurveyResponseID(v int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldEQ(FieldSurveyResponseID, v))
}

// SurveyQuestionID applies equality check predicate on the "survey_question_id" field. It's identical to SurveyQuestionIDEQ.
func SurveyQuestionID(v int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldEQ(FieldSurveyQuestionID, v))
}

// SurveyAnswer applies equality check predicate on the "SurveyAnswer" field. It's identical to SurveyAnswerEQ.
func SurveyAnswer(v string) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldEQ(FieldSurveyAnswer, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldLTE(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldLTE(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldLTE(FieldDeletedAt, v))
}

// SurveyResponseIDEQ applies the EQ predicate on the "survey_response_id" field.
func SurveyResponseIDEQ(v int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldEQ(FieldSurveyResponseID, v))
}

// SurveyResponseIDNEQ applies the NEQ predicate on the "survey_response_id" field.
func SurveyResponseIDNEQ(v int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldNEQ(FieldSurveyResponseID, v))
}

// SurveyResponseIDIn applies the In predicate on the "survey_response_id" field.
func SurveyResponseIDIn(vs ...int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldIn(FieldSurveyResponseID, vs...))
}

// SurveyResponseIDNotIn applies the NotIn predicate on the "survey_response_id" field.
func SurveyResponseIDNotIn(vs ...int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldNotIn(FieldSurveyResponseID, vs...))
}

// SurveyQuestionIDEQ applies the EQ predicate on the "survey_question_id" field.
func SurveyQuestionIDEQ(v int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldEQ(FieldSurveyQuestionID, v))
}

// SurveyQuestionIDNEQ applies the NEQ predicate on the "survey_question_id" field.
func SurveyQuestionIDNEQ(v int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldNEQ(FieldSurveyQuestionID, v))
}

// SurveyQuestionIDIn applies the In predicate on the "survey_question_id" field.
func SurveyQuestionIDIn(vs ...int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldIn(FieldSurveyQuestionID, vs...))
}

// SurveyQuestionIDNotIn applies the NotIn predicate on the "survey_question_id" field.
func SurveyQuestionIDNotIn(vs ...int64) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldNotIn(FieldSurveyQuestionID, vs...))
}

// SurveyAnswerEQ applies the EQ predicate on the "SurveyAnswer" field.
func SurveyAnswerEQ(v string) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldEQ(FieldSurveyAnswer, v))
}

// SurveyAnswerNEQ applies the NEQ predicate on the "SurveyAnswer" field.
func SurveyAnswerNEQ(v string) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldNEQ(FieldSurveyAnswer, v))
}

// SurveyAnswerIn applies the In predicate on the "SurveyAnswer" field.
func SurveyAnswerIn(vs ...string) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldIn(FieldSurveyAnswer, vs...))
}

// SurveyAnswerNotIn applies the NotIn predicate on the "SurveyAnswer" field.
func SurveyAnswerNotIn(vs ...string) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldNotIn(FieldSurveyAnswer, vs...))
}

// SurveyAnswerGT applies the GT predicate on the "SurveyAnswer" field.
func SurveyAnswerGT(v string) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldGT(FieldSurveyAnswer, v))
}

// SurveyAnswerGTE applies the GTE predicate on the "SurveyAnswer" field.
func SurveyAnswerGTE(v string) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldGTE(FieldSurveyAnswer, v))
}

// SurveyAnswerLT applies the LT predicate on the "SurveyAnswer" field.
func SurveyAnswerLT(v string) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldLT(FieldSurveyAnswer, v))
}

// SurveyAnswerLTE applies the LTE predicate on the "SurveyAnswer" field.
func SurveyAnswerLTE(v string) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldLTE(FieldSurveyAnswer, v))
}

// SurveyAnswerContains applies the Contains predicate on the "SurveyAnswer" field.
func SurveyAnswerContains(v string) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldContains(FieldSurveyAnswer, v))
}

// SurveyAnswerHasPrefix applies the HasPrefix predicate on the "SurveyAnswer" field.
func SurveyAnswerHasPrefix(v string) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldHasPrefix(FieldSurveyAnswer, v))
}

// SurveyAnswerHasSuffix applies the HasSuffix predicate on the "SurveyAnswer" field.
func SurveyAnswerHasSuffix(v string) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldHasSuffix(FieldSurveyAnswer, v))
}

// SurveyAnswerEqualFold applies the EqualFold predicate on the "SurveyAnswer" field.
func SurveyAnswerEqualFold(v string) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldEqualFold(FieldSurveyAnswer, v))
}

// SurveyAnswerContainsFold applies the ContainsFold predicate on the "SurveyAnswer" field.
func SurveyAnswerContainsFold(v string) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.FieldContainsFold(FieldSurveyAnswer, v))
}

// HasSurveyResponse applies the HasEdge predicate on the "survey_response" edge.
func HasSurveyResponse() predicate.SurveyAnswer {
	return predicate.SurveyAnswer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SurveyResponseTable, SurveyResponseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSurveyResponseWith applies the HasEdge predicate on the "survey_response" edge with a given conditions (other predicates).
func HasSurveyResponseWith(preds ...predicate.SurveyResponse) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(func(s *sql.Selector) {
		step := newSurveyResponseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSurveyQuestion applies the HasEdge predicate on the "survey_question" edge.
func HasSurveyQuestion() predicate.SurveyAnswer {
	return predicate.SurveyAnswer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SurveyQuestionTable, SurveyQuestionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSurveyQuestionWith applies the HasEdge predicate on the "survey_question" edge with a given conditions (other predicates).
func HasSurveyQuestionWith(preds ...predicate.SurveyQuestion) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(func(s *sql.Selector) {
		step := newSurveyQuestionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SurveyAnswer) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SurveyAnswer) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SurveyAnswer) predicate.SurveyAnswer {
	return predicate.SurveyAnswer(sql.NotPredicates(p))
}
