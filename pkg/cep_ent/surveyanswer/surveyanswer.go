// Code generated by ent, DO NOT EDIT.

package surveyanswer

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the surveyanswer type in the database.
	Label = "survey_answer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldSurveyResponseID holds the string denoting the survey_response_id field in the database.
	FieldSurveyResponseID = "survey_response_id"
	// FieldSurveyQuestionID holds the string denoting the survey_question_id field in the database.
	FieldSurveyQuestionID = "survey_question_id"
	// FieldSurveyAnswer holds the string denoting the surveyanswer field in the database.
	FieldSurveyAnswer = "survey_answer"
	// EdgeSurveyResponse holds the string denoting the survey_response edge name in mutations.
	EdgeSurveyResponse = "survey_response"
	// EdgeSurveyQuestion holds the string denoting the survey_question edge name in mutations.
	EdgeSurveyQuestion = "survey_question"
	// Table holds the table name of the surveyanswer in the database.
	Table = "survey_answers"
	// SurveyResponseTable is the table that holds the survey_response relation/edge.
	SurveyResponseTable = "survey_answers"
	// SurveyResponseInverseTable is the table name for the SurveyResponse entity.
	// It exists in this package in order to avoid circular dependency with the "surveyresponse" package.
	SurveyResponseInverseTable = "survey_responses"
	// SurveyResponseColumn is the table column denoting the survey_response relation/edge.
	SurveyResponseColumn = "survey_response_id"
	// SurveyQuestionTable is the table that holds the survey_question relation/edge.
	SurveyQuestionTable = "survey_answers"
	// SurveyQuestionInverseTable is the table name for the SurveyQuestion entity.
	// It exists in this package in order to avoid circular dependency with the "surveyquestion" package.
	SurveyQuestionInverseTable = "survey_questions"
	// SurveyQuestionColumn is the table column denoting the survey_question relation/edge.
	SurveyQuestionColumn = "survey_question_id"
)

// Columns holds all SQL columns for surveyanswer fields.
var Columns = []string{
	FieldID,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldSurveyResponseID,
	FieldSurveyQuestionID,
	FieldSurveyAnswer,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedBy holds the default value on creation for the "created_by" field.
	DefaultCreatedBy int64
	// DefaultUpdatedBy holds the default value on creation for the "updated_by" field.
	DefaultUpdatedBy int64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt time.Time
	// DefaultSurveyResponseID holds the default value on creation for the "survey_response_id" field.
	DefaultSurveyResponseID int64
	// DefaultSurveyQuestionID holds the default value on creation for the "survey_question_id" field.
	DefaultSurveyQuestionID int64
	// DefaultSurveyAnswer holds the default value on creation for the "SurveyAnswer" field.
	DefaultSurveyAnswer string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
)

// OrderOption defines the ordering options for the SurveyAnswer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// BySurveyResponseID orders the results by the survey_response_id field.
func BySurveyResponseID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSurveyResponseID, opts...).ToFunc()
}

// BySurveyQuestionID orders the results by the survey_question_id field.
func BySurveyQuestionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSurveyQuestionID, opts...).ToFunc()
}

// BySurveyAnswer orders the results by the SurveyAnswer field.
func BySurveyAnswer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSurveyAnswer, opts...).ToFunc()
}

// BySurveyResponseField orders the results by survey_response field.
func BySurveyResponseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSurveyResponseStep(), sql.OrderByField(field, opts...))
	}
}

// BySurveyQuestionField orders the results by survey_question field.
func BySurveyQuestionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSurveyQuestionStep(), sql.OrderByField(field, opts...))
	}
}
func newSurveyResponseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SurveyResponseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SurveyResponseTable, SurveyResponseColumn),
	)
}
func newSurveyQuestionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SurveyQuestionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SurveyQuestionTable, SurveyQuestionColumn),
	)
}
