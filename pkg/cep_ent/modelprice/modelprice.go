// Code generated by ent, DO NOT EDIT.

package modelprice

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

const (
	// Label holds the string label denoting the modelprice type in the database.
	Label = "model_price"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldModelID holds the string denoting the model_id field in the database.
	FieldModelID = "model_id"
	// FieldInvokeType holds the string denoting the invoke_type field in the database.
	FieldInvokeType = "invoke_type"
	// FieldGpuVersion holds the string denoting the gpu_version field in the database.
	FieldGpuVersion = "gpu_version"
	// FieldInputGpuPrice holds the string denoting the input_gpu_price field in the database.
	FieldInputGpuPrice = "input_gpu_price"
	// FieldOutputGpuPrice holds the string denoting the output_gpu_price field in the database.
	FieldOutputGpuPrice = "output_gpu_price"
	// FieldInputModelPrice holds the string denoting the input_model_price field in the database.
	FieldInputModelPrice = "input_model_price"
	// FieldOutputModelPrice holds the string denoting the output_model_price field in the database.
	FieldOutputModelPrice = "output_model_price"
	// FieldTokenPerCep holds the string denoting the token_per_cep field in the database.
	FieldTokenPerCep = "token_per_cep"
	// EdgeModel holds the string denoting the model edge name in mutations.
	EdgeModel = "model"
	// Table holds the table name of the modelprice in the database.
	Table = "model_prices"
	// ModelTable is the table that holds the model relation/edge.
	ModelTable = "model_prices"
	// ModelInverseTable is the table name for the Model entity.
	// It exists in this package in order to avoid circular dependency with the "model" package.
	ModelInverseTable = "models"
	// ModelColumn is the table column denoting the model relation/edge.
	ModelColumn = "model_id"
)

// Columns holds all SQL columns for modelprice fields.
var Columns = []string{
	FieldID,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldModelID,
	FieldInvokeType,
	FieldGpuVersion,
	FieldInputGpuPrice,
	FieldOutputGpuPrice,
	FieldInputModelPrice,
	FieldOutputModelPrice,
	FieldTokenPerCep,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedBy holds the default value on creation for the "created_by" field.
	DefaultCreatedBy int64
	// DefaultUpdatedBy holds the default value on creation for the "updated_by" field.
	DefaultUpdatedBy int64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt time.Time
	// DefaultInputGpuPrice holds the default value on creation for the "input_gpu_price" field.
	DefaultInputGpuPrice int
	// DefaultOutputGpuPrice holds the default value on creation for the "output_gpu_price" field.
	DefaultOutputGpuPrice int
	// DefaultInputModelPrice holds the default value on creation for the "input_model_price" field.
	DefaultInputModelPrice int
	// DefaultOutputModelPrice holds the default value on creation for the "output_model_price" field.
	DefaultOutputModelPrice int
	// DefaultTokenPerCep holds the default value on creation for the "token_per_cep" field.
	DefaultTokenPerCep int64
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
)

const DefaultInvokeType enums.InvokeType = "unknown"

// InvokeTypeValidator is a validator for the "invoke_type" field enum values. It is called by the builders before save.
func InvokeTypeValidator(it enums.InvokeType) error {
	switch it {
	case "unknown", "api", "web":
		return nil
	default:
		return fmt.Errorf("modelprice: invalid enum value for invoke_type field: %q", it)
	}
}

const DefaultGpuVersion enums.GpuVersion = "unknown"

// GpuVersionValidator is a validator for the "gpu_version" field enum values. It is called by the builders before save.
func GpuVersionValidator(gv enums.GpuVersion) error {
	switch gv {
	case "unknown", "RTX2060", "RTX2060Ti", "RTX2070", "RTX2070Ti", "RTX2080", "RTX2080Ti", "RTX3060", "RTX3060Ti", "RTX3070", "RTX3070Ti", "RTX3080", "RTX3080Ti", "RTX3090", "RTX3090Ti", "RTX4060", "RTX4060Ti", "RTX4070", "RTX4070Ti", "RTX4080", "RTX4090", "RTX4090D", "A800", "A100", "V100", "ComputilityKing-I", "Ascend910ProB", "P40":
		return nil
	default:
		return fmt.Errorf("modelprice: invalid enum value for gpu_version field: %q", gv)
	}
}

// OrderOption defines the ordering options for the ModelPrice queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByModelID orders the results by the model_id field.
func ByModelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModelID, opts...).ToFunc()
}

// ByInvokeType orders the results by the invoke_type field.
func ByInvokeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvokeType, opts...).ToFunc()
}

// ByGpuVersion orders the results by the gpu_version field.
func ByGpuVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGpuVersion, opts...).ToFunc()
}

// ByInputGpuPrice orders the results by the input_gpu_price field.
func ByInputGpuPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInputGpuPrice, opts...).ToFunc()
}

// ByOutputGpuPrice orders the results by the output_gpu_price field.
func ByOutputGpuPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutputGpuPrice, opts...).ToFunc()
}

// ByInputModelPrice orders the results by the input_model_price field.
func ByInputModelPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInputModelPrice, opts...).ToFunc()
}

// ByOutputModelPrice orders the results by the output_model_price field.
func ByOutputModelPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutputModelPrice, opts...).ToFunc()
}

// ByTokenPerCep orders the results by the token_per_cep field.
func ByTokenPerCep(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTokenPerCep, opts...).ToFunc()
}

// ByModelField orders the results by model field.
func ByModelField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newModelStep(), sql.OrderByField(field, opts...))
	}
}
func newModelStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ModelInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ModelTable, ModelColumn),
	)
}
