// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/hmackeypair"
	"cephalon-ent/pkg/cep_ent/mission"
	"cephalon-ent/pkg/cep_ent/missionkeypair"
	"cephalon-ent/pkg/cep_ent/predicate"
	"cephalon-ent/pkg/enums"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// MissionKeyPairUpdate is the builder for updating MissionKeyPair entities.
type MissionKeyPairUpdate struct {
	config
	hooks    []Hook
	mutation *MissionKeyPairMutation
}

// Where appends a list predicates to the MissionKeyPairUpdate builder.
func (mkpu *MissionKeyPairUpdate) Where(ps ...predicate.MissionKeyPair) *MissionKeyPairUpdate {
	mkpu.mutation.Where(ps...)
	return mkpu
}

// SetCreatedBy sets the "created_by" field.
func (mkpu *MissionKeyPairUpdate) SetCreatedBy(i int64) *MissionKeyPairUpdate {
	mkpu.mutation.ResetCreatedBy()
	mkpu.mutation.SetCreatedBy(i)
	return mkpu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mkpu *MissionKeyPairUpdate) SetNillableCreatedBy(i *int64) *MissionKeyPairUpdate {
	if i != nil {
		mkpu.SetCreatedBy(*i)
	}
	return mkpu
}

// AddCreatedBy adds i to the "created_by" field.
func (mkpu *MissionKeyPairUpdate) AddCreatedBy(i int64) *MissionKeyPairUpdate {
	mkpu.mutation.AddCreatedBy(i)
	return mkpu
}

// SetUpdatedBy sets the "updated_by" field.
func (mkpu *MissionKeyPairUpdate) SetUpdatedBy(i int64) *MissionKeyPairUpdate {
	mkpu.mutation.ResetUpdatedBy()
	mkpu.mutation.SetUpdatedBy(i)
	return mkpu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mkpu *MissionKeyPairUpdate) SetNillableUpdatedBy(i *int64) *MissionKeyPairUpdate {
	if i != nil {
		mkpu.SetUpdatedBy(*i)
	}
	return mkpu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (mkpu *MissionKeyPairUpdate) AddUpdatedBy(i int64) *MissionKeyPairUpdate {
	mkpu.mutation.AddUpdatedBy(i)
	return mkpu
}

// SetUpdatedAt sets the "updated_at" field.
func (mkpu *MissionKeyPairUpdate) SetUpdatedAt(t time.Time) *MissionKeyPairUpdate {
	mkpu.mutation.SetUpdatedAt(t)
	return mkpu
}

// SetDeletedAt sets the "deleted_at" field.
func (mkpu *MissionKeyPairUpdate) SetDeletedAt(t time.Time) *MissionKeyPairUpdate {
	mkpu.mutation.SetDeletedAt(t)
	return mkpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mkpu *MissionKeyPairUpdate) SetNillableDeletedAt(t *time.Time) *MissionKeyPairUpdate {
	if t != nil {
		mkpu.SetDeletedAt(*t)
	}
	return mkpu
}

// SetMissionID sets the "mission_id" field.
func (mkpu *MissionKeyPairUpdate) SetMissionID(i int64) *MissionKeyPairUpdate {
	mkpu.mutation.SetMissionID(i)
	return mkpu
}

// SetKeyPairID sets the "key_pair_id" field.
func (mkpu *MissionKeyPairUpdate) SetKeyPairID(i int64) *MissionKeyPairUpdate {
	mkpu.mutation.SetKeyPairID(i)
	return mkpu
}

// SetStartedAt sets the "started_at" field.
func (mkpu *MissionKeyPairUpdate) SetStartedAt(t time.Time) *MissionKeyPairUpdate {
	mkpu.mutation.SetStartedAt(t)
	return mkpu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (mkpu *MissionKeyPairUpdate) SetNillableStartedAt(t *time.Time) *MissionKeyPairUpdate {
	if t != nil {
		mkpu.SetStartedAt(*t)
	}
	return mkpu
}

// SetFinishedAt sets the "finished_at" field.
func (mkpu *MissionKeyPairUpdate) SetFinishedAt(t time.Time) *MissionKeyPairUpdate {
	mkpu.mutation.SetFinishedAt(t)
	return mkpu
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (mkpu *MissionKeyPairUpdate) SetNillableFinishedAt(t *time.Time) *MissionKeyPairUpdate {
	if t != nil {
		mkpu.SetFinishedAt(*t)
	}
	return mkpu
}

// SetResult sets the "result" field.
func (mkpu *MissionKeyPairUpdate) SetResult(er enums.MissionResult) *MissionKeyPairUpdate {
	mkpu.mutation.SetResult(er)
	return mkpu
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (mkpu *MissionKeyPairUpdate) SetNillableResult(er *enums.MissionResult) *MissionKeyPairUpdate {
	if er != nil {
		mkpu.SetResult(*er)
	}
	return mkpu
}

// SetDeviceID sets the "device_id" field.
func (mkpu *MissionKeyPairUpdate) SetDeviceID(i int64) *MissionKeyPairUpdate {
	mkpu.mutation.ResetDeviceID()
	mkpu.mutation.SetDeviceID(i)
	return mkpu
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (mkpu *MissionKeyPairUpdate) SetNillableDeviceID(i *int64) *MissionKeyPairUpdate {
	if i != nil {
		mkpu.SetDeviceID(*i)
	}
	return mkpu
}

// AddDeviceID adds i to the "device_id" field.
func (mkpu *MissionKeyPairUpdate) AddDeviceID(i int64) *MissionKeyPairUpdate {
	mkpu.mutation.AddDeviceID(i)
	return mkpu
}

// SetResultUrls sets the "result_urls" field.
func (mkpu *MissionKeyPairUpdate) SetResultUrls(s []string) *MissionKeyPairUpdate {
	mkpu.mutation.SetResultUrls(s)
	return mkpu
}

// AppendResultUrls appends s to the "result_urls" field.
func (mkpu *MissionKeyPairUpdate) AppendResultUrls(s []string) *MissionKeyPairUpdate {
	mkpu.mutation.AppendResultUrls(s)
	return mkpu
}

// ClearResultUrls clears the value of the "result_urls" field.
func (mkpu *MissionKeyPairUpdate) ClearResultUrls() *MissionKeyPairUpdate {
	mkpu.mutation.ClearResultUrls()
	return mkpu
}

// SetMission sets the "mission" edge to the Mission entity.
func (mkpu *MissionKeyPairUpdate) SetMission(m *Mission) *MissionKeyPairUpdate {
	return mkpu.SetMissionID(m.ID)
}

// SetKeyPair sets the "key_pair" edge to the HmacKeyPair entity.
func (mkpu *MissionKeyPairUpdate) SetKeyPair(h *HmacKeyPair) *MissionKeyPairUpdate {
	return mkpu.SetKeyPairID(h.ID)
}

// Mutation returns the MissionKeyPairMutation object of the builder.
func (mkpu *MissionKeyPairUpdate) Mutation() *MissionKeyPairMutation {
	return mkpu.mutation
}

// ClearMission clears the "mission" edge to the Mission entity.
func (mkpu *MissionKeyPairUpdate) ClearMission() *MissionKeyPairUpdate {
	mkpu.mutation.ClearMission()
	return mkpu
}

// ClearKeyPair clears the "key_pair" edge to the HmacKeyPair entity.
func (mkpu *MissionKeyPairUpdate) ClearKeyPair() *MissionKeyPairUpdate {
	mkpu.mutation.ClearKeyPair()
	return mkpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mkpu *MissionKeyPairUpdate) Save(ctx context.Context) (int, error) {
	mkpu.defaults()
	return withHooks(ctx, mkpu.sqlSave, mkpu.mutation, mkpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mkpu *MissionKeyPairUpdate) SaveX(ctx context.Context) int {
	affected, err := mkpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mkpu *MissionKeyPairUpdate) Exec(ctx context.Context) error {
	_, err := mkpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mkpu *MissionKeyPairUpdate) ExecX(ctx context.Context) {
	if err := mkpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mkpu *MissionKeyPairUpdate) defaults() {
	if _, ok := mkpu.mutation.UpdatedAt(); !ok {
		v := missionkeypair.UpdateDefaultUpdatedAt()
		mkpu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mkpu *MissionKeyPairUpdate) check() error {
	if v, ok := mkpu.mutation.Result(); ok {
		if err := missionkeypair.ResultValidator(v); err != nil {
			return &ValidationError{Name: "result", err: fmt.Errorf(`cep_ent: validator failed for field "MissionKeyPair.result": %w`, err)}
		}
	}
	if _, ok := mkpu.mutation.MissionID(); mkpu.mutation.MissionCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionKeyPair.mission"`)
	}
	if _, ok := mkpu.mutation.KeyPairID(); mkpu.mutation.KeyPairCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionKeyPair.key_pair"`)
	}
	return nil
}

func (mkpu *MissionKeyPairUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mkpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(missionkeypair.Table, missionkeypair.Columns, sqlgraph.NewFieldSpec(missionkeypair.FieldID, field.TypeInt64))
	if ps := mkpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mkpu.mutation.CreatedBy(); ok {
		_spec.SetField(missionkeypair.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mkpu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(missionkeypair.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mkpu.mutation.UpdatedBy(); ok {
		_spec.SetField(missionkeypair.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mkpu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(missionkeypair.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mkpu.mutation.UpdatedAt(); ok {
		_spec.SetField(missionkeypair.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mkpu.mutation.DeletedAt(); ok {
		_spec.SetField(missionkeypair.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := mkpu.mutation.StartedAt(); ok {
		_spec.SetField(missionkeypair.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := mkpu.mutation.FinishedAt(); ok {
		_spec.SetField(missionkeypair.FieldFinishedAt, field.TypeTime, value)
	}
	if value, ok := mkpu.mutation.Result(); ok {
		_spec.SetField(missionkeypair.FieldResult, field.TypeEnum, value)
	}
	if value, ok := mkpu.mutation.DeviceID(); ok {
		_spec.SetField(missionkeypair.FieldDeviceID, field.TypeInt64, value)
	}
	if value, ok := mkpu.mutation.AddedDeviceID(); ok {
		_spec.AddField(missionkeypair.FieldDeviceID, field.TypeInt64, value)
	}
	if value, ok := mkpu.mutation.ResultUrls(); ok {
		_spec.SetField(missionkeypair.FieldResultUrls, field.TypeJSON, value)
	}
	if value, ok := mkpu.mutation.AppendedResultUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, missionkeypair.FieldResultUrls, value)
		})
	}
	if mkpu.mutation.ResultUrlsCleared() {
		_spec.ClearField(missionkeypair.FieldResultUrls, field.TypeJSON)
	}
	if mkpu.mutation.MissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionkeypair.MissionTable,
			Columns: []string{missionkeypair.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mkpu.mutation.MissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionkeypair.MissionTable,
			Columns: []string{missionkeypair.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mkpu.mutation.KeyPairCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionkeypair.KeyPairTable,
			Columns: []string{missionkeypair.KeyPairColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hmackeypair.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mkpu.mutation.KeyPairIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionkeypair.KeyPairTable,
			Columns: []string{missionkeypair.KeyPairColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hmackeypair.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mkpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{missionkeypair.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mkpu.mutation.done = true
	return n, nil
}

// MissionKeyPairUpdateOne is the builder for updating a single MissionKeyPair entity.
type MissionKeyPairUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MissionKeyPairMutation
}

// SetCreatedBy sets the "created_by" field.
func (mkpuo *MissionKeyPairUpdateOne) SetCreatedBy(i int64) *MissionKeyPairUpdateOne {
	mkpuo.mutation.ResetCreatedBy()
	mkpuo.mutation.SetCreatedBy(i)
	return mkpuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mkpuo *MissionKeyPairUpdateOne) SetNillableCreatedBy(i *int64) *MissionKeyPairUpdateOne {
	if i != nil {
		mkpuo.SetCreatedBy(*i)
	}
	return mkpuo
}

// AddCreatedBy adds i to the "created_by" field.
func (mkpuo *MissionKeyPairUpdateOne) AddCreatedBy(i int64) *MissionKeyPairUpdateOne {
	mkpuo.mutation.AddCreatedBy(i)
	return mkpuo
}

// SetUpdatedBy sets the "updated_by" field.
func (mkpuo *MissionKeyPairUpdateOne) SetUpdatedBy(i int64) *MissionKeyPairUpdateOne {
	mkpuo.mutation.ResetUpdatedBy()
	mkpuo.mutation.SetUpdatedBy(i)
	return mkpuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mkpuo *MissionKeyPairUpdateOne) SetNillableUpdatedBy(i *int64) *MissionKeyPairUpdateOne {
	if i != nil {
		mkpuo.SetUpdatedBy(*i)
	}
	return mkpuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (mkpuo *MissionKeyPairUpdateOne) AddUpdatedBy(i int64) *MissionKeyPairUpdateOne {
	mkpuo.mutation.AddUpdatedBy(i)
	return mkpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (mkpuo *MissionKeyPairUpdateOne) SetUpdatedAt(t time.Time) *MissionKeyPairUpdateOne {
	mkpuo.mutation.SetUpdatedAt(t)
	return mkpuo
}

// SetDeletedAt sets the "deleted_at" field.
func (mkpuo *MissionKeyPairUpdateOne) SetDeletedAt(t time.Time) *MissionKeyPairUpdateOne {
	mkpuo.mutation.SetDeletedAt(t)
	return mkpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mkpuo *MissionKeyPairUpdateOne) SetNillableDeletedAt(t *time.Time) *MissionKeyPairUpdateOne {
	if t != nil {
		mkpuo.SetDeletedAt(*t)
	}
	return mkpuo
}

// SetMissionID sets the "mission_id" field.
func (mkpuo *MissionKeyPairUpdateOne) SetMissionID(i int64) *MissionKeyPairUpdateOne {
	mkpuo.mutation.SetMissionID(i)
	return mkpuo
}

// SetKeyPairID sets the "key_pair_id" field.
func (mkpuo *MissionKeyPairUpdateOne) SetKeyPairID(i int64) *MissionKeyPairUpdateOne {
	mkpuo.mutation.SetKeyPairID(i)
	return mkpuo
}

// SetStartedAt sets the "started_at" field.
func (mkpuo *MissionKeyPairUpdateOne) SetStartedAt(t time.Time) *MissionKeyPairUpdateOne {
	mkpuo.mutation.SetStartedAt(t)
	return mkpuo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (mkpuo *MissionKeyPairUpdateOne) SetNillableStartedAt(t *time.Time) *MissionKeyPairUpdateOne {
	if t != nil {
		mkpuo.SetStartedAt(*t)
	}
	return mkpuo
}

// SetFinishedAt sets the "finished_at" field.
func (mkpuo *MissionKeyPairUpdateOne) SetFinishedAt(t time.Time) *MissionKeyPairUpdateOne {
	mkpuo.mutation.SetFinishedAt(t)
	return mkpuo
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (mkpuo *MissionKeyPairUpdateOne) SetNillableFinishedAt(t *time.Time) *MissionKeyPairUpdateOne {
	if t != nil {
		mkpuo.SetFinishedAt(*t)
	}
	return mkpuo
}

// SetResult sets the "result" field.
func (mkpuo *MissionKeyPairUpdateOne) SetResult(er enums.MissionResult) *MissionKeyPairUpdateOne {
	mkpuo.mutation.SetResult(er)
	return mkpuo
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (mkpuo *MissionKeyPairUpdateOne) SetNillableResult(er *enums.MissionResult) *MissionKeyPairUpdateOne {
	if er != nil {
		mkpuo.SetResult(*er)
	}
	return mkpuo
}

// SetDeviceID sets the "device_id" field.
func (mkpuo *MissionKeyPairUpdateOne) SetDeviceID(i int64) *MissionKeyPairUpdateOne {
	mkpuo.mutation.ResetDeviceID()
	mkpuo.mutation.SetDeviceID(i)
	return mkpuo
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (mkpuo *MissionKeyPairUpdateOne) SetNillableDeviceID(i *int64) *MissionKeyPairUpdateOne {
	if i != nil {
		mkpuo.SetDeviceID(*i)
	}
	return mkpuo
}

// AddDeviceID adds i to the "device_id" field.
func (mkpuo *MissionKeyPairUpdateOne) AddDeviceID(i int64) *MissionKeyPairUpdateOne {
	mkpuo.mutation.AddDeviceID(i)
	return mkpuo
}

// SetResultUrls sets the "result_urls" field.
func (mkpuo *MissionKeyPairUpdateOne) SetResultUrls(s []string) *MissionKeyPairUpdateOne {
	mkpuo.mutation.SetResultUrls(s)
	return mkpuo
}

// AppendResultUrls appends s to the "result_urls" field.
func (mkpuo *MissionKeyPairUpdateOne) AppendResultUrls(s []string) *MissionKeyPairUpdateOne {
	mkpuo.mutation.AppendResultUrls(s)
	return mkpuo
}

// ClearResultUrls clears the value of the "result_urls" field.
func (mkpuo *MissionKeyPairUpdateOne) ClearResultUrls() *MissionKeyPairUpdateOne {
	mkpuo.mutation.ClearResultUrls()
	return mkpuo
}

// SetMission sets the "mission" edge to the Mission entity.
func (mkpuo *MissionKeyPairUpdateOne) SetMission(m *Mission) *MissionKeyPairUpdateOne {
	return mkpuo.SetMissionID(m.ID)
}

// SetKeyPair sets the "key_pair" edge to the HmacKeyPair entity.
func (mkpuo *MissionKeyPairUpdateOne) SetKeyPair(h *HmacKeyPair) *MissionKeyPairUpdateOne {
	return mkpuo.SetKeyPairID(h.ID)
}

// Mutation returns the MissionKeyPairMutation object of the builder.
func (mkpuo *MissionKeyPairUpdateOne) Mutation() *MissionKeyPairMutation {
	return mkpuo.mutation
}

// ClearMission clears the "mission" edge to the Mission entity.
func (mkpuo *MissionKeyPairUpdateOne) ClearMission() *MissionKeyPairUpdateOne {
	mkpuo.mutation.ClearMission()
	return mkpuo
}

// ClearKeyPair clears the "key_pair" edge to the HmacKeyPair entity.
func (mkpuo *MissionKeyPairUpdateOne) ClearKeyPair() *MissionKeyPairUpdateOne {
	mkpuo.mutation.ClearKeyPair()
	return mkpuo
}

// Where appends a list predicates to the MissionKeyPairUpdate builder.
func (mkpuo *MissionKeyPairUpdateOne) Where(ps ...predicate.MissionKeyPair) *MissionKeyPairUpdateOne {
	mkpuo.mutation.Where(ps...)
	return mkpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mkpuo *MissionKeyPairUpdateOne) Select(field string, fields ...string) *MissionKeyPairUpdateOne {
	mkpuo.fields = append([]string{field}, fields...)
	return mkpuo
}

// Save executes the query and returns the updated MissionKeyPair entity.
func (mkpuo *MissionKeyPairUpdateOne) Save(ctx context.Context) (*MissionKeyPair, error) {
	mkpuo.defaults()
	return withHooks(ctx, mkpuo.sqlSave, mkpuo.mutation, mkpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mkpuo *MissionKeyPairUpdateOne) SaveX(ctx context.Context) *MissionKeyPair {
	node, err := mkpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mkpuo *MissionKeyPairUpdateOne) Exec(ctx context.Context) error {
	_, err := mkpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mkpuo *MissionKeyPairUpdateOne) ExecX(ctx context.Context) {
	if err := mkpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mkpuo *MissionKeyPairUpdateOne) defaults() {
	if _, ok := mkpuo.mutation.UpdatedAt(); !ok {
		v := missionkeypair.UpdateDefaultUpdatedAt()
		mkpuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mkpuo *MissionKeyPairUpdateOne) check() error {
	if v, ok := mkpuo.mutation.Result(); ok {
		if err := missionkeypair.ResultValidator(v); err != nil {
			return &ValidationError{Name: "result", err: fmt.Errorf(`cep_ent: validator failed for field "MissionKeyPair.result": %w`, err)}
		}
	}
	if _, ok := mkpuo.mutation.MissionID(); mkpuo.mutation.MissionCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionKeyPair.mission"`)
	}
	if _, ok := mkpuo.mutation.KeyPairID(); mkpuo.mutation.KeyPairCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionKeyPair.key_pair"`)
	}
	return nil
}

func (mkpuo *MissionKeyPairUpdateOne) sqlSave(ctx context.Context) (_node *MissionKeyPair, err error) {
	if err := mkpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(missionkeypair.Table, missionkeypair.Columns, sqlgraph.NewFieldSpec(missionkeypair.FieldID, field.TypeInt64))
	id, ok := mkpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "MissionKeyPair.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mkpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, missionkeypair.FieldID)
		for _, f := range fields {
			if !missionkeypair.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != missionkeypair.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mkpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mkpuo.mutation.CreatedBy(); ok {
		_spec.SetField(missionkeypair.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mkpuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(missionkeypair.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mkpuo.mutation.UpdatedBy(); ok {
		_spec.SetField(missionkeypair.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mkpuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(missionkeypair.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mkpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(missionkeypair.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mkpuo.mutation.DeletedAt(); ok {
		_spec.SetField(missionkeypair.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := mkpuo.mutation.StartedAt(); ok {
		_spec.SetField(missionkeypair.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := mkpuo.mutation.FinishedAt(); ok {
		_spec.SetField(missionkeypair.FieldFinishedAt, field.TypeTime, value)
	}
	if value, ok := mkpuo.mutation.Result(); ok {
		_spec.SetField(missionkeypair.FieldResult, field.TypeEnum, value)
	}
	if value, ok := mkpuo.mutation.DeviceID(); ok {
		_spec.SetField(missionkeypair.FieldDeviceID, field.TypeInt64, value)
	}
	if value, ok := mkpuo.mutation.AddedDeviceID(); ok {
		_spec.AddField(missionkeypair.FieldDeviceID, field.TypeInt64, value)
	}
	if value, ok := mkpuo.mutation.ResultUrls(); ok {
		_spec.SetField(missionkeypair.FieldResultUrls, field.TypeJSON, value)
	}
	if value, ok := mkpuo.mutation.AppendedResultUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, missionkeypair.FieldResultUrls, value)
		})
	}
	if mkpuo.mutation.ResultUrlsCleared() {
		_spec.ClearField(missionkeypair.FieldResultUrls, field.TypeJSON)
	}
	if mkpuo.mutation.MissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionkeypair.MissionTable,
			Columns: []string{missionkeypair.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mkpuo.mutation.MissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionkeypair.MissionTable,
			Columns: []string{missionkeypair.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mkpuo.mutation.KeyPairCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionkeypair.KeyPairTable,
			Columns: []string{missionkeypair.KeyPairColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hmackeypair.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mkpuo.mutation.KeyPairIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionkeypair.KeyPairTable,
			Columns: []string{missionkeypair.KeyPairColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hmackeypair.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MissionKeyPair{config: mkpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mkpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{missionkeypair.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mkpuo.mutation.done = true
	return _node, nil
}
