// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/campaignorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/collect"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/costaccount"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/costbill"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/device"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/earnbill"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/invite"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionbatch"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionconsumeorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionproduceorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/profitaccount"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/profitsetting"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/rechargeorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/userdevice"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/vxaccount"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/vxsocial"
)

// UserQuery is the builder for querying User entities.
type UserQuery struct {
	config
	ctx                      *QueryContext
	order                    []user.OrderOption
	inters                   []Interceptor
	predicates               []predicate.User
	withVxAccounts           *VXAccountQuery
	withCollects             *CollectQuery
	withDevices              *DeviceQuery
	withProfitSettings       *ProfitSettingQuery
	withCostAccount          *CostAccountQuery
	withProfitAccount        *ProfitAccountQuery
	withCostBills            *CostBillQuery
	withEarnBills            *EarnBillQuery
	withMissionConsumeOrders *MissionConsumeOrderQuery
	withMissionProduceOrders *MissionProduceOrderQuery
	withRechargeOrders       *RechargeOrderQuery
	withVxSocials            *VXSocialQuery
	withMissionBatches       *MissionBatchQuery
	withUserDevices          *UserDeviceQuery
	withParent               *UserQuery
	withChildren             *UserQuery
	withInvites              *InviteQuery
	withCampaignOrders       *CampaignOrderQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserQuery builder.
func (uq *UserQuery) Where(ps ...predicate.User) *UserQuery {
	uq.predicates = append(uq.predicates, ps...)
	return uq
}

// Limit the number of records to be returned by this query.
func (uq *UserQuery) Limit(limit int) *UserQuery {
	uq.ctx.Limit = &limit
	return uq
}

// Offset to start from.
func (uq *UserQuery) Offset(offset int) *UserQuery {
	uq.ctx.Offset = &offset
	return uq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (uq *UserQuery) Unique(unique bool) *UserQuery {
	uq.ctx.Unique = &unique
	return uq
}

// Order specifies how the records should be ordered.
func (uq *UserQuery) Order(o ...user.OrderOption) *UserQuery {
	uq.order = append(uq.order, o...)
	return uq
}

// QueryVxAccounts chains the current query on the "vx_accounts" edge.
func (uq *UserQuery) QueryVxAccounts() *VXAccountQuery {
	query := (&VXAccountClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(vxaccount.Table, vxaccount.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.VxAccountsTable, user.VxAccountsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCollects chains the current query on the "collects" edge.
func (uq *UserQuery) QueryCollects() *CollectQuery {
	query := (&CollectClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(collect.Table, collect.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CollectsTable, user.CollectsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDevices chains the current query on the "devices" edge.
func (uq *UserQuery) QueryDevices() *DeviceQuery {
	query := (&DeviceClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(device.Table, device.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.DevicesTable, user.DevicesColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProfitSettings chains the current query on the "profit_settings" edge.
func (uq *UserQuery) QueryProfitSettings() *ProfitSettingQuery {
	query := (&ProfitSettingClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(profitsetting.Table, profitsetting.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ProfitSettingsTable, user.ProfitSettingsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCostAccount chains the current query on the "cost_account" edge.
func (uq *UserQuery) QueryCostAccount() *CostAccountQuery {
	query := (&CostAccountClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(costaccount.Table, costaccount.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.CostAccountTable, user.CostAccountColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProfitAccount chains the current query on the "profit_account" edge.
func (uq *UserQuery) QueryProfitAccount() *ProfitAccountQuery {
	query := (&ProfitAccountClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(profitaccount.Table, profitaccount.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.ProfitAccountTable, user.ProfitAccountColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCostBills chains the current query on the "cost_bills" edge.
func (uq *UserQuery) QueryCostBills() *CostBillQuery {
	query := (&CostBillClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(costbill.Table, costbill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CostBillsTable, user.CostBillsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEarnBills chains the current query on the "earn_bills" edge.
func (uq *UserQuery) QueryEarnBills() *EarnBillQuery {
	query := (&EarnBillClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(earnbill.Table, earnbill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.EarnBillsTable, user.EarnBillsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMissionConsumeOrders chains the current query on the "mission_consume_orders" edge.
func (uq *UserQuery) QueryMissionConsumeOrders() *MissionConsumeOrderQuery {
	query := (&MissionConsumeOrderClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(missionconsumeorder.Table, missionconsumeorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.MissionConsumeOrdersTable, user.MissionConsumeOrdersColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMissionProduceOrders chains the current query on the "mission_produce_orders" edge.
func (uq *UserQuery) QueryMissionProduceOrders() *MissionProduceOrderQuery {
	query := (&MissionProduceOrderClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(missionproduceorder.Table, missionproduceorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.MissionProduceOrdersTable, user.MissionProduceOrdersColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRechargeOrders chains the current query on the "recharge_orders" edge.
func (uq *UserQuery) QueryRechargeOrders() *RechargeOrderQuery {
	query := (&RechargeOrderClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(rechargeorder.Table, rechargeorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.RechargeOrdersTable, user.RechargeOrdersColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryVxSocials chains the current query on the "vx_socials" edge.
func (uq *UserQuery) QueryVxSocials() *VXSocialQuery {
	query := (&VXSocialClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(vxsocial.Table, vxsocial.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.VxSocialsTable, user.VxSocialsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMissionBatches chains the current query on the "mission_batches" edge.
func (uq *UserQuery) QueryMissionBatches() *MissionBatchQuery {
	query := (&MissionBatchClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(missionbatch.Table, missionbatch.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.MissionBatchesTable, user.MissionBatchesColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserDevices chains the current query on the "user_devices" edge.
func (uq *UserQuery) QueryUserDevices() *UserDeviceQuery {
	query := (&UserDeviceClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(userdevice.Table, userdevice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserDevicesTable, user.UserDevicesColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParent chains the current query on the "parent" edge.
func (uq *UserQuery) QueryParent() *UserQuery {
	query := (&UserClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.ParentTable, user.ParentColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChildren chains the current query on the "children" edge.
func (uq *UserQuery) QueryChildren() *UserQuery {
	query := (&UserClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ChildrenTable, user.ChildrenColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInvites chains the current query on the "invites" edge.
func (uq *UserQuery) QueryInvites() *InviteQuery {
	query := (&InviteClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(invite.Table, invite.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.InvitesTable, user.InvitesColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCampaignOrders chains the current query on the "campaign_orders" edge.
func (uq *UserQuery) QueryCampaignOrders() *CampaignOrderQuery {
	query := (&CampaignOrderClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(campaignorder.Table, campaignorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CampaignOrdersTable, user.CampaignOrdersColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first User entity from the query.
// Returns a *NotFoundError when no User was found.
func (uq *UserQuery) First(ctx context.Context) (*User, error) {
	nodes, err := uq.Limit(1).All(setContextOp(ctx, uq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{user.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (uq *UserQuery) FirstX(ctx context.Context) *User {
	node, err := uq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first User ID from the query.
// Returns a *NotFoundError when no User ID was found.
func (uq *UserQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = uq.Limit(1).IDs(setContextOp(ctx, uq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{user.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (uq *UserQuery) FirstIDX(ctx context.Context) int64 {
	id, err := uq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single User entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one User entity is found.
// Returns a *NotFoundError when no User entities are found.
func (uq *UserQuery) Only(ctx context.Context) (*User, error) {
	nodes, err := uq.Limit(2).All(setContextOp(ctx, uq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{user.Label}
	default:
		return nil, &NotSingularError{user.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (uq *UserQuery) OnlyX(ctx context.Context) *User {
	node, err := uq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only User ID in the query.
// Returns a *NotSingularError when more than one User ID is found.
// Returns a *NotFoundError when no entities are found.
func (uq *UserQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = uq.Limit(2).IDs(setContextOp(ctx, uq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{user.Label}
	default:
		err = &NotSingularError{user.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (uq *UserQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := uq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Users.
func (uq *UserQuery) All(ctx context.Context) ([]*User, error) {
	ctx = setContextOp(ctx, uq.ctx, "All")
	if err := uq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*User, *UserQuery]()
	return withInterceptors[[]*User](ctx, uq, qr, uq.inters)
}

// AllX is like All, but panics if an error occurs.
func (uq *UserQuery) AllX(ctx context.Context) []*User {
	nodes, err := uq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of User IDs.
func (uq *UserQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if uq.ctx.Unique == nil && uq.path != nil {
		uq.Unique(true)
	}
	ctx = setContextOp(ctx, uq.ctx, "IDs")
	if err = uq.Select(user.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (uq *UserQuery) IDsX(ctx context.Context) []int64 {
	ids, err := uq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (uq *UserQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, uq.ctx, "Count")
	if err := uq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, uq, querierCount[*UserQuery](), uq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (uq *UserQuery) CountX(ctx context.Context) int {
	count, err := uq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (uq *UserQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, uq.ctx, "Exist")
	switch _, err := uq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("cep_ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (uq *UserQuery) ExistX(ctx context.Context) bool {
	exist, err := uq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (uq *UserQuery) Clone() *UserQuery {
	if uq == nil {
		return nil
	}
	return &UserQuery{
		config:                   uq.config,
		ctx:                      uq.ctx.Clone(),
		order:                    append([]user.OrderOption{}, uq.order...),
		inters:                   append([]Interceptor{}, uq.inters...),
		predicates:               append([]predicate.User{}, uq.predicates...),
		withVxAccounts:           uq.withVxAccounts.Clone(),
		withCollects:             uq.withCollects.Clone(),
		withDevices:              uq.withDevices.Clone(),
		withProfitSettings:       uq.withProfitSettings.Clone(),
		withCostAccount:          uq.withCostAccount.Clone(),
		withProfitAccount:        uq.withProfitAccount.Clone(),
		withCostBills:            uq.withCostBills.Clone(),
		withEarnBills:            uq.withEarnBills.Clone(),
		withMissionConsumeOrders: uq.withMissionConsumeOrders.Clone(),
		withMissionProduceOrders: uq.withMissionProduceOrders.Clone(),
		withRechargeOrders:       uq.withRechargeOrders.Clone(),
		withVxSocials:            uq.withVxSocials.Clone(),
		withMissionBatches:       uq.withMissionBatches.Clone(),
		withUserDevices:          uq.withUserDevices.Clone(),
		withParent:               uq.withParent.Clone(),
		withChildren:             uq.withChildren.Clone(),
		withInvites:              uq.withInvites.Clone(),
		withCampaignOrders:       uq.withCampaignOrders.Clone(),
		// clone intermediate query.
		sql:  uq.sql.Clone(),
		path: uq.path,
	}
}

// WithVxAccounts tells the query-builder to eager-load the nodes that are connected to
// the "vx_accounts" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithVxAccounts(opts ...func(*VXAccountQuery)) *UserQuery {
	query := (&VXAccountClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withVxAccounts = query
	return uq
}

// WithCollects tells the query-builder to eager-load the nodes that are connected to
// the "collects" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithCollects(opts ...func(*CollectQuery)) *UserQuery {
	query := (&CollectClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withCollects = query
	return uq
}

// WithDevices tells the query-builder to eager-load the nodes that are connected to
// the "devices" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithDevices(opts ...func(*DeviceQuery)) *UserQuery {
	query := (&DeviceClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withDevices = query
	return uq
}

// WithProfitSettings tells the query-builder to eager-load the nodes that are connected to
// the "profit_settings" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithProfitSettings(opts ...func(*ProfitSettingQuery)) *UserQuery {
	query := (&ProfitSettingClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withProfitSettings = query
	return uq
}

// WithCostAccount tells the query-builder to eager-load the nodes that are connected to
// the "cost_account" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithCostAccount(opts ...func(*CostAccountQuery)) *UserQuery {
	query := (&CostAccountClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withCostAccount = query
	return uq
}

// WithProfitAccount tells the query-builder to eager-load the nodes that are connected to
// the "profit_account" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithProfitAccount(opts ...func(*ProfitAccountQuery)) *UserQuery {
	query := (&ProfitAccountClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withProfitAccount = query
	return uq
}

// WithCostBills tells the query-builder to eager-load the nodes that are connected to
// the "cost_bills" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithCostBills(opts ...func(*CostBillQuery)) *UserQuery {
	query := (&CostBillClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withCostBills = query
	return uq
}

// WithEarnBills tells the query-builder to eager-load the nodes that are connected to
// the "earn_bills" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithEarnBills(opts ...func(*EarnBillQuery)) *UserQuery {
	query := (&EarnBillClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withEarnBills = query
	return uq
}

// WithMissionConsumeOrders tells the query-builder to eager-load the nodes that are connected to
// the "mission_consume_orders" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithMissionConsumeOrders(opts ...func(*MissionConsumeOrderQuery)) *UserQuery {
	query := (&MissionConsumeOrderClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withMissionConsumeOrders = query
	return uq
}

// WithMissionProduceOrders tells the query-builder to eager-load the nodes that are connected to
// the "mission_produce_orders" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithMissionProduceOrders(opts ...func(*MissionProduceOrderQuery)) *UserQuery {
	query := (&MissionProduceOrderClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withMissionProduceOrders = query
	return uq
}

// WithRechargeOrders tells the query-builder to eager-load the nodes that are connected to
// the "recharge_orders" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithRechargeOrders(opts ...func(*RechargeOrderQuery)) *UserQuery {
	query := (&RechargeOrderClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withRechargeOrders = query
	return uq
}

// WithVxSocials tells the query-builder to eager-load the nodes that are connected to
// the "vx_socials" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithVxSocials(opts ...func(*VXSocialQuery)) *UserQuery {
	query := (&VXSocialClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withVxSocials = query
	return uq
}

// WithMissionBatches tells the query-builder to eager-load the nodes that are connected to
// the "mission_batches" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithMissionBatches(opts ...func(*MissionBatchQuery)) *UserQuery {
	query := (&MissionBatchClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withMissionBatches = query
	return uq
}

// WithUserDevices tells the query-builder to eager-load the nodes that are connected to
// the "user_devices" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithUserDevices(opts ...func(*UserDeviceQuery)) *UserQuery {
	query := (&UserDeviceClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withUserDevices = query
	return uq
}

// WithParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithParent(opts ...func(*UserQuery)) *UserQuery {
	query := (&UserClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withParent = query
	return uq
}

// WithChildren tells the query-builder to eager-load the nodes that are connected to
// the "children" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithChildren(opts ...func(*UserQuery)) *UserQuery {
	query := (&UserClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withChildren = query
	return uq
}

// WithInvites tells the query-builder to eager-load the nodes that are connected to
// the "invites" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithInvites(opts ...func(*InviteQuery)) *UserQuery {
	query := (&InviteClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withInvites = query
	return uq
}

// WithCampaignOrders tells the query-builder to eager-load the nodes that are connected to
// the "campaign_orders" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithCampaignOrders(opts ...func(*CampaignOrderQuery)) *UserQuery {
	query := (&CampaignOrderClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withCampaignOrders = query
	return uq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.User.Query().
//		GroupBy(user.FieldCreatedBy).
//		Aggregate(cep_ent.Count()).
//		Scan(ctx, &v)
func (uq *UserQuery) GroupBy(field string, fields ...string) *UserGroupBy {
	uq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserGroupBy{build: uq}
	grbuild.flds = &uq.ctx.Fields
	grbuild.label = user.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by"`
//	}
//
//	client.User.Query().
//		Select(user.FieldCreatedBy).
//		Scan(ctx, &v)
func (uq *UserQuery) Select(fields ...string) *UserSelect {
	uq.ctx.Fields = append(uq.ctx.Fields, fields...)
	sbuild := &UserSelect{UserQuery: uq}
	sbuild.label = user.Label
	sbuild.flds, sbuild.scan = &uq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserSelect configured with the given aggregations.
func (uq *UserQuery) Aggregate(fns ...AggregateFunc) *UserSelect {
	return uq.Select().Aggregate(fns...)
}

func (uq *UserQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range uq.inters {
		if inter == nil {
			return fmt.Errorf("cep_ent: uninitialized interceptor (forgotten import cep_ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, uq); err != nil {
				return err
			}
		}
	}
	for _, f := range uq.ctx.Fields {
		if !user.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
		}
	}
	if uq.path != nil {
		prev, err := uq.path(ctx)
		if err != nil {
			return err
		}
		uq.sql = prev
	}
	return nil
}

func (uq *UserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*User, error) {
	var (
		nodes       = []*User{}
		_spec       = uq.querySpec()
		loadedTypes = [18]bool{
			uq.withVxAccounts != nil,
			uq.withCollects != nil,
			uq.withDevices != nil,
			uq.withProfitSettings != nil,
			uq.withCostAccount != nil,
			uq.withProfitAccount != nil,
			uq.withCostBills != nil,
			uq.withEarnBills != nil,
			uq.withMissionConsumeOrders != nil,
			uq.withMissionProduceOrders != nil,
			uq.withRechargeOrders != nil,
			uq.withVxSocials != nil,
			uq.withMissionBatches != nil,
			uq.withUserDevices != nil,
			uq.withParent != nil,
			uq.withChildren != nil,
			uq.withInvites != nil,
			uq.withCampaignOrders != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*User).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &User{config: uq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, uq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := uq.withVxAccounts; query != nil {
		if err := uq.loadVxAccounts(ctx, query, nodes,
			func(n *User) { n.Edges.VxAccounts = []*VXAccount{} },
			func(n *User, e *VXAccount) { n.Edges.VxAccounts = append(n.Edges.VxAccounts, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withCollects; query != nil {
		if err := uq.loadCollects(ctx, query, nodes,
			func(n *User) { n.Edges.Collects = []*Collect{} },
			func(n *User, e *Collect) { n.Edges.Collects = append(n.Edges.Collects, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withDevices; query != nil {
		if err := uq.loadDevices(ctx, query, nodes,
			func(n *User) { n.Edges.Devices = []*Device{} },
			func(n *User, e *Device) { n.Edges.Devices = append(n.Edges.Devices, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withProfitSettings; query != nil {
		if err := uq.loadProfitSettings(ctx, query, nodes,
			func(n *User) { n.Edges.ProfitSettings = []*ProfitSetting{} },
			func(n *User, e *ProfitSetting) { n.Edges.ProfitSettings = append(n.Edges.ProfitSettings, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withCostAccount; query != nil {
		if err := uq.loadCostAccount(ctx, query, nodes, nil,
			func(n *User, e *CostAccount) { n.Edges.CostAccount = e }); err != nil {
			return nil, err
		}
	}
	if query := uq.withProfitAccount; query != nil {
		if err := uq.loadProfitAccount(ctx, query, nodes, nil,
			func(n *User, e *ProfitAccount) { n.Edges.ProfitAccount = e }); err != nil {
			return nil, err
		}
	}
	if query := uq.withCostBills; query != nil {
		if err := uq.loadCostBills(ctx, query, nodes,
			func(n *User) { n.Edges.CostBills = []*CostBill{} },
			func(n *User, e *CostBill) { n.Edges.CostBills = append(n.Edges.CostBills, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withEarnBills; query != nil {
		if err := uq.loadEarnBills(ctx, query, nodes,
			func(n *User) { n.Edges.EarnBills = []*EarnBill{} },
			func(n *User, e *EarnBill) { n.Edges.EarnBills = append(n.Edges.EarnBills, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withMissionConsumeOrders; query != nil {
		if err := uq.loadMissionConsumeOrders(ctx, query, nodes,
			func(n *User) { n.Edges.MissionConsumeOrders = []*MissionConsumeOrder{} },
			func(n *User, e *MissionConsumeOrder) {
				n.Edges.MissionConsumeOrders = append(n.Edges.MissionConsumeOrders, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := uq.withMissionProduceOrders; query != nil {
		if err := uq.loadMissionProduceOrders(ctx, query, nodes,
			func(n *User) { n.Edges.MissionProduceOrders = []*MissionProduceOrder{} },
			func(n *User, e *MissionProduceOrder) {
				n.Edges.MissionProduceOrders = append(n.Edges.MissionProduceOrders, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := uq.withRechargeOrders; query != nil {
		if err := uq.loadRechargeOrders(ctx, query, nodes,
			func(n *User) { n.Edges.RechargeOrders = []*RechargeOrder{} },
			func(n *User, e *RechargeOrder) { n.Edges.RechargeOrders = append(n.Edges.RechargeOrders, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withVxSocials; query != nil {
		if err := uq.loadVxSocials(ctx, query, nodes,
			func(n *User) { n.Edges.VxSocials = []*VXSocial{} },
			func(n *User, e *VXSocial) { n.Edges.VxSocials = append(n.Edges.VxSocials, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withMissionBatches; query != nil {
		if err := uq.loadMissionBatches(ctx, query, nodes,
			func(n *User) { n.Edges.MissionBatches = []*MissionBatch{} },
			func(n *User, e *MissionBatch) { n.Edges.MissionBatches = append(n.Edges.MissionBatches, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withUserDevices; query != nil {
		if err := uq.loadUserDevices(ctx, query, nodes,
			func(n *User) { n.Edges.UserDevices = []*UserDevice{} },
			func(n *User, e *UserDevice) { n.Edges.UserDevices = append(n.Edges.UserDevices, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withParent; query != nil {
		if err := uq.loadParent(ctx, query, nodes, nil,
			func(n *User, e *User) { n.Edges.Parent = e }); err != nil {
			return nil, err
		}
	}
	if query := uq.withChildren; query != nil {
		if err := uq.loadChildren(ctx, query, nodes,
			func(n *User) { n.Edges.Children = []*User{} },
			func(n *User, e *User) { n.Edges.Children = append(n.Edges.Children, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withInvites; query != nil {
		if err := uq.loadInvites(ctx, query, nodes,
			func(n *User) { n.Edges.Invites = []*Invite{} },
			func(n *User, e *Invite) { n.Edges.Invites = append(n.Edges.Invites, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withCampaignOrders; query != nil {
		if err := uq.loadCampaignOrders(ctx, query, nodes,
			func(n *User) { n.Edges.CampaignOrders = []*CampaignOrder{} },
			func(n *User, e *CampaignOrder) { n.Edges.CampaignOrders = append(n.Edges.CampaignOrders, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (uq *UserQuery) loadVxAccounts(ctx context.Context, query *VXAccountQuery, nodes []*User, init func(*User), assign func(*User, *VXAccount)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(vxaccount.FieldUserID)
	}
	query.Where(predicate.VXAccount(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.VxAccountsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadCollects(ctx context.Context, query *CollectQuery, nodes []*User, init func(*User), assign func(*User, *Collect)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(collect.FieldUserID)
	}
	query.Where(predicate.Collect(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.CollectsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadDevices(ctx context.Context, query *DeviceQuery, nodes []*User, init func(*User), assign func(*User, *Device)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(device.FieldUserID)
	}
	query.Where(predicate.Device(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.DevicesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadProfitSettings(ctx context.Context, query *ProfitSettingQuery, nodes []*User, init func(*User), assign func(*User, *ProfitSetting)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(profitsetting.FieldUserID)
	}
	query.Where(predicate.ProfitSetting(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.ProfitSettingsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadCostAccount(ctx context.Context, query *CostAccountQuery, nodes []*User, init func(*User), assign func(*User, *CostAccount)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(costaccount.FieldUserID)
	}
	query.Where(predicate.CostAccount(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.CostAccountColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadProfitAccount(ctx context.Context, query *ProfitAccountQuery, nodes []*User, init func(*User), assign func(*User, *ProfitAccount)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(profitaccount.FieldUserID)
	}
	query.Where(predicate.ProfitAccount(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.ProfitAccountColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadCostBills(ctx context.Context, query *CostBillQuery, nodes []*User, init func(*User), assign func(*User, *CostBill)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(costbill.FieldUserID)
	}
	query.Where(predicate.CostBill(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.CostBillsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadEarnBills(ctx context.Context, query *EarnBillQuery, nodes []*User, init func(*User), assign func(*User, *EarnBill)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(earnbill.FieldUserID)
	}
	query.Where(predicate.EarnBill(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.EarnBillsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadMissionConsumeOrders(ctx context.Context, query *MissionConsumeOrderQuery, nodes []*User, init func(*User), assign func(*User, *MissionConsumeOrder)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(missionconsumeorder.FieldUserID)
	}
	query.Where(predicate.MissionConsumeOrder(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.MissionConsumeOrdersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadMissionProduceOrders(ctx context.Context, query *MissionProduceOrderQuery, nodes []*User, init func(*User), assign func(*User, *MissionProduceOrder)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(missionproduceorder.FieldUserID)
	}
	query.Where(predicate.MissionProduceOrder(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.MissionProduceOrdersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadRechargeOrders(ctx context.Context, query *RechargeOrderQuery, nodes []*User, init func(*User), assign func(*User, *RechargeOrder)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(rechargeorder.FieldUserID)
	}
	query.Where(predicate.RechargeOrder(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.RechargeOrdersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadVxSocials(ctx context.Context, query *VXSocialQuery, nodes []*User, init func(*User), assign func(*User, *VXSocial)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(vxsocial.FieldUserID)
	}
	query.Where(predicate.VXSocial(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.VxSocialsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadMissionBatches(ctx context.Context, query *MissionBatchQuery, nodes []*User, init func(*User), assign func(*User, *MissionBatch)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(missionbatch.FieldUserID)
	}
	query.Where(predicate.MissionBatch(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.MissionBatchesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadUserDevices(ctx context.Context, query *UserDeviceQuery, nodes []*User, init func(*User), assign func(*User, *UserDevice)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(userdevice.FieldUserID)
	}
	query.Where(predicate.UserDevice(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.UserDevicesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadParent(ctx context.Context, query *UserQuery, nodes []*User, init func(*User), assign func(*User, *User)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*User)
	for i := range nodes {
		fk := nodes[i].ParentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "parent_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (uq *UserQuery) loadChildren(ctx context.Context, query *UserQuery, nodes []*User, init func(*User), assign func(*User, *User)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(user.FieldParentID)
	}
	query.Where(predicate.User(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.ChildrenColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ParentID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "parent_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadInvites(ctx context.Context, query *InviteQuery, nodes []*User, init func(*User), assign func(*User, *Invite)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(invite.FieldUserID)
	}
	query.Where(predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.InvitesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadCampaignOrders(ctx context.Context, query *CampaignOrderQuery, nodes []*User, init func(*User), assign func(*User, *CampaignOrder)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(campaignorder.FieldUserID)
	}
	query.Where(predicate.CampaignOrder(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.CampaignOrdersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (uq *UserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := uq.querySpec()
	_spec.Node.Columns = uq.ctx.Fields
	if len(uq.ctx.Fields) > 0 {
		_spec.Unique = uq.ctx.Unique != nil && *uq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, uq.driver, _spec)
}

func (uq *UserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64))
	_spec.From = uq.sql
	if unique := uq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if uq.path != nil {
		_spec.Unique = true
	}
	if fields := uq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for i := range fields {
			if fields[i] != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if uq.withParent != nil {
			_spec.Node.AddColumnOnce(user.FieldParentID)
		}
	}
	if ps := uq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := uq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := uq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := uq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (uq *UserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(uq.driver.Dialect())
	t1 := builder.Table(user.Table)
	columns := uq.ctx.Fields
	if len(columns) == 0 {
		columns = user.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if uq.sql != nil {
		selector = uq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if uq.ctx.Unique != nil && *uq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range uq.predicates {
		p(selector)
	}
	for _, p := range uq.order {
		p(selector)
	}
	if offset := uq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := uq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserGroupBy is the group-by builder for User entities.
type UserGroupBy struct {
	selector
	build *UserQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ugb *UserGroupBy) Aggregate(fns ...AggregateFunc) *UserGroupBy {
	ugb.fns = append(ugb.fns, fns...)
	return ugb
}

// Scan applies the selector query and scans the result into the given value.
func (ugb *UserGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ugb.build.ctx, "GroupBy")
	if err := ugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserQuery, *UserGroupBy](ctx, ugb.build, ugb, ugb.build.inters, v)
}

func (ugb *UserGroupBy) sqlScan(ctx context.Context, root *UserQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ugb.fns))
	for _, fn := range ugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ugb.flds)+len(ugb.fns))
		for _, f := range *ugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserSelect is the builder for selecting fields of User entities.
type UserSelect struct {
	*UserQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (us *UserSelect) Aggregate(fns ...AggregateFunc) *UserSelect {
	us.fns = append(us.fns, fns...)
	return us
}

// Scan applies the selector query and scans the result into the given value.
func (us *UserSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, us.ctx, "Select")
	if err := us.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserQuery, *UserSelect](ctx, us.UserQuery, us, us.inters, v)
}

func (us *UserSelect) sqlScan(ctx context.Context, root *UserQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(us.fns))
	for _, fn := range us.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*us.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := us.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
