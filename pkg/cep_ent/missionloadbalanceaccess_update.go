// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionloadbalanceaccess"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// MissionLoadBalanceAccessUpdate is the builder for updating MissionLoadBalanceAccess entities.
type MissionLoadBalanceAccessUpdate struct {
	config
	hooks     []Hook
	mutation  *MissionLoadBalanceAccessMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MissionLoadBalanceAccessUpdate builder.
func (mlbau *MissionLoadBalanceAccessUpdate) Where(ps ...predicate.MissionLoadBalanceAccess) *MissionLoadBalanceAccessUpdate {
	mlbau.mutation.Where(ps...)
	return mlbau
}

// SetCreatedBy sets the "created_by" field.
func (mlbau *MissionLoadBalanceAccessUpdate) SetCreatedBy(i int64) *MissionLoadBalanceAccessUpdate {
	mlbau.mutation.ResetCreatedBy()
	mlbau.mutation.SetCreatedBy(i)
	return mlbau
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mlbau *MissionLoadBalanceAccessUpdate) SetNillableCreatedBy(i *int64) *MissionLoadBalanceAccessUpdate {
	if i != nil {
		mlbau.SetCreatedBy(*i)
	}
	return mlbau
}

// AddCreatedBy adds i to the "created_by" field.
func (mlbau *MissionLoadBalanceAccessUpdate) AddCreatedBy(i int64) *MissionLoadBalanceAccessUpdate {
	mlbau.mutation.AddCreatedBy(i)
	return mlbau
}

// SetUpdatedBy sets the "updated_by" field.
func (mlbau *MissionLoadBalanceAccessUpdate) SetUpdatedBy(i int64) *MissionLoadBalanceAccessUpdate {
	mlbau.mutation.ResetUpdatedBy()
	mlbau.mutation.SetUpdatedBy(i)
	return mlbau
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mlbau *MissionLoadBalanceAccessUpdate) SetNillableUpdatedBy(i *int64) *MissionLoadBalanceAccessUpdate {
	if i != nil {
		mlbau.SetUpdatedBy(*i)
	}
	return mlbau
}

// AddUpdatedBy adds i to the "updated_by" field.
func (mlbau *MissionLoadBalanceAccessUpdate) AddUpdatedBy(i int64) *MissionLoadBalanceAccessUpdate {
	mlbau.mutation.AddUpdatedBy(i)
	return mlbau
}

// SetUpdatedAt sets the "updated_at" field.
func (mlbau *MissionLoadBalanceAccessUpdate) SetUpdatedAt(t time.Time) *MissionLoadBalanceAccessUpdate {
	mlbau.mutation.SetUpdatedAt(t)
	return mlbau
}

// SetDeletedAt sets the "deleted_at" field.
func (mlbau *MissionLoadBalanceAccessUpdate) SetDeletedAt(t time.Time) *MissionLoadBalanceAccessUpdate {
	mlbau.mutation.SetDeletedAt(t)
	return mlbau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mlbau *MissionLoadBalanceAccessUpdate) SetNillableDeletedAt(t *time.Time) *MissionLoadBalanceAccessUpdate {
	if t != nil {
		mlbau.SetDeletedAt(*t)
	}
	return mlbau
}

// SetMissionID sets the "mission_id" field.
func (mlbau *MissionLoadBalanceAccessUpdate) SetMissionID(i int64) *MissionLoadBalanceAccessUpdate {
	mlbau.mutation.ResetMissionID()
	mlbau.mutation.SetMissionID(i)
	return mlbau
}

// AddMissionID adds i to the "mission_id" field.
func (mlbau *MissionLoadBalanceAccessUpdate) AddMissionID(i int64) *MissionLoadBalanceAccessUpdate {
	mlbau.mutation.AddMissionID(i)
	return mlbau
}

// SetMissionLoadBalanceID sets the "mission_load_balance_id" field.
func (mlbau *MissionLoadBalanceAccessUpdate) SetMissionLoadBalanceID(i int64) *MissionLoadBalanceAccessUpdate {
	mlbau.mutation.ResetMissionLoadBalanceID()
	mlbau.mutation.SetMissionLoadBalanceID(i)
	return mlbau
}

// AddMissionLoadBalanceID adds i to the "mission_load_balance_id" field.
func (mlbau *MissionLoadBalanceAccessUpdate) AddMissionLoadBalanceID(i int64) *MissionLoadBalanceAccessUpdate {
	mlbau.mutation.AddMissionLoadBalanceID(i)
	return mlbau
}

// SetLastAccess sets the "last_access" field.
func (mlbau *MissionLoadBalanceAccessUpdate) SetLastAccess(t time.Time) *MissionLoadBalanceAccessUpdate {
	mlbau.mutation.SetLastAccess(t)
	return mlbau
}

// SetNillableLastAccess sets the "last_access" field if the given value is not nil.
func (mlbau *MissionLoadBalanceAccessUpdate) SetNillableLastAccess(t *time.Time) *MissionLoadBalanceAccessUpdate {
	if t != nil {
		mlbau.SetLastAccess(*t)
	}
	return mlbau
}

// SetAccessCount sets the "access_count" field.
func (mlbau *MissionLoadBalanceAccessUpdate) SetAccessCount(i int32) *MissionLoadBalanceAccessUpdate {
	mlbau.mutation.ResetAccessCount()
	mlbau.mutation.SetAccessCount(i)
	return mlbau
}

// SetNillableAccessCount sets the "access_count" field if the given value is not nil.
func (mlbau *MissionLoadBalanceAccessUpdate) SetNillableAccessCount(i *int32) *MissionLoadBalanceAccessUpdate {
	if i != nil {
		mlbau.SetAccessCount(*i)
	}
	return mlbau
}

// AddAccessCount adds i to the "access_count" field.
func (mlbau *MissionLoadBalanceAccessUpdate) AddAccessCount(i int32) *MissionLoadBalanceAccessUpdate {
	mlbau.mutation.AddAccessCount(i)
	return mlbau
}

// Mutation returns the MissionLoadBalanceAccessMutation object of the builder.
func (mlbau *MissionLoadBalanceAccessUpdate) Mutation() *MissionLoadBalanceAccessMutation {
	return mlbau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mlbau *MissionLoadBalanceAccessUpdate) Save(ctx context.Context) (int, error) {
	mlbau.defaults()
	return withHooks(ctx, mlbau.sqlSave, mlbau.mutation, mlbau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mlbau *MissionLoadBalanceAccessUpdate) SaveX(ctx context.Context) int {
	affected, err := mlbau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mlbau *MissionLoadBalanceAccessUpdate) Exec(ctx context.Context) error {
	_, err := mlbau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mlbau *MissionLoadBalanceAccessUpdate) ExecX(ctx context.Context) {
	if err := mlbau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mlbau *MissionLoadBalanceAccessUpdate) defaults() {
	if _, ok := mlbau.mutation.UpdatedAt(); !ok {
		v := missionloadbalanceaccess.UpdateDefaultUpdatedAt()
		mlbau.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mlbau *MissionLoadBalanceAccessUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MissionLoadBalanceAccessUpdate {
	mlbau.modifiers = append(mlbau.modifiers, modifiers...)
	return mlbau
}

func (mlbau *MissionLoadBalanceAccessUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(missionloadbalanceaccess.Table, missionloadbalanceaccess.Columns, sqlgraph.NewFieldSpec(missionloadbalanceaccess.FieldID, field.TypeInt64))
	if ps := mlbau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mlbau.mutation.CreatedBy(); ok {
		_spec.SetField(missionloadbalanceaccess.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mlbau.mutation.AddedCreatedBy(); ok {
		_spec.AddField(missionloadbalanceaccess.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mlbau.mutation.UpdatedBy(); ok {
		_spec.SetField(missionloadbalanceaccess.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mlbau.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(missionloadbalanceaccess.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mlbau.mutation.UpdatedAt(); ok {
		_spec.SetField(missionloadbalanceaccess.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mlbau.mutation.DeletedAt(); ok {
		_spec.SetField(missionloadbalanceaccess.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := mlbau.mutation.MissionID(); ok {
		_spec.SetField(missionloadbalanceaccess.FieldMissionID, field.TypeInt64, value)
	}
	if value, ok := mlbau.mutation.AddedMissionID(); ok {
		_spec.AddField(missionloadbalanceaccess.FieldMissionID, field.TypeInt64, value)
	}
	if value, ok := mlbau.mutation.MissionLoadBalanceID(); ok {
		_spec.SetField(missionloadbalanceaccess.FieldMissionLoadBalanceID, field.TypeInt64, value)
	}
	if value, ok := mlbau.mutation.AddedMissionLoadBalanceID(); ok {
		_spec.AddField(missionloadbalanceaccess.FieldMissionLoadBalanceID, field.TypeInt64, value)
	}
	if value, ok := mlbau.mutation.LastAccess(); ok {
		_spec.SetField(missionloadbalanceaccess.FieldLastAccess, field.TypeTime, value)
	}
	if value, ok := mlbau.mutation.AccessCount(); ok {
		_spec.SetField(missionloadbalanceaccess.FieldAccessCount, field.TypeInt32, value)
	}
	if value, ok := mlbau.mutation.AddedAccessCount(); ok {
		_spec.AddField(missionloadbalanceaccess.FieldAccessCount, field.TypeInt32, value)
	}
	_spec.AddModifiers(mlbau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mlbau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{missionloadbalanceaccess.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mlbau.mutation.done = true
	return n, nil
}

// MissionLoadBalanceAccessUpdateOne is the builder for updating a single MissionLoadBalanceAccess entity.
type MissionLoadBalanceAccessUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MissionLoadBalanceAccessMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedBy sets the "created_by" field.
func (mlbauo *MissionLoadBalanceAccessUpdateOne) SetCreatedBy(i int64) *MissionLoadBalanceAccessUpdateOne {
	mlbauo.mutation.ResetCreatedBy()
	mlbauo.mutation.SetCreatedBy(i)
	return mlbauo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mlbauo *MissionLoadBalanceAccessUpdateOne) SetNillableCreatedBy(i *int64) *MissionLoadBalanceAccessUpdateOne {
	if i != nil {
		mlbauo.SetCreatedBy(*i)
	}
	return mlbauo
}

// AddCreatedBy adds i to the "created_by" field.
func (mlbauo *MissionLoadBalanceAccessUpdateOne) AddCreatedBy(i int64) *MissionLoadBalanceAccessUpdateOne {
	mlbauo.mutation.AddCreatedBy(i)
	return mlbauo
}

// SetUpdatedBy sets the "updated_by" field.
func (mlbauo *MissionLoadBalanceAccessUpdateOne) SetUpdatedBy(i int64) *MissionLoadBalanceAccessUpdateOne {
	mlbauo.mutation.ResetUpdatedBy()
	mlbauo.mutation.SetUpdatedBy(i)
	return mlbauo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mlbauo *MissionLoadBalanceAccessUpdateOne) SetNillableUpdatedBy(i *int64) *MissionLoadBalanceAccessUpdateOne {
	if i != nil {
		mlbauo.SetUpdatedBy(*i)
	}
	return mlbauo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (mlbauo *MissionLoadBalanceAccessUpdateOne) AddUpdatedBy(i int64) *MissionLoadBalanceAccessUpdateOne {
	mlbauo.mutation.AddUpdatedBy(i)
	return mlbauo
}

// SetUpdatedAt sets the "updated_at" field.
func (mlbauo *MissionLoadBalanceAccessUpdateOne) SetUpdatedAt(t time.Time) *MissionLoadBalanceAccessUpdateOne {
	mlbauo.mutation.SetUpdatedAt(t)
	return mlbauo
}

// SetDeletedAt sets the "deleted_at" field.
func (mlbauo *MissionLoadBalanceAccessUpdateOne) SetDeletedAt(t time.Time) *MissionLoadBalanceAccessUpdateOne {
	mlbauo.mutation.SetDeletedAt(t)
	return mlbauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mlbauo *MissionLoadBalanceAccessUpdateOne) SetNillableDeletedAt(t *time.Time) *MissionLoadBalanceAccessUpdateOne {
	if t != nil {
		mlbauo.SetDeletedAt(*t)
	}
	return mlbauo
}

// SetMissionID sets the "mission_id" field.
func (mlbauo *MissionLoadBalanceAccessUpdateOne) SetMissionID(i int64) *MissionLoadBalanceAccessUpdateOne {
	mlbauo.mutation.ResetMissionID()
	mlbauo.mutation.SetMissionID(i)
	return mlbauo
}

// AddMissionID adds i to the "mission_id" field.
func (mlbauo *MissionLoadBalanceAccessUpdateOne) AddMissionID(i int64) *MissionLoadBalanceAccessUpdateOne {
	mlbauo.mutation.AddMissionID(i)
	return mlbauo
}

// SetMissionLoadBalanceID sets the "mission_load_balance_id" field.
func (mlbauo *MissionLoadBalanceAccessUpdateOne) SetMissionLoadBalanceID(i int64) *MissionLoadBalanceAccessUpdateOne {
	mlbauo.mutation.ResetMissionLoadBalanceID()
	mlbauo.mutation.SetMissionLoadBalanceID(i)
	return mlbauo
}

// AddMissionLoadBalanceID adds i to the "mission_load_balance_id" field.
func (mlbauo *MissionLoadBalanceAccessUpdateOne) AddMissionLoadBalanceID(i int64) *MissionLoadBalanceAccessUpdateOne {
	mlbauo.mutation.AddMissionLoadBalanceID(i)
	return mlbauo
}

// SetLastAccess sets the "last_access" field.
func (mlbauo *MissionLoadBalanceAccessUpdateOne) SetLastAccess(t time.Time) *MissionLoadBalanceAccessUpdateOne {
	mlbauo.mutation.SetLastAccess(t)
	return mlbauo
}

// SetNillableLastAccess sets the "last_access" field if the given value is not nil.
func (mlbauo *MissionLoadBalanceAccessUpdateOne) SetNillableLastAccess(t *time.Time) *MissionLoadBalanceAccessUpdateOne {
	if t != nil {
		mlbauo.SetLastAccess(*t)
	}
	return mlbauo
}

// SetAccessCount sets the "access_count" field.
func (mlbauo *MissionLoadBalanceAccessUpdateOne) SetAccessCount(i int32) *MissionLoadBalanceAccessUpdateOne {
	mlbauo.mutation.ResetAccessCount()
	mlbauo.mutation.SetAccessCount(i)
	return mlbauo
}

// SetNillableAccessCount sets the "access_count" field if the given value is not nil.
func (mlbauo *MissionLoadBalanceAccessUpdateOne) SetNillableAccessCount(i *int32) *MissionLoadBalanceAccessUpdateOne {
	if i != nil {
		mlbauo.SetAccessCount(*i)
	}
	return mlbauo
}

// AddAccessCount adds i to the "access_count" field.
func (mlbauo *MissionLoadBalanceAccessUpdateOne) AddAccessCount(i int32) *MissionLoadBalanceAccessUpdateOne {
	mlbauo.mutation.AddAccessCount(i)
	return mlbauo
}

// Mutation returns the MissionLoadBalanceAccessMutation object of the builder.
func (mlbauo *MissionLoadBalanceAccessUpdateOne) Mutation() *MissionLoadBalanceAccessMutation {
	return mlbauo.mutation
}

// Where appends a list predicates to the MissionLoadBalanceAccessUpdate builder.
func (mlbauo *MissionLoadBalanceAccessUpdateOne) Where(ps ...predicate.MissionLoadBalanceAccess) *MissionLoadBalanceAccessUpdateOne {
	mlbauo.mutation.Where(ps...)
	return mlbauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mlbauo *MissionLoadBalanceAccessUpdateOne) Select(field string, fields ...string) *MissionLoadBalanceAccessUpdateOne {
	mlbauo.fields = append([]string{field}, fields...)
	return mlbauo
}

// Save executes the query and returns the updated MissionLoadBalanceAccess entity.
func (mlbauo *MissionLoadBalanceAccessUpdateOne) Save(ctx context.Context) (*MissionLoadBalanceAccess, error) {
	mlbauo.defaults()
	return withHooks(ctx, mlbauo.sqlSave, mlbauo.mutation, mlbauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mlbauo *MissionLoadBalanceAccessUpdateOne) SaveX(ctx context.Context) *MissionLoadBalanceAccess {
	node, err := mlbauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mlbauo *MissionLoadBalanceAccessUpdateOne) Exec(ctx context.Context) error {
	_, err := mlbauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mlbauo *MissionLoadBalanceAccessUpdateOne) ExecX(ctx context.Context) {
	if err := mlbauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mlbauo *MissionLoadBalanceAccessUpdateOne) defaults() {
	if _, ok := mlbauo.mutation.UpdatedAt(); !ok {
		v := missionloadbalanceaccess.UpdateDefaultUpdatedAt()
		mlbauo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mlbauo *MissionLoadBalanceAccessUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MissionLoadBalanceAccessUpdateOne {
	mlbauo.modifiers = append(mlbauo.modifiers, modifiers...)
	return mlbauo
}

func (mlbauo *MissionLoadBalanceAccessUpdateOne) sqlSave(ctx context.Context) (_node *MissionLoadBalanceAccess, err error) {
	_spec := sqlgraph.NewUpdateSpec(missionloadbalanceaccess.Table, missionloadbalanceaccess.Columns, sqlgraph.NewFieldSpec(missionloadbalanceaccess.FieldID, field.TypeInt64))
	id, ok := mlbauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "MissionLoadBalanceAccess.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mlbauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, missionloadbalanceaccess.FieldID)
		for _, f := range fields {
			if !missionloadbalanceaccess.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != missionloadbalanceaccess.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mlbauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mlbauo.mutation.CreatedBy(); ok {
		_spec.SetField(missionloadbalanceaccess.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mlbauo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(missionloadbalanceaccess.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mlbauo.mutation.UpdatedBy(); ok {
		_spec.SetField(missionloadbalanceaccess.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mlbauo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(missionloadbalanceaccess.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mlbauo.mutation.UpdatedAt(); ok {
		_spec.SetField(missionloadbalanceaccess.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mlbauo.mutation.DeletedAt(); ok {
		_spec.SetField(missionloadbalanceaccess.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := mlbauo.mutation.MissionID(); ok {
		_spec.SetField(missionloadbalanceaccess.FieldMissionID, field.TypeInt64, value)
	}
	if value, ok := mlbauo.mutation.AddedMissionID(); ok {
		_spec.AddField(missionloadbalanceaccess.FieldMissionID, field.TypeInt64, value)
	}
	if value, ok := mlbauo.mutation.MissionLoadBalanceID(); ok {
		_spec.SetField(missionloadbalanceaccess.FieldMissionLoadBalanceID, field.TypeInt64, value)
	}
	if value, ok := mlbauo.mutation.AddedMissionLoadBalanceID(); ok {
		_spec.AddField(missionloadbalanceaccess.FieldMissionLoadBalanceID, field.TypeInt64, value)
	}
	if value, ok := mlbauo.mutation.LastAccess(); ok {
		_spec.SetField(missionloadbalanceaccess.FieldLastAccess, field.TypeTime, value)
	}
	if value, ok := mlbauo.mutation.AccessCount(); ok {
		_spec.SetField(missionloadbalanceaccess.FieldAccessCount, field.TypeInt32, value)
	}
	if value, ok := mlbauo.mutation.AddedAccessCount(); ok {
		_spec.AddField(missionloadbalanceaccess.FieldAccessCount, field.TypeInt32, value)
	}
	_spec.AddModifiers(mlbauo.modifiers...)
	_node = &MissionLoadBalanceAccess{config: mlbauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mlbauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{missionloadbalanceaccess.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mlbauo.mutation.done = true
	return _node, nil
}
