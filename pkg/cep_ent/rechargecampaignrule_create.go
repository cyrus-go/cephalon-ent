// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/rechargecampaignrule"
)

// RechargeCampaignRuleCreate is the builder for creating a RechargeCampaignRule entity.
type RechargeCampaignRuleCreate struct {
	config
	mutation *RechargeCampaignRuleMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (rcrc *RechargeCampaignRuleCreate) SetCreatedBy(i int64) *RechargeCampaignRuleCreate {
	rcrc.mutation.SetCreatedBy(i)
	return rcrc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (rcrc *RechargeCampaignRuleCreate) SetNillableCreatedBy(i *int64) *RechargeCampaignRuleCreate {
	if i != nil {
		rcrc.SetCreatedBy(*i)
	}
	return rcrc
}

// SetUpdatedBy sets the "updated_by" field.
func (rcrc *RechargeCampaignRuleCreate) SetUpdatedBy(i int64) *RechargeCampaignRuleCreate {
	rcrc.mutation.SetUpdatedBy(i)
	return rcrc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (rcrc *RechargeCampaignRuleCreate) SetNillableUpdatedBy(i *int64) *RechargeCampaignRuleCreate {
	if i != nil {
		rcrc.SetUpdatedBy(*i)
	}
	return rcrc
}

// SetCreatedAt sets the "created_at" field.
func (rcrc *RechargeCampaignRuleCreate) SetCreatedAt(t time.Time) *RechargeCampaignRuleCreate {
	rcrc.mutation.SetCreatedAt(t)
	return rcrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rcrc *RechargeCampaignRuleCreate) SetNillableCreatedAt(t *time.Time) *RechargeCampaignRuleCreate {
	if t != nil {
		rcrc.SetCreatedAt(*t)
	}
	return rcrc
}

// SetUpdatedAt sets the "updated_at" field.
func (rcrc *RechargeCampaignRuleCreate) SetUpdatedAt(t time.Time) *RechargeCampaignRuleCreate {
	rcrc.mutation.SetUpdatedAt(t)
	return rcrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rcrc *RechargeCampaignRuleCreate) SetNillableUpdatedAt(t *time.Time) *RechargeCampaignRuleCreate {
	if t != nil {
		rcrc.SetUpdatedAt(*t)
	}
	return rcrc
}

// SetDeletedAt sets the "deleted_at" field.
func (rcrc *RechargeCampaignRuleCreate) SetDeletedAt(t time.Time) *RechargeCampaignRuleCreate {
	rcrc.mutation.SetDeletedAt(t)
	return rcrc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rcrc *RechargeCampaignRuleCreate) SetNillableDeletedAt(t *time.Time) *RechargeCampaignRuleCreate {
	if t != nil {
		rcrc.SetDeletedAt(*t)
	}
	return rcrc
}

// SetLittleValue sets the "little_value" field.
func (rcrc *RechargeCampaignRuleCreate) SetLittleValue(i int64) *RechargeCampaignRuleCreate {
	rcrc.mutation.SetLittleValue(i)
	return rcrc
}

// SetNillableLittleValue sets the "little_value" field if the given value is not nil.
func (rcrc *RechargeCampaignRuleCreate) SetNillableLittleValue(i *int64) *RechargeCampaignRuleCreate {
	if i != nil {
		rcrc.SetLittleValue(*i)
	}
	return rcrc
}

// SetLargeValue sets the "large_value" field.
func (rcrc *RechargeCampaignRuleCreate) SetLargeValue(i int64) *RechargeCampaignRuleCreate {
	rcrc.mutation.SetLargeValue(i)
	return rcrc
}

// SetNillableLargeValue sets the "large_value" field if the given value is not nil.
func (rcrc *RechargeCampaignRuleCreate) SetNillableLargeValue(i *int64) *RechargeCampaignRuleCreate {
	if i != nil {
		rcrc.SetLargeValue(*i)
	}
	return rcrc
}

// SetGiftPercent sets the "gift_percent" field.
func (rcrc *RechargeCampaignRuleCreate) SetGiftPercent(i int64) *RechargeCampaignRuleCreate {
	rcrc.mutation.SetGiftPercent(i)
	return rcrc
}

// SetNillableGiftPercent sets the "gift_percent" field if the given value is not nil.
func (rcrc *RechargeCampaignRuleCreate) SetNillableGiftPercent(i *int64) *RechargeCampaignRuleCreate {
	if i != nil {
		rcrc.SetGiftPercent(*i)
	}
	return rcrc
}

// SetID sets the "id" field.
func (rcrc *RechargeCampaignRuleCreate) SetID(i int64) *RechargeCampaignRuleCreate {
	rcrc.mutation.SetID(i)
	return rcrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rcrc *RechargeCampaignRuleCreate) SetNillableID(i *int64) *RechargeCampaignRuleCreate {
	if i != nil {
		rcrc.SetID(*i)
	}
	return rcrc
}

// Mutation returns the RechargeCampaignRuleMutation object of the builder.
func (rcrc *RechargeCampaignRuleCreate) Mutation() *RechargeCampaignRuleMutation {
	return rcrc.mutation
}

// Save creates the RechargeCampaignRule in the database.
func (rcrc *RechargeCampaignRuleCreate) Save(ctx context.Context) (*RechargeCampaignRule, error) {
	rcrc.defaults()
	return withHooks(ctx, rcrc.sqlSave, rcrc.mutation, rcrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rcrc *RechargeCampaignRuleCreate) SaveX(ctx context.Context) *RechargeCampaignRule {
	v, err := rcrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcrc *RechargeCampaignRuleCreate) Exec(ctx context.Context) error {
	_, err := rcrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcrc *RechargeCampaignRuleCreate) ExecX(ctx context.Context) {
	if err := rcrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rcrc *RechargeCampaignRuleCreate) defaults() {
	if _, ok := rcrc.mutation.CreatedBy(); !ok {
		v := rechargecampaignrule.DefaultCreatedBy
		rcrc.mutation.SetCreatedBy(v)
	}
	if _, ok := rcrc.mutation.UpdatedBy(); !ok {
		v := rechargecampaignrule.DefaultUpdatedBy
		rcrc.mutation.SetUpdatedBy(v)
	}
	if _, ok := rcrc.mutation.CreatedAt(); !ok {
		v := rechargecampaignrule.DefaultCreatedAt()
		rcrc.mutation.SetCreatedAt(v)
	}
	if _, ok := rcrc.mutation.UpdatedAt(); !ok {
		v := rechargecampaignrule.DefaultUpdatedAt()
		rcrc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rcrc.mutation.DeletedAt(); !ok {
		v := rechargecampaignrule.DefaultDeletedAt
		rcrc.mutation.SetDeletedAt(v)
	}
	if _, ok := rcrc.mutation.LittleValue(); !ok {
		v := rechargecampaignrule.DefaultLittleValue
		rcrc.mutation.SetLittleValue(v)
	}
	if _, ok := rcrc.mutation.LargeValue(); !ok {
		v := rechargecampaignrule.DefaultLargeValue
		rcrc.mutation.SetLargeValue(v)
	}
	if _, ok := rcrc.mutation.GiftPercent(); !ok {
		v := rechargecampaignrule.DefaultGiftPercent
		rcrc.mutation.SetGiftPercent(v)
	}
	if _, ok := rcrc.mutation.ID(); !ok {
		v := rechargecampaignrule.DefaultID()
		rcrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rcrc *RechargeCampaignRuleCreate) check() error {
	if _, ok := rcrc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "RechargeCampaignRule.created_by"`)}
	}
	if _, ok := rcrc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "RechargeCampaignRule.updated_by"`)}
	}
	if _, ok := rcrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "RechargeCampaignRule.created_at"`)}
	}
	if _, ok := rcrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "RechargeCampaignRule.updated_at"`)}
	}
	if _, ok := rcrc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "RechargeCampaignRule.deleted_at"`)}
	}
	if _, ok := rcrc.mutation.LittleValue(); !ok {
		return &ValidationError{Name: "little_value", err: errors.New(`cep_ent: missing required field "RechargeCampaignRule.little_value"`)}
	}
	if _, ok := rcrc.mutation.LargeValue(); !ok {
		return &ValidationError{Name: "large_value", err: errors.New(`cep_ent: missing required field "RechargeCampaignRule.large_value"`)}
	}
	if _, ok := rcrc.mutation.GiftPercent(); !ok {
		return &ValidationError{Name: "gift_percent", err: errors.New(`cep_ent: missing required field "RechargeCampaignRule.gift_percent"`)}
	}
	return nil
}

func (rcrc *RechargeCampaignRuleCreate) sqlSave(ctx context.Context) (*RechargeCampaignRule, error) {
	if err := rcrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rcrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rcrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	rcrc.mutation.id = &_node.ID
	rcrc.mutation.done = true
	return _node, nil
}

func (rcrc *RechargeCampaignRuleCreate) createSpec() (*RechargeCampaignRule, *sqlgraph.CreateSpec) {
	var (
		_node = &RechargeCampaignRule{config: rcrc.config}
		_spec = sqlgraph.NewCreateSpec(rechargecampaignrule.Table, sqlgraph.NewFieldSpec(rechargecampaignrule.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = rcrc.conflict
	if id, ok := rcrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rcrc.mutation.CreatedBy(); ok {
		_spec.SetField(rechargecampaignrule.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := rcrc.mutation.UpdatedBy(); ok {
		_spec.SetField(rechargecampaignrule.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := rcrc.mutation.CreatedAt(); ok {
		_spec.SetField(rechargecampaignrule.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rcrc.mutation.UpdatedAt(); ok {
		_spec.SetField(rechargecampaignrule.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rcrc.mutation.DeletedAt(); ok {
		_spec.SetField(rechargecampaignrule.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := rcrc.mutation.LittleValue(); ok {
		_spec.SetField(rechargecampaignrule.FieldLittleValue, field.TypeInt64, value)
		_node.LittleValue = value
	}
	if value, ok := rcrc.mutation.LargeValue(); ok {
		_spec.SetField(rechargecampaignrule.FieldLargeValue, field.TypeInt64, value)
		_node.LargeValue = value
	}
	if value, ok := rcrc.mutation.GiftPercent(); ok {
		_spec.SetField(rechargecampaignrule.FieldGiftPercent, field.TypeInt64, value)
		_node.GiftPercent = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RechargeCampaignRule.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RechargeCampaignRuleUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (rcrc *RechargeCampaignRuleCreate) OnConflict(opts ...sql.ConflictOption) *RechargeCampaignRuleUpsertOne {
	rcrc.conflict = opts
	return &RechargeCampaignRuleUpsertOne{
		create: rcrc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RechargeCampaignRule.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcrc *RechargeCampaignRuleCreate) OnConflictColumns(columns ...string) *RechargeCampaignRuleUpsertOne {
	rcrc.conflict = append(rcrc.conflict, sql.ConflictColumns(columns...))
	return &RechargeCampaignRuleUpsertOne{
		create: rcrc,
	}
}

type (
	// RechargeCampaignRuleUpsertOne is the builder for "upsert"-ing
	//  one RechargeCampaignRule node.
	RechargeCampaignRuleUpsertOne struct {
		create *RechargeCampaignRuleCreate
	}

	// RechargeCampaignRuleUpsert is the "OnConflict" setter.
	RechargeCampaignRuleUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *RechargeCampaignRuleUpsert) SetCreatedBy(v int64) *RechargeCampaignRuleUpsert {
	u.Set(rechargecampaignrule.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *RechargeCampaignRuleUpsert) UpdateCreatedBy() *RechargeCampaignRuleUpsert {
	u.SetExcluded(rechargecampaignrule.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *RechargeCampaignRuleUpsert) AddCreatedBy(v int64) *RechargeCampaignRuleUpsert {
	u.Add(rechargecampaignrule.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *RechargeCampaignRuleUpsert) SetUpdatedBy(v int64) *RechargeCampaignRuleUpsert {
	u.Set(rechargecampaignrule.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *RechargeCampaignRuleUpsert) UpdateUpdatedBy() *RechargeCampaignRuleUpsert {
	u.SetExcluded(rechargecampaignrule.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *RechargeCampaignRuleUpsert) AddUpdatedBy(v int64) *RechargeCampaignRuleUpsert {
	u.Add(rechargecampaignrule.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RechargeCampaignRuleUpsert) SetUpdatedAt(v time.Time) *RechargeCampaignRuleUpsert {
	u.Set(rechargecampaignrule.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RechargeCampaignRuleUpsert) UpdateUpdatedAt() *RechargeCampaignRuleUpsert {
	u.SetExcluded(rechargecampaignrule.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RechargeCampaignRuleUpsert) SetDeletedAt(v time.Time) *RechargeCampaignRuleUpsert {
	u.Set(rechargecampaignrule.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RechargeCampaignRuleUpsert) UpdateDeletedAt() *RechargeCampaignRuleUpsert {
	u.SetExcluded(rechargecampaignrule.FieldDeletedAt)
	return u
}

// SetLittleValue sets the "little_value" field.
func (u *RechargeCampaignRuleUpsert) SetLittleValue(v int64) *RechargeCampaignRuleUpsert {
	u.Set(rechargecampaignrule.FieldLittleValue, v)
	return u
}

// UpdateLittleValue sets the "little_value" field to the value that was provided on create.
func (u *RechargeCampaignRuleUpsert) UpdateLittleValue() *RechargeCampaignRuleUpsert {
	u.SetExcluded(rechargecampaignrule.FieldLittleValue)
	return u
}

// AddLittleValue adds v to the "little_value" field.
func (u *RechargeCampaignRuleUpsert) AddLittleValue(v int64) *RechargeCampaignRuleUpsert {
	u.Add(rechargecampaignrule.FieldLittleValue, v)
	return u
}

// SetLargeValue sets the "large_value" field.
func (u *RechargeCampaignRuleUpsert) SetLargeValue(v int64) *RechargeCampaignRuleUpsert {
	u.Set(rechargecampaignrule.FieldLargeValue, v)
	return u
}

// UpdateLargeValue sets the "large_value" field to the value that was provided on create.
func (u *RechargeCampaignRuleUpsert) UpdateLargeValue() *RechargeCampaignRuleUpsert {
	u.SetExcluded(rechargecampaignrule.FieldLargeValue)
	return u
}

// AddLargeValue adds v to the "large_value" field.
func (u *RechargeCampaignRuleUpsert) AddLargeValue(v int64) *RechargeCampaignRuleUpsert {
	u.Add(rechargecampaignrule.FieldLargeValue, v)
	return u
}

// SetGiftPercent sets the "gift_percent" field.
func (u *RechargeCampaignRuleUpsert) SetGiftPercent(v int64) *RechargeCampaignRuleUpsert {
	u.Set(rechargecampaignrule.FieldGiftPercent, v)
	return u
}

// UpdateGiftPercent sets the "gift_percent" field to the value that was provided on create.
func (u *RechargeCampaignRuleUpsert) UpdateGiftPercent() *RechargeCampaignRuleUpsert {
	u.SetExcluded(rechargecampaignrule.FieldGiftPercent)
	return u
}

// AddGiftPercent adds v to the "gift_percent" field.
func (u *RechargeCampaignRuleUpsert) AddGiftPercent(v int64) *RechargeCampaignRuleUpsert {
	u.Add(rechargecampaignrule.FieldGiftPercent, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.RechargeCampaignRule.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(rechargecampaignrule.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RechargeCampaignRuleUpsertOne) UpdateNewValues() *RechargeCampaignRuleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(rechargecampaignrule.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(rechargecampaignrule.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RechargeCampaignRule.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RechargeCampaignRuleUpsertOne) Ignore() *RechargeCampaignRuleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RechargeCampaignRuleUpsertOne) DoNothing() *RechargeCampaignRuleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RechargeCampaignRuleCreate.OnConflict
// documentation for more info.
func (u *RechargeCampaignRuleUpsertOne) Update(set func(*RechargeCampaignRuleUpsert)) *RechargeCampaignRuleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RechargeCampaignRuleUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *RechargeCampaignRuleUpsertOne) SetCreatedBy(v int64) *RechargeCampaignRuleUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *RechargeCampaignRuleUpsertOne) AddCreatedBy(v int64) *RechargeCampaignRuleUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *RechargeCampaignRuleUpsertOne) UpdateCreatedBy() *RechargeCampaignRuleUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *RechargeCampaignRuleUpsertOne) SetUpdatedBy(v int64) *RechargeCampaignRuleUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *RechargeCampaignRuleUpsertOne) AddUpdatedBy(v int64) *RechargeCampaignRuleUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *RechargeCampaignRuleUpsertOne) UpdateUpdatedBy() *RechargeCampaignRuleUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RechargeCampaignRuleUpsertOne) SetUpdatedAt(v time.Time) *RechargeCampaignRuleUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RechargeCampaignRuleUpsertOne) UpdateUpdatedAt() *RechargeCampaignRuleUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RechargeCampaignRuleUpsertOne) SetDeletedAt(v time.Time) *RechargeCampaignRuleUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RechargeCampaignRuleUpsertOne) UpdateDeletedAt() *RechargeCampaignRuleUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetLittleValue sets the "little_value" field.
func (u *RechargeCampaignRuleUpsertOne) SetLittleValue(v int64) *RechargeCampaignRuleUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.SetLittleValue(v)
	})
}

// AddLittleValue adds v to the "little_value" field.
func (u *RechargeCampaignRuleUpsertOne) AddLittleValue(v int64) *RechargeCampaignRuleUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.AddLittleValue(v)
	})
}

// UpdateLittleValue sets the "little_value" field to the value that was provided on create.
func (u *RechargeCampaignRuleUpsertOne) UpdateLittleValue() *RechargeCampaignRuleUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.UpdateLittleValue()
	})
}

// SetLargeValue sets the "large_value" field.
func (u *RechargeCampaignRuleUpsertOne) SetLargeValue(v int64) *RechargeCampaignRuleUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.SetLargeValue(v)
	})
}

// AddLargeValue adds v to the "large_value" field.
func (u *RechargeCampaignRuleUpsertOne) AddLargeValue(v int64) *RechargeCampaignRuleUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.AddLargeValue(v)
	})
}

// UpdateLargeValue sets the "large_value" field to the value that was provided on create.
func (u *RechargeCampaignRuleUpsertOne) UpdateLargeValue() *RechargeCampaignRuleUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.UpdateLargeValue()
	})
}

// SetGiftPercent sets the "gift_percent" field.
func (u *RechargeCampaignRuleUpsertOne) SetGiftPercent(v int64) *RechargeCampaignRuleUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.SetGiftPercent(v)
	})
}

// AddGiftPercent adds v to the "gift_percent" field.
func (u *RechargeCampaignRuleUpsertOne) AddGiftPercent(v int64) *RechargeCampaignRuleUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.AddGiftPercent(v)
	})
}

// UpdateGiftPercent sets the "gift_percent" field to the value that was provided on create.
func (u *RechargeCampaignRuleUpsertOne) UpdateGiftPercent() *RechargeCampaignRuleUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.UpdateGiftPercent()
	})
}

// Exec executes the query.
func (u *RechargeCampaignRuleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for RechargeCampaignRuleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RechargeCampaignRuleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RechargeCampaignRuleUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RechargeCampaignRuleUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RechargeCampaignRuleCreateBulk is the builder for creating many RechargeCampaignRule entities in bulk.
type RechargeCampaignRuleCreateBulk struct {
	config
	err      error
	builders []*RechargeCampaignRuleCreate
	conflict []sql.ConflictOption
}

// Save creates the RechargeCampaignRule entities in the database.
func (rcrcb *RechargeCampaignRuleCreateBulk) Save(ctx context.Context) ([]*RechargeCampaignRule, error) {
	if rcrcb.err != nil {
		return nil, rcrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcrcb.builders))
	nodes := make([]*RechargeCampaignRule, len(rcrcb.builders))
	mutators := make([]Mutator, len(rcrcb.builders))
	for i := range rcrcb.builders {
		func(i int, root context.Context) {
			builder := rcrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RechargeCampaignRuleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcrcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcrcb *RechargeCampaignRuleCreateBulk) SaveX(ctx context.Context) []*RechargeCampaignRule {
	v, err := rcrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcrcb *RechargeCampaignRuleCreateBulk) Exec(ctx context.Context) error {
	_, err := rcrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcrcb *RechargeCampaignRuleCreateBulk) ExecX(ctx context.Context) {
	if err := rcrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RechargeCampaignRule.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RechargeCampaignRuleUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (rcrcb *RechargeCampaignRuleCreateBulk) OnConflict(opts ...sql.ConflictOption) *RechargeCampaignRuleUpsertBulk {
	rcrcb.conflict = opts
	return &RechargeCampaignRuleUpsertBulk{
		create: rcrcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RechargeCampaignRule.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcrcb *RechargeCampaignRuleCreateBulk) OnConflictColumns(columns ...string) *RechargeCampaignRuleUpsertBulk {
	rcrcb.conflict = append(rcrcb.conflict, sql.ConflictColumns(columns...))
	return &RechargeCampaignRuleUpsertBulk{
		create: rcrcb,
	}
}

// RechargeCampaignRuleUpsertBulk is the builder for "upsert"-ing
// a bulk of RechargeCampaignRule nodes.
type RechargeCampaignRuleUpsertBulk struct {
	create *RechargeCampaignRuleCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RechargeCampaignRule.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(rechargecampaignrule.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RechargeCampaignRuleUpsertBulk) UpdateNewValues() *RechargeCampaignRuleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(rechargecampaignrule.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(rechargecampaignrule.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RechargeCampaignRule.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RechargeCampaignRuleUpsertBulk) Ignore() *RechargeCampaignRuleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RechargeCampaignRuleUpsertBulk) DoNothing() *RechargeCampaignRuleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RechargeCampaignRuleCreateBulk.OnConflict
// documentation for more info.
func (u *RechargeCampaignRuleUpsertBulk) Update(set func(*RechargeCampaignRuleUpsert)) *RechargeCampaignRuleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RechargeCampaignRuleUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *RechargeCampaignRuleUpsertBulk) SetCreatedBy(v int64) *RechargeCampaignRuleUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *RechargeCampaignRuleUpsertBulk) AddCreatedBy(v int64) *RechargeCampaignRuleUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *RechargeCampaignRuleUpsertBulk) UpdateCreatedBy() *RechargeCampaignRuleUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *RechargeCampaignRuleUpsertBulk) SetUpdatedBy(v int64) *RechargeCampaignRuleUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *RechargeCampaignRuleUpsertBulk) AddUpdatedBy(v int64) *RechargeCampaignRuleUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *RechargeCampaignRuleUpsertBulk) UpdateUpdatedBy() *RechargeCampaignRuleUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RechargeCampaignRuleUpsertBulk) SetUpdatedAt(v time.Time) *RechargeCampaignRuleUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RechargeCampaignRuleUpsertBulk) UpdateUpdatedAt() *RechargeCampaignRuleUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RechargeCampaignRuleUpsertBulk) SetDeletedAt(v time.Time) *RechargeCampaignRuleUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RechargeCampaignRuleUpsertBulk) UpdateDeletedAt() *RechargeCampaignRuleUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetLittleValue sets the "little_value" field.
func (u *RechargeCampaignRuleUpsertBulk) SetLittleValue(v int64) *RechargeCampaignRuleUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.SetLittleValue(v)
	})
}

// AddLittleValue adds v to the "little_value" field.
func (u *RechargeCampaignRuleUpsertBulk) AddLittleValue(v int64) *RechargeCampaignRuleUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.AddLittleValue(v)
	})
}

// UpdateLittleValue sets the "little_value" field to the value that was provided on create.
func (u *RechargeCampaignRuleUpsertBulk) UpdateLittleValue() *RechargeCampaignRuleUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.UpdateLittleValue()
	})
}

// SetLargeValue sets the "large_value" field.
func (u *RechargeCampaignRuleUpsertBulk) SetLargeValue(v int64) *RechargeCampaignRuleUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.SetLargeValue(v)
	})
}

// AddLargeValue adds v to the "large_value" field.
func (u *RechargeCampaignRuleUpsertBulk) AddLargeValue(v int64) *RechargeCampaignRuleUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.AddLargeValue(v)
	})
}

// UpdateLargeValue sets the "large_value" field to the value that was provided on create.
func (u *RechargeCampaignRuleUpsertBulk) UpdateLargeValue() *RechargeCampaignRuleUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.UpdateLargeValue()
	})
}

// SetGiftPercent sets the "gift_percent" field.
func (u *RechargeCampaignRuleUpsertBulk) SetGiftPercent(v int64) *RechargeCampaignRuleUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.SetGiftPercent(v)
	})
}

// AddGiftPercent adds v to the "gift_percent" field.
func (u *RechargeCampaignRuleUpsertBulk) AddGiftPercent(v int64) *RechargeCampaignRuleUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.AddGiftPercent(v)
	})
}

// UpdateGiftPercent sets the "gift_percent" field to the value that was provided on create.
func (u *RechargeCampaignRuleUpsertBulk) UpdateGiftPercent() *RechargeCampaignRuleUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleUpsert) {
		s.UpdateGiftPercent()
	})
}

// Exec executes the query.
func (u *RechargeCampaignRuleUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the RechargeCampaignRuleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for RechargeCampaignRuleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RechargeCampaignRuleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
