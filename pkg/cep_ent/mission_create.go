// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/extraservice"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/extraserviceorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/hmackeypair"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/mission"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionbatch"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionconsumeorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionextraservice"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionfailedfeedback"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionkeypair"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionkind"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionproduceorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionproduction"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/renewalagreement"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// MissionCreate is the builder for creating a Mission entity.
type MissionCreate struct {
	config
	mutation *MissionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (mc *MissionCreate) SetCreatedBy(i int64) *MissionCreate {
	mc.mutation.SetCreatedBy(i)
	return mc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mc *MissionCreate) SetNillableCreatedBy(i *int64) *MissionCreate {
	if i != nil {
		mc.SetCreatedBy(*i)
	}
	return mc
}

// SetUpdatedBy sets the "updated_by" field.
func (mc *MissionCreate) SetUpdatedBy(i int64) *MissionCreate {
	mc.mutation.SetUpdatedBy(i)
	return mc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mc *MissionCreate) SetNillableUpdatedBy(i *int64) *MissionCreate {
	if i != nil {
		mc.SetUpdatedBy(*i)
	}
	return mc
}

// SetCreatedAt sets the "created_at" field.
func (mc *MissionCreate) SetCreatedAt(t time.Time) *MissionCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MissionCreate) SetNillableCreatedAt(t *time.Time) *MissionCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *MissionCreate) SetUpdatedAt(t time.Time) *MissionCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *MissionCreate) SetNillableUpdatedAt(t *time.Time) *MissionCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetDeletedAt sets the "deleted_at" field.
func (mc *MissionCreate) SetDeletedAt(t time.Time) *MissionCreate {
	mc.mutation.SetDeletedAt(t)
	return mc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mc *MissionCreate) SetNillableDeletedAt(t *time.Time) *MissionCreate {
	if t != nil {
		mc.SetDeletedAt(*t)
	}
	return mc
}

// SetType sets the "type" field.
func (mc *MissionCreate) SetType(et enums.MissionType) *MissionCreate {
	mc.mutation.SetType(et)
	return mc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mc *MissionCreate) SetNillableType(et *enums.MissionType) *MissionCreate {
	if et != nil {
		mc.SetType(*et)
	}
	return mc
}

// SetMissionKindID sets the "mission_kind_id" field.
func (mc *MissionCreate) SetMissionKindID(i int64) *MissionCreate {
	mc.mutation.SetMissionKindID(i)
	return mc
}

// SetNillableMissionKindID sets the "mission_kind_id" field if the given value is not nil.
func (mc *MissionCreate) SetNillableMissionKindID(i *int64) *MissionCreate {
	if i != nil {
		mc.SetMissionKindID(*i)
	}
	return mc
}

// SetBody sets the "body" field.
func (mc *MissionCreate) SetBody(s string) *MissionCreate {
	mc.mutation.SetBody(s)
	return mc
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (mc *MissionCreate) SetNillableBody(s *string) *MissionCreate {
	if s != nil {
		mc.SetBody(*s)
	}
	return mc
}

// SetCallBackURL sets the "call_back_url" field.
func (mc *MissionCreate) SetCallBackURL(s string) *MissionCreate {
	mc.mutation.SetCallBackURL(s)
	return mc
}

// SetNillableCallBackURL sets the "call_back_url" field if the given value is not nil.
func (mc *MissionCreate) SetNillableCallBackURL(s *string) *MissionCreate {
	if s != nil {
		mc.SetCallBackURL(*s)
	}
	return mc
}

// SetCallBackInfo sets the "call_back_info" field.
func (mc *MissionCreate) SetCallBackInfo(s string) *MissionCreate {
	mc.mutation.SetCallBackInfo(s)
	return mc
}

// SetNillableCallBackInfo sets the "call_back_info" field if the given value is not nil.
func (mc *MissionCreate) SetNillableCallBackInfo(s *string) *MissionCreate {
	if s != nil {
		mc.SetCallBackInfo(*s)
	}
	return mc
}

// SetCallBackData sets the "call_back_data" field.
func (mc *MissionCreate) SetCallBackData(b []byte) *MissionCreate {
	mc.mutation.SetCallBackData(b)
	return mc
}

// SetStatus sets the "status" field.
func (mc *MissionCreate) SetStatus(es enums.MissionStatus) *MissionCreate {
	mc.mutation.SetStatus(es)
	return mc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mc *MissionCreate) SetNillableStatus(es *enums.MissionStatus) *MissionCreate {
	if es != nil {
		mc.SetStatus(*es)
	}
	return mc
}

// SetResult sets the "result" field.
func (mc *MissionCreate) SetResult(er enums.MissionResult) *MissionCreate {
	mc.mutation.SetResult(er)
	return mc
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (mc *MissionCreate) SetNillableResult(er *enums.MissionResult) *MissionCreate {
	if er != nil {
		mc.SetResult(*er)
	}
	return mc
}

// SetState sets the "state" field.
func (mc *MissionCreate) SetState(es enums.MissionState) *MissionCreate {
	mc.mutation.SetState(es)
	return mc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (mc *MissionCreate) SetNillableState(es *enums.MissionState) *MissionCreate {
	if es != nil {
		mc.SetState(*es)
	}
	return mc
}

// SetResultUrls sets the "result_urls" field.
func (mc *MissionCreate) SetResultUrls(s []string) *MissionCreate {
	mc.mutation.SetResultUrls(s)
	return mc
}

// SetUrls sets the "urls" field.
func (mc *MissionCreate) SetUrls(s string) *MissionCreate {
	mc.mutation.SetUrls(s)
	return mc
}

// SetNillableUrls sets the "urls" field if the given value is not nil.
func (mc *MissionCreate) SetNillableUrls(s *string) *MissionCreate {
	if s != nil {
		mc.SetUrls(*s)
	}
	return mc
}

// SetKeyPairID sets the "key_pair_id" field.
func (mc *MissionCreate) SetKeyPairID(i int64) *MissionCreate {
	mc.mutation.SetKeyPairID(i)
	return mc
}

// SetNillableKeyPairID sets the "key_pair_id" field if the given value is not nil.
func (mc *MissionCreate) SetNillableKeyPairID(i *int64) *MissionCreate {
	if i != nil {
		mc.SetKeyPairID(*i)
	}
	return mc
}

// SetUserID sets the "user_id" field.
func (mc *MissionCreate) SetUserID(i int64) *MissionCreate {
	mc.mutation.SetUserID(i)
	return mc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (mc *MissionCreate) SetNillableUserID(i *int64) *MissionCreate {
	if i != nil {
		mc.SetUserID(*i)
	}
	return mc
}

// SetMissionBatchID sets the "mission_batch_id" field.
func (mc *MissionCreate) SetMissionBatchID(i int64) *MissionCreate {
	mc.mutation.SetMissionBatchID(i)
	return mc
}

// SetNillableMissionBatchID sets the "mission_batch_id" field if the given value is not nil.
func (mc *MissionCreate) SetNillableMissionBatchID(i *int64) *MissionCreate {
	if i != nil {
		mc.SetMissionBatchID(*i)
	}
	return mc
}

// SetMissionBatchNumber sets the "mission_batch_number" field.
func (mc *MissionCreate) SetMissionBatchNumber(s string) *MissionCreate {
	mc.mutation.SetMissionBatchNumber(s)
	return mc
}

// SetNillableMissionBatchNumber sets the "mission_batch_number" field if the given value is not nil.
func (mc *MissionCreate) SetNillableMissionBatchNumber(s *string) *MissionCreate {
	if s != nil {
		mc.SetMissionBatchNumber(*s)
	}
	return mc
}

// SetGpuVersion sets the "gpu_version" field.
func (mc *MissionCreate) SetGpuVersion(ev enums.GpuVersion) *MissionCreate {
	mc.mutation.SetGpuVersion(ev)
	return mc
}

// SetNillableGpuVersion sets the "gpu_version" field if the given value is not nil.
func (mc *MissionCreate) SetNillableGpuVersion(ev *enums.GpuVersion) *MissionCreate {
	if ev != nil {
		mc.SetGpuVersion(*ev)
	}
	return mc
}

// SetUnitCep sets the "unit_cep" field.
func (mc *MissionCreate) SetUnitCep(i int64) *MissionCreate {
	mc.mutation.SetUnitCep(i)
	return mc
}

// SetNillableUnitCep sets the "unit_cep" field if the given value is not nil.
func (mc *MissionCreate) SetNillableUnitCep(i *int64) *MissionCreate {
	if i != nil {
		mc.SetUnitCep(*i)
	}
	return mc
}

// SetRespStatusCode sets the "resp_status_code" field.
func (mc *MissionCreate) SetRespStatusCode(i int32) *MissionCreate {
	mc.mutation.SetRespStatusCode(i)
	return mc
}

// SetNillableRespStatusCode sets the "resp_status_code" field if the given value is not nil.
func (mc *MissionCreate) SetNillableRespStatusCode(i *int32) *MissionCreate {
	if i != nil {
		mc.SetRespStatusCode(*i)
	}
	return mc
}

// SetRespBody sets the "resp_body" field.
func (mc *MissionCreate) SetRespBody(s string) *MissionCreate {
	mc.mutation.SetRespBody(s)
	return mc
}

// SetNillableRespBody sets the "resp_body" field if the given value is not nil.
func (mc *MissionCreate) SetNillableRespBody(s *string) *MissionCreate {
	if s != nil {
		mc.SetRespBody(*s)
	}
	return mc
}

// SetInnerURI sets the "inner_uri" field.
func (mc *MissionCreate) SetInnerURI(s string) *MissionCreate {
	mc.mutation.SetInnerURI(s)
	return mc
}

// SetNillableInnerURI sets the "inner_uri" field if the given value is not nil.
func (mc *MissionCreate) SetNillableInnerURI(s *string) *MissionCreate {
	if s != nil {
		mc.SetInnerURI(*s)
	}
	return mc
}

// SetInnerMethod sets the "inner_method" field.
func (mc *MissionCreate) SetInnerMethod(em enums.InnerMethod) *MissionCreate {
	mc.mutation.SetInnerMethod(em)
	return mc
}

// SetNillableInnerMethod sets the "inner_method" field if the given value is not nil.
func (mc *MissionCreate) SetNillableInnerMethod(em *enums.InnerMethod) *MissionCreate {
	if em != nil {
		mc.SetInnerMethod(*em)
	}
	return mc
}

// SetTempHmacKey sets the "temp_hmac_key" field.
func (mc *MissionCreate) SetTempHmacKey(s string) *MissionCreate {
	mc.mutation.SetTempHmacKey(s)
	return mc
}

// SetNillableTempHmacKey sets the "temp_hmac_key" field if the given value is not nil.
func (mc *MissionCreate) SetNillableTempHmacKey(s *string) *MissionCreate {
	if s != nil {
		mc.SetTempHmacKey(*s)
	}
	return mc
}

// SetTempHmacSecret sets the "temp_hmac_secret" field.
func (mc *MissionCreate) SetTempHmacSecret(s string) *MissionCreate {
	mc.mutation.SetTempHmacSecret(s)
	return mc
}

// SetNillableTempHmacSecret sets the "temp_hmac_secret" field if the given value is not nil.
func (mc *MissionCreate) SetNillableTempHmacSecret(s *string) *MissionCreate {
	if s != nil {
		mc.SetTempHmacSecret(*s)
	}
	return mc
}

// SetSecondHmacKey sets the "second_hmac_key" field.
func (mc *MissionCreate) SetSecondHmacKey(s string) *MissionCreate {
	mc.mutation.SetSecondHmacKey(s)
	return mc
}

// SetNillableSecondHmacKey sets the "second_hmac_key" field if the given value is not nil.
func (mc *MissionCreate) SetNillableSecondHmacKey(s *string) *MissionCreate {
	if s != nil {
		mc.SetSecondHmacKey(*s)
	}
	return mc
}

// SetUsername sets the "username" field.
func (mc *MissionCreate) SetUsername(s string) *MissionCreate {
	mc.mutation.SetUsername(s)
	return mc
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (mc *MissionCreate) SetNillableUsername(s *string) *MissionCreate {
	if s != nil {
		mc.SetUsername(*s)
	}
	return mc
}

// SetPassword sets the "password" field.
func (mc *MissionCreate) SetPassword(s string) *MissionCreate {
	mc.mutation.SetPassword(s)
	return mc
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (mc *MissionCreate) SetNillablePassword(s *string) *MissionCreate {
	if s != nil {
		mc.SetPassword(*s)
	}
	return mc
}

// SetWhiteDeviceIds sets the "white_device_ids" field.
func (mc *MissionCreate) SetWhiteDeviceIds(s []string) *MissionCreate {
	mc.mutation.SetWhiteDeviceIds(s)
	return mc
}

// SetBlackDeviceIds sets the "black_device_ids" field.
func (mc *MissionCreate) SetBlackDeviceIds(s []string) *MissionCreate {
	mc.mutation.SetBlackDeviceIds(s)
	return mc
}

// SetStartedAt sets the "started_at" field.
func (mc *MissionCreate) SetStartedAt(t time.Time) *MissionCreate {
	mc.mutation.SetStartedAt(t)
	return mc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (mc *MissionCreate) SetNillableStartedAt(t *time.Time) *MissionCreate {
	if t != nil {
		mc.SetStartedAt(*t)
	}
	return mc
}

// SetFinishedAt sets the "finished_at" field.
func (mc *MissionCreate) SetFinishedAt(t time.Time) *MissionCreate {
	mc.mutation.SetFinishedAt(t)
	return mc
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (mc *MissionCreate) SetNillableFinishedAt(t *time.Time) *MissionCreate {
	if t != nil {
		mc.SetFinishedAt(*t)
	}
	return mc
}

// SetExpiredAt sets the "expired_at" field.
func (mc *MissionCreate) SetExpiredAt(t time.Time) *MissionCreate {
	mc.mutation.SetExpiredAt(t)
	return mc
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (mc *MissionCreate) SetNillableExpiredAt(t *time.Time) *MissionCreate {
	if t != nil {
		mc.SetExpiredAt(*t)
	}
	return mc
}

// SetFreeAt sets the "free_at" field.
func (mc *MissionCreate) SetFreeAt(t time.Time) *MissionCreate {
	mc.mutation.SetFreeAt(t)
	return mc
}

// SetNillableFreeAt sets the "free_at" field if the given value is not nil.
func (mc *MissionCreate) SetNillableFreeAt(t *time.Time) *MissionCreate {
	if t != nil {
		mc.SetFreeAt(*t)
	}
	return mc
}

// SetCreateWay sets the "create_way" field.
func (mc *MissionCreate) SetCreateWay(ew enums.CreateWay) *MissionCreate {
	mc.mutation.SetCreateWay(ew)
	return mc
}

// SetNillableCreateWay sets the "create_way" field if the given value is not nil.
func (mc *MissionCreate) SetNillableCreateWay(ew *enums.CreateWay) *MissionCreate {
	if ew != nil {
		mc.SetCreateWay(*ew)
	}
	return mc
}

// SetCloseWay sets the "close_way" field.
func (mc *MissionCreate) SetCloseWay(ew enums.CloseWay) *MissionCreate {
	mc.mutation.SetCloseWay(ew)
	return mc
}

// SetNillableCloseWay sets the "close_way" field if the given value is not nil.
func (mc *MissionCreate) SetNillableCloseWay(ew *enums.CloseWay) *MissionCreate {
	if ew != nil {
		mc.SetCloseWay(*ew)
	}
	return mc
}

// SetClosedAt sets the "closed_at" field.
func (mc *MissionCreate) SetClosedAt(t time.Time) *MissionCreate {
	mc.mutation.SetClosedAt(t)
	return mc
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (mc *MissionCreate) SetNillableClosedAt(t *time.Time) *MissionCreate {
	if t != nil {
		mc.SetClosedAt(*t)
	}
	return mc
}

// SetWarningTimes sets the "warning_times" field.
func (mc *MissionCreate) SetWarningTimes(i int64) *MissionCreate {
	mc.mutation.SetWarningTimes(i)
	return mc
}

// SetNillableWarningTimes sets the "warning_times" field if the given value is not nil.
func (mc *MissionCreate) SetNillableWarningTimes(i *int64) *MissionCreate {
	if i != nil {
		mc.SetWarningTimes(*i)
	}
	return mc
}

// SetRemark sets the "remark" field.
func (mc *MissionCreate) SetRemark(s string) *MissionCreate {
	mc.mutation.SetRemark(s)
	return mc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (mc *MissionCreate) SetNillableRemark(s *string) *MissionCreate {
	if s != nil {
		mc.SetRemark(*s)
	}
	return mc
}

// SetUseAuth sets the "use_auth" field.
func (mc *MissionCreate) SetUseAuth(b bool) *MissionCreate {
	mc.mutation.SetUseAuth(b)
	return mc
}

// SetNillableUseAuth sets the "use_auth" field if the given value is not nil.
func (mc *MissionCreate) SetNillableUseAuth(b *bool) *MissionCreate {
	if b != nil {
		mc.SetUseAuth(*b)
	}
	return mc
}

// SetOldMissionID sets the "old_mission_id" field.
func (mc *MissionCreate) SetOldMissionID(i int64) *MissionCreate {
	mc.mutation.SetOldMissionID(i)
	return mc
}

// SetNillableOldMissionID sets the "old_mission_id" field if the given value is not nil.
func (mc *MissionCreate) SetNillableOldMissionID(i *int64) *MissionCreate {
	if i != nil {
		mc.SetOldMissionID(*i)
	}
	return mc
}

// SetTimedShutdown sets the "timed_shutdown" field.
func (mc *MissionCreate) SetTimedShutdown(t time.Time) *MissionCreate {
	mc.mutation.SetTimedShutdown(t)
	return mc
}

// SetNillableTimedShutdown sets the "timed_shutdown" field if the given value is not nil.
func (mc *MissionCreate) SetNillableTimedShutdown(t *time.Time) *MissionCreate {
	if t != nil {
		mc.SetTimedShutdown(*t)
	}
	return mc
}

// SetGpuNum sets the "gpu_num" field.
func (mc *MissionCreate) SetGpuNum(i int) *MissionCreate {
	mc.mutation.SetGpuNum(i)
	return mc
}

// SetNillableGpuNum sets the "gpu_num" field if the given value is not nil.
func (mc *MissionCreate) SetNillableGpuNum(i *int) *MissionCreate {
	if i != nil {
		mc.SetGpuNum(*i)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MissionCreate) SetID(i int64) *MissionCreate {
	mc.mutation.SetID(i)
	return mc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mc *MissionCreate) SetNillableID(i *int64) *MissionCreate {
	if i != nil {
		mc.SetID(*i)
	}
	return mc
}

// SetMissionKind sets the "mission_kind" edge to the MissionKind entity.
func (mc *MissionCreate) SetMissionKind(m *MissionKind) *MissionCreate {
	return mc.SetMissionKindID(m.ID)
}

// SetUser sets the "user" edge to the User entity.
func (mc *MissionCreate) SetUser(u *User) *MissionCreate {
	return mc.SetUserID(u.ID)
}

// SetKeyPair sets the "key_pair" edge to the HmacKeyPair entity.
func (mc *MissionCreate) SetKeyPair(h *HmacKeyPair) *MissionCreate {
	return mc.SetKeyPairID(h.ID)
}

// SetMissionBatch sets the "mission_batch" edge to the MissionBatch entity.
func (mc *MissionCreate) SetMissionBatch(m *MissionBatch) *MissionCreate {
	return mc.SetMissionBatchID(m.ID)
}

// SetOldMission sets the "old_mission" edge to the Mission entity.
func (mc *MissionCreate) SetOldMission(m *Mission) *MissionCreate {
	return mc.SetOldMissionID(m.ID)
}

// AddMissionKeyPairIDs adds the "mission_key_pairs" edge to the MissionKeyPair entity by IDs.
func (mc *MissionCreate) AddMissionKeyPairIDs(ids ...int64) *MissionCreate {
	mc.mutation.AddMissionKeyPairIDs(ids...)
	return mc
}

// AddMissionKeyPairs adds the "mission_key_pairs" edges to the MissionKeyPair entity.
func (mc *MissionCreate) AddMissionKeyPairs(m ...*MissionKeyPair) *MissionCreate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddMissionKeyPairIDs(ids...)
}

// SetMissionConsumeOrderID sets the "mission_consume_order" edge to the MissionConsumeOrder entity by ID.
func (mc *MissionCreate) SetMissionConsumeOrderID(id int64) *MissionCreate {
	mc.mutation.SetMissionConsumeOrderID(id)
	return mc
}

// SetNillableMissionConsumeOrderID sets the "mission_consume_order" edge to the MissionConsumeOrder entity by ID if the given value is not nil.
func (mc *MissionCreate) SetNillableMissionConsumeOrderID(id *int64) *MissionCreate {
	if id != nil {
		mc = mc.SetMissionConsumeOrderID(*id)
	}
	return mc
}

// SetMissionConsumeOrder sets the "mission_consume_order" edge to the MissionConsumeOrder entity.
func (mc *MissionCreate) SetMissionConsumeOrder(m *MissionConsumeOrder) *MissionCreate {
	return mc.SetMissionConsumeOrderID(m.ID)
}

// AddMissionProduceOrderIDs adds the "mission_produce_orders" edge to the MissionProduceOrder entity by IDs.
func (mc *MissionCreate) AddMissionProduceOrderIDs(ids ...int64) *MissionCreate {
	mc.mutation.AddMissionProduceOrderIDs(ids...)
	return mc
}

// AddMissionProduceOrders adds the "mission_produce_orders" edges to the MissionProduceOrder entity.
func (mc *MissionCreate) AddMissionProduceOrders(m ...*MissionProduceOrder) *MissionCreate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddMissionProduceOrderIDs(ids...)
}

// AddMissionProductionIDs adds the "mission_productions" edge to the MissionProduction entity by IDs.
func (mc *MissionCreate) AddMissionProductionIDs(ids ...int64) *MissionCreate {
	mc.mutation.AddMissionProductionIDs(ids...)
	return mc
}

// AddMissionProductions adds the "mission_productions" edges to the MissionProduction entity.
func (mc *MissionCreate) AddMissionProductions(m ...*MissionProduction) *MissionCreate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddMissionProductionIDs(ids...)
}

// AddMissionOrderIDs adds the "mission_orders" edge to the MissionOrder entity by IDs.
func (mc *MissionCreate) AddMissionOrderIDs(ids ...int64) *MissionCreate {
	mc.mutation.AddMissionOrderIDs(ids...)
	return mc
}

// AddMissionOrders adds the "mission_orders" edges to the MissionOrder entity.
func (mc *MissionCreate) AddMissionOrders(m ...*MissionOrder) *MissionCreate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddMissionOrderIDs(ids...)
}

// AddRenewalAgreementIDs adds the "renewal_agreements" edge to the RenewalAgreement entity by IDs.
func (mc *MissionCreate) AddRenewalAgreementIDs(ids ...int64) *MissionCreate {
	mc.mutation.AddRenewalAgreementIDs(ids...)
	return mc
}

// AddRenewalAgreements adds the "renewal_agreements" edges to the RenewalAgreement entity.
func (mc *MissionCreate) AddRenewalAgreements(r ...*RenewalAgreement) *MissionCreate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mc.AddRenewalAgreementIDs(ids...)
}

// AddMissionExtraServiceIDs adds the "mission_extra_services" edge to the MissionExtraService entity by IDs.
func (mc *MissionCreate) AddMissionExtraServiceIDs(ids ...int64) *MissionCreate {
	mc.mutation.AddMissionExtraServiceIDs(ids...)
	return mc
}

// AddMissionExtraServices adds the "mission_extra_services" edges to the MissionExtraService entity.
func (mc *MissionCreate) AddMissionExtraServices(m ...*MissionExtraService) *MissionCreate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddMissionExtraServiceIDs(ids...)
}

// AddExtraServiceIDs adds the "extra_services" edge to the ExtraService entity by IDs.
func (mc *MissionCreate) AddExtraServiceIDs(ids ...int64) *MissionCreate {
	mc.mutation.AddExtraServiceIDs(ids...)
	return mc
}

// AddExtraServices adds the "extra_services" edges to the ExtraService entity.
func (mc *MissionCreate) AddExtraServices(e ...*ExtraService) *MissionCreate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return mc.AddExtraServiceIDs(ids...)
}

// AddExtraServiceOrderIDs adds the "extra_service_orders" edge to the ExtraServiceOrder entity by IDs.
func (mc *MissionCreate) AddExtraServiceOrderIDs(ids ...int64) *MissionCreate {
	mc.mutation.AddExtraServiceOrderIDs(ids...)
	return mc
}

// AddExtraServiceOrders adds the "extra_service_orders" edges to the ExtraServiceOrder entity.
func (mc *MissionCreate) AddExtraServiceOrders(e ...*ExtraServiceOrder) *MissionCreate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return mc.AddExtraServiceOrderIDs(ids...)
}

// AddRebootMissionIDs adds the "reboot_missions" edge to the Mission entity by IDs.
func (mc *MissionCreate) AddRebootMissionIDs(ids ...int64) *MissionCreate {
	mc.mutation.AddRebootMissionIDs(ids...)
	return mc
}

// AddRebootMissions adds the "reboot_missions" edges to the Mission entity.
func (mc *MissionCreate) AddRebootMissions(m ...*Mission) *MissionCreate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddRebootMissionIDs(ids...)
}

// SetMissionFailedFeedbackID sets the "mission_failed_feedback" edge to the MissionFailedFeedback entity by ID.
func (mc *MissionCreate) SetMissionFailedFeedbackID(id int64) *MissionCreate {
	mc.mutation.SetMissionFailedFeedbackID(id)
	return mc
}

// SetNillableMissionFailedFeedbackID sets the "mission_failed_feedback" edge to the MissionFailedFeedback entity by ID if the given value is not nil.
func (mc *MissionCreate) SetNillableMissionFailedFeedbackID(id *int64) *MissionCreate {
	if id != nil {
		mc = mc.SetMissionFailedFeedbackID(*id)
	}
	return mc
}

// SetMissionFailedFeedback sets the "mission_failed_feedback" edge to the MissionFailedFeedback entity.
func (mc *MissionCreate) SetMissionFailedFeedback(m *MissionFailedFeedback) *MissionCreate {
	return mc.SetMissionFailedFeedbackID(m.ID)
}

// Mutation returns the MissionMutation object of the builder.
func (mc *MissionCreate) Mutation() *MissionMutation {
	return mc.mutation
}

// Save creates the Mission in the database.
func (mc *MissionCreate) Save(ctx context.Context) (*Mission, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MissionCreate) SaveX(ctx context.Context) *Mission {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MissionCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MissionCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MissionCreate) defaults() {
	if _, ok := mc.mutation.CreatedBy(); !ok {
		v := mission.DefaultCreatedBy
		mc.mutation.SetCreatedBy(v)
	}
	if _, ok := mc.mutation.UpdatedBy(); !ok {
		v := mission.DefaultUpdatedBy
		mc.mutation.SetUpdatedBy(v)
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := mission.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		v := mission.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mc.mutation.DeletedAt(); !ok {
		v := mission.DefaultDeletedAt
		mc.mutation.SetDeletedAt(v)
	}
	if _, ok := mc.mutation.GetType(); !ok {
		v := mission.DefaultType
		mc.mutation.SetType(v)
	}
	if _, ok := mc.mutation.MissionKindID(); !ok {
		v := mission.DefaultMissionKindID
		mc.mutation.SetMissionKindID(v)
	}
	if _, ok := mc.mutation.Body(); !ok {
		v := mission.DefaultBody
		mc.mutation.SetBody(v)
	}
	if _, ok := mc.mutation.CallBackURL(); !ok {
		v := mission.DefaultCallBackURL
		mc.mutation.SetCallBackURL(v)
	}
	if _, ok := mc.mutation.Status(); !ok {
		v := mission.DefaultStatus
		mc.mutation.SetStatus(v)
	}
	if _, ok := mc.mutation.Result(); !ok {
		v := mission.DefaultResult
		mc.mutation.SetResult(v)
	}
	if _, ok := mc.mutation.State(); !ok {
		v := mission.DefaultState
		mc.mutation.SetState(v)
	}
	if _, ok := mc.mutation.Urls(); !ok {
		v := mission.DefaultUrls
		mc.mutation.SetUrls(v)
	}
	if _, ok := mc.mutation.KeyPairID(); !ok {
		v := mission.DefaultKeyPairID
		mc.mutation.SetKeyPairID(v)
	}
	if _, ok := mc.mutation.UserID(); !ok {
		v := mission.DefaultUserID
		mc.mutation.SetUserID(v)
	}
	if _, ok := mc.mutation.MissionBatchID(); !ok {
		v := mission.DefaultMissionBatchID
		mc.mutation.SetMissionBatchID(v)
	}
	if _, ok := mc.mutation.MissionBatchNumber(); !ok {
		v := mission.DefaultMissionBatchNumber
		mc.mutation.SetMissionBatchNumber(v)
	}
	if _, ok := mc.mutation.GpuVersion(); !ok {
		v := mission.DefaultGpuVersion
		mc.mutation.SetGpuVersion(v)
	}
	if _, ok := mc.mutation.UnitCep(); !ok {
		v := mission.DefaultUnitCep
		mc.mutation.SetUnitCep(v)
	}
	if _, ok := mc.mutation.RespStatusCode(); !ok {
		v := mission.DefaultRespStatusCode
		mc.mutation.SetRespStatusCode(v)
	}
	if _, ok := mc.mutation.RespBody(); !ok {
		v := mission.DefaultRespBody
		mc.mutation.SetRespBody(v)
	}
	if _, ok := mc.mutation.InnerURI(); !ok {
		v := mission.DefaultInnerURI
		mc.mutation.SetInnerURI(v)
	}
	if _, ok := mc.mutation.InnerMethod(); !ok {
		v := mission.DefaultInnerMethod
		mc.mutation.SetInnerMethod(v)
	}
	if _, ok := mc.mutation.TempHmacKey(); !ok {
		v := mission.DefaultTempHmacKey
		mc.mutation.SetTempHmacKey(v)
	}
	if _, ok := mc.mutation.TempHmacSecret(); !ok {
		v := mission.DefaultTempHmacSecret
		mc.mutation.SetTempHmacSecret(v)
	}
	if _, ok := mc.mutation.SecondHmacKey(); !ok {
		v := mission.DefaultSecondHmacKey
		mc.mutation.SetSecondHmacKey(v)
	}
	if _, ok := mc.mutation.Username(); !ok {
		v := mission.DefaultUsername
		mc.mutation.SetUsername(v)
	}
	if _, ok := mc.mutation.Password(); !ok {
		v := mission.DefaultPassword
		mc.mutation.SetPassword(v)
	}
	if _, ok := mc.mutation.StartedAt(); !ok {
		v := mission.DefaultStartedAt
		mc.mutation.SetStartedAt(v)
	}
	if _, ok := mc.mutation.FinishedAt(); !ok {
		v := mission.DefaultFinishedAt
		mc.mutation.SetFinishedAt(v)
	}
	if _, ok := mc.mutation.ExpiredAt(); !ok {
		v := mission.DefaultExpiredAt
		mc.mutation.SetExpiredAt(v)
	}
	if _, ok := mc.mutation.FreeAt(); !ok {
		v := mission.DefaultFreeAt
		mc.mutation.SetFreeAt(v)
	}
	if _, ok := mc.mutation.CreateWay(); !ok {
		v := mission.DefaultCreateWay
		mc.mutation.SetCreateWay(v)
	}
	if _, ok := mc.mutation.CloseWay(); !ok {
		v := mission.DefaultCloseWay
		mc.mutation.SetCloseWay(v)
	}
	if _, ok := mc.mutation.ClosedAt(); !ok {
		v := mission.DefaultClosedAt
		mc.mutation.SetClosedAt(v)
	}
	if _, ok := mc.mutation.WarningTimes(); !ok {
		v := mission.DefaultWarningTimes
		mc.mutation.SetWarningTimes(v)
	}
	if _, ok := mc.mutation.Remark(); !ok {
		v := mission.DefaultRemark
		mc.mutation.SetRemark(v)
	}
	if _, ok := mc.mutation.UseAuth(); !ok {
		v := mission.DefaultUseAuth
		mc.mutation.SetUseAuth(v)
	}
	if _, ok := mc.mutation.OldMissionID(); !ok {
		v := mission.DefaultOldMissionID
		mc.mutation.SetOldMissionID(v)
	}
	if _, ok := mc.mutation.TimedShutdown(); !ok {
		v := mission.DefaultTimedShutdown
		mc.mutation.SetTimedShutdown(v)
	}
	if _, ok := mc.mutation.GpuNum(); !ok {
		v := mission.DefaultGpuNum
		mc.mutation.SetGpuNum(v)
	}
	if _, ok := mc.mutation.ID(); !ok {
		v := mission.DefaultID()
		mc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MissionCreate) check() error {
	if _, ok := mc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "Mission.created_by"`)}
	}
	if _, ok := mc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "Mission.updated_by"`)}
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "Mission.created_at"`)}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "Mission.updated_at"`)}
	}
	if _, ok := mc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "Mission.deleted_at"`)}
	}
	if _, ok := mc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`cep_ent: missing required field "Mission.type"`)}
	}
	if v, ok := mc.mutation.GetType(); ok {
		if err := mission.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "Mission.type": %w`, err)}
		}
	}
	if _, ok := mc.mutation.MissionKindID(); !ok {
		return &ValidationError{Name: "mission_kind_id", err: errors.New(`cep_ent: missing required field "Mission.mission_kind_id"`)}
	}
	if _, ok := mc.mutation.Body(); !ok {
		return &ValidationError{Name: "body", err: errors.New(`cep_ent: missing required field "Mission.body"`)}
	}
	if _, ok := mc.mutation.CallBackURL(); !ok {
		return &ValidationError{Name: "call_back_url", err: errors.New(`cep_ent: missing required field "Mission.call_back_url"`)}
	}
	if _, ok := mc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`cep_ent: missing required field "Mission.status"`)}
	}
	if v, ok := mc.mutation.Status(); ok {
		if err := mission.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "Mission.status": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Result(); !ok {
		return &ValidationError{Name: "result", err: errors.New(`cep_ent: missing required field "Mission.result"`)}
	}
	if v, ok := mc.mutation.Result(); ok {
		if err := mission.ResultValidator(v); err != nil {
			return &ValidationError{Name: "result", err: fmt.Errorf(`cep_ent: validator failed for field "Mission.result": %w`, err)}
		}
	}
	if _, ok := mc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`cep_ent: missing required field "Mission.state"`)}
	}
	if v, ok := mc.mutation.State(); ok {
		if err := mission.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`cep_ent: validator failed for field "Mission.state": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Urls(); !ok {
		return &ValidationError{Name: "urls", err: errors.New(`cep_ent: missing required field "Mission.urls"`)}
	}
	if _, ok := mc.mutation.KeyPairID(); !ok {
		return &ValidationError{Name: "key_pair_id", err: errors.New(`cep_ent: missing required field "Mission.key_pair_id"`)}
	}
	if _, ok := mc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "Mission.user_id"`)}
	}
	if _, ok := mc.mutation.MissionBatchID(); !ok {
		return &ValidationError{Name: "mission_batch_id", err: errors.New(`cep_ent: missing required field "Mission.mission_batch_id"`)}
	}
	if _, ok := mc.mutation.MissionBatchNumber(); !ok {
		return &ValidationError{Name: "mission_batch_number", err: errors.New(`cep_ent: missing required field "Mission.mission_batch_number"`)}
	}
	if _, ok := mc.mutation.GpuVersion(); !ok {
		return &ValidationError{Name: "gpu_version", err: errors.New(`cep_ent: missing required field "Mission.gpu_version"`)}
	}
	if v, ok := mc.mutation.GpuVersion(); ok {
		if err := mission.GpuVersionValidator(v); err != nil {
			return &ValidationError{Name: "gpu_version", err: fmt.Errorf(`cep_ent: validator failed for field "Mission.gpu_version": %w`, err)}
		}
	}
	if _, ok := mc.mutation.UnitCep(); !ok {
		return &ValidationError{Name: "unit_cep", err: errors.New(`cep_ent: missing required field "Mission.unit_cep"`)}
	}
	if _, ok := mc.mutation.RespStatusCode(); !ok {
		return &ValidationError{Name: "resp_status_code", err: errors.New(`cep_ent: missing required field "Mission.resp_status_code"`)}
	}
	if _, ok := mc.mutation.RespBody(); !ok {
		return &ValidationError{Name: "resp_body", err: errors.New(`cep_ent: missing required field "Mission.resp_body"`)}
	}
	if _, ok := mc.mutation.InnerURI(); !ok {
		return &ValidationError{Name: "inner_uri", err: errors.New(`cep_ent: missing required field "Mission.inner_uri"`)}
	}
	if _, ok := mc.mutation.InnerMethod(); !ok {
		return &ValidationError{Name: "inner_method", err: errors.New(`cep_ent: missing required field "Mission.inner_method"`)}
	}
	if v, ok := mc.mutation.InnerMethod(); ok {
		if err := mission.InnerMethodValidator(v); err != nil {
			return &ValidationError{Name: "inner_method", err: fmt.Errorf(`cep_ent: validator failed for field "Mission.inner_method": %w`, err)}
		}
	}
	if _, ok := mc.mutation.TempHmacKey(); !ok {
		return &ValidationError{Name: "temp_hmac_key", err: errors.New(`cep_ent: missing required field "Mission.temp_hmac_key"`)}
	}
	if _, ok := mc.mutation.TempHmacSecret(); !ok {
		return &ValidationError{Name: "temp_hmac_secret", err: errors.New(`cep_ent: missing required field "Mission.temp_hmac_secret"`)}
	}
	if _, ok := mc.mutation.SecondHmacKey(); !ok {
		return &ValidationError{Name: "second_hmac_key", err: errors.New(`cep_ent: missing required field "Mission.second_hmac_key"`)}
	}
	if _, ok := mc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`cep_ent: missing required field "Mission.username"`)}
	}
	if _, ok := mc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`cep_ent: missing required field "Mission.password"`)}
	}
	if _, ok := mc.mutation.FreeAt(); !ok {
		return &ValidationError{Name: "free_at", err: errors.New(`cep_ent: missing required field "Mission.free_at"`)}
	}
	if _, ok := mc.mutation.CreateWay(); !ok {
		return &ValidationError{Name: "create_way", err: errors.New(`cep_ent: missing required field "Mission.create_way"`)}
	}
	if v, ok := mc.mutation.CreateWay(); ok {
		if err := mission.CreateWayValidator(v); err != nil {
			return &ValidationError{Name: "create_way", err: fmt.Errorf(`cep_ent: validator failed for field "Mission.create_way": %w`, err)}
		}
	}
	if _, ok := mc.mutation.CloseWay(); !ok {
		return &ValidationError{Name: "close_way", err: errors.New(`cep_ent: missing required field "Mission.close_way"`)}
	}
	if v, ok := mc.mutation.CloseWay(); ok {
		if err := mission.CloseWayValidator(v); err != nil {
			return &ValidationError{Name: "close_way", err: fmt.Errorf(`cep_ent: validator failed for field "Mission.close_way": %w`, err)}
		}
	}
	if _, ok := mc.mutation.WarningTimes(); !ok {
		return &ValidationError{Name: "warning_times", err: errors.New(`cep_ent: missing required field "Mission.warning_times"`)}
	}
	if _, ok := mc.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`cep_ent: missing required field "Mission.remark"`)}
	}
	if _, ok := mc.mutation.UseAuth(); !ok {
		return &ValidationError{Name: "use_auth", err: errors.New(`cep_ent: missing required field "Mission.use_auth"`)}
	}
	if _, ok := mc.mutation.OldMissionID(); !ok {
		return &ValidationError{Name: "old_mission_id", err: errors.New(`cep_ent: missing required field "Mission.old_mission_id"`)}
	}
	if _, ok := mc.mutation.GpuNum(); !ok {
		return &ValidationError{Name: "gpu_num", err: errors.New(`cep_ent: missing required field "Mission.gpu_num"`)}
	}
	if _, ok := mc.mutation.MissionKindID(); !ok {
		return &ValidationError{Name: "mission_kind", err: errors.New(`cep_ent: missing required edge "Mission.mission_kind"`)}
	}
	if _, ok := mc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "Mission.user"`)}
	}
	if _, ok := mc.mutation.KeyPairID(); !ok {
		return &ValidationError{Name: "key_pair", err: errors.New(`cep_ent: missing required edge "Mission.key_pair"`)}
	}
	if _, ok := mc.mutation.MissionBatchID(); !ok {
		return &ValidationError{Name: "mission_batch", err: errors.New(`cep_ent: missing required edge "Mission.mission_batch"`)}
	}
	if _, ok := mc.mutation.OldMissionID(); !ok {
		return &ValidationError{Name: "old_mission", err: errors.New(`cep_ent: missing required edge "Mission.old_mission"`)}
	}
	return nil
}

func (mc *MissionCreate) sqlSave(ctx context.Context) (*Mission, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec, err := mc.createSpec()
	if err != nil {
		return nil, err
	}
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MissionCreate) createSpec() (*Mission, *sqlgraph.CreateSpec, error) {
	var (
		_node = &Mission{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(mission.Table, sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = mc.conflict
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.CreatedBy(); ok {
		_spec.SetField(mission.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := mc.mutation.UpdatedBy(); ok {
		_spec.SetField(mission.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(mission.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.SetField(mission.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mc.mutation.DeletedAt(); ok {
		_spec.SetField(mission.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := mc.mutation.GetType(); ok {
		_spec.SetField(mission.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := mc.mutation.Body(); ok {
		_spec.SetField(mission.FieldBody, field.TypeString, value)
		_node.Body = value
	}
	if value, ok := mc.mutation.CallBackURL(); ok {
		_spec.SetField(mission.FieldCallBackURL, field.TypeString, value)
		_node.CallBackURL = value
	}
	if value, ok := mc.mutation.CallBackInfo(); ok {
		_spec.SetField(mission.FieldCallBackInfo, field.TypeString, value)
		_node.CallBackInfo = &value
	}
	if value, ok := mc.mutation.CallBackData(); ok {
		_spec.SetField(mission.FieldCallBackData, field.TypeBytes, value)
		_node.CallBackData = value
	}
	if value, ok := mc.mutation.Status(); ok {
		_spec.SetField(mission.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := mc.mutation.Result(); ok {
		_spec.SetField(mission.FieldResult, field.TypeEnum, value)
		_node.Result = value
	}
	if value, ok := mc.mutation.State(); ok {
		_spec.SetField(mission.FieldState, field.TypeEnum, value)
		_node.State = value
	}
	if value, ok := mc.mutation.ResultUrls(); ok {
		_spec.SetField(mission.FieldResultUrls, field.TypeJSON, value)
		_node.ResultUrls = value
	}
	if value, ok := mc.mutation.Urls(); ok {
		_spec.SetField(mission.FieldUrls, field.TypeString, value)
		_node.Urls = value
	}
	if value, ok := mc.mutation.MissionBatchNumber(); ok {
		_spec.SetField(mission.FieldMissionBatchNumber, field.TypeString, value)
		_node.MissionBatchNumber = value
	}
	if value, ok := mc.mutation.GpuVersion(); ok {
		_spec.SetField(mission.FieldGpuVersion, field.TypeEnum, value)
		_node.GpuVersion = value
	}
	if value, ok := mc.mutation.UnitCep(); ok {
		_spec.SetField(mission.FieldUnitCep, field.TypeInt64, value)
		_node.UnitCep = value
	}
	if value, ok := mc.mutation.RespStatusCode(); ok {
		_spec.SetField(mission.FieldRespStatusCode, field.TypeInt32, value)
		_node.RespStatusCode = value
	}
	if value, ok := mc.mutation.RespBody(); ok {
		_spec.SetField(mission.FieldRespBody, field.TypeString, value)
		_node.RespBody = value
	}
	if value, ok := mc.mutation.InnerURI(); ok {
		_spec.SetField(mission.FieldInnerURI, field.TypeString, value)
		_node.InnerURI = value
	}
	if value, ok := mc.mutation.InnerMethod(); ok {
		_spec.SetField(mission.FieldInnerMethod, field.TypeEnum, value)
		_node.InnerMethod = value
	}
	if value, ok := mc.mutation.TempHmacKey(); ok {
		_spec.SetField(mission.FieldTempHmacKey, field.TypeString, value)
		_node.TempHmacKey = value
	}
	if value, ok := mc.mutation.TempHmacSecret(); ok {
		_spec.SetField(mission.FieldTempHmacSecret, field.TypeString, value)
		_node.TempHmacSecret = value
	}
	if value, ok := mc.mutation.SecondHmacKey(); ok {
		_spec.SetField(mission.FieldSecondHmacKey, field.TypeString, value)
		_node.SecondHmacKey = value
	}
	if value, ok := mc.mutation.Username(); ok {
		_spec.SetField(mission.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := mc.mutation.Password(); ok {
		_spec.SetField(mission.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := mc.mutation.WhiteDeviceIds(); ok {
		vv, err := mission.ValueScanner.WhiteDeviceIds.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(mission.FieldWhiteDeviceIds, field.TypeString, vv)
		_node.WhiteDeviceIds = value
	}
	if value, ok := mc.mutation.BlackDeviceIds(); ok {
		vv, err := mission.ValueScanner.BlackDeviceIds.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(mission.FieldBlackDeviceIds, field.TypeString, vv)
		_node.BlackDeviceIds = value
	}
	if value, ok := mc.mutation.StartedAt(); ok {
		_spec.SetField(mission.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = &value
	}
	if value, ok := mc.mutation.FinishedAt(); ok {
		_spec.SetField(mission.FieldFinishedAt, field.TypeTime, value)
		_node.FinishedAt = &value
	}
	if value, ok := mc.mutation.ExpiredAt(); ok {
		_spec.SetField(mission.FieldExpiredAt, field.TypeTime, value)
		_node.ExpiredAt = &value
	}
	if value, ok := mc.mutation.FreeAt(); ok {
		_spec.SetField(mission.FieldFreeAt, field.TypeTime, value)
		_node.FreeAt = value
	}
	if value, ok := mc.mutation.CreateWay(); ok {
		_spec.SetField(mission.FieldCreateWay, field.TypeEnum, value)
		_node.CreateWay = value
	}
	if value, ok := mc.mutation.CloseWay(); ok {
		_spec.SetField(mission.FieldCloseWay, field.TypeEnum, value)
		_node.CloseWay = value
	}
	if value, ok := mc.mutation.ClosedAt(); ok {
		_spec.SetField(mission.FieldClosedAt, field.TypeTime, value)
		_node.ClosedAt = &value
	}
	if value, ok := mc.mutation.WarningTimes(); ok {
		_spec.SetField(mission.FieldWarningTimes, field.TypeInt64, value)
		_node.WarningTimes = value
	}
	if value, ok := mc.mutation.Remark(); ok {
		_spec.SetField(mission.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := mc.mutation.UseAuth(); ok {
		_spec.SetField(mission.FieldUseAuth, field.TypeBool, value)
		_node.UseAuth = value
	}
	if value, ok := mc.mutation.TimedShutdown(); ok {
		_spec.SetField(mission.FieldTimedShutdown, field.TypeTime, value)
		_node.TimedShutdown = &value
	}
	if value, ok := mc.mutation.GpuNum(); ok {
		_spec.SetField(mission.FieldGpuNum, field.TypeInt, value)
		_node.GpuNum = value
	}
	if nodes := mc.mutation.MissionKindIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mission.MissionKindTable,
			Columns: []string{mission.MissionKindColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionkind.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MissionKindID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mission.UserTable,
			Columns: []string{mission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.KeyPairIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mission.KeyPairTable,
			Columns: []string{mission.KeyPairColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hmackeypair.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.KeyPairID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.MissionBatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mission.MissionBatchTable,
			Columns: []string{mission.MissionBatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionbatch.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MissionBatchID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.OldMissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mission.OldMissionTable,
			Columns: []string{mission.OldMissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OldMissionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.MissionKeyPairsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mission.MissionKeyPairsTable,
			Columns: []string{mission.MissionKeyPairsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionkeypair.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.MissionConsumeOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   mission.MissionConsumeOrderTable,
			Columns: []string{mission.MissionConsumeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.MissionProduceOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mission.MissionProduceOrdersTable,
			Columns: []string{mission.MissionProduceOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.MissionProductionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mission.MissionProductionsTable,
			Columns: []string{mission.MissionProductionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduction.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.MissionOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mission.MissionOrdersTable,
			Columns: []string{mission.MissionOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.RenewalAgreementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mission.RenewalAgreementsTable,
			Columns: []string{mission.RenewalAgreementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(renewalagreement.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.MissionExtraServicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mission.MissionExtraServicesTable,
			Columns: []string{mission.MissionExtraServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionextraservice.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.ExtraServicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mission.ExtraServicesTable,
			Columns: []string{mission.ExtraServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extraservice.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.ExtraServiceOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mission.ExtraServiceOrdersTable,
			Columns: []string{mission.ExtraServiceOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extraserviceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.RebootMissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mission.RebootMissionsTable,
			Columns: []string{mission.RebootMissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.MissionFailedFeedbackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   mission.MissionFailedFeedbackTable,
			Columns: []string{mission.MissionFailedFeedbackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionfailedfeedback.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec, nil
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Mission.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MissionUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (mc *MissionCreate) OnConflict(opts ...sql.ConflictOption) *MissionUpsertOne {
	mc.conflict = opts
	return &MissionUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Mission.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mc *MissionCreate) OnConflictColumns(columns ...string) *MissionUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &MissionUpsertOne{
		create: mc,
	}
}

type (
	// MissionUpsertOne is the builder for "upsert"-ing
	//  one Mission node.
	MissionUpsertOne struct {
		create *MissionCreate
	}

	// MissionUpsert is the "OnConflict" setter.
	MissionUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *MissionUpsert) SetCreatedBy(v int64) *MissionUpsert {
	u.Set(mission.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MissionUpsert) UpdateCreatedBy() *MissionUpsert {
	u.SetExcluded(mission.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *MissionUpsert) AddCreatedBy(v int64) *MissionUpsert {
	u.Add(mission.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MissionUpsert) SetUpdatedBy(v int64) *MissionUpsert {
	u.Set(mission.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MissionUpsert) UpdateUpdatedBy() *MissionUpsert {
	u.SetExcluded(mission.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MissionUpsert) AddUpdatedBy(v int64) *MissionUpsert {
	u.Add(mission.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MissionUpsert) SetUpdatedAt(v time.Time) *MissionUpsert {
	u.Set(mission.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MissionUpsert) UpdateUpdatedAt() *MissionUpsert {
	u.SetExcluded(mission.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MissionUpsert) SetDeletedAt(v time.Time) *MissionUpsert {
	u.Set(mission.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MissionUpsert) UpdateDeletedAt() *MissionUpsert {
	u.SetExcluded(mission.FieldDeletedAt)
	return u
}

// SetType sets the "type" field.
func (u *MissionUpsert) SetType(v enums.MissionType) *MissionUpsert {
	u.Set(mission.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MissionUpsert) UpdateType() *MissionUpsert {
	u.SetExcluded(mission.FieldType)
	return u
}

// SetMissionKindID sets the "mission_kind_id" field.
func (u *MissionUpsert) SetMissionKindID(v int64) *MissionUpsert {
	u.Set(mission.FieldMissionKindID, v)
	return u
}

// UpdateMissionKindID sets the "mission_kind_id" field to the value that was provided on create.
func (u *MissionUpsert) UpdateMissionKindID() *MissionUpsert {
	u.SetExcluded(mission.FieldMissionKindID)
	return u
}

// SetBody sets the "body" field.
func (u *MissionUpsert) SetBody(v string) *MissionUpsert {
	u.Set(mission.FieldBody, v)
	return u
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *MissionUpsert) UpdateBody() *MissionUpsert {
	u.SetExcluded(mission.FieldBody)
	return u
}

// SetCallBackURL sets the "call_back_url" field.
func (u *MissionUpsert) SetCallBackURL(v string) *MissionUpsert {
	u.Set(mission.FieldCallBackURL, v)
	return u
}

// UpdateCallBackURL sets the "call_back_url" field to the value that was provided on create.
func (u *MissionUpsert) UpdateCallBackURL() *MissionUpsert {
	u.SetExcluded(mission.FieldCallBackURL)
	return u
}

// SetCallBackInfo sets the "call_back_info" field.
func (u *MissionUpsert) SetCallBackInfo(v string) *MissionUpsert {
	u.Set(mission.FieldCallBackInfo, v)
	return u
}

// UpdateCallBackInfo sets the "call_back_info" field to the value that was provided on create.
func (u *MissionUpsert) UpdateCallBackInfo() *MissionUpsert {
	u.SetExcluded(mission.FieldCallBackInfo)
	return u
}

// ClearCallBackInfo clears the value of the "call_back_info" field.
func (u *MissionUpsert) ClearCallBackInfo() *MissionUpsert {
	u.SetNull(mission.FieldCallBackInfo)
	return u
}

// SetCallBackData sets the "call_back_data" field.
func (u *MissionUpsert) SetCallBackData(v []byte) *MissionUpsert {
	u.Set(mission.FieldCallBackData, v)
	return u
}

// UpdateCallBackData sets the "call_back_data" field to the value that was provided on create.
func (u *MissionUpsert) UpdateCallBackData() *MissionUpsert {
	u.SetExcluded(mission.FieldCallBackData)
	return u
}

// ClearCallBackData clears the value of the "call_back_data" field.
func (u *MissionUpsert) ClearCallBackData() *MissionUpsert {
	u.SetNull(mission.FieldCallBackData)
	return u
}

// SetStatus sets the "status" field.
func (u *MissionUpsert) SetStatus(v enums.MissionStatus) *MissionUpsert {
	u.Set(mission.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MissionUpsert) UpdateStatus() *MissionUpsert {
	u.SetExcluded(mission.FieldStatus)
	return u
}

// SetResult sets the "result" field.
func (u *MissionUpsert) SetResult(v enums.MissionResult) *MissionUpsert {
	u.Set(mission.FieldResult, v)
	return u
}

// UpdateResult sets the "result" field to the value that was provided on create.
func (u *MissionUpsert) UpdateResult() *MissionUpsert {
	u.SetExcluded(mission.FieldResult)
	return u
}

// SetState sets the "state" field.
func (u *MissionUpsert) SetState(v enums.MissionState) *MissionUpsert {
	u.Set(mission.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *MissionUpsert) UpdateState() *MissionUpsert {
	u.SetExcluded(mission.FieldState)
	return u
}

// SetResultUrls sets the "result_urls" field.
func (u *MissionUpsert) SetResultUrls(v []string) *MissionUpsert {
	u.Set(mission.FieldResultUrls, v)
	return u
}

// UpdateResultUrls sets the "result_urls" field to the value that was provided on create.
func (u *MissionUpsert) UpdateResultUrls() *MissionUpsert {
	u.SetExcluded(mission.FieldResultUrls)
	return u
}

// ClearResultUrls clears the value of the "result_urls" field.
func (u *MissionUpsert) ClearResultUrls() *MissionUpsert {
	u.SetNull(mission.FieldResultUrls)
	return u
}

// SetUrls sets the "urls" field.
func (u *MissionUpsert) SetUrls(v string) *MissionUpsert {
	u.Set(mission.FieldUrls, v)
	return u
}

// UpdateUrls sets the "urls" field to the value that was provided on create.
func (u *MissionUpsert) UpdateUrls() *MissionUpsert {
	u.SetExcluded(mission.FieldUrls)
	return u
}

// SetKeyPairID sets the "key_pair_id" field.
func (u *MissionUpsert) SetKeyPairID(v int64) *MissionUpsert {
	u.Set(mission.FieldKeyPairID, v)
	return u
}

// UpdateKeyPairID sets the "key_pair_id" field to the value that was provided on create.
func (u *MissionUpsert) UpdateKeyPairID() *MissionUpsert {
	u.SetExcluded(mission.FieldKeyPairID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *MissionUpsert) SetUserID(v int64) *MissionUpsert {
	u.Set(mission.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *MissionUpsert) UpdateUserID() *MissionUpsert {
	u.SetExcluded(mission.FieldUserID)
	return u
}

// SetMissionBatchID sets the "mission_batch_id" field.
func (u *MissionUpsert) SetMissionBatchID(v int64) *MissionUpsert {
	u.Set(mission.FieldMissionBatchID, v)
	return u
}

// UpdateMissionBatchID sets the "mission_batch_id" field to the value that was provided on create.
func (u *MissionUpsert) UpdateMissionBatchID() *MissionUpsert {
	u.SetExcluded(mission.FieldMissionBatchID)
	return u
}

// SetMissionBatchNumber sets the "mission_batch_number" field.
func (u *MissionUpsert) SetMissionBatchNumber(v string) *MissionUpsert {
	u.Set(mission.FieldMissionBatchNumber, v)
	return u
}

// UpdateMissionBatchNumber sets the "mission_batch_number" field to the value that was provided on create.
func (u *MissionUpsert) UpdateMissionBatchNumber() *MissionUpsert {
	u.SetExcluded(mission.FieldMissionBatchNumber)
	return u
}

// SetGpuVersion sets the "gpu_version" field.
func (u *MissionUpsert) SetGpuVersion(v enums.GpuVersion) *MissionUpsert {
	u.Set(mission.FieldGpuVersion, v)
	return u
}

// UpdateGpuVersion sets the "gpu_version" field to the value that was provided on create.
func (u *MissionUpsert) UpdateGpuVersion() *MissionUpsert {
	u.SetExcluded(mission.FieldGpuVersion)
	return u
}

// SetUnitCep sets the "unit_cep" field.
func (u *MissionUpsert) SetUnitCep(v int64) *MissionUpsert {
	u.Set(mission.FieldUnitCep, v)
	return u
}

// UpdateUnitCep sets the "unit_cep" field to the value that was provided on create.
func (u *MissionUpsert) UpdateUnitCep() *MissionUpsert {
	u.SetExcluded(mission.FieldUnitCep)
	return u
}

// AddUnitCep adds v to the "unit_cep" field.
func (u *MissionUpsert) AddUnitCep(v int64) *MissionUpsert {
	u.Add(mission.FieldUnitCep, v)
	return u
}

// SetRespStatusCode sets the "resp_status_code" field.
func (u *MissionUpsert) SetRespStatusCode(v int32) *MissionUpsert {
	u.Set(mission.FieldRespStatusCode, v)
	return u
}

// UpdateRespStatusCode sets the "resp_status_code" field to the value that was provided on create.
func (u *MissionUpsert) UpdateRespStatusCode() *MissionUpsert {
	u.SetExcluded(mission.FieldRespStatusCode)
	return u
}

// AddRespStatusCode adds v to the "resp_status_code" field.
func (u *MissionUpsert) AddRespStatusCode(v int32) *MissionUpsert {
	u.Add(mission.FieldRespStatusCode, v)
	return u
}

// SetRespBody sets the "resp_body" field.
func (u *MissionUpsert) SetRespBody(v string) *MissionUpsert {
	u.Set(mission.FieldRespBody, v)
	return u
}

// UpdateRespBody sets the "resp_body" field to the value that was provided on create.
func (u *MissionUpsert) UpdateRespBody() *MissionUpsert {
	u.SetExcluded(mission.FieldRespBody)
	return u
}

// SetInnerURI sets the "inner_uri" field.
func (u *MissionUpsert) SetInnerURI(v string) *MissionUpsert {
	u.Set(mission.FieldInnerURI, v)
	return u
}

// UpdateInnerURI sets the "inner_uri" field to the value that was provided on create.
func (u *MissionUpsert) UpdateInnerURI() *MissionUpsert {
	u.SetExcluded(mission.FieldInnerURI)
	return u
}

// SetInnerMethod sets the "inner_method" field.
func (u *MissionUpsert) SetInnerMethod(v enums.InnerMethod) *MissionUpsert {
	u.Set(mission.FieldInnerMethod, v)
	return u
}

// UpdateInnerMethod sets the "inner_method" field to the value that was provided on create.
func (u *MissionUpsert) UpdateInnerMethod() *MissionUpsert {
	u.SetExcluded(mission.FieldInnerMethod)
	return u
}

// SetTempHmacKey sets the "temp_hmac_key" field.
func (u *MissionUpsert) SetTempHmacKey(v string) *MissionUpsert {
	u.Set(mission.FieldTempHmacKey, v)
	return u
}

// UpdateTempHmacKey sets the "temp_hmac_key" field to the value that was provided on create.
func (u *MissionUpsert) UpdateTempHmacKey() *MissionUpsert {
	u.SetExcluded(mission.FieldTempHmacKey)
	return u
}

// SetTempHmacSecret sets the "temp_hmac_secret" field.
func (u *MissionUpsert) SetTempHmacSecret(v string) *MissionUpsert {
	u.Set(mission.FieldTempHmacSecret, v)
	return u
}

// UpdateTempHmacSecret sets the "temp_hmac_secret" field to the value that was provided on create.
func (u *MissionUpsert) UpdateTempHmacSecret() *MissionUpsert {
	u.SetExcluded(mission.FieldTempHmacSecret)
	return u
}

// SetSecondHmacKey sets the "second_hmac_key" field.
func (u *MissionUpsert) SetSecondHmacKey(v string) *MissionUpsert {
	u.Set(mission.FieldSecondHmacKey, v)
	return u
}

// UpdateSecondHmacKey sets the "second_hmac_key" field to the value that was provided on create.
func (u *MissionUpsert) UpdateSecondHmacKey() *MissionUpsert {
	u.SetExcluded(mission.FieldSecondHmacKey)
	return u
}

// SetUsername sets the "username" field.
func (u *MissionUpsert) SetUsername(v string) *MissionUpsert {
	u.Set(mission.FieldUsername, v)
	return u
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *MissionUpsert) UpdateUsername() *MissionUpsert {
	u.SetExcluded(mission.FieldUsername)
	return u
}

// SetPassword sets the "password" field.
func (u *MissionUpsert) SetPassword(v string) *MissionUpsert {
	u.Set(mission.FieldPassword, v)
	return u
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *MissionUpsert) UpdatePassword() *MissionUpsert {
	u.SetExcluded(mission.FieldPassword)
	return u
}

// SetWhiteDeviceIds sets the "white_device_ids" field.
func (u *MissionUpsert) SetWhiteDeviceIds(v []string) *MissionUpsert {
	u.Set(mission.FieldWhiteDeviceIds, v)
	return u
}

// UpdateWhiteDeviceIds sets the "white_device_ids" field to the value that was provided on create.
func (u *MissionUpsert) UpdateWhiteDeviceIds() *MissionUpsert {
	u.SetExcluded(mission.FieldWhiteDeviceIds)
	return u
}

// ClearWhiteDeviceIds clears the value of the "white_device_ids" field.
func (u *MissionUpsert) ClearWhiteDeviceIds() *MissionUpsert {
	u.SetNull(mission.FieldWhiteDeviceIds)
	return u
}

// SetBlackDeviceIds sets the "black_device_ids" field.
func (u *MissionUpsert) SetBlackDeviceIds(v []string) *MissionUpsert {
	u.Set(mission.FieldBlackDeviceIds, v)
	return u
}

// UpdateBlackDeviceIds sets the "black_device_ids" field to the value that was provided on create.
func (u *MissionUpsert) UpdateBlackDeviceIds() *MissionUpsert {
	u.SetExcluded(mission.FieldBlackDeviceIds)
	return u
}

// ClearBlackDeviceIds clears the value of the "black_device_ids" field.
func (u *MissionUpsert) ClearBlackDeviceIds() *MissionUpsert {
	u.SetNull(mission.FieldBlackDeviceIds)
	return u
}

// SetStartedAt sets the "started_at" field.
func (u *MissionUpsert) SetStartedAt(v time.Time) *MissionUpsert {
	u.Set(mission.FieldStartedAt, v)
	return u
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *MissionUpsert) UpdateStartedAt() *MissionUpsert {
	u.SetExcluded(mission.FieldStartedAt)
	return u
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *MissionUpsert) ClearStartedAt() *MissionUpsert {
	u.SetNull(mission.FieldStartedAt)
	return u
}

// SetFinishedAt sets the "finished_at" field.
func (u *MissionUpsert) SetFinishedAt(v time.Time) *MissionUpsert {
	u.Set(mission.FieldFinishedAt, v)
	return u
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *MissionUpsert) UpdateFinishedAt() *MissionUpsert {
	u.SetExcluded(mission.FieldFinishedAt)
	return u
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (u *MissionUpsert) ClearFinishedAt() *MissionUpsert {
	u.SetNull(mission.FieldFinishedAt)
	return u
}

// SetExpiredAt sets the "expired_at" field.
func (u *MissionUpsert) SetExpiredAt(v time.Time) *MissionUpsert {
	u.Set(mission.FieldExpiredAt, v)
	return u
}

// UpdateExpiredAt sets the "expired_at" field to the value that was provided on create.
func (u *MissionUpsert) UpdateExpiredAt() *MissionUpsert {
	u.SetExcluded(mission.FieldExpiredAt)
	return u
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (u *MissionUpsert) ClearExpiredAt() *MissionUpsert {
	u.SetNull(mission.FieldExpiredAt)
	return u
}

// SetFreeAt sets the "free_at" field.
func (u *MissionUpsert) SetFreeAt(v time.Time) *MissionUpsert {
	u.Set(mission.FieldFreeAt, v)
	return u
}

// UpdateFreeAt sets the "free_at" field to the value that was provided on create.
func (u *MissionUpsert) UpdateFreeAt() *MissionUpsert {
	u.SetExcluded(mission.FieldFreeAt)
	return u
}

// SetCreateWay sets the "create_way" field.
func (u *MissionUpsert) SetCreateWay(v enums.CreateWay) *MissionUpsert {
	u.Set(mission.FieldCreateWay, v)
	return u
}

// UpdateCreateWay sets the "create_way" field to the value that was provided on create.
func (u *MissionUpsert) UpdateCreateWay() *MissionUpsert {
	u.SetExcluded(mission.FieldCreateWay)
	return u
}

// SetCloseWay sets the "close_way" field.
func (u *MissionUpsert) SetCloseWay(v enums.CloseWay) *MissionUpsert {
	u.Set(mission.FieldCloseWay, v)
	return u
}

// UpdateCloseWay sets the "close_way" field to the value that was provided on create.
func (u *MissionUpsert) UpdateCloseWay() *MissionUpsert {
	u.SetExcluded(mission.FieldCloseWay)
	return u
}

// SetClosedAt sets the "closed_at" field.
func (u *MissionUpsert) SetClosedAt(v time.Time) *MissionUpsert {
	u.Set(mission.FieldClosedAt, v)
	return u
}

// UpdateClosedAt sets the "closed_at" field to the value that was provided on create.
func (u *MissionUpsert) UpdateClosedAt() *MissionUpsert {
	u.SetExcluded(mission.FieldClosedAt)
	return u
}

// ClearClosedAt clears the value of the "closed_at" field.
func (u *MissionUpsert) ClearClosedAt() *MissionUpsert {
	u.SetNull(mission.FieldClosedAt)
	return u
}

// SetWarningTimes sets the "warning_times" field.
func (u *MissionUpsert) SetWarningTimes(v int64) *MissionUpsert {
	u.Set(mission.FieldWarningTimes, v)
	return u
}

// UpdateWarningTimes sets the "warning_times" field to the value that was provided on create.
func (u *MissionUpsert) UpdateWarningTimes() *MissionUpsert {
	u.SetExcluded(mission.FieldWarningTimes)
	return u
}

// AddWarningTimes adds v to the "warning_times" field.
func (u *MissionUpsert) AddWarningTimes(v int64) *MissionUpsert {
	u.Add(mission.FieldWarningTimes, v)
	return u
}

// SetRemark sets the "remark" field.
func (u *MissionUpsert) SetRemark(v string) *MissionUpsert {
	u.Set(mission.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *MissionUpsert) UpdateRemark() *MissionUpsert {
	u.SetExcluded(mission.FieldRemark)
	return u
}

// SetUseAuth sets the "use_auth" field.
func (u *MissionUpsert) SetUseAuth(v bool) *MissionUpsert {
	u.Set(mission.FieldUseAuth, v)
	return u
}

// UpdateUseAuth sets the "use_auth" field to the value that was provided on create.
func (u *MissionUpsert) UpdateUseAuth() *MissionUpsert {
	u.SetExcluded(mission.FieldUseAuth)
	return u
}

// SetOldMissionID sets the "old_mission_id" field.
func (u *MissionUpsert) SetOldMissionID(v int64) *MissionUpsert {
	u.Set(mission.FieldOldMissionID, v)
	return u
}

// UpdateOldMissionID sets the "old_mission_id" field to the value that was provided on create.
func (u *MissionUpsert) UpdateOldMissionID() *MissionUpsert {
	u.SetExcluded(mission.FieldOldMissionID)
	return u
}

// SetTimedShutdown sets the "timed_shutdown" field.
func (u *MissionUpsert) SetTimedShutdown(v time.Time) *MissionUpsert {
	u.Set(mission.FieldTimedShutdown, v)
	return u
}

// UpdateTimedShutdown sets the "timed_shutdown" field to the value that was provided on create.
func (u *MissionUpsert) UpdateTimedShutdown() *MissionUpsert {
	u.SetExcluded(mission.FieldTimedShutdown)
	return u
}

// ClearTimedShutdown clears the value of the "timed_shutdown" field.
func (u *MissionUpsert) ClearTimedShutdown() *MissionUpsert {
	u.SetNull(mission.FieldTimedShutdown)
	return u
}

// SetGpuNum sets the "gpu_num" field.
func (u *MissionUpsert) SetGpuNum(v int) *MissionUpsert {
	u.Set(mission.FieldGpuNum, v)
	return u
}

// UpdateGpuNum sets the "gpu_num" field to the value that was provided on create.
func (u *MissionUpsert) UpdateGpuNum() *MissionUpsert {
	u.SetExcluded(mission.FieldGpuNum)
	return u
}

// AddGpuNum adds v to the "gpu_num" field.
func (u *MissionUpsert) AddGpuNum(v int) *MissionUpsert {
	u.Add(mission.FieldGpuNum, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Mission.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(mission.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MissionUpsertOne) UpdateNewValues() *MissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(mission.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(mission.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Mission.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MissionUpsertOne) Ignore() *MissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MissionUpsertOne) DoNothing() *MissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MissionCreate.OnConflict
// documentation for more info.
func (u *MissionUpsertOne) Update(set func(*MissionUpsert)) *MissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MissionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *MissionUpsertOne) SetCreatedBy(v int64) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *MissionUpsertOne) AddCreatedBy(v int64) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateCreatedBy() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MissionUpsertOne) SetUpdatedBy(v int64) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MissionUpsertOne) AddUpdatedBy(v int64) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateUpdatedBy() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MissionUpsertOne) SetUpdatedAt(v time.Time) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateUpdatedAt() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MissionUpsertOne) SetDeletedAt(v time.Time) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateDeletedAt() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetType sets the "type" field.
func (u *MissionUpsertOne) SetType(v enums.MissionType) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateType() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateType()
	})
}

// SetMissionKindID sets the "mission_kind_id" field.
func (u *MissionUpsertOne) SetMissionKindID(v int64) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetMissionKindID(v)
	})
}

// UpdateMissionKindID sets the "mission_kind_id" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateMissionKindID() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateMissionKindID()
	})
}

// SetBody sets the "body" field.
func (u *MissionUpsertOne) SetBody(v string) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateBody() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateBody()
	})
}

// SetCallBackURL sets the "call_back_url" field.
func (u *MissionUpsertOne) SetCallBackURL(v string) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetCallBackURL(v)
	})
}

// UpdateCallBackURL sets the "call_back_url" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateCallBackURL() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateCallBackURL()
	})
}

// SetCallBackInfo sets the "call_back_info" field.
func (u *MissionUpsertOne) SetCallBackInfo(v string) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetCallBackInfo(v)
	})
}

// UpdateCallBackInfo sets the "call_back_info" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateCallBackInfo() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateCallBackInfo()
	})
}

// ClearCallBackInfo clears the value of the "call_back_info" field.
func (u *MissionUpsertOne) ClearCallBackInfo() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.ClearCallBackInfo()
	})
}

// SetCallBackData sets the "call_back_data" field.
func (u *MissionUpsertOne) SetCallBackData(v []byte) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetCallBackData(v)
	})
}

// UpdateCallBackData sets the "call_back_data" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateCallBackData() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateCallBackData()
	})
}

// ClearCallBackData clears the value of the "call_back_data" field.
func (u *MissionUpsertOne) ClearCallBackData() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.ClearCallBackData()
	})
}

// SetStatus sets the "status" field.
func (u *MissionUpsertOne) SetStatus(v enums.MissionStatus) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateStatus() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateStatus()
	})
}

// SetResult sets the "result" field.
func (u *MissionUpsertOne) SetResult(v enums.MissionResult) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetResult(v)
	})
}

// UpdateResult sets the "result" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateResult() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateResult()
	})
}

// SetState sets the "state" field.
func (u *MissionUpsertOne) SetState(v enums.MissionState) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateState() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateState()
	})
}

// SetResultUrls sets the "result_urls" field.
func (u *MissionUpsertOne) SetResultUrls(v []string) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetResultUrls(v)
	})
}

// UpdateResultUrls sets the "result_urls" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateResultUrls() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateResultUrls()
	})
}

// ClearResultUrls clears the value of the "result_urls" field.
func (u *MissionUpsertOne) ClearResultUrls() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.ClearResultUrls()
	})
}

// SetUrls sets the "urls" field.
func (u *MissionUpsertOne) SetUrls(v string) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetUrls(v)
	})
}

// UpdateUrls sets the "urls" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateUrls() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateUrls()
	})
}

// SetKeyPairID sets the "key_pair_id" field.
func (u *MissionUpsertOne) SetKeyPairID(v int64) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetKeyPairID(v)
	})
}

// UpdateKeyPairID sets the "key_pair_id" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateKeyPairID() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateKeyPairID()
	})
}

// SetUserID sets the "user_id" field.
func (u *MissionUpsertOne) SetUserID(v int64) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateUserID() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateUserID()
	})
}

// SetMissionBatchID sets the "mission_batch_id" field.
func (u *MissionUpsertOne) SetMissionBatchID(v int64) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetMissionBatchID(v)
	})
}

// UpdateMissionBatchID sets the "mission_batch_id" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateMissionBatchID() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateMissionBatchID()
	})
}

// SetMissionBatchNumber sets the "mission_batch_number" field.
func (u *MissionUpsertOne) SetMissionBatchNumber(v string) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetMissionBatchNumber(v)
	})
}

// UpdateMissionBatchNumber sets the "mission_batch_number" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateMissionBatchNumber() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateMissionBatchNumber()
	})
}

// SetGpuVersion sets the "gpu_version" field.
func (u *MissionUpsertOne) SetGpuVersion(v enums.GpuVersion) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetGpuVersion(v)
	})
}

// UpdateGpuVersion sets the "gpu_version" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateGpuVersion() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateGpuVersion()
	})
}

// SetUnitCep sets the "unit_cep" field.
func (u *MissionUpsertOne) SetUnitCep(v int64) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetUnitCep(v)
	})
}

// AddUnitCep adds v to the "unit_cep" field.
func (u *MissionUpsertOne) AddUnitCep(v int64) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.AddUnitCep(v)
	})
}

// UpdateUnitCep sets the "unit_cep" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateUnitCep() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateUnitCep()
	})
}

// SetRespStatusCode sets the "resp_status_code" field.
func (u *MissionUpsertOne) SetRespStatusCode(v int32) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetRespStatusCode(v)
	})
}

// AddRespStatusCode adds v to the "resp_status_code" field.
func (u *MissionUpsertOne) AddRespStatusCode(v int32) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.AddRespStatusCode(v)
	})
}

// UpdateRespStatusCode sets the "resp_status_code" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateRespStatusCode() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateRespStatusCode()
	})
}

// SetRespBody sets the "resp_body" field.
func (u *MissionUpsertOne) SetRespBody(v string) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetRespBody(v)
	})
}

// UpdateRespBody sets the "resp_body" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateRespBody() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateRespBody()
	})
}

// SetInnerURI sets the "inner_uri" field.
func (u *MissionUpsertOne) SetInnerURI(v string) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetInnerURI(v)
	})
}

// UpdateInnerURI sets the "inner_uri" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateInnerURI() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateInnerURI()
	})
}

// SetInnerMethod sets the "inner_method" field.
func (u *MissionUpsertOne) SetInnerMethod(v enums.InnerMethod) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetInnerMethod(v)
	})
}

// UpdateInnerMethod sets the "inner_method" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateInnerMethod() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateInnerMethod()
	})
}

// SetTempHmacKey sets the "temp_hmac_key" field.
func (u *MissionUpsertOne) SetTempHmacKey(v string) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetTempHmacKey(v)
	})
}

// UpdateTempHmacKey sets the "temp_hmac_key" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateTempHmacKey() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateTempHmacKey()
	})
}

// SetTempHmacSecret sets the "temp_hmac_secret" field.
func (u *MissionUpsertOne) SetTempHmacSecret(v string) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetTempHmacSecret(v)
	})
}

// UpdateTempHmacSecret sets the "temp_hmac_secret" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateTempHmacSecret() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateTempHmacSecret()
	})
}

// SetSecondHmacKey sets the "second_hmac_key" field.
func (u *MissionUpsertOne) SetSecondHmacKey(v string) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetSecondHmacKey(v)
	})
}

// UpdateSecondHmacKey sets the "second_hmac_key" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateSecondHmacKey() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateSecondHmacKey()
	})
}

// SetUsername sets the "username" field.
func (u *MissionUpsertOne) SetUsername(v string) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateUsername() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateUsername()
	})
}

// SetPassword sets the "password" field.
func (u *MissionUpsertOne) SetPassword(v string) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdatePassword() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdatePassword()
	})
}

// SetWhiteDeviceIds sets the "white_device_ids" field.
func (u *MissionUpsertOne) SetWhiteDeviceIds(v []string) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetWhiteDeviceIds(v)
	})
}

// UpdateWhiteDeviceIds sets the "white_device_ids" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateWhiteDeviceIds() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateWhiteDeviceIds()
	})
}

// ClearWhiteDeviceIds clears the value of the "white_device_ids" field.
func (u *MissionUpsertOne) ClearWhiteDeviceIds() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.ClearWhiteDeviceIds()
	})
}

// SetBlackDeviceIds sets the "black_device_ids" field.
func (u *MissionUpsertOne) SetBlackDeviceIds(v []string) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetBlackDeviceIds(v)
	})
}

// UpdateBlackDeviceIds sets the "black_device_ids" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateBlackDeviceIds() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateBlackDeviceIds()
	})
}

// ClearBlackDeviceIds clears the value of the "black_device_ids" field.
func (u *MissionUpsertOne) ClearBlackDeviceIds() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.ClearBlackDeviceIds()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *MissionUpsertOne) SetStartedAt(v time.Time) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateStartedAt() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateStartedAt()
	})
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *MissionUpsertOne) ClearStartedAt() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.ClearStartedAt()
	})
}

// SetFinishedAt sets the "finished_at" field.
func (u *MissionUpsertOne) SetFinishedAt(v time.Time) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetFinishedAt(v)
	})
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateFinishedAt() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateFinishedAt()
	})
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (u *MissionUpsertOne) ClearFinishedAt() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.ClearFinishedAt()
	})
}

// SetExpiredAt sets the "expired_at" field.
func (u *MissionUpsertOne) SetExpiredAt(v time.Time) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetExpiredAt(v)
	})
}

// UpdateExpiredAt sets the "expired_at" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateExpiredAt() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateExpiredAt()
	})
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (u *MissionUpsertOne) ClearExpiredAt() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.ClearExpiredAt()
	})
}

// SetFreeAt sets the "free_at" field.
func (u *MissionUpsertOne) SetFreeAt(v time.Time) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetFreeAt(v)
	})
}

// UpdateFreeAt sets the "free_at" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateFreeAt() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateFreeAt()
	})
}

// SetCreateWay sets the "create_way" field.
func (u *MissionUpsertOne) SetCreateWay(v enums.CreateWay) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetCreateWay(v)
	})
}

// UpdateCreateWay sets the "create_way" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateCreateWay() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateCreateWay()
	})
}

// SetCloseWay sets the "close_way" field.
func (u *MissionUpsertOne) SetCloseWay(v enums.CloseWay) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetCloseWay(v)
	})
}

// UpdateCloseWay sets the "close_way" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateCloseWay() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateCloseWay()
	})
}

// SetClosedAt sets the "closed_at" field.
func (u *MissionUpsertOne) SetClosedAt(v time.Time) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetClosedAt(v)
	})
}

// UpdateClosedAt sets the "closed_at" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateClosedAt() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateClosedAt()
	})
}

// ClearClosedAt clears the value of the "closed_at" field.
func (u *MissionUpsertOne) ClearClosedAt() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.ClearClosedAt()
	})
}

// SetWarningTimes sets the "warning_times" field.
func (u *MissionUpsertOne) SetWarningTimes(v int64) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetWarningTimes(v)
	})
}

// AddWarningTimes adds v to the "warning_times" field.
func (u *MissionUpsertOne) AddWarningTimes(v int64) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.AddWarningTimes(v)
	})
}

// UpdateWarningTimes sets the "warning_times" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateWarningTimes() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateWarningTimes()
	})
}

// SetRemark sets the "remark" field.
func (u *MissionUpsertOne) SetRemark(v string) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateRemark() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateRemark()
	})
}

// SetUseAuth sets the "use_auth" field.
func (u *MissionUpsertOne) SetUseAuth(v bool) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetUseAuth(v)
	})
}

// UpdateUseAuth sets the "use_auth" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateUseAuth() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateUseAuth()
	})
}

// SetOldMissionID sets the "old_mission_id" field.
func (u *MissionUpsertOne) SetOldMissionID(v int64) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetOldMissionID(v)
	})
}

// UpdateOldMissionID sets the "old_mission_id" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateOldMissionID() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateOldMissionID()
	})
}

// SetTimedShutdown sets the "timed_shutdown" field.
func (u *MissionUpsertOne) SetTimedShutdown(v time.Time) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetTimedShutdown(v)
	})
}

// UpdateTimedShutdown sets the "timed_shutdown" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateTimedShutdown() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateTimedShutdown()
	})
}

// ClearTimedShutdown clears the value of the "timed_shutdown" field.
func (u *MissionUpsertOne) ClearTimedShutdown() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.ClearTimedShutdown()
	})
}

// SetGpuNum sets the "gpu_num" field.
func (u *MissionUpsertOne) SetGpuNum(v int) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetGpuNum(v)
	})
}

// AddGpuNum adds v to the "gpu_num" field.
func (u *MissionUpsertOne) AddGpuNum(v int) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.AddGpuNum(v)
	})
}

// UpdateGpuNum sets the "gpu_num" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateGpuNum() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateGpuNum()
	})
}

// Exec executes the query.
func (u *MissionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for MissionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MissionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MissionUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MissionUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MissionCreateBulk is the builder for creating many Mission entities in bulk.
type MissionCreateBulk struct {
	config
	err      error
	builders []*MissionCreate
	conflict []sql.ConflictOption
}

// Save creates the Mission entities in the database.
func (mcb *MissionCreateBulk) Save(ctx context.Context) ([]*Mission, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Mission, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i], err = builder.createSpec()
				if err != nil {
					return nil, err
				}
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MissionCreateBulk) SaveX(ctx context.Context) []*Mission {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MissionCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MissionCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Mission.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MissionUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (mcb *MissionCreateBulk) OnConflict(opts ...sql.ConflictOption) *MissionUpsertBulk {
	mcb.conflict = opts
	return &MissionUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Mission.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcb *MissionCreateBulk) OnConflictColumns(columns ...string) *MissionUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &MissionUpsertBulk{
		create: mcb,
	}
}

// MissionUpsertBulk is the builder for "upsert"-ing
// a bulk of Mission nodes.
type MissionUpsertBulk struct {
	create *MissionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Mission.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(mission.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MissionUpsertBulk) UpdateNewValues() *MissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(mission.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(mission.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Mission.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MissionUpsertBulk) Ignore() *MissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MissionUpsertBulk) DoNothing() *MissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MissionCreateBulk.OnConflict
// documentation for more info.
func (u *MissionUpsertBulk) Update(set func(*MissionUpsert)) *MissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MissionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *MissionUpsertBulk) SetCreatedBy(v int64) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *MissionUpsertBulk) AddCreatedBy(v int64) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateCreatedBy() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MissionUpsertBulk) SetUpdatedBy(v int64) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MissionUpsertBulk) AddUpdatedBy(v int64) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateUpdatedBy() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MissionUpsertBulk) SetUpdatedAt(v time.Time) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateUpdatedAt() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MissionUpsertBulk) SetDeletedAt(v time.Time) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateDeletedAt() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetType sets the "type" field.
func (u *MissionUpsertBulk) SetType(v enums.MissionType) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateType() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateType()
	})
}

// SetMissionKindID sets the "mission_kind_id" field.
func (u *MissionUpsertBulk) SetMissionKindID(v int64) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetMissionKindID(v)
	})
}

// UpdateMissionKindID sets the "mission_kind_id" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateMissionKindID() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateMissionKindID()
	})
}

// SetBody sets the "body" field.
func (u *MissionUpsertBulk) SetBody(v string) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateBody() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateBody()
	})
}

// SetCallBackURL sets the "call_back_url" field.
func (u *MissionUpsertBulk) SetCallBackURL(v string) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetCallBackURL(v)
	})
}

// UpdateCallBackURL sets the "call_back_url" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateCallBackURL() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateCallBackURL()
	})
}

// SetCallBackInfo sets the "call_back_info" field.
func (u *MissionUpsertBulk) SetCallBackInfo(v string) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetCallBackInfo(v)
	})
}

// UpdateCallBackInfo sets the "call_back_info" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateCallBackInfo() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateCallBackInfo()
	})
}

// ClearCallBackInfo clears the value of the "call_back_info" field.
func (u *MissionUpsertBulk) ClearCallBackInfo() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.ClearCallBackInfo()
	})
}

// SetCallBackData sets the "call_back_data" field.
func (u *MissionUpsertBulk) SetCallBackData(v []byte) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetCallBackData(v)
	})
}

// UpdateCallBackData sets the "call_back_data" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateCallBackData() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateCallBackData()
	})
}

// ClearCallBackData clears the value of the "call_back_data" field.
func (u *MissionUpsertBulk) ClearCallBackData() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.ClearCallBackData()
	})
}

// SetStatus sets the "status" field.
func (u *MissionUpsertBulk) SetStatus(v enums.MissionStatus) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateStatus() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateStatus()
	})
}

// SetResult sets the "result" field.
func (u *MissionUpsertBulk) SetResult(v enums.MissionResult) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetResult(v)
	})
}

// UpdateResult sets the "result" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateResult() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateResult()
	})
}

// SetState sets the "state" field.
func (u *MissionUpsertBulk) SetState(v enums.MissionState) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateState() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateState()
	})
}

// SetResultUrls sets the "result_urls" field.
func (u *MissionUpsertBulk) SetResultUrls(v []string) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetResultUrls(v)
	})
}

// UpdateResultUrls sets the "result_urls" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateResultUrls() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateResultUrls()
	})
}

// ClearResultUrls clears the value of the "result_urls" field.
func (u *MissionUpsertBulk) ClearResultUrls() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.ClearResultUrls()
	})
}

// SetUrls sets the "urls" field.
func (u *MissionUpsertBulk) SetUrls(v string) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetUrls(v)
	})
}

// UpdateUrls sets the "urls" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateUrls() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateUrls()
	})
}

// SetKeyPairID sets the "key_pair_id" field.
func (u *MissionUpsertBulk) SetKeyPairID(v int64) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetKeyPairID(v)
	})
}

// UpdateKeyPairID sets the "key_pair_id" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateKeyPairID() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateKeyPairID()
	})
}

// SetUserID sets the "user_id" field.
func (u *MissionUpsertBulk) SetUserID(v int64) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateUserID() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateUserID()
	})
}

// SetMissionBatchID sets the "mission_batch_id" field.
func (u *MissionUpsertBulk) SetMissionBatchID(v int64) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetMissionBatchID(v)
	})
}

// UpdateMissionBatchID sets the "mission_batch_id" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateMissionBatchID() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateMissionBatchID()
	})
}

// SetMissionBatchNumber sets the "mission_batch_number" field.
func (u *MissionUpsertBulk) SetMissionBatchNumber(v string) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetMissionBatchNumber(v)
	})
}

// UpdateMissionBatchNumber sets the "mission_batch_number" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateMissionBatchNumber() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateMissionBatchNumber()
	})
}

// SetGpuVersion sets the "gpu_version" field.
func (u *MissionUpsertBulk) SetGpuVersion(v enums.GpuVersion) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetGpuVersion(v)
	})
}

// UpdateGpuVersion sets the "gpu_version" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateGpuVersion() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateGpuVersion()
	})
}

// SetUnitCep sets the "unit_cep" field.
func (u *MissionUpsertBulk) SetUnitCep(v int64) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetUnitCep(v)
	})
}

// AddUnitCep adds v to the "unit_cep" field.
func (u *MissionUpsertBulk) AddUnitCep(v int64) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.AddUnitCep(v)
	})
}

// UpdateUnitCep sets the "unit_cep" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateUnitCep() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateUnitCep()
	})
}

// SetRespStatusCode sets the "resp_status_code" field.
func (u *MissionUpsertBulk) SetRespStatusCode(v int32) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetRespStatusCode(v)
	})
}

// AddRespStatusCode adds v to the "resp_status_code" field.
func (u *MissionUpsertBulk) AddRespStatusCode(v int32) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.AddRespStatusCode(v)
	})
}

// UpdateRespStatusCode sets the "resp_status_code" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateRespStatusCode() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateRespStatusCode()
	})
}

// SetRespBody sets the "resp_body" field.
func (u *MissionUpsertBulk) SetRespBody(v string) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetRespBody(v)
	})
}

// UpdateRespBody sets the "resp_body" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateRespBody() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateRespBody()
	})
}

// SetInnerURI sets the "inner_uri" field.
func (u *MissionUpsertBulk) SetInnerURI(v string) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetInnerURI(v)
	})
}

// UpdateInnerURI sets the "inner_uri" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateInnerURI() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateInnerURI()
	})
}

// SetInnerMethod sets the "inner_method" field.
func (u *MissionUpsertBulk) SetInnerMethod(v enums.InnerMethod) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetInnerMethod(v)
	})
}

// UpdateInnerMethod sets the "inner_method" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateInnerMethod() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateInnerMethod()
	})
}

// SetTempHmacKey sets the "temp_hmac_key" field.
func (u *MissionUpsertBulk) SetTempHmacKey(v string) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetTempHmacKey(v)
	})
}

// UpdateTempHmacKey sets the "temp_hmac_key" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateTempHmacKey() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateTempHmacKey()
	})
}

// SetTempHmacSecret sets the "temp_hmac_secret" field.
func (u *MissionUpsertBulk) SetTempHmacSecret(v string) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetTempHmacSecret(v)
	})
}

// UpdateTempHmacSecret sets the "temp_hmac_secret" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateTempHmacSecret() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateTempHmacSecret()
	})
}

// SetSecondHmacKey sets the "second_hmac_key" field.
func (u *MissionUpsertBulk) SetSecondHmacKey(v string) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetSecondHmacKey(v)
	})
}

// UpdateSecondHmacKey sets the "second_hmac_key" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateSecondHmacKey() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateSecondHmacKey()
	})
}

// SetUsername sets the "username" field.
func (u *MissionUpsertBulk) SetUsername(v string) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateUsername() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateUsername()
	})
}

// SetPassword sets the "password" field.
func (u *MissionUpsertBulk) SetPassword(v string) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdatePassword() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdatePassword()
	})
}

// SetWhiteDeviceIds sets the "white_device_ids" field.
func (u *MissionUpsertBulk) SetWhiteDeviceIds(v []string) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetWhiteDeviceIds(v)
	})
}

// UpdateWhiteDeviceIds sets the "white_device_ids" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateWhiteDeviceIds() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateWhiteDeviceIds()
	})
}

// ClearWhiteDeviceIds clears the value of the "white_device_ids" field.
func (u *MissionUpsertBulk) ClearWhiteDeviceIds() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.ClearWhiteDeviceIds()
	})
}

// SetBlackDeviceIds sets the "black_device_ids" field.
func (u *MissionUpsertBulk) SetBlackDeviceIds(v []string) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetBlackDeviceIds(v)
	})
}

// UpdateBlackDeviceIds sets the "black_device_ids" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateBlackDeviceIds() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateBlackDeviceIds()
	})
}

// ClearBlackDeviceIds clears the value of the "black_device_ids" field.
func (u *MissionUpsertBulk) ClearBlackDeviceIds() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.ClearBlackDeviceIds()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *MissionUpsertBulk) SetStartedAt(v time.Time) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateStartedAt() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateStartedAt()
	})
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *MissionUpsertBulk) ClearStartedAt() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.ClearStartedAt()
	})
}

// SetFinishedAt sets the "finished_at" field.
func (u *MissionUpsertBulk) SetFinishedAt(v time.Time) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetFinishedAt(v)
	})
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateFinishedAt() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateFinishedAt()
	})
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (u *MissionUpsertBulk) ClearFinishedAt() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.ClearFinishedAt()
	})
}

// SetExpiredAt sets the "expired_at" field.
func (u *MissionUpsertBulk) SetExpiredAt(v time.Time) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetExpiredAt(v)
	})
}

// UpdateExpiredAt sets the "expired_at" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateExpiredAt() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateExpiredAt()
	})
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (u *MissionUpsertBulk) ClearExpiredAt() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.ClearExpiredAt()
	})
}

// SetFreeAt sets the "free_at" field.
func (u *MissionUpsertBulk) SetFreeAt(v time.Time) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetFreeAt(v)
	})
}

// UpdateFreeAt sets the "free_at" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateFreeAt() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateFreeAt()
	})
}

// SetCreateWay sets the "create_way" field.
func (u *MissionUpsertBulk) SetCreateWay(v enums.CreateWay) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetCreateWay(v)
	})
}

// UpdateCreateWay sets the "create_way" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateCreateWay() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateCreateWay()
	})
}

// SetCloseWay sets the "close_way" field.
func (u *MissionUpsertBulk) SetCloseWay(v enums.CloseWay) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetCloseWay(v)
	})
}

// UpdateCloseWay sets the "close_way" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateCloseWay() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateCloseWay()
	})
}

// SetClosedAt sets the "closed_at" field.
func (u *MissionUpsertBulk) SetClosedAt(v time.Time) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetClosedAt(v)
	})
}

// UpdateClosedAt sets the "closed_at" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateClosedAt() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateClosedAt()
	})
}

// ClearClosedAt clears the value of the "closed_at" field.
func (u *MissionUpsertBulk) ClearClosedAt() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.ClearClosedAt()
	})
}

// SetWarningTimes sets the "warning_times" field.
func (u *MissionUpsertBulk) SetWarningTimes(v int64) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetWarningTimes(v)
	})
}

// AddWarningTimes adds v to the "warning_times" field.
func (u *MissionUpsertBulk) AddWarningTimes(v int64) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.AddWarningTimes(v)
	})
}

// UpdateWarningTimes sets the "warning_times" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateWarningTimes() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateWarningTimes()
	})
}

// SetRemark sets the "remark" field.
func (u *MissionUpsertBulk) SetRemark(v string) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateRemark() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateRemark()
	})
}

// SetUseAuth sets the "use_auth" field.
func (u *MissionUpsertBulk) SetUseAuth(v bool) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetUseAuth(v)
	})
}

// UpdateUseAuth sets the "use_auth" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateUseAuth() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateUseAuth()
	})
}

// SetOldMissionID sets the "old_mission_id" field.
func (u *MissionUpsertBulk) SetOldMissionID(v int64) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetOldMissionID(v)
	})
}

// UpdateOldMissionID sets the "old_mission_id" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateOldMissionID() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateOldMissionID()
	})
}

// SetTimedShutdown sets the "timed_shutdown" field.
func (u *MissionUpsertBulk) SetTimedShutdown(v time.Time) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetTimedShutdown(v)
	})
}

// UpdateTimedShutdown sets the "timed_shutdown" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateTimedShutdown() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateTimedShutdown()
	})
}

// ClearTimedShutdown clears the value of the "timed_shutdown" field.
func (u *MissionUpsertBulk) ClearTimedShutdown() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.ClearTimedShutdown()
	})
}

// SetGpuNum sets the "gpu_num" field.
func (u *MissionUpsertBulk) SetGpuNum(v int) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetGpuNum(v)
	})
}

// AddGpuNum adds v to the "gpu_num" field.
func (u *MissionUpsertBulk) AddGpuNum(v int) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.AddGpuNum(v)
	})
}

// UpdateGpuNum sets the "gpu_num" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateGpuNum() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateGpuNum()
	})
}

// Exec executes the query.
func (u *MissionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the MissionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for MissionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MissionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
