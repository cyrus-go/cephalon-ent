// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/hmackeypair"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/mission"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionkeypair"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// MissionCreate is the builder for creating a Mission entity.
type MissionCreate struct {
	config
	mutation *MissionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (mc *MissionCreate) SetCreatedBy(i int64) *MissionCreate {
	mc.mutation.SetCreatedBy(i)
	return mc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mc *MissionCreate) SetNillableCreatedBy(i *int64) *MissionCreate {
	if i != nil {
		mc.SetCreatedBy(*i)
	}
	return mc
}

// SetUpdatedBy sets the "updated_by" field.
func (mc *MissionCreate) SetUpdatedBy(i int64) *MissionCreate {
	mc.mutation.SetUpdatedBy(i)
	return mc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mc *MissionCreate) SetNillableUpdatedBy(i *int64) *MissionCreate {
	if i != nil {
		mc.SetUpdatedBy(*i)
	}
	return mc
}

// SetCreatedAt sets the "created_at" field.
func (mc *MissionCreate) SetCreatedAt(t time.Time) *MissionCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MissionCreate) SetNillableCreatedAt(t *time.Time) *MissionCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *MissionCreate) SetUpdatedAt(t time.Time) *MissionCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *MissionCreate) SetNillableUpdatedAt(t *time.Time) *MissionCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetDeletedAt sets the "deleted_at" field.
func (mc *MissionCreate) SetDeletedAt(t time.Time) *MissionCreate {
	mc.mutation.SetDeletedAt(t)
	return mc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mc *MissionCreate) SetNillableDeletedAt(t *time.Time) *MissionCreate {
	if t != nil {
		mc.SetDeletedAt(*t)
	}
	return mc
}

// SetType sets the "type" field.
func (mc *MissionCreate) SetType(et enums.MissionType) *MissionCreate {
	mc.mutation.SetType(et)
	return mc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mc *MissionCreate) SetNillableType(et *enums.MissionType) *MissionCreate {
	if et != nil {
		mc.SetType(*et)
	}
	return mc
}

// SetBody sets the "body" field.
func (mc *MissionCreate) SetBody(s string) *MissionCreate {
	mc.mutation.SetBody(s)
	return mc
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (mc *MissionCreate) SetNillableBody(s *string) *MissionCreate {
	if s != nil {
		mc.SetBody(*s)
	}
	return mc
}

// SetCallBackURL sets the "call_back_url" field.
func (mc *MissionCreate) SetCallBackURL(s string) *MissionCreate {
	mc.mutation.SetCallBackURL(s)
	return mc
}

// SetNillableCallBackURL sets the "call_back_url" field if the given value is not nil.
func (mc *MissionCreate) SetNillableCallBackURL(s *string) *MissionCreate {
	if s != nil {
		mc.SetCallBackURL(*s)
	}
	return mc
}

// SetStatus sets the "status" field.
func (mc *MissionCreate) SetStatus(es enums.MissionStatus) *MissionCreate {
	mc.mutation.SetStatus(es)
	return mc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mc *MissionCreate) SetNillableStatus(es *enums.MissionStatus) *MissionCreate {
	if es != nil {
		mc.SetStatus(*es)
	}
	return mc
}

// SetResult sets the "result" field.
func (mc *MissionCreate) SetResult(er enums.MissionResult) *MissionCreate {
	mc.mutation.SetResult(er)
	return mc
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (mc *MissionCreate) SetNillableResult(er *enums.MissionResult) *MissionCreate {
	if er != nil {
		mc.SetResult(*er)
	}
	return mc
}

// SetResultUrls sets the "result_urls" field.
func (mc *MissionCreate) SetResultUrls(s []string) *MissionCreate {
	mc.mutation.SetResultUrls(s)
	return mc
}

// SetKeyPairID sets the "key_pair_id" field.
func (mc *MissionCreate) SetKeyPairID(i int64) *MissionCreate {
	mc.mutation.SetKeyPairID(i)
	return mc
}

// SetNillableKeyPairID sets the "key_pair_id" field if the given value is not nil.
func (mc *MissionCreate) SetNillableKeyPairID(i *int64) *MissionCreate {
	if i != nil {
		mc.SetKeyPairID(*i)
	}
	return mc
}

// SetMissionBatchNumber sets the "mission_batch_number" field.
func (mc *MissionCreate) SetMissionBatchNumber(s string) *MissionCreate {
	mc.mutation.SetMissionBatchNumber(s)
	return mc
}

// SetNillableMissionBatchNumber sets the "mission_batch_number" field if the given value is not nil.
func (mc *MissionCreate) SetNillableMissionBatchNumber(s *string) *MissionCreate {
	if s != nil {
		mc.SetMissionBatchNumber(*s)
	}
	return mc
}

// SetGpuVersion sets the "gpu_version" field.
func (mc *MissionCreate) SetGpuVersion(ev enums.GpuVersion) *MissionCreate {
	mc.mutation.SetGpuVersion(ev)
	return mc
}

// SetNillableGpuVersion sets the "gpu_version" field if the given value is not nil.
func (mc *MissionCreate) SetNillableGpuVersion(ev *enums.GpuVersion) *MissionCreate {
	if ev != nil {
		mc.SetGpuVersion(*ev)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MissionCreate) SetID(i int64) *MissionCreate {
	mc.mutation.SetID(i)
	return mc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mc *MissionCreate) SetNillableID(i *int64) *MissionCreate {
	if i != nil {
		mc.SetID(*i)
	}
	return mc
}

// AddMissionKeyPairIDs adds the "mission_key_pairs" edge to the MissionKeyPair entity by IDs.
func (mc *MissionCreate) AddMissionKeyPairIDs(ids ...int64) *MissionCreate {
	mc.mutation.AddMissionKeyPairIDs(ids...)
	return mc
}

// AddMissionKeyPairs adds the "mission_key_pairs" edges to the MissionKeyPair entity.
func (mc *MissionCreate) AddMissionKeyPairs(m ...*MissionKeyPair) *MissionCreate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddMissionKeyPairIDs(ids...)
}

// SetKeyPair sets the "key_pair" edge to the HmacKeyPair entity.
func (mc *MissionCreate) SetKeyPair(h *HmacKeyPair) *MissionCreate {
	return mc.SetKeyPairID(h.ID)
}

// Mutation returns the MissionMutation object of the builder.
func (mc *MissionCreate) Mutation() *MissionMutation {
	return mc.mutation
}

// Save creates the Mission in the database.
func (mc *MissionCreate) Save(ctx context.Context) (*Mission, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MissionCreate) SaveX(ctx context.Context) *Mission {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MissionCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MissionCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MissionCreate) defaults() {
	if _, ok := mc.mutation.CreatedBy(); !ok {
		v := mission.DefaultCreatedBy
		mc.mutation.SetCreatedBy(v)
	}
	if _, ok := mc.mutation.UpdatedBy(); !ok {
		v := mission.DefaultUpdatedBy
		mc.mutation.SetUpdatedBy(v)
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := mission.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		v := mission.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mc.mutation.DeletedAt(); !ok {
		v := mission.DefaultDeletedAt
		mc.mutation.SetDeletedAt(v)
	}
	if _, ok := mc.mutation.GetType(); !ok {
		v := mission.DefaultType
		mc.mutation.SetType(v)
	}
	if _, ok := mc.mutation.Body(); !ok {
		v := mission.DefaultBody
		mc.mutation.SetBody(v)
	}
	if _, ok := mc.mutation.CallBackURL(); !ok {
		v := mission.DefaultCallBackURL
		mc.mutation.SetCallBackURL(v)
	}
	if _, ok := mc.mutation.Status(); !ok {
		v := mission.DefaultStatus
		mc.mutation.SetStatus(v)
	}
	if _, ok := mc.mutation.Result(); !ok {
		v := mission.DefaultResult
		mc.mutation.SetResult(v)
	}
	if _, ok := mc.mutation.KeyPairID(); !ok {
		v := mission.DefaultKeyPairID
		mc.mutation.SetKeyPairID(v)
	}
	if _, ok := mc.mutation.MissionBatchNumber(); !ok {
		v := mission.DefaultMissionBatchNumber
		mc.mutation.SetMissionBatchNumber(v)
	}
	if _, ok := mc.mutation.GpuVersion(); !ok {
		v := mission.DefaultGpuVersion
		mc.mutation.SetGpuVersion(v)
	}
	if _, ok := mc.mutation.ID(); !ok {
		v := mission.DefaultID()
		mc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MissionCreate) check() error {
	if _, ok := mc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "Mission.created_by"`)}
	}
	if _, ok := mc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "Mission.updated_by"`)}
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "Mission.created_at"`)}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "Mission.updated_at"`)}
	}
	if _, ok := mc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "Mission.deleted_at"`)}
	}
	if _, ok := mc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`cep_ent: missing required field "Mission.type"`)}
	}
	if v, ok := mc.mutation.GetType(); ok {
		if err := mission.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "Mission.type": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Body(); !ok {
		return &ValidationError{Name: "body", err: errors.New(`cep_ent: missing required field "Mission.body"`)}
	}
	if _, ok := mc.mutation.CallBackURL(); !ok {
		return &ValidationError{Name: "call_back_url", err: errors.New(`cep_ent: missing required field "Mission.call_back_url"`)}
	}
	if _, ok := mc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`cep_ent: missing required field "Mission.status"`)}
	}
	if v, ok := mc.mutation.Status(); ok {
		if err := mission.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "Mission.status": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Result(); !ok {
		return &ValidationError{Name: "result", err: errors.New(`cep_ent: missing required field "Mission.result"`)}
	}
	if v, ok := mc.mutation.Result(); ok {
		if err := mission.ResultValidator(v); err != nil {
			return &ValidationError{Name: "result", err: fmt.Errorf(`cep_ent: validator failed for field "Mission.result": %w`, err)}
		}
	}
	if _, ok := mc.mutation.KeyPairID(); !ok {
		return &ValidationError{Name: "key_pair_id", err: errors.New(`cep_ent: missing required field "Mission.key_pair_id"`)}
	}
	if _, ok := mc.mutation.MissionBatchNumber(); !ok {
		return &ValidationError{Name: "mission_batch_number", err: errors.New(`cep_ent: missing required field "Mission.mission_batch_number"`)}
	}
	if _, ok := mc.mutation.GpuVersion(); !ok {
		return &ValidationError{Name: "gpu_version", err: errors.New(`cep_ent: missing required field "Mission.gpu_version"`)}
	}
	if v, ok := mc.mutation.GpuVersion(); ok {
		if err := mission.GpuVersionValidator(v); err != nil {
			return &ValidationError{Name: "gpu_version", err: fmt.Errorf(`cep_ent: validator failed for field "Mission.gpu_version": %w`, err)}
		}
	}
	if _, ok := mc.mutation.KeyPairID(); !ok {
		return &ValidationError{Name: "key_pair", err: errors.New(`cep_ent: missing required edge "Mission.key_pair"`)}
	}
	return nil
}

func (mc *MissionCreate) sqlSave(ctx context.Context) (*Mission, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MissionCreate) createSpec() (*Mission, *sqlgraph.CreateSpec) {
	var (
		_node = &Mission{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(mission.Table, sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = mc.conflict
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.CreatedBy(); ok {
		_spec.SetField(mission.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := mc.mutation.UpdatedBy(); ok {
		_spec.SetField(mission.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(mission.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.SetField(mission.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mc.mutation.DeletedAt(); ok {
		_spec.SetField(mission.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := mc.mutation.GetType(); ok {
		_spec.SetField(mission.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := mc.mutation.Body(); ok {
		_spec.SetField(mission.FieldBody, field.TypeString, value)
		_node.Body = value
	}
	if value, ok := mc.mutation.CallBackURL(); ok {
		_spec.SetField(mission.FieldCallBackURL, field.TypeString, value)
		_node.CallBackURL = value
	}
	if value, ok := mc.mutation.Status(); ok {
		_spec.SetField(mission.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := mc.mutation.Result(); ok {
		_spec.SetField(mission.FieldResult, field.TypeEnum, value)
		_node.Result = value
	}
	if value, ok := mc.mutation.ResultUrls(); ok {
		_spec.SetField(mission.FieldResultUrls, field.TypeJSON, value)
		_node.ResultUrls = value
	}
	if value, ok := mc.mutation.MissionBatchNumber(); ok {
		_spec.SetField(mission.FieldMissionBatchNumber, field.TypeString, value)
		_node.MissionBatchNumber = value
	}
	if value, ok := mc.mutation.GpuVersion(); ok {
		_spec.SetField(mission.FieldGpuVersion, field.TypeEnum, value)
		_node.GpuVersion = value
	}
	if nodes := mc.mutation.MissionKeyPairsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mission.MissionKeyPairsTable,
			Columns: []string{mission.MissionKeyPairsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionkeypair.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.KeyPairIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mission.KeyPairTable,
			Columns: []string{mission.KeyPairColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hmackeypair.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.KeyPairID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Mission.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MissionUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (mc *MissionCreate) OnConflict(opts ...sql.ConflictOption) *MissionUpsertOne {
	mc.conflict = opts
	return &MissionUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Mission.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mc *MissionCreate) OnConflictColumns(columns ...string) *MissionUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &MissionUpsertOne{
		create: mc,
	}
}

type (
	// MissionUpsertOne is the builder for "upsert"-ing
	//  one Mission node.
	MissionUpsertOne struct {
		create *MissionCreate
	}

	// MissionUpsert is the "OnConflict" setter.
	MissionUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *MissionUpsert) SetCreatedBy(v int64) *MissionUpsert {
	u.Set(mission.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MissionUpsert) UpdateCreatedBy() *MissionUpsert {
	u.SetExcluded(mission.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *MissionUpsert) AddCreatedBy(v int64) *MissionUpsert {
	u.Add(mission.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MissionUpsert) SetUpdatedBy(v int64) *MissionUpsert {
	u.Set(mission.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MissionUpsert) UpdateUpdatedBy() *MissionUpsert {
	u.SetExcluded(mission.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MissionUpsert) AddUpdatedBy(v int64) *MissionUpsert {
	u.Add(mission.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MissionUpsert) SetUpdatedAt(v time.Time) *MissionUpsert {
	u.Set(mission.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MissionUpsert) UpdateUpdatedAt() *MissionUpsert {
	u.SetExcluded(mission.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MissionUpsert) SetDeletedAt(v time.Time) *MissionUpsert {
	u.Set(mission.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MissionUpsert) UpdateDeletedAt() *MissionUpsert {
	u.SetExcluded(mission.FieldDeletedAt)
	return u
}

// SetType sets the "type" field.
func (u *MissionUpsert) SetType(v enums.MissionType) *MissionUpsert {
	u.Set(mission.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MissionUpsert) UpdateType() *MissionUpsert {
	u.SetExcluded(mission.FieldType)
	return u
}

// SetBody sets the "body" field.
func (u *MissionUpsert) SetBody(v string) *MissionUpsert {
	u.Set(mission.FieldBody, v)
	return u
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *MissionUpsert) UpdateBody() *MissionUpsert {
	u.SetExcluded(mission.FieldBody)
	return u
}

// SetCallBackURL sets the "call_back_url" field.
func (u *MissionUpsert) SetCallBackURL(v string) *MissionUpsert {
	u.Set(mission.FieldCallBackURL, v)
	return u
}

// UpdateCallBackURL sets the "call_back_url" field to the value that was provided on create.
func (u *MissionUpsert) UpdateCallBackURL() *MissionUpsert {
	u.SetExcluded(mission.FieldCallBackURL)
	return u
}

// SetStatus sets the "status" field.
func (u *MissionUpsert) SetStatus(v enums.MissionStatus) *MissionUpsert {
	u.Set(mission.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MissionUpsert) UpdateStatus() *MissionUpsert {
	u.SetExcluded(mission.FieldStatus)
	return u
}

// SetResult sets the "result" field.
func (u *MissionUpsert) SetResult(v enums.MissionResult) *MissionUpsert {
	u.Set(mission.FieldResult, v)
	return u
}

// UpdateResult sets the "result" field to the value that was provided on create.
func (u *MissionUpsert) UpdateResult() *MissionUpsert {
	u.SetExcluded(mission.FieldResult)
	return u
}

// SetResultUrls sets the "result_urls" field.
func (u *MissionUpsert) SetResultUrls(v []string) *MissionUpsert {
	u.Set(mission.FieldResultUrls, v)
	return u
}

// UpdateResultUrls sets the "result_urls" field to the value that was provided on create.
func (u *MissionUpsert) UpdateResultUrls() *MissionUpsert {
	u.SetExcluded(mission.FieldResultUrls)
	return u
}

// ClearResultUrls clears the value of the "result_urls" field.
func (u *MissionUpsert) ClearResultUrls() *MissionUpsert {
	u.SetNull(mission.FieldResultUrls)
	return u
}

// SetKeyPairID sets the "key_pair_id" field.
func (u *MissionUpsert) SetKeyPairID(v int64) *MissionUpsert {
	u.Set(mission.FieldKeyPairID, v)
	return u
}

// UpdateKeyPairID sets the "key_pair_id" field to the value that was provided on create.
func (u *MissionUpsert) UpdateKeyPairID() *MissionUpsert {
	u.SetExcluded(mission.FieldKeyPairID)
	return u
}

// SetMissionBatchNumber sets the "mission_batch_number" field.
func (u *MissionUpsert) SetMissionBatchNumber(v string) *MissionUpsert {
	u.Set(mission.FieldMissionBatchNumber, v)
	return u
}

// UpdateMissionBatchNumber sets the "mission_batch_number" field to the value that was provided on create.
func (u *MissionUpsert) UpdateMissionBatchNumber() *MissionUpsert {
	u.SetExcluded(mission.FieldMissionBatchNumber)
	return u
}

// SetGpuVersion sets the "gpu_version" field.
func (u *MissionUpsert) SetGpuVersion(v enums.GpuVersion) *MissionUpsert {
	u.Set(mission.FieldGpuVersion, v)
	return u
}

// UpdateGpuVersion sets the "gpu_version" field to the value that was provided on create.
func (u *MissionUpsert) UpdateGpuVersion() *MissionUpsert {
	u.SetExcluded(mission.FieldGpuVersion)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Mission.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(mission.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MissionUpsertOne) UpdateNewValues() *MissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(mission.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(mission.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Mission.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MissionUpsertOne) Ignore() *MissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MissionUpsertOne) DoNothing() *MissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MissionCreate.OnConflict
// documentation for more info.
func (u *MissionUpsertOne) Update(set func(*MissionUpsert)) *MissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MissionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *MissionUpsertOne) SetCreatedBy(v int64) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *MissionUpsertOne) AddCreatedBy(v int64) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateCreatedBy() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MissionUpsertOne) SetUpdatedBy(v int64) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MissionUpsertOne) AddUpdatedBy(v int64) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateUpdatedBy() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MissionUpsertOne) SetUpdatedAt(v time.Time) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateUpdatedAt() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MissionUpsertOne) SetDeletedAt(v time.Time) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateDeletedAt() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetType sets the "type" field.
func (u *MissionUpsertOne) SetType(v enums.MissionType) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateType() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateType()
	})
}

// SetBody sets the "body" field.
func (u *MissionUpsertOne) SetBody(v string) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateBody() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateBody()
	})
}

// SetCallBackURL sets the "call_back_url" field.
func (u *MissionUpsertOne) SetCallBackURL(v string) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetCallBackURL(v)
	})
}

// UpdateCallBackURL sets the "call_back_url" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateCallBackURL() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateCallBackURL()
	})
}

// SetStatus sets the "status" field.
func (u *MissionUpsertOne) SetStatus(v enums.MissionStatus) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateStatus() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateStatus()
	})
}

// SetResult sets the "result" field.
func (u *MissionUpsertOne) SetResult(v enums.MissionResult) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetResult(v)
	})
}

// UpdateResult sets the "result" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateResult() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateResult()
	})
}

// SetResultUrls sets the "result_urls" field.
func (u *MissionUpsertOne) SetResultUrls(v []string) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetResultUrls(v)
	})
}

// UpdateResultUrls sets the "result_urls" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateResultUrls() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateResultUrls()
	})
}

// ClearResultUrls clears the value of the "result_urls" field.
func (u *MissionUpsertOne) ClearResultUrls() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.ClearResultUrls()
	})
}

// SetKeyPairID sets the "key_pair_id" field.
func (u *MissionUpsertOne) SetKeyPairID(v int64) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetKeyPairID(v)
	})
}

// UpdateKeyPairID sets the "key_pair_id" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateKeyPairID() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateKeyPairID()
	})
}

// SetMissionBatchNumber sets the "mission_batch_number" field.
func (u *MissionUpsertOne) SetMissionBatchNumber(v string) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetMissionBatchNumber(v)
	})
}

// UpdateMissionBatchNumber sets the "mission_batch_number" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateMissionBatchNumber() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateMissionBatchNumber()
	})
}

// SetGpuVersion sets the "gpu_version" field.
func (u *MissionUpsertOne) SetGpuVersion(v enums.GpuVersion) *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.SetGpuVersion(v)
	})
}

// UpdateGpuVersion sets the "gpu_version" field to the value that was provided on create.
func (u *MissionUpsertOne) UpdateGpuVersion() *MissionUpsertOne {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateGpuVersion()
	})
}

// Exec executes the query.
func (u *MissionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for MissionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MissionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MissionUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MissionUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MissionCreateBulk is the builder for creating many Mission entities in bulk.
type MissionCreateBulk struct {
	config
	builders []*MissionCreate
	conflict []sql.ConflictOption
}

// Save creates the Mission entities in the database.
func (mcb *MissionCreateBulk) Save(ctx context.Context) ([]*Mission, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Mission, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MissionCreateBulk) SaveX(ctx context.Context) []*Mission {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MissionCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MissionCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Mission.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MissionUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (mcb *MissionCreateBulk) OnConflict(opts ...sql.ConflictOption) *MissionUpsertBulk {
	mcb.conflict = opts
	return &MissionUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Mission.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcb *MissionCreateBulk) OnConflictColumns(columns ...string) *MissionUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &MissionUpsertBulk{
		create: mcb,
	}
}

// MissionUpsertBulk is the builder for "upsert"-ing
// a bulk of Mission nodes.
type MissionUpsertBulk struct {
	create *MissionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Mission.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(mission.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MissionUpsertBulk) UpdateNewValues() *MissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(mission.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(mission.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Mission.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MissionUpsertBulk) Ignore() *MissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MissionUpsertBulk) DoNothing() *MissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MissionCreateBulk.OnConflict
// documentation for more info.
func (u *MissionUpsertBulk) Update(set func(*MissionUpsert)) *MissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MissionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *MissionUpsertBulk) SetCreatedBy(v int64) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *MissionUpsertBulk) AddCreatedBy(v int64) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateCreatedBy() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MissionUpsertBulk) SetUpdatedBy(v int64) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MissionUpsertBulk) AddUpdatedBy(v int64) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateUpdatedBy() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MissionUpsertBulk) SetUpdatedAt(v time.Time) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateUpdatedAt() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MissionUpsertBulk) SetDeletedAt(v time.Time) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateDeletedAt() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetType sets the "type" field.
func (u *MissionUpsertBulk) SetType(v enums.MissionType) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateType() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateType()
	})
}

// SetBody sets the "body" field.
func (u *MissionUpsertBulk) SetBody(v string) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateBody() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateBody()
	})
}

// SetCallBackURL sets the "call_back_url" field.
func (u *MissionUpsertBulk) SetCallBackURL(v string) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetCallBackURL(v)
	})
}

// UpdateCallBackURL sets the "call_back_url" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateCallBackURL() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateCallBackURL()
	})
}

// SetStatus sets the "status" field.
func (u *MissionUpsertBulk) SetStatus(v enums.MissionStatus) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateStatus() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateStatus()
	})
}

// SetResult sets the "result" field.
func (u *MissionUpsertBulk) SetResult(v enums.MissionResult) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetResult(v)
	})
}

// UpdateResult sets the "result" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateResult() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateResult()
	})
}

// SetResultUrls sets the "result_urls" field.
func (u *MissionUpsertBulk) SetResultUrls(v []string) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetResultUrls(v)
	})
}

// UpdateResultUrls sets the "result_urls" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateResultUrls() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateResultUrls()
	})
}

// ClearResultUrls clears the value of the "result_urls" field.
func (u *MissionUpsertBulk) ClearResultUrls() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.ClearResultUrls()
	})
}

// SetKeyPairID sets the "key_pair_id" field.
func (u *MissionUpsertBulk) SetKeyPairID(v int64) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetKeyPairID(v)
	})
}

// UpdateKeyPairID sets the "key_pair_id" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateKeyPairID() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateKeyPairID()
	})
}

// SetMissionBatchNumber sets the "mission_batch_number" field.
func (u *MissionUpsertBulk) SetMissionBatchNumber(v string) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetMissionBatchNumber(v)
	})
}

// UpdateMissionBatchNumber sets the "mission_batch_number" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateMissionBatchNumber() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateMissionBatchNumber()
	})
}

// SetGpuVersion sets the "gpu_version" field.
func (u *MissionUpsertBulk) SetGpuVersion(v enums.GpuVersion) *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.SetGpuVersion(v)
	})
}

// UpdateGpuVersion sets the "gpu_version" field to the value that was provided on create.
func (u *MissionUpsertBulk) UpdateGpuVersion() *MissionUpsertBulk {
	return u.Update(func(s *MissionUpsert) {
		s.UpdateGpuVersion()
	})
}

// Exec executes the query.
func (u *MissionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the MissionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for MissionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MissionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
