// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionloadbalance"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// MissionLoadBalanceCreate is the builder for creating a MissionLoadBalance entity.
type MissionLoadBalanceCreate struct {
	config
	mutation *MissionLoadBalanceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (mlbc *MissionLoadBalanceCreate) SetCreatedBy(i int64) *MissionLoadBalanceCreate {
	mlbc.mutation.SetCreatedBy(i)
	return mlbc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mlbc *MissionLoadBalanceCreate) SetNillableCreatedBy(i *int64) *MissionLoadBalanceCreate {
	if i != nil {
		mlbc.SetCreatedBy(*i)
	}
	return mlbc
}

// SetUpdatedBy sets the "updated_by" field.
func (mlbc *MissionLoadBalanceCreate) SetUpdatedBy(i int64) *MissionLoadBalanceCreate {
	mlbc.mutation.SetUpdatedBy(i)
	return mlbc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mlbc *MissionLoadBalanceCreate) SetNillableUpdatedBy(i *int64) *MissionLoadBalanceCreate {
	if i != nil {
		mlbc.SetUpdatedBy(*i)
	}
	return mlbc
}

// SetCreatedAt sets the "created_at" field.
func (mlbc *MissionLoadBalanceCreate) SetCreatedAt(t time.Time) *MissionLoadBalanceCreate {
	mlbc.mutation.SetCreatedAt(t)
	return mlbc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mlbc *MissionLoadBalanceCreate) SetNillableCreatedAt(t *time.Time) *MissionLoadBalanceCreate {
	if t != nil {
		mlbc.SetCreatedAt(*t)
	}
	return mlbc
}

// SetUpdatedAt sets the "updated_at" field.
func (mlbc *MissionLoadBalanceCreate) SetUpdatedAt(t time.Time) *MissionLoadBalanceCreate {
	mlbc.mutation.SetUpdatedAt(t)
	return mlbc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mlbc *MissionLoadBalanceCreate) SetNillableUpdatedAt(t *time.Time) *MissionLoadBalanceCreate {
	if t != nil {
		mlbc.SetUpdatedAt(*t)
	}
	return mlbc
}

// SetDeletedAt sets the "deleted_at" field.
func (mlbc *MissionLoadBalanceCreate) SetDeletedAt(t time.Time) *MissionLoadBalanceCreate {
	mlbc.mutation.SetDeletedAt(t)
	return mlbc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mlbc *MissionLoadBalanceCreate) SetNillableDeletedAt(t *time.Time) *MissionLoadBalanceCreate {
	if t != nil {
		mlbc.SetDeletedAt(*t)
	}
	return mlbc
}

// SetMissionType sets the "mission_type" field.
func (mlbc *MissionLoadBalanceCreate) SetMissionType(et enums.MissionType) *MissionLoadBalanceCreate {
	mlbc.mutation.SetMissionType(et)
	return mlbc
}

// SetNillableMissionType sets the "mission_type" field if the given value is not nil.
func (mlbc *MissionLoadBalanceCreate) SetNillableMissionType(et *enums.MissionType) *MissionLoadBalanceCreate {
	if et != nil {
		mlbc.SetMissionType(*et)
	}
	return mlbc
}

// SetUserID sets the "user_id" field.
func (mlbc *MissionLoadBalanceCreate) SetUserID(i int64) *MissionLoadBalanceCreate {
	mlbc.mutation.SetUserID(i)
	return mlbc
}

// SetState sets the "state" field.
func (mlbc *MissionLoadBalanceCreate) SetState(elbs enums.MissionLoadBalanceState) *MissionLoadBalanceCreate {
	mlbc.mutation.SetState(elbs)
	return mlbc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (mlbc *MissionLoadBalanceCreate) SetNillableState(elbs *enums.MissionLoadBalanceState) *MissionLoadBalanceCreate {
	if elbs != nil {
		mlbc.SetState(*elbs)
	}
	return mlbc
}

// SetStartedAt sets the "started_at" field.
func (mlbc *MissionLoadBalanceCreate) SetStartedAt(t time.Time) *MissionLoadBalanceCreate {
	mlbc.mutation.SetStartedAt(t)
	return mlbc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (mlbc *MissionLoadBalanceCreate) SetNillableStartedAt(t *time.Time) *MissionLoadBalanceCreate {
	if t != nil {
		mlbc.SetStartedAt(*t)
	}
	return mlbc
}

// SetFinishedAt sets the "finished_at" field.
func (mlbc *MissionLoadBalanceCreate) SetFinishedAt(t time.Time) *MissionLoadBalanceCreate {
	mlbc.mutation.SetFinishedAt(t)
	return mlbc
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (mlbc *MissionLoadBalanceCreate) SetNillableFinishedAt(t *time.Time) *MissionLoadBalanceCreate {
	if t != nil {
		mlbc.SetFinishedAt(*t)
	}
	return mlbc
}

// SetGpuVersion sets the "gpu_version" field.
func (mlbc *MissionLoadBalanceCreate) SetGpuVersion(ev enums.GpuVersion) *MissionLoadBalanceCreate {
	mlbc.mutation.SetGpuVersion(ev)
	return mlbc
}

// SetNillableGpuVersion sets the "gpu_version" field if the given value is not nil.
func (mlbc *MissionLoadBalanceCreate) SetNillableGpuVersion(ev *enums.GpuVersion) *MissionLoadBalanceCreate {
	if ev != nil {
		mlbc.SetGpuVersion(*ev)
	}
	return mlbc
}

// SetGpuNum sets the "gpu_num" field.
func (mlbc *MissionLoadBalanceCreate) SetGpuNum(i int8) *MissionLoadBalanceCreate {
	mlbc.mutation.SetGpuNum(i)
	return mlbc
}

// SetNillableGpuNum sets the "gpu_num" field if the given value is not nil.
func (mlbc *MissionLoadBalanceCreate) SetNillableGpuNum(i *int8) *MissionLoadBalanceCreate {
	if i != nil {
		mlbc.SetGpuNum(*i)
	}
	return mlbc
}

// SetMaxMissionCount sets the "max_mission_count" field.
func (mlbc *MissionLoadBalanceCreate) SetMaxMissionCount(i int8) *MissionLoadBalanceCreate {
	mlbc.mutation.SetMaxMissionCount(i)
	return mlbc
}

// SetNillableMaxMissionCount sets the "max_mission_count" field if the given value is not nil.
func (mlbc *MissionLoadBalanceCreate) SetNillableMaxMissionCount(i *int8) *MissionLoadBalanceCreate {
	if i != nil {
		mlbc.SetMaxMissionCount(*i)
	}
	return mlbc
}

// SetMinMissionCount sets the "min_mission_count" field.
func (mlbc *MissionLoadBalanceCreate) SetMinMissionCount(i int8) *MissionLoadBalanceCreate {
	mlbc.mutation.SetMinMissionCount(i)
	return mlbc
}

// SetNillableMinMissionCount sets the "min_mission_count" field if the given value is not nil.
func (mlbc *MissionLoadBalanceCreate) SetNillableMinMissionCount(i *int8) *MissionLoadBalanceCreate {
	if i != nil {
		mlbc.SetMinMissionCount(*i)
	}
	return mlbc
}

// SetMissionBatchID sets the "mission_batch_id" field.
func (mlbc *MissionLoadBalanceCreate) SetMissionBatchID(i int64) *MissionLoadBalanceCreate {
	mlbc.mutation.SetMissionBatchID(i)
	return mlbc
}

// SetNillableMissionBatchID sets the "mission_batch_id" field if the given value is not nil.
func (mlbc *MissionLoadBalanceCreate) SetNillableMissionBatchID(i *int64) *MissionLoadBalanceCreate {
	if i != nil {
		mlbc.SetMissionBatchID(*i)
	}
	return mlbc
}

// SetMissionBatchNumber sets the "mission_batch_number" field.
func (mlbc *MissionLoadBalanceCreate) SetMissionBatchNumber(s string) *MissionLoadBalanceCreate {
	mlbc.mutation.SetMissionBatchNumber(s)
	return mlbc
}

// SetNillableMissionBatchNumber sets the "mission_batch_number" field if the given value is not nil.
func (mlbc *MissionLoadBalanceCreate) SetNillableMissionBatchNumber(s *string) *MissionLoadBalanceCreate {
	if s != nil {
		mlbc.SetMissionBatchNumber(*s)
	}
	return mlbc
}

// SetID sets the "id" field.
func (mlbc *MissionLoadBalanceCreate) SetID(i int64) *MissionLoadBalanceCreate {
	mlbc.mutation.SetID(i)
	return mlbc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mlbc *MissionLoadBalanceCreate) SetNillableID(i *int64) *MissionLoadBalanceCreate {
	if i != nil {
		mlbc.SetID(*i)
	}
	return mlbc
}

// Mutation returns the MissionLoadBalanceMutation object of the builder.
func (mlbc *MissionLoadBalanceCreate) Mutation() *MissionLoadBalanceMutation {
	return mlbc.mutation
}

// Save creates the MissionLoadBalance in the database.
func (mlbc *MissionLoadBalanceCreate) Save(ctx context.Context) (*MissionLoadBalance, error) {
	mlbc.defaults()
	return withHooks(ctx, mlbc.sqlSave, mlbc.mutation, mlbc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mlbc *MissionLoadBalanceCreate) SaveX(ctx context.Context) *MissionLoadBalance {
	v, err := mlbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mlbc *MissionLoadBalanceCreate) Exec(ctx context.Context) error {
	_, err := mlbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mlbc *MissionLoadBalanceCreate) ExecX(ctx context.Context) {
	if err := mlbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mlbc *MissionLoadBalanceCreate) defaults() {
	if _, ok := mlbc.mutation.CreatedBy(); !ok {
		v := missionloadbalance.DefaultCreatedBy
		mlbc.mutation.SetCreatedBy(v)
	}
	if _, ok := mlbc.mutation.UpdatedBy(); !ok {
		v := missionloadbalance.DefaultUpdatedBy
		mlbc.mutation.SetUpdatedBy(v)
	}
	if _, ok := mlbc.mutation.CreatedAt(); !ok {
		v := missionloadbalance.DefaultCreatedAt()
		mlbc.mutation.SetCreatedAt(v)
	}
	if _, ok := mlbc.mutation.UpdatedAt(); !ok {
		v := missionloadbalance.DefaultUpdatedAt()
		mlbc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mlbc.mutation.DeletedAt(); !ok {
		v := missionloadbalance.DefaultDeletedAt
		mlbc.mutation.SetDeletedAt(v)
	}
	if _, ok := mlbc.mutation.MissionType(); !ok {
		v := missionloadbalance.DefaultMissionType
		mlbc.mutation.SetMissionType(v)
	}
	if _, ok := mlbc.mutation.State(); !ok {
		v := missionloadbalance.DefaultState
		mlbc.mutation.SetState(v)
	}
	if _, ok := mlbc.mutation.StartedAt(); !ok {
		v := missionloadbalance.DefaultStartedAt
		mlbc.mutation.SetStartedAt(v)
	}
	if _, ok := mlbc.mutation.FinishedAt(); !ok {
		v := missionloadbalance.DefaultFinishedAt
		mlbc.mutation.SetFinishedAt(v)
	}
	if _, ok := mlbc.mutation.GpuVersion(); !ok {
		v := missionloadbalance.DefaultGpuVersion
		mlbc.mutation.SetGpuVersion(v)
	}
	if _, ok := mlbc.mutation.GpuNum(); !ok {
		v := missionloadbalance.DefaultGpuNum
		mlbc.mutation.SetGpuNum(v)
	}
	if _, ok := mlbc.mutation.MaxMissionCount(); !ok {
		v := missionloadbalance.DefaultMaxMissionCount
		mlbc.mutation.SetMaxMissionCount(v)
	}
	if _, ok := mlbc.mutation.MinMissionCount(); !ok {
		v := missionloadbalance.DefaultMinMissionCount
		mlbc.mutation.SetMinMissionCount(v)
	}
	if _, ok := mlbc.mutation.MissionBatchID(); !ok {
		v := missionloadbalance.DefaultMissionBatchID
		mlbc.mutation.SetMissionBatchID(v)
	}
	if _, ok := mlbc.mutation.MissionBatchNumber(); !ok {
		v := missionloadbalance.DefaultMissionBatchNumber
		mlbc.mutation.SetMissionBatchNumber(v)
	}
	if _, ok := mlbc.mutation.ID(); !ok {
		v := missionloadbalance.DefaultID()
		mlbc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mlbc *MissionLoadBalanceCreate) check() error {
	if _, ok := mlbc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "MissionLoadBalance.created_by"`)}
	}
	if _, ok := mlbc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "MissionLoadBalance.updated_by"`)}
	}
	if _, ok := mlbc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "MissionLoadBalance.created_at"`)}
	}
	if _, ok := mlbc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "MissionLoadBalance.updated_at"`)}
	}
	if _, ok := mlbc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "MissionLoadBalance.deleted_at"`)}
	}
	if _, ok := mlbc.mutation.MissionType(); !ok {
		return &ValidationError{Name: "mission_type", err: errors.New(`cep_ent: missing required field "MissionLoadBalance.mission_type"`)}
	}
	if v, ok := mlbc.mutation.MissionType(); ok {
		if err := missionloadbalance.MissionTypeValidator(v); err != nil {
			return &ValidationError{Name: "mission_type", err: fmt.Errorf(`cep_ent: validator failed for field "MissionLoadBalance.mission_type": %w`, err)}
		}
	}
	if _, ok := mlbc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "MissionLoadBalance.user_id"`)}
	}
	if _, ok := mlbc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`cep_ent: missing required field "MissionLoadBalance.state"`)}
	}
	if v, ok := mlbc.mutation.State(); ok {
		if err := missionloadbalance.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`cep_ent: validator failed for field "MissionLoadBalance.state": %w`, err)}
		}
	}
	if _, ok := mlbc.mutation.StartedAt(); !ok {
		return &ValidationError{Name: "started_at", err: errors.New(`cep_ent: missing required field "MissionLoadBalance.started_at"`)}
	}
	if _, ok := mlbc.mutation.FinishedAt(); !ok {
		return &ValidationError{Name: "finished_at", err: errors.New(`cep_ent: missing required field "MissionLoadBalance.finished_at"`)}
	}
	if _, ok := mlbc.mutation.GpuVersion(); !ok {
		return &ValidationError{Name: "gpu_version", err: errors.New(`cep_ent: missing required field "MissionLoadBalance.gpu_version"`)}
	}
	if v, ok := mlbc.mutation.GpuVersion(); ok {
		if err := missionloadbalance.GpuVersionValidator(v); err != nil {
			return &ValidationError{Name: "gpu_version", err: fmt.Errorf(`cep_ent: validator failed for field "MissionLoadBalance.gpu_version": %w`, err)}
		}
	}
	if _, ok := mlbc.mutation.GpuNum(); !ok {
		return &ValidationError{Name: "gpu_num", err: errors.New(`cep_ent: missing required field "MissionLoadBalance.gpu_num"`)}
	}
	if _, ok := mlbc.mutation.MaxMissionCount(); !ok {
		return &ValidationError{Name: "max_mission_count", err: errors.New(`cep_ent: missing required field "MissionLoadBalance.max_mission_count"`)}
	}
	if _, ok := mlbc.mutation.MinMissionCount(); !ok {
		return &ValidationError{Name: "min_mission_count", err: errors.New(`cep_ent: missing required field "MissionLoadBalance.min_mission_count"`)}
	}
	if _, ok := mlbc.mutation.MissionBatchID(); !ok {
		return &ValidationError{Name: "mission_batch_id", err: errors.New(`cep_ent: missing required field "MissionLoadBalance.mission_batch_id"`)}
	}
	if _, ok := mlbc.mutation.MissionBatchNumber(); !ok {
		return &ValidationError{Name: "mission_batch_number", err: errors.New(`cep_ent: missing required field "MissionLoadBalance.mission_batch_number"`)}
	}
	return nil
}

func (mlbc *MissionLoadBalanceCreate) sqlSave(ctx context.Context) (*MissionLoadBalance, error) {
	if err := mlbc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mlbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mlbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	mlbc.mutation.id = &_node.ID
	mlbc.mutation.done = true
	return _node, nil
}

func (mlbc *MissionLoadBalanceCreate) createSpec() (*MissionLoadBalance, *sqlgraph.CreateSpec) {
	var (
		_node = &MissionLoadBalance{config: mlbc.config}
		_spec = sqlgraph.NewCreateSpec(missionloadbalance.Table, sqlgraph.NewFieldSpec(missionloadbalance.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = mlbc.conflict
	if id, ok := mlbc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mlbc.mutation.CreatedBy(); ok {
		_spec.SetField(missionloadbalance.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := mlbc.mutation.UpdatedBy(); ok {
		_spec.SetField(missionloadbalance.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := mlbc.mutation.CreatedAt(); ok {
		_spec.SetField(missionloadbalance.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mlbc.mutation.UpdatedAt(); ok {
		_spec.SetField(missionloadbalance.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mlbc.mutation.DeletedAt(); ok {
		_spec.SetField(missionloadbalance.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := mlbc.mutation.MissionType(); ok {
		_spec.SetField(missionloadbalance.FieldMissionType, field.TypeEnum, value)
		_node.MissionType = value
	}
	if value, ok := mlbc.mutation.UserID(); ok {
		_spec.SetField(missionloadbalance.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := mlbc.mutation.State(); ok {
		_spec.SetField(missionloadbalance.FieldState, field.TypeEnum, value)
		_node.State = value
	}
	if value, ok := mlbc.mutation.StartedAt(); ok {
		_spec.SetField(missionloadbalance.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := mlbc.mutation.FinishedAt(); ok {
		_spec.SetField(missionloadbalance.FieldFinishedAt, field.TypeTime, value)
		_node.FinishedAt = value
	}
	if value, ok := mlbc.mutation.GpuVersion(); ok {
		_spec.SetField(missionloadbalance.FieldGpuVersion, field.TypeEnum, value)
		_node.GpuVersion = value
	}
	if value, ok := mlbc.mutation.GpuNum(); ok {
		_spec.SetField(missionloadbalance.FieldGpuNum, field.TypeInt8, value)
		_node.GpuNum = value
	}
	if value, ok := mlbc.mutation.MaxMissionCount(); ok {
		_spec.SetField(missionloadbalance.FieldMaxMissionCount, field.TypeInt8, value)
		_node.MaxMissionCount = value
	}
	if value, ok := mlbc.mutation.MinMissionCount(); ok {
		_spec.SetField(missionloadbalance.FieldMinMissionCount, field.TypeInt8, value)
		_node.MinMissionCount = value
	}
	if value, ok := mlbc.mutation.MissionBatchID(); ok {
		_spec.SetField(missionloadbalance.FieldMissionBatchID, field.TypeInt64, value)
		_node.MissionBatchID = value
	}
	if value, ok := mlbc.mutation.MissionBatchNumber(); ok {
		_spec.SetField(missionloadbalance.FieldMissionBatchNumber, field.TypeString, value)
		_node.MissionBatchNumber = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MissionLoadBalance.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MissionLoadBalanceUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (mlbc *MissionLoadBalanceCreate) OnConflict(opts ...sql.ConflictOption) *MissionLoadBalanceUpsertOne {
	mlbc.conflict = opts
	return &MissionLoadBalanceUpsertOne{
		create: mlbc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MissionLoadBalance.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mlbc *MissionLoadBalanceCreate) OnConflictColumns(columns ...string) *MissionLoadBalanceUpsertOne {
	mlbc.conflict = append(mlbc.conflict, sql.ConflictColumns(columns...))
	return &MissionLoadBalanceUpsertOne{
		create: mlbc,
	}
}

type (
	// MissionLoadBalanceUpsertOne is the builder for "upsert"-ing
	//  one MissionLoadBalance node.
	MissionLoadBalanceUpsertOne struct {
		create *MissionLoadBalanceCreate
	}

	// MissionLoadBalanceUpsert is the "OnConflict" setter.
	MissionLoadBalanceUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *MissionLoadBalanceUpsert) SetCreatedBy(v int64) *MissionLoadBalanceUpsert {
	u.Set(missionloadbalance.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsert) UpdateCreatedBy() *MissionLoadBalanceUpsert {
	u.SetExcluded(missionloadbalance.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *MissionLoadBalanceUpsert) AddCreatedBy(v int64) *MissionLoadBalanceUpsert {
	u.Add(missionloadbalance.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MissionLoadBalanceUpsert) SetUpdatedBy(v int64) *MissionLoadBalanceUpsert {
	u.Set(missionloadbalance.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsert) UpdateUpdatedBy() *MissionLoadBalanceUpsert {
	u.SetExcluded(missionloadbalance.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MissionLoadBalanceUpsert) AddUpdatedBy(v int64) *MissionLoadBalanceUpsert {
	u.Add(missionloadbalance.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MissionLoadBalanceUpsert) SetUpdatedAt(v time.Time) *MissionLoadBalanceUpsert {
	u.Set(missionloadbalance.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsert) UpdateUpdatedAt() *MissionLoadBalanceUpsert {
	u.SetExcluded(missionloadbalance.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MissionLoadBalanceUpsert) SetDeletedAt(v time.Time) *MissionLoadBalanceUpsert {
	u.Set(missionloadbalance.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsert) UpdateDeletedAt() *MissionLoadBalanceUpsert {
	u.SetExcluded(missionloadbalance.FieldDeletedAt)
	return u
}

// SetMissionType sets the "mission_type" field.
func (u *MissionLoadBalanceUpsert) SetMissionType(v enums.MissionType) *MissionLoadBalanceUpsert {
	u.Set(missionloadbalance.FieldMissionType, v)
	return u
}

// UpdateMissionType sets the "mission_type" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsert) UpdateMissionType() *MissionLoadBalanceUpsert {
	u.SetExcluded(missionloadbalance.FieldMissionType)
	return u
}

// SetUserID sets the "user_id" field.
func (u *MissionLoadBalanceUpsert) SetUserID(v int64) *MissionLoadBalanceUpsert {
	u.Set(missionloadbalance.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsert) UpdateUserID() *MissionLoadBalanceUpsert {
	u.SetExcluded(missionloadbalance.FieldUserID)
	return u
}

// AddUserID adds v to the "user_id" field.
func (u *MissionLoadBalanceUpsert) AddUserID(v int64) *MissionLoadBalanceUpsert {
	u.Add(missionloadbalance.FieldUserID, v)
	return u
}

// SetState sets the "state" field.
func (u *MissionLoadBalanceUpsert) SetState(v enums.MissionLoadBalanceState) *MissionLoadBalanceUpsert {
	u.Set(missionloadbalance.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsert) UpdateState() *MissionLoadBalanceUpsert {
	u.SetExcluded(missionloadbalance.FieldState)
	return u
}

// SetStartedAt sets the "started_at" field.
func (u *MissionLoadBalanceUpsert) SetStartedAt(v time.Time) *MissionLoadBalanceUpsert {
	u.Set(missionloadbalance.FieldStartedAt, v)
	return u
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsert) UpdateStartedAt() *MissionLoadBalanceUpsert {
	u.SetExcluded(missionloadbalance.FieldStartedAt)
	return u
}

// SetFinishedAt sets the "finished_at" field.
func (u *MissionLoadBalanceUpsert) SetFinishedAt(v time.Time) *MissionLoadBalanceUpsert {
	u.Set(missionloadbalance.FieldFinishedAt, v)
	return u
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsert) UpdateFinishedAt() *MissionLoadBalanceUpsert {
	u.SetExcluded(missionloadbalance.FieldFinishedAt)
	return u
}

// SetGpuVersion sets the "gpu_version" field.
func (u *MissionLoadBalanceUpsert) SetGpuVersion(v enums.GpuVersion) *MissionLoadBalanceUpsert {
	u.Set(missionloadbalance.FieldGpuVersion, v)
	return u
}

// UpdateGpuVersion sets the "gpu_version" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsert) UpdateGpuVersion() *MissionLoadBalanceUpsert {
	u.SetExcluded(missionloadbalance.FieldGpuVersion)
	return u
}

// SetGpuNum sets the "gpu_num" field.
func (u *MissionLoadBalanceUpsert) SetGpuNum(v int8) *MissionLoadBalanceUpsert {
	u.Set(missionloadbalance.FieldGpuNum, v)
	return u
}

// UpdateGpuNum sets the "gpu_num" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsert) UpdateGpuNum() *MissionLoadBalanceUpsert {
	u.SetExcluded(missionloadbalance.FieldGpuNum)
	return u
}

// AddGpuNum adds v to the "gpu_num" field.
func (u *MissionLoadBalanceUpsert) AddGpuNum(v int8) *MissionLoadBalanceUpsert {
	u.Add(missionloadbalance.FieldGpuNum, v)
	return u
}

// SetMaxMissionCount sets the "max_mission_count" field.
func (u *MissionLoadBalanceUpsert) SetMaxMissionCount(v int8) *MissionLoadBalanceUpsert {
	u.Set(missionloadbalance.FieldMaxMissionCount, v)
	return u
}

// UpdateMaxMissionCount sets the "max_mission_count" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsert) UpdateMaxMissionCount() *MissionLoadBalanceUpsert {
	u.SetExcluded(missionloadbalance.FieldMaxMissionCount)
	return u
}

// AddMaxMissionCount adds v to the "max_mission_count" field.
func (u *MissionLoadBalanceUpsert) AddMaxMissionCount(v int8) *MissionLoadBalanceUpsert {
	u.Add(missionloadbalance.FieldMaxMissionCount, v)
	return u
}

// SetMinMissionCount sets the "min_mission_count" field.
func (u *MissionLoadBalanceUpsert) SetMinMissionCount(v int8) *MissionLoadBalanceUpsert {
	u.Set(missionloadbalance.FieldMinMissionCount, v)
	return u
}

// UpdateMinMissionCount sets the "min_mission_count" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsert) UpdateMinMissionCount() *MissionLoadBalanceUpsert {
	u.SetExcluded(missionloadbalance.FieldMinMissionCount)
	return u
}

// AddMinMissionCount adds v to the "min_mission_count" field.
func (u *MissionLoadBalanceUpsert) AddMinMissionCount(v int8) *MissionLoadBalanceUpsert {
	u.Add(missionloadbalance.FieldMinMissionCount, v)
	return u
}

// SetMissionBatchID sets the "mission_batch_id" field.
func (u *MissionLoadBalanceUpsert) SetMissionBatchID(v int64) *MissionLoadBalanceUpsert {
	u.Set(missionloadbalance.FieldMissionBatchID, v)
	return u
}

// UpdateMissionBatchID sets the "mission_batch_id" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsert) UpdateMissionBatchID() *MissionLoadBalanceUpsert {
	u.SetExcluded(missionloadbalance.FieldMissionBatchID)
	return u
}

// AddMissionBatchID adds v to the "mission_batch_id" field.
func (u *MissionLoadBalanceUpsert) AddMissionBatchID(v int64) *MissionLoadBalanceUpsert {
	u.Add(missionloadbalance.FieldMissionBatchID, v)
	return u
}

// SetMissionBatchNumber sets the "mission_batch_number" field.
func (u *MissionLoadBalanceUpsert) SetMissionBatchNumber(v string) *MissionLoadBalanceUpsert {
	u.Set(missionloadbalance.FieldMissionBatchNumber, v)
	return u
}

// UpdateMissionBatchNumber sets the "mission_batch_number" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsert) UpdateMissionBatchNumber() *MissionLoadBalanceUpsert {
	u.SetExcluded(missionloadbalance.FieldMissionBatchNumber)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MissionLoadBalance.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(missionloadbalance.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MissionLoadBalanceUpsertOne) UpdateNewValues() *MissionLoadBalanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(missionloadbalance.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(missionloadbalance.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MissionLoadBalance.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MissionLoadBalanceUpsertOne) Ignore() *MissionLoadBalanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MissionLoadBalanceUpsertOne) DoNothing() *MissionLoadBalanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MissionLoadBalanceCreate.OnConflict
// documentation for more info.
func (u *MissionLoadBalanceUpsertOne) Update(set func(*MissionLoadBalanceUpsert)) *MissionLoadBalanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MissionLoadBalanceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *MissionLoadBalanceUpsertOne) SetCreatedBy(v int64) *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *MissionLoadBalanceUpsertOne) AddCreatedBy(v int64) *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsertOne) UpdateCreatedBy() *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MissionLoadBalanceUpsertOne) SetUpdatedBy(v int64) *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MissionLoadBalanceUpsertOne) AddUpdatedBy(v int64) *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsertOne) UpdateUpdatedBy() *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MissionLoadBalanceUpsertOne) SetUpdatedAt(v time.Time) *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsertOne) UpdateUpdatedAt() *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MissionLoadBalanceUpsertOne) SetDeletedAt(v time.Time) *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsertOne) UpdateDeletedAt() *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetMissionType sets the "mission_type" field.
func (u *MissionLoadBalanceUpsertOne) SetMissionType(v enums.MissionType) *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.SetMissionType(v)
	})
}

// UpdateMissionType sets the "mission_type" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsertOne) UpdateMissionType() *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.UpdateMissionType()
	})
}

// SetUserID sets the "user_id" field.
func (u *MissionLoadBalanceUpsertOne) SetUserID(v int64) *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *MissionLoadBalanceUpsertOne) AddUserID(v int64) *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsertOne) UpdateUserID() *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.UpdateUserID()
	})
}

// SetState sets the "state" field.
func (u *MissionLoadBalanceUpsertOne) SetState(v enums.MissionLoadBalanceState) *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsertOne) UpdateState() *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.UpdateState()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *MissionLoadBalanceUpsertOne) SetStartedAt(v time.Time) *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsertOne) UpdateStartedAt() *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.UpdateStartedAt()
	})
}

// SetFinishedAt sets the "finished_at" field.
func (u *MissionLoadBalanceUpsertOne) SetFinishedAt(v time.Time) *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.SetFinishedAt(v)
	})
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsertOne) UpdateFinishedAt() *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.UpdateFinishedAt()
	})
}

// SetGpuVersion sets the "gpu_version" field.
func (u *MissionLoadBalanceUpsertOne) SetGpuVersion(v enums.GpuVersion) *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.SetGpuVersion(v)
	})
}

// UpdateGpuVersion sets the "gpu_version" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsertOne) UpdateGpuVersion() *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.UpdateGpuVersion()
	})
}

// SetGpuNum sets the "gpu_num" field.
func (u *MissionLoadBalanceUpsertOne) SetGpuNum(v int8) *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.SetGpuNum(v)
	})
}

// AddGpuNum adds v to the "gpu_num" field.
func (u *MissionLoadBalanceUpsertOne) AddGpuNum(v int8) *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.AddGpuNum(v)
	})
}

// UpdateGpuNum sets the "gpu_num" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsertOne) UpdateGpuNum() *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.UpdateGpuNum()
	})
}

// SetMaxMissionCount sets the "max_mission_count" field.
func (u *MissionLoadBalanceUpsertOne) SetMaxMissionCount(v int8) *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.SetMaxMissionCount(v)
	})
}

// AddMaxMissionCount adds v to the "max_mission_count" field.
func (u *MissionLoadBalanceUpsertOne) AddMaxMissionCount(v int8) *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.AddMaxMissionCount(v)
	})
}

// UpdateMaxMissionCount sets the "max_mission_count" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsertOne) UpdateMaxMissionCount() *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.UpdateMaxMissionCount()
	})
}

// SetMinMissionCount sets the "min_mission_count" field.
func (u *MissionLoadBalanceUpsertOne) SetMinMissionCount(v int8) *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.SetMinMissionCount(v)
	})
}

// AddMinMissionCount adds v to the "min_mission_count" field.
func (u *MissionLoadBalanceUpsertOne) AddMinMissionCount(v int8) *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.AddMinMissionCount(v)
	})
}

// UpdateMinMissionCount sets the "min_mission_count" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsertOne) UpdateMinMissionCount() *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.UpdateMinMissionCount()
	})
}

// SetMissionBatchID sets the "mission_batch_id" field.
func (u *MissionLoadBalanceUpsertOne) SetMissionBatchID(v int64) *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.SetMissionBatchID(v)
	})
}

// AddMissionBatchID adds v to the "mission_batch_id" field.
func (u *MissionLoadBalanceUpsertOne) AddMissionBatchID(v int64) *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.AddMissionBatchID(v)
	})
}

// UpdateMissionBatchID sets the "mission_batch_id" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsertOne) UpdateMissionBatchID() *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.UpdateMissionBatchID()
	})
}

// SetMissionBatchNumber sets the "mission_batch_number" field.
func (u *MissionLoadBalanceUpsertOne) SetMissionBatchNumber(v string) *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.SetMissionBatchNumber(v)
	})
}

// UpdateMissionBatchNumber sets the "mission_batch_number" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsertOne) UpdateMissionBatchNumber() *MissionLoadBalanceUpsertOne {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.UpdateMissionBatchNumber()
	})
}

// Exec executes the query.
func (u *MissionLoadBalanceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for MissionLoadBalanceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MissionLoadBalanceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MissionLoadBalanceUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MissionLoadBalanceUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MissionLoadBalanceCreateBulk is the builder for creating many MissionLoadBalance entities in bulk.
type MissionLoadBalanceCreateBulk struct {
	config
	err      error
	builders []*MissionLoadBalanceCreate
	conflict []sql.ConflictOption
}

// Save creates the MissionLoadBalance entities in the database.
func (mlbcb *MissionLoadBalanceCreateBulk) Save(ctx context.Context) ([]*MissionLoadBalance, error) {
	if mlbcb.err != nil {
		return nil, mlbcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mlbcb.builders))
	nodes := make([]*MissionLoadBalance, len(mlbcb.builders))
	mutators := make([]Mutator, len(mlbcb.builders))
	for i := range mlbcb.builders {
		func(i int, root context.Context) {
			builder := mlbcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MissionLoadBalanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mlbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mlbcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mlbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mlbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mlbcb *MissionLoadBalanceCreateBulk) SaveX(ctx context.Context) []*MissionLoadBalance {
	v, err := mlbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mlbcb *MissionLoadBalanceCreateBulk) Exec(ctx context.Context) error {
	_, err := mlbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mlbcb *MissionLoadBalanceCreateBulk) ExecX(ctx context.Context) {
	if err := mlbcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MissionLoadBalance.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MissionLoadBalanceUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (mlbcb *MissionLoadBalanceCreateBulk) OnConflict(opts ...sql.ConflictOption) *MissionLoadBalanceUpsertBulk {
	mlbcb.conflict = opts
	return &MissionLoadBalanceUpsertBulk{
		create: mlbcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MissionLoadBalance.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mlbcb *MissionLoadBalanceCreateBulk) OnConflictColumns(columns ...string) *MissionLoadBalanceUpsertBulk {
	mlbcb.conflict = append(mlbcb.conflict, sql.ConflictColumns(columns...))
	return &MissionLoadBalanceUpsertBulk{
		create: mlbcb,
	}
}

// MissionLoadBalanceUpsertBulk is the builder for "upsert"-ing
// a bulk of MissionLoadBalance nodes.
type MissionLoadBalanceUpsertBulk struct {
	create *MissionLoadBalanceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MissionLoadBalance.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(missionloadbalance.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MissionLoadBalanceUpsertBulk) UpdateNewValues() *MissionLoadBalanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(missionloadbalance.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(missionloadbalance.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MissionLoadBalance.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MissionLoadBalanceUpsertBulk) Ignore() *MissionLoadBalanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MissionLoadBalanceUpsertBulk) DoNothing() *MissionLoadBalanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MissionLoadBalanceCreateBulk.OnConflict
// documentation for more info.
func (u *MissionLoadBalanceUpsertBulk) Update(set func(*MissionLoadBalanceUpsert)) *MissionLoadBalanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MissionLoadBalanceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *MissionLoadBalanceUpsertBulk) SetCreatedBy(v int64) *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *MissionLoadBalanceUpsertBulk) AddCreatedBy(v int64) *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsertBulk) UpdateCreatedBy() *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MissionLoadBalanceUpsertBulk) SetUpdatedBy(v int64) *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MissionLoadBalanceUpsertBulk) AddUpdatedBy(v int64) *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsertBulk) UpdateUpdatedBy() *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MissionLoadBalanceUpsertBulk) SetUpdatedAt(v time.Time) *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsertBulk) UpdateUpdatedAt() *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MissionLoadBalanceUpsertBulk) SetDeletedAt(v time.Time) *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsertBulk) UpdateDeletedAt() *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetMissionType sets the "mission_type" field.
func (u *MissionLoadBalanceUpsertBulk) SetMissionType(v enums.MissionType) *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.SetMissionType(v)
	})
}

// UpdateMissionType sets the "mission_type" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsertBulk) UpdateMissionType() *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.UpdateMissionType()
	})
}

// SetUserID sets the "user_id" field.
func (u *MissionLoadBalanceUpsertBulk) SetUserID(v int64) *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *MissionLoadBalanceUpsertBulk) AddUserID(v int64) *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsertBulk) UpdateUserID() *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.UpdateUserID()
	})
}

// SetState sets the "state" field.
func (u *MissionLoadBalanceUpsertBulk) SetState(v enums.MissionLoadBalanceState) *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsertBulk) UpdateState() *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.UpdateState()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *MissionLoadBalanceUpsertBulk) SetStartedAt(v time.Time) *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsertBulk) UpdateStartedAt() *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.UpdateStartedAt()
	})
}

// SetFinishedAt sets the "finished_at" field.
func (u *MissionLoadBalanceUpsertBulk) SetFinishedAt(v time.Time) *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.SetFinishedAt(v)
	})
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsertBulk) UpdateFinishedAt() *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.UpdateFinishedAt()
	})
}

// SetGpuVersion sets the "gpu_version" field.
func (u *MissionLoadBalanceUpsertBulk) SetGpuVersion(v enums.GpuVersion) *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.SetGpuVersion(v)
	})
}

// UpdateGpuVersion sets the "gpu_version" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsertBulk) UpdateGpuVersion() *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.UpdateGpuVersion()
	})
}

// SetGpuNum sets the "gpu_num" field.
func (u *MissionLoadBalanceUpsertBulk) SetGpuNum(v int8) *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.SetGpuNum(v)
	})
}

// AddGpuNum adds v to the "gpu_num" field.
func (u *MissionLoadBalanceUpsertBulk) AddGpuNum(v int8) *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.AddGpuNum(v)
	})
}

// UpdateGpuNum sets the "gpu_num" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsertBulk) UpdateGpuNum() *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.UpdateGpuNum()
	})
}

// SetMaxMissionCount sets the "max_mission_count" field.
func (u *MissionLoadBalanceUpsertBulk) SetMaxMissionCount(v int8) *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.SetMaxMissionCount(v)
	})
}

// AddMaxMissionCount adds v to the "max_mission_count" field.
func (u *MissionLoadBalanceUpsertBulk) AddMaxMissionCount(v int8) *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.AddMaxMissionCount(v)
	})
}

// UpdateMaxMissionCount sets the "max_mission_count" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsertBulk) UpdateMaxMissionCount() *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.UpdateMaxMissionCount()
	})
}

// SetMinMissionCount sets the "min_mission_count" field.
func (u *MissionLoadBalanceUpsertBulk) SetMinMissionCount(v int8) *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.SetMinMissionCount(v)
	})
}

// AddMinMissionCount adds v to the "min_mission_count" field.
func (u *MissionLoadBalanceUpsertBulk) AddMinMissionCount(v int8) *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.AddMinMissionCount(v)
	})
}

// UpdateMinMissionCount sets the "min_mission_count" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsertBulk) UpdateMinMissionCount() *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.UpdateMinMissionCount()
	})
}

// SetMissionBatchID sets the "mission_batch_id" field.
func (u *MissionLoadBalanceUpsertBulk) SetMissionBatchID(v int64) *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.SetMissionBatchID(v)
	})
}

// AddMissionBatchID adds v to the "mission_batch_id" field.
func (u *MissionLoadBalanceUpsertBulk) AddMissionBatchID(v int64) *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.AddMissionBatchID(v)
	})
}

// UpdateMissionBatchID sets the "mission_batch_id" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsertBulk) UpdateMissionBatchID() *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.UpdateMissionBatchID()
	})
}

// SetMissionBatchNumber sets the "mission_batch_number" field.
func (u *MissionLoadBalanceUpsertBulk) SetMissionBatchNumber(v string) *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.SetMissionBatchNumber(v)
	})
}

// UpdateMissionBatchNumber sets the "mission_batch_number" field to the value that was provided on create.
func (u *MissionLoadBalanceUpsertBulk) UpdateMissionBatchNumber() *MissionLoadBalanceUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceUpsert) {
		s.UpdateMissionBatchNumber()
	})
}

// Exec executes the query.
func (u *MissionLoadBalanceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the MissionLoadBalanceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for MissionLoadBalanceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MissionLoadBalanceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
