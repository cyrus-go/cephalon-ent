// Code generated by ent, DO NOT EDIT.

package mission

import (
	"cephalon-ent/pkg/enums"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the mission type in the database.
	Label = "mission"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldBody holds the string denoting the body field in the database.
	FieldBody = "body"
	// FieldCallBackURL holds the string denoting the call_back_url field in the database.
	FieldCallBackURL = "call_back_url"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldResult holds the string denoting the result field in the database.
	FieldResult = "result"
	// FieldResultUrls holds the string denoting the result_urls field in the database.
	FieldResultUrls = "result_urls"
	// FieldKeyPairID holds the string denoting the key_pair_id field in the database.
	FieldKeyPairID = "key_pair_id"
	// FieldMissionBatchNumber holds the string denoting the mission_batch_number field in the database.
	FieldMissionBatchNumber = "mission_batch_number"
	// EdgeMissionKeyPairs holds the string denoting the mission_key_pairs edge name in mutations.
	EdgeMissionKeyPairs = "mission_key_pairs"
	// EdgeKeyPair holds the string denoting the key_pair edge name in mutations.
	EdgeKeyPair = "key_pair"
	// Table holds the table name of the mission in the database.
	Table = "missions"
	// MissionKeyPairsTable is the table that holds the mission_key_pairs relation/edge.
	MissionKeyPairsTable = "mission_key_pairs"
	// MissionKeyPairsInverseTable is the table name for the MissionKeyPair entity.
	// It exists in this package in order to avoid circular dependency with the "missionkeypair" package.
	MissionKeyPairsInverseTable = "mission_key_pairs"
	// MissionKeyPairsColumn is the table column denoting the mission_key_pairs relation/edge.
	MissionKeyPairsColumn = "mission_id"
	// KeyPairTable is the table that holds the key_pair relation/edge.
	KeyPairTable = "missions"
	// KeyPairInverseTable is the table name for the HmacKeyPair entity.
	// It exists in this package in order to avoid circular dependency with the "hmackeypair" package.
	KeyPairInverseTable = "hmac_key_pairs"
	// KeyPairColumn is the table column denoting the key_pair relation/edge.
	KeyPairColumn = "key_pair_id"
)

// Columns holds all SQL columns for mission fields.
var Columns = []string{
	FieldID,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldType,
	FieldBody,
	FieldCallBackURL,
	FieldStatus,
	FieldResult,
	FieldResultUrls,
	FieldKeyPairID,
	FieldMissionBatchNumber,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedBy holds the default value on creation for the "created_by" field.
	DefaultCreatedBy int64
	// DefaultUpdatedBy holds the default value on creation for the "updated_by" field.
	DefaultUpdatedBy int64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt time.Time
	// DefaultBody holds the default value on creation for the "body" field.
	DefaultBody string
	// DefaultCallBackURL holds the default value on creation for the "call_back_url" field.
	DefaultCallBackURL string
	// DefaultKeyPairID holds the default value on creation for the "key_pair_id" field.
	DefaultKeyPairID int64
	// DefaultMissionBatchNumber holds the default value on creation for the "mission_batch_number" field.
	DefaultMissionBatchNumber string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
)

const DefaultType enums.MissionType = "txt2img"

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type enums.MissionType) error {
	switch _type {
	case "sd_time", "txt2img", "img2img", "jp_time", "wt_time", "extra-single-image":
		return nil
	default:
		return fmt.Errorf("mission: invalid enum value for type field: %q", _type)
	}
}

const DefaultStatus enums.MissionStatus = "waiting"

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s enums.MissionStatus) error {
	switch s {
	case "waiting", "canceled", "doing", "supplying", "closing", "done":
		return nil
	default:
		return fmt.Errorf("mission: invalid enum value for status field: %q", s)
	}
}

const DefaultResult enums.MissionResult = "pending"

// ResultValidator is a validator for the "result" field enum values. It is called by the builders before save.
func ResultValidator(r enums.MissionResult) error {
	switch r {
	case "pending", "succeed", "failed":
		return nil
	default:
		return fmt.Errorf("mission: invalid enum value for result field: %q", r)
	}
}

// OrderOption defines the ordering options for the Mission queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByBody orders the results by the body field.
func ByBody(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBody, opts...).ToFunc()
}

// ByCallBackURL orders the results by the call_back_url field.
func ByCallBackURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCallBackURL, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByResult orders the results by the result field.
func ByResult(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResult, opts...).ToFunc()
}

// ByKeyPairID orders the results by the key_pair_id field.
func ByKeyPairID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKeyPairID, opts...).ToFunc()
}

// ByMissionBatchNumber orders the results by the mission_batch_number field.
func ByMissionBatchNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMissionBatchNumber, opts...).ToFunc()
}

// ByMissionKeyPairsCount orders the results by mission_key_pairs count.
func ByMissionKeyPairsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMissionKeyPairsStep(), opts...)
	}
}

// ByMissionKeyPairs orders the results by mission_key_pairs terms.
func ByMissionKeyPairs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMissionKeyPairsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByKeyPairField orders the results by key_pair field.
func ByKeyPairField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newKeyPairStep(), sql.OrderByField(field, opts...))
	}
}
func newMissionKeyPairsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MissionKeyPairsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MissionKeyPairsTable, MissionKeyPairsColumn),
	)
}
func newKeyPairStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(KeyPairInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, KeyPairTable, KeyPairColumn),
	)
}
