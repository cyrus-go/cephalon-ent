// Code generated by ent, DO NOT EDIT.

package mission

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldID, id))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldDeletedAt, v))
}

// MissionKindID applies equality check predicate on the "mission_kind_id" field. It's identical to MissionKindIDEQ.
func MissionKindID(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldMissionKindID, v))
}

// Body applies equality check predicate on the "body" field. It's identical to BodyEQ.
func Body(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldBody, v))
}

// CallBackURL applies equality check predicate on the "call_back_url" field. It's identical to CallBackURLEQ.
func CallBackURL(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldCallBackURL, v))
}

// CallBackInfo applies equality check predicate on the "call_back_info" field. It's identical to CallBackInfoEQ.
func CallBackInfo(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldCallBackInfo, v))
}

// CallBackData applies equality check predicate on the "call_back_data" field. It's identical to CallBackDataEQ.
func CallBackData(v []byte) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldCallBackData, v))
}

// Urls applies equality check predicate on the "urls" field. It's identical to UrlsEQ.
func Urls(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldUrls, v))
}

// KeyPairID applies equality check predicate on the "key_pair_id" field. It's identical to KeyPairIDEQ.
func KeyPairID(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldKeyPairID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldUserID, v))
}

// MissionBatchID applies equality check predicate on the "mission_batch_id" field. It's identical to MissionBatchIDEQ.
func MissionBatchID(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldMissionBatchID, v))
}

// MissionBatchNumber applies equality check predicate on the "mission_batch_number" field. It's identical to MissionBatchNumberEQ.
func MissionBatchNumber(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldMissionBatchNumber, v))
}

// UnitCep applies equality check predicate on the "unit_cep" field. It's identical to UnitCepEQ.
func UnitCep(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldUnitCep, v))
}

// RespStatusCode applies equality check predicate on the "resp_status_code" field. It's identical to RespStatusCodeEQ.
func RespStatusCode(v int32) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldRespStatusCode, v))
}

// RespBody applies equality check predicate on the "resp_body" field. It's identical to RespBodyEQ.
func RespBody(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldRespBody, v))
}

// InnerURI applies equality check predicate on the "inner_uri" field. It's identical to InnerURIEQ.
func InnerURI(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldInnerURI, v))
}

// TempHmacKey applies equality check predicate on the "temp_hmac_key" field. It's identical to TempHmacKeyEQ.
func TempHmacKey(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldTempHmacKey, v))
}

// TempHmacSecret applies equality check predicate on the "temp_hmac_secret" field. It's identical to TempHmacSecretEQ.
func TempHmacSecret(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldTempHmacSecret, v))
}

// SecondHmacKey applies equality check predicate on the "second_hmac_key" field. It's identical to SecondHmacKeyEQ.
func SecondHmacKey(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldSecondHmacKey, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldUsername, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldPassword, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldStartedAt, v))
}

// FinishedAt applies equality check predicate on the "finished_at" field. It's identical to FinishedAtEQ.
func FinishedAt(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldFinishedAt, v))
}

// ExpiredAt applies equality check predicate on the "expired_at" field. It's identical to ExpiredAtEQ.
func ExpiredAt(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldExpiredAt, v))
}

// FreeAt applies equality check predicate on the "free_at" field. It's identical to FreeAtEQ.
func FreeAt(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldFreeAt, v))
}

// ClosedAt applies equality check predicate on the "closed_at" field. It's identical to ClosedAtEQ.
func ClosedAt(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldClosedAt, v))
}

// WarningTimes applies equality check predicate on the "warning_times" field. It's identical to WarningTimesEQ.
func WarningTimes(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldWarningTimes, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int64) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int64) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int64) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int64) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldDeletedAt, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v enums.MissionType) predicate.Mission {
	vc := v
	return predicate.Mission(sql.FieldEQ(FieldType, vc))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v enums.MissionType) predicate.Mission {
	vc := v
	return predicate.Mission(sql.FieldNEQ(FieldType, vc))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...enums.MissionType) predicate.Mission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mission(sql.FieldIn(FieldType, v...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...enums.MissionType) predicate.Mission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mission(sql.FieldNotIn(FieldType, v...))
}

// MissionKindIDEQ applies the EQ predicate on the "mission_kind_id" field.
func MissionKindIDEQ(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldMissionKindID, v))
}

// MissionKindIDNEQ applies the NEQ predicate on the "mission_kind_id" field.
func MissionKindIDNEQ(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldMissionKindID, v))
}

// MissionKindIDIn applies the In predicate on the "mission_kind_id" field.
func MissionKindIDIn(vs ...int64) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldMissionKindID, vs...))
}

// MissionKindIDNotIn applies the NotIn predicate on the "mission_kind_id" field.
func MissionKindIDNotIn(vs ...int64) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldMissionKindID, vs...))
}

// BodyEQ applies the EQ predicate on the "body" field.
func BodyEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldBody, v))
}

// BodyNEQ applies the NEQ predicate on the "body" field.
func BodyNEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldBody, v))
}

// BodyIn applies the In predicate on the "body" field.
func BodyIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldBody, vs...))
}

// BodyNotIn applies the NotIn predicate on the "body" field.
func BodyNotIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldBody, vs...))
}

// BodyGT applies the GT predicate on the "body" field.
func BodyGT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldBody, v))
}

// BodyGTE applies the GTE predicate on the "body" field.
func BodyGTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldBody, v))
}

// BodyLT applies the LT predicate on the "body" field.
func BodyLT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldBody, v))
}

// BodyLTE applies the LTE predicate on the "body" field.
func BodyLTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldBody, v))
}

// BodyContains applies the Contains predicate on the "body" field.
func BodyContains(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContains(FieldBody, v))
}

// BodyHasPrefix applies the HasPrefix predicate on the "body" field.
func BodyHasPrefix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasPrefix(FieldBody, v))
}

// BodyHasSuffix applies the HasSuffix predicate on the "body" field.
func BodyHasSuffix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasSuffix(FieldBody, v))
}

// BodyEqualFold applies the EqualFold predicate on the "body" field.
func BodyEqualFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEqualFold(FieldBody, v))
}

// BodyContainsFold applies the ContainsFold predicate on the "body" field.
func BodyContainsFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContainsFold(FieldBody, v))
}

// CallBackURLEQ applies the EQ predicate on the "call_back_url" field.
func CallBackURLEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldCallBackURL, v))
}

// CallBackURLNEQ applies the NEQ predicate on the "call_back_url" field.
func CallBackURLNEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldCallBackURL, v))
}

// CallBackURLIn applies the In predicate on the "call_back_url" field.
func CallBackURLIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldCallBackURL, vs...))
}

// CallBackURLNotIn applies the NotIn predicate on the "call_back_url" field.
func CallBackURLNotIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldCallBackURL, vs...))
}

// CallBackURLGT applies the GT predicate on the "call_back_url" field.
func CallBackURLGT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldCallBackURL, v))
}

// CallBackURLGTE applies the GTE predicate on the "call_back_url" field.
func CallBackURLGTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldCallBackURL, v))
}

// CallBackURLLT applies the LT predicate on the "call_back_url" field.
func CallBackURLLT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldCallBackURL, v))
}

// CallBackURLLTE applies the LTE predicate on the "call_back_url" field.
func CallBackURLLTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldCallBackURL, v))
}

// CallBackURLContains applies the Contains predicate on the "call_back_url" field.
func CallBackURLContains(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContains(FieldCallBackURL, v))
}

// CallBackURLHasPrefix applies the HasPrefix predicate on the "call_back_url" field.
func CallBackURLHasPrefix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasPrefix(FieldCallBackURL, v))
}

// CallBackURLHasSuffix applies the HasSuffix predicate on the "call_back_url" field.
func CallBackURLHasSuffix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasSuffix(FieldCallBackURL, v))
}

// CallBackURLEqualFold applies the EqualFold predicate on the "call_back_url" field.
func CallBackURLEqualFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEqualFold(FieldCallBackURL, v))
}

// CallBackURLContainsFold applies the ContainsFold predicate on the "call_back_url" field.
func CallBackURLContainsFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContainsFold(FieldCallBackURL, v))
}

// CallBackInfoEQ applies the EQ predicate on the "call_back_info" field.
func CallBackInfoEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldCallBackInfo, v))
}

// CallBackInfoNEQ applies the NEQ predicate on the "call_back_info" field.
func CallBackInfoNEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldCallBackInfo, v))
}

// CallBackInfoIn applies the In predicate on the "call_back_info" field.
func CallBackInfoIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldCallBackInfo, vs...))
}

// CallBackInfoNotIn applies the NotIn predicate on the "call_back_info" field.
func CallBackInfoNotIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldCallBackInfo, vs...))
}

// CallBackInfoGT applies the GT predicate on the "call_back_info" field.
func CallBackInfoGT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldCallBackInfo, v))
}

// CallBackInfoGTE applies the GTE predicate on the "call_back_info" field.
func CallBackInfoGTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldCallBackInfo, v))
}

// CallBackInfoLT applies the LT predicate on the "call_back_info" field.
func CallBackInfoLT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldCallBackInfo, v))
}

// CallBackInfoLTE applies the LTE predicate on the "call_back_info" field.
func CallBackInfoLTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldCallBackInfo, v))
}

// CallBackInfoContains applies the Contains predicate on the "call_back_info" field.
func CallBackInfoContains(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContains(FieldCallBackInfo, v))
}

// CallBackInfoHasPrefix applies the HasPrefix predicate on the "call_back_info" field.
func CallBackInfoHasPrefix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasPrefix(FieldCallBackInfo, v))
}

// CallBackInfoHasSuffix applies the HasSuffix predicate on the "call_back_info" field.
func CallBackInfoHasSuffix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasSuffix(FieldCallBackInfo, v))
}

// CallBackInfoIsNil applies the IsNil predicate on the "call_back_info" field.
func CallBackInfoIsNil() predicate.Mission {
	return predicate.Mission(sql.FieldIsNull(FieldCallBackInfo))
}

// CallBackInfoNotNil applies the NotNil predicate on the "call_back_info" field.
func CallBackInfoNotNil() predicate.Mission {
	return predicate.Mission(sql.FieldNotNull(FieldCallBackInfo))
}

// CallBackInfoEqualFold applies the EqualFold predicate on the "call_back_info" field.
func CallBackInfoEqualFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEqualFold(FieldCallBackInfo, v))
}

// CallBackInfoContainsFold applies the ContainsFold predicate on the "call_back_info" field.
func CallBackInfoContainsFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContainsFold(FieldCallBackInfo, v))
}

// CallBackDataEQ applies the EQ predicate on the "call_back_data" field.
func CallBackDataEQ(v []byte) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldCallBackData, v))
}

// CallBackDataNEQ applies the NEQ predicate on the "call_back_data" field.
func CallBackDataNEQ(v []byte) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldCallBackData, v))
}

// CallBackDataIn applies the In predicate on the "call_back_data" field.
func CallBackDataIn(vs ...[]byte) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldCallBackData, vs...))
}

// CallBackDataNotIn applies the NotIn predicate on the "call_back_data" field.
func CallBackDataNotIn(vs ...[]byte) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldCallBackData, vs...))
}

// CallBackDataGT applies the GT predicate on the "call_back_data" field.
func CallBackDataGT(v []byte) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldCallBackData, v))
}

// CallBackDataGTE applies the GTE predicate on the "call_back_data" field.
func CallBackDataGTE(v []byte) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldCallBackData, v))
}

// CallBackDataLT applies the LT predicate on the "call_back_data" field.
func CallBackDataLT(v []byte) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldCallBackData, v))
}

// CallBackDataLTE applies the LTE predicate on the "call_back_data" field.
func CallBackDataLTE(v []byte) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldCallBackData, v))
}

// CallBackDataIsNil applies the IsNil predicate on the "call_back_data" field.
func CallBackDataIsNil() predicate.Mission {
	return predicate.Mission(sql.FieldIsNull(FieldCallBackData))
}

// CallBackDataNotNil applies the NotNil predicate on the "call_back_data" field.
func CallBackDataNotNil() predicate.Mission {
	return predicate.Mission(sql.FieldNotNull(FieldCallBackData))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v enums.MissionStatus) predicate.Mission {
	vc := v
	return predicate.Mission(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v enums.MissionStatus) predicate.Mission {
	vc := v
	return predicate.Mission(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...enums.MissionStatus) predicate.Mission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mission(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...enums.MissionStatus) predicate.Mission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mission(sql.FieldNotIn(FieldStatus, v...))
}

// ResultEQ applies the EQ predicate on the "result" field.
func ResultEQ(v enums.MissionResult) predicate.Mission {
	vc := v
	return predicate.Mission(sql.FieldEQ(FieldResult, vc))
}

// ResultNEQ applies the NEQ predicate on the "result" field.
func ResultNEQ(v enums.MissionResult) predicate.Mission {
	vc := v
	return predicate.Mission(sql.FieldNEQ(FieldResult, vc))
}

// ResultIn applies the In predicate on the "result" field.
func ResultIn(vs ...enums.MissionResult) predicate.Mission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mission(sql.FieldIn(FieldResult, v...))
}

// ResultNotIn applies the NotIn predicate on the "result" field.
func ResultNotIn(vs ...enums.MissionResult) predicate.Mission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mission(sql.FieldNotIn(FieldResult, v...))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v enums.MissionState) predicate.Mission {
	vc := v
	return predicate.Mission(sql.FieldEQ(FieldState, vc))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v enums.MissionState) predicate.Mission {
	vc := v
	return predicate.Mission(sql.FieldNEQ(FieldState, vc))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...enums.MissionState) predicate.Mission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mission(sql.FieldIn(FieldState, v...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...enums.MissionState) predicate.Mission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mission(sql.FieldNotIn(FieldState, v...))
}

// ResultUrlsIsNil applies the IsNil predicate on the "result_urls" field.
func ResultUrlsIsNil() predicate.Mission {
	return predicate.Mission(sql.FieldIsNull(FieldResultUrls))
}

// ResultUrlsNotNil applies the NotNil predicate on the "result_urls" field.
func ResultUrlsNotNil() predicate.Mission {
	return predicate.Mission(sql.FieldNotNull(FieldResultUrls))
}

// UrlsEQ applies the EQ predicate on the "urls" field.
func UrlsEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldUrls, v))
}

// UrlsNEQ applies the NEQ predicate on the "urls" field.
func UrlsNEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldUrls, v))
}

// UrlsIn applies the In predicate on the "urls" field.
func UrlsIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldUrls, vs...))
}

// UrlsNotIn applies the NotIn predicate on the "urls" field.
func UrlsNotIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldUrls, vs...))
}

// UrlsGT applies the GT predicate on the "urls" field.
func UrlsGT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldUrls, v))
}

// UrlsGTE applies the GTE predicate on the "urls" field.
func UrlsGTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldUrls, v))
}

// UrlsLT applies the LT predicate on the "urls" field.
func UrlsLT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldUrls, v))
}

// UrlsLTE applies the LTE predicate on the "urls" field.
func UrlsLTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldUrls, v))
}

// UrlsContains applies the Contains predicate on the "urls" field.
func UrlsContains(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContains(FieldUrls, v))
}

// UrlsHasPrefix applies the HasPrefix predicate on the "urls" field.
func UrlsHasPrefix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasPrefix(FieldUrls, v))
}

// UrlsHasSuffix applies the HasSuffix predicate on the "urls" field.
func UrlsHasSuffix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasSuffix(FieldUrls, v))
}

// UrlsEqualFold applies the EqualFold predicate on the "urls" field.
func UrlsEqualFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEqualFold(FieldUrls, v))
}

// UrlsContainsFold applies the ContainsFold predicate on the "urls" field.
func UrlsContainsFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContainsFold(FieldUrls, v))
}

// KeyPairIDEQ applies the EQ predicate on the "key_pair_id" field.
func KeyPairIDEQ(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldKeyPairID, v))
}

// KeyPairIDNEQ applies the NEQ predicate on the "key_pair_id" field.
func KeyPairIDNEQ(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldKeyPairID, v))
}

// KeyPairIDIn applies the In predicate on the "key_pair_id" field.
func KeyPairIDIn(vs ...int64) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldKeyPairID, vs...))
}

// KeyPairIDNotIn applies the NotIn predicate on the "key_pair_id" field.
func KeyPairIDNotIn(vs ...int64) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldKeyPairID, vs...))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldUserID, vs...))
}

// MissionBatchIDEQ applies the EQ predicate on the "mission_batch_id" field.
func MissionBatchIDEQ(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldMissionBatchID, v))
}

// MissionBatchIDNEQ applies the NEQ predicate on the "mission_batch_id" field.
func MissionBatchIDNEQ(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldMissionBatchID, v))
}

// MissionBatchIDIn applies the In predicate on the "mission_batch_id" field.
func MissionBatchIDIn(vs ...int64) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldMissionBatchID, vs...))
}

// MissionBatchIDNotIn applies the NotIn predicate on the "mission_batch_id" field.
func MissionBatchIDNotIn(vs ...int64) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldMissionBatchID, vs...))
}

// MissionBatchNumberEQ applies the EQ predicate on the "mission_batch_number" field.
func MissionBatchNumberEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldMissionBatchNumber, v))
}

// MissionBatchNumberNEQ applies the NEQ predicate on the "mission_batch_number" field.
func MissionBatchNumberNEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldMissionBatchNumber, v))
}

// MissionBatchNumberIn applies the In predicate on the "mission_batch_number" field.
func MissionBatchNumberIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldMissionBatchNumber, vs...))
}

// MissionBatchNumberNotIn applies the NotIn predicate on the "mission_batch_number" field.
func MissionBatchNumberNotIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldMissionBatchNumber, vs...))
}

// MissionBatchNumberGT applies the GT predicate on the "mission_batch_number" field.
func MissionBatchNumberGT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldMissionBatchNumber, v))
}

// MissionBatchNumberGTE applies the GTE predicate on the "mission_batch_number" field.
func MissionBatchNumberGTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldMissionBatchNumber, v))
}

// MissionBatchNumberLT applies the LT predicate on the "mission_batch_number" field.
func MissionBatchNumberLT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldMissionBatchNumber, v))
}

// MissionBatchNumberLTE applies the LTE predicate on the "mission_batch_number" field.
func MissionBatchNumberLTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldMissionBatchNumber, v))
}

// MissionBatchNumberContains applies the Contains predicate on the "mission_batch_number" field.
func MissionBatchNumberContains(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContains(FieldMissionBatchNumber, v))
}

// MissionBatchNumberHasPrefix applies the HasPrefix predicate on the "mission_batch_number" field.
func MissionBatchNumberHasPrefix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasPrefix(FieldMissionBatchNumber, v))
}

// MissionBatchNumberHasSuffix applies the HasSuffix predicate on the "mission_batch_number" field.
func MissionBatchNumberHasSuffix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasSuffix(FieldMissionBatchNumber, v))
}

// MissionBatchNumberEqualFold applies the EqualFold predicate on the "mission_batch_number" field.
func MissionBatchNumberEqualFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEqualFold(FieldMissionBatchNumber, v))
}

// MissionBatchNumberContainsFold applies the ContainsFold predicate on the "mission_batch_number" field.
func MissionBatchNumberContainsFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContainsFold(FieldMissionBatchNumber, v))
}

// GpuVersionEQ applies the EQ predicate on the "gpu_version" field.
func GpuVersionEQ(v enums.GpuVersion) predicate.Mission {
	vc := v
	return predicate.Mission(sql.FieldEQ(FieldGpuVersion, vc))
}

// GpuVersionNEQ applies the NEQ predicate on the "gpu_version" field.
func GpuVersionNEQ(v enums.GpuVersion) predicate.Mission {
	vc := v
	return predicate.Mission(sql.FieldNEQ(FieldGpuVersion, vc))
}

// GpuVersionIn applies the In predicate on the "gpu_version" field.
func GpuVersionIn(vs ...enums.GpuVersion) predicate.Mission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mission(sql.FieldIn(FieldGpuVersion, v...))
}

// GpuVersionNotIn applies the NotIn predicate on the "gpu_version" field.
func GpuVersionNotIn(vs ...enums.GpuVersion) predicate.Mission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mission(sql.FieldNotIn(FieldGpuVersion, v...))
}

// UnitCepEQ applies the EQ predicate on the "unit_cep" field.
func UnitCepEQ(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldUnitCep, v))
}

// UnitCepNEQ applies the NEQ predicate on the "unit_cep" field.
func UnitCepNEQ(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldUnitCep, v))
}

// UnitCepIn applies the In predicate on the "unit_cep" field.
func UnitCepIn(vs ...int64) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldUnitCep, vs...))
}

// UnitCepNotIn applies the NotIn predicate on the "unit_cep" field.
func UnitCepNotIn(vs ...int64) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldUnitCep, vs...))
}

// UnitCepGT applies the GT predicate on the "unit_cep" field.
func UnitCepGT(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldUnitCep, v))
}

// UnitCepGTE applies the GTE predicate on the "unit_cep" field.
func UnitCepGTE(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldUnitCep, v))
}

// UnitCepLT applies the LT predicate on the "unit_cep" field.
func UnitCepLT(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldUnitCep, v))
}

// UnitCepLTE applies the LTE predicate on the "unit_cep" field.
func UnitCepLTE(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldUnitCep, v))
}

// RespStatusCodeEQ applies the EQ predicate on the "resp_status_code" field.
func RespStatusCodeEQ(v int32) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldRespStatusCode, v))
}

// RespStatusCodeNEQ applies the NEQ predicate on the "resp_status_code" field.
func RespStatusCodeNEQ(v int32) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldRespStatusCode, v))
}

// RespStatusCodeIn applies the In predicate on the "resp_status_code" field.
func RespStatusCodeIn(vs ...int32) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldRespStatusCode, vs...))
}

// RespStatusCodeNotIn applies the NotIn predicate on the "resp_status_code" field.
func RespStatusCodeNotIn(vs ...int32) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldRespStatusCode, vs...))
}

// RespStatusCodeGT applies the GT predicate on the "resp_status_code" field.
func RespStatusCodeGT(v int32) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldRespStatusCode, v))
}

// RespStatusCodeGTE applies the GTE predicate on the "resp_status_code" field.
func RespStatusCodeGTE(v int32) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldRespStatusCode, v))
}

// RespStatusCodeLT applies the LT predicate on the "resp_status_code" field.
func RespStatusCodeLT(v int32) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldRespStatusCode, v))
}

// RespStatusCodeLTE applies the LTE predicate on the "resp_status_code" field.
func RespStatusCodeLTE(v int32) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldRespStatusCode, v))
}

// RespBodyEQ applies the EQ predicate on the "resp_body" field.
func RespBodyEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldRespBody, v))
}

// RespBodyNEQ applies the NEQ predicate on the "resp_body" field.
func RespBodyNEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldRespBody, v))
}

// RespBodyIn applies the In predicate on the "resp_body" field.
func RespBodyIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldRespBody, vs...))
}

// RespBodyNotIn applies the NotIn predicate on the "resp_body" field.
func RespBodyNotIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldRespBody, vs...))
}

// RespBodyGT applies the GT predicate on the "resp_body" field.
func RespBodyGT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldRespBody, v))
}

// RespBodyGTE applies the GTE predicate on the "resp_body" field.
func RespBodyGTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldRespBody, v))
}

// RespBodyLT applies the LT predicate on the "resp_body" field.
func RespBodyLT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldRespBody, v))
}

// RespBodyLTE applies the LTE predicate on the "resp_body" field.
func RespBodyLTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldRespBody, v))
}

// RespBodyContains applies the Contains predicate on the "resp_body" field.
func RespBodyContains(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContains(FieldRespBody, v))
}

// RespBodyHasPrefix applies the HasPrefix predicate on the "resp_body" field.
func RespBodyHasPrefix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasPrefix(FieldRespBody, v))
}

// RespBodyHasSuffix applies the HasSuffix predicate on the "resp_body" field.
func RespBodyHasSuffix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasSuffix(FieldRespBody, v))
}

// RespBodyEqualFold applies the EqualFold predicate on the "resp_body" field.
func RespBodyEqualFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEqualFold(FieldRespBody, v))
}

// RespBodyContainsFold applies the ContainsFold predicate on the "resp_body" field.
func RespBodyContainsFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContainsFold(FieldRespBody, v))
}

// InnerURIEQ applies the EQ predicate on the "inner_uri" field.
func InnerURIEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldInnerURI, v))
}

// InnerURINEQ applies the NEQ predicate on the "inner_uri" field.
func InnerURINEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldInnerURI, v))
}

// InnerURIIn applies the In predicate on the "inner_uri" field.
func InnerURIIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldInnerURI, vs...))
}

// InnerURINotIn applies the NotIn predicate on the "inner_uri" field.
func InnerURINotIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldInnerURI, vs...))
}

// InnerURIGT applies the GT predicate on the "inner_uri" field.
func InnerURIGT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldInnerURI, v))
}

// InnerURIGTE applies the GTE predicate on the "inner_uri" field.
func InnerURIGTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldInnerURI, v))
}

// InnerURILT applies the LT predicate on the "inner_uri" field.
func InnerURILT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldInnerURI, v))
}

// InnerURILTE applies the LTE predicate on the "inner_uri" field.
func InnerURILTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldInnerURI, v))
}

// InnerURIContains applies the Contains predicate on the "inner_uri" field.
func InnerURIContains(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContains(FieldInnerURI, v))
}

// InnerURIHasPrefix applies the HasPrefix predicate on the "inner_uri" field.
func InnerURIHasPrefix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasPrefix(FieldInnerURI, v))
}

// InnerURIHasSuffix applies the HasSuffix predicate on the "inner_uri" field.
func InnerURIHasSuffix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasSuffix(FieldInnerURI, v))
}

// InnerURIEqualFold applies the EqualFold predicate on the "inner_uri" field.
func InnerURIEqualFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEqualFold(FieldInnerURI, v))
}

// InnerURIContainsFold applies the ContainsFold predicate on the "inner_uri" field.
func InnerURIContainsFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContainsFold(FieldInnerURI, v))
}

// InnerMethodEQ applies the EQ predicate on the "inner_method" field.
func InnerMethodEQ(v enums.InnerMethod) predicate.Mission {
	vc := v
	return predicate.Mission(sql.FieldEQ(FieldInnerMethod, vc))
}

// InnerMethodNEQ applies the NEQ predicate on the "inner_method" field.
func InnerMethodNEQ(v enums.InnerMethod) predicate.Mission {
	vc := v
	return predicate.Mission(sql.FieldNEQ(FieldInnerMethod, vc))
}

// InnerMethodIn applies the In predicate on the "inner_method" field.
func InnerMethodIn(vs ...enums.InnerMethod) predicate.Mission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mission(sql.FieldIn(FieldInnerMethod, v...))
}

// InnerMethodNotIn applies the NotIn predicate on the "inner_method" field.
func InnerMethodNotIn(vs ...enums.InnerMethod) predicate.Mission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mission(sql.FieldNotIn(FieldInnerMethod, v...))
}

// TempHmacKeyEQ applies the EQ predicate on the "temp_hmac_key" field.
func TempHmacKeyEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldTempHmacKey, v))
}

// TempHmacKeyNEQ applies the NEQ predicate on the "temp_hmac_key" field.
func TempHmacKeyNEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldTempHmacKey, v))
}

// TempHmacKeyIn applies the In predicate on the "temp_hmac_key" field.
func TempHmacKeyIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldTempHmacKey, vs...))
}

// TempHmacKeyNotIn applies the NotIn predicate on the "temp_hmac_key" field.
func TempHmacKeyNotIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldTempHmacKey, vs...))
}

// TempHmacKeyGT applies the GT predicate on the "temp_hmac_key" field.
func TempHmacKeyGT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldTempHmacKey, v))
}

// TempHmacKeyGTE applies the GTE predicate on the "temp_hmac_key" field.
func TempHmacKeyGTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldTempHmacKey, v))
}

// TempHmacKeyLT applies the LT predicate on the "temp_hmac_key" field.
func TempHmacKeyLT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldTempHmacKey, v))
}

// TempHmacKeyLTE applies the LTE predicate on the "temp_hmac_key" field.
func TempHmacKeyLTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldTempHmacKey, v))
}

// TempHmacKeyContains applies the Contains predicate on the "temp_hmac_key" field.
func TempHmacKeyContains(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContains(FieldTempHmacKey, v))
}

// TempHmacKeyHasPrefix applies the HasPrefix predicate on the "temp_hmac_key" field.
func TempHmacKeyHasPrefix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasPrefix(FieldTempHmacKey, v))
}

// TempHmacKeyHasSuffix applies the HasSuffix predicate on the "temp_hmac_key" field.
func TempHmacKeyHasSuffix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasSuffix(FieldTempHmacKey, v))
}

// TempHmacKeyEqualFold applies the EqualFold predicate on the "temp_hmac_key" field.
func TempHmacKeyEqualFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEqualFold(FieldTempHmacKey, v))
}

// TempHmacKeyContainsFold applies the ContainsFold predicate on the "temp_hmac_key" field.
func TempHmacKeyContainsFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContainsFold(FieldTempHmacKey, v))
}

// TempHmacSecretEQ applies the EQ predicate on the "temp_hmac_secret" field.
func TempHmacSecretEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldTempHmacSecret, v))
}

// TempHmacSecretNEQ applies the NEQ predicate on the "temp_hmac_secret" field.
func TempHmacSecretNEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldTempHmacSecret, v))
}

// TempHmacSecretIn applies the In predicate on the "temp_hmac_secret" field.
func TempHmacSecretIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldTempHmacSecret, vs...))
}

// TempHmacSecretNotIn applies the NotIn predicate on the "temp_hmac_secret" field.
func TempHmacSecretNotIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldTempHmacSecret, vs...))
}

// TempHmacSecretGT applies the GT predicate on the "temp_hmac_secret" field.
func TempHmacSecretGT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldTempHmacSecret, v))
}

// TempHmacSecretGTE applies the GTE predicate on the "temp_hmac_secret" field.
func TempHmacSecretGTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldTempHmacSecret, v))
}

// TempHmacSecretLT applies the LT predicate on the "temp_hmac_secret" field.
func TempHmacSecretLT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldTempHmacSecret, v))
}

// TempHmacSecretLTE applies the LTE predicate on the "temp_hmac_secret" field.
func TempHmacSecretLTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldTempHmacSecret, v))
}

// TempHmacSecretContains applies the Contains predicate on the "temp_hmac_secret" field.
func TempHmacSecretContains(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContains(FieldTempHmacSecret, v))
}

// TempHmacSecretHasPrefix applies the HasPrefix predicate on the "temp_hmac_secret" field.
func TempHmacSecretHasPrefix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasPrefix(FieldTempHmacSecret, v))
}

// TempHmacSecretHasSuffix applies the HasSuffix predicate on the "temp_hmac_secret" field.
func TempHmacSecretHasSuffix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasSuffix(FieldTempHmacSecret, v))
}

// TempHmacSecretEqualFold applies the EqualFold predicate on the "temp_hmac_secret" field.
func TempHmacSecretEqualFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEqualFold(FieldTempHmacSecret, v))
}

// TempHmacSecretContainsFold applies the ContainsFold predicate on the "temp_hmac_secret" field.
func TempHmacSecretContainsFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContainsFold(FieldTempHmacSecret, v))
}

// SecondHmacKeyEQ applies the EQ predicate on the "second_hmac_key" field.
func SecondHmacKeyEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldSecondHmacKey, v))
}

// SecondHmacKeyNEQ applies the NEQ predicate on the "second_hmac_key" field.
func SecondHmacKeyNEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldSecondHmacKey, v))
}

// SecondHmacKeyIn applies the In predicate on the "second_hmac_key" field.
func SecondHmacKeyIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldSecondHmacKey, vs...))
}

// SecondHmacKeyNotIn applies the NotIn predicate on the "second_hmac_key" field.
func SecondHmacKeyNotIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldSecondHmacKey, vs...))
}

// SecondHmacKeyGT applies the GT predicate on the "second_hmac_key" field.
func SecondHmacKeyGT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldSecondHmacKey, v))
}

// SecondHmacKeyGTE applies the GTE predicate on the "second_hmac_key" field.
func SecondHmacKeyGTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldSecondHmacKey, v))
}

// SecondHmacKeyLT applies the LT predicate on the "second_hmac_key" field.
func SecondHmacKeyLT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldSecondHmacKey, v))
}

// SecondHmacKeyLTE applies the LTE predicate on the "second_hmac_key" field.
func SecondHmacKeyLTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldSecondHmacKey, v))
}

// SecondHmacKeyContains applies the Contains predicate on the "second_hmac_key" field.
func SecondHmacKeyContains(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContains(FieldSecondHmacKey, v))
}

// SecondHmacKeyHasPrefix applies the HasPrefix predicate on the "second_hmac_key" field.
func SecondHmacKeyHasPrefix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasPrefix(FieldSecondHmacKey, v))
}

// SecondHmacKeyHasSuffix applies the HasSuffix predicate on the "second_hmac_key" field.
func SecondHmacKeyHasSuffix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasSuffix(FieldSecondHmacKey, v))
}

// SecondHmacKeyEqualFold applies the EqualFold predicate on the "second_hmac_key" field.
func SecondHmacKeyEqualFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEqualFold(FieldSecondHmacKey, v))
}

// SecondHmacKeyContainsFold applies the ContainsFold predicate on the "second_hmac_key" field.
func SecondHmacKeyContainsFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContainsFold(FieldSecondHmacKey, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContainsFold(FieldUsername, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContainsFold(FieldPassword, v))
}

// WhiteDeviceIdsIsNil applies the IsNil predicate on the "white_device_ids" field.
func WhiteDeviceIdsIsNil() predicate.Mission {
	return predicate.Mission(sql.FieldIsNull(FieldWhiteDeviceIds))
}

// WhiteDeviceIdsNotNil applies the NotNil predicate on the "white_device_ids" field.
func WhiteDeviceIdsNotNil() predicate.Mission {
	return predicate.Mission(sql.FieldNotNull(FieldWhiteDeviceIds))
}

// BlackDeviceIdsIsNil applies the IsNil predicate on the "black_device_ids" field.
func BlackDeviceIdsIsNil() predicate.Mission {
	return predicate.Mission(sql.FieldIsNull(FieldBlackDeviceIds))
}

// BlackDeviceIdsNotNil applies the NotNil predicate on the "black_device_ids" field.
func BlackDeviceIdsNotNil() predicate.Mission {
	return predicate.Mission(sql.FieldNotNull(FieldBlackDeviceIds))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldStartedAt, v))
}

// StartedAtIsNil applies the IsNil predicate on the "started_at" field.
func StartedAtIsNil() predicate.Mission {
	return predicate.Mission(sql.FieldIsNull(FieldStartedAt))
}

// StartedAtNotNil applies the NotNil predicate on the "started_at" field.
func StartedAtNotNil() predicate.Mission {
	return predicate.Mission(sql.FieldNotNull(FieldStartedAt))
}

// FinishedAtEQ applies the EQ predicate on the "finished_at" field.
func FinishedAtEQ(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldFinishedAt, v))
}

// FinishedAtNEQ applies the NEQ predicate on the "finished_at" field.
func FinishedAtNEQ(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldFinishedAt, v))
}

// FinishedAtIn applies the In predicate on the "finished_at" field.
func FinishedAtIn(vs ...time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldFinishedAt, vs...))
}

// FinishedAtNotIn applies the NotIn predicate on the "finished_at" field.
func FinishedAtNotIn(vs ...time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldFinishedAt, vs...))
}

// FinishedAtGT applies the GT predicate on the "finished_at" field.
func FinishedAtGT(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldFinishedAt, v))
}

// FinishedAtGTE applies the GTE predicate on the "finished_at" field.
func FinishedAtGTE(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldFinishedAt, v))
}

// FinishedAtLT applies the LT predicate on the "finished_at" field.
func FinishedAtLT(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldFinishedAt, v))
}

// FinishedAtLTE applies the LTE predicate on the "finished_at" field.
func FinishedAtLTE(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldFinishedAt, v))
}

// FinishedAtIsNil applies the IsNil predicate on the "finished_at" field.
func FinishedAtIsNil() predicate.Mission {
	return predicate.Mission(sql.FieldIsNull(FieldFinishedAt))
}

// FinishedAtNotNil applies the NotNil predicate on the "finished_at" field.
func FinishedAtNotNil() predicate.Mission {
	return predicate.Mission(sql.FieldNotNull(FieldFinishedAt))
}

// ExpiredAtEQ applies the EQ predicate on the "expired_at" field.
func ExpiredAtEQ(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldExpiredAt, v))
}

// ExpiredAtNEQ applies the NEQ predicate on the "expired_at" field.
func ExpiredAtNEQ(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldExpiredAt, v))
}

// ExpiredAtIn applies the In predicate on the "expired_at" field.
func ExpiredAtIn(vs ...time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldExpiredAt, vs...))
}

// ExpiredAtNotIn applies the NotIn predicate on the "expired_at" field.
func ExpiredAtNotIn(vs ...time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldExpiredAt, vs...))
}

// ExpiredAtGT applies the GT predicate on the "expired_at" field.
func ExpiredAtGT(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldExpiredAt, v))
}

// ExpiredAtGTE applies the GTE predicate on the "expired_at" field.
func ExpiredAtGTE(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldExpiredAt, v))
}

// ExpiredAtLT applies the LT predicate on the "expired_at" field.
func ExpiredAtLT(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldExpiredAt, v))
}

// ExpiredAtLTE applies the LTE predicate on the "expired_at" field.
func ExpiredAtLTE(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldExpiredAt, v))
}

// ExpiredAtIsNil applies the IsNil predicate on the "expired_at" field.
func ExpiredAtIsNil() predicate.Mission {
	return predicate.Mission(sql.FieldIsNull(FieldExpiredAt))
}

// ExpiredAtNotNil applies the NotNil predicate on the "expired_at" field.
func ExpiredAtNotNil() predicate.Mission {
	return predicate.Mission(sql.FieldNotNull(FieldExpiredAt))
}

// FreeAtEQ applies the EQ predicate on the "free_at" field.
func FreeAtEQ(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldFreeAt, v))
}

// FreeAtNEQ applies the NEQ predicate on the "free_at" field.
func FreeAtNEQ(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldFreeAt, v))
}

// FreeAtIn applies the In predicate on the "free_at" field.
func FreeAtIn(vs ...time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldFreeAt, vs...))
}

// FreeAtNotIn applies the NotIn predicate on the "free_at" field.
func FreeAtNotIn(vs ...time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldFreeAt, vs...))
}

// FreeAtGT applies the GT predicate on the "free_at" field.
func FreeAtGT(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldFreeAt, v))
}

// FreeAtGTE applies the GTE predicate on the "free_at" field.
func FreeAtGTE(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldFreeAt, v))
}

// FreeAtLT applies the LT predicate on the "free_at" field.
func FreeAtLT(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldFreeAt, v))
}

// FreeAtLTE applies the LTE predicate on the "free_at" field.
func FreeAtLTE(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldFreeAt, v))
}

// CloseWayEQ applies the EQ predicate on the "close_way" field.
func CloseWayEQ(v enums.CloseWay) predicate.Mission {
	vc := v
	return predicate.Mission(sql.FieldEQ(FieldCloseWay, vc))
}

// CloseWayNEQ applies the NEQ predicate on the "close_way" field.
func CloseWayNEQ(v enums.CloseWay) predicate.Mission {
	vc := v
	return predicate.Mission(sql.FieldNEQ(FieldCloseWay, vc))
}

// CloseWayIn applies the In predicate on the "close_way" field.
func CloseWayIn(vs ...enums.CloseWay) predicate.Mission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mission(sql.FieldIn(FieldCloseWay, v...))
}

// CloseWayNotIn applies the NotIn predicate on the "close_way" field.
func CloseWayNotIn(vs ...enums.CloseWay) predicate.Mission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mission(sql.FieldNotIn(FieldCloseWay, v...))
}

// ClosedAtEQ applies the EQ predicate on the "closed_at" field.
func ClosedAtEQ(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldClosedAt, v))
}

// ClosedAtNEQ applies the NEQ predicate on the "closed_at" field.
func ClosedAtNEQ(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldClosedAt, v))
}

// ClosedAtIn applies the In predicate on the "closed_at" field.
func ClosedAtIn(vs ...time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldClosedAt, vs...))
}

// ClosedAtNotIn applies the NotIn predicate on the "closed_at" field.
func ClosedAtNotIn(vs ...time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldClosedAt, vs...))
}

// ClosedAtGT applies the GT predicate on the "closed_at" field.
func ClosedAtGT(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldClosedAt, v))
}

// ClosedAtGTE applies the GTE predicate on the "closed_at" field.
func ClosedAtGTE(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldClosedAt, v))
}

// ClosedAtLT applies the LT predicate on the "closed_at" field.
func ClosedAtLT(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldClosedAt, v))
}

// ClosedAtLTE applies the LTE predicate on the "closed_at" field.
func ClosedAtLTE(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldClosedAt, v))
}

// ClosedAtIsNil applies the IsNil predicate on the "closed_at" field.
func ClosedAtIsNil() predicate.Mission {
	return predicate.Mission(sql.FieldIsNull(FieldClosedAt))
}

// ClosedAtNotNil applies the NotNil predicate on the "closed_at" field.
func ClosedAtNotNil() predicate.Mission {
	return predicate.Mission(sql.FieldNotNull(FieldClosedAt))
}

// WarningTimesEQ applies the EQ predicate on the "warning_times" field.
func WarningTimesEQ(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldWarningTimes, v))
}

// WarningTimesNEQ applies the NEQ predicate on the "warning_times" field.
func WarningTimesNEQ(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldWarningTimes, v))
}

// WarningTimesIn applies the In predicate on the "warning_times" field.
func WarningTimesIn(vs ...int64) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldWarningTimes, vs...))
}

// WarningTimesNotIn applies the NotIn predicate on the "warning_times" field.
func WarningTimesNotIn(vs ...int64) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldWarningTimes, vs...))
}

// WarningTimesGT applies the GT predicate on the "warning_times" field.
func WarningTimesGT(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldWarningTimes, v))
}

// WarningTimesGTE applies the GTE predicate on the "warning_times" field.
func WarningTimesGTE(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldWarningTimes, v))
}

// WarningTimesLT applies the LT predicate on the "warning_times" field.
func WarningTimesLT(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldWarningTimes, v))
}

// WarningTimesLTE applies the LTE predicate on the "warning_times" field.
func WarningTimesLTE(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldWarningTimes, v))
}

// HasMissionKind applies the HasEdge predicate on the "mission_kind" edge.
func HasMissionKind() predicate.Mission {
	return predicate.Mission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MissionKindTable, MissionKindColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMissionKindWith applies the HasEdge predicate on the "mission_kind" edge with a given conditions (other predicates).
func HasMissionKindWith(preds ...predicate.MissionKind) predicate.Mission {
	return predicate.Mission(func(s *sql.Selector) {
		step := newMissionKindStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Mission {
	return predicate.Mission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Mission {
	return predicate.Mission(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMissionKeyPairs applies the HasEdge predicate on the "mission_key_pairs" edge.
func HasMissionKeyPairs() predicate.Mission {
	return predicate.Mission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MissionKeyPairsTable, MissionKeyPairsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMissionKeyPairsWith applies the HasEdge predicate on the "mission_key_pairs" edge with a given conditions (other predicates).
func HasMissionKeyPairsWith(preds ...predicate.MissionKeyPair) predicate.Mission {
	return predicate.Mission(func(s *sql.Selector) {
		step := newMissionKeyPairsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasKeyPair applies the HasEdge predicate on the "key_pair" edge.
func HasKeyPair() predicate.Mission {
	return predicate.Mission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, KeyPairTable, KeyPairColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasKeyPairWith applies the HasEdge predicate on the "key_pair" edge with a given conditions (other predicates).
func HasKeyPairWith(preds ...predicate.HmacKeyPair) predicate.Mission {
	return predicate.Mission(func(s *sql.Selector) {
		step := newKeyPairStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMissionConsumeOrder applies the HasEdge predicate on the "mission_consume_order" edge.
func HasMissionConsumeOrder() predicate.Mission {
	return predicate.Mission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, MissionConsumeOrderTable, MissionConsumeOrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMissionConsumeOrderWith applies the HasEdge predicate on the "mission_consume_order" edge with a given conditions (other predicates).
func HasMissionConsumeOrderWith(preds ...predicate.MissionConsumeOrder) predicate.Mission {
	return predicate.Mission(func(s *sql.Selector) {
		step := newMissionConsumeOrderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMissionProduceOrders applies the HasEdge predicate on the "mission_produce_orders" edge.
func HasMissionProduceOrders() predicate.Mission {
	return predicate.Mission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MissionProduceOrdersTable, MissionProduceOrdersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMissionProduceOrdersWith applies the HasEdge predicate on the "mission_produce_orders" edge with a given conditions (other predicates).
func HasMissionProduceOrdersWith(preds ...predicate.MissionProduceOrder) predicate.Mission {
	return predicate.Mission(func(s *sql.Selector) {
		step := newMissionProduceOrdersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMissionBatch applies the HasEdge predicate on the "mission_batch" edge.
func HasMissionBatch() predicate.Mission {
	return predicate.Mission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MissionBatchTable, MissionBatchColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMissionBatchWith applies the HasEdge predicate on the "mission_batch" edge with a given conditions (other predicates).
func HasMissionBatchWith(preds ...predicate.MissionBatch) predicate.Mission {
	return predicate.Mission(func(s *sql.Selector) {
		step := newMissionBatchStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMissionProductions applies the HasEdge predicate on the "mission_productions" edge.
func HasMissionProductions() predicate.Mission {
	return predicate.Mission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MissionProductionsTable, MissionProductionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMissionProductionsWith applies the HasEdge predicate on the "mission_productions" edge with a given conditions (other predicates).
func HasMissionProductionsWith(preds ...predicate.MissionProduction) predicate.Mission {
	return predicate.Mission(func(s *sql.Selector) {
		step := newMissionProductionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMissionOrders applies the HasEdge predicate on the "mission_orders" edge.
func HasMissionOrders() predicate.Mission {
	return predicate.Mission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MissionOrdersTable, MissionOrdersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMissionOrdersWith applies the HasEdge predicate on the "mission_orders" edge with a given conditions (other predicates).
func HasMissionOrdersWith(preds ...predicate.MissionOrder) predicate.Mission {
	return predicate.Mission(func(s *sql.Selector) {
		step := newMissionOrdersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRenewalAgreements applies the HasEdge predicate on the "renewal_agreements" edge.
func HasRenewalAgreements() predicate.Mission {
	return predicate.Mission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RenewalAgreementsTable, RenewalAgreementsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRenewalAgreementsWith applies the HasEdge predicate on the "renewal_agreements" edge with a given conditions (other predicates).
func HasRenewalAgreementsWith(preds ...predicate.RenewalAgreement) predicate.Mission {
	return predicate.Mission(func(s *sql.Selector) {
		step := newRenewalAgreementsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMissionExtraServices applies the HasEdge predicate on the "mission_extra_services" edge.
func HasMissionExtraServices() predicate.Mission {
	return predicate.Mission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MissionExtraServicesTable, MissionExtraServicesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMissionExtraServicesWith applies the HasEdge predicate on the "mission_extra_services" edge with a given conditions (other predicates).
func HasMissionExtraServicesWith(preds ...predicate.MissionExtraService) predicate.Mission {
	return predicate.Mission(func(s *sql.Selector) {
		step := newMissionExtraServicesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExtraServices applies the HasEdge predicate on the "extra_services" edge.
func HasExtraServices() predicate.Mission {
	return predicate.Mission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExtraServicesTable, ExtraServicesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExtraServicesWith applies the HasEdge predicate on the "extra_services" edge with a given conditions (other predicates).
func HasExtraServicesWith(preds ...predicate.ExtraService) predicate.Mission {
	return predicate.Mission(func(s *sql.Selector) {
		step := newExtraServicesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExtraServiceOrders applies the HasEdge predicate on the "extra_service_orders" edge.
func HasExtraServiceOrders() predicate.Mission {
	return predicate.Mission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExtraServiceOrdersTable, ExtraServiceOrdersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExtraServiceOrdersWith applies the HasEdge predicate on the "extra_service_orders" edge with a given conditions (other predicates).
func HasExtraServiceOrdersWith(preds ...predicate.ExtraServiceOrder) predicate.Mission {
	return predicate.Mission(func(s *sql.Selector) {
		step := newExtraServiceOrdersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Mission) predicate.Mission {
	return predicate.Mission(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Mission) predicate.Mission {
	return predicate.Mission(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Mission) predicate.Mission {
	return predicate.Mission(sql.NotPredicates(p))
}
