// Code generated by ent, DO NOT EDIT.

package mission

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldID, id))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldDeletedAt, v))
}

// Body applies equality check predicate on the "body" field. It's identical to BodyEQ.
func Body(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldBody, v))
}

// CallBackURL applies equality check predicate on the "call_back_url" field. It's identical to CallBackURLEQ.
func CallBackURL(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldCallBackURL, v))
}

// KeyPairID applies equality check predicate on the "key_pair_id" field. It's identical to KeyPairIDEQ.
func KeyPairID(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldKeyPairID, v))
}

// MissionBatchNumber applies equality check predicate on the "mission_batch_number" field. It's identical to MissionBatchNumberEQ.
func MissionBatchNumber(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldMissionBatchNumber, v))
}

// UnitCep applies equality check predicate on the "unit_cep" field. It's identical to UnitCepEQ.
func UnitCep(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldUnitCep, v))
}

// RespStatusCode applies equality check predicate on the "resp_status_code" field. It's identical to RespStatusCodeEQ.
func RespStatusCode(v int32) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldRespStatusCode, v))
}

// RespBody applies equality check predicate on the "resp_body" field. It's identical to RespBodyEQ.
func RespBody(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldRespBody, v))
}

// InnerAPI applies equality check predicate on the "inner_api" field. It's identical to InnerAPIEQ.
func InnerAPI(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldInnerAPI, v))
}

// TempHmacKey applies equality check predicate on the "temp_hmac_key" field. It's identical to TempHmacKeyEQ.
func TempHmacKey(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldTempHmacKey, v))
}

// TempHmacSecret applies equality check predicate on the "temp_hmac_secret" field. It's identical to TempHmacSecretEQ.
func TempHmacSecret(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldTempHmacSecret, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int64) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int64) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int64) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int64) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldDeletedAt, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v enums.MissionType) predicate.Mission {
	vc := v
	return predicate.Mission(sql.FieldEQ(FieldType, vc))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v enums.MissionType) predicate.Mission {
	vc := v
	return predicate.Mission(sql.FieldNEQ(FieldType, vc))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...enums.MissionType) predicate.Mission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mission(sql.FieldIn(FieldType, v...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...enums.MissionType) predicate.Mission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mission(sql.FieldNotIn(FieldType, v...))
}

// BodyEQ applies the EQ predicate on the "body" field.
func BodyEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldBody, v))
}

// BodyNEQ applies the NEQ predicate on the "body" field.
func BodyNEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldBody, v))
}

// BodyIn applies the In predicate on the "body" field.
func BodyIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldBody, vs...))
}

// BodyNotIn applies the NotIn predicate on the "body" field.
func BodyNotIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldBody, vs...))
}

// BodyGT applies the GT predicate on the "body" field.
func BodyGT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldBody, v))
}

// BodyGTE applies the GTE predicate on the "body" field.
func BodyGTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldBody, v))
}

// BodyLT applies the LT predicate on the "body" field.
func BodyLT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldBody, v))
}

// BodyLTE applies the LTE predicate on the "body" field.
func BodyLTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldBody, v))
}

// BodyContains applies the Contains predicate on the "body" field.
func BodyContains(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContains(FieldBody, v))
}

// BodyHasPrefix applies the HasPrefix predicate on the "body" field.
func BodyHasPrefix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasPrefix(FieldBody, v))
}

// BodyHasSuffix applies the HasSuffix predicate on the "body" field.
func BodyHasSuffix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasSuffix(FieldBody, v))
}

// BodyEqualFold applies the EqualFold predicate on the "body" field.
func BodyEqualFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEqualFold(FieldBody, v))
}

// BodyContainsFold applies the ContainsFold predicate on the "body" field.
func BodyContainsFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContainsFold(FieldBody, v))
}

// CallBackURLEQ applies the EQ predicate on the "call_back_url" field.
func CallBackURLEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldCallBackURL, v))
}

// CallBackURLNEQ applies the NEQ predicate on the "call_back_url" field.
func CallBackURLNEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldCallBackURL, v))
}

// CallBackURLIn applies the In predicate on the "call_back_url" field.
func CallBackURLIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldCallBackURL, vs...))
}

// CallBackURLNotIn applies the NotIn predicate on the "call_back_url" field.
func CallBackURLNotIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldCallBackURL, vs...))
}

// CallBackURLGT applies the GT predicate on the "call_back_url" field.
func CallBackURLGT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldCallBackURL, v))
}

// CallBackURLGTE applies the GTE predicate on the "call_back_url" field.
func CallBackURLGTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldCallBackURL, v))
}

// CallBackURLLT applies the LT predicate on the "call_back_url" field.
func CallBackURLLT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldCallBackURL, v))
}

// CallBackURLLTE applies the LTE predicate on the "call_back_url" field.
func CallBackURLLTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldCallBackURL, v))
}

// CallBackURLContains applies the Contains predicate on the "call_back_url" field.
func CallBackURLContains(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContains(FieldCallBackURL, v))
}

// CallBackURLHasPrefix applies the HasPrefix predicate on the "call_back_url" field.
func CallBackURLHasPrefix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasPrefix(FieldCallBackURL, v))
}

// CallBackURLHasSuffix applies the HasSuffix predicate on the "call_back_url" field.
func CallBackURLHasSuffix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasSuffix(FieldCallBackURL, v))
}

// CallBackURLEqualFold applies the EqualFold predicate on the "call_back_url" field.
func CallBackURLEqualFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEqualFold(FieldCallBackURL, v))
}

// CallBackURLContainsFold applies the ContainsFold predicate on the "call_back_url" field.
func CallBackURLContainsFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContainsFold(FieldCallBackURL, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v enums.MissionStatus) predicate.Mission {
	vc := v
	return predicate.Mission(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v enums.MissionStatus) predicate.Mission {
	vc := v
	return predicate.Mission(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...enums.MissionStatus) predicate.Mission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mission(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...enums.MissionStatus) predicate.Mission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mission(sql.FieldNotIn(FieldStatus, v...))
}

// ResultEQ applies the EQ predicate on the "result" field.
func ResultEQ(v enums.MissionResult) predicate.Mission {
	vc := v
	return predicate.Mission(sql.FieldEQ(FieldResult, vc))
}

// ResultNEQ applies the NEQ predicate on the "result" field.
func ResultNEQ(v enums.MissionResult) predicate.Mission {
	vc := v
	return predicate.Mission(sql.FieldNEQ(FieldResult, vc))
}

// ResultIn applies the In predicate on the "result" field.
func ResultIn(vs ...enums.MissionResult) predicate.Mission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mission(sql.FieldIn(FieldResult, v...))
}

// ResultNotIn applies the NotIn predicate on the "result" field.
func ResultNotIn(vs ...enums.MissionResult) predicate.Mission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mission(sql.FieldNotIn(FieldResult, v...))
}

// ResultUrlsIsNil applies the IsNil predicate on the "result_urls" field.
func ResultUrlsIsNil() predicate.Mission {
	return predicate.Mission(sql.FieldIsNull(FieldResultUrls))
}

// ResultUrlsNotNil applies the NotNil predicate on the "result_urls" field.
func ResultUrlsNotNil() predicate.Mission {
	return predicate.Mission(sql.FieldNotNull(FieldResultUrls))
}

// KeyPairIDEQ applies the EQ predicate on the "key_pair_id" field.
func KeyPairIDEQ(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldKeyPairID, v))
}

// KeyPairIDNEQ applies the NEQ predicate on the "key_pair_id" field.
func KeyPairIDNEQ(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldKeyPairID, v))
}

// KeyPairIDIn applies the In predicate on the "key_pair_id" field.
func KeyPairIDIn(vs ...int64) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldKeyPairID, vs...))
}

// KeyPairIDNotIn applies the NotIn predicate on the "key_pair_id" field.
func KeyPairIDNotIn(vs ...int64) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldKeyPairID, vs...))
}

// MissionBatchNumberEQ applies the EQ predicate on the "mission_batch_number" field.
func MissionBatchNumberEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldMissionBatchNumber, v))
}

// MissionBatchNumberNEQ applies the NEQ predicate on the "mission_batch_number" field.
func MissionBatchNumberNEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldMissionBatchNumber, v))
}

// MissionBatchNumberIn applies the In predicate on the "mission_batch_number" field.
func MissionBatchNumberIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldMissionBatchNumber, vs...))
}

// MissionBatchNumberNotIn applies the NotIn predicate on the "mission_batch_number" field.
func MissionBatchNumberNotIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldMissionBatchNumber, vs...))
}

// MissionBatchNumberGT applies the GT predicate on the "mission_batch_number" field.
func MissionBatchNumberGT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldMissionBatchNumber, v))
}

// MissionBatchNumberGTE applies the GTE predicate on the "mission_batch_number" field.
func MissionBatchNumberGTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldMissionBatchNumber, v))
}

// MissionBatchNumberLT applies the LT predicate on the "mission_batch_number" field.
func MissionBatchNumberLT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldMissionBatchNumber, v))
}

// MissionBatchNumberLTE applies the LTE predicate on the "mission_batch_number" field.
func MissionBatchNumberLTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldMissionBatchNumber, v))
}

// MissionBatchNumberContains applies the Contains predicate on the "mission_batch_number" field.
func MissionBatchNumberContains(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContains(FieldMissionBatchNumber, v))
}

// MissionBatchNumberHasPrefix applies the HasPrefix predicate on the "mission_batch_number" field.
func MissionBatchNumberHasPrefix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasPrefix(FieldMissionBatchNumber, v))
}

// MissionBatchNumberHasSuffix applies the HasSuffix predicate on the "mission_batch_number" field.
func MissionBatchNumberHasSuffix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasSuffix(FieldMissionBatchNumber, v))
}

// MissionBatchNumberEqualFold applies the EqualFold predicate on the "mission_batch_number" field.
func MissionBatchNumberEqualFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEqualFold(FieldMissionBatchNumber, v))
}

// MissionBatchNumberContainsFold applies the ContainsFold predicate on the "mission_batch_number" field.
func MissionBatchNumberContainsFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContainsFold(FieldMissionBatchNumber, v))
}

// GpuVersionEQ applies the EQ predicate on the "gpu_version" field.
func GpuVersionEQ(v enums.GpuVersion) predicate.Mission {
	vc := v
	return predicate.Mission(sql.FieldEQ(FieldGpuVersion, vc))
}

// GpuVersionNEQ applies the NEQ predicate on the "gpu_version" field.
func GpuVersionNEQ(v enums.GpuVersion) predicate.Mission {
	vc := v
	return predicate.Mission(sql.FieldNEQ(FieldGpuVersion, vc))
}

// GpuVersionIn applies the In predicate on the "gpu_version" field.
func GpuVersionIn(vs ...enums.GpuVersion) predicate.Mission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mission(sql.FieldIn(FieldGpuVersion, v...))
}

// GpuVersionNotIn applies the NotIn predicate on the "gpu_version" field.
func GpuVersionNotIn(vs ...enums.GpuVersion) predicate.Mission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mission(sql.FieldNotIn(FieldGpuVersion, v...))
}

// UnitCepEQ applies the EQ predicate on the "unit_cep" field.
func UnitCepEQ(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldUnitCep, v))
}

// UnitCepNEQ applies the NEQ predicate on the "unit_cep" field.
func UnitCepNEQ(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldUnitCep, v))
}

// UnitCepIn applies the In predicate on the "unit_cep" field.
func UnitCepIn(vs ...int64) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldUnitCep, vs...))
}

// UnitCepNotIn applies the NotIn predicate on the "unit_cep" field.
func UnitCepNotIn(vs ...int64) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldUnitCep, vs...))
}

// UnitCepGT applies the GT predicate on the "unit_cep" field.
func UnitCepGT(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldUnitCep, v))
}

// UnitCepGTE applies the GTE predicate on the "unit_cep" field.
func UnitCepGTE(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldUnitCep, v))
}

// UnitCepLT applies the LT predicate on the "unit_cep" field.
func UnitCepLT(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldUnitCep, v))
}

// UnitCepLTE applies the LTE predicate on the "unit_cep" field.
func UnitCepLTE(v int64) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldUnitCep, v))
}

// RespStatusCodeEQ applies the EQ predicate on the "resp_status_code" field.
func RespStatusCodeEQ(v int32) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldRespStatusCode, v))
}

// RespStatusCodeNEQ applies the NEQ predicate on the "resp_status_code" field.
func RespStatusCodeNEQ(v int32) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldRespStatusCode, v))
}

// RespStatusCodeIn applies the In predicate on the "resp_status_code" field.
func RespStatusCodeIn(vs ...int32) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldRespStatusCode, vs...))
}

// RespStatusCodeNotIn applies the NotIn predicate on the "resp_status_code" field.
func RespStatusCodeNotIn(vs ...int32) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldRespStatusCode, vs...))
}

// RespStatusCodeGT applies the GT predicate on the "resp_status_code" field.
func RespStatusCodeGT(v int32) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldRespStatusCode, v))
}

// RespStatusCodeGTE applies the GTE predicate on the "resp_status_code" field.
func RespStatusCodeGTE(v int32) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldRespStatusCode, v))
}

// RespStatusCodeLT applies the LT predicate on the "resp_status_code" field.
func RespStatusCodeLT(v int32) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldRespStatusCode, v))
}

// RespStatusCodeLTE applies the LTE predicate on the "resp_status_code" field.
func RespStatusCodeLTE(v int32) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldRespStatusCode, v))
}

// RespBodyEQ applies the EQ predicate on the "resp_body" field.
func RespBodyEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldRespBody, v))
}

// RespBodyNEQ applies the NEQ predicate on the "resp_body" field.
func RespBodyNEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldRespBody, v))
}

// RespBodyIn applies the In predicate on the "resp_body" field.
func RespBodyIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldRespBody, vs...))
}

// RespBodyNotIn applies the NotIn predicate on the "resp_body" field.
func RespBodyNotIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldRespBody, vs...))
}

// RespBodyGT applies the GT predicate on the "resp_body" field.
func RespBodyGT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldRespBody, v))
}

// RespBodyGTE applies the GTE predicate on the "resp_body" field.
func RespBodyGTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldRespBody, v))
}

// RespBodyLT applies the LT predicate on the "resp_body" field.
func RespBodyLT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldRespBody, v))
}

// RespBodyLTE applies the LTE predicate on the "resp_body" field.
func RespBodyLTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldRespBody, v))
}

// RespBodyContains applies the Contains predicate on the "resp_body" field.
func RespBodyContains(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContains(FieldRespBody, v))
}

// RespBodyHasPrefix applies the HasPrefix predicate on the "resp_body" field.
func RespBodyHasPrefix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasPrefix(FieldRespBody, v))
}

// RespBodyHasSuffix applies the HasSuffix predicate on the "resp_body" field.
func RespBodyHasSuffix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasSuffix(FieldRespBody, v))
}

// RespBodyEqualFold applies the EqualFold predicate on the "resp_body" field.
func RespBodyEqualFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEqualFold(FieldRespBody, v))
}

// RespBodyContainsFold applies the ContainsFold predicate on the "resp_body" field.
func RespBodyContainsFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContainsFold(FieldRespBody, v))
}

// InnerAPIEQ applies the EQ predicate on the "inner_api" field.
func InnerAPIEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldInnerAPI, v))
}

// InnerAPINEQ applies the NEQ predicate on the "inner_api" field.
func InnerAPINEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldInnerAPI, v))
}

// InnerAPIIn applies the In predicate on the "inner_api" field.
func InnerAPIIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldInnerAPI, vs...))
}

// InnerAPINotIn applies the NotIn predicate on the "inner_api" field.
func InnerAPINotIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldInnerAPI, vs...))
}

// InnerAPIGT applies the GT predicate on the "inner_api" field.
func InnerAPIGT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldInnerAPI, v))
}

// InnerAPIGTE applies the GTE predicate on the "inner_api" field.
func InnerAPIGTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldInnerAPI, v))
}

// InnerAPILT applies the LT predicate on the "inner_api" field.
func InnerAPILT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldInnerAPI, v))
}

// InnerAPILTE applies the LTE predicate on the "inner_api" field.
func InnerAPILTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldInnerAPI, v))
}

// InnerAPIContains applies the Contains predicate on the "inner_api" field.
func InnerAPIContains(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContains(FieldInnerAPI, v))
}

// InnerAPIHasPrefix applies the HasPrefix predicate on the "inner_api" field.
func InnerAPIHasPrefix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasPrefix(FieldInnerAPI, v))
}

// InnerAPIHasSuffix applies the HasSuffix predicate on the "inner_api" field.
func InnerAPIHasSuffix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasSuffix(FieldInnerAPI, v))
}

// InnerAPIEqualFold applies the EqualFold predicate on the "inner_api" field.
func InnerAPIEqualFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEqualFold(FieldInnerAPI, v))
}

// InnerAPIContainsFold applies the ContainsFold predicate on the "inner_api" field.
func InnerAPIContainsFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContainsFold(FieldInnerAPI, v))
}

// InnerMethodEQ applies the EQ predicate on the "inner_method" field.
func InnerMethodEQ(v enums.InnerMethod) predicate.Mission {
	vc := v
	return predicate.Mission(sql.FieldEQ(FieldInnerMethod, vc))
}

// InnerMethodNEQ applies the NEQ predicate on the "inner_method" field.
func InnerMethodNEQ(v enums.InnerMethod) predicate.Mission {
	vc := v
	return predicate.Mission(sql.FieldNEQ(FieldInnerMethod, vc))
}

// InnerMethodIn applies the In predicate on the "inner_method" field.
func InnerMethodIn(vs ...enums.InnerMethod) predicate.Mission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mission(sql.FieldIn(FieldInnerMethod, v...))
}

// InnerMethodNotIn applies the NotIn predicate on the "inner_method" field.
func InnerMethodNotIn(vs ...enums.InnerMethod) predicate.Mission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mission(sql.FieldNotIn(FieldInnerMethod, v...))
}

// TempHmacKeyEQ applies the EQ predicate on the "temp_hmac_key" field.
func TempHmacKeyEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldTempHmacKey, v))
}

// TempHmacKeyNEQ applies the NEQ predicate on the "temp_hmac_key" field.
func TempHmacKeyNEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldTempHmacKey, v))
}

// TempHmacKeyIn applies the In predicate on the "temp_hmac_key" field.
func TempHmacKeyIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldTempHmacKey, vs...))
}

// TempHmacKeyNotIn applies the NotIn predicate on the "temp_hmac_key" field.
func TempHmacKeyNotIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldTempHmacKey, vs...))
}

// TempHmacKeyGT applies the GT predicate on the "temp_hmac_key" field.
func TempHmacKeyGT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldTempHmacKey, v))
}

// TempHmacKeyGTE applies the GTE predicate on the "temp_hmac_key" field.
func TempHmacKeyGTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldTempHmacKey, v))
}

// TempHmacKeyLT applies the LT predicate on the "temp_hmac_key" field.
func TempHmacKeyLT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldTempHmacKey, v))
}

// TempHmacKeyLTE applies the LTE predicate on the "temp_hmac_key" field.
func TempHmacKeyLTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldTempHmacKey, v))
}

// TempHmacKeyContains applies the Contains predicate on the "temp_hmac_key" field.
func TempHmacKeyContains(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContains(FieldTempHmacKey, v))
}

// TempHmacKeyHasPrefix applies the HasPrefix predicate on the "temp_hmac_key" field.
func TempHmacKeyHasPrefix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasPrefix(FieldTempHmacKey, v))
}

// TempHmacKeyHasSuffix applies the HasSuffix predicate on the "temp_hmac_key" field.
func TempHmacKeyHasSuffix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasSuffix(FieldTempHmacKey, v))
}

// TempHmacKeyEqualFold applies the EqualFold predicate on the "temp_hmac_key" field.
func TempHmacKeyEqualFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEqualFold(FieldTempHmacKey, v))
}

// TempHmacKeyContainsFold applies the ContainsFold predicate on the "temp_hmac_key" field.
func TempHmacKeyContainsFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContainsFold(FieldTempHmacKey, v))
}

// TempHmacSecretEQ applies the EQ predicate on the "temp_hmac_secret" field.
func TempHmacSecretEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEQ(FieldTempHmacSecret, v))
}

// TempHmacSecretNEQ applies the NEQ predicate on the "temp_hmac_secret" field.
func TempHmacSecretNEQ(v string) predicate.Mission {
	return predicate.Mission(sql.FieldNEQ(FieldTempHmacSecret, v))
}

// TempHmacSecretIn applies the In predicate on the "temp_hmac_secret" field.
func TempHmacSecretIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldIn(FieldTempHmacSecret, vs...))
}

// TempHmacSecretNotIn applies the NotIn predicate on the "temp_hmac_secret" field.
func TempHmacSecretNotIn(vs ...string) predicate.Mission {
	return predicate.Mission(sql.FieldNotIn(FieldTempHmacSecret, vs...))
}

// TempHmacSecretGT applies the GT predicate on the "temp_hmac_secret" field.
func TempHmacSecretGT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGT(FieldTempHmacSecret, v))
}

// TempHmacSecretGTE applies the GTE predicate on the "temp_hmac_secret" field.
func TempHmacSecretGTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldGTE(FieldTempHmacSecret, v))
}

// TempHmacSecretLT applies the LT predicate on the "temp_hmac_secret" field.
func TempHmacSecretLT(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLT(FieldTempHmacSecret, v))
}

// TempHmacSecretLTE applies the LTE predicate on the "temp_hmac_secret" field.
func TempHmacSecretLTE(v string) predicate.Mission {
	return predicate.Mission(sql.FieldLTE(FieldTempHmacSecret, v))
}

// TempHmacSecretContains applies the Contains predicate on the "temp_hmac_secret" field.
func TempHmacSecretContains(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContains(FieldTempHmacSecret, v))
}

// TempHmacSecretHasPrefix applies the HasPrefix predicate on the "temp_hmac_secret" field.
func TempHmacSecretHasPrefix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasPrefix(FieldTempHmacSecret, v))
}

// TempHmacSecretHasSuffix applies the HasSuffix predicate on the "temp_hmac_secret" field.
func TempHmacSecretHasSuffix(v string) predicate.Mission {
	return predicate.Mission(sql.FieldHasSuffix(FieldTempHmacSecret, v))
}

// TempHmacSecretEqualFold applies the EqualFold predicate on the "temp_hmac_secret" field.
func TempHmacSecretEqualFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldEqualFold(FieldTempHmacSecret, v))
}

// TempHmacSecretContainsFold applies the ContainsFold predicate on the "temp_hmac_secret" field.
func TempHmacSecretContainsFold(v string) predicate.Mission {
	return predicate.Mission(sql.FieldContainsFold(FieldTempHmacSecret, v))
}

// HasMissionKeyPairs applies the HasEdge predicate on the "mission_key_pairs" edge.
func HasMissionKeyPairs() predicate.Mission {
	return predicate.Mission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MissionKeyPairsTable, MissionKeyPairsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMissionKeyPairsWith applies the HasEdge predicate on the "mission_key_pairs" edge with a given conditions (other predicates).
func HasMissionKeyPairsWith(preds ...predicate.MissionKeyPair) predicate.Mission {
	return predicate.Mission(func(s *sql.Selector) {
		step := newMissionKeyPairsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasKeyPair applies the HasEdge predicate on the "key_pair" edge.
func HasKeyPair() predicate.Mission {
	return predicate.Mission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, KeyPairTable, KeyPairColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasKeyPairWith applies the HasEdge predicate on the "key_pair" edge with a given conditions (other predicates).
func HasKeyPairWith(preds ...predicate.HmacKeyPair) predicate.Mission {
	return predicate.Mission(func(s *sql.Selector) {
		step := newKeyPairStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMissionConsumeOrder applies the HasEdge predicate on the "mission_consume_order" edge.
func HasMissionConsumeOrder() predicate.Mission {
	return predicate.Mission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, MissionConsumeOrderTable, MissionConsumeOrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMissionConsumeOrderWith applies the HasEdge predicate on the "mission_consume_order" edge with a given conditions (other predicates).
func HasMissionConsumeOrderWith(preds ...predicate.MissionConsumeOrder) predicate.Mission {
	return predicate.Mission(func(s *sql.Selector) {
		step := newMissionConsumeOrderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Mission) predicate.Mission {
	return predicate.Mission(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Mission) predicate.Mission {
	return predicate.Mission(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Mission) predicate.Mission {
	return predicate.Mission(sql.NotPredicates(p))
}
