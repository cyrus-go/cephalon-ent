// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/hmackeypair"
	"cephalon-ent/pkg/cep_ent/mission"
	"cephalon-ent/pkg/cep_ent/missionkeypair"
	"cephalon-ent/pkg/cep_ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HmacKeyPairUpdate is the builder for updating HmacKeyPair entities.
type HmacKeyPairUpdate struct {
	config
	hooks    []Hook
	mutation *HmacKeyPairMutation
}

// Where appends a list predicates to the HmacKeyPairUpdate builder.
func (hkpu *HmacKeyPairUpdate) Where(ps ...predicate.HmacKeyPair) *HmacKeyPairUpdate {
	hkpu.mutation.Where(ps...)
	return hkpu
}

// SetCreatedBy sets the "created_by" field.
func (hkpu *HmacKeyPairUpdate) SetCreatedBy(i int64) *HmacKeyPairUpdate {
	hkpu.mutation.ResetCreatedBy()
	hkpu.mutation.SetCreatedBy(i)
	return hkpu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (hkpu *HmacKeyPairUpdate) SetNillableCreatedBy(i *int64) *HmacKeyPairUpdate {
	if i != nil {
		hkpu.SetCreatedBy(*i)
	}
	return hkpu
}

// AddCreatedBy adds i to the "created_by" field.
func (hkpu *HmacKeyPairUpdate) AddCreatedBy(i int64) *HmacKeyPairUpdate {
	hkpu.mutation.AddCreatedBy(i)
	return hkpu
}

// SetUpdatedBy sets the "updated_by" field.
func (hkpu *HmacKeyPairUpdate) SetUpdatedBy(i int64) *HmacKeyPairUpdate {
	hkpu.mutation.ResetUpdatedBy()
	hkpu.mutation.SetUpdatedBy(i)
	return hkpu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (hkpu *HmacKeyPairUpdate) SetNillableUpdatedBy(i *int64) *HmacKeyPairUpdate {
	if i != nil {
		hkpu.SetUpdatedBy(*i)
	}
	return hkpu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (hkpu *HmacKeyPairUpdate) AddUpdatedBy(i int64) *HmacKeyPairUpdate {
	hkpu.mutation.AddUpdatedBy(i)
	return hkpu
}

// SetUpdatedAt sets the "updated_at" field.
func (hkpu *HmacKeyPairUpdate) SetUpdatedAt(t time.Time) *HmacKeyPairUpdate {
	hkpu.mutation.SetUpdatedAt(t)
	return hkpu
}

// SetDeletedAt sets the "deleted_at" field.
func (hkpu *HmacKeyPairUpdate) SetDeletedAt(t time.Time) *HmacKeyPairUpdate {
	hkpu.mutation.SetDeletedAt(t)
	return hkpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (hkpu *HmacKeyPairUpdate) SetNillableDeletedAt(t *time.Time) *HmacKeyPairUpdate {
	if t != nil {
		hkpu.SetDeletedAt(*t)
	}
	return hkpu
}

// SetKey sets the "key" field.
func (hkpu *HmacKeyPairUpdate) SetKey(s string) *HmacKeyPairUpdate {
	hkpu.mutation.SetKey(s)
	return hkpu
}

// SetSecret sets the "secret" field.
func (hkpu *HmacKeyPairUpdate) SetSecret(s string) *HmacKeyPairUpdate {
	hkpu.mutation.SetSecret(s)
	return hkpu
}

// SetCaller sets the "caller" field.
func (hkpu *HmacKeyPairUpdate) SetCaller(s string) *HmacKeyPairUpdate {
	hkpu.mutation.SetCaller(s)
	return hkpu
}

// SetNillableCaller sets the "caller" field if the given value is not nil.
func (hkpu *HmacKeyPairUpdate) SetNillableCaller(s *string) *HmacKeyPairUpdate {
	if s != nil {
		hkpu.SetCaller(*s)
	}
	return hkpu
}

// AddMissionKeyPairIDs adds the "mission_key_pairs" edge to the MissionKeyPair entity by IDs.
func (hkpu *HmacKeyPairUpdate) AddMissionKeyPairIDs(ids ...int64) *HmacKeyPairUpdate {
	hkpu.mutation.AddMissionKeyPairIDs(ids...)
	return hkpu
}

// AddMissionKeyPairs adds the "mission_key_pairs" edges to the MissionKeyPair entity.
func (hkpu *HmacKeyPairUpdate) AddMissionKeyPairs(m ...*MissionKeyPair) *HmacKeyPairUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return hkpu.AddMissionKeyPairIDs(ids...)
}

// AddCreatedMissionIDs adds the "created_missions" edge to the Mission entity by IDs.
func (hkpu *HmacKeyPairUpdate) AddCreatedMissionIDs(ids ...int64) *HmacKeyPairUpdate {
	hkpu.mutation.AddCreatedMissionIDs(ids...)
	return hkpu
}

// AddCreatedMissions adds the "created_missions" edges to the Mission entity.
func (hkpu *HmacKeyPairUpdate) AddCreatedMissions(m ...*Mission) *HmacKeyPairUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return hkpu.AddCreatedMissionIDs(ids...)
}

// Mutation returns the HmacKeyPairMutation object of the builder.
func (hkpu *HmacKeyPairUpdate) Mutation() *HmacKeyPairMutation {
	return hkpu.mutation
}

// ClearMissionKeyPairs clears all "mission_key_pairs" edges to the MissionKeyPair entity.
func (hkpu *HmacKeyPairUpdate) ClearMissionKeyPairs() *HmacKeyPairUpdate {
	hkpu.mutation.ClearMissionKeyPairs()
	return hkpu
}

// RemoveMissionKeyPairIDs removes the "mission_key_pairs" edge to MissionKeyPair entities by IDs.
func (hkpu *HmacKeyPairUpdate) RemoveMissionKeyPairIDs(ids ...int64) *HmacKeyPairUpdate {
	hkpu.mutation.RemoveMissionKeyPairIDs(ids...)
	return hkpu
}

// RemoveMissionKeyPairs removes "mission_key_pairs" edges to MissionKeyPair entities.
func (hkpu *HmacKeyPairUpdate) RemoveMissionKeyPairs(m ...*MissionKeyPair) *HmacKeyPairUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return hkpu.RemoveMissionKeyPairIDs(ids...)
}

// ClearCreatedMissions clears all "created_missions" edges to the Mission entity.
func (hkpu *HmacKeyPairUpdate) ClearCreatedMissions() *HmacKeyPairUpdate {
	hkpu.mutation.ClearCreatedMissions()
	return hkpu
}

// RemoveCreatedMissionIDs removes the "created_missions" edge to Mission entities by IDs.
func (hkpu *HmacKeyPairUpdate) RemoveCreatedMissionIDs(ids ...int64) *HmacKeyPairUpdate {
	hkpu.mutation.RemoveCreatedMissionIDs(ids...)
	return hkpu
}

// RemoveCreatedMissions removes "created_missions" edges to Mission entities.
func (hkpu *HmacKeyPairUpdate) RemoveCreatedMissions(m ...*Mission) *HmacKeyPairUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return hkpu.RemoveCreatedMissionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hkpu *HmacKeyPairUpdate) Save(ctx context.Context) (int, error) {
	hkpu.defaults()
	return withHooks(ctx, hkpu.sqlSave, hkpu.mutation, hkpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hkpu *HmacKeyPairUpdate) SaveX(ctx context.Context) int {
	affected, err := hkpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hkpu *HmacKeyPairUpdate) Exec(ctx context.Context) error {
	_, err := hkpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hkpu *HmacKeyPairUpdate) ExecX(ctx context.Context) {
	if err := hkpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hkpu *HmacKeyPairUpdate) defaults() {
	if _, ok := hkpu.mutation.UpdatedAt(); !ok {
		v := hmackeypair.UpdateDefaultUpdatedAt()
		hkpu.mutation.SetUpdatedAt(v)
	}
}

func (hkpu *HmacKeyPairUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(hmackeypair.Table, hmackeypair.Columns, sqlgraph.NewFieldSpec(hmackeypair.FieldID, field.TypeInt64))
	if ps := hkpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hkpu.mutation.CreatedBy(); ok {
		_spec.SetField(hmackeypair.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := hkpu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(hmackeypair.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := hkpu.mutation.UpdatedBy(); ok {
		_spec.SetField(hmackeypair.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := hkpu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(hmackeypair.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := hkpu.mutation.UpdatedAt(); ok {
		_spec.SetField(hmackeypair.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := hkpu.mutation.DeletedAt(); ok {
		_spec.SetField(hmackeypair.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := hkpu.mutation.Key(); ok {
		_spec.SetField(hmackeypair.FieldKey, field.TypeString, value)
	}
	if value, ok := hkpu.mutation.Secret(); ok {
		_spec.SetField(hmackeypair.FieldSecret, field.TypeString, value)
	}
	if value, ok := hkpu.mutation.Caller(); ok {
		_spec.SetField(hmackeypair.FieldCaller, field.TypeString, value)
	}
	if hkpu.mutation.MissionKeyPairsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hmackeypair.MissionKeyPairsTable,
			Columns: []string{hmackeypair.MissionKeyPairsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionkeypair.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hkpu.mutation.RemovedMissionKeyPairsIDs(); len(nodes) > 0 && !hkpu.mutation.MissionKeyPairsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hmackeypair.MissionKeyPairsTable,
			Columns: []string{hmackeypair.MissionKeyPairsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionkeypair.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hkpu.mutation.MissionKeyPairsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hmackeypair.MissionKeyPairsTable,
			Columns: []string{hmackeypair.MissionKeyPairsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionkeypair.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hkpu.mutation.CreatedMissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hmackeypair.CreatedMissionsTable,
			Columns: []string{hmackeypair.CreatedMissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hkpu.mutation.RemovedCreatedMissionsIDs(); len(nodes) > 0 && !hkpu.mutation.CreatedMissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hmackeypair.CreatedMissionsTable,
			Columns: []string{hmackeypair.CreatedMissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hkpu.mutation.CreatedMissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hmackeypair.CreatedMissionsTable,
			Columns: []string{hmackeypair.CreatedMissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hkpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hmackeypair.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hkpu.mutation.done = true
	return n, nil
}

// HmacKeyPairUpdateOne is the builder for updating a single HmacKeyPair entity.
type HmacKeyPairUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HmacKeyPairMutation
}

// SetCreatedBy sets the "created_by" field.
func (hkpuo *HmacKeyPairUpdateOne) SetCreatedBy(i int64) *HmacKeyPairUpdateOne {
	hkpuo.mutation.ResetCreatedBy()
	hkpuo.mutation.SetCreatedBy(i)
	return hkpuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (hkpuo *HmacKeyPairUpdateOne) SetNillableCreatedBy(i *int64) *HmacKeyPairUpdateOne {
	if i != nil {
		hkpuo.SetCreatedBy(*i)
	}
	return hkpuo
}

// AddCreatedBy adds i to the "created_by" field.
func (hkpuo *HmacKeyPairUpdateOne) AddCreatedBy(i int64) *HmacKeyPairUpdateOne {
	hkpuo.mutation.AddCreatedBy(i)
	return hkpuo
}

// SetUpdatedBy sets the "updated_by" field.
func (hkpuo *HmacKeyPairUpdateOne) SetUpdatedBy(i int64) *HmacKeyPairUpdateOne {
	hkpuo.mutation.ResetUpdatedBy()
	hkpuo.mutation.SetUpdatedBy(i)
	return hkpuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (hkpuo *HmacKeyPairUpdateOne) SetNillableUpdatedBy(i *int64) *HmacKeyPairUpdateOne {
	if i != nil {
		hkpuo.SetUpdatedBy(*i)
	}
	return hkpuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (hkpuo *HmacKeyPairUpdateOne) AddUpdatedBy(i int64) *HmacKeyPairUpdateOne {
	hkpuo.mutation.AddUpdatedBy(i)
	return hkpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (hkpuo *HmacKeyPairUpdateOne) SetUpdatedAt(t time.Time) *HmacKeyPairUpdateOne {
	hkpuo.mutation.SetUpdatedAt(t)
	return hkpuo
}

// SetDeletedAt sets the "deleted_at" field.
func (hkpuo *HmacKeyPairUpdateOne) SetDeletedAt(t time.Time) *HmacKeyPairUpdateOne {
	hkpuo.mutation.SetDeletedAt(t)
	return hkpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (hkpuo *HmacKeyPairUpdateOne) SetNillableDeletedAt(t *time.Time) *HmacKeyPairUpdateOne {
	if t != nil {
		hkpuo.SetDeletedAt(*t)
	}
	return hkpuo
}

// SetKey sets the "key" field.
func (hkpuo *HmacKeyPairUpdateOne) SetKey(s string) *HmacKeyPairUpdateOne {
	hkpuo.mutation.SetKey(s)
	return hkpuo
}

// SetSecret sets the "secret" field.
func (hkpuo *HmacKeyPairUpdateOne) SetSecret(s string) *HmacKeyPairUpdateOne {
	hkpuo.mutation.SetSecret(s)
	return hkpuo
}

// SetCaller sets the "caller" field.
func (hkpuo *HmacKeyPairUpdateOne) SetCaller(s string) *HmacKeyPairUpdateOne {
	hkpuo.mutation.SetCaller(s)
	return hkpuo
}

// SetNillableCaller sets the "caller" field if the given value is not nil.
func (hkpuo *HmacKeyPairUpdateOne) SetNillableCaller(s *string) *HmacKeyPairUpdateOne {
	if s != nil {
		hkpuo.SetCaller(*s)
	}
	return hkpuo
}

// AddMissionKeyPairIDs adds the "mission_key_pairs" edge to the MissionKeyPair entity by IDs.
func (hkpuo *HmacKeyPairUpdateOne) AddMissionKeyPairIDs(ids ...int64) *HmacKeyPairUpdateOne {
	hkpuo.mutation.AddMissionKeyPairIDs(ids...)
	return hkpuo
}

// AddMissionKeyPairs adds the "mission_key_pairs" edges to the MissionKeyPair entity.
func (hkpuo *HmacKeyPairUpdateOne) AddMissionKeyPairs(m ...*MissionKeyPair) *HmacKeyPairUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return hkpuo.AddMissionKeyPairIDs(ids...)
}

// AddCreatedMissionIDs adds the "created_missions" edge to the Mission entity by IDs.
func (hkpuo *HmacKeyPairUpdateOne) AddCreatedMissionIDs(ids ...int64) *HmacKeyPairUpdateOne {
	hkpuo.mutation.AddCreatedMissionIDs(ids...)
	return hkpuo
}

// AddCreatedMissions adds the "created_missions" edges to the Mission entity.
func (hkpuo *HmacKeyPairUpdateOne) AddCreatedMissions(m ...*Mission) *HmacKeyPairUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return hkpuo.AddCreatedMissionIDs(ids...)
}

// Mutation returns the HmacKeyPairMutation object of the builder.
func (hkpuo *HmacKeyPairUpdateOne) Mutation() *HmacKeyPairMutation {
	return hkpuo.mutation
}

// ClearMissionKeyPairs clears all "mission_key_pairs" edges to the MissionKeyPair entity.
func (hkpuo *HmacKeyPairUpdateOne) ClearMissionKeyPairs() *HmacKeyPairUpdateOne {
	hkpuo.mutation.ClearMissionKeyPairs()
	return hkpuo
}

// RemoveMissionKeyPairIDs removes the "mission_key_pairs" edge to MissionKeyPair entities by IDs.
func (hkpuo *HmacKeyPairUpdateOne) RemoveMissionKeyPairIDs(ids ...int64) *HmacKeyPairUpdateOne {
	hkpuo.mutation.RemoveMissionKeyPairIDs(ids...)
	return hkpuo
}

// RemoveMissionKeyPairs removes "mission_key_pairs" edges to MissionKeyPair entities.
func (hkpuo *HmacKeyPairUpdateOne) RemoveMissionKeyPairs(m ...*MissionKeyPair) *HmacKeyPairUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return hkpuo.RemoveMissionKeyPairIDs(ids...)
}

// ClearCreatedMissions clears all "created_missions" edges to the Mission entity.
func (hkpuo *HmacKeyPairUpdateOne) ClearCreatedMissions() *HmacKeyPairUpdateOne {
	hkpuo.mutation.ClearCreatedMissions()
	return hkpuo
}

// RemoveCreatedMissionIDs removes the "created_missions" edge to Mission entities by IDs.
func (hkpuo *HmacKeyPairUpdateOne) RemoveCreatedMissionIDs(ids ...int64) *HmacKeyPairUpdateOne {
	hkpuo.mutation.RemoveCreatedMissionIDs(ids...)
	return hkpuo
}

// RemoveCreatedMissions removes "created_missions" edges to Mission entities.
func (hkpuo *HmacKeyPairUpdateOne) RemoveCreatedMissions(m ...*Mission) *HmacKeyPairUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return hkpuo.RemoveCreatedMissionIDs(ids...)
}

// Where appends a list predicates to the HmacKeyPairUpdate builder.
func (hkpuo *HmacKeyPairUpdateOne) Where(ps ...predicate.HmacKeyPair) *HmacKeyPairUpdateOne {
	hkpuo.mutation.Where(ps...)
	return hkpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hkpuo *HmacKeyPairUpdateOne) Select(field string, fields ...string) *HmacKeyPairUpdateOne {
	hkpuo.fields = append([]string{field}, fields...)
	return hkpuo
}

// Save executes the query and returns the updated HmacKeyPair entity.
func (hkpuo *HmacKeyPairUpdateOne) Save(ctx context.Context) (*HmacKeyPair, error) {
	hkpuo.defaults()
	return withHooks(ctx, hkpuo.sqlSave, hkpuo.mutation, hkpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hkpuo *HmacKeyPairUpdateOne) SaveX(ctx context.Context) *HmacKeyPair {
	node, err := hkpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hkpuo *HmacKeyPairUpdateOne) Exec(ctx context.Context) error {
	_, err := hkpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hkpuo *HmacKeyPairUpdateOne) ExecX(ctx context.Context) {
	if err := hkpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hkpuo *HmacKeyPairUpdateOne) defaults() {
	if _, ok := hkpuo.mutation.UpdatedAt(); !ok {
		v := hmackeypair.UpdateDefaultUpdatedAt()
		hkpuo.mutation.SetUpdatedAt(v)
	}
}

func (hkpuo *HmacKeyPairUpdateOne) sqlSave(ctx context.Context) (_node *HmacKeyPair, err error) {
	_spec := sqlgraph.NewUpdateSpec(hmackeypair.Table, hmackeypair.Columns, sqlgraph.NewFieldSpec(hmackeypair.FieldID, field.TypeInt64))
	id, ok := hkpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "HmacKeyPair.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hkpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hmackeypair.FieldID)
		for _, f := range fields {
			if !hmackeypair.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != hmackeypair.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hkpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hkpuo.mutation.CreatedBy(); ok {
		_spec.SetField(hmackeypair.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := hkpuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(hmackeypair.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := hkpuo.mutation.UpdatedBy(); ok {
		_spec.SetField(hmackeypair.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := hkpuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(hmackeypair.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := hkpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(hmackeypair.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := hkpuo.mutation.DeletedAt(); ok {
		_spec.SetField(hmackeypair.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := hkpuo.mutation.Key(); ok {
		_spec.SetField(hmackeypair.FieldKey, field.TypeString, value)
	}
	if value, ok := hkpuo.mutation.Secret(); ok {
		_spec.SetField(hmackeypair.FieldSecret, field.TypeString, value)
	}
	if value, ok := hkpuo.mutation.Caller(); ok {
		_spec.SetField(hmackeypair.FieldCaller, field.TypeString, value)
	}
	if hkpuo.mutation.MissionKeyPairsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hmackeypair.MissionKeyPairsTable,
			Columns: []string{hmackeypair.MissionKeyPairsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionkeypair.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hkpuo.mutation.RemovedMissionKeyPairsIDs(); len(nodes) > 0 && !hkpuo.mutation.MissionKeyPairsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hmackeypair.MissionKeyPairsTable,
			Columns: []string{hmackeypair.MissionKeyPairsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionkeypair.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hkpuo.mutation.MissionKeyPairsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hmackeypair.MissionKeyPairsTable,
			Columns: []string{hmackeypair.MissionKeyPairsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionkeypair.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hkpuo.mutation.CreatedMissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hmackeypair.CreatedMissionsTable,
			Columns: []string{hmackeypair.CreatedMissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hkpuo.mutation.RemovedCreatedMissionsIDs(); len(nodes) > 0 && !hkpuo.mutation.CreatedMissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hmackeypair.CreatedMissionsTable,
			Columns: []string{hmackeypair.CreatedMissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hkpuo.mutation.CreatedMissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hmackeypair.CreatedMissionsTable,
			Columns: []string{hmackeypair.CreatedMissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HmacKeyPair{config: hkpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hkpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hmackeypair.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hkpuo.mutation.done = true
	return _node, nil
}
