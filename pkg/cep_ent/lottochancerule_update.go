// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lotto"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottochancerule"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// LottoChanceRuleUpdate is the builder for updating LottoChanceRule entities.
type LottoChanceRuleUpdate struct {
	config
	hooks     []Hook
	mutation  *LottoChanceRuleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the LottoChanceRuleUpdate builder.
func (lcru *LottoChanceRuleUpdate) Where(ps ...predicate.LottoChanceRule) *LottoChanceRuleUpdate {
	lcru.mutation.Where(ps...)
	return lcru
}

// SetCreatedBy sets the "created_by" field.
func (lcru *LottoChanceRuleUpdate) SetCreatedBy(i int64) *LottoChanceRuleUpdate {
	lcru.mutation.ResetCreatedBy()
	lcru.mutation.SetCreatedBy(i)
	return lcru
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (lcru *LottoChanceRuleUpdate) SetNillableCreatedBy(i *int64) *LottoChanceRuleUpdate {
	if i != nil {
		lcru.SetCreatedBy(*i)
	}
	return lcru
}

// AddCreatedBy adds i to the "created_by" field.
func (lcru *LottoChanceRuleUpdate) AddCreatedBy(i int64) *LottoChanceRuleUpdate {
	lcru.mutation.AddCreatedBy(i)
	return lcru
}

// SetUpdatedBy sets the "updated_by" field.
func (lcru *LottoChanceRuleUpdate) SetUpdatedBy(i int64) *LottoChanceRuleUpdate {
	lcru.mutation.ResetUpdatedBy()
	lcru.mutation.SetUpdatedBy(i)
	return lcru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (lcru *LottoChanceRuleUpdate) SetNillableUpdatedBy(i *int64) *LottoChanceRuleUpdate {
	if i != nil {
		lcru.SetUpdatedBy(*i)
	}
	return lcru
}

// AddUpdatedBy adds i to the "updated_by" field.
func (lcru *LottoChanceRuleUpdate) AddUpdatedBy(i int64) *LottoChanceRuleUpdate {
	lcru.mutation.AddUpdatedBy(i)
	return lcru
}

// SetUpdatedAt sets the "updated_at" field.
func (lcru *LottoChanceRuleUpdate) SetUpdatedAt(t time.Time) *LottoChanceRuleUpdate {
	lcru.mutation.SetUpdatedAt(t)
	return lcru
}

// SetDeletedAt sets the "deleted_at" field.
func (lcru *LottoChanceRuleUpdate) SetDeletedAt(t time.Time) *LottoChanceRuleUpdate {
	lcru.mutation.SetDeletedAt(t)
	return lcru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lcru *LottoChanceRuleUpdate) SetNillableDeletedAt(t *time.Time) *LottoChanceRuleUpdate {
	if t != nil {
		lcru.SetDeletedAt(*t)
	}
	return lcru
}

// SetLottoID sets the "lotto_id" field.
func (lcru *LottoChanceRuleUpdate) SetLottoID(i int64) *LottoChanceRuleUpdate {
	lcru.mutation.SetLottoID(i)
	return lcru
}

// SetNillableLottoID sets the "lotto_id" field if the given value is not nil.
func (lcru *LottoChanceRuleUpdate) SetNillableLottoID(i *int64) *LottoChanceRuleUpdate {
	if i != nil {
		lcru.SetLottoID(*i)
	}
	return lcru
}

// SetCondition sets the "condition" field.
func (lcru *LottoChanceRuleUpdate) SetCondition(ec enums.LottoCondition) *LottoChanceRuleUpdate {
	lcru.mutation.SetCondition(ec)
	return lcru
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (lcru *LottoChanceRuleUpdate) SetNillableCondition(ec *enums.LottoCondition) *LottoChanceRuleUpdate {
	if ec != nil {
		lcru.SetCondition(*ec)
	}
	return lcru
}

// SetAwardCount sets the "award_count" field.
func (lcru *LottoChanceRuleUpdate) SetAwardCount(i int64) *LottoChanceRuleUpdate {
	lcru.mutation.ResetAwardCount()
	lcru.mutation.SetAwardCount(i)
	return lcru
}

// SetNillableAwardCount sets the "award_count" field if the given value is not nil.
func (lcru *LottoChanceRuleUpdate) SetNillableAwardCount(i *int64) *LottoChanceRuleUpdate {
	if i != nil {
		lcru.SetAwardCount(*i)
	}
	return lcru
}

// AddAwardCount adds i to the "award_count" field.
func (lcru *LottoChanceRuleUpdate) AddAwardCount(i int64) *LottoChanceRuleUpdate {
	lcru.mutation.AddAwardCount(i)
	return lcru
}

// SetRechargeAmount sets the "recharge_amount" field.
func (lcru *LottoChanceRuleUpdate) SetRechargeAmount(i int64) *LottoChanceRuleUpdate {
	lcru.mutation.ResetRechargeAmount()
	lcru.mutation.SetRechargeAmount(i)
	return lcru
}

// SetNillableRechargeAmount sets the "recharge_amount" field if the given value is not nil.
func (lcru *LottoChanceRuleUpdate) SetNillableRechargeAmount(i *int64) *LottoChanceRuleUpdate {
	if i != nil {
		lcru.SetRechargeAmount(*i)
	}
	return lcru
}

// AddRechargeAmount adds i to the "recharge_amount" field.
func (lcru *LottoChanceRuleUpdate) AddRechargeAmount(i int64) *LottoChanceRuleUpdate {
	lcru.mutation.AddRechargeAmount(i)
	return lcru
}

// SetLotto sets the "lotto" edge to the Lotto entity.
func (lcru *LottoChanceRuleUpdate) SetLotto(l *Lotto) *LottoChanceRuleUpdate {
	return lcru.SetLottoID(l.ID)
}

// Mutation returns the LottoChanceRuleMutation object of the builder.
func (lcru *LottoChanceRuleUpdate) Mutation() *LottoChanceRuleMutation {
	return lcru.mutation
}

// ClearLotto clears the "lotto" edge to the Lotto entity.
func (lcru *LottoChanceRuleUpdate) ClearLotto() *LottoChanceRuleUpdate {
	lcru.mutation.ClearLotto()
	return lcru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lcru *LottoChanceRuleUpdate) Save(ctx context.Context) (int, error) {
	lcru.defaults()
	return withHooks(ctx, lcru.sqlSave, lcru.mutation, lcru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lcru *LottoChanceRuleUpdate) SaveX(ctx context.Context) int {
	affected, err := lcru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lcru *LottoChanceRuleUpdate) Exec(ctx context.Context) error {
	_, err := lcru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcru *LottoChanceRuleUpdate) ExecX(ctx context.Context) {
	if err := lcru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lcru *LottoChanceRuleUpdate) defaults() {
	if _, ok := lcru.mutation.UpdatedAt(); !ok {
		v := lottochancerule.UpdateDefaultUpdatedAt()
		lcru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lcru *LottoChanceRuleUpdate) check() error {
	if v, ok := lcru.mutation.Condition(); ok {
		if err := lottochancerule.ConditionValidator(v); err != nil {
			return &ValidationError{Name: "condition", err: fmt.Errorf(`cep_ent: validator failed for field "LottoChanceRule.condition": %w`, err)}
		}
	}
	if _, ok := lcru.mutation.LottoID(); lcru.mutation.LottoCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "LottoChanceRule.lotto"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (lcru *LottoChanceRuleUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LottoChanceRuleUpdate {
	lcru.modifiers = append(lcru.modifiers, modifiers...)
	return lcru
}

func (lcru *LottoChanceRuleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lcru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(lottochancerule.Table, lottochancerule.Columns, sqlgraph.NewFieldSpec(lottochancerule.FieldID, field.TypeInt64))
	if ps := lcru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lcru.mutation.CreatedBy(); ok {
		_spec.SetField(lottochancerule.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := lcru.mutation.AddedCreatedBy(); ok {
		_spec.AddField(lottochancerule.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := lcru.mutation.UpdatedBy(); ok {
		_spec.SetField(lottochancerule.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := lcru.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(lottochancerule.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := lcru.mutation.UpdatedAt(); ok {
		_spec.SetField(lottochancerule.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lcru.mutation.DeletedAt(); ok {
		_spec.SetField(lottochancerule.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := lcru.mutation.Condition(); ok {
		_spec.SetField(lottochancerule.FieldCondition, field.TypeEnum, value)
	}
	if value, ok := lcru.mutation.AwardCount(); ok {
		_spec.SetField(lottochancerule.FieldAwardCount, field.TypeInt64, value)
	}
	if value, ok := lcru.mutation.AddedAwardCount(); ok {
		_spec.AddField(lottochancerule.FieldAwardCount, field.TypeInt64, value)
	}
	if value, ok := lcru.mutation.RechargeAmount(); ok {
		_spec.SetField(lottochancerule.FieldRechargeAmount, field.TypeInt64, value)
	}
	if value, ok := lcru.mutation.AddedRechargeAmount(); ok {
		_spec.AddField(lottochancerule.FieldRechargeAmount, field.TypeInt64, value)
	}
	if lcru.mutation.LottoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottochancerule.LottoTable,
			Columns: []string{lottochancerule.LottoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lotto.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lcru.mutation.LottoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottochancerule.LottoTable,
			Columns: []string{lottochancerule.LottoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lotto.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(lcru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, lcru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lottochancerule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lcru.mutation.done = true
	return n, nil
}

// LottoChanceRuleUpdateOne is the builder for updating a single LottoChanceRule entity.
type LottoChanceRuleUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *LottoChanceRuleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedBy sets the "created_by" field.
func (lcruo *LottoChanceRuleUpdateOne) SetCreatedBy(i int64) *LottoChanceRuleUpdateOne {
	lcruo.mutation.ResetCreatedBy()
	lcruo.mutation.SetCreatedBy(i)
	return lcruo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (lcruo *LottoChanceRuleUpdateOne) SetNillableCreatedBy(i *int64) *LottoChanceRuleUpdateOne {
	if i != nil {
		lcruo.SetCreatedBy(*i)
	}
	return lcruo
}

// AddCreatedBy adds i to the "created_by" field.
func (lcruo *LottoChanceRuleUpdateOne) AddCreatedBy(i int64) *LottoChanceRuleUpdateOne {
	lcruo.mutation.AddCreatedBy(i)
	return lcruo
}

// SetUpdatedBy sets the "updated_by" field.
func (lcruo *LottoChanceRuleUpdateOne) SetUpdatedBy(i int64) *LottoChanceRuleUpdateOne {
	lcruo.mutation.ResetUpdatedBy()
	lcruo.mutation.SetUpdatedBy(i)
	return lcruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (lcruo *LottoChanceRuleUpdateOne) SetNillableUpdatedBy(i *int64) *LottoChanceRuleUpdateOne {
	if i != nil {
		lcruo.SetUpdatedBy(*i)
	}
	return lcruo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (lcruo *LottoChanceRuleUpdateOne) AddUpdatedBy(i int64) *LottoChanceRuleUpdateOne {
	lcruo.mutation.AddUpdatedBy(i)
	return lcruo
}

// SetUpdatedAt sets the "updated_at" field.
func (lcruo *LottoChanceRuleUpdateOne) SetUpdatedAt(t time.Time) *LottoChanceRuleUpdateOne {
	lcruo.mutation.SetUpdatedAt(t)
	return lcruo
}

// SetDeletedAt sets the "deleted_at" field.
func (lcruo *LottoChanceRuleUpdateOne) SetDeletedAt(t time.Time) *LottoChanceRuleUpdateOne {
	lcruo.mutation.SetDeletedAt(t)
	return lcruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lcruo *LottoChanceRuleUpdateOne) SetNillableDeletedAt(t *time.Time) *LottoChanceRuleUpdateOne {
	if t != nil {
		lcruo.SetDeletedAt(*t)
	}
	return lcruo
}

// SetLottoID sets the "lotto_id" field.
func (lcruo *LottoChanceRuleUpdateOne) SetLottoID(i int64) *LottoChanceRuleUpdateOne {
	lcruo.mutation.SetLottoID(i)
	return lcruo
}

// SetNillableLottoID sets the "lotto_id" field if the given value is not nil.
func (lcruo *LottoChanceRuleUpdateOne) SetNillableLottoID(i *int64) *LottoChanceRuleUpdateOne {
	if i != nil {
		lcruo.SetLottoID(*i)
	}
	return lcruo
}

// SetCondition sets the "condition" field.
func (lcruo *LottoChanceRuleUpdateOne) SetCondition(ec enums.LottoCondition) *LottoChanceRuleUpdateOne {
	lcruo.mutation.SetCondition(ec)
	return lcruo
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (lcruo *LottoChanceRuleUpdateOne) SetNillableCondition(ec *enums.LottoCondition) *LottoChanceRuleUpdateOne {
	if ec != nil {
		lcruo.SetCondition(*ec)
	}
	return lcruo
}

// SetAwardCount sets the "award_count" field.
func (lcruo *LottoChanceRuleUpdateOne) SetAwardCount(i int64) *LottoChanceRuleUpdateOne {
	lcruo.mutation.ResetAwardCount()
	lcruo.mutation.SetAwardCount(i)
	return lcruo
}

// SetNillableAwardCount sets the "award_count" field if the given value is not nil.
func (lcruo *LottoChanceRuleUpdateOne) SetNillableAwardCount(i *int64) *LottoChanceRuleUpdateOne {
	if i != nil {
		lcruo.SetAwardCount(*i)
	}
	return lcruo
}

// AddAwardCount adds i to the "award_count" field.
func (lcruo *LottoChanceRuleUpdateOne) AddAwardCount(i int64) *LottoChanceRuleUpdateOne {
	lcruo.mutation.AddAwardCount(i)
	return lcruo
}

// SetRechargeAmount sets the "recharge_amount" field.
func (lcruo *LottoChanceRuleUpdateOne) SetRechargeAmount(i int64) *LottoChanceRuleUpdateOne {
	lcruo.mutation.ResetRechargeAmount()
	lcruo.mutation.SetRechargeAmount(i)
	return lcruo
}

// SetNillableRechargeAmount sets the "recharge_amount" field if the given value is not nil.
func (lcruo *LottoChanceRuleUpdateOne) SetNillableRechargeAmount(i *int64) *LottoChanceRuleUpdateOne {
	if i != nil {
		lcruo.SetRechargeAmount(*i)
	}
	return lcruo
}

// AddRechargeAmount adds i to the "recharge_amount" field.
func (lcruo *LottoChanceRuleUpdateOne) AddRechargeAmount(i int64) *LottoChanceRuleUpdateOne {
	lcruo.mutation.AddRechargeAmount(i)
	return lcruo
}

// SetLotto sets the "lotto" edge to the Lotto entity.
func (lcruo *LottoChanceRuleUpdateOne) SetLotto(l *Lotto) *LottoChanceRuleUpdateOne {
	return lcruo.SetLottoID(l.ID)
}

// Mutation returns the LottoChanceRuleMutation object of the builder.
func (lcruo *LottoChanceRuleUpdateOne) Mutation() *LottoChanceRuleMutation {
	return lcruo.mutation
}

// ClearLotto clears the "lotto" edge to the Lotto entity.
func (lcruo *LottoChanceRuleUpdateOne) ClearLotto() *LottoChanceRuleUpdateOne {
	lcruo.mutation.ClearLotto()
	return lcruo
}

// Where appends a list predicates to the LottoChanceRuleUpdate builder.
func (lcruo *LottoChanceRuleUpdateOne) Where(ps ...predicate.LottoChanceRule) *LottoChanceRuleUpdateOne {
	lcruo.mutation.Where(ps...)
	return lcruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lcruo *LottoChanceRuleUpdateOne) Select(field string, fields ...string) *LottoChanceRuleUpdateOne {
	lcruo.fields = append([]string{field}, fields...)
	return lcruo
}

// Save executes the query and returns the updated LottoChanceRule entity.
func (lcruo *LottoChanceRuleUpdateOne) Save(ctx context.Context) (*LottoChanceRule, error) {
	lcruo.defaults()
	return withHooks(ctx, lcruo.sqlSave, lcruo.mutation, lcruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lcruo *LottoChanceRuleUpdateOne) SaveX(ctx context.Context) *LottoChanceRule {
	node, err := lcruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lcruo *LottoChanceRuleUpdateOne) Exec(ctx context.Context) error {
	_, err := lcruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcruo *LottoChanceRuleUpdateOne) ExecX(ctx context.Context) {
	if err := lcruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lcruo *LottoChanceRuleUpdateOne) defaults() {
	if _, ok := lcruo.mutation.UpdatedAt(); !ok {
		v := lottochancerule.UpdateDefaultUpdatedAt()
		lcruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lcruo *LottoChanceRuleUpdateOne) check() error {
	if v, ok := lcruo.mutation.Condition(); ok {
		if err := lottochancerule.ConditionValidator(v); err != nil {
			return &ValidationError{Name: "condition", err: fmt.Errorf(`cep_ent: validator failed for field "LottoChanceRule.condition": %w`, err)}
		}
	}
	if _, ok := lcruo.mutation.LottoID(); lcruo.mutation.LottoCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "LottoChanceRule.lotto"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (lcruo *LottoChanceRuleUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LottoChanceRuleUpdateOne {
	lcruo.modifiers = append(lcruo.modifiers, modifiers...)
	return lcruo
}

func (lcruo *LottoChanceRuleUpdateOne) sqlSave(ctx context.Context) (_node *LottoChanceRule, err error) {
	if err := lcruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(lottochancerule.Table, lottochancerule.Columns, sqlgraph.NewFieldSpec(lottochancerule.FieldID, field.TypeInt64))
	id, ok := lcruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "LottoChanceRule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lcruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lottochancerule.FieldID)
		for _, f := range fields {
			if !lottochancerule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != lottochancerule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lcruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lcruo.mutation.CreatedBy(); ok {
		_spec.SetField(lottochancerule.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := lcruo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(lottochancerule.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := lcruo.mutation.UpdatedBy(); ok {
		_spec.SetField(lottochancerule.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := lcruo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(lottochancerule.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := lcruo.mutation.UpdatedAt(); ok {
		_spec.SetField(lottochancerule.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lcruo.mutation.DeletedAt(); ok {
		_spec.SetField(lottochancerule.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := lcruo.mutation.Condition(); ok {
		_spec.SetField(lottochancerule.FieldCondition, field.TypeEnum, value)
	}
	if value, ok := lcruo.mutation.AwardCount(); ok {
		_spec.SetField(lottochancerule.FieldAwardCount, field.TypeInt64, value)
	}
	if value, ok := lcruo.mutation.AddedAwardCount(); ok {
		_spec.AddField(lottochancerule.FieldAwardCount, field.TypeInt64, value)
	}
	if value, ok := lcruo.mutation.RechargeAmount(); ok {
		_spec.SetField(lottochancerule.FieldRechargeAmount, field.TypeInt64, value)
	}
	if value, ok := lcruo.mutation.AddedRechargeAmount(); ok {
		_spec.AddField(lottochancerule.FieldRechargeAmount, field.TypeInt64, value)
	}
	if lcruo.mutation.LottoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottochancerule.LottoTable,
			Columns: []string{lottochancerule.LottoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lotto.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lcruo.mutation.LottoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottochancerule.LottoTable,
			Columns: []string{lottochancerule.LottoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lotto.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(lcruo.modifiers...)
	_node = &LottoChanceRule{config: lcruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lcruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lottochancerule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lcruo.mutation.done = true
	return _node, nil
}
