// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/usercloserecord"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// UserCloseRecordUpdate is the builder for updating UserCloseRecord entities.
type UserCloseRecordUpdate struct {
	config
	hooks     []Hook
	mutation  *UserCloseRecordMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserCloseRecordUpdate builder.
func (ucru *UserCloseRecordUpdate) Where(ps ...predicate.UserCloseRecord) *UserCloseRecordUpdate {
	ucru.mutation.Where(ps...)
	return ucru
}

// SetCreatedBy sets the "created_by" field.
func (ucru *UserCloseRecordUpdate) SetCreatedBy(i int64) *UserCloseRecordUpdate {
	ucru.mutation.ResetCreatedBy()
	ucru.mutation.SetCreatedBy(i)
	return ucru
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ucru *UserCloseRecordUpdate) SetNillableCreatedBy(i *int64) *UserCloseRecordUpdate {
	if i != nil {
		ucru.SetCreatedBy(*i)
	}
	return ucru
}

// AddCreatedBy adds i to the "created_by" field.
func (ucru *UserCloseRecordUpdate) AddCreatedBy(i int64) *UserCloseRecordUpdate {
	ucru.mutation.AddCreatedBy(i)
	return ucru
}

// SetUpdatedBy sets the "updated_by" field.
func (ucru *UserCloseRecordUpdate) SetUpdatedBy(i int64) *UserCloseRecordUpdate {
	ucru.mutation.ResetUpdatedBy()
	ucru.mutation.SetUpdatedBy(i)
	return ucru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ucru *UserCloseRecordUpdate) SetNillableUpdatedBy(i *int64) *UserCloseRecordUpdate {
	if i != nil {
		ucru.SetUpdatedBy(*i)
	}
	return ucru
}

// AddUpdatedBy adds i to the "updated_by" field.
func (ucru *UserCloseRecordUpdate) AddUpdatedBy(i int64) *UserCloseRecordUpdate {
	ucru.mutation.AddUpdatedBy(i)
	return ucru
}

// SetUpdatedAt sets the "updated_at" field.
func (ucru *UserCloseRecordUpdate) SetUpdatedAt(t time.Time) *UserCloseRecordUpdate {
	ucru.mutation.SetUpdatedAt(t)
	return ucru
}

// SetDeletedAt sets the "deleted_at" field.
func (ucru *UserCloseRecordUpdate) SetDeletedAt(t time.Time) *UserCloseRecordUpdate {
	ucru.mutation.SetDeletedAt(t)
	return ucru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ucru *UserCloseRecordUpdate) SetNillableDeletedAt(t *time.Time) *UserCloseRecordUpdate {
	if t != nil {
		ucru.SetDeletedAt(*t)
	}
	return ucru
}

// SetUserID sets the "user_id" field.
func (ucru *UserCloseRecordUpdate) SetUserID(i int64) *UserCloseRecordUpdate {
	ucru.mutation.SetUserID(i)
	return ucru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ucru *UserCloseRecordUpdate) SetNillableUserID(i *int64) *UserCloseRecordUpdate {
	if i != nil {
		ucru.SetUserID(*i)
	}
	return ucru
}

// SetRegisteredAt sets the "registered_at" field.
func (ucru *UserCloseRecordUpdate) SetRegisteredAt(t time.Time) *UserCloseRecordUpdate {
	ucru.mutation.SetRegisteredAt(t)
	return ucru
}

// SetNillableRegisteredAt sets the "registered_at" field if the given value is not nil.
func (ucru *UserCloseRecordUpdate) SetNillableRegisteredAt(t *time.Time) *UserCloseRecordUpdate {
	if t != nil {
		ucru.SetRegisteredAt(*t)
	}
	return ucru
}

// SetClosedAt sets the "closed_at" field.
func (ucru *UserCloseRecordUpdate) SetClosedAt(t time.Time) *UserCloseRecordUpdate {
	ucru.mutation.SetClosedAt(t)
	return ucru
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (ucru *UserCloseRecordUpdate) SetNillableClosedAt(t *time.Time) *UserCloseRecordUpdate {
	if t != nil {
		ucru.SetClosedAt(*t)
	}
	return ucru
}

// SetType sets the "type" field.
func (ucru *UserCloseRecordUpdate) SetType(ect enums.UserCloseType) *UserCloseRecordUpdate {
	ucru.mutation.SetType(ect)
	return ucru
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ucru *UserCloseRecordUpdate) SetNillableType(ect *enums.UserCloseType) *UserCloseRecordUpdate {
	if ect != nil {
		ucru.SetType(*ect)
	}
	return ucru
}

// SetOperateUserID sets the "operate_user_id" field.
func (ucru *UserCloseRecordUpdate) SetOperateUserID(i int64) *UserCloseRecordUpdate {
	ucru.mutation.SetOperateUserID(i)
	return ucru
}

// SetNillableOperateUserID sets the "operate_user_id" field if the given value is not nil.
func (ucru *UserCloseRecordUpdate) SetNillableOperateUserID(i *int64) *UserCloseRecordUpdate {
	if i != nil {
		ucru.SetOperateUserID(*i)
	}
	return ucru
}

// SetUser sets the "user" edge to the User entity.
func (ucru *UserCloseRecordUpdate) SetUser(u *User) *UserCloseRecordUpdate {
	return ucru.SetUserID(u.ID)
}

// SetOperateUser sets the "operate_user" edge to the User entity.
func (ucru *UserCloseRecordUpdate) SetOperateUser(u *User) *UserCloseRecordUpdate {
	return ucru.SetOperateUserID(u.ID)
}

// Mutation returns the UserCloseRecordMutation object of the builder.
func (ucru *UserCloseRecordUpdate) Mutation() *UserCloseRecordMutation {
	return ucru.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ucru *UserCloseRecordUpdate) ClearUser() *UserCloseRecordUpdate {
	ucru.mutation.ClearUser()
	return ucru
}

// ClearOperateUser clears the "operate_user" edge to the User entity.
func (ucru *UserCloseRecordUpdate) ClearOperateUser() *UserCloseRecordUpdate {
	ucru.mutation.ClearOperateUser()
	return ucru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ucru *UserCloseRecordUpdate) Save(ctx context.Context) (int, error) {
	ucru.defaults()
	return withHooks(ctx, ucru.sqlSave, ucru.mutation, ucru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ucru *UserCloseRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := ucru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ucru *UserCloseRecordUpdate) Exec(ctx context.Context) error {
	_, err := ucru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucru *UserCloseRecordUpdate) ExecX(ctx context.Context) {
	if err := ucru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ucru *UserCloseRecordUpdate) defaults() {
	if _, ok := ucru.mutation.UpdatedAt(); !ok {
		v := usercloserecord.UpdateDefaultUpdatedAt()
		ucru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucru *UserCloseRecordUpdate) check() error {
	if v, ok := ucru.mutation.GetType(); ok {
		if err := usercloserecord.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "UserCloseRecord.type": %w`, err)}
		}
	}
	if _, ok := ucru.mutation.UserID(); ucru.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "UserCloseRecord.user"`)
	}
	if _, ok := ucru.mutation.OperateUserID(); ucru.mutation.OperateUserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "UserCloseRecord.operate_user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ucru *UserCloseRecordUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserCloseRecordUpdate {
	ucru.modifiers = append(ucru.modifiers, modifiers...)
	return ucru
}

func (ucru *UserCloseRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ucru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(usercloserecord.Table, usercloserecord.Columns, sqlgraph.NewFieldSpec(usercloserecord.FieldID, field.TypeInt64))
	if ps := ucru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucru.mutation.CreatedBy(); ok {
		_spec.SetField(usercloserecord.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := ucru.mutation.AddedCreatedBy(); ok {
		_spec.AddField(usercloserecord.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := ucru.mutation.UpdatedBy(); ok {
		_spec.SetField(usercloserecord.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := ucru.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(usercloserecord.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := ucru.mutation.UpdatedAt(); ok {
		_spec.SetField(usercloserecord.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ucru.mutation.DeletedAt(); ok {
		_spec.SetField(usercloserecord.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := ucru.mutation.RegisteredAt(); ok {
		_spec.SetField(usercloserecord.FieldRegisteredAt, field.TypeTime, value)
	}
	if value, ok := ucru.mutation.ClosedAt(); ok {
		_spec.SetField(usercloserecord.FieldClosedAt, field.TypeTime, value)
	}
	if value, ok := ucru.mutation.GetType(); ok {
		_spec.SetField(usercloserecord.FieldType, field.TypeEnum, value)
	}
	if ucru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercloserecord.UserTable,
			Columns: []string{usercloserecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercloserecord.UserTable,
			Columns: []string{usercloserecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ucru.mutation.OperateUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercloserecord.OperateUserTable,
			Columns: []string{usercloserecord.OperateUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucru.mutation.OperateUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercloserecord.OperateUserTable,
			Columns: []string{usercloserecord.OperateUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ucru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ucru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usercloserecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ucru.mutation.done = true
	return n, nil
}

// UserCloseRecordUpdateOne is the builder for updating a single UserCloseRecord entity.
type UserCloseRecordUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserCloseRecordMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedBy sets the "created_by" field.
func (ucruo *UserCloseRecordUpdateOne) SetCreatedBy(i int64) *UserCloseRecordUpdateOne {
	ucruo.mutation.ResetCreatedBy()
	ucruo.mutation.SetCreatedBy(i)
	return ucruo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ucruo *UserCloseRecordUpdateOne) SetNillableCreatedBy(i *int64) *UserCloseRecordUpdateOne {
	if i != nil {
		ucruo.SetCreatedBy(*i)
	}
	return ucruo
}

// AddCreatedBy adds i to the "created_by" field.
func (ucruo *UserCloseRecordUpdateOne) AddCreatedBy(i int64) *UserCloseRecordUpdateOne {
	ucruo.mutation.AddCreatedBy(i)
	return ucruo
}

// SetUpdatedBy sets the "updated_by" field.
func (ucruo *UserCloseRecordUpdateOne) SetUpdatedBy(i int64) *UserCloseRecordUpdateOne {
	ucruo.mutation.ResetUpdatedBy()
	ucruo.mutation.SetUpdatedBy(i)
	return ucruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ucruo *UserCloseRecordUpdateOne) SetNillableUpdatedBy(i *int64) *UserCloseRecordUpdateOne {
	if i != nil {
		ucruo.SetUpdatedBy(*i)
	}
	return ucruo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (ucruo *UserCloseRecordUpdateOne) AddUpdatedBy(i int64) *UserCloseRecordUpdateOne {
	ucruo.mutation.AddUpdatedBy(i)
	return ucruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ucruo *UserCloseRecordUpdateOne) SetUpdatedAt(t time.Time) *UserCloseRecordUpdateOne {
	ucruo.mutation.SetUpdatedAt(t)
	return ucruo
}

// SetDeletedAt sets the "deleted_at" field.
func (ucruo *UserCloseRecordUpdateOne) SetDeletedAt(t time.Time) *UserCloseRecordUpdateOne {
	ucruo.mutation.SetDeletedAt(t)
	return ucruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ucruo *UserCloseRecordUpdateOne) SetNillableDeletedAt(t *time.Time) *UserCloseRecordUpdateOne {
	if t != nil {
		ucruo.SetDeletedAt(*t)
	}
	return ucruo
}

// SetUserID sets the "user_id" field.
func (ucruo *UserCloseRecordUpdateOne) SetUserID(i int64) *UserCloseRecordUpdateOne {
	ucruo.mutation.SetUserID(i)
	return ucruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ucruo *UserCloseRecordUpdateOne) SetNillableUserID(i *int64) *UserCloseRecordUpdateOne {
	if i != nil {
		ucruo.SetUserID(*i)
	}
	return ucruo
}

// SetRegisteredAt sets the "registered_at" field.
func (ucruo *UserCloseRecordUpdateOne) SetRegisteredAt(t time.Time) *UserCloseRecordUpdateOne {
	ucruo.mutation.SetRegisteredAt(t)
	return ucruo
}

// SetNillableRegisteredAt sets the "registered_at" field if the given value is not nil.
func (ucruo *UserCloseRecordUpdateOne) SetNillableRegisteredAt(t *time.Time) *UserCloseRecordUpdateOne {
	if t != nil {
		ucruo.SetRegisteredAt(*t)
	}
	return ucruo
}

// SetClosedAt sets the "closed_at" field.
func (ucruo *UserCloseRecordUpdateOne) SetClosedAt(t time.Time) *UserCloseRecordUpdateOne {
	ucruo.mutation.SetClosedAt(t)
	return ucruo
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (ucruo *UserCloseRecordUpdateOne) SetNillableClosedAt(t *time.Time) *UserCloseRecordUpdateOne {
	if t != nil {
		ucruo.SetClosedAt(*t)
	}
	return ucruo
}

// SetType sets the "type" field.
func (ucruo *UserCloseRecordUpdateOne) SetType(ect enums.UserCloseType) *UserCloseRecordUpdateOne {
	ucruo.mutation.SetType(ect)
	return ucruo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ucruo *UserCloseRecordUpdateOne) SetNillableType(ect *enums.UserCloseType) *UserCloseRecordUpdateOne {
	if ect != nil {
		ucruo.SetType(*ect)
	}
	return ucruo
}

// SetOperateUserID sets the "operate_user_id" field.
func (ucruo *UserCloseRecordUpdateOne) SetOperateUserID(i int64) *UserCloseRecordUpdateOne {
	ucruo.mutation.SetOperateUserID(i)
	return ucruo
}

// SetNillableOperateUserID sets the "operate_user_id" field if the given value is not nil.
func (ucruo *UserCloseRecordUpdateOne) SetNillableOperateUserID(i *int64) *UserCloseRecordUpdateOne {
	if i != nil {
		ucruo.SetOperateUserID(*i)
	}
	return ucruo
}

// SetUser sets the "user" edge to the User entity.
func (ucruo *UserCloseRecordUpdateOne) SetUser(u *User) *UserCloseRecordUpdateOne {
	return ucruo.SetUserID(u.ID)
}

// SetOperateUser sets the "operate_user" edge to the User entity.
func (ucruo *UserCloseRecordUpdateOne) SetOperateUser(u *User) *UserCloseRecordUpdateOne {
	return ucruo.SetOperateUserID(u.ID)
}

// Mutation returns the UserCloseRecordMutation object of the builder.
func (ucruo *UserCloseRecordUpdateOne) Mutation() *UserCloseRecordMutation {
	return ucruo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ucruo *UserCloseRecordUpdateOne) ClearUser() *UserCloseRecordUpdateOne {
	ucruo.mutation.ClearUser()
	return ucruo
}

// ClearOperateUser clears the "operate_user" edge to the User entity.
func (ucruo *UserCloseRecordUpdateOne) ClearOperateUser() *UserCloseRecordUpdateOne {
	ucruo.mutation.ClearOperateUser()
	return ucruo
}

// Where appends a list predicates to the UserCloseRecordUpdate builder.
func (ucruo *UserCloseRecordUpdateOne) Where(ps ...predicate.UserCloseRecord) *UserCloseRecordUpdateOne {
	ucruo.mutation.Where(ps...)
	return ucruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ucruo *UserCloseRecordUpdateOne) Select(field string, fields ...string) *UserCloseRecordUpdateOne {
	ucruo.fields = append([]string{field}, fields...)
	return ucruo
}

// Save executes the query and returns the updated UserCloseRecord entity.
func (ucruo *UserCloseRecordUpdateOne) Save(ctx context.Context) (*UserCloseRecord, error) {
	ucruo.defaults()
	return withHooks(ctx, ucruo.sqlSave, ucruo.mutation, ucruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ucruo *UserCloseRecordUpdateOne) SaveX(ctx context.Context) *UserCloseRecord {
	node, err := ucruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ucruo *UserCloseRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := ucruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucruo *UserCloseRecordUpdateOne) ExecX(ctx context.Context) {
	if err := ucruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ucruo *UserCloseRecordUpdateOne) defaults() {
	if _, ok := ucruo.mutation.UpdatedAt(); !ok {
		v := usercloserecord.UpdateDefaultUpdatedAt()
		ucruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucruo *UserCloseRecordUpdateOne) check() error {
	if v, ok := ucruo.mutation.GetType(); ok {
		if err := usercloserecord.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "UserCloseRecord.type": %w`, err)}
		}
	}
	if _, ok := ucruo.mutation.UserID(); ucruo.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "UserCloseRecord.user"`)
	}
	if _, ok := ucruo.mutation.OperateUserID(); ucruo.mutation.OperateUserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "UserCloseRecord.operate_user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ucruo *UserCloseRecordUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserCloseRecordUpdateOne {
	ucruo.modifiers = append(ucruo.modifiers, modifiers...)
	return ucruo
}

func (ucruo *UserCloseRecordUpdateOne) sqlSave(ctx context.Context) (_node *UserCloseRecord, err error) {
	if err := ucruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usercloserecord.Table, usercloserecord.Columns, sqlgraph.NewFieldSpec(usercloserecord.FieldID, field.TypeInt64))
	id, ok := ucruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "UserCloseRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ucruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usercloserecord.FieldID)
		for _, f := range fields {
			if !usercloserecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != usercloserecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ucruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucruo.mutation.CreatedBy(); ok {
		_spec.SetField(usercloserecord.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := ucruo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(usercloserecord.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := ucruo.mutation.UpdatedBy(); ok {
		_spec.SetField(usercloserecord.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := ucruo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(usercloserecord.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := ucruo.mutation.UpdatedAt(); ok {
		_spec.SetField(usercloserecord.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ucruo.mutation.DeletedAt(); ok {
		_spec.SetField(usercloserecord.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := ucruo.mutation.RegisteredAt(); ok {
		_spec.SetField(usercloserecord.FieldRegisteredAt, field.TypeTime, value)
	}
	if value, ok := ucruo.mutation.ClosedAt(); ok {
		_spec.SetField(usercloserecord.FieldClosedAt, field.TypeTime, value)
	}
	if value, ok := ucruo.mutation.GetType(); ok {
		_spec.SetField(usercloserecord.FieldType, field.TypeEnum, value)
	}
	if ucruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercloserecord.UserTable,
			Columns: []string{usercloserecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercloserecord.UserTable,
			Columns: []string{usercloserecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ucruo.mutation.OperateUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercloserecord.OperateUserTable,
			Columns: []string{usercloserecord.OperateUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucruo.mutation.OperateUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercloserecord.OperateUserTable,
			Columns: []string{usercloserecord.OperateUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ucruo.modifiers...)
	_node = &UserCloseRecord{config: ucruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ucruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usercloserecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ucruo.mutation.done = true
	return _node, nil
}
