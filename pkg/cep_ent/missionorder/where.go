// Code generated by ent, DO NOT EDIT.

package missionorder

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldLTE(FieldID, id))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldDeletedAt, v))
}

// MissionID applies equality check predicate on the "mission_id" field. It's identical to MissionIDEQ.
func MissionID(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldMissionID, v))
}

// SymbolID applies equality check predicate on the "symbol_id" field. It's identical to SymbolIDEQ.
func SymbolID(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldSymbolID, v))
}

// ConsumeUserID applies equality check predicate on the "consume_user_id" field. It's identical to ConsumeUserIDEQ.
func ConsumeUserID(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldConsumeUserID, v))
}

// ConsumeAmount applies equality check predicate on the "consume_amount" field. It's identical to ConsumeAmountEQ.
func ConsumeAmount(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldConsumeAmount, v))
}

// ProduceUserID applies equality check predicate on the "produce_user_id" field. It's identical to ProduceUserIDEQ.
func ProduceUserID(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldProduceUserID, v))
}

// ProduceAmount applies equality check predicate on the "produce_amount" field. It's identical to ProduceAmountEQ.
func ProduceAmount(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldProduceAmount, v))
}

// GasAmount applies equality check predicate on the "gas_amount" field. It's identical to GasAmountEQ.
func GasAmount(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldGasAmount, v))
}

// SerialNumber applies equality check predicate on the "serial_number" field. It's identical to SerialNumberEQ.
func SerialNumber(v string) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldSerialNumber, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldStartedAt, v))
}

// FinishedAt applies equality check predicate on the "finished_at" field. It's identical to FinishedAtEQ.
func FinishedAt(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldFinishedAt, v))
}

// PlanStartedAt applies equality check predicate on the "plan_started_at" field. It's identical to PlanStartedAtEQ.
func PlanStartedAt(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldPlanStartedAt, v))
}

// PlanFinishedAt applies equality check predicate on the "plan_finished_at" field. It's identical to PlanFinishedAtEQ.
func PlanFinishedAt(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldPlanFinishedAt, v))
}

// MissionBatchID applies equality check predicate on the "mission_batch_id" field. It's identical to MissionBatchIDEQ.
func MissionBatchID(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldMissionBatchID, v))
}

// MissionBatchNumber applies equality check predicate on the "mission_batch_number" field. It's identical to MissionBatchNumberEQ.
func MissionBatchNumber(v string) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldMissionBatchNumber, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldLTE(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldLTE(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldLTE(FieldDeletedAt, v))
}

// MissionIDEQ applies the EQ predicate on the "mission_id" field.
func MissionIDEQ(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldMissionID, v))
}

// MissionIDNEQ applies the NEQ predicate on the "mission_id" field.
func MissionIDNEQ(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNEQ(FieldMissionID, v))
}

// MissionIDIn applies the In predicate on the "mission_id" field.
func MissionIDIn(vs ...int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldIn(FieldMissionID, vs...))
}

// MissionIDNotIn applies the NotIn predicate on the "mission_id" field.
func MissionIDNotIn(vs ...int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNotIn(FieldMissionID, vs...))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v enums.MissionOrderStatus) predicate.MissionOrder {
	vc := v
	return predicate.MissionOrder(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v enums.MissionOrderStatus) predicate.MissionOrder {
	vc := v
	return predicate.MissionOrder(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...enums.MissionOrderStatus) predicate.MissionOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MissionOrder(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...enums.MissionOrderStatus) predicate.MissionOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MissionOrder(sql.FieldNotIn(FieldStatus, v...))
}

// SymbolIDEQ applies the EQ predicate on the "symbol_id" field.
func SymbolIDEQ(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldSymbolID, v))
}

// SymbolIDNEQ applies the NEQ predicate on the "symbol_id" field.
func SymbolIDNEQ(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNEQ(FieldSymbolID, v))
}

// SymbolIDIn applies the In predicate on the "symbol_id" field.
func SymbolIDIn(vs ...int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldIn(FieldSymbolID, vs...))
}

// SymbolIDNotIn applies the NotIn predicate on the "symbol_id" field.
func SymbolIDNotIn(vs ...int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNotIn(FieldSymbolID, vs...))
}

// ConsumeUserIDEQ applies the EQ predicate on the "consume_user_id" field.
func ConsumeUserIDEQ(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldConsumeUserID, v))
}

// ConsumeUserIDNEQ applies the NEQ predicate on the "consume_user_id" field.
func ConsumeUserIDNEQ(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNEQ(FieldConsumeUserID, v))
}

// ConsumeUserIDIn applies the In predicate on the "consume_user_id" field.
func ConsumeUserIDIn(vs ...int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldIn(FieldConsumeUserID, vs...))
}

// ConsumeUserIDNotIn applies the NotIn predicate on the "consume_user_id" field.
func ConsumeUserIDNotIn(vs ...int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNotIn(FieldConsumeUserID, vs...))
}

// ConsumeAmountEQ applies the EQ predicate on the "consume_amount" field.
func ConsumeAmountEQ(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldConsumeAmount, v))
}

// ConsumeAmountNEQ applies the NEQ predicate on the "consume_amount" field.
func ConsumeAmountNEQ(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNEQ(FieldConsumeAmount, v))
}

// ConsumeAmountIn applies the In predicate on the "consume_amount" field.
func ConsumeAmountIn(vs ...int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldIn(FieldConsumeAmount, vs...))
}

// ConsumeAmountNotIn applies the NotIn predicate on the "consume_amount" field.
func ConsumeAmountNotIn(vs ...int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNotIn(FieldConsumeAmount, vs...))
}

// ConsumeAmountGT applies the GT predicate on the "consume_amount" field.
func ConsumeAmountGT(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldGT(FieldConsumeAmount, v))
}

// ConsumeAmountGTE applies the GTE predicate on the "consume_amount" field.
func ConsumeAmountGTE(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldGTE(FieldConsumeAmount, v))
}

// ConsumeAmountLT applies the LT predicate on the "consume_amount" field.
func ConsumeAmountLT(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldLT(FieldConsumeAmount, v))
}

// ConsumeAmountLTE applies the LTE predicate on the "consume_amount" field.
func ConsumeAmountLTE(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldLTE(FieldConsumeAmount, v))
}

// ProduceUserIDEQ applies the EQ predicate on the "produce_user_id" field.
func ProduceUserIDEQ(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldProduceUserID, v))
}

// ProduceUserIDNEQ applies the NEQ predicate on the "produce_user_id" field.
func ProduceUserIDNEQ(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNEQ(FieldProduceUserID, v))
}

// ProduceUserIDIn applies the In predicate on the "produce_user_id" field.
func ProduceUserIDIn(vs ...int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldIn(FieldProduceUserID, vs...))
}

// ProduceUserIDNotIn applies the NotIn predicate on the "produce_user_id" field.
func ProduceUserIDNotIn(vs ...int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNotIn(FieldProduceUserID, vs...))
}

// ProduceAmountEQ applies the EQ predicate on the "produce_amount" field.
func ProduceAmountEQ(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldProduceAmount, v))
}

// ProduceAmountNEQ applies the NEQ predicate on the "produce_amount" field.
func ProduceAmountNEQ(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNEQ(FieldProduceAmount, v))
}

// ProduceAmountIn applies the In predicate on the "produce_amount" field.
func ProduceAmountIn(vs ...int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldIn(FieldProduceAmount, vs...))
}

// ProduceAmountNotIn applies the NotIn predicate on the "produce_amount" field.
func ProduceAmountNotIn(vs ...int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNotIn(FieldProduceAmount, vs...))
}

// ProduceAmountGT applies the GT predicate on the "produce_amount" field.
func ProduceAmountGT(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldGT(FieldProduceAmount, v))
}

// ProduceAmountGTE applies the GTE predicate on the "produce_amount" field.
func ProduceAmountGTE(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldGTE(FieldProduceAmount, v))
}

// ProduceAmountLT applies the LT predicate on the "produce_amount" field.
func ProduceAmountLT(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldLT(FieldProduceAmount, v))
}

// ProduceAmountLTE applies the LTE predicate on the "produce_amount" field.
func ProduceAmountLTE(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldLTE(FieldProduceAmount, v))
}

// GasAmountEQ applies the EQ predicate on the "gas_amount" field.
func GasAmountEQ(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldGasAmount, v))
}

// GasAmountNEQ applies the NEQ predicate on the "gas_amount" field.
func GasAmountNEQ(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNEQ(FieldGasAmount, v))
}

// GasAmountIn applies the In predicate on the "gas_amount" field.
func GasAmountIn(vs ...int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldIn(FieldGasAmount, vs...))
}

// GasAmountNotIn applies the NotIn predicate on the "gas_amount" field.
func GasAmountNotIn(vs ...int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNotIn(FieldGasAmount, vs...))
}

// GasAmountGT applies the GT predicate on the "gas_amount" field.
func GasAmountGT(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldGT(FieldGasAmount, v))
}

// GasAmountGTE applies the GTE predicate on the "gas_amount" field.
func GasAmountGTE(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldGTE(FieldGasAmount, v))
}

// GasAmountLT applies the LT predicate on the "gas_amount" field.
func GasAmountLT(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldLT(FieldGasAmount, v))
}

// GasAmountLTE applies the LTE predicate on the "gas_amount" field.
func GasAmountLTE(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldLTE(FieldGasAmount, v))
}

// MissionTypeEQ applies the EQ predicate on the "mission_type" field.
func MissionTypeEQ(v enums.MissionType) predicate.MissionOrder {
	vc := v
	return predicate.MissionOrder(sql.FieldEQ(FieldMissionType, vc))
}

// MissionTypeNEQ applies the NEQ predicate on the "mission_type" field.
func MissionTypeNEQ(v enums.MissionType) predicate.MissionOrder {
	vc := v
	return predicate.MissionOrder(sql.FieldNEQ(FieldMissionType, vc))
}

// MissionTypeIn applies the In predicate on the "mission_type" field.
func MissionTypeIn(vs ...enums.MissionType) predicate.MissionOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MissionOrder(sql.FieldIn(FieldMissionType, v...))
}

// MissionTypeNotIn applies the NotIn predicate on the "mission_type" field.
func MissionTypeNotIn(vs ...enums.MissionType) predicate.MissionOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MissionOrder(sql.FieldNotIn(FieldMissionType, v...))
}

// MissionBillingTypeEQ applies the EQ predicate on the "mission_billing_type" field.
func MissionBillingTypeEQ(v enums.MissionBillingType) predicate.MissionOrder {
	vc := v
	return predicate.MissionOrder(sql.FieldEQ(FieldMissionBillingType, vc))
}

// MissionBillingTypeNEQ applies the NEQ predicate on the "mission_billing_type" field.
func MissionBillingTypeNEQ(v enums.MissionBillingType) predicate.MissionOrder {
	vc := v
	return predicate.MissionOrder(sql.FieldNEQ(FieldMissionBillingType, vc))
}

// MissionBillingTypeIn applies the In predicate on the "mission_billing_type" field.
func MissionBillingTypeIn(vs ...enums.MissionBillingType) predicate.MissionOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MissionOrder(sql.FieldIn(FieldMissionBillingType, v...))
}

// MissionBillingTypeNotIn applies the NotIn predicate on the "mission_billing_type" field.
func MissionBillingTypeNotIn(vs ...enums.MissionBillingType) predicate.MissionOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MissionOrder(sql.FieldNotIn(FieldMissionBillingType, v...))
}

// CallWayEQ applies the EQ predicate on the "call_way" field.
func CallWayEQ(v enums.MissionCallWay) predicate.MissionOrder {
	vc := v
	return predicate.MissionOrder(sql.FieldEQ(FieldCallWay, vc))
}

// CallWayNEQ applies the NEQ predicate on the "call_way" field.
func CallWayNEQ(v enums.MissionCallWay) predicate.MissionOrder {
	vc := v
	return predicate.MissionOrder(sql.FieldNEQ(FieldCallWay, vc))
}

// CallWayIn applies the In predicate on the "call_way" field.
func CallWayIn(vs ...enums.MissionCallWay) predicate.MissionOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MissionOrder(sql.FieldIn(FieldCallWay, v...))
}

// CallWayNotIn applies the NotIn predicate on the "call_way" field.
func CallWayNotIn(vs ...enums.MissionCallWay) predicate.MissionOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MissionOrder(sql.FieldNotIn(FieldCallWay, v...))
}

// SerialNumberEQ applies the EQ predicate on the "serial_number" field.
func SerialNumberEQ(v string) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldSerialNumber, v))
}

// SerialNumberNEQ applies the NEQ predicate on the "serial_number" field.
func SerialNumberNEQ(v string) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNEQ(FieldSerialNumber, v))
}

// SerialNumberIn applies the In predicate on the "serial_number" field.
func SerialNumberIn(vs ...string) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldIn(FieldSerialNumber, vs...))
}

// SerialNumberNotIn applies the NotIn predicate on the "serial_number" field.
func SerialNumberNotIn(vs ...string) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNotIn(FieldSerialNumber, vs...))
}

// SerialNumberGT applies the GT predicate on the "serial_number" field.
func SerialNumberGT(v string) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldGT(FieldSerialNumber, v))
}

// SerialNumberGTE applies the GTE predicate on the "serial_number" field.
func SerialNumberGTE(v string) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldGTE(FieldSerialNumber, v))
}

// SerialNumberLT applies the LT predicate on the "serial_number" field.
func SerialNumberLT(v string) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldLT(FieldSerialNumber, v))
}

// SerialNumberLTE applies the LTE predicate on the "serial_number" field.
func SerialNumberLTE(v string) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldLTE(FieldSerialNumber, v))
}

// SerialNumberContains applies the Contains predicate on the "serial_number" field.
func SerialNumberContains(v string) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldContains(FieldSerialNumber, v))
}

// SerialNumberHasPrefix applies the HasPrefix predicate on the "serial_number" field.
func SerialNumberHasPrefix(v string) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldHasPrefix(FieldSerialNumber, v))
}

// SerialNumberHasSuffix applies the HasSuffix predicate on the "serial_number" field.
func SerialNumberHasSuffix(v string) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldHasSuffix(FieldSerialNumber, v))
}

// SerialNumberEqualFold applies the EqualFold predicate on the "serial_number" field.
func SerialNumberEqualFold(v string) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEqualFold(FieldSerialNumber, v))
}

// SerialNumberContainsFold applies the ContainsFold predicate on the "serial_number" field.
func SerialNumberContainsFold(v string) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldContainsFold(FieldSerialNumber, v))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldLTE(FieldStartedAt, v))
}

// FinishedAtEQ applies the EQ predicate on the "finished_at" field.
func FinishedAtEQ(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldFinishedAt, v))
}

// FinishedAtNEQ applies the NEQ predicate on the "finished_at" field.
func FinishedAtNEQ(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNEQ(FieldFinishedAt, v))
}

// FinishedAtIn applies the In predicate on the "finished_at" field.
func FinishedAtIn(vs ...time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldIn(FieldFinishedAt, vs...))
}

// FinishedAtNotIn applies the NotIn predicate on the "finished_at" field.
func FinishedAtNotIn(vs ...time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNotIn(FieldFinishedAt, vs...))
}

// FinishedAtGT applies the GT predicate on the "finished_at" field.
func FinishedAtGT(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldGT(FieldFinishedAt, v))
}

// FinishedAtGTE applies the GTE predicate on the "finished_at" field.
func FinishedAtGTE(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldGTE(FieldFinishedAt, v))
}

// FinishedAtLT applies the LT predicate on the "finished_at" field.
func FinishedAtLT(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldLT(FieldFinishedAt, v))
}

// FinishedAtLTE applies the LTE predicate on the "finished_at" field.
func FinishedAtLTE(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldLTE(FieldFinishedAt, v))
}

// PlanStartedAtEQ applies the EQ predicate on the "plan_started_at" field.
func PlanStartedAtEQ(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldPlanStartedAt, v))
}

// PlanStartedAtNEQ applies the NEQ predicate on the "plan_started_at" field.
func PlanStartedAtNEQ(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNEQ(FieldPlanStartedAt, v))
}

// PlanStartedAtIn applies the In predicate on the "plan_started_at" field.
func PlanStartedAtIn(vs ...time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldIn(FieldPlanStartedAt, vs...))
}

// PlanStartedAtNotIn applies the NotIn predicate on the "plan_started_at" field.
func PlanStartedAtNotIn(vs ...time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNotIn(FieldPlanStartedAt, vs...))
}

// PlanStartedAtGT applies the GT predicate on the "plan_started_at" field.
func PlanStartedAtGT(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldGT(FieldPlanStartedAt, v))
}

// PlanStartedAtGTE applies the GTE predicate on the "plan_started_at" field.
func PlanStartedAtGTE(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldGTE(FieldPlanStartedAt, v))
}

// PlanStartedAtLT applies the LT predicate on the "plan_started_at" field.
func PlanStartedAtLT(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldLT(FieldPlanStartedAt, v))
}

// PlanStartedAtLTE applies the LTE predicate on the "plan_started_at" field.
func PlanStartedAtLTE(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldLTE(FieldPlanStartedAt, v))
}

// PlanStartedAtIsNil applies the IsNil predicate on the "plan_started_at" field.
func PlanStartedAtIsNil() predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldIsNull(FieldPlanStartedAt))
}

// PlanStartedAtNotNil applies the NotNil predicate on the "plan_started_at" field.
func PlanStartedAtNotNil() predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNotNull(FieldPlanStartedAt))
}

// PlanFinishedAtEQ applies the EQ predicate on the "plan_finished_at" field.
func PlanFinishedAtEQ(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldPlanFinishedAt, v))
}

// PlanFinishedAtNEQ applies the NEQ predicate on the "plan_finished_at" field.
func PlanFinishedAtNEQ(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNEQ(FieldPlanFinishedAt, v))
}

// PlanFinishedAtIn applies the In predicate on the "plan_finished_at" field.
func PlanFinishedAtIn(vs ...time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldIn(FieldPlanFinishedAt, vs...))
}

// PlanFinishedAtNotIn applies the NotIn predicate on the "plan_finished_at" field.
func PlanFinishedAtNotIn(vs ...time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNotIn(FieldPlanFinishedAt, vs...))
}

// PlanFinishedAtGT applies the GT predicate on the "plan_finished_at" field.
func PlanFinishedAtGT(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldGT(FieldPlanFinishedAt, v))
}

// PlanFinishedAtGTE applies the GTE predicate on the "plan_finished_at" field.
func PlanFinishedAtGTE(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldGTE(FieldPlanFinishedAt, v))
}

// PlanFinishedAtLT applies the LT predicate on the "plan_finished_at" field.
func PlanFinishedAtLT(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldLT(FieldPlanFinishedAt, v))
}

// PlanFinishedAtLTE applies the LTE predicate on the "plan_finished_at" field.
func PlanFinishedAtLTE(v time.Time) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldLTE(FieldPlanFinishedAt, v))
}

// PlanFinishedAtIsNil applies the IsNil predicate on the "plan_finished_at" field.
func PlanFinishedAtIsNil() predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldIsNull(FieldPlanFinishedAt))
}

// PlanFinishedAtNotNil applies the NotNil predicate on the "plan_finished_at" field.
func PlanFinishedAtNotNil() predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNotNull(FieldPlanFinishedAt))
}

// MissionBatchIDEQ applies the EQ predicate on the "mission_batch_id" field.
func MissionBatchIDEQ(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldMissionBatchID, v))
}

// MissionBatchIDNEQ applies the NEQ predicate on the "mission_batch_id" field.
func MissionBatchIDNEQ(v int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNEQ(FieldMissionBatchID, v))
}

// MissionBatchIDIn applies the In predicate on the "mission_batch_id" field.
func MissionBatchIDIn(vs ...int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldIn(FieldMissionBatchID, vs...))
}

// MissionBatchIDNotIn applies the NotIn predicate on the "mission_batch_id" field.
func MissionBatchIDNotIn(vs ...int64) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNotIn(FieldMissionBatchID, vs...))
}

// MissionBatchNumberEQ applies the EQ predicate on the "mission_batch_number" field.
func MissionBatchNumberEQ(v string) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEQ(FieldMissionBatchNumber, v))
}

// MissionBatchNumberNEQ applies the NEQ predicate on the "mission_batch_number" field.
func MissionBatchNumberNEQ(v string) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNEQ(FieldMissionBatchNumber, v))
}

// MissionBatchNumberIn applies the In predicate on the "mission_batch_number" field.
func MissionBatchNumberIn(vs ...string) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldIn(FieldMissionBatchNumber, vs...))
}

// MissionBatchNumberNotIn applies the NotIn predicate on the "mission_batch_number" field.
func MissionBatchNumberNotIn(vs ...string) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldNotIn(FieldMissionBatchNumber, vs...))
}

// MissionBatchNumberGT applies the GT predicate on the "mission_batch_number" field.
func MissionBatchNumberGT(v string) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldGT(FieldMissionBatchNumber, v))
}

// MissionBatchNumberGTE applies the GTE predicate on the "mission_batch_number" field.
func MissionBatchNumberGTE(v string) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldGTE(FieldMissionBatchNumber, v))
}

// MissionBatchNumberLT applies the LT predicate on the "mission_batch_number" field.
func MissionBatchNumberLT(v string) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldLT(FieldMissionBatchNumber, v))
}

// MissionBatchNumberLTE applies the LTE predicate on the "mission_batch_number" field.
func MissionBatchNumberLTE(v string) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldLTE(FieldMissionBatchNumber, v))
}

// MissionBatchNumberContains applies the Contains predicate on the "mission_batch_number" field.
func MissionBatchNumberContains(v string) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldContains(FieldMissionBatchNumber, v))
}

// MissionBatchNumberHasPrefix applies the HasPrefix predicate on the "mission_batch_number" field.
func MissionBatchNumberHasPrefix(v string) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldHasPrefix(FieldMissionBatchNumber, v))
}

// MissionBatchNumberHasSuffix applies the HasSuffix predicate on the "mission_batch_number" field.
func MissionBatchNumberHasSuffix(v string) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldHasSuffix(FieldMissionBatchNumber, v))
}

// MissionBatchNumberEqualFold applies the EqualFold predicate on the "mission_batch_number" field.
func MissionBatchNumberEqualFold(v string) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldEqualFold(FieldMissionBatchNumber, v))
}

// MissionBatchNumberContainsFold applies the ContainsFold predicate on the "mission_batch_number" field.
func MissionBatchNumberContainsFold(v string) predicate.MissionOrder {
	return predicate.MissionOrder(sql.FieldContainsFold(FieldMissionBatchNumber, v))
}

// HasConsumeUser applies the HasEdge predicate on the "consume_user" edge.
func HasConsumeUser() predicate.MissionOrder {
	return predicate.MissionOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ConsumeUserTable, ConsumeUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConsumeUserWith applies the HasEdge predicate on the "consume_user" edge with a given conditions (other predicates).
func HasConsumeUserWith(preds ...predicate.User) predicate.MissionOrder {
	return predicate.MissionOrder(func(s *sql.Selector) {
		step := newConsumeUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProduceUser applies the HasEdge predicate on the "produce_user" edge.
func HasProduceUser() predicate.MissionOrder {
	return predicate.MissionOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProduceUserTable, ProduceUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProduceUserWith applies the HasEdge predicate on the "produce_user" edge with a given conditions (other predicates).
func HasProduceUserWith(preds ...predicate.User) predicate.MissionOrder {
	return predicate.MissionOrder(func(s *sql.Selector) {
		step := newProduceUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSymbol applies the HasEdge predicate on the "symbol" edge.
func HasSymbol() predicate.MissionOrder {
	return predicate.MissionOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SymbolTable, SymbolColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSymbolWith applies the HasEdge predicate on the "symbol" edge with a given conditions (other predicates).
func HasSymbolWith(preds ...predicate.Symbol) predicate.MissionOrder {
	return predicate.MissionOrder(func(s *sql.Selector) {
		step := newSymbolStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBills applies the HasEdge predicate on the "bills" edge.
func HasBills() predicate.MissionOrder {
	return predicate.MissionOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BillsTable, BillsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBillsWith applies the HasEdge predicate on the "bills" edge with a given conditions (other predicates).
func HasBillsWith(preds ...predicate.Bill) predicate.MissionOrder {
	return predicate.MissionOrder(func(s *sql.Selector) {
		step := newBillsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMissionBatch applies the HasEdge predicate on the "mission_batch" edge.
func HasMissionBatch() predicate.MissionOrder {
	return predicate.MissionOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MissionBatchTable, MissionBatchColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMissionBatchWith applies the HasEdge predicate on the "mission_batch" edge with a given conditions (other predicates).
func HasMissionBatchWith(preds ...predicate.MissionBatch) predicate.MissionOrder {
	return predicate.MissionOrder(func(s *sql.Selector) {
		step := newMissionBatchStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMission applies the HasEdge predicate on the "mission" edge.
func HasMission() predicate.MissionOrder {
	return predicate.MissionOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MissionTable, MissionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMissionWith applies the HasEdge predicate on the "mission" edge with a given conditions (other predicates).
func HasMissionWith(preds ...predicate.Mission) predicate.MissionOrder {
	return predicate.MissionOrder(func(s *sql.Selector) {
		step := newMissionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MissionOrder) predicate.MissionOrder {
	return predicate.MissionOrder(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MissionOrder) predicate.MissionOrder {
	return predicate.MissionOrder(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MissionOrder) predicate.MissionOrder {
	return predicate.MissionOrder(sql.NotPredicates(p))
}
