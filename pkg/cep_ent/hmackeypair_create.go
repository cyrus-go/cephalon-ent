// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/hmackeypair"
	"cephalon-ent/pkg/cep_ent/mission"
	"cephalon-ent/pkg/cep_ent/missionproduction"
	"cephalon-ent/pkg/cep_ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HmacKeyPairCreate is the builder for creating a HmacKeyPair entity.
type HmacKeyPairCreate struct {
	config
	mutation *HmacKeyPairMutation
	hooks    []Hook
}

// SetCreatedBy sets the "created_by" field.
func (hkpc *HmacKeyPairCreate) SetCreatedBy(i int64) *HmacKeyPairCreate {
	hkpc.mutation.SetCreatedBy(i)
	return hkpc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (hkpc *HmacKeyPairCreate) SetNillableCreatedBy(i *int64) *HmacKeyPairCreate {
	if i != nil {
		hkpc.SetCreatedBy(*i)
	}
	return hkpc
}

// SetUpdatedBy sets the "updated_by" field.
func (hkpc *HmacKeyPairCreate) SetUpdatedBy(i int64) *HmacKeyPairCreate {
	hkpc.mutation.SetUpdatedBy(i)
	return hkpc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (hkpc *HmacKeyPairCreate) SetNillableUpdatedBy(i *int64) *HmacKeyPairCreate {
	if i != nil {
		hkpc.SetUpdatedBy(*i)
	}
	return hkpc
}

// SetCreatedAt sets the "created_at" field.
func (hkpc *HmacKeyPairCreate) SetCreatedAt(t time.Time) *HmacKeyPairCreate {
	hkpc.mutation.SetCreatedAt(t)
	return hkpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hkpc *HmacKeyPairCreate) SetNillableCreatedAt(t *time.Time) *HmacKeyPairCreate {
	if t != nil {
		hkpc.SetCreatedAt(*t)
	}
	return hkpc
}

// SetUpdatedAt sets the "updated_at" field.
func (hkpc *HmacKeyPairCreate) SetUpdatedAt(t time.Time) *HmacKeyPairCreate {
	hkpc.mutation.SetUpdatedAt(t)
	return hkpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hkpc *HmacKeyPairCreate) SetNillableUpdatedAt(t *time.Time) *HmacKeyPairCreate {
	if t != nil {
		hkpc.SetUpdatedAt(*t)
	}
	return hkpc
}

// SetDeletedAt sets the "deleted_at" field.
func (hkpc *HmacKeyPairCreate) SetDeletedAt(t time.Time) *HmacKeyPairCreate {
	hkpc.mutation.SetDeletedAt(t)
	return hkpc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (hkpc *HmacKeyPairCreate) SetNillableDeletedAt(t *time.Time) *HmacKeyPairCreate {
	if t != nil {
		hkpc.SetDeletedAt(*t)
	}
	return hkpc
}

// SetKey sets the "key" field.
func (hkpc *HmacKeyPairCreate) SetKey(s string) *HmacKeyPairCreate {
	hkpc.mutation.SetKey(s)
	return hkpc
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (hkpc *HmacKeyPairCreate) SetNillableKey(s *string) *HmacKeyPairCreate {
	if s != nil {
		hkpc.SetKey(*s)
	}
	return hkpc
}

// SetSecret sets the "secret" field.
func (hkpc *HmacKeyPairCreate) SetSecret(s string) *HmacKeyPairCreate {
	hkpc.mutation.SetSecret(s)
	return hkpc
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (hkpc *HmacKeyPairCreate) SetNillableSecret(s *string) *HmacKeyPairCreate {
	if s != nil {
		hkpc.SetSecret(*s)
	}
	return hkpc
}

// SetCaller sets the "caller" field.
func (hkpc *HmacKeyPairCreate) SetCaller(s string) *HmacKeyPairCreate {
	hkpc.mutation.SetCaller(s)
	return hkpc
}

// SetNillableCaller sets the "caller" field if the given value is not nil.
func (hkpc *HmacKeyPairCreate) SetNillableCaller(s *string) *HmacKeyPairCreate {
	if s != nil {
		hkpc.SetCaller(*s)
	}
	return hkpc
}

// SetUserID sets the "user_id" field.
func (hkpc *HmacKeyPairCreate) SetUserID(i int64) *HmacKeyPairCreate {
	hkpc.mutation.SetUserID(i)
	return hkpc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (hkpc *HmacKeyPairCreate) SetNillableUserID(i *int64) *HmacKeyPairCreate {
	if i != nil {
		hkpc.SetUserID(*i)
	}
	return hkpc
}

// SetID sets the "id" field.
func (hkpc *HmacKeyPairCreate) SetID(i int64) *HmacKeyPairCreate {
	hkpc.mutation.SetID(i)
	return hkpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (hkpc *HmacKeyPairCreate) SetNillableID(i *int64) *HmacKeyPairCreate {
	if i != nil {
		hkpc.SetID(*i)
	}
	return hkpc
}

// AddMissionProductionIDs adds the "mission_productions" edge to the MissionProduction entity by IDs.
func (hkpc *HmacKeyPairCreate) AddMissionProductionIDs(ids ...int64) *HmacKeyPairCreate {
	hkpc.mutation.AddMissionProductionIDs(ids...)
	return hkpc
}

// AddMissionProductions adds the "mission_productions" edges to the MissionProduction entity.
func (hkpc *HmacKeyPairCreate) AddMissionProductions(m ...*MissionProduction) *HmacKeyPairCreate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return hkpc.AddMissionProductionIDs(ids...)
}

// AddCreatedMissionIDs adds the "created_missions" edge to the Mission entity by IDs.
func (hkpc *HmacKeyPairCreate) AddCreatedMissionIDs(ids ...int64) *HmacKeyPairCreate {
	hkpc.mutation.AddCreatedMissionIDs(ids...)
	return hkpc
}

// AddCreatedMissions adds the "created_missions" edges to the Mission entity.
func (hkpc *HmacKeyPairCreate) AddCreatedMissions(m ...*Mission) *HmacKeyPairCreate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return hkpc.AddCreatedMissionIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (hkpc *HmacKeyPairCreate) SetUserID(id int64) *HmacKeyPairCreate {
	hkpc.mutation.SetUserID(id)
	return hkpc
}

// SetUser sets the "user" edge to the User entity.
func (hkpc *HmacKeyPairCreate) SetUser(u *User) *HmacKeyPairCreate {
	return hkpc.SetUserID(u.ID)
}

// Mutation returns the HmacKeyPairMutation object of the builder.
func (hkpc *HmacKeyPairCreate) Mutation() *HmacKeyPairMutation {
	return hkpc.mutation
}

// Save creates the HmacKeyPair in the database.
func (hkpc *HmacKeyPairCreate) Save(ctx context.Context) (*HmacKeyPair, error) {
	hkpc.defaults()
	return withHooks(ctx, hkpc.sqlSave, hkpc.mutation, hkpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hkpc *HmacKeyPairCreate) SaveX(ctx context.Context) *HmacKeyPair {
	v, err := hkpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hkpc *HmacKeyPairCreate) Exec(ctx context.Context) error {
	_, err := hkpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hkpc *HmacKeyPairCreate) ExecX(ctx context.Context) {
	if err := hkpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hkpc *HmacKeyPairCreate) defaults() {
	if _, ok := hkpc.mutation.CreatedBy(); !ok {
		v := hmackeypair.DefaultCreatedBy
		hkpc.mutation.SetCreatedBy(v)
	}
	if _, ok := hkpc.mutation.UpdatedBy(); !ok {
		v := hmackeypair.DefaultUpdatedBy
		hkpc.mutation.SetUpdatedBy(v)
	}
	if _, ok := hkpc.mutation.CreatedAt(); !ok {
		v := hmackeypair.DefaultCreatedAt()
		hkpc.mutation.SetCreatedAt(v)
	}
	if _, ok := hkpc.mutation.UpdatedAt(); !ok {
		v := hmackeypair.DefaultUpdatedAt()
		hkpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := hkpc.mutation.DeletedAt(); !ok {
		v := hmackeypair.DefaultDeletedAt
		hkpc.mutation.SetDeletedAt(v)
	}
	if _, ok := hkpc.mutation.Key(); !ok {
		v := hmackeypair.DefaultKey
		hkpc.mutation.SetKey(v)
	}
	if _, ok := hkpc.mutation.Secret(); !ok {
		v := hmackeypair.DefaultSecret
		hkpc.mutation.SetSecret(v)
	}
	if _, ok := hkpc.mutation.Caller(); !ok {
		v := hmackeypair.DefaultCaller
		hkpc.mutation.SetCaller(v)
	}
	if _, ok := hkpc.mutation.UserID(); !ok {
		v := hmackeypair.DefaultUserID
		hkpc.mutation.SetUserID(v)
	}
	if _, ok := hkpc.mutation.ID(); !ok {
		v := hmackeypair.DefaultID()
		hkpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hkpc *HmacKeyPairCreate) check() error {
	if _, ok := hkpc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "HmacKeyPair.created_by"`)}
	}
	if _, ok := hkpc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "HmacKeyPair.updated_by"`)}
	}
	if _, ok := hkpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "HmacKeyPair.created_at"`)}
	}
	if _, ok := hkpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "HmacKeyPair.updated_at"`)}
	}
	if _, ok := hkpc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "HmacKeyPair.deleted_at"`)}
	}
	if _, ok := hkpc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`cep_ent: missing required field "HmacKeyPair.key"`)}
	}
	if _, ok := hkpc.mutation.Secret(); !ok {
		return &ValidationError{Name: "secret", err: errors.New(`cep_ent: missing required field "HmacKeyPair.secret"`)}
	}
	if _, ok := hkpc.mutation.Caller(); !ok {
		return &ValidationError{Name: "caller", err: errors.New(`cep_ent: missing required field "HmacKeyPair.caller"`)}
	}
	if _, ok := hkpc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "HmacKeyPair.user_id"`)}
	}
	if _, ok := hkpc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "HmacKeyPair.user"`)}
	}
	return nil
}

func (hkpc *HmacKeyPairCreate) sqlSave(ctx context.Context) (*HmacKeyPair, error) {
	if err := hkpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hkpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hkpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	hkpc.mutation.id = &_node.ID
	hkpc.mutation.done = true
	return _node, nil
}

func (hkpc *HmacKeyPairCreate) createSpec() (*HmacKeyPair, *sqlgraph.CreateSpec) {
	var (
		_node = &HmacKeyPair{config: hkpc.config}
		_spec = sqlgraph.NewCreateSpec(hmackeypair.Table, sqlgraph.NewFieldSpec(hmackeypair.FieldID, field.TypeInt64))
	)
	if id, ok := hkpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := hkpc.mutation.CreatedBy(); ok {
		_spec.SetField(hmackeypair.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := hkpc.mutation.UpdatedBy(); ok {
		_spec.SetField(hmackeypair.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := hkpc.mutation.CreatedAt(); ok {
		_spec.SetField(hmackeypair.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := hkpc.mutation.UpdatedAt(); ok {
		_spec.SetField(hmackeypair.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := hkpc.mutation.DeletedAt(); ok {
		_spec.SetField(hmackeypair.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := hkpc.mutation.Key(); ok {
		_spec.SetField(hmackeypair.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := hkpc.mutation.Secret(); ok {
		_spec.SetField(hmackeypair.FieldSecret, field.TypeString, value)
		_node.Secret = value
	}
	if value, ok := hkpc.mutation.Caller(); ok {
		_spec.SetField(hmackeypair.FieldCaller, field.TypeString, value)
		_node.Caller = value
	}
	if value, ok := hkpc.mutation.UserID(); ok {
		_spec.SetField(hmackeypair.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if nodes := hkpc.mutation.MissionProductionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hmackeypair.MissionProductionsTable,
			Columns: []string{hmackeypair.MissionProductionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduction.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hkpc.mutation.CreatedMissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hmackeypair.CreatedMissionsTable,
			Columns: []string{hmackeypair.CreatedMissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hkpc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   hmackeypair.UserTable,
			Columns: []string{hmackeypair.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_hmac_key_pair = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HmacKeyPairCreateBulk is the builder for creating many HmacKeyPair entities in bulk.
type HmacKeyPairCreateBulk struct {
	config
	builders []*HmacKeyPairCreate
}

// Save creates the HmacKeyPair entities in the database.
func (hkpcb *HmacKeyPairCreateBulk) Save(ctx context.Context) ([]*HmacKeyPair, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hkpcb.builders))
	nodes := make([]*HmacKeyPair, len(hkpcb.builders))
	mutators := make([]Mutator, len(hkpcb.builders))
	for i := range hkpcb.builders {
		func(i int, root context.Context) {
			builder := hkpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HmacKeyPairMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hkpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hkpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hkpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hkpcb *HmacKeyPairCreateBulk) SaveX(ctx context.Context) []*HmacKeyPair {
	v, err := hkpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hkpcb *HmacKeyPairCreateBulk) Exec(ctx context.Context) error {
	_, err := hkpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hkpcb *HmacKeyPairCreateBulk) ExecX(ctx context.Context) {
	if err := hkpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
