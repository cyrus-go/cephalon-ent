// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/hmackeypair"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/mission"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionkeypair"
)

// HmacKeyPairCreate is the builder for creating a HmacKeyPair entity.
type HmacKeyPairCreate struct {
	config
	mutation *HmacKeyPairMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (hkpc *HmacKeyPairCreate) SetCreatedBy(i int64) *HmacKeyPairCreate {
	hkpc.mutation.SetCreatedBy(i)
	return hkpc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (hkpc *HmacKeyPairCreate) SetNillableCreatedBy(i *int64) *HmacKeyPairCreate {
	if i != nil {
		hkpc.SetCreatedBy(*i)
	}
	return hkpc
}

// SetUpdatedBy sets the "updated_by" field.
func (hkpc *HmacKeyPairCreate) SetUpdatedBy(i int64) *HmacKeyPairCreate {
	hkpc.mutation.SetUpdatedBy(i)
	return hkpc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (hkpc *HmacKeyPairCreate) SetNillableUpdatedBy(i *int64) *HmacKeyPairCreate {
	if i != nil {
		hkpc.SetUpdatedBy(*i)
	}
	return hkpc
}

// SetCreatedAt sets the "created_at" field.
func (hkpc *HmacKeyPairCreate) SetCreatedAt(t time.Time) *HmacKeyPairCreate {
	hkpc.mutation.SetCreatedAt(t)
	return hkpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hkpc *HmacKeyPairCreate) SetNillableCreatedAt(t *time.Time) *HmacKeyPairCreate {
	if t != nil {
		hkpc.SetCreatedAt(*t)
	}
	return hkpc
}

// SetUpdatedAt sets the "updated_at" field.
func (hkpc *HmacKeyPairCreate) SetUpdatedAt(t time.Time) *HmacKeyPairCreate {
	hkpc.mutation.SetUpdatedAt(t)
	return hkpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hkpc *HmacKeyPairCreate) SetNillableUpdatedAt(t *time.Time) *HmacKeyPairCreate {
	if t != nil {
		hkpc.SetUpdatedAt(*t)
	}
	return hkpc
}

// SetDeletedAt sets the "deleted_at" field.
func (hkpc *HmacKeyPairCreate) SetDeletedAt(t time.Time) *HmacKeyPairCreate {
	hkpc.mutation.SetDeletedAt(t)
	return hkpc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (hkpc *HmacKeyPairCreate) SetNillableDeletedAt(t *time.Time) *HmacKeyPairCreate {
	if t != nil {
		hkpc.SetDeletedAt(*t)
	}
	return hkpc
}

// SetKey sets the "key" field.
func (hkpc *HmacKeyPairCreate) SetKey(s string) *HmacKeyPairCreate {
	hkpc.mutation.SetKey(s)
	return hkpc
}

// SetSecret sets the "secret" field.
func (hkpc *HmacKeyPairCreate) SetSecret(s string) *HmacKeyPairCreate {
	hkpc.mutation.SetSecret(s)
	return hkpc
}

// SetCaller sets the "caller" field.
func (hkpc *HmacKeyPairCreate) SetCaller(s string) *HmacKeyPairCreate {
	hkpc.mutation.SetCaller(s)
	return hkpc
}

// SetNillableCaller sets the "caller" field if the given value is not nil.
func (hkpc *HmacKeyPairCreate) SetNillableCaller(s *string) *HmacKeyPairCreate {
	if s != nil {
		hkpc.SetCaller(*s)
	}
	return hkpc
}

// SetID sets the "id" field.
func (hkpc *HmacKeyPairCreate) SetID(i int64) *HmacKeyPairCreate {
	hkpc.mutation.SetID(i)
	return hkpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (hkpc *HmacKeyPairCreate) SetNillableID(i *int64) *HmacKeyPairCreate {
	if i != nil {
		hkpc.SetID(*i)
	}
	return hkpc
}

// AddMissionKeyPairIDs adds the "mission_key_pairs" edge to the MissionKeyPair entity by IDs.
func (hkpc *HmacKeyPairCreate) AddMissionKeyPairIDs(ids ...int64) *HmacKeyPairCreate {
	hkpc.mutation.AddMissionKeyPairIDs(ids...)
	return hkpc
}

// AddMissionKeyPairs adds the "mission_key_pairs" edges to the MissionKeyPair entity.
func (hkpc *HmacKeyPairCreate) AddMissionKeyPairs(m ...*MissionKeyPair) *HmacKeyPairCreate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return hkpc.AddMissionKeyPairIDs(ids...)
}

// AddCreatedMissionIDs adds the "created_missions" edge to the Mission entity by IDs.
func (hkpc *HmacKeyPairCreate) AddCreatedMissionIDs(ids ...int64) *HmacKeyPairCreate {
	hkpc.mutation.AddCreatedMissionIDs(ids...)
	return hkpc
}

// AddCreatedMissions adds the "created_missions" edges to the Mission entity.
func (hkpc *HmacKeyPairCreate) AddCreatedMissions(m ...*Mission) *HmacKeyPairCreate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return hkpc.AddCreatedMissionIDs(ids...)
}

// Mutation returns the HmacKeyPairMutation object of the builder.
func (hkpc *HmacKeyPairCreate) Mutation() *HmacKeyPairMutation {
	return hkpc.mutation
}

// Save creates the HmacKeyPair in the database.
func (hkpc *HmacKeyPairCreate) Save(ctx context.Context) (*HmacKeyPair, error) {
	hkpc.defaults()
	return withHooks(ctx, hkpc.sqlSave, hkpc.mutation, hkpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hkpc *HmacKeyPairCreate) SaveX(ctx context.Context) *HmacKeyPair {
	v, err := hkpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hkpc *HmacKeyPairCreate) Exec(ctx context.Context) error {
	_, err := hkpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hkpc *HmacKeyPairCreate) ExecX(ctx context.Context) {
	if err := hkpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hkpc *HmacKeyPairCreate) defaults() {
	if _, ok := hkpc.mutation.CreatedBy(); !ok {
		v := hmackeypair.DefaultCreatedBy
		hkpc.mutation.SetCreatedBy(v)
	}
	if _, ok := hkpc.mutation.UpdatedBy(); !ok {
		v := hmackeypair.DefaultUpdatedBy
		hkpc.mutation.SetUpdatedBy(v)
	}
	if _, ok := hkpc.mutation.CreatedAt(); !ok {
		v := hmackeypair.DefaultCreatedAt()
		hkpc.mutation.SetCreatedAt(v)
	}
	if _, ok := hkpc.mutation.UpdatedAt(); !ok {
		v := hmackeypair.DefaultUpdatedAt()
		hkpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := hkpc.mutation.DeletedAt(); !ok {
		v := hmackeypair.DefaultDeletedAt
		hkpc.mutation.SetDeletedAt(v)
	}
	if _, ok := hkpc.mutation.Caller(); !ok {
		v := hmackeypair.DefaultCaller
		hkpc.mutation.SetCaller(v)
	}
	if _, ok := hkpc.mutation.ID(); !ok {
		v := hmackeypair.DefaultID()
		hkpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hkpc *HmacKeyPairCreate) check() error {
	if _, ok := hkpc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "HmacKeyPair.created_by"`)}
	}
	if _, ok := hkpc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "HmacKeyPair.updated_by"`)}
	}
	if _, ok := hkpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "HmacKeyPair.created_at"`)}
	}
	if _, ok := hkpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "HmacKeyPair.updated_at"`)}
	}
	if _, ok := hkpc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "HmacKeyPair.deleted_at"`)}
	}
	if _, ok := hkpc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`cep_ent: missing required field "HmacKeyPair.key"`)}
	}
	if _, ok := hkpc.mutation.Secret(); !ok {
		return &ValidationError{Name: "secret", err: errors.New(`cep_ent: missing required field "HmacKeyPair.secret"`)}
	}
	if _, ok := hkpc.mutation.Caller(); !ok {
		return &ValidationError{Name: "caller", err: errors.New(`cep_ent: missing required field "HmacKeyPair.caller"`)}
	}
	return nil
}

func (hkpc *HmacKeyPairCreate) sqlSave(ctx context.Context) (*HmacKeyPair, error) {
	if err := hkpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hkpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hkpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	hkpc.mutation.id = &_node.ID
	hkpc.mutation.done = true
	return _node, nil
}

func (hkpc *HmacKeyPairCreate) createSpec() (*HmacKeyPair, *sqlgraph.CreateSpec) {
	var (
		_node = &HmacKeyPair{config: hkpc.config}
		_spec = sqlgraph.NewCreateSpec(hmackeypair.Table, sqlgraph.NewFieldSpec(hmackeypair.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = hkpc.conflict
	if id, ok := hkpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := hkpc.mutation.CreatedBy(); ok {
		_spec.SetField(hmackeypair.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := hkpc.mutation.UpdatedBy(); ok {
		_spec.SetField(hmackeypair.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := hkpc.mutation.CreatedAt(); ok {
		_spec.SetField(hmackeypair.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := hkpc.mutation.UpdatedAt(); ok {
		_spec.SetField(hmackeypair.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := hkpc.mutation.DeletedAt(); ok {
		_spec.SetField(hmackeypair.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := hkpc.mutation.Key(); ok {
		_spec.SetField(hmackeypair.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := hkpc.mutation.Secret(); ok {
		_spec.SetField(hmackeypair.FieldSecret, field.TypeString, value)
		_node.Secret = value
	}
	if value, ok := hkpc.mutation.Caller(); ok {
		_spec.SetField(hmackeypair.FieldCaller, field.TypeString, value)
		_node.Caller = value
	}
	if nodes := hkpc.mutation.MissionKeyPairsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hmackeypair.MissionKeyPairsTable,
			Columns: []string{hmackeypair.MissionKeyPairsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionkeypair.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hkpc.mutation.CreatedMissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hmackeypair.CreatedMissionsTable,
			Columns: []string{hmackeypair.CreatedMissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HmacKeyPair.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HmacKeyPairUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (hkpc *HmacKeyPairCreate) OnConflict(opts ...sql.ConflictOption) *HmacKeyPairUpsertOne {
	hkpc.conflict = opts
	return &HmacKeyPairUpsertOne{
		create: hkpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HmacKeyPair.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hkpc *HmacKeyPairCreate) OnConflictColumns(columns ...string) *HmacKeyPairUpsertOne {
	hkpc.conflict = append(hkpc.conflict, sql.ConflictColumns(columns...))
	return &HmacKeyPairUpsertOne{
		create: hkpc,
	}
}

type (
	// HmacKeyPairUpsertOne is the builder for "upsert"-ing
	//  one HmacKeyPair node.
	HmacKeyPairUpsertOne struct {
		create *HmacKeyPairCreate
	}

	// HmacKeyPairUpsert is the "OnConflict" setter.
	HmacKeyPairUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *HmacKeyPairUpsert) SetCreatedBy(v int64) *HmacKeyPairUpsert {
	u.Set(hmackeypair.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *HmacKeyPairUpsert) UpdateCreatedBy() *HmacKeyPairUpsert {
	u.SetExcluded(hmackeypair.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *HmacKeyPairUpsert) AddCreatedBy(v int64) *HmacKeyPairUpsert {
	u.Add(hmackeypair.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *HmacKeyPairUpsert) SetUpdatedBy(v int64) *HmacKeyPairUpsert {
	u.Set(hmackeypair.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *HmacKeyPairUpsert) UpdateUpdatedBy() *HmacKeyPairUpsert {
	u.SetExcluded(hmackeypair.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *HmacKeyPairUpsert) AddUpdatedBy(v int64) *HmacKeyPairUpsert {
	u.Add(hmackeypair.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HmacKeyPairUpsert) SetUpdatedAt(v time.Time) *HmacKeyPairUpsert {
	u.Set(hmackeypair.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HmacKeyPairUpsert) UpdateUpdatedAt() *HmacKeyPairUpsert {
	u.SetExcluded(hmackeypair.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *HmacKeyPairUpsert) SetDeletedAt(v time.Time) *HmacKeyPairUpsert {
	u.Set(hmackeypair.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *HmacKeyPairUpsert) UpdateDeletedAt() *HmacKeyPairUpsert {
	u.SetExcluded(hmackeypair.FieldDeletedAt)
	return u
}

// SetKey sets the "key" field.
func (u *HmacKeyPairUpsert) SetKey(v string) *HmacKeyPairUpsert {
	u.Set(hmackeypair.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *HmacKeyPairUpsert) UpdateKey() *HmacKeyPairUpsert {
	u.SetExcluded(hmackeypair.FieldKey)
	return u
}

// SetSecret sets the "secret" field.
func (u *HmacKeyPairUpsert) SetSecret(v string) *HmacKeyPairUpsert {
	u.Set(hmackeypair.FieldSecret, v)
	return u
}

// UpdateSecret sets the "secret" field to the value that was provided on create.
func (u *HmacKeyPairUpsert) UpdateSecret() *HmacKeyPairUpsert {
	u.SetExcluded(hmackeypair.FieldSecret)
	return u
}

// SetCaller sets the "caller" field.
func (u *HmacKeyPairUpsert) SetCaller(v string) *HmacKeyPairUpsert {
	u.Set(hmackeypair.FieldCaller, v)
	return u
}

// UpdateCaller sets the "caller" field to the value that was provided on create.
func (u *HmacKeyPairUpsert) UpdateCaller() *HmacKeyPairUpsert {
	u.SetExcluded(hmackeypair.FieldCaller)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.HmacKeyPair.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(hmackeypair.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *HmacKeyPairUpsertOne) UpdateNewValues() *HmacKeyPairUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(hmackeypair.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(hmackeypair.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HmacKeyPair.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *HmacKeyPairUpsertOne) Ignore() *HmacKeyPairUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HmacKeyPairUpsertOne) DoNothing() *HmacKeyPairUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HmacKeyPairCreate.OnConflict
// documentation for more info.
func (u *HmacKeyPairUpsertOne) Update(set func(*HmacKeyPairUpsert)) *HmacKeyPairUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HmacKeyPairUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *HmacKeyPairUpsertOne) SetCreatedBy(v int64) *HmacKeyPairUpsertOne {
	return u.Update(func(s *HmacKeyPairUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *HmacKeyPairUpsertOne) AddCreatedBy(v int64) *HmacKeyPairUpsertOne {
	return u.Update(func(s *HmacKeyPairUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *HmacKeyPairUpsertOne) UpdateCreatedBy() *HmacKeyPairUpsertOne {
	return u.Update(func(s *HmacKeyPairUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *HmacKeyPairUpsertOne) SetUpdatedBy(v int64) *HmacKeyPairUpsertOne {
	return u.Update(func(s *HmacKeyPairUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *HmacKeyPairUpsertOne) AddUpdatedBy(v int64) *HmacKeyPairUpsertOne {
	return u.Update(func(s *HmacKeyPairUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *HmacKeyPairUpsertOne) UpdateUpdatedBy() *HmacKeyPairUpsertOne {
	return u.Update(func(s *HmacKeyPairUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HmacKeyPairUpsertOne) SetUpdatedAt(v time.Time) *HmacKeyPairUpsertOne {
	return u.Update(func(s *HmacKeyPairUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HmacKeyPairUpsertOne) UpdateUpdatedAt() *HmacKeyPairUpsertOne {
	return u.Update(func(s *HmacKeyPairUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *HmacKeyPairUpsertOne) SetDeletedAt(v time.Time) *HmacKeyPairUpsertOne {
	return u.Update(func(s *HmacKeyPairUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *HmacKeyPairUpsertOne) UpdateDeletedAt() *HmacKeyPairUpsertOne {
	return u.Update(func(s *HmacKeyPairUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetKey sets the "key" field.
func (u *HmacKeyPairUpsertOne) SetKey(v string) *HmacKeyPairUpsertOne {
	return u.Update(func(s *HmacKeyPairUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *HmacKeyPairUpsertOne) UpdateKey() *HmacKeyPairUpsertOne {
	return u.Update(func(s *HmacKeyPairUpsert) {
		s.UpdateKey()
	})
}

// SetSecret sets the "secret" field.
func (u *HmacKeyPairUpsertOne) SetSecret(v string) *HmacKeyPairUpsertOne {
	return u.Update(func(s *HmacKeyPairUpsert) {
		s.SetSecret(v)
	})
}

// UpdateSecret sets the "secret" field to the value that was provided on create.
func (u *HmacKeyPairUpsertOne) UpdateSecret() *HmacKeyPairUpsertOne {
	return u.Update(func(s *HmacKeyPairUpsert) {
		s.UpdateSecret()
	})
}

// SetCaller sets the "caller" field.
func (u *HmacKeyPairUpsertOne) SetCaller(v string) *HmacKeyPairUpsertOne {
	return u.Update(func(s *HmacKeyPairUpsert) {
		s.SetCaller(v)
	})
}

// UpdateCaller sets the "caller" field to the value that was provided on create.
func (u *HmacKeyPairUpsertOne) UpdateCaller() *HmacKeyPairUpsertOne {
	return u.Update(func(s *HmacKeyPairUpsert) {
		s.UpdateCaller()
	})
}

// Exec executes the query.
func (u *HmacKeyPairUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for HmacKeyPairCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HmacKeyPairUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *HmacKeyPairUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *HmacKeyPairUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// HmacKeyPairCreateBulk is the builder for creating many HmacKeyPair entities in bulk.
type HmacKeyPairCreateBulk struct {
	config
	err      error
	builders []*HmacKeyPairCreate
	conflict []sql.ConflictOption
}

// Save creates the HmacKeyPair entities in the database.
func (hkpcb *HmacKeyPairCreateBulk) Save(ctx context.Context) ([]*HmacKeyPair, error) {
	if hkpcb.err != nil {
		return nil, hkpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(hkpcb.builders))
	nodes := make([]*HmacKeyPair, len(hkpcb.builders))
	mutators := make([]Mutator, len(hkpcb.builders))
	for i := range hkpcb.builders {
		func(i int, root context.Context) {
			builder := hkpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HmacKeyPairMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hkpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = hkpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hkpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hkpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hkpcb *HmacKeyPairCreateBulk) SaveX(ctx context.Context) []*HmacKeyPair {
	v, err := hkpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hkpcb *HmacKeyPairCreateBulk) Exec(ctx context.Context) error {
	_, err := hkpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hkpcb *HmacKeyPairCreateBulk) ExecX(ctx context.Context) {
	if err := hkpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HmacKeyPair.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HmacKeyPairUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (hkpcb *HmacKeyPairCreateBulk) OnConflict(opts ...sql.ConflictOption) *HmacKeyPairUpsertBulk {
	hkpcb.conflict = opts
	return &HmacKeyPairUpsertBulk{
		create: hkpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HmacKeyPair.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hkpcb *HmacKeyPairCreateBulk) OnConflictColumns(columns ...string) *HmacKeyPairUpsertBulk {
	hkpcb.conflict = append(hkpcb.conflict, sql.ConflictColumns(columns...))
	return &HmacKeyPairUpsertBulk{
		create: hkpcb,
	}
}

// HmacKeyPairUpsertBulk is the builder for "upsert"-ing
// a bulk of HmacKeyPair nodes.
type HmacKeyPairUpsertBulk struct {
	create *HmacKeyPairCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.HmacKeyPair.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(hmackeypair.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *HmacKeyPairUpsertBulk) UpdateNewValues() *HmacKeyPairUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(hmackeypair.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(hmackeypair.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HmacKeyPair.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *HmacKeyPairUpsertBulk) Ignore() *HmacKeyPairUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HmacKeyPairUpsertBulk) DoNothing() *HmacKeyPairUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HmacKeyPairCreateBulk.OnConflict
// documentation for more info.
func (u *HmacKeyPairUpsertBulk) Update(set func(*HmacKeyPairUpsert)) *HmacKeyPairUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HmacKeyPairUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *HmacKeyPairUpsertBulk) SetCreatedBy(v int64) *HmacKeyPairUpsertBulk {
	return u.Update(func(s *HmacKeyPairUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *HmacKeyPairUpsertBulk) AddCreatedBy(v int64) *HmacKeyPairUpsertBulk {
	return u.Update(func(s *HmacKeyPairUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *HmacKeyPairUpsertBulk) UpdateCreatedBy() *HmacKeyPairUpsertBulk {
	return u.Update(func(s *HmacKeyPairUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *HmacKeyPairUpsertBulk) SetUpdatedBy(v int64) *HmacKeyPairUpsertBulk {
	return u.Update(func(s *HmacKeyPairUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *HmacKeyPairUpsertBulk) AddUpdatedBy(v int64) *HmacKeyPairUpsertBulk {
	return u.Update(func(s *HmacKeyPairUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *HmacKeyPairUpsertBulk) UpdateUpdatedBy() *HmacKeyPairUpsertBulk {
	return u.Update(func(s *HmacKeyPairUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HmacKeyPairUpsertBulk) SetUpdatedAt(v time.Time) *HmacKeyPairUpsertBulk {
	return u.Update(func(s *HmacKeyPairUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HmacKeyPairUpsertBulk) UpdateUpdatedAt() *HmacKeyPairUpsertBulk {
	return u.Update(func(s *HmacKeyPairUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *HmacKeyPairUpsertBulk) SetDeletedAt(v time.Time) *HmacKeyPairUpsertBulk {
	return u.Update(func(s *HmacKeyPairUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *HmacKeyPairUpsertBulk) UpdateDeletedAt() *HmacKeyPairUpsertBulk {
	return u.Update(func(s *HmacKeyPairUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetKey sets the "key" field.
func (u *HmacKeyPairUpsertBulk) SetKey(v string) *HmacKeyPairUpsertBulk {
	return u.Update(func(s *HmacKeyPairUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *HmacKeyPairUpsertBulk) UpdateKey() *HmacKeyPairUpsertBulk {
	return u.Update(func(s *HmacKeyPairUpsert) {
		s.UpdateKey()
	})
}

// SetSecret sets the "secret" field.
func (u *HmacKeyPairUpsertBulk) SetSecret(v string) *HmacKeyPairUpsertBulk {
	return u.Update(func(s *HmacKeyPairUpsert) {
		s.SetSecret(v)
	})
}

// UpdateSecret sets the "secret" field to the value that was provided on create.
func (u *HmacKeyPairUpsertBulk) UpdateSecret() *HmacKeyPairUpsertBulk {
	return u.Update(func(s *HmacKeyPairUpsert) {
		s.UpdateSecret()
	})
}

// SetCaller sets the "caller" field.
func (u *HmacKeyPairUpsertBulk) SetCaller(v string) *HmacKeyPairUpsertBulk {
	return u.Update(func(s *HmacKeyPairUpsert) {
		s.SetCaller(v)
	})
}

// UpdateCaller sets the "caller" field to the value that was provided on create.
func (u *HmacKeyPairUpsertBulk) UpdateCaller() *HmacKeyPairUpsertBulk {
	return u.Update(func(s *HmacKeyPairUpsert) {
		s.UpdateCaller()
	})
}

// Exec executes the query.
func (u *HmacKeyPairUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the HmacKeyPairCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for HmacKeyPairCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HmacKeyPairUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
