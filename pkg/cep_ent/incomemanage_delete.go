// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/incomemanage"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// IncomeManageDelete is the builder for deleting a IncomeManage entity.
type IncomeManageDelete struct {
	config
	hooks    []Hook
	mutation *IncomeManageMutation
}

// Where appends a list predicates to the IncomeManageDelete builder.
func (imd *IncomeManageDelete) Where(ps ...predicate.IncomeManage) *IncomeManageDelete {
	imd.mutation.Where(ps...)
	return imd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (imd *IncomeManageDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, imd.sqlExec, imd.mutation, imd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (imd *IncomeManageDelete) ExecX(ctx context.Context) int {
	n, err := imd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (imd *IncomeManageDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(incomemanage.Table, sqlgraph.NewFieldSpec(incomemanage.FieldID, field.TypeInt64))
	if ps := imd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, imd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	imd.mutation.done = true
	return affected, err
}

// IncomeManageDeleteOne is the builder for deleting a single IncomeManage entity.
type IncomeManageDeleteOne struct {
	imd *IncomeManageDelete
}

// Where appends a list predicates to the IncomeManageDelete builder.
func (imdo *IncomeManageDeleteOne) Where(ps ...predicate.IncomeManage) *IncomeManageDeleteOne {
	imdo.imd.mutation.Where(ps...)
	return imdo
}

// Exec executes the deletion query.
func (imdo *IncomeManageDeleteOne) Exec(ctx context.Context) error {
	n, err := imdo.imd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{incomemanage.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (imdo *IncomeManageDeleteOne) ExecX(ctx context.Context) {
	if err := imdo.Exec(ctx); err != nil {
		panic(err)
	}
}
