// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/gpupeak"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// GpuPeak is the model entity for the GpuPeak schema.
type GpuPeak struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建者 ID
	CreatedBy int64 `json:"created_by,string"`
	// 更新者 ID
	UpdatedBy int64 `json:"updated_by,string"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// 显卡型号
	Version enums.GpuVersion `json:"version"`
	// 每日同时占用峰值
	Peak         int `json:"power"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GpuPeak) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case gpupeak.FieldID, gpupeak.FieldCreatedBy, gpupeak.FieldUpdatedBy, gpupeak.FieldPeak:
			values[i] = new(sql.NullInt64)
		case gpupeak.FieldVersion:
			values[i] = new(sql.NullString)
		case gpupeak.FieldCreatedAt, gpupeak.FieldUpdatedAt, gpupeak.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GpuPeak fields.
func (gp *GpuPeak) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gpupeak.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gp.ID = int64(value.Int64)
		case gpupeak.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				gp.CreatedBy = value.Int64
			}
		case gpupeak.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				gp.UpdatedBy = value.Int64
			}
		case gpupeak.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gp.CreatedAt = value.Time
			}
		case gpupeak.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				gp.UpdatedAt = value.Time
			}
		case gpupeak.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				gp.DeletedAt = value.Time
			}
		case gpupeak.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				gp.Version = enums.GpuVersion(value.String)
			}
		case gpupeak.FieldPeak:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field peak", values[i])
			} else if value.Valid {
				gp.Peak = int(value.Int64)
			}
		default:
			gp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GpuPeak.
// This includes values selected through modifiers, order, etc.
func (gp *GpuPeak) Value(name string) (ent.Value, error) {
	return gp.selectValues.Get(name)
}

// Update returns a builder for updating this GpuPeak.
// Note that you need to call GpuPeak.Unwrap() before calling this method if this GpuPeak
// was returned from a transaction, and the transaction was committed or rolled back.
func (gp *GpuPeak) Update() *GpuPeakUpdateOne {
	return NewGpuPeakClient(gp.config).UpdateOne(gp)
}

// Unwrap unwraps the GpuPeak entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gp *GpuPeak) Unwrap() *GpuPeak {
	_tx, ok := gp.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: GpuPeak is not a transactional entity")
	}
	gp.config.driver = _tx.drv
	return gp
}

// String implements the fmt.Stringer.
func (gp *GpuPeak) String() string {
	var builder strings.Builder
	builder.WriteString("GpuPeak(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gp.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", gp.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", gp.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(gp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(gp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(gp.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", gp.Version))
	builder.WriteString(", ")
	builder.WriteString("peak=")
	builder.WriteString(fmt.Sprintf("%v", gp.Peak))
	builder.WriteByte(')')
	return builder.String()
}

// GpuPeaks is a parsable slice of GpuPeak.
type GpuPeaks []*GpuPeak
