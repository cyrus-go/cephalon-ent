// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/device"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/mission"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionfailedfeedback"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// MissionFailedFeedbackUpdate is the builder for updating MissionFailedFeedback entities.
type MissionFailedFeedbackUpdate struct {
	config
	hooks     []Hook
	mutation  *MissionFailedFeedbackMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MissionFailedFeedbackUpdate builder.
func (mffu *MissionFailedFeedbackUpdate) Where(ps ...predicate.MissionFailedFeedback) *MissionFailedFeedbackUpdate {
	mffu.mutation.Where(ps...)
	return mffu
}

// SetCreatedBy sets the "created_by" field.
func (mffu *MissionFailedFeedbackUpdate) SetCreatedBy(i int64) *MissionFailedFeedbackUpdate {
	mffu.mutation.ResetCreatedBy()
	mffu.mutation.SetCreatedBy(i)
	return mffu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mffu *MissionFailedFeedbackUpdate) SetNillableCreatedBy(i *int64) *MissionFailedFeedbackUpdate {
	if i != nil {
		mffu.SetCreatedBy(*i)
	}
	return mffu
}

// AddCreatedBy adds i to the "created_by" field.
func (mffu *MissionFailedFeedbackUpdate) AddCreatedBy(i int64) *MissionFailedFeedbackUpdate {
	mffu.mutation.AddCreatedBy(i)
	return mffu
}

// SetUpdatedBy sets the "updated_by" field.
func (mffu *MissionFailedFeedbackUpdate) SetUpdatedBy(i int64) *MissionFailedFeedbackUpdate {
	mffu.mutation.ResetUpdatedBy()
	mffu.mutation.SetUpdatedBy(i)
	return mffu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mffu *MissionFailedFeedbackUpdate) SetNillableUpdatedBy(i *int64) *MissionFailedFeedbackUpdate {
	if i != nil {
		mffu.SetUpdatedBy(*i)
	}
	return mffu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (mffu *MissionFailedFeedbackUpdate) AddUpdatedBy(i int64) *MissionFailedFeedbackUpdate {
	mffu.mutation.AddUpdatedBy(i)
	return mffu
}

// SetUpdatedAt sets the "updated_at" field.
func (mffu *MissionFailedFeedbackUpdate) SetUpdatedAt(t time.Time) *MissionFailedFeedbackUpdate {
	mffu.mutation.SetUpdatedAt(t)
	return mffu
}

// SetDeletedAt sets the "deleted_at" field.
func (mffu *MissionFailedFeedbackUpdate) SetDeletedAt(t time.Time) *MissionFailedFeedbackUpdate {
	mffu.mutation.SetDeletedAt(t)
	return mffu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mffu *MissionFailedFeedbackUpdate) SetNillableDeletedAt(t *time.Time) *MissionFailedFeedbackUpdate {
	if t != nil {
		mffu.SetDeletedAt(*t)
	}
	return mffu
}

// SetUserID sets the "user_id" field.
func (mffu *MissionFailedFeedbackUpdate) SetUserID(i int64) *MissionFailedFeedbackUpdate {
	mffu.mutation.SetUserID(i)
	return mffu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (mffu *MissionFailedFeedbackUpdate) SetNillableUserID(i *int64) *MissionFailedFeedbackUpdate {
	if i != nil {
		mffu.SetUserID(*i)
	}
	return mffu
}

// SetDeviceID sets the "device_id" field.
func (mffu *MissionFailedFeedbackUpdate) SetDeviceID(i int64) *MissionFailedFeedbackUpdate {
	mffu.mutation.SetDeviceID(i)
	return mffu
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (mffu *MissionFailedFeedbackUpdate) SetNillableDeviceID(i *int64) *MissionFailedFeedbackUpdate {
	if i != nil {
		mffu.SetDeviceID(*i)
	}
	return mffu
}

// SetMissionID sets the "mission_id" field.
func (mffu *MissionFailedFeedbackUpdate) SetMissionID(i int64) *MissionFailedFeedbackUpdate {
	mffu.mutation.SetMissionID(i)
	return mffu
}

// SetNillableMissionID sets the "mission_id" field if the given value is not nil.
func (mffu *MissionFailedFeedbackUpdate) SetNillableMissionID(i *int64) *MissionFailedFeedbackUpdate {
	if i != nil {
		mffu.SetMissionID(*i)
	}
	return mffu
}

// SetType sets the "type" field.
func (mffu *MissionFailedFeedbackUpdate) SetType(efft enums.MissionFailedFeedbackType) *MissionFailedFeedbackUpdate {
	mffu.mutation.SetType(efft)
	return mffu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mffu *MissionFailedFeedbackUpdate) SetNillableType(efft *enums.MissionFailedFeedbackType) *MissionFailedFeedbackUpdate {
	if efft != nil {
		mffu.SetType(*efft)
	}
	return mffu
}

// SetMissionName sets the "mission_name" field.
func (mffu *MissionFailedFeedbackUpdate) SetMissionName(s string) *MissionFailedFeedbackUpdate {
	mffu.mutation.SetMissionName(s)
	return mffu
}

// SetNillableMissionName sets the "mission_name" field if the given value is not nil.
func (mffu *MissionFailedFeedbackUpdate) SetNillableMissionName(s *string) *MissionFailedFeedbackUpdate {
	if s != nil {
		mffu.SetMissionName(*s)
	}
	return mffu
}

// SetStatus sets the "status" field.
func (mffu *MissionFailedFeedbackUpdate) SetStatus(effs enums.MissionFailedFeedbackStatus) *MissionFailedFeedbackUpdate {
	mffu.mutation.SetStatus(effs)
	return mffu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mffu *MissionFailedFeedbackUpdate) SetNillableStatus(effs *enums.MissionFailedFeedbackStatus) *MissionFailedFeedbackUpdate {
	if effs != nil {
		mffu.SetStatus(*effs)
	}
	return mffu
}

// SetReason sets the "reason" field.
func (mffu *MissionFailedFeedbackUpdate) SetReason(s string) *MissionFailedFeedbackUpdate {
	mffu.mutation.SetReason(s)
	return mffu
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (mffu *MissionFailedFeedbackUpdate) SetNillableReason(s *string) *MissionFailedFeedbackUpdate {
	if s != nil {
		mffu.SetReason(*s)
	}
	return mffu
}

// SetUser sets the "user" edge to the User entity.
func (mffu *MissionFailedFeedbackUpdate) SetUser(u *User) *MissionFailedFeedbackUpdate {
	return mffu.SetUserID(u.ID)
}

// SetDevice sets the "device" edge to the Device entity.
func (mffu *MissionFailedFeedbackUpdate) SetDevice(d *Device) *MissionFailedFeedbackUpdate {
	return mffu.SetDeviceID(d.ID)
}

// SetMission sets the "mission" edge to the Mission entity.
func (mffu *MissionFailedFeedbackUpdate) SetMission(m *Mission) *MissionFailedFeedbackUpdate {
	return mffu.SetMissionID(m.ID)
}

// Mutation returns the MissionFailedFeedbackMutation object of the builder.
func (mffu *MissionFailedFeedbackUpdate) Mutation() *MissionFailedFeedbackMutation {
	return mffu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (mffu *MissionFailedFeedbackUpdate) ClearUser() *MissionFailedFeedbackUpdate {
	mffu.mutation.ClearUser()
	return mffu
}

// ClearDevice clears the "device" edge to the Device entity.
func (mffu *MissionFailedFeedbackUpdate) ClearDevice() *MissionFailedFeedbackUpdate {
	mffu.mutation.ClearDevice()
	return mffu
}

// ClearMission clears the "mission" edge to the Mission entity.
func (mffu *MissionFailedFeedbackUpdate) ClearMission() *MissionFailedFeedbackUpdate {
	mffu.mutation.ClearMission()
	return mffu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mffu *MissionFailedFeedbackUpdate) Save(ctx context.Context) (int, error) {
	mffu.defaults()
	return withHooks(ctx, mffu.sqlSave, mffu.mutation, mffu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mffu *MissionFailedFeedbackUpdate) SaveX(ctx context.Context) int {
	affected, err := mffu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mffu *MissionFailedFeedbackUpdate) Exec(ctx context.Context) error {
	_, err := mffu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mffu *MissionFailedFeedbackUpdate) ExecX(ctx context.Context) {
	if err := mffu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mffu *MissionFailedFeedbackUpdate) defaults() {
	if _, ok := mffu.mutation.UpdatedAt(); !ok {
		v := missionfailedfeedback.UpdateDefaultUpdatedAt()
		mffu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mffu *MissionFailedFeedbackUpdate) check() error {
	if v, ok := mffu.mutation.GetType(); ok {
		if err := missionfailedfeedback.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "MissionFailedFeedback.type": %w`, err)}
		}
	}
	if v, ok := mffu.mutation.Status(); ok {
		if err := missionfailedfeedback.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "MissionFailedFeedback.status": %w`, err)}
		}
	}
	if _, ok := mffu.mutation.UserID(); mffu.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionFailedFeedback.user"`)
	}
	if _, ok := mffu.mutation.DeviceID(); mffu.mutation.DeviceCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionFailedFeedback.device"`)
	}
	if _, ok := mffu.mutation.MissionID(); mffu.mutation.MissionCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionFailedFeedback.mission"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mffu *MissionFailedFeedbackUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MissionFailedFeedbackUpdate {
	mffu.modifiers = append(mffu.modifiers, modifiers...)
	return mffu
}

func (mffu *MissionFailedFeedbackUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mffu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(missionfailedfeedback.Table, missionfailedfeedback.Columns, sqlgraph.NewFieldSpec(missionfailedfeedback.FieldID, field.TypeInt64))
	if ps := mffu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mffu.mutation.CreatedBy(); ok {
		_spec.SetField(missionfailedfeedback.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mffu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(missionfailedfeedback.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mffu.mutation.UpdatedBy(); ok {
		_spec.SetField(missionfailedfeedback.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mffu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(missionfailedfeedback.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mffu.mutation.UpdatedAt(); ok {
		_spec.SetField(missionfailedfeedback.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mffu.mutation.DeletedAt(); ok {
		_spec.SetField(missionfailedfeedback.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := mffu.mutation.GetType(); ok {
		_spec.SetField(missionfailedfeedback.FieldType, field.TypeEnum, value)
	}
	if value, ok := mffu.mutation.MissionName(); ok {
		_spec.SetField(missionfailedfeedback.FieldMissionName, field.TypeString, value)
	}
	if value, ok := mffu.mutation.Status(); ok {
		_spec.SetField(missionfailedfeedback.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := mffu.mutation.Reason(); ok {
		_spec.SetField(missionfailedfeedback.FieldReason, field.TypeString, value)
	}
	if mffu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionfailedfeedback.UserTable,
			Columns: []string{missionfailedfeedback.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mffu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionfailedfeedback.UserTable,
			Columns: []string{missionfailedfeedback.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mffu.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionfailedfeedback.DeviceTable,
			Columns: []string{missionfailedfeedback.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mffu.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionfailedfeedback.DeviceTable,
			Columns: []string{missionfailedfeedback.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mffu.mutation.MissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   missionfailedfeedback.MissionTable,
			Columns: []string{missionfailedfeedback.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mffu.mutation.MissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   missionfailedfeedback.MissionTable,
			Columns: []string{missionfailedfeedback.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(mffu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mffu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{missionfailedfeedback.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mffu.mutation.done = true
	return n, nil
}

// MissionFailedFeedbackUpdateOne is the builder for updating a single MissionFailedFeedback entity.
type MissionFailedFeedbackUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MissionFailedFeedbackMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedBy sets the "created_by" field.
func (mffuo *MissionFailedFeedbackUpdateOne) SetCreatedBy(i int64) *MissionFailedFeedbackUpdateOne {
	mffuo.mutation.ResetCreatedBy()
	mffuo.mutation.SetCreatedBy(i)
	return mffuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mffuo *MissionFailedFeedbackUpdateOne) SetNillableCreatedBy(i *int64) *MissionFailedFeedbackUpdateOne {
	if i != nil {
		mffuo.SetCreatedBy(*i)
	}
	return mffuo
}

// AddCreatedBy adds i to the "created_by" field.
func (mffuo *MissionFailedFeedbackUpdateOne) AddCreatedBy(i int64) *MissionFailedFeedbackUpdateOne {
	mffuo.mutation.AddCreatedBy(i)
	return mffuo
}

// SetUpdatedBy sets the "updated_by" field.
func (mffuo *MissionFailedFeedbackUpdateOne) SetUpdatedBy(i int64) *MissionFailedFeedbackUpdateOne {
	mffuo.mutation.ResetUpdatedBy()
	mffuo.mutation.SetUpdatedBy(i)
	return mffuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mffuo *MissionFailedFeedbackUpdateOne) SetNillableUpdatedBy(i *int64) *MissionFailedFeedbackUpdateOne {
	if i != nil {
		mffuo.SetUpdatedBy(*i)
	}
	return mffuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (mffuo *MissionFailedFeedbackUpdateOne) AddUpdatedBy(i int64) *MissionFailedFeedbackUpdateOne {
	mffuo.mutation.AddUpdatedBy(i)
	return mffuo
}

// SetUpdatedAt sets the "updated_at" field.
func (mffuo *MissionFailedFeedbackUpdateOne) SetUpdatedAt(t time.Time) *MissionFailedFeedbackUpdateOne {
	mffuo.mutation.SetUpdatedAt(t)
	return mffuo
}

// SetDeletedAt sets the "deleted_at" field.
func (mffuo *MissionFailedFeedbackUpdateOne) SetDeletedAt(t time.Time) *MissionFailedFeedbackUpdateOne {
	mffuo.mutation.SetDeletedAt(t)
	return mffuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mffuo *MissionFailedFeedbackUpdateOne) SetNillableDeletedAt(t *time.Time) *MissionFailedFeedbackUpdateOne {
	if t != nil {
		mffuo.SetDeletedAt(*t)
	}
	return mffuo
}

// SetUserID sets the "user_id" field.
func (mffuo *MissionFailedFeedbackUpdateOne) SetUserID(i int64) *MissionFailedFeedbackUpdateOne {
	mffuo.mutation.SetUserID(i)
	return mffuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (mffuo *MissionFailedFeedbackUpdateOne) SetNillableUserID(i *int64) *MissionFailedFeedbackUpdateOne {
	if i != nil {
		mffuo.SetUserID(*i)
	}
	return mffuo
}

// SetDeviceID sets the "device_id" field.
func (mffuo *MissionFailedFeedbackUpdateOne) SetDeviceID(i int64) *MissionFailedFeedbackUpdateOne {
	mffuo.mutation.SetDeviceID(i)
	return mffuo
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (mffuo *MissionFailedFeedbackUpdateOne) SetNillableDeviceID(i *int64) *MissionFailedFeedbackUpdateOne {
	if i != nil {
		mffuo.SetDeviceID(*i)
	}
	return mffuo
}

// SetMissionID sets the "mission_id" field.
func (mffuo *MissionFailedFeedbackUpdateOne) SetMissionID(i int64) *MissionFailedFeedbackUpdateOne {
	mffuo.mutation.SetMissionID(i)
	return mffuo
}

// SetNillableMissionID sets the "mission_id" field if the given value is not nil.
func (mffuo *MissionFailedFeedbackUpdateOne) SetNillableMissionID(i *int64) *MissionFailedFeedbackUpdateOne {
	if i != nil {
		mffuo.SetMissionID(*i)
	}
	return mffuo
}

// SetType sets the "type" field.
func (mffuo *MissionFailedFeedbackUpdateOne) SetType(efft enums.MissionFailedFeedbackType) *MissionFailedFeedbackUpdateOne {
	mffuo.mutation.SetType(efft)
	return mffuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mffuo *MissionFailedFeedbackUpdateOne) SetNillableType(efft *enums.MissionFailedFeedbackType) *MissionFailedFeedbackUpdateOne {
	if efft != nil {
		mffuo.SetType(*efft)
	}
	return mffuo
}

// SetMissionName sets the "mission_name" field.
func (mffuo *MissionFailedFeedbackUpdateOne) SetMissionName(s string) *MissionFailedFeedbackUpdateOne {
	mffuo.mutation.SetMissionName(s)
	return mffuo
}

// SetNillableMissionName sets the "mission_name" field if the given value is not nil.
func (mffuo *MissionFailedFeedbackUpdateOne) SetNillableMissionName(s *string) *MissionFailedFeedbackUpdateOne {
	if s != nil {
		mffuo.SetMissionName(*s)
	}
	return mffuo
}

// SetStatus sets the "status" field.
func (mffuo *MissionFailedFeedbackUpdateOne) SetStatus(effs enums.MissionFailedFeedbackStatus) *MissionFailedFeedbackUpdateOne {
	mffuo.mutation.SetStatus(effs)
	return mffuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mffuo *MissionFailedFeedbackUpdateOne) SetNillableStatus(effs *enums.MissionFailedFeedbackStatus) *MissionFailedFeedbackUpdateOne {
	if effs != nil {
		mffuo.SetStatus(*effs)
	}
	return mffuo
}

// SetReason sets the "reason" field.
func (mffuo *MissionFailedFeedbackUpdateOne) SetReason(s string) *MissionFailedFeedbackUpdateOne {
	mffuo.mutation.SetReason(s)
	return mffuo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (mffuo *MissionFailedFeedbackUpdateOne) SetNillableReason(s *string) *MissionFailedFeedbackUpdateOne {
	if s != nil {
		mffuo.SetReason(*s)
	}
	return mffuo
}

// SetUser sets the "user" edge to the User entity.
func (mffuo *MissionFailedFeedbackUpdateOne) SetUser(u *User) *MissionFailedFeedbackUpdateOne {
	return mffuo.SetUserID(u.ID)
}

// SetDevice sets the "device" edge to the Device entity.
func (mffuo *MissionFailedFeedbackUpdateOne) SetDevice(d *Device) *MissionFailedFeedbackUpdateOne {
	return mffuo.SetDeviceID(d.ID)
}

// SetMission sets the "mission" edge to the Mission entity.
func (mffuo *MissionFailedFeedbackUpdateOne) SetMission(m *Mission) *MissionFailedFeedbackUpdateOne {
	return mffuo.SetMissionID(m.ID)
}

// Mutation returns the MissionFailedFeedbackMutation object of the builder.
func (mffuo *MissionFailedFeedbackUpdateOne) Mutation() *MissionFailedFeedbackMutation {
	return mffuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (mffuo *MissionFailedFeedbackUpdateOne) ClearUser() *MissionFailedFeedbackUpdateOne {
	mffuo.mutation.ClearUser()
	return mffuo
}

// ClearDevice clears the "device" edge to the Device entity.
func (mffuo *MissionFailedFeedbackUpdateOne) ClearDevice() *MissionFailedFeedbackUpdateOne {
	mffuo.mutation.ClearDevice()
	return mffuo
}

// ClearMission clears the "mission" edge to the Mission entity.
func (mffuo *MissionFailedFeedbackUpdateOne) ClearMission() *MissionFailedFeedbackUpdateOne {
	mffuo.mutation.ClearMission()
	return mffuo
}

// Where appends a list predicates to the MissionFailedFeedbackUpdate builder.
func (mffuo *MissionFailedFeedbackUpdateOne) Where(ps ...predicate.MissionFailedFeedback) *MissionFailedFeedbackUpdateOne {
	mffuo.mutation.Where(ps...)
	return mffuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mffuo *MissionFailedFeedbackUpdateOne) Select(field string, fields ...string) *MissionFailedFeedbackUpdateOne {
	mffuo.fields = append([]string{field}, fields...)
	return mffuo
}

// Save executes the query and returns the updated MissionFailedFeedback entity.
func (mffuo *MissionFailedFeedbackUpdateOne) Save(ctx context.Context) (*MissionFailedFeedback, error) {
	mffuo.defaults()
	return withHooks(ctx, mffuo.sqlSave, mffuo.mutation, mffuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mffuo *MissionFailedFeedbackUpdateOne) SaveX(ctx context.Context) *MissionFailedFeedback {
	node, err := mffuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mffuo *MissionFailedFeedbackUpdateOne) Exec(ctx context.Context) error {
	_, err := mffuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mffuo *MissionFailedFeedbackUpdateOne) ExecX(ctx context.Context) {
	if err := mffuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mffuo *MissionFailedFeedbackUpdateOne) defaults() {
	if _, ok := mffuo.mutation.UpdatedAt(); !ok {
		v := missionfailedfeedback.UpdateDefaultUpdatedAt()
		mffuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mffuo *MissionFailedFeedbackUpdateOne) check() error {
	if v, ok := mffuo.mutation.GetType(); ok {
		if err := missionfailedfeedback.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "MissionFailedFeedback.type": %w`, err)}
		}
	}
	if v, ok := mffuo.mutation.Status(); ok {
		if err := missionfailedfeedback.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "MissionFailedFeedback.status": %w`, err)}
		}
	}
	if _, ok := mffuo.mutation.UserID(); mffuo.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionFailedFeedback.user"`)
	}
	if _, ok := mffuo.mutation.DeviceID(); mffuo.mutation.DeviceCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionFailedFeedback.device"`)
	}
	if _, ok := mffuo.mutation.MissionID(); mffuo.mutation.MissionCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionFailedFeedback.mission"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mffuo *MissionFailedFeedbackUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MissionFailedFeedbackUpdateOne {
	mffuo.modifiers = append(mffuo.modifiers, modifiers...)
	return mffuo
}

func (mffuo *MissionFailedFeedbackUpdateOne) sqlSave(ctx context.Context) (_node *MissionFailedFeedback, err error) {
	if err := mffuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(missionfailedfeedback.Table, missionfailedfeedback.Columns, sqlgraph.NewFieldSpec(missionfailedfeedback.FieldID, field.TypeInt64))
	id, ok := mffuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "MissionFailedFeedback.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mffuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, missionfailedfeedback.FieldID)
		for _, f := range fields {
			if !missionfailedfeedback.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != missionfailedfeedback.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mffuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mffuo.mutation.CreatedBy(); ok {
		_spec.SetField(missionfailedfeedback.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mffuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(missionfailedfeedback.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mffuo.mutation.UpdatedBy(); ok {
		_spec.SetField(missionfailedfeedback.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mffuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(missionfailedfeedback.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mffuo.mutation.UpdatedAt(); ok {
		_spec.SetField(missionfailedfeedback.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mffuo.mutation.DeletedAt(); ok {
		_spec.SetField(missionfailedfeedback.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := mffuo.mutation.GetType(); ok {
		_spec.SetField(missionfailedfeedback.FieldType, field.TypeEnum, value)
	}
	if value, ok := mffuo.mutation.MissionName(); ok {
		_spec.SetField(missionfailedfeedback.FieldMissionName, field.TypeString, value)
	}
	if value, ok := mffuo.mutation.Status(); ok {
		_spec.SetField(missionfailedfeedback.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := mffuo.mutation.Reason(); ok {
		_spec.SetField(missionfailedfeedback.FieldReason, field.TypeString, value)
	}
	if mffuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionfailedfeedback.UserTable,
			Columns: []string{missionfailedfeedback.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mffuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionfailedfeedback.UserTable,
			Columns: []string{missionfailedfeedback.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mffuo.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionfailedfeedback.DeviceTable,
			Columns: []string{missionfailedfeedback.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mffuo.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionfailedfeedback.DeviceTable,
			Columns: []string{missionfailedfeedback.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mffuo.mutation.MissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   missionfailedfeedback.MissionTable,
			Columns: []string{missionfailedfeedback.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mffuo.mutation.MissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   missionfailedfeedback.MissionTable,
			Columns: []string{missionfailedfeedback.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(mffuo.modifiers...)
	_node = &MissionFailedFeedback{config: mffuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mffuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{missionfailedfeedback.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mffuo.mutation.done = true
	return _node, nil
}
