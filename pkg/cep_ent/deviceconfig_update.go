// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/device"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/deviceconfig"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// DeviceConfigUpdate is the builder for updating DeviceConfig entities.
type DeviceConfigUpdate struct {
	config
	hooks     []Hook
	mutation  *DeviceConfigMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DeviceConfigUpdate builder.
func (dcu *DeviceConfigUpdate) Where(ps ...predicate.DeviceConfig) *DeviceConfigUpdate {
	dcu.mutation.Where(ps...)
	return dcu
}

// SetCreatedBy sets the "created_by" field.
func (dcu *DeviceConfigUpdate) SetCreatedBy(i int64) *DeviceConfigUpdate {
	dcu.mutation.ResetCreatedBy()
	dcu.mutation.SetCreatedBy(i)
	return dcu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (dcu *DeviceConfigUpdate) SetNillableCreatedBy(i *int64) *DeviceConfigUpdate {
	if i != nil {
		dcu.SetCreatedBy(*i)
	}
	return dcu
}

// AddCreatedBy adds i to the "created_by" field.
func (dcu *DeviceConfigUpdate) AddCreatedBy(i int64) *DeviceConfigUpdate {
	dcu.mutation.AddCreatedBy(i)
	return dcu
}

// SetUpdatedBy sets the "updated_by" field.
func (dcu *DeviceConfigUpdate) SetUpdatedBy(i int64) *DeviceConfigUpdate {
	dcu.mutation.ResetUpdatedBy()
	dcu.mutation.SetUpdatedBy(i)
	return dcu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dcu *DeviceConfigUpdate) SetNillableUpdatedBy(i *int64) *DeviceConfigUpdate {
	if i != nil {
		dcu.SetUpdatedBy(*i)
	}
	return dcu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (dcu *DeviceConfigUpdate) AddUpdatedBy(i int64) *DeviceConfigUpdate {
	dcu.mutation.AddUpdatedBy(i)
	return dcu
}

// SetUpdatedAt sets the "updated_at" field.
func (dcu *DeviceConfigUpdate) SetUpdatedAt(t time.Time) *DeviceConfigUpdate {
	dcu.mutation.SetUpdatedAt(t)
	return dcu
}

// SetDeletedAt sets the "deleted_at" field.
func (dcu *DeviceConfigUpdate) SetDeletedAt(t time.Time) *DeviceConfigUpdate {
	dcu.mutation.SetDeletedAt(t)
	return dcu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dcu *DeviceConfigUpdate) SetNillableDeletedAt(t *time.Time) *DeviceConfigUpdate {
	if t != nil {
		dcu.SetDeletedAt(*t)
	}
	return dcu
}

// SetDeviceID sets the "device_id" field.
func (dcu *DeviceConfigUpdate) SetDeviceID(i int64) *DeviceConfigUpdate {
	dcu.mutation.SetDeviceID(i)
	return dcu
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (dcu *DeviceConfigUpdate) SetNillableDeviceID(i *int64) *DeviceConfigUpdate {
	if i != nil {
		dcu.SetDeviceID(*i)
	}
	return dcu
}

// SetGapBase sets the "gap_base" field.
func (dcu *DeviceConfigUpdate) SetGapBase(i int64) *DeviceConfigUpdate {
	dcu.mutation.ResetGapBase()
	dcu.mutation.SetGapBase(i)
	return dcu
}

// SetNillableGapBase sets the "gap_base" field if the given value is not nil.
func (dcu *DeviceConfigUpdate) SetNillableGapBase(i *int64) *DeviceConfigUpdate {
	if i != nil {
		dcu.SetGapBase(*i)
	}
	return dcu
}

// AddGapBase adds i to the "gap_base" field.
func (dcu *DeviceConfigUpdate) AddGapBase(i int64) *DeviceConfigUpdate {
	dcu.mutation.AddGapBase(i)
	return dcu
}

// SetGapRandomMax sets the "gap_random_max" field.
func (dcu *DeviceConfigUpdate) SetGapRandomMax(i int64) *DeviceConfigUpdate {
	dcu.mutation.ResetGapRandomMax()
	dcu.mutation.SetGapRandomMax(i)
	return dcu
}

// SetNillableGapRandomMax sets the "gap_random_max" field if the given value is not nil.
func (dcu *DeviceConfigUpdate) SetNillableGapRandomMax(i *int64) *DeviceConfigUpdate {
	if i != nil {
		dcu.SetGapRandomMax(*i)
	}
	return dcu
}

// AddGapRandomMax adds i to the "gap_random_max" field.
func (dcu *DeviceConfigUpdate) AddGapRandomMax(i int64) *DeviceConfigUpdate {
	dcu.mutation.AddGapRandomMax(i)
	return dcu
}

// SetGapRandomMin sets the "gap_random_min" field.
func (dcu *DeviceConfigUpdate) SetGapRandomMin(i int64) *DeviceConfigUpdate {
	dcu.mutation.ResetGapRandomMin()
	dcu.mutation.SetGapRandomMin(i)
	return dcu
}

// SetNillableGapRandomMin sets the "gap_random_min" field if the given value is not nil.
func (dcu *DeviceConfigUpdate) SetNillableGapRandomMin(i *int64) *DeviceConfigUpdate {
	if i != nil {
		dcu.SetGapRandomMin(*i)
	}
	return dcu
}

// AddGapRandomMin adds i to the "gap_random_min" field.
func (dcu *DeviceConfigUpdate) AddGapRandomMin(i int64) *DeviceConfigUpdate {
	dcu.mutation.AddGapRandomMin(i)
	return dcu
}

// SetDevice sets the "device" edge to the Device entity.
func (dcu *DeviceConfigUpdate) SetDevice(d *Device) *DeviceConfigUpdate {
	return dcu.SetDeviceID(d.ID)
}

// Mutation returns the DeviceConfigMutation object of the builder.
func (dcu *DeviceConfigUpdate) Mutation() *DeviceConfigMutation {
	return dcu.mutation
}

// ClearDevice clears the "device" edge to the Device entity.
func (dcu *DeviceConfigUpdate) ClearDevice() *DeviceConfigUpdate {
	dcu.mutation.ClearDevice()
	return dcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dcu *DeviceConfigUpdate) Save(ctx context.Context) (int, error) {
	dcu.defaults()
	return withHooks(ctx, dcu.sqlSave, dcu.mutation, dcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dcu *DeviceConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := dcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dcu *DeviceConfigUpdate) Exec(ctx context.Context) error {
	_, err := dcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcu *DeviceConfigUpdate) ExecX(ctx context.Context) {
	if err := dcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dcu *DeviceConfigUpdate) defaults() {
	if _, ok := dcu.mutation.UpdatedAt(); !ok {
		v := deviceconfig.UpdateDefaultUpdatedAt()
		dcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dcu *DeviceConfigUpdate) check() error {
	if _, ok := dcu.mutation.DeviceID(); dcu.mutation.DeviceCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "DeviceConfig.device"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (dcu *DeviceConfigUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DeviceConfigUpdate {
	dcu.modifiers = append(dcu.modifiers, modifiers...)
	return dcu
}

func (dcu *DeviceConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(deviceconfig.Table, deviceconfig.Columns, sqlgraph.NewFieldSpec(deviceconfig.FieldID, field.TypeInt64))
	if ps := dcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcu.mutation.CreatedBy(); ok {
		_spec.SetField(deviceconfig.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := dcu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(deviceconfig.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := dcu.mutation.UpdatedBy(); ok {
		_spec.SetField(deviceconfig.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := dcu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(deviceconfig.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := dcu.mutation.UpdatedAt(); ok {
		_spec.SetField(deviceconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := dcu.mutation.DeletedAt(); ok {
		_spec.SetField(deviceconfig.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := dcu.mutation.GapBase(); ok {
		_spec.SetField(deviceconfig.FieldGapBase, field.TypeInt64, value)
	}
	if value, ok := dcu.mutation.AddedGapBase(); ok {
		_spec.AddField(deviceconfig.FieldGapBase, field.TypeInt64, value)
	}
	if value, ok := dcu.mutation.GapRandomMax(); ok {
		_spec.SetField(deviceconfig.FieldGapRandomMax, field.TypeInt64, value)
	}
	if value, ok := dcu.mutation.AddedGapRandomMax(); ok {
		_spec.AddField(deviceconfig.FieldGapRandomMax, field.TypeInt64, value)
	}
	if value, ok := dcu.mutation.GapRandomMin(); ok {
		_spec.SetField(deviceconfig.FieldGapRandomMin, field.TypeInt64, value)
	}
	if value, ok := dcu.mutation.AddedGapRandomMin(); ok {
		_spec.AddField(deviceconfig.FieldGapRandomMin, field.TypeInt64, value)
	}
	if dcu.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deviceconfig.DeviceTable,
			Columns: []string{deviceconfig.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deviceconfig.DeviceTable,
			Columns: []string{deviceconfig.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(dcu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, dcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deviceconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dcu.mutation.done = true
	return n, nil
}

// DeviceConfigUpdateOne is the builder for updating a single DeviceConfig entity.
type DeviceConfigUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DeviceConfigMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedBy sets the "created_by" field.
func (dcuo *DeviceConfigUpdateOne) SetCreatedBy(i int64) *DeviceConfigUpdateOne {
	dcuo.mutation.ResetCreatedBy()
	dcuo.mutation.SetCreatedBy(i)
	return dcuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (dcuo *DeviceConfigUpdateOne) SetNillableCreatedBy(i *int64) *DeviceConfigUpdateOne {
	if i != nil {
		dcuo.SetCreatedBy(*i)
	}
	return dcuo
}

// AddCreatedBy adds i to the "created_by" field.
func (dcuo *DeviceConfigUpdateOne) AddCreatedBy(i int64) *DeviceConfigUpdateOne {
	dcuo.mutation.AddCreatedBy(i)
	return dcuo
}

// SetUpdatedBy sets the "updated_by" field.
func (dcuo *DeviceConfigUpdateOne) SetUpdatedBy(i int64) *DeviceConfigUpdateOne {
	dcuo.mutation.ResetUpdatedBy()
	dcuo.mutation.SetUpdatedBy(i)
	return dcuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dcuo *DeviceConfigUpdateOne) SetNillableUpdatedBy(i *int64) *DeviceConfigUpdateOne {
	if i != nil {
		dcuo.SetUpdatedBy(*i)
	}
	return dcuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (dcuo *DeviceConfigUpdateOne) AddUpdatedBy(i int64) *DeviceConfigUpdateOne {
	dcuo.mutation.AddUpdatedBy(i)
	return dcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (dcuo *DeviceConfigUpdateOne) SetUpdatedAt(t time.Time) *DeviceConfigUpdateOne {
	dcuo.mutation.SetUpdatedAt(t)
	return dcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (dcuo *DeviceConfigUpdateOne) SetDeletedAt(t time.Time) *DeviceConfigUpdateOne {
	dcuo.mutation.SetDeletedAt(t)
	return dcuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dcuo *DeviceConfigUpdateOne) SetNillableDeletedAt(t *time.Time) *DeviceConfigUpdateOne {
	if t != nil {
		dcuo.SetDeletedAt(*t)
	}
	return dcuo
}

// SetDeviceID sets the "device_id" field.
func (dcuo *DeviceConfigUpdateOne) SetDeviceID(i int64) *DeviceConfigUpdateOne {
	dcuo.mutation.SetDeviceID(i)
	return dcuo
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (dcuo *DeviceConfigUpdateOne) SetNillableDeviceID(i *int64) *DeviceConfigUpdateOne {
	if i != nil {
		dcuo.SetDeviceID(*i)
	}
	return dcuo
}

// SetGapBase sets the "gap_base" field.
func (dcuo *DeviceConfigUpdateOne) SetGapBase(i int64) *DeviceConfigUpdateOne {
	dcuo.mutation.ResetGapBase()
	dcuo.mutation.SetGapBase(i)
	return dcuo
}

// SetNillableGapBase sets the "gap_base" field if the given value is not nil.
func (dcuo *DeviceConfigUpdateOne) SetNillableGapBase(i *int64) *DeviceConfigUpdateOne {
	if i != nil {
		dcuo.SetGapBase(*i)
	}
	return dcuo
}

// AddGapBase adds i to the "gap_base" field.
func (dcuo *DeviceConfigUpdateOne) AddGapBase(i int64) *DeviceConfigUpdateOne {
	dcuo.mutation.AddGapBase(i)
	return dcuo
}

// SetGapRandomMax sets the "gap_random_max" field.
func (dcuo *DeviceConfigUpdateOne) SetGapRandomMax(i int64) *DeviceConfigUpdateOne {
	dcuo.mutation.ResetGapRandomMax()
	dcuo.mutation.SetGapRandomMax(i)
	return dcuo
}

// SetNillableGapRandomMax sets the "gap_random_max" field if the given value is not nil.
func (dcuo *DeviceConfigUpdateOne) SetNillableGapRandomMax(i *int64) *DeviceConfigUpdateOne {
	if i != nil {
		dcuo.SetGapRandomMax(*i)
	}
	return dcuo
}

// AddGapRandomMax adds i to the "gap_random_max" field.
func (dcuo *DeviceConfigUpdateOne) AddGapRandomMax(i int64) *DeviceConfigUpdateOne {
	dcuo.mutation.AddGapRandomMax(i)
	return dcuo
}

// SetGapRandomMin sets the "gap_random_min" field.
func (dcuo *DeviceConfigUpdateOne) SetGapRandomMin(i int64) *DeviceConfigUpdateOne {
	dcuo.mutation.ResetGapRandomMin()
	dcuo.mutation.SetGapRandomMin(i)
	return dcuo
}

// SetNillableGapRandomMin sets the "gap_random_min" field if the given value is not nil.
func (dcuo *DeviceConfigUpdateOne) SetNillableGapRandomMin(i *int64) *DeviceConfigUpdateOne {
	if i != nil {
		dcuo.SetGapRandomMin(*i)
	}
	return dcuo
}

// AddGapRandomMin adds i to the "gap_random_min" field.
func (dcuo *DeviceConfigUpdateOne) AddGapRandomMin(i int64) *DeviceConfigUpdateOne {
	dcuo.mutation.AddGapRandomMin(i)
	return dcuo
}

// SetDevice sets the "device" edge to the Device entity.
func (dcuo *DeviceConfigUpdateOne) SetDevice(d *Device) *DeviceConfigUpdateOne {
	return dcuo.SetDeviceID(d.ID)
}

// Mutation returns the DeviceConfigMutation object of the builder.
func (dcuo *DeviceConfigUpdateOne) Mutation() *DeviceConfigMutation {
	return dcuo.mutation
}

// ClearDevice clears the "device" edge to the Device entity.
func (dcuo *DeviceConfigUpdateOne) ClearDevice() *DeviceConfigUpdateOne {
	dcuo.mutation.ClearDevice()
	return dcuo
}

// Where appends a list predicates to the DeviceConfigUpdate builder.
func (dcuo *DeviceConfigUpdateOne) Where(ps ...predicate.DeviceConfig) *DeviceConfigUpdateOne {
	dcuo.mutation.Where(ps...)
	return dcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dcuo *DeviceConfigUpdateOne) Select(field string, fields ...string) *DeviceConfigUpdateOne {
	dcuo.fields = append([]string{field}, fields...)
	return dcuo
}

// Save executes the query and returns the updated DeviceConfig entity.
func (dcuo *DeviceConfigUpdateOne) Save(ctx context.Context) (*DeviceConfig, error) {
	dcuo.defaults()
	return withHooks(ctx, dcuo.sqlSave, dcuo.mutation, dcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dcuo *DeviceConfigUpdateOne) SaveX(ctx context.Context) *DeviceConfig {
	node, err := dcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dcuo *DeviceConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := dcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcuo *DeviceConfigUpdateOne) ExecX(ctx context.Context) {
	if err := dcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dcuo *DeviceConfigUpdateOne) defaults() {
	if _, ok := dcuo.mutation.UpdatedAt(); !ok {
		v := deviceconfig.UpdateDefaultUpdatedAt()
		dcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dcuo *DeviceConfigUpdateOne) check() error {
	if _, ok := dcuo.mutation.DeviceID(); dcuo.mutation.DeviceCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "DeviceConfig.device"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (dcuo *DeviceConfigUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DeviceConfigUpdateOne {
	dcuo.modifiers = append(dcuo.modifiers, modifiers...)
	return dcuo
}

func (dcuo *DeviceConfigUpdateOne) sqlSave(ctx context.Context) (_node *DeviceConfig, err error) {
	if err := dcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(deviceconfig.Table, deviceconfig.Columns, sqlgraph.NewFieldSpec(deviceconfig.FieldID, field.TypeInt64))
	id, ok := dcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "DeviceConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deviceconfig.FieldID)
		for _, f := range fields {
			if !deviceconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != deviceconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcuo.mutation.CreatedBy(); ok {
		_spec.SetField(deviceconfig.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := dcuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(deviceconfig.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := dcuo.mutation.UpdatedBy(); ok {
		_spec.SetField(deviceconfig.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := dcuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(deviceconfig.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := dcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(deviceconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := dcuo.mutation.DeletedAt(); ok {
		_spec.SetField(deviceconfig.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := dcuo.mutation.GapBase(); ok {
		_spec.SetField(deviceconfig.FieldGapBase, field.TypeInt64, value)
	}
	if value, ok := dcuo.mutation.AddedGapBase(); ok {
		_spec.AddField(deviceconfig.FieldGapBase, field.TypeInt64, value)
	}
	if value, ok := dcuo.mutation.GapRandomMax(); ok {
		_spec.SetField(deviceconfig.FieldGapRandomMax, field.TypeInt64, value)
	}
	if value, ok := dcuo.mutation.AddedGapRandomMax(); ok {
		_spec.AddField(deviceconfig.FieldGapRandomMax, field.TypeInt64, value)
	}
	if value, ok := dcuo.mutation.GapRandomMin(); ok {
		_spec.SetField(deviceconfig.FieldGapRandomMin, field.TypeInt64, value)
	}
	if value, ok := dcuo.mutation.AddedGapRandomMin(); ok {
		_spec.AddField(deviceconfig.FieldGapRandomMin, field.TypeInt64, value)
	}
	if dcuo.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deviceconfig.DeviceTable,
			Columns: []string{deviceconfig.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deviceconfig.DeviceTable,
			Columns: []string{deviceconfig.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(dcuo.modifiers...)
	_node = &DeviceConfig{config: dcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deviceconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dcuo.mutation.done = true
	return _node, nil
}
