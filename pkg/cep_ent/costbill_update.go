// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/campaignorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/costaccount"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/costbill"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionconsumeorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/platformaccount"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/rechargeorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// CostBillUpdate is the builder for updating CostBill entities.
type CostBillUpdate struct {
	config
	hooks    []Hook
	mutation *CostBillMutation
}

// Where appends a list predicates to the CostBillUpdate builder.
func (cbu *CostBillUpdate) Where(ps ...predicate.CostBill) *CostBillUpdate {
	cbu.mutation.Where(ps...)
	return cbu
}

// SetCreatedBy sets the "created_by" field.
func (cbu *CostBillUpdate) SetCreatedBy(i int64) *CostBillUpdate {
	cbu.mutation.ResetCreatedBy()
	cbu.mutation.SetCreatedBy(i)
	return cbu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cbu *CostBillUpdate) SetNillableCreatedBy(i *int64) *CostBillUpdate {
	if i != nil {
		cbu.SetCreatedBy(*i)
	}
	return cbu
}

// AddCreatedBy adds i to the "created_by" field.
func (cbu *CostBillUpdate) AddCreatedBy(i int64) *CostBillUpdate {
	cbu.mutation.AddCreatedBy(i)
	return cbu
}

// SetUpdatedBy sets the "updated_by" field.
func (cbu *CostBillUpdate) SetUpdatedBy(i int64) *CostBillUpdate {
	cbu.mutation.ResetUpdatedBy()
	cbu.mutation.SetUpdatedBy(i)
	return cbu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cbu *CostBillUpdate) SetNillableUpdatedBy(i *int64) *CostBillUpdate {
	if i != nil {
		cbu.SetUpdatedBy(*i)
	}
	return cbu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (cbu *CostBillUpdate) AddUpdatedBy(i int64) *CostBillUpdate {
	cbu.mutation.AddUpdatedBy(i)
	return cbu
}

// SetUpdatedAt sets the "updated_at" field.
func (cbu *CostBillUpdate) SetUpdatedAt(t time.Time) *CostBillUpdate {
	cbu.mutation.SetUpdatedAt(t)
	return cbu
}

// SetDeletedAt sets the "deleted_at" field.
func (cbu *CostBillUpdate) SetDeletedAt(t time.Time) *CostBillUpdate {
	cbu.mutation.SetDeletedAt(t)
	return cbu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cbu *CostBillUpdate) SetNillableDeletedAt(t *time.Time) *CostBillUpdate {
	if t != nil {
		cbu.SetDeletedAt(*t)
	}
	return cbu
}

// SetType sets the "type" field.
func (cbu *CostBillUpdate) SetType(c costbill.Type) *CostBillUpdate {
	cbu.mutation.SetType(c)
	return cbu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cbu *CostBillUpdate) SetNillableType(c *costbill.Type) *CostBillUpdate {
	if c != nil {
		cbu.SetType(*c)
	}
	return cbu
}

// SetWay sets the "way" field.
func (cbu *CostBillUpdate) SetWay(c costbill.Way) *CostBillUpdate {
	cbu.mutation.SetWay(c)
	return cbu
}

// SetNillableWay sets the "way" field if the given value is not nil.
func (cbu *CostBillUpdate) SetNillableWay(c *costbill.Way) *CostBillUpdate {
	if c != nil {
		cbu.SetWay(*c)
	}
	return cbu
}

// SetIsAdd sets the "is_add" field.
func (cbu *CostBillUpdate) SetIsAdd(b bool) *CostBillUpdate {
	cbu.mutation.SetIsAdd(b)
	return cbu
}

// SetNillableIsAdd sets the "is_add" field if the given value is not nil.
func (cbu *CostBillUpdate) SetNillableIsAdd(b *bool) *CostBillUpdate {
	if b != nil {
		cbu.SetIsAdd(*b)
	}
	return cbu
}

// SetUserID sets the "user_id" field.
func (cbu *CostBillUpdate) SetUserID(i int64) *CostBillUpdate {
	cbu.mutation.SetUserID(i)
	return cbu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cbu *CostBillUpdate) SetNillableUserID(i *int64) *CostBillUpdate {
	if i != nil {
		cbu.SetUserID(*i)
	}
	return cbu
}

// SetSerialNumber sets the "serial_number" field.
func (cbu *CostBillUpdate) SetSerialNumber(s string) *CostBillUpdate {
	cbu.mutation.SetSerialNumber(s)
	return cbu
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (cbu *CostBillUpdate) SetNillableSerialNumber(s *string) *CostBillUpdate {
	if s != nil {
		cbu.SetSerialNumber(*s)
	}
	return cbu
}

// SetCostAccountID sets the "cost_account_id" field.
func (cbu *CostBillUpdate) SetCostAccountID(i int64) *CostBillUpdate {
	cbu.mutation.SetCostAccountID(i)
	return cbu
}

// SetNillableCostAccountID sets the "cost_account_id" field if the given value is not nil.
func (cbu *CostBillUpdate) SetNillableCostAccountID(i *int64) *CostBillUpdate {
	if i != nil {
		cbu.SetCostAccountID(*i)
	}
	return cbu
}

// SetPureCep sets the "pure_cep" field.
func (cbu *CostBillUpdate) SetPureCep(i int64) *CostBillUpdate {
	cbu.mutation.ResetPureCep()
	cbu.mutation.SetPureCep(i)
	return cbu
}

// SetNillablePureCep sets the "pure_cep" field if the given value is not nil.
func (cbu *CostBillUpdate) SetNillablePureCep(i *int64) *CostBillUpdate {
	if i != nil {
		cbu.SetPureCep(*i)
	}
	return cbu
}

// AddPureCep adds i to the "pure_cep" field.
func (cbu *CostBillUpdate) AddPureCep(i int64) *CostBillUpdate {
	cbu.mutation.AddPureCep(i)
	return cbu
}

// SetGiftCep sets the "gift_cep" field.
func (cbu *CostBillUpdate) SetGiftCep(i int64) *CostBillUpdate {
	cbu.mutation.ResetGiftCep()
	cbu.mutation.SetGiftCep(i)
	return cbu
}

// SetNillableGiftCep sets the "gift_cep" field if the given value is not nil.
func (cbu *CostBillUpdate) SetNillableGiftCep(i *int64) *CostBillUpdate {
	if i != nil {
		cbu.SetGiftCep(*i)
	}
	return cbu
}

// AddGiftCep adds i to the "gift_cep" field.
func (cbu *CostBillUpdate) AddGiftCep(i int64) *CostBillUpdate {
	cbu.mutation.AddGiftCep(i)
	return cbu
}

// SetReasonID sets the "reason_id" field.
func (cbu *CostBillUpdate) SetReasonID(i int64) *CostBillUpdate {
	cbu.mutation.SetReasonID(i)
	return cbu
}

// SetNillableReasonID sets the "reason_id" field if the given value is not nil.
func (cbu *CostBillUpdate) SetNillableReasonID(i *int64) *CostBillUpdate {
	if i != nil {
		cbu.SetReasonID(*i)
	}
	return cbu
}

// ClearReasonID clears the value of the "reason_id" field.
func (cbu *CostBillUpdate) ClearReasonID() *CostBillUpdate {
	cbu.mutation.ClearReasonID()
	return cbu
}

// SetStatus sets the "status" field.
func (cbu *CostBillUpdate) SetStatus(es enums.BillStatus) *CostBillUpdate {
	cbu.mutation.SetStatus(es)
	return cbu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cbu *CostBillUpdate) SetNillableStatus(es *enums.BillStatus) *CostBillUpdate {
	if es != nil {
		cbu.SetStatus(*es)
	}
	return cbu
}

// SetMarketAccountID sets the "market_account_id" field.
func (cbu *CostBillUpdate) SetMarketAccountID(i int64) *CostBillUpdate {
	cbu.mutation.SetMarketAccountID(i)
	return cbu
}

// SetNillableMarketAccountID sets the "market_account_id" field if the given value is not nil.
func (cbu *CostBillUpdate) SetNillableMarketAccountID(i *int64) *CostBillUpdate {
	if i != nil {
		cbu.SetMarketAccountID(*i)
	}
	return cbu
}

// SetCampaignOrderID sets the "campaign_order_id" field.
func (cbu *CostBillUpdate) SetCampaignOrderID(i int64) *CostBillUpdate {
	cbu.mutation.SetCampaignOrderID(i)
	return cbu
}

// SetNillableCampaignOrderID sets the "campaign_order_id" field if the given value is not nil.
func (cbu *CostBillUpdate) SetNillableCampaignOrderID(i *int64) *CostBillUpdate {
	if i != nil {
		cbu.SetCampaignOrderID(*i)
	}
	return cbu
}

// SetUser sets the "user" edge to the User entity.
func (cbu *CostBillUpdate) SetUser(u *User) *CostBillUpdate {
	return cbu.SetUserID(u.ID)
}

// SetCostAccount sets the "cost_account" edge to the CostAccount entity.
func (cbu *CostBillUpdate) SetCostAccount(c *CostAccount) *CostBillUpdate {
	return cbu.SetCostAccountID(c.ID)
}

// SetRechargeOrderID sets the "recharge_order" edge to the RechargeOrder entity by ID.
func (cbu *CostBillUpdate) SetRechargeOrderID(id int64) *CostBillUpdate {
	cbu.mutation.SetRechargeOrderID(id)
	return cbu
}

// SetNillableRechargeOrderID sets the "recharge_order" edge to the RechargeOrder entity by ID if the given value is not nil.
func (cbu *CostBillUpdate) SetNillableRechargeOrderID(id *int64) *CostBillUpdate {
	if id != nil {
		cbu = cbu.SetRechargeOrderID(*id)
	}
	return cbu
}

// SetRechargeOrder sets the "recharge_order" edge to the RechargeOrder entity.
func (cbu *CostBillUpdate) SetRechargeOrder(r *RechargeOrder) *CostBillUpdate {
	return cbu.SetRechargeOrderID(r.ID)
}

// SetMissionConsumeOrderID sets the "mission_consume_order" edge to the MissionConsumeOrder entity by ID.
func (cbu *CostBillUpdate) SetMissionConsumeOrderID(id int64) *CostBillUpdate {
	cbu.mutation.SetMissionConsumeOrderID(id)
	return cbu
}

// SetNillableMissionConsumeOrderID sets the "mission_consume_order" edge to the MissionConsumeOrder entity by ID if the given value is not nil.
func (cbu *CostBillUpdate) SetNillableMissionConsumeOrderID(id *int64) *CostBillUpdate {
	if id != nil {
		cbu = cbu.SetMissionConsumeOrderID(*id)
	}
	return cbu
}

// SetMissionConsumeOrder sets the "mission_consume_order" edge to the MissionConsumeOrder entity.
func (cbu *CostBillUpdate) SetMissionConsumeOrder(m *MissionConsumeOrder) *CostBillUpdate {
	return cbu.SetMissionConsumeOrderID(m.ID)
}

// SetPlatformAccountID sets the "platform_account" edge to the PlatformAccount entity by ID.
func (cbu *CostBillUpdate) SetPlatformAccountID(id int64) *CostBillUpdate {
	cbu.mutation.SetPlatformAccountID(id)
	return cbu
}

// SetPlatformAccount sets the "platform_account" edge to the PlatformAccount entity.
func (cbu *CostBillUpdate) SetPlatformAccount(p *PlatformAccount) *CostBillUpdate {
	return cbu.SetPlatformAccountID(p.ID)
}

// SetCampaignOrder sets the "campaign_order" edge to the CampaignOrder entity.
func (cbu *CostBillUpdate) SetCampaignOrder(c *CampaignOrder) *CostBillUpdate {
	return cbu.SetCampaignOrderID(c.ID)
}

// Mutation returns the CostBillMutation object of the builder.
func (cbu *CostBillUpdate) Mutation() *CostBillMutation {
	return cbu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cbu *CostBillUpdate) ClearUser() *CostBillUpdate {
	cbu.mutation.ClearUser()
	return cbu
}

// ClearCostAccount clears the "cost_account" edge to the CostAccount entity.
func (cbu *CostBillUpdate) ClearCostAccount() *CostBillUpdate {
	cbu.mutation.ClearCostAccount()
	return cbu
}

// ClearRechargeOrder clears the "recharge_order" edge to the RechargeOrder entity.
func (cbu *CostBillUpdate) ClearRechargeOrder() *CostBillUpdate {
	cbu.mutation.ClearRechargeOrder()
	return cbu
}

// ClearMissionConsumeOrder clears the "mission_consume_order" edge to the MissionConsumeOrder entity.
func (cbu *CostBillUpdate) ClearMissionConsumeOrder() *CostBillUpdate {
	cbu.mutation.ClearMissionConsumeOrder()
	return cbu
}

// ClearPlatformAccount clears the "platform_account" edge to the PlatformAccount entity.
func (cbu *CostBillUpdate) ClearPlatformAccount() *CostBillUpdate {
	cbu.mutation.ClearPlatformAccount()
	return cbu
}

// ClearCampaignOrder clears the "campaign_order" edge to the CampaignOrder entity.
func (cbu *CostBillUpdate) ClearCampaignOrder() *CostBillUpdate {
	cbu.mutation.ClearCampaignOrder()
	return cbu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cbu *CostBillUpdate) Save(ctx context.Context) (int, error) {
	cbu.defaults()
	return withHooks(ctx, cbu.sqlSave, cbu.mutation, cbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cbu *CostBillUpdate) SaveX(ctx context.Context) int {
	affected, err := cbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cbu *CostBillUpdate) Exec(ctx context.Context) error {
	_, err := cbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cbu *CostBillUpdate) ExecX(ctx context.Context) {
	if err := cbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cbu *CostBillUpdate) defaults() {
	if _, ok := cbu.mutation.UpdatedAt(); !ok {
		v := costbill.UpdateDefaultUpdatedAt()
		cbu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cbu *CostBillUpdate) check() error {
	if v, ok := cbu.mutation.GetType(); ok {
		if err := costbill.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "CostBill.type": %w`, err)}
		}
	}
	if v, ok := cbu.mutation.Way(); ok {
		if err := costbill.WayValidator(v); err != nil {
			return &ValidationError{Name: "way", err: fmt.Errorf(`cep_ent: validator failed for field "CostBill.way": %w`, err)}
		}
	}
	if v, ok := cbu.mutation.Status(); ok {
		if err := costbill.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "CostBill.status": %w`, err)}
		}
	}
	if _, ok := cbu.mutation.UserID(); cbu.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "CostBill.user"`)
	}
	if _, ok := cbu.mutation.CostAccountID(); cbu.mutation.CostAccountCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "CostBill.cost_account"`)
	}
	if _, ok := cbu.mutation.PlatformAccountID(); cbu.mutation.PlatformAccountCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "CostBill.platform_account"`)
	}
	if _, ok := cbu.mutation.CampaignOrderID(); cbu.mutation.CampaignOrderCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "CostBill.campaign_order"`)
	}
	return nil
}

func (cbu *CostBillUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cbu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(costbill.Table, costbill.Columns, sqlgraph.NewFieldSpec(costbill.FieldID, field.TypeInt64))
	if ps := cbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cbu.mutation.CreatedBy(); ok {
		_spec.SetField(costbill.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := cbu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(costbill.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := cbu.mutation.UpdatedBy(); ok {
		_spec.SetField(costbill.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := cbu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(costbill.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := cbu.mutation.UpdatedAt(); ok {
		_spec.SetField(costbill.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cbu.mutation.DeletedAt(); ok {
		_spec.SetField(costbill.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := cbu.mutation.GetType(); ok {
		_spec.SetField(costbill.FieldType, field.TypeEnum, value)
	}
	if value, ok := cbu.mutation.Way(); ok {
		_spec.SetField(costbill.FieldWay, field.TypeEnum, value)
	}
	if value, ok := cbu.mutation.IsAdd(); ok {
		_spec.SetField(costbill.FieldIsAdd, field.TypeBool, value)
	}
	if value, ok := cbu.mutation.SerialNumber(); ok {
		_spec.SetField(costbill.FieldSerialNumber, field.TypeString, value)
	}
	if value, ok := cbu.mutation.PureCep(); ok {
		_spec.SetField(costbill.FieldPureCep, field.TypeInt64, value)
	}
	if value, ok := cbu.mutation.AddedPureCep(); ok {
		_spec.AddField(costbill.FieldPureCep, field.TypeInt64, value)
	}
	if value, ok := cbu.mutation.GiftCep(); ok {
		_spec.SetField(costbill.FieldGiftCep, field.TypeInt64, value)
	}
	if value, ok := cbu.mutation.AddedGiftCep(); ok {
		_spec.AddField(costbill.FieldGiftCep, field.TypeInt64, value)
	}
	if value, ok := cbu.mutation.Status(); ok {
		_spec.SetField(costbill.FieldStatus, field.TypeEnum, value)
	}
	if cbu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costbill.UserTable,
			Columns: []string{costbill.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costbill.UserTable,
			Columns: []string{costbill.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cbu.mutation.CostAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costbill.CostAccountTable,
			Columns: []string{costbill.CostAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costaccount.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbu.mutation.CostAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costbill.CostAccountTable,
			Columns: []string{costbill.CostAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costaccount.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cbu.mutation.RechargeOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costbill.RechargeOrderTable,
			Columns: []string{costbill.RechargeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rechargeorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbu.mutation.RechargeOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costbill.RechargeOrderTable,
			Columns: []string{costbill.RechargeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rechargeorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cbu.mutation.MissionConsumeOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costbill.MissionConsumeOrderTable,
			Columns: []string{costbill.MissionConsumeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbu.mutation.MissionConsumeOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costbill.MissionConsumeOrderTable,
			Columns: []string{costbill.MissionConsumeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cbu.mutation.PlatformAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costbill.PlatformAccountTable,
			Columns: []string{costbill.PlatformAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformaccount.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbu.mutation.PlatformAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costbill.PlatformAccountTable,
			Columns: []string{costbill.PlatformAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformaccount.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cbu.mutation.CampaignOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costbill.CampaignOrderTable,
			Columns: []string{costbill.CampaignOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaignorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbu.mutation.CampaignOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costbill.CampaignOrderTable,
			Columns: []string{costbill.CampaignOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaignorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{costbill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cbu.mutation.done = true
	return n, nil
}

// CostBillUpdateOne is the builder for updating a single CostBill entity.
type CostBillUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CostBillMutation
}

// SetCreatedBy sets the "created_by" field.
func (cbuo *CostBillUpdateOne) SetCreatedBy(i int64) *CostBillUpdateOne {
	cbuo.mutation.ResetCreatedBy()
	cbuo.mutation.SetCreatedBy(i)
	return cbuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cbuo *CostBillUpdateOne) SetNillableCreatedBy(i *int64) *CostBillUpdateOne {
	if i != nil {
		cbuo.SetCreatedBy(*i)
	}
	return cbuo
}

// AddCreatedBy adds i to the "created_by" field.
func (cbuo *CostBillUpdateOne) AddCreatedBy(i int64) *CostBillUpdateOne {
	cbuo.mutation.AddCreatedBy(i)
	return cbuo
}

// SetUpdatedBy sets the "updated_by" field.
func (cbuo *CostBillUpdateOne) SetUpdatedBy(i int64) *CostBillUpdateOne {
	cbuo.mutation.ResetUpdatedBy()
	cbuo.mutation.SetUpdatedBy(i)
	return cbuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cbuo *CostBillUpdateOne) SetNillableUpdatedBy(i *int64) *CostBillUpdateOne {
	if i != nil {
		cbuo.SetUpdatedBy(*i)
	}
	return cbuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (cbuo *CostBillUpdateOne) AddUpdatedBy(i int64) *CostBillUpdateOne {
	cbuo.mutation.AddUpdatedBy(i)
	return cbuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cbuo *CostBillUpdateOne) SetUpdatedAt(t time.Time) *CostBillUpdateOne {
	cbuo.mutation.SetUpdatedAt(t)
	return cbuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cbuo *CostBillUpdateOne) SetDeletedAt(t time.Time) *CostBillUpdateOne {
	cbuo.mutation.SetDeletedAt(t)
	return cbuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cbuo *CostBillUpdateOne) SetNillableDeletedAt(t *time.Time) *CostBillUpdateOne {
	if t != nil {
		cbuo.SetDeletedAt(*t)
	}
	return cbuo
}

// SetType sets the "type" field.
func (cbuo *CostBillUpdateOne) SetType(c costbill.Type) *CostBillUpdateOne {
	cbuo.mutation.SetType(c)
	return cbuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cbuo *CostBillUpdateOne) SetNillableType(c *costbill.Type) *CostBillUpdateOne {
	if c != nil {
		cbuo.SetType(*c)
	}
	return cbuo
}

// SetWay sets the "way" field.
func (cbuo *CostBillUpdateOne) SetWay(c costbill.Way) *CostBillUpdateOne {
	cbuo.mutation.SetWay(c)
	return cbuo
}

// SetNillableWay sets the "way" field if the given value is not nil.
func (cbuo *CostBillUpdateOne) SetNillableWay(c *costbill.Way) *CostBillUpdateOne {
	if c != nil {
		cbuo.SetWay(*c)
	}
	return cbuo
}

// SetIsAdd sets the "is_add" field.
func (cbuo *CostBillUpdateOne) SetIsAdd(b bool) *CostBillUpdateOne {
	cbuo.mutation.SetIsAdd(b)
	return cbuo
}

// SetNillableIsAdd sets the "is_add" field if the given value is not nil.
func (cbuo *CostBillUpdateOne) SetNillableIsAdd(b *bool) *CostBillUpdateOne {
	if b != nil {
		cbuo.SetIsAdd(*b)
	}
	return cbuo
}

// SetUserID sets the "user_id" field.
func (cbuo *CostBillUpdateOne) SetUserID(i int64) *CostBillUpdateOne {
	cbuo.mutation.SetUserID(i)
	return cbuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cbuo *CostBillUpdateOne) SetNillableUserID(i *int64) *CostBillUpdateOne {
	if i != nil {
		cbuo.SetUserID(*i)
	}
	return cbuo
}

// SetSerialNumber sets the "serial_number" field.
func (cbuo *CostBillUpdateOne) SetSerialNumber(s string) *CostBillUpdateOne {
	cbuo.mutation.SetSerialNumber(s)
	return cbuo
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (cbuo *CostBillUpdateOne) SetNillableSerialNumber(s *string) *CostBillUpdateOne {
	if s != nil {
		cbuo.SetSerialNumber(*s)
	}
	return cbuo
}

// SetCostAccountID sets the "cost_account_id" field.
func (cbuo *CostBillUpdateOne) SetCostAccountID(i int64) *CostBillUpdateOne {
	cbuo.mutation.SetCostAccountID(i)
	return cbuo
}

// SetNillableCostAccountID sets the "cost_account_id" field if the given value is not nil.
func (cbuo *CostBillUpdateOne) SetNillableCostAccountID(i *int64) *CostBillUpdateOne {
	if i != nil {
		cbuo.SetCostAccountID(*i)
	}
	return cbuo
}

// SetPureCep sets the "pure_cep" field.
func (cbuo *CostBillUpdateOne) SetPureCep(i int64) *CostBillUpdateOne {
	cbuo.mutation.ResetPureCep()
	cbuo.mutation.SetPureCep(i)
	return cbuo
}

// SetNillablePureCep sets the "pure_cep" field if the given value is not nil.
func (cbuo *CostBillUpdateOne) SetNillablePureCep(i *int64) *CostBillUpdateOne {
	if i != nil {
		cbuo.SetPureCep(*i)
	}
	return cbuo
}

// AddPureCep adds i to the "pure_cep" field.
func (cbuo *CostBillUpdateOne) AddPureCep(i int64) *CostBillUpdateOne {
	cbuo.mutation.AddPureCep(i)
	return cbuo
}

// SetGiftCep sets the "gift_cep" field.
func (cbuo *CostBillUpdateOne) SetGiftCep(i int64) *CostBillUpdateOne {
	cbuo.mutation.ResetGiftCep()
	cbuo.mutation.SetGiftCep(i)
	return cbuo
}

// SetNillableGiftCep sets the "gift_cep" field if the given value is not nil.
func (cbuo *CostBillUpdateOne) SetNillableGiftCep(i *int64) *CostBillUpdateOne {
	if i != nil {
		cbuo.SetGiftCep(*i)
	}
	return cbuo
}

// AddGiftCep adds i to the "gift_cep" field.
func (cbuo *CostBillUpdateOne) AddGiftCep(i int64) *CostBillUpdateOne {
	cbuo.mutation.AddGiftCep(i)
	return cbuo
}

// SetReasonID sets the "reason_id" field.
func (cbuo *CostBillUpdateOne) SetReasonID(i int64) *CostBillUpdateOne {
	cbuo.mutation.SetReasonID(i)
	return cbuo
}

// SetNillableReasonID sets the "reason_id" field if the given value is not nil.
func (cbuo *CostBillUpdateOne) SetNillableReasonID(i *int64) *CostBillUpdateOne {
	if i != nil {
		cbuo.SetReasonID(*i)
	}
	return cbuo
}

// ClearReasonID clears the value of the "reason_id" field.
func (cbuo *CostBillUpdateOne) ClearReasonID() *CostBillUpdateOne {
	cbuo.mutation.ClearReasonID()
	return cbuo
}

// SetStatus sets the "status" field.
func (cbuo *CostBillUpdateOne) SetStatus(es enums.BillStatus) *CostBillUpdateOne {
	cbuo.mutation.SetStatus(es)
	return cbuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cbuo *CostBillUpdateOne) SetNillableStatus(es *enums.BillStatus) *CostBillUpdateOne {
	if es != nil {
		cbuo.SetStatus(*es)
	}
	return cbuo
}

// SetMarketAccountID sets the "market_account_id" field.
func (cbuo *CostBillUpdateOne) SetMarketAccountID(i int64) *CostBillUpdateOne {
	cbuo.mutation.SetMarketAccountID(i)
	return cbuo
}

// SetNillableMarketAccountID sets the "market_account_id" field if the given value is not nil.
func (cbuo *CostBillUpdateOne) SetNillableMarketAccountID(i *int64) *CostBillUpdateOne {
	if i != nil {
		cbuo.SetMarketAccountID(*i)
	}
	return cbuo
}

// SetCampaignOrderID sets the "campaign_order_id" field.
func (cbuo *CostBillUpdateOne) SetCampaignOrderID(i int64) *CostBillUpdateOne {
	cbuo.mutation.SetCampaignOrderID(i)
	return cbuo
}

// SetNillableCampaignOrderID sets the "campaign_order_id" field if the given value is not nil.
func (cbuo *CostBillUpdateOne) SetNillableCampaignOrderID(i *int64) *CostBillUpdateOne {
	if i != nil {
		cbuo.SetCampaignOrderID(*i)
	}
	return cbuo
}

// SetUser sets the "user" edge to the User entity.
func (cbuo *CostBillUpdateOne) SetUser(u *User) *CostBillUpdateOne {
	return cbuo.SetUserID(u.ID)
}

// SetCostAccount sets the "cost_account" edge to the CostAccount entity.
func (cbuo *CostBillUpdateOne) SetCostAccount(c *CostAccount) *CostBillUpdateOne {
	return cbuo.SetCostAccountID(c.ID)
}

// SetRechargeOrderID sets the "recharge_order" edge to the RechargeOrder entity by ID.
func (cbuo *CostBillUpdateOne) SetRechargeOrderID(id int64) *CostBillUpdateOne {
	cbuo.mutation.SetRechargeOrderID(id)
	return cbuo
}

// SetNillableRechargeOrderID sets the "recharge_order" edge to the RechargeOrder entity by ID if the given value is not nil.
func (cbuo *CostBillUpdateOne) SetNillableRechargeOrderID(id *int64) *CostBillUpdateOne {
	if id != nil {
		cbuo = cbuo.SetRechargeOrderID(*id)
	}
	return cbuo
}

// SetRechargeOrder sets the "recharge_order" edge to the RechargeOrder entity.
func (cbuo *CostBillUpdateOne) SetRechargeOrder(r *RechargeOrder) *CostBillUpdateOne {
	return cbuo.SetRechargeOrderID(r.ID)
}

// SetMissionConsumeOrderID sets the "mission_consume_order" edge to the MissionConsumeOrder entity by ID.
func (cbuo *CostBillUpdateOne) SetMissionConsumeOrderID(id int64) *CostBillUpdateOne {
	cbuo.mutation.SetMissionConsumeOrderID(id)
	return cbuo
}

// SetNillableMissionConsumeOrderID sets the "mission_consume_order" edge to the MissionConsumeOrder entity by ID if the given value is not nil.
func (cbuo *CostBillUpdateOne) SetNillableMissionConsumeOrderID(id *int64) *CostBillUpdateOne {
	if id != nil {
		cbuo = cbuo.SetMissionConsumeOrderID(*id)
	}
	return cbuo
}

// SetMissionConsumeOrder sets the "mission_consume_order" edge to the MissionConsumeOrder entity.
func (cbuo *CostBillUpdateOne) SetMissionConsumeOrder(m *MissionConsumeOrder) *CostBillUpdateOne {
	return cbuo.SetMissionConsumeOrderID(m.ID)
}

// SetPlatformAccountID sets the "platform_account" edge to the PlatformAccount entity by ID.
func (cbuo *CostBillUpdateOne) SetPlatformAccountID(id int64) *CostBillUpdateOne {
	cbuo.mutation.SetPlatformAccountID(id)
	return cbuo
}

// SetPlatformAccount sets the "platform_account" edge to the PlatformAccount entity.
func (cbuo *CostBillUpdateOne) SetPlatformAccount(p *PlatformAccount) *CostBillUpdateOne {
	return cbuo.SetPlatformAccountID(p.ID)
}

// SetCampaignOrder sets the "campaign_order" edge to the CampaignOrder entity.
func (cbuo *CostBillUpdateOne) SetCampaignOrder(c *CampaignOrder) *CostBillUpdateOne {
	return cbuo.SetCampaignOrderID(c.ID)
}

// Mutation returns the CostBillMutation object of the builder.
func (cbuo *CostBillUpdateOne) Mutation() *CostBillMutation {
	return cbuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cbuo *CostBillUpdateOne) ClearUser() *CostBillUpdateOne {
	cbuo.mutation.ClearUser()
	return cbuo
}

// ClearCostAccount clears the "cost_account" edge to the CostAccount entity.
func (cbuo *CostBillUpdateOne) ClearCostAccount() *CostBillUpdateOne {
	cbuo.mutation.ClearCostAccount()
	return cbuo
}

// ClearRechargeOrder clears the "recharge_order" edge to the RechargeOrder entity.
func (cbuo *CostBillUpdateOne) ClearRechargeOrder() *CostBillUpdateOne {
	cbuo.mutation.ClearRechargeOrder()
	return cbuo
}

// ClearMissionConsumeOrder clears the "mission_consume_order" edge to the MissionConsumeOrder entity.
func (cbuo *CostBillUpdateOne) ClearMissionConsumeOrder() *CostBillUpdateOne {
	cbuo.mutation.ClearMissionConsumeOrder()
	return cbuo
}

// ClearPlatformAccount clears the "platform_account" edge to the PlatformAccount entity.
func (cbuo *CostBillUpdateOne) ClearPlatformAccount() *CostBillUpdateOne {
	cbuo.mutation.ClearPlatformAccount()
	return cbuo
}

// ClearCampaignOrder clears the "campaign_order" edge to the CampaignOrder entity.
func (cbuo *CostBillUpdateOne) ClearCampaignOrder() *CostBillUpdateOne {
	cbuo.mutation.ClearCampaignOrder()
	return cbuo
}

// Where appends a list predicates to the CostBillUpdate builder.
func (cbuo *CostBillUpdateOne) Where(ps ...predicate.CostBill) *CostBillUpdateOne {
	cbuo.mutation.Where(ps...)
	return cbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cbuo *CostBillUpdateOne) Select(field string, fields ...string) *CostBillUpdateOne {
	cbuo.fields = append([]string{field}, fields...)
	return cbuo
}

// Save executes the query and returns the updated CostBill entity.
func (cbuo *CostBillUpdateOne) Save(ctx context.Context) (*CostBill, error) {
	cbuo.defaults()
	return withHooks(ctx, cbuo.sqlSave, cbuo.mutation, cbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cbuo *CostBillUpdateOne) SaveX(ctx context.Context) *CostBill {
	node, err := cbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cbuo *CostBillUpdateOne) Exec(ctx context.Context) error {
	_, err := cbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cbuo *CostBillUpdateOne) ExecX(ctx context.Context) {
	if err := cbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cbuo *CostBillUpdateOne) defaults() {
	if _, ok := cbuo.mutation.UpdatedAt(); !ok {
		v := costbill.UpdateDefaultUpdatedAt()
		cbuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cbuo *CostBillUpdateOne) check() error {
	if v, ok := cbuo.mutation.GetType(); ok {
		if err := costbill.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "CostBill.type": %w`, err)}
		}
	}
	if v, ok := cbuo.mutation.Way(); ok {
		if err := costbill.WayValidator(v); err != nil {
			return &ValidationError{Name: "way", err: fmt.Errorf(`cep_ent: validator failed for field "CostBill.way": %w`, err)}
		}
	}
	if v, ok := cbuo.mutation.Status(); ok {
		if err := costbill.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "CostBill.status": %w`, err)}
		}
	}
	if _, ok := cbuo.mutation.UserID(); cbuo.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "CostBill.user"`)
	}
	if _, ok := cbuo.mutation.CostAccountID(); cbuo.mutation.CostAccountCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "CostBill.cost_account"`)
	}
	if _, ok := cbuo.mutation.PlatformAccountID(); cbuo.mutation.PlatformAccountCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "CostBill.platform_account"`)
	}
	if _, ok := cbuo.mutation.CampaignOrderID(); cbuo.mutation.CampaignOrderCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "CostBill.campaign_order"`)
	}
	return nil
}

func (cbuo *CostBillUpdateOne) sqlSave(ctx context.Context) (_node *CostBill, err error) {
	if err := cbuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(costbill.Table, costbill.Columns, sqlgraph.NewFieldSpec(costbill.FieldID, field.TypeInt64))
	id, ok := cbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "CostBill.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, costbill.FieldID)
		for _, f := range fields {
			if !costbill.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != costbill.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cbuo.mutation.CreatedBy(); ok {
		_spec.SetField(costbill.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := cbuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(costbill.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := cbuo.mutation.UpdatedBy(); ok {
		_spec.SetField(costbill.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := cbuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(costbill.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := cbuo.mutation.UpdatedAt(); ok {
		_spec.SetField(costbill.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cbuo.mutation.DeletedAt(); ok {
		_spec.SetField(costbill.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := cbuo.mutation.GetType(); ok {
		_spec.SetField(costbill.FieldType, field.TypeEnum, value)
	}
	if value, ok := cbuo.mutation.Way(); ok {
		_spec.SetField(costbill.FieldWay, field.TypeEnum, value)
	}
	if value, ok := cbuo.mutation.IsAdd(); ok {
		_spec.SetField(costbill.FieldIsAdd, field.TypeBool, value)
	}
	if value, ok := cbuo.mutation.SerialNumber(); ok {
		_spec.SetField(costbill.FieldSerialNumber, field.TypeString, value)
	}
	if value, ok := cbuo.mutation.PureCep(); ok {
		_spec.SetField(costbill.FieldPureCep, field.TypeInt64, value)
	}
	if value, ok := cbuo.mutation.AddedPureCep(); ok {
		_spec.AddField(costbill.FieldPureCep, field.TypeInt64, value)
	}
	if value, ok := cbuo.mutation.GiftCep(); ok {
		_spec.SetField(costbill.FieldGiftCep, field.TypeInt64, value)
	}
	if value, ok := cbuo.mutation.AddedGiftCep(); ok {
		_spec.AddField(costbill.FieldGiftCep, field.TypeInt64, value)
	}
	if value, ok := cbuo.mutation.Status(); ok {
		_spec.SetField(costbill.FieldStatus, field.TypeEnum, value)
	}
	if cbuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costbill.UserTable,
			Columns: []string{costbill.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costbill.UserTable,
			Columns: []string{costbill.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cbuo.mutation.CostAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costbill.CostAccountTable,
			Columns: []string{costbill.CostAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costaccount.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbuo.mutation.CostAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costbill.CostAccountTable,
			Columns: []string{costbill.CostAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costaccount.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cbuo.mutation.RechargeOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costbill.RechargeOrderTable,
			Columns: []string{costbill.RechargeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rechargeorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbuo.mutation.RechargeOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costbill.RechargeOrderTable,
			Columns: []string{costbill.RechargeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rechargeorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cbuo.mutation.MissionConsumeOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costbill.MissionConsumeOrderTable,
			Columns: []string{costbill.MissionConsumeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbuo.mutation.MissionConsumeOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costbill.MissionConsumeOrderTable,
			Columns: []string{costbill.MissionConsumeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cbuo.mutation.PlatformAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costbill.PlatformAccountTable,
			Columns: []string{costbill.PlatformAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformaccount.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbuo.mutation.PlatformAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costbill.PlatformAccountTable,
			Columns: []string{costbill.PlatformAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformaccount.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cbuo.mutation.CampaignOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costbill.CampaignOrderTable,
			Columns: []string{costbill.CampaignOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaignorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbuo.mutation.CampaignOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costbill.CampaignOrderTable,
			Columns: []string{costbill.CampaignOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaignorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CostBill{config: cbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{costbill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cbuo.mutation.done = true
	return _node, nil
}
