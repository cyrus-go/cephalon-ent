// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/surveyanswer"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/surveyquestion"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/surveyresponse"
)

// 问卷问题答案表
type SurveyAnswer struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建者 ID
	CreatedBy int64 `json:"created_by,string"`
	// 更新者 ID
	UpdatedBy int64 `json:"updated_by,string"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// 问卷用户调查结果 ID，一个用户同一个问卷只能回答一次，这个问卷会有多个问题和答案
	SurveyResponseID int64 `json:"survey_response_id,string"`
	// 问题 id
	SurveyQuestionID int64 `json:"survey_question_id,string"`
	// 答案的内容
	SurveyAnswer string `json:"survey_answer"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SurveyAnswerQuery when eager-loading is set.
	Edges        SurveyAnswerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SurveyAnswerEdges holds the relations/edges for other nodes in the graph.
type SurveyAnswerEdges struct {
	// SurveyResponse holds the value of the survey_response edge.
	SurveyResponse *SurveyResponse `json:"survey_response,omitempty"`
	// SurveyQuestion holds the value of the survey_question edge.
	SurveyQuestion *SurveyQuestion `json:"survey_question,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SurveyResponseOrErr returns the SurveyResponse value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SurveyAnswerEdges) SurveyResponseOrErr() (*SurveyResponse, error) {
	if e.loadedTypes[0] {
		if e.SurveyResponse == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: surveyresponse.Label}
		}
		return e.SurveyResponse, nil
	}
	return nil, &NotLoadedError{edge: "survey_response"}
}

// SurveyQuestionOrErr returns the SurveyQuestion value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SurveyAnswerEdges) SurveyQuestionOrErr() (*SurveyQuestion, error) {
	if e.loadedTypes[1] {
		if e.SurveyQuestion == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: surveyquestion.Label}
		}
		return e.SurveyQuestion, nil
	}
	return nil, &NotLoadedError{edge: "survey_question"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SurveyAnswer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case surveyanswer.FieldID, surveyanswer.FieldCreatedBy, surveyanswer.FieldUpdatedBy, surveyanswer.FieldSurveyResponseID, surveyanswer.FieldSurveyQuestionID:
			values[i] = new(sql.NullInt64)
		case surveyanswer.FieldSurveyAnswer:
			values[i] = new(sql.NullString)
		case surveyanswer.FieldCreatedAt, surveyanswer.FieldUpdatedAt, surveyanswer.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SurveyAnswer fields.
func (sa *SurveyAnswer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case surveyanswer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sa.ID = int64(value.Int64)
		case surveyanswer.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				sa.CreatedBy = value.Int64
			}
		case surveyanswer.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				sa.UpdatedBy = value.Int64
			}
		case surveyanswer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sa.CreatedAt = value.Time
			}
		case surveyanswer.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sa.UpdatedAt = value.Time
			}
		case surveyanswer.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sa.DeletedAt = value.Time
			}
		case surveyanswer.FieldSurveyResponseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field survey_response_id", values[i])
			} else if value.Valid {
				sa.SurveyResponseID = value.Int64
			}
		case surveyanswer.FieldSurveyQuestionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field survey_question_id", values[i])
			} else if value.Valid {
				sa.SurveyQuestionID = value.Int64
			}
		case surveyanswer.FieldSurveyAnswer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field survey_answer", values[i])
			} else if value.Valid {
				sa.SurveyAnswer = value.String
			}
		default:
			sa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SurveyAnswer.
// This includes values selected through modifiers, order, etc.
func (sa *SurveyAnswer) Value(name string) (ent.Value, error) {
	return sa.selectValues.Get(name)
}

// QuerySurveyResponse queries the "survey_response" edge of the SurveyAnswer entity.
func (sa *SurveyAnswer) QuerySurveyResponse() *SurveyResponseQuery {
	return NewSurveyAnswerClient(sa.config).QuerySurveyResponse(sa)
}

// QuerySurveyQuestion queries the "survey_question" edge of the SurveyAnswer entity.
func (sa *SurveyAnswer) QuerySurveyQuestion() *SurveyQuestionQuery {
	return NewSurveyAnswerClient(sa.config).QuerySurveyQuestion(sa)
}

// Update returns a builder for updating this SurveyAnswer.
// Note that you need to call SurveyAnswer.Unwrap() before calling this method if this SurveyAnswer
// was returned from a transaction, and the transaction was committed or rolled back.
func (sa *SurveyAnswer) Update() *SurveyAnswerUpdateOne {
	return NewSurveyAnswerClient(sa.config).UpdateOne(sa)
}

// Unwrap unwraps the SurveyAnswer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sa *SurveyAnswer) Unwrap() *SurveyAnswer {
	_tx, ok := sa.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: SurveyAnswer is not a transactional entity")
	}
	sa.config.driver = _tx.drv
	return sa
}

// String implements the fmt.Stringer.
func (sa *SurveyAnswer) String() string {
	var builder strings.Builder
	builder.WriteString("SurveyAnswer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sa.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", sa.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", sa.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(sa.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("survey_response_id=")
	builder.WriteString(fmt.Sprintf("%v", sa.SurveyResponseID))
	builder.WriteString(", ")
	builder.WriteString("survey_question_id=")
	builder.WriteString(fmt.Sprintf("%v", sa.SurveyQuestionID))
	builder.WriteString(", ")
	builder.WriteString("survey_answer=")
	builder.WriteString(sa.SurveyAnswer)
	builder.WriteByte(')')
	return builder.String()
}

// SurveyAnswers is a parsable slice of SurveyAnswer.
type SurveyAnswers []*SurveyAnswer
