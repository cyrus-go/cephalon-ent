// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/device"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/mission"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionfailedfeedback"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
)

// MissionFailedFeedbackCreate is the builder for creating a MissionFailedFeedback entity.
type MissionFailedFeedbackCreate struct {
	config
	mutation *MissionFailedFeedbackMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (mffc *MissionFailedFeedbackCreate) SetCreatedBy(i int64) *MissionFailedFeedbackCreate {
	mffc.mutation.SetCreatedBy(i)
	return mffc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mffc *MissionFailedFeedbackCreate) SetNillableCreatedBy(i *int64) *MissionFailedFeedbackCreate {
	if i != nil {
		mffc.SetCreatedBy(*i)
	}
	return mffc
}

// SetUpdatedBy sets the "updated_by" field.
func (mffc *MissionFailedFeedbackCreate) SetUpdatedBy(i int64) *MissionFailedFeedbackCreate {
	mffc.mutation.SetUpdatedBy(i)
	return mffc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mffc *MissionFailedFeedbackCreate) SetNillableUpdatedBy(i *int64) *MissionFailedFeedbackCreate {
	if i != nil {
		mffc.SetUpdatedBy(*i)
	}
	return mffc
}

// SetCreatedAt sets the "created_at" field.
func (mffc *MissionFailedFeedbackCreate) SetCreatedAt(t time.Time) *MissionFailedFeedbackCreate {
	mffc.mutation.SetCreatedAt(t)
	return mffc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mffc *MissionFailedFeedbackCreate) SetNillableCreatedAt(t *time.Time) *MissionFailedFeedbackCreate {
	if t != nil {
		mffc.SetCreatedAt(*t)
	}
	return mffc
}

// SetUpdatedAt sets the "updated_at" field.
func (mffc *MissionFailedFeedbackCreate) SetUpdatedAt(t time.Time) *MissionFailedFeedbackCreate {
	mffc.mutation.SetUpdatedAt(t)
	return mffc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mffc *MissionFailedFeedbackCreate) SetNillableUpdatedAt(t *time.Time) *MissionFailedFeedbackCreate {
	if t != nil {
		mffc.SetUpdatedAt(*t)
	}
	return mffc
}

// SetDeletedAt sets the "deleted_at" field.
func (mffc *MissionFailedFeedbackCreate) SetDeletedAt(t time.Time) *MissionFailedFeedbackCreate {
	mffc.mutation.SetDeletedAt(t)
	return mffc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mffc *MissionFailedFeedbackCreate) SetNillableDeletedAt(t *time.Time) *MissionFailedFeedbackCreate {
	if t != nil {
		mffc.SetDeletedAt(*t)
	}
	return mffc
}

// SetUserID sets the "user_id" field.
func (mffc *MissionFailedFeedbackCreate) SetUserID(i int64) *MissionFailedFeedbackCreate {
	mffc.mutation.SetUserID(i)
	return mffc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (mffc *MissionFailedFeedbackCreate) SetNillableUserID(i *int64) *MissionFailedFeedbackCreate {
	if i != nil {
		mffc.SetUserID(*i)
	}
	return mffc
}

// SetDeviceID sets the "device_id" field.
func (mffc *MissionFailedFeedbackCreate) SetDeviceID(i int64) *MissionFailedFeedbackCreate {
	mffc.mutation.SetDeviceID(i)
	return mffc
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (mffc *MissionFailedFeedbackCreate) SetNillableDeviceID(i *int64) *MissionFailedFeedbackCreate {
	if i != nil {
		mffc.SetDeviceID(*i)
	}
	return mffc
}

// SetMissionID sets the "mission_id" field.
func (mffc *MissionFailedFeedbackCreate) SetMissionID(i int64) *MissionFailedFeedbackCreate {
	mffc.mutation.SetMissionID(i)
	return mffc
}

// SetNillableMissionID sets the "mission_id" field if the given value is not nil.
func (mffc *MissionFailedFeedbackCreate) SetNillableMissionID(i *int64) *MissionFailedFeedbackCreate {
	if i != nil {
		mffc.SetMissionID(*i)
	}
	return mffc
}

// SetMissionName sets the "mission_name" field.
func (mffc *MissionFailedFeedbackCreate) SetMissionName(s string) *MissionFailedFeedbackCreate {
	mffc.mutation.SetMissionName(s)
	return mffc
}

// SetNillableMissionName sets the "mission_name" field if the given value is not nil.
func (mffc *MissionFailedFeedbackCreate) SetNillableMissionName(s *string) *MissionFailedFeedbackCreate {
	if s != nil {
		mffc.SetMissionName(*s)
	}
	return mffc
}

// SetID sets the "id" field.
func (mffc *MissionFailedFeedbackCreate) SetID(i int64) *MissionFailedFeedbackCreate {
	mffc.mutation.SetID(i)
	return mffc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mffc *MissionFailedFeedbackCreate) SetNillableID(i *int64) *MissionFailedFeedbackCreate {
	if i != nil {
		mffc.SetID(*i)
	}
	return mffc
}

// SetUser sets the "user" edge to the User entity.
func (mffc *MissionFailedFeedbackCreate) SetUser(u *User) *MissionFailedFeedbackCreate {
	return mffc.SetUserID(u.ID)
}

// SetDevice sets the "device" edge to the Device entity.
func (mffc *MissionFailedFeedbackCreate) SetDevice(d *Device) *MissionFailedFeedbackCreate {
	return mffc.SetDeviceID(d.ID)
}

// SetMission sets the "mission" edge to the Mission entity.
func (mffc *MissionFailedFeedbackCreate) SetMission(m *Mission) *MissionFailedFeedbackCreate {
	return mffc.SetMissionID(m.ID)
}

// Mutation returns the MissionFailedFeedbackMutation object of the builder.
func (mffc *MissionFailedFeedbackCreate) Mutation() *MissionFailedFeedbackMutation {
	return mffc.mutation
}

// Save creates the MissionFailedFeedback in the database.
func (mffc *MissionFailedFeedbackCreate) Save(ctx context.Context) (*MissionFailedFeedback, error) {
	mffc.defaults()
	return withHooks(ctx, mffc.sqlSave, mffc.mutation, mffc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mffc *MissionFailedFeedbackCreate) SaveX(ctx context.Context) *MissionFailedFeedback {
	v, err := mffc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mffc *MissionFailedFeedbackCreate) Exec(ctx context.Context) error {
	_, err := mffc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mffc *MissionFailedFeedbackCreate) ExecX(ctx context.Context) {
	if err := mffc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mffc *MissionFailedFeedbackCreate) defaults() {
	if _, ok := mffc.mutation.CreatedBy(); !ok {
		v := missionfailedfeedback.DefaultCreatedBy
		mffc.mutation.SetCreatedBy(v)
	}
	if _, ok := mffc.mutation.UpdatedBy(); !ok {
		v := missionfailedfeedback.DefaultUpdatedBy
		mffc.mutation.SetUpdatedBy(v)
	}
	if _, ok := mffc.mutation.CreatedAt(); !ok {
		v := missionfailedfeedback.DefaultCreatedAt()
		mffc.mutation.SetCreatedAt(v)
	}
	if _, ok := mffc.mutation.UpdatedAt(); !ok {
		v := missionfailedfeedback.DefaultUpdatedAt()
		mffc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mffc.mutation.DeletedAt(); !ok {
		v := missionfailedfeedback.DefaultDeletedAt
		mffc.mutation.SetDeletedAt(v)
	}
	if _, ok := mffc.mutation.UserID(); !ok {
		v := missionfailedfeedback.DefaultUserID
		mffc.mutation.SetUserID(v)
	}
	if _, ok := mffc.mutation.DeviceID(); !ok {
		v := missionfailedfeedback.DefaultDeviceID
		mffc.mutation.SetDeviceID(v)
	}
	if _, ok := mffc.mutation.MissionID(); !ok {
		v := missionfailedfeedback.DefaultMissionID
		mffc.mutation.SetMissionID(v)
	}
	if _, ok := mffc.mutation.MissionName(); !ok {
		v := missionfailedfeedback.DefaultMissionName
		mffc.mutation.SetMissionName(v)
	}
	if _, ok := mffc.mutation.ID(); !ok {
		v := missionfailedfeedback.DefaultID()
		mffc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mffc *MissionFailedFeedbackCreate) check() error {
	if _, ok := mffc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "MissionFailedFeedback.created_by"`)}
	}
	if _, ok := mffc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "MissionFailedFeedback.updated_by"`)}
	}
	if _, ok := mffc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "MissionFailedFeedback.created_at"`)}
	}
	if _, ok := mffc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "MissionFailedFeedback.updated_at"`)}
	}
	if _, ok := mffc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "MissionFailedFeedback.deleted_at"`)}
	}
	if _, ok := mffc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "MissionFailedFeedback.user_id"`)}
	}
	if _, ok := mffc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`cep_ent: missing required field "MissionFailedFeedback.device_id"`)}
	}
	if _, ok := mffc.mutation.MissionID(); !ok {
		return &ValidationError{Name: "mission_id", err: errors.New(`cep_ent: missing required field "MissionFailedFeedback.mission_id"`)}
	}
	if _, ok := mffc.mutation.MissionName(); !ok {
		return &ValidationError{Name: "mission_name", err: errors.New(`cep_ent: missing required field "MissionFailedFeedback.mission_name"`)}
	}
	if _, ok := mffc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "MissionFailedFeedback.user"`)}
	}
	if _, ok := mffc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device", err: errors.New(`cep_ent: missing required edge "MissionFailedFeedback.device"`)}
	}
	if _, ok := mffc.mutation.MissionID(); !ok {
		return &ValidationError{Name: "mission", err: errors.New(`cep_ent: missing required edge "MissionFailedFeedback.mission"`)}
	}
	return nil
}

func (mffc *MissionFailedFeedbackCreate) sqlSave(ctx context.Context) (*MissionFailedFeedback, error) {
	if err := mffc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mffc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mffc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	mffc.mutation.id = &_node.ID
	mffc.mutation.done = true
	return _node, nil
}

func (mffc *MissionFailedFeedbackCreate) createSpec() (*MissionFailedFeedback, *sqlgraph.CreateSpec) {
	var (
		_node = &MissionFailedFeedback{config: mffc.config}
		_spec = sqlgraph.NewCreateSpec(missionfailedfeedback.Table, sqlgraph.NewFieldSpec(missionfailedfeedback.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = mffc.conflict
	if id, ok := mffc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mffc.mutation.CreatedBy(); ok {
		_spec.SetField(missionfailedfeedback.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := mffc.mutation.UpdatedBy(); ok {
		_spec.SetField(missionfailedfeedback.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := mffc.mutation.CreatedAt(); ok {
		_spec.SetField(missionfailedfeedback.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mffc.mutation.UpdatedAt(); ok {
		_spec.SetField(missionfailedfeedback.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mffc.mutation.DeletedAt(); ok {
		_spec.SetField(missionfailedfeedback.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := mffc.mutation.MissionName(); ok {
		_spec.SetField(missionfailedfeedback.FieldMissionName, field.TypeString, value)
		_node.MissionName = value
	}
	if nodes := mffc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionfailedfeedback.UserTable,
			Columns: []string{missionfailedfeedback.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mffc.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionfailedfeedback.DeviceTable,
			Columns: []string{missionfailedfeedback.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DeviceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mffc.mutation.MissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   missionfailedfeedback.MissionTable,
			Columns: []string{missionfailedfeedback.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MissionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MissionFailedFeedback.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MissionFailedFeedbackUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (mffc *MissionFailedFeedbackCreate) OnConflict(opts ...sql.ConflictOption) *MissionFailedFeedbackUpsertOne {
	mffc.conflict = opts
	return &MissionFailedFeedbackUpsertOne{
		create: mffc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MissionFailedFeedback.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mffc *MissionFailedFeedbackCreate) OnConflictColumns(columns ...string) *MissionFailedFeedbackUpsertOne {
	mffc.conflict = append(mffc.conflict, sql.ConflictColumns(columns...))
	return &MissionFailedFeedbackUpsertOne{
		create: mffc,
	}
}

type (
	// MissionFailedFeedbackUpsertOne is the builder for "upsert"-ing
	//  one MissionFailedFeedback node.
	MissionFailedFeedbackUpsertOne struct {
		create *MissionFailedFeedbackCreate
	}

	// MissionFailedFeedbackUpsert is the "OnConflict" setter.
	MissionFailedFeedbackUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *MissionFailedFeedbackUpsert) SetCreatedBy(v int64) *MissionFailedFeedbackUpsert {
	u.Set(missionfailedfeedback.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MissionFailedFeedbackUpsert) UpdateCreatedBy() *MissionFailedFeedbackUpsert {
	u.SetExcluded(missionfailedfeedback.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *MissionFailedFeedbackUpsert) AddCreatedBy(v int64) *MissionFailedFeedbackUpsert {
	u.Add(missionfailedfeedback.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MissionFailedFeedbackUpsert) SetUpdatedBy(v int64) *MissionFailedFeedbackUpsert {
	u.Set(missionfailedfeedback.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MissionFailedFeedbackUpsert) UpdateUpdatedBy() *MissionFailedFeedbackUpsert {
	u.SetExcluded(missionfailedfeedback.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MissionFailedFeedbackUpsert) AddUpdatedBy(v int64) *MissionFailedFeedbackUpsert {
	u.Add(missionfailedfeedback.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MissionFailedFeedbackUpsert) SetUpdatedAt(v time.Time) *MissionFailedFeedbackUpsert {
	u.Set(missionfailedfeedback.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MissionFailedFeedbackUpsert) UpdateUpdatedAt() *MissionFailedFeedbackUpsert {
	u.SetExcluded(missionfailedfeedback.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MissionFailedFeedbackUpsert) SetDeletedAt(v time.Time) *MissionFailedFeedbackUpsert {
	u.Set(missionfailedfeedback.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MissionFailedFeedbackUpsert) UpdateDeletedAt() *MissionFailedFeedbackUpsert {
	u.SetExcluded(missionfailedfeedback.FieldDeletedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *MissionFailedFeedbackUpsert) SetUserID(v int64) *MissionFailedFeedbackUpsert {
	u.Set(missionfailedfeedback.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *MissionFailedFeedbackUpsert) UpdateUserID() *MissionFailedFeedbackUpsert {
	u.SetExcluded(missionfailedfeedback.FieldUserID)
	return u
}

// SetDeviceID sets the "device_id" field.
func (u *MissionFailedFeedbackUpsert) SetDeviceID(v int64) *MissionFailedFeedbackUpsert {
	u.Set(missionfailedfeedback.FieldDeviceID, v)
	return u
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *MissionFailedFeedbackUpsert) UpdateDeviceID() *MissionFailedFeedbackUpsert {
	u.SetExcluded(missionfailedfeedback.FieldDeviceID)
	return u
}

// SetMissionID sets the "mission_id" field.
func (u *MissionFailedFeedbackUpsert) SetMissionID(v int64) *MissionFailedFeedbackUpsert {
	u.Set(missionfailedfeedback.FieldMissionID, v)
	return u
}

// UpdateMissionID sets the "mission_id" field to the value that was provided on create.
func (u *MissionFailedFeedbackUpsert) UpdateMissionID() *MissionFailedFeedbackUpsert {
	u.SetExcluded(missionfailedfeedback.FieldMissionID)
	return u
}

// SetMissionName sets the "mission_name" field.
func (u *MissionFailedFeedbackUpsert) SetMissionName(v string) *MissionFailedFeedbackUpsert {
	u.Set(missionfailedfeedback.FieldMissionName, v)
	return u
}

// UpdateMissionName sets the "mission_name" field to the value that was provided on create.
func (u *MissionFailedFeedbackUpsert) UpdateMissionName() *MissionFailedFeedbackUpsert {
	u.SetExcluded(missionfailedfeedback.FieldMissionName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MissionFailedFeedback.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(missionfailedfeedback.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MissionFailedFeedbackUpsertOne) UpdateNewValues() *MissionFailedFeedbackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(missionfailedfeedback.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(missionfailedfeedback.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MissionFailedFeedback.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MissionFailedFeedbackUpsertOne) Ignore() *MissionFailedFeedbackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MissionFailedFeedbackUpsertOne) DoNothing() *MissionFailedFeedbackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MissionFailedFeedbackCreate.OnConflict
// documentation for more info.
func (u *MissionFailedFeedbackUpsertOne) Update(set func(*MissionFailedFeedbackUpsert)) *MissionFailedFeedbackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MissionFailedFeedbackUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *MissionFailedFeedbackUpsertOne) SetCreatedBy(v int64) *MissionFailedFeedbackUpsertOne {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *MissionFailedFeedbackUpsertOne) AddCreatedBy(v int64) *MissionFailedFeedbackUpsertOne {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MissionFailedFeedbackUpsertOne) UpdateCreatedBy() *MissionFailedFeedbackUpsertOne {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MissionFailedFeedbackUpsertOne) SetUpdatedBy(v int64) *MissionFailedFeedbackUpsertOne {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MissionFailedFeedbackUpsertOne) AddUpdatedBy(v int64) *MissionFailedFeedbackUpsertOne {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MissionFailedFeedbackUpsertOne) UpdateUpdatedBy() *MissionFailedFeedbackUpsertOne {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MissionFailedFeedbackUpsertOne) SetUpdatedAt(v time.Time) *MissionFailedFeedbackUpsertOne {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MissionFailedFeedbackUpsertOne) UpdateUpdatedAt() *MissionFailedFeedbackUpsertOne {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MissionFailedFeedbackUpsertOne) SetDeletedAt(v time.Time) *MissionFailedFeedbackUpsertOne {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MissionFailedFeedbackUpsertOne) UpdateDeletedAt() *MissionFailedFeedbackUpsertOne {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *MissionFailedFeedbackUpsertOne) SetUserID(v int64) *MissionFailedFeedbackUpsertOne {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *MissionFailedFeedbackUpsertOne) UpdateUserID() *MissionFailedFeedbackUpsertOne {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.UpdateUserID()
	})
}

// SetDeviceID sets the "device_id" field.
func (u *MissionFailedFeedbackUpsertOne) SetDeviceID(v int64) *MissionFailedFeedbackUpsertOne {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.SetDeviceID(v)
	})
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *MissionFailedFeedbackUpsertOne) UpdateDeviceID() *MissionFailedFeedbackUpsertOne {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.UpdateDeviceID()
	})
}

// SetMissionID sets the "mission_id" field.
func (u *MissionFailedFeedbackUpsertOne) SetMissionID(v int64) *MissionFailedFeedbackUpsertOne {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.SetMissionID(v)
	})
}

// UpdateMissionID sets the "mission_id" field to the value that was provided on create.
func (u *MissionFailedFeedbackUpsertOne) UpdateMissionID() *MissionFailedFeedbackUpsertOne {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.UpdateMissionID()
	})
}

// SetMissionName sets the "mission_name" field.
func (u *MissionFailedFeedbackUpsertOne) SetMissionName(v string) *MissionFailedFeedbackUpsertOne {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.SetMissionName(v)
	})
}

// UpdateMissionName sets the "mission_name" field to the value that was provided on create.
func (u *MissionFailedFeedbackUpsertOne) UpdateMissionName() *MissionFailedFeedbackUpsertOne {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.UpdateMissionName()
	})
}

// Exec executes the query.
func (u *MissionFailedFeedbackUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for MissionFailedFeedbackCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MissionFailedFeedbackUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MissionFailedFeedbackUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MissionFailedFeedbackUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MissionFailedFeedbackCreateBulk is the builder for creating many MissionFailedFeedback entities in bulk.
type MissionFailedFeedbackCreateBulk struct {
	config
	err      error
	builders []*MissionFailedFeedbackCreate
	conflict []sql.ConflictOption
}

// Save creates the MissionFailedFeedback entities in the database.
func (mffcb *MissionFailedFeedbackCreateBulk) Save(ctx context.Context) ([]*MissionFailedFeedback, error) {
	if mffcb.err != nil {
		return nil, mffcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mffcb.builders))
	nodes := make([]*MissionFailedFeedback, len(mffcb.builders))
	mutators := make([]Mutator, len(mffcb.builders))
	for i := range mffcb.builders {
		func(i int, root context.Context) {
			builder := mffcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MissionFailedFeedbackMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mffcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mffcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mffcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mffcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mffcb *MissionFailedFeedbackCreateBulk) SaveX(ctx context.Context) []*MissionFailedFeedback {
	v, err := mffcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mffcb *MissionFailedFeedbackCreateBulk) Exec(ctx context.Context) error {
	_, err := mffcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mffcb *MissionFailedFeedbackCreateBulk) ExecX(ctx context.Context) {
	if err := mffcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MissionFailedFeedback.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MissionFailedFeedbackUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (mffcb *MissionFailedFeedbackCreateBulk) OnConflict(opts ...sql.ConflictOption) *MissionFailedFeedbackUpsertBulk {
	mffcb.conflict = opts
	return &MissionFailedFeedbackUpsertBulk{
		create: mffcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MissionFailedFeedback.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mffcb *MissionFailedFeedbackCreateBulk) OnConflictColumns(columns ...string) *MissionFailedFeedbackUpsertBulk {
	mffcb.conflict = append(mffcb.conflict, sql.ConflictColumns(columns...))
	return &MissionFailedFeedbackUpsertBulk{
		create: mffcb,
	}
}

// MissionFailedFeedbackUpsertBulk is the builder for "upsert"-ing
// a bulk of MissionFailedFeedback nodes.
type MissionFailedFeedbackUpsertBulk struct {
	create *MissionFailedFeedbackCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MissionFailedFeedback.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(missionfailedfeedback.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MissionFailedFeedbackUpsertBulk) UpdateNewValues() *MissionFailedFeedbackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(missionfailedfeedback.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(missionfailedfeedback.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MissionFailedFeedback.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MissionFailedFeedbackUpsertBulk) Ignore() *MissionFailedFeedbackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MissionFailedFeedbackUpsertBulk) DoNothing() *MissionFailedFeedbackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MissionFailedFeedbackCreateBulk.OnConflict
// documentation for more info.
func (u *MissionFailedFeedbackUpsertBulk) Update(set func(*MissionFailedFeedbackUpsert)) *MissionFailedFeedbackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MissionFailedFeedbackUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *MissionFailedFeedbackUpsertBulk) SetCreatedBy(v int64) *MissionFailedFeedbackUpsertBulk {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *MissionFailedFeedbackUpsertBulk) AddCreatedBy(v int64) *MissionFailedFeedbackUpsertBulk {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MissionFailedFeedbackUpsertBulk) UpdateCreatedBy() *MissionFailedFeedbackUpsertBulk {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MissionFailedFeedbackUpsertBulk) SetUpdatedBy(v int64) *MissionFailedFeedbackUpsertBulk {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MissionFailedFeedbackUpsertBulk) AddUpdatedBy(v int64) *MissionFailedFeedbackUpsertBulk {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MissionFailedFeedbackUpsertBulk) UpdateUpdatedBy() *MissionFailedFeedbackUpsertBulk {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MissionFailedFeedbackUpsertBulk) SetUpdatedAt(v time.Time) *MissionFailedFeedbackUpsertBulk {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MissionFailedFeedbackUpsertBulk) UpdateUpdatedAt() *MissionFailedFeedbackUpsertBulk {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MissionFailedFeedbackUpsertBulk) SetDeletedAt(v time.Time) *MissionFailedFeedbackUpsertBulk {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MissionFailedFeedbackUpsertBulk) UpdateDeletedAt() *MissionFailedFeedbackUpsertBulk {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *MissionFailedFeedbackUpsertBulk) SetUserID(v int64) *MissionFailedFeedbackUpsertBulk {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *MissionFailedFeedbackUpsertBulk) UpdateUserID() *MissionFailedFeedbackUpsertBulk {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.UpdateUserID()
	})
}

// SetDeviceID sets the "device_id" field.
func (u *MissionFailedFeedbackUpsertBulk) SetDeviceID(v int64) *MissionFailedFeedbackUpsertBulk {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.SetDeviceID(v)
	})
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *MissionFailedFeedbackUpsertBulk) UpdateDeviceID() *MissionFailedFeedbackUpsertBulk {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.UpdateDeviceID()
	})
}

// SetMissionID sets the "mission_id" field.
func (u *MissionFailedFeedbackUpsertBulk) SetMissionID(v int64) *MissionFailedFeedbackUpsertBulk {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.SetMissionID(v)
	})
}

// UpdateMissionID sets the "mission_id" field to the value that was provided on create.
func (u *MissionFailedFeedbackUpsertBulk) UpdateMissionID() *MissionFailedFeedbackUpsertBulk {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.UpdateMissionID()
	})
}

// SetMissionName sets the "mission_name" field.
func (u *MissionFailedFeedbackUpsertBulk) SetMissionName(v string) *MissionFailedFeedbackUpsertBulk {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.SetMissionName(v)
	})
}

// UpdateMissionName sets the "mission_name" field to the value that was provided on create.
func (u *MissionFailedFeedbackUpsertBulk) UpdateMissionName() *MissionFailedFeedbackUpsertBulk {
	return u.Update(func(s *MissionFailedFeedbackUpsert) {
		s.UpdateMissionName()
	})
}

// Exec executes the query.
func (u *MissionFailedFeedbackUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the MissionFailedFeedbackCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for MissionFailedFeedbackCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MissionFailedFeedbackUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
