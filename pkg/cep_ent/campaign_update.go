// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/campaign"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/campaignorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/invite"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// CampaignUpdate is the builder for updating Campaign entities.
type CampaignUpdate struct {
	config
	hooks    []Hook
	mutation *CampaignMutation
}

// Where appends a list predicates to the CampaignUpdate builder.
func (cu *CampaignUpdate) Where(ps ...predicate.Campaign) *CampaignUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCreatedBy sets the "created_by" field.
func (cu *CampaignUpdate) SetCreatedBy(i int64) *CampaignUpdate {
	cu.mutation.ResetCreatedBy()
	cu.mutation.SetCreatedBy(i)
	return cu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cu *CampaignUpdate) SetNillableCreatedBy(i *int64) *CampaignUpdate {
	if i != nil {
		cu.SetCreatedBy(*i)
	}
	return cu
}

// AddCreatedBy adds i to the "created_by" field.
func (cu *CampaignUpdate) AddCreatedBy(i int64) *CampaignUpdate {
	cu.mutation.AddCreatedBy(i)
	return cu
}

// SetUpdatedBy sets the "updated_by" field.
func (cu *CampaignUpdate) SetUpdatedBy(i int64) *CampaignUpdate {
	cu.mutation.ResetUpdatedBy()
	cu.mutation.SetUpdatedBy(i)
	return cu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cu *CampaignUpdate) SetNillableUpdatedBy(i *int64) *CampaignUpdate {
	if i != nil {
		cu.SetUpdatedBy(*i)
	}
	return cu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (cu *CampaignUpdate) AddUpdatedBy(i int64) *CampaignUpdate {
	cu.mutation.AddUpdatedBy(i)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CampaignUpdate) SetUpdatedAt(t time.Time) *CampaignUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *CampaignUpdate) SetDeletedAt(t time.Time) *CampaignUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *CampaignUpdate) SetNillableDeletedAt(t *time.Time) *CampaignUpdate {
	if t != nil {
		cu.SetDeletedAt(*t)
	}
	return cu
}

// SetName sets the "name" field.
func (cu *CampaignUpdate) SetName(s string) *CampaignUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CampaignUpdate) SetNillableName(s *string) *CampaignUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetType sets the "type" field.
func (cu *CampaignUpdate) SetType(s string) *CampaignUpdate {
	cu.mutation.SetType(s)
	return cu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cu *CampaignUpdate) SetNillableType(s *string) *CampaignUpdate {
	if s != nil {
		cu.SetType(*s)
	}
	return cu
}

// SetStartedAt sets the "started_at" field.
func (cu *CampaignUpdate) SetStartedAt(t time.Time) *CampaignUpdate {
	cu.mutation.SetStartedAt(t)
	return cu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (cu *CampaignUpdate) SetNillableStartedAt(t *time.Time) *CampaignUpdate {
	if t != nil {
		cu.SetStartedAt(*t)
	}
	return cu
}

// SetEndedAt sets the "ended_at" field.
func (cu *CampaignUpdate) SetEndedAt(t time.Time) *CampaignUpdate {
	cu.mutation.SetEndedAt(t)
	return cu
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (cu *CampaignUpdate) SetNillableEndedAt(t *time.Time) *CampaignUpdate {
	if t != nil {
		cu.SetEndedAt(*t)
	}
	return cu
}

// SetStatus sets the "status" field.
func (cu *CampaignUpdate) SetStatus(i int) *CampaignUpdate {
	cu.mutation.ResetStatus()
	cu.mutation.SetStatus(i)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *CampaignUpdate) SetNillableStatus(i *int) *CampaignUpdate {
	if i != nil {
		cu.SetStatus(*i)
	}
	return cu
}

// AddStatus adds i to the "status" field.
func (cu *CampaignUpdate) AddStatus(i int) *CampaignUpdate {
	cu.mutation.AddStatus(i)
	return cu
}

// SetInviteID sets the "invite_id" field.
func (cu *CampaignUpdate) SetInviteID(s string) *CampaignUpdate {
	cu.mutation.SetInviteID(s)
	return cu
}

// SetNillableInviteID sets the "invite_id" field if the given value is not nil.
func (cu *CampaignUpdate) SetNillableInviteID(s *string) *CampaignUpdate {
	if s != nil {
		cu.SetInviteID(*s)
	}
	return cu
}

// AddInviteIDs adds the "invites" edge to the Invite entity by IDs.
func (cu *CampaignUpdate) AddInviteIDs(ids ...int64) *CampaignUpdate {
	cu.mutation.AddInviteIDs(ids...)
	return cu
}

// AddInvites adds the "invites" edges to the Invite entity.
func (cu *CampaignUpdate) AddInvites(i ...*Invite) *CampaignUpdate {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cu.AddInviteIDs(ids...)
}

// AddCampaignOrderIDs adds the "campaign_orders" edge to the CampaignOrder entity by IDs.
func (cu *CampaignUpdate) AddCampaignOrderIDs(ids ...int64) *CampaignUpdate {
	cu.mutation.AddCampaignOrderIDs(ids...)
	return cu
}

// AddCampaignOrders adds the "campaign_orders" edges to the CampaignOrder entity.
func (cu *CampaignUpdate) AddCampaignOrders(c ...*CampaignOrder) *CampaignUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCampaignOrderIDs(ids...)
}

// Mutation returns the CampaignMutation object of the builder.
func (cu *CampaignUpdate) Mutation() *CampaignMutation {
	return cu.mutation
}

// ClearInvites clears all "invites" edges to the Invite entity.
func (cu *CampaignUpdate) ClearInvites() *CampaignUpdate {
	cu.mutation.ClearInvites()
	return cu
}

// RemoveInviteIDs removes the "invites" edge to Invite entities by IDs.
func (cu *CampaignUpdate) RemoveInviteIDs(ids ...int64) *CampaignUpdate {
	cu.mutation.RemoveInviteIDs(ids...)
	return cu
}

// RemoveInvites removes "invites" edges to Invite entities.
func (cu *CampaignUpdate) RemoveInvites(i ...*Invite) *CampaignUpdate {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cu.RemoveInviteIDs(ids...)
}

// ClearCampaignOrders clears all "campaign_orders" edges to the CampaignOrder entity.
func (cu *CampaignUpdate) ClearCampaignOrders() *CampaignUpdate {
	cu.mutation.ClearCampaignOrders()
	return cu
}

// RemoveCampaignOrderIDs removes the "campaign_orders" edge to CampaignOrder entities by IDs.
func (cu *CampaignUpdate) RemoveCampaignOrderIDs(ids ...int64) *CampaignUpdate {
	cu.mutation.RemoveCampaignOrderIDs(ids...)
	return cu
}

// RemoveCampaignOrders removes "campaign_orders" edges to CampaignOrder entities.
func (cu *CampaignUpdate) RemoveCampaignOrders(c ...*CampaignOrder) *CampaignUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCampaignOrderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CampaignUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CampaignUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CampaignUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CampaignUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CampaignUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := campaign.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

func (cu *CampaignUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(campaign.Table, campaign.Columns, sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeInt64))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CreatedBy(); ok {
		_spec.SetField(campaign.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(campaign.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.UpdatedBy(); ok {
		_spec.SetField(campaign.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(campaign.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(campaign.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.SetField(campaign.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(campaign.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.SetField(campaign.FieldType, field.TypeString, value)
	}
	if value, ok := cu.mutation.StartedAt(); ok {
		_spec.SetField(campaign.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.EndedAt(); ok {
		_spec.SetField(campaign.FieldEndedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(campaign.FieldStatus, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedStatus(); ok {
		_spec.AddField(campaign.FieldStatus, field.TypeInt, value)
	}
	if value, ok := cu.mutation.InviteID(); ok {
		_spec.SetField(campaign.FieldInviteID, field.TypeString, value)
	}
	if cu.mutation.InvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaign.InvitesTable,
			Columns: []string{campaign.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedInvitesIDs(); len(nodes) > 0 && !cu.mutation.InvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaign.InvitesTable,
			Columns: []string{campaign.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.InvitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaign.InvitesTable,
			Columns: []string{campaign.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CampaignOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaign.CampaignOrdersTable,
			Columns: []string{campaign.CampaignOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaignorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCampaignOrdersIDs(); len(nodes) > 0 && !cu.mutation.CampaignOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaign.CampaignOrdersTable,
			Columns: []string{campaign.CampaignOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaignorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CampaignOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaign.CampaignOrdersTable,
			Columns: []string{campaign.CampaignOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaignorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{campaign.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CampaignUpdateOne is the builder for updating a single Campaign entity.
type CampaignUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CampaignMutation
}

// SetCreatedBy sets the "created_by" field.
func (cuo *CampaignUpdateOne) SetCreatedBy(i int64) *CampaignUpdateOne {
	cuo.mutation.ResetCreatedBy()
	cuo.mutation.SetCreatedBy(i)
	return cuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillableCreatedBy(i *int64) *CampaignUpdateOne {
	if i != nil {
		cuo.SetCreatedBy(*i)
	}
	return cuo
}

// AddCreatedBy adds i to the "created_by" field.
func (cuo *CampaignUpdateOne) AddCreatedBy(i int64) *CampaignUpdateOne {
	cuo.mutation.AddCreatedBy(i)
	return cuo
}

// SetUpdatedBy sets the "updated_by" field.
func (cuo *CampaignUpdateOne) SetUpdatedBy(i int64) *CampaignUpdateOne {
	cuo.mutation.ResetUpdatedBy()
	cuo.mutation.SetUpdatedBy(i)
	return cuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillableUpdatedBy(i *int64) *CampaignUpdateOne {
	if i != nil {
		cuo.SetUpdatedBy(*i)
	}
	return cuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (cuo *CampaignUpdateOne) AddUpdatedBy(i int64) *CampaignUpdateOne {
	cuo.mutation.AddUpdatedBy(i)
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CampaignUpdateOne) SetUpdatedAt(t time.Time) *CampaignUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *CampaignUpdateOne) SetDeletedAt(t time.Time) *CampaignUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillableDeletedAt(t *time.Time) *CampaignUpdateOne {
	if t != nil {
		cuo.SetDeletedAt(*t)
	}
	return cuo
}

// SetName sets the "name" field.
func (cuo *CampaignUpdateOne) SetName(s string) *CampaignUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillableName(s *string) *CampaignUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetType sets the "type" field.
func (cuo *CampaignUpdateOne) SetType(s string) *CampaignUpdateOne {
	cuo.mutation.SetType(s)
	return cuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillableType(s *string) *CampaignUpdateOne {
	if s != nil {
		cuo.SetType(*s)
	}
	return cuo
}

// SetStartedAt sets the "started_at" field.
func (cuo *CampaignUpdateOne) SetStartedAt(t time.Time) *CampaignUpdateOne {
	cuo.mutation.SetStartedAt(t)
	return cuo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillableStartedAt(t *time.Time) *CampaignUpdateOne {
	if t != nil {
		cuo.SetStartedAt(*t)
	}
	return cuo
}

// SetEndedAt sets the "ended_at" field.
func (cuo *CampaignUpdateOne) SetEndedAt(t time.Time) *CampaignUpdateOne {
	cuo.mutation.SetEndedAt(t)
	return cuo
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillableEndedAt(t *time.Time) *CampaignUpdateOne {
	if t != nil {
		cuo.SetEndedAt(*t)
	}
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *CampaignUpdateOne) SetStatus(i int) *CampaignUpdateOne {
	cuo.mutation.ResetStatus()
	cuo.mutation.SetStatus(i)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillableStatus(i *int) *CampaignUpdateOne {
	if i != nil {
		cuo.SetStatus(*i)
	}
	return cuo
}

// AddStatus adds i to the "status" field.
func (cuo *CampaignUpdateOne) AddStatus(i int) *CampaignUpdateOne {
	cuo.mutation.AddStatus(i)
	return cuo
}

// SetInviteID sets the "invite_id" field.
func (cuo *CampaignUpdateOne) SetInviteID(s string) *CampaignUpdateOne {
	cuo.mutation.SetInviteID(s)
	return cuo
}

// SetNillableInviteID sets the "invite_id" field if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillableInviteID(s *string) *CampaignUpdateOne {
	if s != nil {
		cuo.SetInviteID(*s)
	}
	return cuo
}

// AddInviteIDs adds the "invites" edge to the Invite entity by IDs.
func (cuo *CampaignUpdateOne) AddInviteIDs(ids ...int64) *CampaignUpdateOne {
	cuo.mutation.AddInviteIDs(ids...)
	return cuo
}

// AddInvites adds the "invites" edges to the Invite entity.
func (cuo *CampaignUpdateOne) AddInvites(i ...*Invite) *CampaignUpdateOne {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cuo.AddInviteIDs(ids...)
}

// AddCampaignOrderIDs adds the "campaign_orders" edge to the CampaignOrder entity by IDs.
func (cuo *CampaignUpdateOne) AddCampaignOrderIDs(ids ...int64) *CampaignUpdateOne {
	cuo.mutation.AddCampaignOrderIDs(ids...)
	return cuo
}

// AddCampaignOrders adds the "campaign_orders" edges to the CampaignOrder entity.
func (cuo *CampaignUpdateOne) AddCampaignOrders(c ...*CampaignOrder) *CampaignUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCampaignOrderIDs(ids...)
}

// Mutation returns the CampaignMutation object of the builder.
func (cuo *CampaignUpdateOne) Mutation() *CampaignMutation {
	return cuo.mutation
}

// ClearInvites clears all "invites" edges to the Invite entity.
func (cuo *CampaignUpdateOne) ClearInvites() *CampaignUpdateOne {
	cuo.mutation.ClearInvites()
	return cuo
}

// RemoveInviteIDs removes the "invites" edge to Invite entities by IDs.
func (cuo *CampaignUpdateOne) RemoveInviteIDs(ids ...int64) *CampaignUpdateOne {
	cuo.mutation.RemoveInviteIDs(ids...)
	return cuo
}

// RemoveInvites removes "invites" edges to Invite entities.
func (cuo *CampaignUpdateOne) RemoveInvites(i ...*Invite) *CampaignUpdateOne {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cuo.RemoveInviteIDs(ids...)
}

// ClearCampaignOrders clears all "campaign_orders" edges to the CampaignOrder entity.
func (cuo *CampaignUpdateOne) ClearCampaignOrders() *CampaignUpdateOne {
	cuo.mutation.ClearCampaignOrders()
	return cuo
}

// RemoveCampaignOrderIDs removes the "campaign_orders" edge to CampaignOrder entities by IDs.
func (cuo *CampaignUpdateOne) RemoveCampaignOrderIDs(ids ...int64) *CampaignUpdateOne {
	cuo.mutation.RemoveCampaignOrderIDs(ids...)
	return cuo
}

// RemoveCampaignOrders removes "campaign_orders" edges to CampaignOrder entities.
func (cuo *CampaignUpdateOne) RemoveCampaignOrders(c ...*CampaignOrder) *CampaignUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCampaignOrderIDs(ids...)
}

// Where appends a list predicates to the CampaignUpdate builder.
func (cuo *CampaignUpdateOne) Where(ps ...predicate.Campaign) *CampaignUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CampaignUpdateOne) Select(field string, fields ...string) *CampaignUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Campaign entity.
func (cuo *CampaignUpdateOne) Save(ctx context.Context) (*Campaign, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CampaignUpdateOne) SaveX(ctx context.Context) *Campaign {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CampaignUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CampaignUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CampaignUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := campaign.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

func (cuo *CampaignUpdateOne) sqlSave(ctx context.Context) (_node *Campaign, err error) {
	_spec := sqlgraph.NewUpdateSpec(campaign.Table, campaign.Columns, sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeInt64))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "Campaign.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, campaign.FieldID)
		for _, f := range fields {
			if !campaign.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != campaign.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.CreatedBy(); ok {
		_spec.SetField(campaign.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(campaign.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.UpdatedBy(); ok {
		_spec.SetField(campaign.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(campaign.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(campaign.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.SetField(campaign.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(campaign.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.SetField(campaign.FieldType, field.TypeString, value)
	}
	if value, ok := cuo.mutation.StartedAt(); ok {
		_spec.SetField(campaign.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.EndedAt(); ok {
		_spec.SetField(campaign.FieldEndedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(campaign.FieldStatus, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedStatus(); ok {
		_spec.AddField(campaign.FieldStatus, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.InviteID(); ok {
		_spec.SetField(campaign.FieldInviteID, field.TypeString, value)
	}
	if cuo.mutation.InvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaign.InvitesTable,
			Columns: []string{campaign.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedInvitesIDs(); len(nodes) > 0 && !cuo.mutation.InvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaign.InvitesTable,
			Columns: []string{campaign.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.InvitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaign.InvitesTable,
			Columns: []string{campaign.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CampaignOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaign.CampaignOrdersTable,
			Columns: []string{campaign.CampaignOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaignorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCampaignOrdersIDs(); len(nodes) > 0 && !cuo.mutation.CampaignOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaign.CampaignOrdersTable,
			Columns: []string{campaign.CampaignOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaignorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CampaignOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaign.CampaignOrdersTable,
			Columns: []string{campaign.CampaignOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaignorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Campaign{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{campaign.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
