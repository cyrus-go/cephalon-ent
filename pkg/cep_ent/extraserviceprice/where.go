// Code generated by ent, DO NOT EDIT.

package extraserviceprice

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldLTE(FieldID, id))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldEQ(FieldDeletedAt, v))
}

// ExtraServiceID applies equality check predicate on the "extra_service_id" field. It's identical to ExtraServiceIDEQ.
func ExtraServiceID(v int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldEQ(FieldExtraServiceID, v))
}

// Cep applies equality check predicate on the "cep" field. It's identical to CepEQ.
func Cep(v int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldEQ(FieldCep, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldEQ(FieldStartedAt, v))
}

// FinishedAt applies equality check predicate on the "finished_at" field. It's identical to FinishedAtEQ.
func FinishedAt(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldEQ(FieldFinishedAt, v))
}

// IsDeprecated applies equality check predicate on the "is_deprecated" field. It's identical to IsDeprecatedEQ.
func IsDeprecated(v bool) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldEQ(FieldIsDeprecated, v))
}

// IsSensitive applies equality check predicate on the "is_sensitive" field. It's identical to IsSensitiveEQ.
func IsSensitive(v bool) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldEQ(FieldIsSensitive, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldLTE(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldLTE(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldLTE(FieldDeletedAt, v))
}

// ExtraServiceTypeEQ applies the EQ predicate on the "extra_service_type" field.
func ExtraServiceTypeEQ(v enums.ExtraServiceType) predicate.ExtraServicePrice {
	vc := v
	return predicate.ExtraServicePrice(sql.FieldEQ(FieldExtraServiceType, vc))
}

// ExtraServiceTypeNEQ applies the NEQ predicate on the "extra_service_type" field.
func ExtraServiceTypeNEQ(v enums.ExtraServiceType) predicate.ExtraServicePrice {
	vc := v
	return predicate.ExtraServicePrice(sql.FieldNEQ(FieldExtraServiceType, vc))
}

// ExtraServiceTypeIn applies the In predicate on the "extra_service_type" field.
func ExtraServiceTypeIn(vs ...enums.ExtraServiceType) predicate.ExtraServicePrice {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExtraServicePrice(sql.FieldIn(FieldExtraServiceType, v...))
}

// ExtraServiceTypeNotIn applies the NotIn predicate on the "extra_service_type" field.
func ExtraServiceTypeNotIn(vs ...enums.ExtraServiceType) predicate.ExtraServicePrice {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExtraServicePrice(sql.FieldNotIn(FieldExtraServiceType, v...))
}

// ExtraServiceBillingTypeEQ applies the EQ predicate on the "extra_service_billing_type" field.
func ExtraServiceBillingTypeEQ(v enums.ExtraServiceBillingType) predicate.ExtraServicePrice {
	vc := v
	return predicate.ExtraServicePrice(sql.FieldEQ(FieldExtraServiceBillingType, vc))
}

// ExtraServiceBillingTypeNEQ applies the NEQ predicate on the "extra_service_billing_type" field.
func ExtraServiceBillingTypeNEQ(v enums.ExtraServiceBillingType) predicate.ExtraServicePrice {
	vc := v
	return predicate.ExtraServicePrice(sql.FieldNEQ(FieldExtraServiceBillingType, vc))
}

// ExtraServiceBillingTypeIn applies the In predicate on the "extra_service_billing_type" field.
func ExtraServiceBillingTypeIn(vs ...enums.ExtraServiceBillingType) predicate.ExtraServicePrice {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExtraServicePrice(sql.FieldIn(FieldExtraServiceBillingType, v...))
}

// ExtraServiceBillingTypeNotIn applies the NotIn predicate on the "extra_service_billing_type" field.
func ExtraServiceBillingTypeNotIn(vs ...enums.ExtraServiceBillingType) predicate.ExtraServicePrice {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExtraServicePrice(sql.FieldNotIn(FieldExtraServiceBillingType, v...))
}

// ExtraServiceIDEQ applies the EQ predicate on the "extra_service_id" field.
func ExtraServiceIDEQ(v int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldEQ(FieldExtraServiceID, v))
}

// ExtraServiceIDNEQ applies the NEQ predicate on the "extra_service_id" field.
func ExtraServiceIDNEQ(v int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldNEQ(FieldExtraServiceID, v))
}

// ExtraServiceIDIn applies the In predicate on the "extra_service_id" field.
func ExtraServiceIDIn(vs ...int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldIn(FieldExtraServiceID, vs...))
}

// ExtraServiceIDNotIn applies the NotIn predicate on the "extra_service_id" field.
func ExtraServiceIDNotIn(vs ...int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldNotIn(FieldExtraServiceID, vs...))
}

// CepEQ applies the EQ predicate on the "cep" field.
func CepEQ(v int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldEQ(FieldCep, v))
}

// CepNEQ applies the NEQ predicate on the "cep" field.
func CepNEQ(v int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldNEQ(FieldCep, v))
}

// CepIn applies the In predicate on the "cep" field.
func CepIn(vs ...int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldIn(FieldCep, vs...))
}

// CepNotIn applies the NotIn predicate on the "cep" field.
func CepNotIn(vs ...int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldNotIn(FieldCep, vs...))
}

// CepGT applies the GT predicate on the "cep" field.
func CepGT(v int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldGT(FieldCep, v))
}

// CepGTE applies the GTE predicate on the "cep" field.
func CepGTE(v int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldGTE(FieldCep, v))
}

// CepLT applies the LT predicate on the "cep" field.
func CepLT(v int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldLT(FieldCep, v))
}

// CepLTE applies the LTE predicate on the "cep" field.
func CepLTE(v int64) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldLTE(FieldCep, v))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldLTE(FieldStartedAt, v))
}

// StartedAtIsNil applies the IsNil predicate on the "started_at" field.
func StartedAtIsNil() predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldIsNull(FieldStartedAt))
}

// StartedAtNotNil applies the NotNil predicate on the "started_at" field.
func StartedAtNotNil() predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldNotNull(FieldStartedAt))
}

// FinishedAtEQ applies the EQ predicate on the "finished_at" field.
func FinishedAtEQ(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldEQ(FieldFinishedAt, v))
}

// FinishedAtNEQ applies the NEQ predicate on the "finished_at" field.
func FinishedAtNEQ(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldNEQ(FieldFinishedAt, v))
}

// FinishedAtIn applies the In predicate on the "finished_at" field.
func FinishedAtIn(vs ...time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldIn(FieldFinishedAt, vs...))
}

// FinishedAtNotIn applies the NotIn predicate on the "finished_at" field.
func FinishedAtNotIn(vs ...time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldNotIn(FieldFinishedAt, vs...))
}

// FinishedAtGT applies the GT predicate on the "finished_at" field.
func FinishedAtGT(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldGT(FieldFinishedAt, v))
}

// FinishedAtGTE applies the GTE predicate on the "finished_at" field.
func FinishedAtGTE(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldGTE(FieldFinishedAt, v))
}

// FinishedAtLT applies the LT predicate on the "finished_at" field.
func FinishedAtLT(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldLT(FieldFinishedAt, v))
}

// FinishedAtLTE applies the LTE predicate on the "finished_at" field.
func FinishedAtLTE(v time.Time) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldLTE(FieldFinishedAt, v))
}

// FinishedAtIsNil applies the IsNil predicate on the "finished_at" field.
func FinishedAtIsNil() predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldIsNull(FieldFinishedAt))
}

// FinishedAtNotNil applies the NotNil predicate on the "finished_at" field.
func FinishedAtNotNil() predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldNotNull(FieldFinishedAt))
}

// IsDeprecatedEQ applies the EQ predicate on the "is_deprecated" field.
func IsDeprecatedEQ(v bool) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldEQ(FieldIsDeprecated, v))
}

// IsDeprecatedNEQ applies the NEQ predicate on the "is_deprecated" field.
func IsDeprecatedNEQ(v bool) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldNEQ(FieldIsDeprecated, v))
}

// IsSensitiveEQ applies the EQ predicate on the "is_sensitive" field.
func IsSensitiveEQ(v bool) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldEQ(FieldIsSensitive, v))
}

// IsSensitiveNEQ applies the NEQ predicate on the "is_sensitive" field.
func IsSensitiveNEQ(v bool) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.FieldNEQ(FieldIsSensitive, v))
}

// HasExtraService applies the HasEdge predicate on the "extra_service" edge.
func HasExtraService() predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExtraServiceTable, ExtraServiceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExtraServiceWith applies the HasEdge predicate on the "extra_service" edge with a given conditions (other predicates).
func HasExtraServiceWith(preds ...predicate.ExtraService) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(func(s *sql.Selector) {
		step := newExtraServiceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ExtraServicePrice) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ExtraServicePrice) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ExtraServicePrice) predicate.ExtraServicePrice {
	return predicate.ExtraServicePrice(sql.NotPredicates(p))
}
