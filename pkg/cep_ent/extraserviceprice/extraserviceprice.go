// Code generated by ent, DO NOT EDIT.

package extraserviceprice

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

const (
	// Label holds the string label denoting the extraserviceprice type in the database.
	Label = "extra_service_price"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldExtraServiceType holds the string denoting the extra_service_type field in the database.
	FieldExtraServiceType = "extra_service_type"
	// FieldExtraServiceBillingType holds the string denoting the extra_service_billing_type field in the database.
	FieldExtraServiceBillingType = "extra_service_billing_type"
	// FieldExtraServiceID holds the string denoting the extra_service_id field in the database.
	FieldExtraServiceID = "extra_service_id"
	// FieldCep holds the string denoting the cep field in the database.
	FieldCep = "cep"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldFinishedAt holds the string denoting the finished_at field in the database.
	FieldFinishedAt = "finished_at"
	// FieldIsDeprecated holds the string denoting the is_deprecated field in the database.
	FieldIsDeprecated = "is_deprecated"
	// FieldIsSensitive holds the string denoting the is_sensitive field in the database.
	FieldIsSensitive = "is_sensitive"
	// EdgeExtraService holds the string denoting the extra_service edge name in mutations.
	EdgeExtraService = "extra_service"
	// Table holds the table name of the extraserviceprice in the database.
	Table = "extra_service_prices"
	// ExtraServiceTable is the table that holds the extra_service relation/edge.
	ExtraServiceTable = "extra_service_prices"
	// ExtraServiceInverseTable is the table name for the ExtraService entity.
	// It exists in this package in order to avoid circular dependency with the "extraservice" package.
	ExtraServiceInverseTable = "extra_services"
	// ExtraServiceColumn is the table column denoting the extra_service relation/edge.
	ExtraServiceColumn = "extra_service_id"
)

// Columns holds all SQL columns for extraserviceprice fields.
var Columns = []string{
	FieldID,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldExtraServiceType,
	FieldExtraServiceBillingType,
	FieldExtraServiceID,
	FieldCep,
	FieldStartedAt,
	FieldFinishedAt,
	FieldIsDeprecated,
	FieldIsSensitive,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedBy holds the default value on creation for the "created_by" field.
	DefaultCreatedBy int64
	// DefaultUpdatedBy holds the default value on creation for the "updated_by" field.
	DefaultUpdatedBy int64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt time.Time
	// DefaultExtraServiceID holds the default value on creation for the "extra_service_id" field.
	DefaultExtraServiceID int64
	// DefaultCep holds the default value on creation for the "cep" field.
	DefaultCep int64
	// DefaultIsDeprecated holds the default value on creation for the "is_deprecated" field.
	DefaultIsDeprecated bool
	// DefaultIsSensitive holds the default value on creation for the "is_sensitive" field.
	DefaultIsSensitive bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
)

const DefaultExtraServiceType enums.ExtraServiceType = "unknown"

// ExtraServiceTypeValidator is a validator for the "extra_service_type" field enum values. It is called by the builders before save.
func ExtraServiceTypeValidator(est enums.ExtraServiceType) error {
	switch est {
	case "unknown", "vpn":
		return nil
	default:
		return fmt.Errorf("extraserviceprice: invalid enum value for extra_service_type field: %q", est)
	}
}

const DefaultExtraServiceBillingType enums.ExtraServiceBillingType = "unknown"

// ExtraServiceBillingTypeValidator is a validator for the "extra_service_billing_type" field enum values. It is called by the builders before save.
func ExtraServiceBillingTypeValidator(esbt enums.ExtraServiceBillingType) error {
	switch esbt {
	case "unknown", "time_plan_hour", "time_plan_day", "time_plan_week", "time_plan_month", "time_plan_volume", "hold", "time":
		return nil
	default:
		return fmt.Errorf("extraserviceprice: invalid enum value for extra_service_billing_type field: %q", esbt)
	}
}

// OrderOption defines the ordering options for the ExtraServicePrice queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByExtraServiceType orders the results by the extra_service_type field.
func ByExtraServiceType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExtraServiceType, opts...).ToFunc()
}

// ByExtraServiceBillingType orders the results by the extra_service_billing_type field.
func ByExtraServiceBillingType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExtraServiceBillingType, opts...).ToFunc()
}

// ByExtraServiceID orders the results by the extra_service_id field.
func ByExtraServiceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExtraServiceID, opts...).ToFunc()
}

// ByCep orders the results by the cep field.
func ByCep(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCep, opts...).ToFunc()
}

// ByStartedAt orders the results by the started_at field.
func ByStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedAt, opts...).ToFunc()
}

// ByFinishedAt orders the results by the finished_at field.
func ByFinishedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinishedAt, opts...).ToFunc()
}

// ByIsDeprecated orders the results by the is_deprecated field.
func ByIsDeprecated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDeprecated, opts...).ToFunc()
}

// ByIsSensitive orders the results by the is_sensitive field.
func ByIsSensitive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsSensitive, opts...).ToFunc()
}

// ByExtraServiceField orders the results by extra_service field.
func ByExtraServiceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExtraServiceStep(), sql.OrderByField(field, opts...))
	}
}
func newExtraServiceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExtraServiceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ExtraServiceTable, ExtraServiceColumn),
	)
}
