// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/device"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/giftmissionconfig"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// GiftMissionConfigQuery is the builder for querying GiftMissionConfig entities.
type GiftMissionConfigQuery struct {
	config
	ctx         *QueryContext
	order       []giftmissionconfig.OrderOption
	inters      []Interceptor
	predicates  []predicate.GiftMissionConfig
	withDevices *DeviceQuery
	modifiers   []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GiftMissionConfigQuery builder.
func (gmcq *GiftMissionConfigQuery) Where(ps ...predicate.GiftMissionConfig) *GiftMissionConfigQuery {
	gmcq.predicates = append(gmcq.predicates, ps...)
	return gmcq
}

// Limit the number of records to be returned by this query.
func (gmcq *GiftMissionConfigQuery) Limit(limit int) *GiftMissionConfigQuery {
	gmcq.ctx.Limit = &limit
	return gmcq
}

// Offset to start from.
func (gmcq *GiftMissionConfigQuery) Offset(offset int) *GiftMissionConfigQuery {
	gmcq.ctx.Offset = &offset
	return gmcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (gmcq *GiftMissionConfigQuery) Unique(unique bool) *GiftMissionConfigQuery {
	gmcq.ctx.Unique = &unique
	return gmcq
}

// Order specifies how the records should be ordered.
func (gmcq *GiftMissionConfigQuery) Order(o ...giftmissionconfig.OrderOption) *GiftMissionConfigQuery {
	gmcq.order = append(gmcq.order, o...)
	return gmcq
}

// QueryDevices chains the current query on the "devices" edge.
func (gmcq *GiftMissionConfigQuery) QueryDevices() *DeviceQuery {
	query := (&DeviceClient{config: gmcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gmcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gmcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(giftmissionconfig.Table, giftmissionconfig.FieldID, selector),
			sqlgraph.To(device.Table, device.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, giftmissionconfig.DevicesTable, giftmissionconfig.DevicesColumn),
		)
		fromU = sqlgraph.SetNeighbors(gmcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GiftMissionConfig entity from the query.
// Returns a *NotFoundError when no GiftMissionConfig was found.
func (gmcq *GiftMissionConfigQuery) First(ctx context.Context) (*GiftMissionConfig, error) {
	nodes, err := gmcq.Limit(1).All(setContextOp(ctx, gmcq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{giftmissionconfig.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (gmcq *GiftMissionConfigQuery) FirstX(ctx context.Context) *GiftMissionConfig {
	node, err := gmcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GiftMissionConfig ID from the query.
// Returns a *NotFoundError when no GiftMissionConfig ID was found.
func (gmcq *GiftMissionConfigQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = gmcq.Limit(1).IDs(setContextOp(ctx, gmcq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{giftmissionconfig.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (gmcq *GiftMissionConfigQuery) FirstIDX(ctx context.Context) int64 {
	id, err := gmcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GiftMissionConfig entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one GiftMissionConfig entity is found.
// Returns a *NotFoundError when no GiftMissionConfig entities are found.
func (gmcq *GiftMissionConfigQuery) Only(ctx context.Context) (*GiftMissionConfig, error) {
	nodes, err := gmcq.Limit(2).All(setContextOp(ctx, gmcq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{giftmissionconfig.Label}
	default:
		return nil, &NotSingularError{giftmissionconfig.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (gmcq *GiftMissionConfigQuery) OnlyX(ctx context.Context) *GiftMissionConfig {
	node, err := gmcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GiftMissionConfig ID in the query.
// Returns a *NotSingularError when more than one GiftMissionConfig ID is found.
// Returns a *NotFoundError when no entities are found.
func (gmcq *GiftMissionConfigQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = gmcq.Limit(2).IDs(setContextOp(ctx, gmcq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{giftmissionconfig.Label}
	default:
		err = &NotSingularError{giftmissionconfig.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (gmcq *GiftMissionConfigQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := gmcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GiftMissionConfigs.
func (gmcq *GiftMissionConfigQuery) All(ctx context.Context) ([]*GiftMissionConfig, error) {
	ctx = setContextOp(ctx, gmcq.ctx, "All")
	if err := gmcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*GiftMissionConfig, *GiftMissionConfigQuery]()
	return withInterceptors[[]*GiftMissionConfig](ctx, gmcq, qr, gmcq.inters)
}

// AllX is like All, but panics if an error occurs.
func (gmcq *GiftMissionConfigQuery) AllX(ctx context.Context) []*GiftMissionConfig {
	nodes, err := gmcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GiftMissionConfig IDs.
func (gmcq *GiftMissionConfigQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if gmcq.ctx.Unique == nil && gmcq.path != nil {
		gmcq.Unique(true)
	}
	ctx = setContextOp(ctx, gmcq.ctx, "IDs")
	if err = gmcq.Select(giftmissionconfig.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (gmcq *GiftMissionConfigQuery) IDsX(ctx context.Context) []int64 {
	ids, err := gmcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (gmcq *GiftMissionConfigQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, gmcq.ctx, "Count")
	if err := gmcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, gmcq, querierCount[*GiftMissionConfigQuery](), gmcq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (gmcq *GiftMissionConfigQuery) CountX(ctx context.Context) int {
	count, err := gmcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (gmcq *GiftMissionConfigQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, gmcq.ctx, "Exist")
	switch _, err := gmcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("cep_ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (gmcq *GiftMissionConfigQuery) ExistX(ctx context.Context) bool {
	exist, err := gmcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GiftMissionConfigQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (gmcq *GiftMissionConfigQuery) Clone() *GiftMissionConfigQuery {
	if gmcq == nil {
		return nil
	}
	return &GiftMissionConfigQuery{
		config:      gmcq.config,
		ctx:         gmcq.ctx.Clone(),
		order:       append([]giftmissionconfig.OrderOption{}, gmcq.order...),
		inters:      append([]Interceptor{}, gmcq.inters...),
		predicates:  append([]predicate.GiftMissionConfig{}, gmcq.predicates...),
		withDevices: gmcq.withDevices.Clone(),
		// clone intermediate query.
		sql:  gmcq.sql.Clone(),
		path: gmcq.path,
	}
}

// WithDevices tells the query-builder to eager-load the nodes that are connected to
// the "devices" edge. The optional arguments are used to configure the query builder of the edge.
func (gmcq *GiftMissionConfigQuery) WithDevices(opts ...func(*DeviceQuery)) *GiftMissionConfigQuery {
	query := (&DeviceClient{config: gmcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gmcq.withDevices = query
	return gmcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by,string"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GiftMissionConfig.Query().
//		GroupBy(giftmissionconfig.FieldCreatedBy).
//		Aggregate(cep_ent.Count()).
//		Scan(ctx, &v)
func (gmcq *GiftMissionConfigQuery) GroupBy(field string, fields ...string) *GiftMissionConfigGroupBy {
	gmcq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &GiftMissionConfigGroupBy{build: gmcq}
	grbuild.flds = &gmcq.ctx.Fields
	grbuild.label = giftmissionconfig.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by,string"`
//	}
//
//	client.GiftMissionConfig.Query().
//		Select(giftmissionconfig.FieldCreatedBy).
//		Scan(ctx, &v)
func (gmcq *GiftMissionConfigQuery) Select(fields ...string) *GiftMissionConfigSelect {
	gmcq.ctx.Fields = append(gmcq.ctx.Fields, fields...)
	sbuild := &GiftMissionConfigSelect{GiftMissionConfigQuery: gmcq}
	sbuild.label = giftmissionconfig.Label
	sbuild.flds, sbuild.scan = &gmcq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a GiftMissionConfigSelect configured with the given aggregations.
func (gmcq *GiftMissionConfigQuery) Aggregate(fns ...AggregateFunc) *GiftMissionConfigSelect {
	return gmcq.Select().Aggregate(fns...)
}

func (gmcq *GiftMissionConfigQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range gmcq.inters {
		if inter == nil {
			return fmt.Errorf("cep_ent: uninitialized interceptor (forgotten import cep_ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, gmcq); err != nil {
				return err
			}
		}
	}
	for _, f := range gmcq.ctx.Fields {
		if !giftmissionconfig.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
		}
	}
	if gmcq.path != nil {
		prev, err := gmcq.path(ctx)
		if err != nil {
			return err
		}
		gmcq.sql = prev
	}
	return nil
}

func (gmcq *GiftMissionConfigQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*GiftMissionConfig, error) {
	var (
		nodes       = []*GiftMissionConfig{}
		_spec       = gmcq.querySpec()
		loadedTypes = [1]bool{
			gmcq.withDevices != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*GiftMissionConfig).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &GiftMissionConfig{config: gmcq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(gmcq.modifiers) > 0 {
		_spec.Modifiers = gmcq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, gmcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := gmcq.withDevices; query != nil {
		if err := gmcq.loadDevices(ctx, query, nodes,
			func(n *GiftMissionConfig) { n.Edges.Devices = []*Device{} },
			func(n *GiftMissionConfig, e *Device) { n.Edges.Devices = append(n.Edges.Devices, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (gmcq *GiftMissionConfigQuery) loadDevices(ctx context.Context, query *DeviceQuery, nodes []*GiftMissionConfig, init func(*GiftMissionConfig), assign func(*GiftMissionConfig, *Device)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*GiftMissionConfig)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(device.FieldGiftMissionConfigID)
	}
	query.Where(predicate.Device(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(giftmissionconfig.DevicesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.GiftMissionConfigID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "gift_mission_config_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (gmcq *GiftMissionConfigQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := gmcq.querySpec()
	if len(gmcq.modifiers) > 0 {
		_spec.Modifiers = gmcq.modifiers
	}
	_spec.Node.Columns = gmcq.ctx.Fields
	if len(gmcq.ctx.Fields) > 0 {
		_spec.Unique = gmcq.ctx.Unique != nil && *gmcq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, gmcq.driver, _spec)
}

func (gmcq *GiftMissionConfigQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(giftmissionconfig.Table, giftmissionconfig.Columns, sqlgraph.NewFieldSpec(giftmissionconfig.FieldID, field.TypeInt64))
	_spec.From = gmcq.sql
	if unique := gmcq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if gmcq.path != nil {
		_spec.Unique = true
	}
	if fields := gmcq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, giftmissionconfig.FieldID)
		for i := range fields {
			if fields[i] != giftmissionconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := gmcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := gmcq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := gmcq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := gmcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (gmcq *GiftMissionConfigQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(gmcq.driver.Dialect())
	t1 := builder.Table(giftmissionconfig.Table)
	columns := gmcq.ctx.Fields
	if len(columns) == 0 {
		columns = giftmissionconfig.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if gmcq.sql != nil {
		selector = gmcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if gmcq.ctx.Unique != nil && *gmcq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range gmcq.modifiers {
		m(selector)
	}
	for _, p := range gmcq.predicates {
		p(selector)
	}
	for _, p := range gmcq.order {
		p(selector)
	}
	if offset := gmcq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := gmcq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (gmcq *GiftMissionConfigQuery) Modify(modifiers ...func(s *sql.Selector)) *GiftMissionConfigSelect {
	gmcq.modifiers = append(gmcq.modifiers, modifiers...)
	return gmcq.Select()
}

// GiftMissionConfigGroupBy is the group-by builder for GiftMissionConfig entities.
type GiftMissionConfigGroupBy struct {
	selector
	build *GiftMissionConfigQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (gmcgb *GiftMissionConfigGroupBy) Aggregate(fns ...AggregateFunc) *GiftMissionConfigGroupBy {
	gmcgb.fns = append(gmcgb.fns, fns...)
	return gmcgb
}

// Scan applies the selector query and scans the result into the given value.
func (gmcgb *GiftMissionConfigGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gmcgb.build.ctx, "GroupBy")
	if err := gmcgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GiftMissionConfigQuery, *GiftMissionConfigGroupBy](ctx, gmcgb.build, gmcgb, gmcgb.build.inters, v)
}

func (gmcgb *GiftMissionConfigGroupBy) sqlScan(ctx context.Context, root *GiftMissionConfigQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(gmcgb.fns))
	for _, fn := range gmcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*gmcgb.flds)+len(gmcgb.fns))
		for _, f := range *gmcgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*gmcgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gmcgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// GiftMissionConfigSelect is the builder for selecting fields of GiftMissionConfig entities.
type GiftMissionConfigSelect struct {
	*GiftMissionConfigQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (gmcs *GiftMissionConfigSelect) Aggregate(fns ...AggregateFunc) *GiftMissionConfigSelect {
	gmcs.fns = append(gmcs.fns, fns...)
	return gmcs
}

// Scan applies the selector query and scans the result into the given value.
func (gmcs *GiftMissionConfigSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gmcs.ctx, "Select")
	if err := gmcs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GiftMissionConfigQuery, *GiftMissionConfigSelect](ctx, gmcs.GiftMissionConfigQuery, gmcs, gmcs.inters, v)
}

func (gmcs *GiftMissionConfigSelect) sqlScan(ctx context.Context, root *GiftMissionConfigQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(gmcs.fns))
	for _, fn := range gmcs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*gmcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gmcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (gmcs *GiftMissionConfigSelect) Modify(modifiers ...func(s *sql.Selector)) *GiftMissionConfigSelect {
	gmcs.modifiers = append(gmcs.modifiers, modifiers...)
	return gmcs
}
