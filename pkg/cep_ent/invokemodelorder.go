// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/apitoken"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/invokemodelorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/model"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// InvokeModelOrder is the model entity for the InvokeModelOrder schema.
type InvokeModelOrder struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建者 ID
	CreatedBy int64 `json:"created_by,string"`
	// 更新者 ID
	UpdatedBy int64 `json:"updated_by,string"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// 用户ID
	UserID int64 `json:"user_id"`
	// 模型ID
	ModelID int64 `json:"model_id"`
	// API Token ID
	APITokenID int64 `json:"api_token"`
	// 调用类型
	InvokeType enums.InvokeType `json:"invoke_type"`
	// 调用次数
	InvokeTimes int `json:"invoke_times"`
	// 输入token消耗
	InputTokenCost int64 `json:"input_token_cost"`
	// 输出token消耗
	OutputTokenCost int64 `json:"output_token_cost"`
	// 输入cep消耗
	InputCepCost int64 `json:"input_cep_cost"`
	// 输出cep消耗
	OutputCepCost int64 `json:"output_cep_cost"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InvokeModelOrderQuery when eager-loading is set.
	Edges        InvokeModelOrderEdges `json:"edges"`
	selectValues sql.SelectValues
}

// InvokeModelOrderEdges holds the relations/edges for other nodes in the graph.
type InvokeModelOrderEdges struct {
	// Bills holds the value of the bills edge.
	Bills []*Bill `json:"bills,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Model holds the value of the model edge.
	Model *Model `json:"model,omitempty"`
	// APIToken holds the value of the api_token edge.
	APIToken *ApiToken `json:"api_token,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// BillsOrErr returns the Bills value or an error if the edge
// was not loaded in eager-loading.
func (e InvokeModelOrderEdges) BillsOrErr() ([]*Bill, error) {
	if e.loadedTypes[0] {
		return e.Bills, nil
	}
	return nil, &NotLoadedError{edge: "bills"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InvokeModelOrderEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ModelOrErr returns the Model value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InvokeModelOrderEdges) ModelOrErr() (*Model, error) {
	if e.loadedTypes[2] {
		if e.Model == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: model.Label}
		}
		return e.Model, nil
	}
	return nil, &NotLoadedError{edge: "model"}
}

// APITokenOrErr returns the APIToken value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InvokeModelOrderEdges) APITokenOrErr() (*ApiToken, error) {
	if e.loadedTypes[3] {
		if e.APIToken == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: apitoken.Label}
		}
		return e.APIToken, nil
	}
	return nil, &NotLoadedError{edge: "api_token"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InvokeModelOrder) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case invokemodelorder.FieldID, invokemodelorder.FieldCreatedBy, invokemodelorder.FieldUpdatedBy, invokemodelorder.FieldUserID, invokemodelorder.FieldModelID, invokemodelorder.FieldAPITokenID, invokemodelorder.FieldInvokeTimes, invokemodelorder.FieldInputTokenCost, invokemodelorder.FieldOutputTokenCost, invokemodelorder.FieldInputCepCost, invokemodelorder.FieldOutputCepCost:
			values[i] = new(sql.NullInt64)
		case invokemodelorder.FieldInvokeType:
			values[i] = new(sql.NullString)
		case invokemodelorder.FieldCreatedAt, invokemodelorder.FieldUpdatedAt, invokemodelorder.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InvokeModelOrder fields.
func (imo *InvokeModelOrder) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case invokemodelorder.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			imo.ID = int64(value.Int64)
		case invokemodelorder.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				imo.CreatedBy = value.Int64
			}
		case invokemodelorder.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				imo.UpdatedBy = value.Int64
			}
		case invokemodelorder.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				imo.CreatedAt = value.Time
			}
		case invokemodelorder.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				imo.UpdatedAt = value.Time
			}
		case invokemodelorder.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				imo.DeletedAt = value.Time
			}
		case invokemodelorder.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				imo.UserID = value.Int64
			}
		case invokemodelorder.FieldModelID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field model_id", values[i])
			} else if value.Valid {
				imo.ModelID = value.Int64
			}
		case invokemodelorder.FieldAPITokenID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field api_token_id", values[i])
			} else if value.Valid {
				imo.APITokenID = value.Int64
			}
		case invokemodelorder.FieldInvokeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoke_type", values[i])
			} else if value.Valid {
				imo.InvokeType = enums.InvokeType(value.String)
			}
		case invokemodelorder.FieldInvokeTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field invoke_times", values[i])
			} else if value.Valid {
				imo.InvokeTimes = int(value.Int64)
			}
		case invokemodelorder.FieldInputTokenCost:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field input_token_cost", values[i])
			} else if value.Valid {
				imo.InputTokenCost = value.Int64
			}
		case invokemodelorder.FieldOutputTokenCost:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field output_token_cost", values[i])
			} else if value.Valid {
				imo.OutputTokenCost = value.Int64
			}
		case invokemodelorder.FieldInputCepCost:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field input_cep_cost", values[i])
			} else if value.Valid {
				imo.InputCepCost = value.Int64
			}
		case invokemodelorder.FieldOutputCepCost:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field output_cep_cost", values[i])
			} else if value.Valid {
				imo.OutputCepCost = value.Int64
			}
		default:
			imo.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the InvokeModelOrder.
// This includes values selected through modifiers, order, etc.
func (imo *InvokeModelOrder) Value(name string) (ent.Value, error) {
	return imo.selectValues.Get(name)
}

// QueryBills queries the "bills" edge of the InvokeModelOrder entity.
func (imo *InvokeModelOrder) QueryBills() *BillQuery {
	return NewInvokeModelOrderClient(imo.config).QueryBills(imo)
}

// QueryUser queries the "user" edge of the InvokeModelOrder entity.
func (imo *InvokeModelOrder) QueryUser() *UserQuery {
	return NewInvokeModelOrderClient(imo.config).QueryUser(imo)
}

// QueryModel queries the "model" edge of the InvokeModelOrder entity.
func (imo *InvokeModelOrder) QueryModel() *ModelQuery {
	return NewInvokeModelOrderClient(imo.config).QueryModel(imo)
}

// QueryAPIToken queries the "api_token" edge of the InvokeModelOrder entity.
func (imo *InvokeModelOrder) QueryAPIToken() *ApiTokenQuery {
	return NewInvokeModelOrderClient(imo.config).QueryAPIToken(imo)
}

// Update returns a builder for updating this InvokeModelOrder.
// Note that you need to call InvokeModelOrder.Unwrap() before calling this method if this InvokeModelOrder
// was returned from a transaction, and the transaction was committed or rolled back.
func (imo *InvokeModelOrder) Update() *InvokeModelOrderUpdateOne {
	return NewInvokeModelOrderClient(imo.config).UpdateOne(imo)
}

// Unwrap unwraps the InvokeModelOrder entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (imo *InvokeModelOrder) Unwrap() *InvokeModelOrder {
	_tx, ok := imo.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: InvokeModelOrder is not a transactional entity")
	}
	imo.config.driver = _tx.drv
	return imo
}

// String implements the fmt.Stringer.
func (imo *InvokeModelOrder) String() string {
	var builder strings.Builder
	builder.WriteString("InvokeModelOrder(")
	builder.WriteString(fmt.Sprintf("id=%v, ", imo.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", imo.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", imo.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(imo.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(imo.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(imo.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", imo.UserID))
	builder.WriteString(", ")
	builder.WriteString("model_id=")
	builder.WriteString(fmt.Sprintf("%v", imo.ModelID))
	builder.WriteString(", ")
	builder.WriteString("api_token_id=")
	builder.WriteString(fmt.Sprintf("%v", imo.APITokenID))
	builder.WriteString(", ")
	builder.WriteString("invoke_type=")
	builder.WriteString(fmt.Sprintf("%v", imo.InvokeType))
	builder.WriteString(", ")
	builder.WriteString("invoke_times=")
	builder.WriteString(fmt.Sprintf("%v", imo.InvokeTimes))
	builder.WriteString(", ")
	builder.WriteString("input_token_cost=")
	builder.WriteString(fmt.Sprintf("%v", imo.InputTokenCost))
	builder.WriteString(", ")
	builder.WriteString("output_token_cost=")
	builder.WriteString(fmt.Sprintf("%v", imo.OutputTokenCost))
	builder.WriteString(", ")
	builder.WriteString("input_cep_cost=")
	builder.WriteString(fmt.Sprintf("%v", imo.InputCepCost))
	builder.WriteString(", ")
	builder.WriteString("output_cep_cost=")
	builder.WriteString(fmt.Sprintf("%v", imo.OutputCepCost))
	builder.WriteByte(')')
	return builder.String()
}

// InvokeModelOrders is a parsable slice of InvokeModelOrder.
type InvokeModelOrders []*InvokeModelOrder
