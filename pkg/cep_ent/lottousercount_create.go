// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lotto"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottousercount"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
)

// LottoUserCountCreate is the builder for creating a LottoUserCount entity.
type LottoUserCountCreate struct {
	config
	mutation *LottoUserCountMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (lucc *LottoUserCountCreate) SetCreatedBy(i int64) *LottoUserCountCreate {
	lucc.mutation.SetCreatedBy(i)
	return lucc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (lucc *LottoUserCountCreate) SetNillableCreatedBy(i *int64) *LottoUserCountCreate {
	if i != nil {
		lucc.SetCreatedBy(*i)
	}
	return lucc
}

// SetUpdatedBy sets the "updated_by" field.
func (lucc *LottoUserCountCreate) SetUpdatedBy(i int64) *LottoUserCountCreate {
	lucc.mutation.SetUpdatedBy(i)
	return lucc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (lucc *LottoUserCountCreate) SetNillableUpdatedBy(i *int64) *LottoUserCountCreate {
	if i != nil {
		lucc.SetUpdatedBy(*i)
	}
	return lucc
}

// SetCreatedAt sets the "created_at" field.
func (lucc *LottoUserCountCreate) SetCreatedAt(t time.Time) *LottoUserCountCreate {
	lucc.mutation.SetCreatedAt(t)
	return lucc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lucc *LottoUserCountCreate) SetNillableCreatedAt(t *time.Time) *LottoUserCountCreate {
	if t != nil {
		lucc.SetCreatedAt(*t)
	}
	return lucc
}

// SetUpdatedAt sets the "updated_at" field.
func (lucc *LottoUserCountCreate) SetUpdatedAt(t time.Time) *LottoUserCountCreate {
	lucc.mutation.SetUpdatedAt(t)
	return lucc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lucc *LottoUserCountCreate) SetNillableUpdatedAt(t *time.Time) *LottoUserCountCreate {
	if t != nil {
		lucc.SetUpdatedAt(*t)
	}
	return lucc
}

// SetDeletedAt sets the "deleted_at" field.
func (lucc *LottoUserCountCreate) SetDeletedAt(t time.Time) *LottoUserCountCreate {
	lucc.mutation.SetDeletedAt(t)
	return lucc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lucc *LottoUserCountCreate) SetNillableDeletedAt(t *time.Time) *LottoUserCountCreate {
	if t != nil {
		lucc.SetDeletedAt(*t)
	}
	return lucc
}

// SetUserID sets the "user_id" field.
func (lucc *LottoUserCountCreate) SetUserID(i int64) *LottoUserCountCreate {
	lucc.mutation.SetUserID(i)
	return lucc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (lucc *LottoUserCountCreate) SetNillableUserID(i *int64) *LottoUserCountCreate {
	if i != nil {
		lucc.SetUserID(*i)
	}
	return lucc
}

// SetLottoID sets the "lotto_id" field.
func (lucc *LottoUserCountCreate) SetLottoID(i int64) *LottoUserCountCreate {
	lucc.mutation.SetLottoID(i)
	return lucc
}

// SetNillableLottoID sets the "lotto_id" field if the given value is not nil.
func (lucc *LottoUserCountCreate) SetNillableLottoID(i *int64) *LottoUserCountCreate {
	if i != nil {
		lucc.SetLottoID(*i)
	}
	return lucc
}

// SetRemainLottoCount sets the "remain_lotto_count" field.
func (lucc *LottoUserCountCreate) SetRemainLottoCount(i int64) *LottoUserCountCreate {
	lucc.mutation.SetRemainLottoCount(i)
	return lucc
}

// SetNillableRemainLottoCount sets the "remain_lotto_count" field if the given value is not nil.
func (lucc *LottoUserCountCreate) SetNillableRemainLottoCount(i *int64) *LottoUserCountCreate {
	if i != nil {
		lucc.SetRemainLottoCount(*i)
	}
	return lucc
}

// SetID sets the "id" field.
func (lucc *LottoUserCountCreate) SetID(i int64) *LottoUserCountCreate {
	lucc.mutation.SetID(i)
	return lucc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lucc *LottoUserCountCreate) SetNillableID(i *int64) *LottoUserCountCreate {
	if i != nil {
		lucc.SetID(*i)
	}
	return lucc
}

// SetUser sets the "user" edge to the User entity.
func (lucc *LottoUserCountCreate) SetUser(u *User) *LottoUserCountCreate {
	return lucc.SetUserID(u.ID)
}

// SetLotto sets the "lotto" edge to the Lotto entity.
func (lucc *LottoUserCountCreate) SetLotto(l *Lotto) *LottoUserCountCreate {
	return lucc.SetLottoID(l.ID)
}

// Mutation returns the LottoUserCountMutation object of the builder.
func (lucc *LottoUserCountCreate) Mutation() *LottoUserCountMutation {
	return lucc.mutation
}

// Save creates the LottoUserCount in the database.
func (lucc *LottoUserCountCreate) Save(ctx context.Context) (*LottoUserCount, error) {
	lucc.defaults()
	return withHooks(ctx, lucc.sqlSave, lucc.mutation, lucc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lucc *LottoUserCountCreate) SaveX(ctx context.Context) *LottoUserCount {
	v, err := lucc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lucc *LottoUserCountCreate) Exec(ctx context.Context) error {
	_, err := lucc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lucc *LottoUserCountCreate) ExecX(ctx context.Context) {
	if err := lucc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lucc *LottoUserCountCreate) defaults() {
	if _, ok := lucc.mutation.CreatedBy(); !ok {
		v := lottousercount.DefaultCreatedBy
		lucc.mutation.SetCreatedBy(v)
	}
	if _, ok := lucc.mutation.UpdatedBy(); !ok {
		v := lottousercount.DefaultUpdatedBy
		lucc.mutation.SetUpdatedBy(v)
	}
	if _, ok := lucc.mutation.CreatedAt(); !ok {
		v := lottousercount.DefaultCreatedAt()
		lucc.mutation.SetCreatedAt(v)
	}
	if _, ok := lucc.mutation.UpdatedAt(); !ok {
		v := lottousercount.DefaultUpdatedAt()
		lucc.mutation.SetUpdatedAt(v)
	}
	if _, ok := lucc.mutation.DeletedAt(); !ok {
		v := lottousercount.DefaultDeletedAt
		lucc.mutation.SetDeletedAt(v)
	}
	if _, ok := lucc.mutation.UserID(); !ok {
		v := lottousercount.DefaultUserID
		lucc.mutation.SetUserID(v)
	}
	if _, ok := lucc.mutation.LottoID(); !ok {
		v := lottousercount.DefaultLottoID
		lucc.mutation.SetLottoID(v)
	}
	if _, ok := lucc.mutation.RemainLottoCount(); !ok {
		v := lottousercount.DefaultRemainLottoCount
		lucc.mutation.SetRemainLottoCount(v)
	}
	if _, ok := lucc.mutation.ID(); !ok {
		v := lottousercount.DefaultID()
		lucc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lucc *LottoUserCountCreate) check() error {
	if _, ok := lucc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "LottoUserCount.created_by"`)}
	}
	if _, ok := lucc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "LottoUserCount.updated_by"`)}
	}
	if _, ok := lucc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "LottoUserCount.created_at"`)}
	}
	if _, ok := lucc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "LottoUserCount.updated_at"`)}
	}
	if _, ok := lucc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "LottoUserCount.deleted_at"`)}
	}
	if _, ok := lucc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "LottoUserCount.user_id"`)}
	}
	if _, ok := lucc.mutation.LottoID(); !ok {
		return &ValidationError{Name: "lotto_id", err: errors.New(`cep_ent: missing required field "LottoUserCount.lotto_id"`)}
	}
	if _, ok := lucc.mutation.RemainLottoCount(); !ok {
		return &ValidationError{Name: "remain_lotto_count", err: errors.New(`cep_ent: missing required field "LottoUserCount.remain_lotto_count"`)}
	}
	if _, ok := lucc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "LottoUserCount.user"`)}
	}
	if _, ok := lucc.mutation.LottoID(); !ok {
		return &ValidationError{Name: "lotto", err: errors.New(`cep_ent: missing required edge "LottoUserCount.lotto"`)}
	}
	return nil
}

func (lucc *LottoUserCountCreate) sqlSave(ctx context.Context) (*LottoUserCount, error) {
	if err := lucc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lucc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lucc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	lucc.mutation.id = &_node.ID
	lucc.mutation.done = true
	return _node, nil
}

func (lucc *LottoUserCountCreate) createSpec() (*LottoUserCount, *sqlgraph.CreateSpec) {
	var (
		_node = &LottoUserCount{config: lucc.config}
		_spec = sqlgraph.NewCreateSpec(lottousercount.Table, sqlgraph.NewFieldSpec(lottousercount.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = lucc.conflict
	if id, ok := lucc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lucc.mutation.CreatedBy(); ok {
		_spec.SetField(lottousercount.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := lucc.mutation.UpdatedBy(); ok {
		_spec.SetField(lottousercount.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := lucc.mutation.CreatedAt(); ok {
		_spec.SetField(lottousercount.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lucc.mutation.UpdatedAt(); ok {
		_spec.SetField(lottousercount.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := lucc.mutation.DeletedAt(); ok {
		_spec.SetField(lottousercount.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := lucc.mutation.RemainLottoCount(); ok {
		_spec.SetField(lottousercount.FieldRemainLottoCount, field.TypeInt64, value)
		_node.RemainLottoCount = value
	}
	if nodes := lucc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottousercount.UserTable,
			Columns: []string{lottousercount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lucc.mutation.LottoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottousercount.LottoTable,
			Columns: []string{lottousercount.LottoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lotto.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LottoID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LottoUserCount.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LottoUserCountUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (lucc *LottoUserCountCreate) OnConflict(opts ...sql.ConflictOption) *LottoUserCountUpsertOne {
	lucc.conflict = opts
	return &LottoUserCountUpsertOne{
		create: lucc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LottoUserCount.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lucc *LottoUserCountCreate) OnConflictColumns(columns ...string) *LottoUserCountUpsertOne {
	lucc.conflict = append(lucc.conflict, sql.ConflictColumns(columns...))
	return &LottoUserCountUpsertOne{
		create: lucc,
	}
}

type (
	// LottoUserCountUpsertOne is the builder for "upsert"-ing
	//  one LottoUserCount node.
	LottoUserCountUpsertOne struct {
		create *LottoUserCountCreate
	}

	// LottoUserCountUpsert is the "OnConflict" setter.
	LottoUserCountUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *LottoUserCountUpsert) SetCreatedBy(v int64) *LottoUserCountUpsert {
	u.Set(lottousercount.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *LottoUserCountUpsert) UpdateCreatedBy() *LottoUserCountUpsert {
	u.SetExcluded(lottousercount.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *LottoUserCountUpsert) AddCreatedBy(v int64) *LottoUserCountUpsert {
	u.Add(lottousercount.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *LottoUserCountUpsert) SetUpdatedBy(v int64) *LottoUserCountUpsert {
	u.Set(lottousercount.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *LottoUserCountUpsert) UpdateUpdatedBy() *LottoUserCountUpsert {
	u.SetExcluded(lottousercount.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *LottoUserCountUpsert) AddUpdatedBy(v int64) *LottoUserCountUpsert {
	u.Add(lottousercount.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LottoUserCountUpsert) SetUpdatedAt(v time.Time) *LottoUserCountUpsert {
	u.Set(lottousercount.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LottoUserCountUpsert) UpdateUpdatedAt() *LottoUserCountUpsert {
	u.SetExcluded(lottousercount.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LottoUserCountUpsert) SetDeletedAt(v time.Time) *LottoUserCountUpsert {
	u.Set(lottousercount.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LottoUserCountUpsert) UpdateDeletedAt() *LottoUserCountUpsert {
	u.SetExcluded(lottousercount.FieldDeletedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *LottoUserCountUpsert) SetUserID(v int64) *LottoUserCountUpsert {
	u.Set(lottousercount.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *LottoUserCountUpsert) UpdateUserID() *LottoUserCountUpsert {
	u.SetExcluded(lottousercount.FieldUserID)
	return u
}

// SetLottoID sets the "lotto_id" field.
func (u *LottoUserCountUpsert) SetLottoID(v int64) *LottoUserCountUpsert {
	u.Set(lottousercount.FieldLottoID, v)
	return u
}

// UpdateLottoID sets the "lotto_id" field to the value that was provided on create.
func (u *LottoUserCountUpsert) UpdateLottoID() *LottoUserCountUpsert {
	u.SetExcluded(lottousercount.FieldLottoID)
	return u
}

// SetRemainLottoCount sets the "remain_lotto_count" field.
func (u *LottoUserCountUpsert) SetRemainLottoCount(v int64) *LottoUserCountUpsert {
	u.Set(lottousercount.FieldRemainLottoCount, v)
	return u
}

// UpdateRemainLottoCount sets the "remain_lotto_count" field to the value that was provided on create.
func (u *LottoUserCountUpsert) UpdateRemainLottoCount() *LottoUserCountUpsert {
	u.SetExcluded(lottousercount.FieldRemainLottoCount)
	return u
}

// AddRemainLottoCount adds v to the "remain_lotto_count" field.
func (u *LottoUserCountUpsert) AddRemainLottoCount(v int64) *LottoUserCountUpsert {
	u.Add(lottousercount.FieldRemainLottoCount, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.LottoUserCount.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(lottousercount.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LottoUserCountUpsertOne) UpdateNewValues() *LottoUserCountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(lottousercount.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(lottousercount.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LottoUserCount.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LottoUserCountUpsertOne) Ignore() *LottoUserCountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LottoUserCountUpsertOne) DoNothing() *LottoUserCountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LottoUserCountCreate.OnConflict
// documentation for more info.
func (u *LottoUserCountUpsertOne) Update(set func(*LottoUserCountUpsert)) *LottoUserCountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LottoUserCountUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *LottoUserCountUpsertOne) SetCreatedBy(v int64) *LottoUserCountUpsertOne {
	return u.Update(func(s *LottoUserCountUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *LottoUserCountUpsertOne) AddCreatedBy(v int64) *LottoUserCountUpsertOne {
	return u.Update(func(s *LottoUserCountUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *LottoUserCountUpsertOne) UpdateCreatedBy() *LottoUserCountUpsertOne {
	return u.Update(func(s *LottoUserCountUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *LottoUserCountUpsertOne) SetUpdatedBy(v int64) *LottoUserCountUpsertOne {
	return u.Update(func(s *LottoUserCountUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *LottoUserCountUpsertOne) AddUpdatedBy(v int64) *LottoUserCountUpsertOne {
	return u.Update(func(s *LottoUserCountUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *LottoUserCountUpsertOne) UpdateUpdatedBy() *LottoUserCountUpsertOne {
	return u.Update(func(s *LottoUserCountUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LottoUserCountUpsertOne) SetUpdatedAt(v time.Time) *LottoUserCountUpsertOne {
	return u.Update(func(s *LottoUserCountUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LottoUserCountUpsertOne) UpdateUpdatedAt() *LottoUserCountUpsertOne {
	return u.Update(func(s *LottoUserCountUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LottoUserCountUpsertOne) SetDeletedAt(v time.Time) *LottoUserCountUpsertOne {
	return u.Update(func(s *LottoUserCountUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LottoUserCountUpsertOne) UpdateDeletedAt() *LottoUserCountUpsertOne {
	return u.Update(func(s *LottoUserCountUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *LottoUserCountUpsertOne) SetUserID(v int64) *LottoUserCountUpsertOne {
	return u.Update(func(s *LottoUserCountUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *LottoUserCountUpsertOne) UpdateUserID() *LottoUserCountUpsertOne {
	return u.Update(func(s *LottoUserCountUpsert) {
		s.UpdateUserID()
	})
}

// SetLottoID sets the "lotto_id" field.
func (u *LottoUserCountUpsertOne) SetLottoID(v int64) *LottoUserCountUpsertOne {
	return u.Update(func(s *LottoUserCountUpsert) {
		s.SetLottoID(v)
	})
}

// UpdateLottoID sets the "lotto_id" field to the value that was provided on create.
func (u *LottoUserCountUpsertOne) UpdateLottoID() *LottoUserCountUpsertOne {
	return u.Update(func(s *LottoUserCountUpsert) {
		s.UpdateLottoID()
	})
}

// SetRemainLottoCount sets the "remain_lotto_count" field.
func (u *LottoUserCountUpsertOne) SetRemainLottoCount(v int64) *LottoUserCountUpsertOne {
	return u.Update(func(s *LottoUserCountUpsert) {
		s.SetRemainLottoCount(v)
	})
}

// AddRemainLottoCount adds v to the "remain_lotto_count" field.
func (u *LottoUserCountUpsertOne) AddRemainLottoCount(v int64) *LottoUserCountUpsertOne {
	return u.Update(func(s *LottoUserCountUpsert) {
		s.AddRemainLottoCount(v)
	})
}

// UpdateRemainLottoCount sets the "remain_lotto_count" field to the value that was provided on create.
func (u *LottoUserCountUpsertOne) UpdateRemainLottoCount() *LottoUserCountUpsertOne {
	return u.Update(func(s *LottoUserCountUpsert) {
		s.UpdateRemainLottoCount()
	})
}

// Exec executes the query.
func (u *LottoUserCountUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for LottoUserCountCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LottoUserCountUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LottoUserCountUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LottoUserCountUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LottoUserCountCreateBulk is the builder for creating many LottoUserCount entities in bulk.
type LottoUserCountCreateBulk struct {
	config
	err      error
	builders []*LottoUserCountCreate
	conflict []sql.ConflictOption
}

// Save creates the LottoUserCount entities in the database.
func (luccb *LottoUserCountCreateBulk) Save(ctx context.Context) ([]*LottoUserCount, error) {
	if luccb.err != nil {
		return nil, luccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(luccb.builders))
	nodes := make([]*LottoUserCount, len(luccb.builders))
	mutators := make([]Mutator, len(luccb.builders))
	for i := range luccb.builders {
		func(i int, root context.Context) {
			builder := luccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LottoUserCountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, luccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = luccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, luccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, luccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (luccb *LottoUserCountCreateBulk) SaveX(ctx context.Context) []*LottoUserCount {
	v, err := luccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (luccb *LottoUserCountCreateBulk) Exec(ctx context.Context) error {
	_, err := luccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luccb *LottoUserCountCreateBulk) ExecX(ctx context.Context) {
	if err := luccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LottoUserCount.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LottoUserCountUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (luccb *LottoUserCountCreateBulk) OnConflict(opts ...sql.ConflictOption) *LottoUserCountUpsertBulk {
	luccb.conflict = opts
	return &LottoUserCountUpsertBulk{
		create: luccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LottoUserCount.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (luccb *LottoUserCountCreateBulk) OnConflictColumns(columns ...string) *LottoUserCountUpsertBulk {
	luccb.conflict = append(luccb.conflict, sql.ConflictColumns(columns...))
	return &LottoUserCountUpsertBulk{
		create: luccb,
	}
}

// LottoUserCountUpsertBulk is the builder for "upsert"-ing
// a bulk of LottoUserCount nodes.
type LottoUserCountUpsertBulk struct {
	create *LottoUserCountCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.LottoUserCount.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(lottousercount.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LottoUserCountUpsertBulk) UpdateNewValues() *LottoUserCountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(lottousercount.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(lottousercount.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LottoUserCount.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LottoUserCountUpsertBulk) Ignore() *LottoUserCountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LottoUserCountUpsertBulk) DoNothing() *LottoUserCountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LottoUserCountCreateBulk.OnConflict
// documentation for more info.
func (u *LottoUserCountUpsertBulk) Update(set func(*LottoUserCountUpsert)) *LottoUserCountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LottoUserCountUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *LottoUserCountUpsertBulk) SetCreatedBy(v int64) *LottoUserCountUpsertBulk {
	return u.Update(func(s *LottoUserCountUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *LottoUserCountUpsertBulk) AddCreatedBy(v int64) *LottoUserCountUpsertBulk {
	return u.Update(func(s *LottoUserCountUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *LottoUserCountUpsertBulk) UpdateCreatedBy() *LottoUserCountUpsertBulk {
	return u.Update(func(s *LottoUserCountUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *LottoUserCountUpsertBulk) SetUpdatedBy(v int64) *LottoUserCountUpsertBulk {
	return u.Update(func(s *LottoUserCountUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *LottoUserCountUpsertBulk) AddUpdatedBy(v int64) *LottoUserCountUpsertBulk {
	return u.Update(func(s *LottoUserCountUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *LottoUserCountUpsertBulk) UpdateUpdatedBy() *LottoUserCountUpsertBulk {
	return u.Update(func(s *LottoUserCountUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LottoUserCountUpsertBulk) SetUpdatedAt(v time.Time) *LottoUserCountUpsertBulk {
	return u.Update(func(s *LottoUserCountUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LottoUserCountUpsertBulk) UpdateUpdatedAt() *LottoUserCountUpsertBulk {
	return u.Update(func(s *LottoUserCountUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LottoUserCountUpsertBulk) SetDeletedAt(v time.Time) *LottoUserCountUpsertBulk {
	return u.Update(func(s *LottoUserCountUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LottoUserCountUpsertBulk) UpdateDeletedAt() *LottoUserCountUpsertBulk {
	return u.Update(func(s *LottoUserCountUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *LottoUserCountUpsertBulk) SetUserID(v int64) *LottoUserCountUpsertBulk {
	return u.Update(func(s *LottoUserCountUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *LottoUserCountUpsertBulk) UpdateUserID() *LottoUserCountUpsertBulk {
	return u.Update(func(s *LottoUserCountUpsert) {
		s.UpdateUserID()
	})
}

// SetLottoID sets the "lotto_id" field.
func (u *LottoUserCountUpsertBulk) SetLottoID(v int64) *LottoUserCountUpsertBulk {
	return u.Update(func(s *LottoUserCountUpsert) {
		s.SetLottoID(v)
	})
}

// UpdateLottoID sets the "lotto_id" field to the value that was provided on create.
func (u *LottoUserCountUpsertBulk) UpdateLottoID() *LottoUserCountUpsertBulk {
	return u.Update(func(s *LottoUserCountUpsert) {
		s.UpdateLottoID()
	})
}

// SetRemainLottoCount sets the "remain_lotto_count" field.
func (u *LottoUserCountUpsertBulk) SetRemainLottoCount(v int64) *LottoUserCountUpsertBulk {
	return u.Update(func(s *LottoUserCountUpsert) {
		s.SetRemainLottoCount(v)
	})
}

// AddRemainLottoCount adds v to the "remain_lotto_count" field.
func (u *LottoUserCountUpsertBulk) AddRemainLottoCount(v int64) *LottoUserCountUpsertBulk {
	return u.Update(func(s *LottoUserCountUpsert) {
		s.AddRemainLottoCount(v)
	})
}

// UpdateRemainLottoCount sets the "remain_lotto_count" field to the value that was provided on create.
func (u *LottoUserCountUpsertBulk) UpdateRemainLottoCount() *LottoUserCountUpsertBulk {
	return u.Update(func(s *LottoUserCountUpsert) {
		s.UpdateRemainLottoCount()
	})
}

// Exec executes the query.
func (u *LottoUserCountUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the LottoUserCountCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for LottoUserCountCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LottoUserCountUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
