// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/model"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/modelprice"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// ModelPriceCreate is the builder for creating a ModelPrice entity.
type ModelPriceCreate struct {
	config
	mutation *ModelPriceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (mpc *ModelPriceCreate) SetCreatedBy(i int64) *ModelPriceCreate {
	mpc.mutation.SetCreatedBy(i)
	return mpc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mpc *ModelPriceCreate) SetNillableCreatedBy(i *int64) *ModelPriceCreate {
	if i != nil {
		mpc.SetCreatedBy(*i)
	}
	return mpc
}

// SetUpdatedBy sets the "updated_by" field.
func (mpc *ModelPriceCreate) SetUpdatedBy(i int64) *ModelPriceCreate {
	mpc.mutation.SetUpdatedBy(i)
	return mpc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mpc *ModelPriceCreate) SetNillableUpdatedBy(i *int64) *ModelPriceCreate {
	if i != nil {
		mpc.SetUpdatedBy(*i)
	}
	return mpc
}

// SetCreatedAt sets the "created_at" field.
func (mpc *ModelPriceCreate) SetCreatedAt(t time.Time) *ModelPriceCreate {
	mpc.mutation.SetCreatedAt(t)
	return mpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mpc *ModelPriceCreate) SetNillableCreatedAt(t *time.Time) *ModelPriceCreate {
	if t != nil {
		mpc.SetCreatedAt(*t)
	}
	return mpc
}

// SetUpdatedAt sets the "updated_at" field.
func (mpc *ModelPriceCreate) SetUpdatedAt(t time.Time) *ModelPriceCreate {
	mpc.mutation.SetUpdatedAt(t)
	return mpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mpc *ModelPriceCreate) SetNillableUpdatedAt(t *time.Time) *ModelPriceCreate {
	if t != nil {
		mpc.SetUpdatedAt(*t)
	}
	return mpc
}

// SetDeletedAt sets the "deleted_at" field.
func (mpc *ModelPriceCreate) SetDeletedAt(t time.Time) *ModelPriceCreate {
	mpc.mutation.SetDeletedAt(t)
	return mpc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mpc *ModelPriceCreate) SetNillableDeletedAt(t *time.Time) *ModelPriceCreate {
	if t != nil {
		mpc.SetDeletedAt(*t)
	}
	return mpc
}

// SetModelID sets the "model_id" field.
func (mpc *ModelPriceCreate) SetModelID(i int64) *ModelPriceCreate {
	mpc.mutation.SetModelID(i)
	return mpc
}

// SetInvokeType sets the "invoke_type" field.
func (mpc *ModelPriceCreate) SetInvokeType(et enums.InvokeType) *ModelPriceCreate {
	mpc.mutation.SetInvokeType(et)
	return mpc
}

// SetNillableInvokeType sets the "invoke_type" field if the given value is not nil.
func (mpc *ModelPriceCreate) SetNillableInvokeType(et *enums.InvokeType) *ModelPriceCreate {
	if et != nil {
		mpc.SetInvokeType(*et)
	}
	return mpc
}

// SetGpuVersion sets the "gpu_version" field.
func (mpc *ModelPriceCreate) SetGpuVersion(ev enums.GpuVersion) *ModelPriceCreate {
	mpc.mutation.SetGpuVersion(ev)
	return mpc
}

// SetNillableGpuVersion sets the "gpu_version" field if the given value is not nil.
func (mpc *ModelPriceCreate) SetNillableGpuVersion(ev *enums.GpuVersion) *ModelPriceCreate {
	if ev != nil {
		mpc.SetGpuVersion(*ev)
	}
	return mpc
}

// SetInputGpuPrice sets the "input_gpu_price" field.
func (mpc *ModelPriceCreate) SetInputGpuPrice(i int) *ModelPriceCreate {
	mpc.mutation.SetInputGpuPrice(i)
	return mpc
}

// SetNillableInputGpuPrice sets the "input_gpu_price" field if the given value is not nil.
func (mpc *ModelPriceCreate) SetNillableInputGpuPrice(i *int) *ModelPriceCreate {
	if i != nil {
		mpc.SetInputGpuPrice(*i)
	}
	return mpc
}

// SetOutputGpuPrice sets the "output_gpu_price" field.
func (mpc *ModelPriceCreate) SetOutputGpuPrice(i int) *ModelPriceCreate {
	mpc.mutation.SetOutputGpuPrice(i)
	return mpc
}

// SetNillableOutputGpuPrice sets the "output_gpu_price" field if the given value is not nil.
func (mpc *ModelPriceCreate) SetNillableOutputGpuPrice(i *int) *ModelPriceCreate {
	if i != nil {
		mpc.SetOutputGpuPrice(*i)
	}
	return mpc
}

// SetInputModelPrice sets the "input_model_price" field.
func (mpc *ModelPriceCreate) SetInputModelPrice(i int) *ModelPriceCreate {
	mpc.mutation.SetInputModelPrice(i)
	return mpc
}

// SetNillableInputModelPrice sets the "input_model_price" field if the given value is not nil.
func (mpc *ModelPriceCreate) SetNillableInputModelPrice(i *int) *ModelPriceCreate {
	if i != nil {
		mpc.SetInputModelPrice(*i)
	}
	return mpc
}

// SetOutputModelPrice sets the "output_model_price" field.
func (mpc *ModelPriceCreate) SetOutputModelPrice(i int) *ModelPriceCreate {
	mpc.mutation.SetOutputModelPrice(i)
	return mpc
}

// SetNillableOutputModelPrice sets the "output_model_price" field if the given value is not nil.
func (mpc *ModelPriceCreate) SetNillableOutputModelPrice(i *int) *ModelPriceCreate {
	if i != nil {
		mpc.SetOutputModelPrice(*i)
	}
	return mpc
}

// SetTokenPerCep sets the "token_per_cep" field.
func (mpc *ModelPriceCreate) SetTokenPerCep(i int64) *ModelPriceCreate {
	mpc.mutation.SetTokenPerCep(i)
	return mpc
}

// SetNillableTokenPerCep sets the "token_per_cep" field if the given value is not nil.
func (mpc *ModelPriceCreate) SetNillableTokenPerCep(i *int64) *ModelPriceCreate {
	if i != nil {
		mpc.SetTokenPerCep(*i)
	}
	return mpc
}

// SetID sets the "id" field.
func (mpc *ModelPriceCreate) SetID(i int64) *ModelPriceCreate {
	mpc.mutation.SetID(i)
	return mpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mpc *ModelPriceCreate) SetNillableID(i *int64) *ModelPriceCreate {
	if i != nil {
		mpc.SetID(*i)
	}
	return mpc
}

// SetModel sets the "model" edge to the Model entity.
func (mpc *ModelPriceCreate) SetModel(m *Model) *ModelPriceCreate {
	return mpc.SetModelID(m.ID)
}

// Mutation returns the ModelPriceMutation object of the builder.
func (mpc *ModelPriceCreate) Mutation() *ModelPriceMutation {
	return mpc.mutation
}

// Save creates the ModelPrice in the database.
func (mpc *ModelPriceCreate) Save(ctx context.Context) (*ModelPrice, error) {
	mpc.defaults()
	return withHooks(ctx, mpc.sqlSave, mpc.mutation, mpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mpc *ModelPriceCreate) SaveX(ctx context.Context) *ModelPrice {
	v, err := mpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mpc *ModelPriceCreate) Exec(ctx context.Context) error {
	_, err := mpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpc *ModelPriceCreate) ExecX(ctx context.Context) {
	if err := mpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpc *ModelPriceCreate) defaults() {
	if _, ok := mpc.mutation.CreatedBy(); !ok {
		v := modelprice.DefaultCreatedBy
		mpc.mutation.SetCreatedBy(v)
	}
	if _, ok := mpc.mutation.UpdatedBy(); !ok {
		v := modelprice.DefaultUpdatedBy
		mpc.mutation.SetUpdatedBy(v)
	}
	if _, ok := mpc.mutation.CreatedAt(); !ok {
		v := modelprice.DefaultCreatedAt()
		mpc.mutation.SetCreatedAt(v)
	}
	if _, ok := mpc.mutation.UpdatedAt(); !ok {
		v := modelprice.DefaultUpdatedAt()
		mpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mpc.mutation.DeletedAt(); !ok {
		v := modelprice.DefaultDeletedAt
		mpc.mutation.SetDeletedAt(v)
	}
	if _, ok := mpc.mutation.InvokeType(); !ok {
		v := modelprice.DefaultInvokeType
		mpc.mutation.SetInvokeType(v)
	}
	if _, ok := mpc.mutation.GpuVersion(); !ok {
		v := modelprice.DefaultGpuVersion
		mpc.mutation.SetGpuVersion(v)
	}
	if _, ok := mpc.mutation.InputGpuPrice(); !ok {
		v := modelprice.DefaultInputGpuPrice
		mpc.mutation.SetInputGpuPrice(v)
	}
	if _, ok := mpc.mutation.OutputGpuPrice(); !ok {
		v := modelprice.DefaultOutputGpuPrice
		mpc.mutation.SetOutputGpuPrice(v)
	}
	if _, ok := mpc.mutation.InputModelPrice(); !ok {
		v := modelprice.DefaultInputModelPrice
		mpc.mutation.SetInputModelPrice(v)
	}
	if _, ok := mpc.mutation.OutputModelPrice(); !ok {
		v := modelprice.DefaultOutputModelPrice
		mpc.mutation.SetOutputModelPrice(v)
	}
	if _, ok := mpc.mutation.TokenPerCep(); !ok {
		v := modelprice.DefaultTokenPerCep
		mpc.mutation.SetTokenPerCep(v)
	}
	if _, ok := mpc.mutation.ID(); !ok {
		v := modelprice.DefaultID()
		mpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpc *ModelPriceCreate) check() error {
	if _, ok := mpc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "ModelPrice.created_by"`)}
	}
	if _, ok := mpc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "ModelPrice.updated_by"`)}
	}
	if _, ok := mpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "ModelPrice.created_at"`)}
	}
	if _, ok := mpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "ModelPrice.updated_at"`)}
	}
	if _, ok := mpc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "ModelPrice.deleted_at"`)}
	}
	if _, ok := mpc.mutation.ModelID(); !ok {
		return &ValidationError{Name: "model_id", err: errors.New(`cep_ent: missing required field "ModelPrice.model_id"`)}
	}
	if _, ok := mpc.mutation.InvokeType(); !ok {
		return &ValidationError{Name: "invoke_type", err: errors.New(`cep_ent: missing required field "ModelPrice.invoke_type"`)}
	}
	if v, ok := mpc.mutation.InvokeType(); ok {
		if err := modelprice.InvokeTypeValidator(v); err != nil {
			return &ValidationError{Name: "invoke_type", err: fmt.Errorf(`cep_ent: validator failed for field "ModelPrice.invoke_type": %w`, err)}
		}
	}
	if _, ok := mpc.mutation.GpuVersion(); !ok {
		return &ValidationError{Name: "gpu_version", err: errors.New(`cep_ent: missing required field "ModelPrice.gpu_version"`)}
	}
	if v, ok := mpc.mutation.GpuVersion(); ok {
		if err := modelprice.GpuVersionValidator(v); err != nil {
			return &ValidationError{Name: "gpu_version", err: fmt.Errorf(`cep_ent: validator failed for field "ModelPrice.gpu_version": %w`, err)}
		}
	}
	if _, ok := mpc.mutation.InputGpuPrice(); !ok {
		return &ValidationError{Name: "input_gpu_price", err: errors.New(`cep_ent: missing required field "ModelPrice.input_gpu_price"`)}
	}
	if _, ok := mpc.mutation.OutputGpuPrice(); !ok {
		return &ValidationError{Name: "output_gpu_price", err: errors.New(`cep_ent: missing required field "ModelPrice.output_gpu_price"`)}
	}
	if _, ok := mpc.mutation.InputModelPrice(); !ok {
		return &ValidationError{Name: "input_model_price", err: errors.New(`cep_ent: missing required field "ModelPrice.input_model_price"`)}
	}
	if _, ok := mpc.mutation.OutputModelPrice(); !ok {
		return &ValidationError{Name: "output_model_price", err: errors.New(`cep_ent: missing required field "ModelPrice.output_model_price"`)}
	}
	if _, ok := mpc.mutation.TokenPerCep(); !ok {
		return &ValidationError{Name: "token_per_cep", err: errors.New(`cep_ent: missing required field "ModelPrice.token_per_cep"`)}
	}
	if _, ok := mpc.mutation.ModelID(); !ok {
		return &ValidationError{Name: "model", err: errors.New(`cep_ent: missing required edge "ModelPrice.model"`)}
	}
	return nil
}

func (mpc *ModelPriceCreate) sqlSave(ctx context.Context) (*ModelPrice, error) {
	if err := mpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	mpc.mutation.id = &_node.ID
	mpc.mutation.done = true
	return _node, nil
}

func (mpc *ModelPriceCreate) createSpec() (*ModelPrice, *sqlgraph.CreateSpec) {
	var (
		_node = &ModelPrice{config: mpc.config}
		_spec = sqlgraph.NewCreateSpec(modelprice.Table, sqlgraph.NewFieldSpec(modelprice.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = mpc.conflict
	if id, ok := mpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mpc.mutation.CreatedBy(); ok {
		_spec.SetField(modelprice.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := mpc.mutation.UpdatedBy(); ok {
		_spec.SetField(modelprice.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := mpc.mutation.CreatedAt(); ok {
		_spec.SetField(modelprice.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mpc.mutation.UpdatedAt(); ok {
		_spec.SetField(modelprice.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mpc.mutation.DeletedAt(); ok {
		_spec.SetField(modelprice.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := mpc.mutation.InvokeType(); ok {
		_spec.SetField(modelprice.FieldInvokeType, field.TypeEnum, value)
		_node.InvokeType = value
	}
	if value, ok := mpc.mutation.GpuVersion(); ok {
		_spec.SetField(modelprice.FieldGpuVersion, field.TypeEnum, value)
		_node.GpuVersion = value
	}
	if value, ok := mpc.mutation.InputGpuPrice(); ok {
		_spec.SetField(modelprice.FieldInputGpuPrice, field.TypeInt, value)
		_node.InputGpuPrice = value
	}
	if value, ok := mpc.mutation.OutputGpuPrice(); ok {
		_spec.SetField(modelprice.FieldOutputGpuPrice, field.TypeInt, value)
		_node.OutputGpuPrice = value
	}
	if value, ok := mpc.mutation.InputModelPrice(); ok {
		_spec.SetField(modelprice.FieldInputModelPrice, field.TypeInt, value)
		_node.InputModelPrice = value
	}
	if value, ok := mpc.mutation.OutputModelPrice(); ok {
		_spec.SetField(modelprice.FieldOutputModelPrice, field.TypeInt, value)
		_node.OutputModelPrice = value
	}
	if value, ok := mpc.mutation.TokenPerCep(); ok {
		_spec.SetField(modelprice.FieldTokenPerCep, field.TypeInt64, value)
		_node.TokenPerCep = value
	}
	if nodes := mpc.mutation.ModelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   modelprice.ModelTable,
			Columns: []string{modelprice.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(model.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ModelID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ModelPrice.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ModelPriceUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (mpc *ModelPriceCreate) OnConflict(opts ...sql.ConflictOption) *ModelPriceUpsertOne {
	mpc.conflict = opts
	return &ModelPriceUpsertOne{
		create: mpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ModelPrice.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mpc *ModelPriceCreate) OnConflictColumns(columns ...string) *ModelPriceUpsertOne {
	mpc.conflict = append(mpc.conflict, sql.ConflictColumns(columns...))
	return &ModelPriceUpsertOne{
		create: mpc,
	}
}

type (
	// ModelPriceUpsertOne is the builder for "upsert"-ing
	//  one ModelPrice node.
	ModelPriceUpsertOne struct {
		create *ModelPriceCreate
	}

	// ModelPriceUpsert is the "OnConflict" setter.
	ModelPriceUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *ModelPriceUpsert) SetCreatedBy(v int64) *ModelPriceUpsert {
	u.Set(modelprice.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ModelPriceUpsert) UpdateCreatedBy() *ModelPriceUpsert {
	u.SetExcluded(modelprice.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *ModelPriceUpsert) AddCreatedBy(v int64) *ModelPriceUpsert {
	u.Add(modelprice.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ModelPriceUpsert) SetUpdatedBy(v int64) *ModelPriceUpsert {
	u.Set(modelprice.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ModelPriceUpsert) UpdateUpdatedBy() *ModelPriceUpsert {
	u.SetExcluded(modelprice.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ModelPriceUpsert) AddUpdatedBy(v int64) *ModelPriceUpsert {
	u.Add(modelprice.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ModelPriceUpsert) SetUpdatedAt(v time.Time) *ModelPriceUpsert {
	u.Set(modelprice.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ModelPriceUpsert) UpdateUpdatedAt() *ModelPriceUpsert {
	u.SetExcluded(modelprice.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ModelPriceUpsert) SetDeletedAt(v time.Time) *ModelPriceUpsert {
	u.Set(modelprice.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ModelPriceUpsert) UpdateDeletedAt() *ModelPriceUpsert {
	u.SetExcluded(modelprice.FieldDeletedAt)
	return u
}

// SetModelID sets the "model_id" field.
func (u *ModelPriceUpsert) SetModelID(v int64) *ModelPriceUpsert {
	u.Set(modelprice.FieldModelID, v)
	return u
}

// UpdateModelID sets the "model_id" field to the value that was provided on create.
func (u *ModelPriceUpsert) UpdateModelID() *ModelPriceUpsert {
	u.SetExcluded(modelprice.FieldModelID)
	return u
}

// SetInvokeType sets the "invoke_type" field.
func (u *ModelPriceUpsert) SetInvokeType(v enums.InvokeType) *ModelPriceUpsert {
	u.Set(modelprice.FieldInvokeType, v)
	return u
}

// UpdateInvokeType sets the "invoke_type" field to the value that was provided on create.
func (u *ModelPriceUpsert) UpdateInvokeType() *ModelPriceUpsert {
	u.SetExcluded(modelprice.FieldInvokeType)
	return u
}

// SetGpuVersion sets the "gpu_version" field.
func (u *ModelPriceUpsert) SetGpuVersion(v enums.GpuVersion) *ModelPriceUpsert {
	u.Set(modelprice.FieldGpuVersion, v)
	return u
}

// UpdateGpuVersion sets the "gpu_version" field to the value that was provided on create.
func (u *ModelPriceUpsert) UpdateGpuVersion() *ModelPriceUpsert {
	u.SetExcluded(modelprice.FieldGpuVersion)
	return u
}

// SetInputGpuPrice sets the "input_gpu_price" field.
func (u *ModelPriceUpsert) SetInputGpuPrice(v int) *ModelPriceUpsert {
	u.Set(modelprice.FieldInputGpuPrice, v)
	return u
}

// UpdateInputGpuPrice sets the "input_gpu_price" field to the value that was provided on create.
func (u *ModelPriceUpsert) UpdateInputGpuPrice() *ModelPriceUpsert {
	u.SetExcluded(modelprice.FieldInputGpuPrice)
	return u
}

// AddInputGpuPrice adds v to the "input_gpu_price" field.
func (u *ModelPriceUpsert) AddInputGpuPrice(v int) *ModelPriceUpsert {
	u.Add(modelprice.FieldInputGpuPrice, v)
	return u
}

// SetOutputGpuPrice sets the "output_gpu_price" field.
func (u *ModelPriceUpsert) SetOutputGpuPrice(v int) *ModelPriceUpsert {
	u.Set(modelprice.FieldOutputGpuPrice, v)
	return u
}

// UpdateOutputGpuPrice sets the "output_gpu_price" field to the value that was provided on create.
func (u *ModelPriceUpsert) UpdateOutputGpuPrice() *ModelPriceUpsert {
	u.SetExcluded(modelprice.FieldOutputGpuPrice)
	return u
}

// AddOutputGpuPrice adds v to the "output_gpu_price" field.
func (u *ModelPriceUpsert) AddOutputGpuPrice(v int) *ModelPriceUpsert {
	u.Add(modelprice.FieldOutputGpuPrice, v)
	return u
}

// SetInputModelPrice sets the "input_model_price" field.
func (u *ModelPriceUpsert) SetInputModelPrice(v int) *ModelPriceUpsert {
	u.Set(modelprice.FieldInputModelPrice, v)
	return u
}

// UpdateInputModelPrice sets the "input_model_price" field to the value that was provided on create.
func (u *ModelPriceUpsert) UpdateInputModelPrice() *ModelPriceUpsert {
	u.SetExcluded(modelprice.FieldInputModelPrice)
	return u
}

// AddInputModelPrice adds v to the "input_model_price" field.
func (u *ModelPriceUpsert) AddInputModelPrice(v int) *ModelPriceUpsert {
	u.Add(modelprice.FieldInputModelPrice, v)
	return u
}

// SetOutputModelPrice sets the "output_model_price" field.
func (u *ModelPriceUpsert) SetOutputModelPrice(v int) *ModelPriceUpsert {
	u.Set(modelprice.FieldOutputModelPrice, v)
	return u
}

// UpdateOutputModelPrice sets the "output_model_price" field to the value that was provided on create.
func (u *ModelPriceUpsert) UpdateOutputModelPrice() *ModelPriceUpsert {
	u.SetExcluded(modelprice.FieldOutputModelPrice)
	return u
}

// AddOutputModelPrice adds v to the "output_model_price" field.
func (u *ModelPriceUpsert) AddOutputModelPrice(v int) *ModelPriceUpsert {
	u.Add(modelprice.FieldOutputModelPrice, v)
	return u
}

// SetTokenPerCep sets the "token_per_cep" field.
func (u *ModelPriceUpsert) SetTokenPerCep(v int64) *ModelPriceUpsert {
	u.Set(modelprice.FieldTokenPerCep, v)
	return u
}

// UpdateTokenPerCep sets the "token_per_cep" field to the value that was provided on create.
func (u *ModelPriceUpsert) UpdateTokenPerCep() *ModelPriceUpsert {
	u.SetExcluded(modelprice.FieldTokenPerCep)
	return u
}

// AddTokenPerCep adds v to the "token_per_cep" field.
func (u *ModelPriceUpsert) AddTokenPerCep(v int64) *ModelPriceUpsert {
	u.Add(modelprice.FieldTokenPerCep, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ModelPrice.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(modelprice.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ModelPriceUpsertOne) UpdateNewValues() *ModelPriceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(modelprice.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(modelprice.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ModelPrice.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ModelPriceUpsertOne) Ignore() *ModelPriceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ModelPriceUpsertOne) DoNothing() *ModelPriceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ModelPriceCreate.OnConflict
// documentation for more info.
func (u *ModelPriceUpsertOne) Update(set func(*ModelPriceUpsert)) *ModelPriceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ModelPriceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *ModelPriceUpsertOne) SetCreatedBy(v int64) *ModelPriceUpsertOne {
	return u.Update(func(s *ModelPriceUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *ModelPriceUpsertOne) AddCreatedBy(v int64) *ModelPriceUpsertOne {
	return u.Update(func(s *ModelPriceUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ModelPriceUpsertOne) UpdateCreatedBy() *ModelPriceUpsertOne {
	return u.Update(func(s *ModelPriceUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ModelPriceUpsertOne) SetUpdatedBy(v int64) *ModelPriceUpsertOne {
	return u.Update(func(s *ModelPriceUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ModelPriceUpsertOne) AddUpdatedBy(v int64) *ModelPriceUpsertOne {
	return u.Update(func(s *ModelPriceUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ModelPriceUpsertOne) UpdateUpdatedBy() *ModelPriceUpsertOne {
	return u.Update(func(s *ModelPriceUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ModelPriceUpsertOne) SetUpdatedAt(v time.Time) *ModelPriceUpsertOne {
	return u.Update(func(s *ModelPriceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ModelPriceUpsertOne) UpdateUpdatedAt() *ModelPriceUpsertOne {
	return u.Update(func(s *ModelPriceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ModelPriceUpsertOne) SetDeletedAt(v time.Time) *ModelPriceUpsertOne {
	return u.Update(func(s *ModelPriceUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ModelPriceUpsertOne) UpdateDeletedAt() *ModelPriceUpsertOne {
	return u.Update(func(s *ModelPriceUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetModelID sets the "model_id" field.
func (u *ModelPriceUpsertOne) SetModelID(v int64) *ModelPriceUpsertOne {
	return u.Update(func(s *ModelPriceUpsert) {
		s.SetModelID(v)
	})
}

// UpdateModelID sets the "model_id" field to the value that was provided on create.
func (u *ModelPriceUpsertOne) UpdateModelID() *ModelPriceUpsertOne {
	return u.Update(func(s *ModelPriceUpsert) {
		s.UpdateModelID()
	})
}

// SetInvokeType sets the "invoke_type" field.
func (u *ModelPriceUpsertOne) SetInvokeType(v enums.InvokeType) *ModelPriceUpsertOne {
	return u.Update(func(s *ModelPriceUpsert) {
		s.SetInvokeType(v)
	})
}

// UpdateInvokeType sets the "invoke_type" field to the value that was provided on create.
func (u *ModelPriceUpsertOne) UpdateInvokeType() *ModelPriceUpsertOne {
	return u.Update(func(s *ModelPriceUpsert) {
		s.UpdateInvokeType()
	})
}

// SetGpuVersion sets the "gpu_version" field.
func (u *ModelPriceUpsertOne) SetGpuVersion(v enums.GpuVersion) *ModelPriceUpsertOne {
	return u.Update(func(s *ModelPriceUpsert) {
		s.SetGpuVersion(v)
	})
}

// UpdateGpuVersion sets the "gpu_version" field to the value that was provided on create.
func (u *ModelPriceUpsertOne) UpdateGpuVersion() *ModelPriceUpsertOne {
	return u.Update(func(s *ModelPriceUpsert) {
		s.UpdateGpuVersion()
	})
}

// SetInputGpuPrice sets the "input_gpu_price" field.
func (u *ModelPriceUpsertOne) SetInputGpuPrice(v int) *ModelPriceUpsertOne {
	return u.Update(func(s *ModelPriceUpsert) {
		s.SetInputGpuPrice(v)
	})
}

// AddInputGpuPrice adds v to the "input_gpu_price" field.
func (u *ModelPriceUpsertOne) AddInputGpuPrice(v int) *ModelPriceUpsertOne {
	return u.Update(func(s *ModelPriceUpsert) {
		s.AddInputGpuPrice(v)
	})
}

// UpdateInputGpuPrice sets the "input_gpu_price" field to the value that was provided on create.
func (u *ModelPriceUpsertOne) UpdateInputGpuPrice() *ModelPriceUpsertOne {
	return u.Update(func(s *ModelPriceUpsert) {
		s.UpdateInputGpuPrice()
	})
}

// SetOutputGpuPrice sets the "output_gpu_price" field.
func (u *ModelPriceUpsertOne) SetOutputGpuPrice(v int) *ModelPriceUpsertOne {
	return u.Update(func(s *ModelPriceUpsert) {
		s.SetOutputGpuPrice(v)
	})
}

// AddOutputGpuPrice adds v to the "output_gpu_price" field.
func (u *ModelPriceUpsertOne) AddOutputGpuPrice(v int) *ModelPriceUpsertOne {
	return u.Update(func(s *ModelPriceUpsert) {
		s.AddOutputGpuPrice(v)
	})
}

// UpdateOutputGpuPrice sets the "output_gpu_price" field to the value that was provided on create.
func (u *ModelPriceUpsertOne) UpdateOutputGpuPrice() *ModelPriceUpsertOne {
	return u.Update(func(s *ModelPriceUpsert) {
		s.UpdateOutputGpuPrice()
	})
}

// SetInputModelPrice sets the "input_model_price" field.
func (u *ModelPriceUpsertOne) SetInputModelPrice(v int) *ModelPriceUpsertOne {
	return u.Update(func(s *ModelPriceUpsert) {
		s.SetInputModelPrice(v)
	})
}

// AddInputModelPrice adds v to the "input_model_price" field.
func (u *ModelPriceUpsertOne) AddInputModelPrice(v int) *ModelPriceUpsertOne {
	return u.Update(func(s *ModelPriceUpsert) {
		s.AddInputModelPrice(v)
	})
}

// UpdateInputModelPrice sets the "input_model_price" field to the value that was provided on create.
func (u *ModelPriceUpsertOne) UpdateInputModelPrice() *ModelPriceUpsertOne {
	return u.Update(func(s *ModelPriceUpsert) {
		s.UpdateInputModelPrice()
	})
}

// SetOutputModelPrice sets the "output_model_price" field.
func (u *ModelPriceUpsertOne) SetOutputModelPrice(v int) *ModelPriceUpsertOne {
	return u.Update(func(s *ModelPriceUpsert) {
		s.SetOutputModelPrice(v)
	})
}

// AddOutputModelPrice adds v to the "output_model_price" field.
func (u *ModelPriceUpsertOne) AddOutputModelPrice(v int) *ModelPriceUpsertOne {
	return u.Update(func(s *ModelPriceUpsert) {
		s.AddOutputModelPrice(v)
	})
}

// UpdateOutputModelPrice sets the "output_model_price" field to the value that was provided on create.
func (u *ModelPriceUpsertOne) UpdateOutputModelPrice() *ModelPriceUpsertOne {
	return u.Update(func(s *ModelPriceUpsert) {
		s.UpdateOutputModelPrice()
	})
}

// SetTokenPerCep sets the "token_per_cep" field.
func (u *ModelPriceUpsertOne) SetTokenPerCep(v int64) *ModelPriceUpsertOne {
	return u.Update(func(s *ModelPriceUpsert) {
		s.SetTokenPerCep(v)
	})
}

// AddTokenPerCep adds v to the "token_per_cep" field.
func (u *ModelPriceUpsertOne) AddTokenPerCep(v int64) *ModelPriceUpsertOne {
	return u.Update(func(s *ModelPriceUpsert) {
		s.AddTokenPerCep(v)
	})
}

// UpdateTokenPerCep sets the "token_per_cep" field to the value that was provided on create.
func (u *ModelPriceUpsertOne) UpdateTokenPerCep() *ModelPriceUpsertOne {
	return u.Update(func(s *ModelPriceUpsert) {
		s.UpdateTokenPerCep()
	})
}

// Exec executes the query.
func (u *ModelPriceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for ModelPriceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ModelPriceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ModelPriceUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ModelPriceUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ModelPriceCreateBulk is the builder for creating many ModelPrice entities in bulk.
type ModelPriceCreateBulk struct {
	config
	err      error
	builders []*ModelPriceCreate
	conflict []sql.ConflictOption
}

// Save creates the ModelPrice entities in the database.
func (mpcb *ModelPriceCreateBulk) Save(ctx context.Context) ([]*ModelPrice, error) {
	if mpcb.err != nil {
		return nil, mpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mpcb.builders))
	nodes := make([]*ModelPrice, len(mpcb.builders))
	mutators := make([]Mutator, len(mpcb.builders))
	for i := range mpcb.builders {
		func(i int, root context.Context) {
			builder := mpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ModelPriceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mpcb *ModelPriceCreateBulk) SaveX(ctx context.Context) []*ModelPrice {
	v, err := mpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mpcb *ModelPriceCreateBulk) Exec(ctx context.Context) error {
	_, err := mpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpcb *ModelPriceCreateBulk) ExecX(ctx context.Context) {
	if err := mpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ModelPrice.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ModelPriceUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (mpcb *ModelPriceCreateBulk) OnConflict(opts ...sql.ConflictOption) *ModelPriceUpsertBulk {
	mpcb.conflict = opts
	return &ModelPriceUpsertBulk{
		create: mpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ModelPrice.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mpcb *ModelPriceCreateBulk) OnConflictColumns(columns ...string) *ModelPriceUpsertBulk {
	mpcb.conflict = append(mpcb.conflict, sql.ConflictColumns(columns...))
	return &ModelPriceUpsertBulk{
		create: mpcb,
	}
}

// ModelPriceUpsertBulk is the builder for "upsert"-ing
// a bulk of ModelPrice nodes.
type ModelPriceUpsertBulk struct {
	create *ModelPriceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ModelPrice.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(modelprice.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ModelPriceUpsertBulk) UpdateNewValues() *ModelPriceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(modelprice.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(modelprice.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ModelPrice.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ModelPriceUpsertBulk) Ignore() *ModelPriceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ModelPriceUpsertBulk) DoNothing() *ModelPriceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ModelPriceCreateBulk.OnConflict
// documentation for more info.
func (u *ModelPriceUpsertBulk) Update(set func(*ModelPriceUpsert)) *ModelPriceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ModelPriceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *ModelPriceUpsertBulk) SetCreatedBy(v int64) *ModelPriceUpsertBulk {
	return u.Update(func(s *ModelPriceUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *ModelPriceUpsertBulk) AddCreatedBy(v int64) *ModelPriceUpsertBulk {
	return u.Update(func(s *ModelPriceUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ModelPriceUpsertBulk) UpdateCreatedBy() *ModelPriceUpsertBulk {
	return u.Update(func(s *ModelPriceUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ModelPriceUpsertBulk) SetUpdatedBy(v int64) *ModelPriceUpsertBulk {
	return u.Update(func(s *ModelPriceUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ModelPriceUpsertBulk) AddUpdatedBy(v int64) *ModelPriceUpsertBulk {
	return u.Update(func(s *ModelPriceUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ModelPriceUpsertBulk) UpdateUpdatedBy() *ModelPriceUpsertBulk {
	return u.Update(func(s *ModelPriceUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ModelPriceUpsertBulk) SetUpdatedAt(v time.Time) *ModelPriceUpsertBulk {
	return u.Update(func(s *ModelPriceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ModelPriceUpsertBulk) UpdateUpdatedAt() *ModelPriceUpsertBulk {
	return u.Update(func(s *ModelPriceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ModelPriceUpsertBulk) SetDeletedAt(v time.Time) *ModelPriceUpsertBulk {
	return u.Update(func(s *ModelPriceUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ModelPriceUpsertBulk) UpdateDeletedAt() *ModelPriceUpsertBulk {
	return u.Update(func(s *ModelPriceUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetModelID sets the "model_id" field.
func (u *ModelPriceUpsertBulk) SetModelID(v int64) *ModelPriceUpsertBulk {
	return u.Update(func(s *ModelPriceUpsert) {
		s.SetModelID(v)
	})
}

// UpdateModelID sets the "model_id" field to the value that was provided on create.
func (u *ModelPriceUpsertBulk) UpdateModelID() *ModelPriceUpsertBulk {
	return u.Update(func(s *ModelPriceUpsert) {
		s.UpdateModelID()
	})
}

// SetInvokeType sets the "invoke_type" field.
func (u *ModelPriceUpsertBulk) SetInvokeType(v enums.InvokeType) *ModelPriceUpsertBulk {
	return u.Update(func(s *ModelPriceUpsert) {
		s.SetInvokeType(v)
	})
}

// UpdateInvokeType sets the "invoke_type" field to the value that was provided on create.
func (u *ModelPriceUpsertBulk) UpdateInvokeType() *ModelPriceUpsertBulk {
	return u.Update(func(s *ModelPriceUpsert) {
		s.UpdateInvokeType()
	})
}

// SetGpuVersion sets the "gpu_version" field.
func (u *ModelPriceUpsertBulk) SetGpuVersion(v enums.GpuVersion) *ModelPriceUpsertBulk {
	return u.Update(func(s *ModelPriceUpsert) {
		s.SetGpuVersion(v)
	})
}

// UpdateGpuVersion sets the "gpu_version" field to the value that was provided on create.
func (u *ModelPriceUpsertBulk) UpdateGpuVersion() *ModelPriceUpsertBulk {
	return u.Update(func(s *ModelPriceUpsert) {
		s.UpdateGpuVersion()
	})
}

// SetInputGpuPrice sets the "input_gpu_price" field.
func (u *ModelPriceUpsertBulk) SetInputGpuPrice(v int) *ModelPriceUpsertBulk {
	return u.Update(func(s *ModelPriceUpsert) {
		s.SetInputGpuPrice(v)
	})
}

// AddInputGpuPrice adds v to the "input_gpu_price" field.
func (u *ModelPriceUpsertBulk) AddInputGpuPrice(v int) *ModelPriceUpsertBulk {
	return u.Update(func(s *ModelPriceUpsert) {
		s.AddInputGpuPrice(v)
	})
}

// UpdateInputGpuPrice sets the "input_gpu_price" field to the value that was provided on create.
func (u *ModelPriceUpsertBulk) UpdateInputGpuPrice() *ModelPriceUpsertBulk {
	return u.Update(func(s *ModelPriceUpsert) {
		s.UpdateInputGpuPrice()
	})
}

// SetOutputGpuPrice sets the "output_gpu_price" field.
func (u *ModelPriceUpsertBulk) SetOutputGpuPrice(v int) *ModelPriceUpsertBulk {
	return u.Update(func(s *ModelPriceUpsert) {
		s.SetOutputGpuPrice(v)
	})
}

// AddOutputGpuPrice adds v to the "output_gpu_price" field.
func (u *ModelPriceUpsertBulk) AddOutputGpuPrice(v int) *ModelPriceUpsertBulk {
	return u.Update(func(s *ModelPriceUpsert) {
		s.AddOutputGpuPrice(v)
	})
}

// UpdateOutputGpuPrice sets the "output_gpu_price" field to the value that was provided on create.
func (u *ModelPriceUpsertBulk) UpdateOutputGpuPrice() *ModelPriceUpsertBulk {
	return u.Update(func(s *ModelPriceUpsert) {
		s.UpdateOutputGpuPrice()
	})
}

// SetInputModelPrice sets the "input_model_price" field.
func (u *ModelPriceUpsertBulk) SetInputModelPrice(v int) *ModelPriceUpsertBulk {
	return u.Update(func(s *ModelPriceUpsert) {
		s.SetInputModelPrice(v)
	})
}

// AddInputModelPrice adds v to the "input_model_price" field.
func (u *ModelPriceUpsertBulk) AddInputModelPrice(v int) *ModelPriceUpsertBulk {
	return u.Update(func(s *ModelPriceUpsert) {
		s.AddInputModelPrice(v)
	})
}

// UpdateInputModelPrice sets the "input_model_price" field to the value that was provided on create.
func (u *ModelPriceUpsertBulk) UpdateInputModelPrice() *ModelPriceUpsertBulk {
	return u.Update(func(s *ModelPriceUpsert) {
		s.UpdateInputModelPrice()
	})
}

// SetOutputModelPrice sets the "output_model_price" field.
func (u *ModelPriceUpsertBulk) SetOutputModelPrice(v int) *ModelPriceUpsertBulk {
	return u.Update(func(s *ModelPriceUpsert) {
		s.SetOutputModelPrice(v)
	})
}

// AddOutputModelPrice adds v to the "output_model_price" field.
func (u *ModelPriceUpsertBulk) AddOutputModelPrice(v int) *ModelPriceUpsertBulk {
	return u.Update(func(s *ModelPriceUpsert) {
		s.AddOutputModelPrice(v)
	})
}

// UpdateOutputModelPrice sets the "output_model_price" field to the value that was provided on create.
func (u *ModelPriceUpsertBulk) UpdateOutputModelPrice() *ModelPriceUpsertBulk {
	return u.Update(func(s *ModelPriceUpsert) {
		s.UpdateOutputModelPrice()
	})
}

// SetTokenPerCep sets the "token_per_cep" field.
func (u *ModelPriceUpsertBulk) SetTokenPerCep(v int64) *ModelPriceUpsertBulk {
	return u.Update(func(s *ModelPriceUpsert) {
		s.SetTokenPerCep(v)
	})
}

// AddTokenPerCep adds v to the "token_per_cep" field.
func (u *ModelPriceUpsertBulk) AddTokenPerCep(v int64) *ModelPriceUpsertBulk {
	return u.Update(func(s *ModelPriceUpsert) {
		s.AddTokenPerCep(v)
	})
}

// UpdateTokenPerCep sets the "token_per_cep" field to the value that was provided on create.
func (u *ModelPriceUpsertBulk) UpdateTokenPerCep() *ModelPriceUpsertBulk {
	return u.Update(func(s *ModelPriceUpsert) {
		s.UpdateTokenPerCep()
	})
}

// Exec executes the query.
func (u *ModelPriceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the ModelPriceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for ModelPriceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ModelPriceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
