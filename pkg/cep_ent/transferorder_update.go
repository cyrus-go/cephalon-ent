// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/bill"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/symbol"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/transferorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/vxsocial"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// TransferOrderUpdate is the builder for updating TransferOrder entities.
type TransferOrderUpdate struct {
	config
	hooks     []Hook
	mutation  *TransferOrderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TransferOrderUpdate builder.
func (tou *TransferOrderUpdate) Where(ps ...predicate.TransferOrder) *TransferOrderUpdate {
	tou.mutation.Where(ps...)
	return tou
}

// SetCreatedBy sets the "created_by" field.
func (tou *TransferOrderUpdate) SetCreatedBy(i int64) *TransferOrderUpdate {
	tou.mutation.ResetCreatedBy()
	tou.mutation.SetCreatedBy(i)
	return tou
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tou *TransferOrderUpdate) SetNillableCreatedBy(i *int64) *TransferOrderUpdate {
	if i != nil {
		tou.SetCreatedBy(*i)
	}
	return tou
}

// AddCreatedBy adds i to the "created_by" field.
func (tou *TransferOrderUpdate) AddCreatedBy(i int64) *TransferOrderUpdate {
	tou.mutation.AddCreatedBy(i)
	return tou
}

// SetUpdatedBy sets the "updated_by" field.
func (tou *TransferOrderUpdate) SetUpdatedBy(i int64) *TransferOrderUpdate {
	tou.mutation.ResetUpdatedBy()
	tou.mutation.SetUpdatedBy(i)
	return tou
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tou *TransferOrderUpdate) SetNillableUpdatedBy(i *int64) *TransferOrderUpdate {
	if i != nil {
		tou.SetUpdatedBy(*i)
	}
	return tou
}

// AddUpdatedBy adds i to the "updated_by" field.
func (tou *TransferOrderUpdate) AddUpdatedBy(i int64) *TransferOrderUpdate {
	tou.mutation.AddUpdatedBy(i)
	return tou
}

// SetUpdatedAt sets the "updated_at" field.
func (tou *TransferOrderUpdate) SetUpdatedAt(t time.Time) *TransferOrderUpdate {
	tou.mutation.SetUpdatedAt(t)
	return tou
}

// SetDeletedAt sets the "deleted_at" field.
func (tou *TransferOrderUpdate) SetDeletedAt(t time.Time) *TransferOrderUpdate {
	tou.mutation.SetDeletedAt(t)
	return tou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tou *TransferOrderUpdate) SetNillableDeletedAt(t *time.Time) *TransferOrderUpdate {
	if t != nil {
		tou.SetDeletedAt(*t)
	}
	return tou
}

// SetSourceUserID sets the "source_user_id" field.
func (tou *TransferOrderUpdate) SetSourceUserID(i int64) *TransferOrderUpdate {
	tou.mutation.SetSourceUserID(i)
	return tou
}

// SetNillableSourceUserID sets the "source_user_id" field if the given value is not nil.
func (tou *TransferOrderUpdate) SetNillableSourceUserID(i *int64) *TransferOrderUpdate {
	if i != nil {
		tou.SetSourceUserID(*i)
	}
	return tou
}

// SetTargetUserID sets the "target_user_id" field.
func (tou *TransferOrderUpdate) SetTargetUserID(i int64) *TransferOrderUpdate {
	tou.mutation.SetTargetUserID(i)
	return tou
}

// SetNillableTargetUserID sets the "target_user_id" field if the given value is not nil.
func (tou *TransferOrderUpdate) SetNillableTargetUserID(i *int64) *TransferOrderUpdate {
	if i != nil {
		tou.SetTargetUserID(*i)
	}
	return tou
}

// SetStatus sets the "status" field.
func (tou *TransferOrderUpdate) SetStatus(t transferorder.Status) *TransferOrderUpdate {
	tou.mutation.SetStatus(t)
	return tou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tou *TransferOrderUpdate) SetNillableStatus(t *transferorder.Status) *TransferOrderUpdate {
	if t != nil {
		tou.SetStatus(*t)
	}
	return tou
}

// SetSymbolID sets the "symbol_id" field.
func (tou *TransferOrderUpdate) SetSymbolID(i int64) *TransferOrderUpdate {
	tou.mutation.SetSymbolID(i)
	return tou
}

// SetNillableSymbolID sets the "symbol_id" field if the given value is not nil.
func (tou *TransferOrderUpdate) SetNillableSymbolID(i *int64) *TransferOrderUpdate {
	if i != nil {
		tou.SetSymbolID(*i)
	}
	return tou
}

// SetAmount sets the "amount" field.
func (tou *TransferOrderUpdate) SetAmount(i int64) *TransferOrderUpdate {
	tou.mutation.ResetAmount()
	tou.mutation.SetAmount(i)
	return tou
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tou *TransferOrderUpdate) SetNillableAmount(i *int64) *TransferOrderUpdate {
	if i != nil {
		tou.SetAmount(*i)
	}
	return tou
}

// AddAmount adds i to the "amount" field.
func (tou *TransferOrderUpdate) AddAmount(i int64) *TransferOrderUpdate {
	tou.mutation.AddAmount(i)
	return tou
}

// SetType sets the "type" field.
func (tou *TransferOrderUpdate) SetType(eot enums.TransferOrderType) *TransferOrderUpdate {
	tou.mutation.SetType(eot)
	return tou
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tou *TransferOrderUpdate) SetNillableType(eot *enums.TransferOrderType) *TransferOrderUpdate {
	if eot != nil {
		tou.SetType(*eot)
	}
	return tou
}

// SetSerialNumber sets the "serial_number" field.
func (tou *TransferOrderUpdate) SetSerialNumber(s string) *TransferOrderUpdate {
	tou.mutation.SetSerialNumber(s)
	return tou
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (tou *TransferOrderUpdate) SetNillableSerialNumber(s *string) *TransferOrderUpdate {
	if s != nil {
		tou.SetSerialNumber(*s)
	}
	return tou
}

// SetSocialID sets the "social_id" field.
func (tou *TransferOrderUpdate) SetSocialID(i int64) *TransferOrderUpdate {
	tou.mutation.SetSocialID(i)
	return tou
}

// SetNillableSocialID sets the "social_id" field if the given value is not nil.
func (tou *TransferOrderUpdate) SetNillableSocialID(i *int64) *TransferOrderUpdate {
	if i != nil {
		tou.SetSocialID(*i)
	}
	return tou
}

// ClearSocialID clears the value of the "social_id" field.
func (tou *TransferOrderUpdate) ClearSocialID() *TransferOrderUpdate {
	tou.mutation.ClearSocialID()
	return tou
}

// SetThirdAPIResp sets the "third_api_resp" field.
func (tou *TransferOrderUpdate) SetThirdAPIResp(s string) *TransferOrderUpdate {
	tou.mutation.SetThirdAPIResp(s)
	return tou
}

// SetNillableThirdAPIResp sets the "third_api_resp" field if the given value is not nil.
func (tou *TransferOrderUpdate) SetNillableThirdAPIResp(s *string) *TransferOrderUpdate {
	if s != nil {
		tou.SetThirdAPIResp(*s)
	}
	return tou
}

// SetOutTransactionID sets the "out_transaction_id" field.
func (tou *TransferOrderUpdate) SetOutTransactionID(s string) *TransferOrderUpdate {
	tou.mutation.SetOutTransactionID(s)
	return tou
}

// SetNillableOutTransactionID sets the "out_transaction_id" field if the given value is not nil.
func (tou *TransferOrderUpdate) SetNillableOutTransactionID(s *string) *TransferOrderUpdate {
	if s != nil {
		tou.SetOutTransactionID(*s)
	}
	return tou
}

// SetWithdrawAccount sets the "withdraw_account" field.
func (tou *TransferOrderUpdate) SetWithdrawAccount(s string) *TransferOrderUpdate {
	tou.mutation.SetWithdrawAccount(s)
	return tou
}

// SetNillableWithdrawAccount sets the "withdraw_account" field if the given value is not nil.
func (tou *TransferOrderUpdate) SetNillableWithdrawAccount(s *string) *TransferOrderUpdate {
	if s != nil {
		tou.SetWithdrawAccount(*s)
	}
	return tou
}

// SetWithdrawRate sets the "withdraw_rate" field.
func (tou *TransferOrderUpdate) SetWithdrawRate(i int64) *TransferOrderUpdate {
	tou.mutation.ResetWithdrawRate()
	tou.mutation.SetWithdrawRate(i)
	return tou
}

// SetNillableWithdrawRate sets the "withdraw_rate" field if the given value is not nil.
func (tou *TransferOrderUpdate) SetNillableWithdrawRate(i *int64) *TransferOrderUpdate {
	if i != nil {
		tou.SetWithdrawRate(*i)
	}
	return tou
}

// AddWithdrawRate adds i to the "withdraw_rate" field.
func (tou *TransferOrderUpdate) AddWithdrawRate(i int64) *TransferOrderUpdate {
	tou.mutation.AddWithdrawRate(i)
	return tou
}

// SetWithdrawRealAmount sets the "withdraw_real_amount" field.
func (tou *TransferOrderUpdate) SetWithdrawRealAmount(i int64) *TransferOrderUpdate {
	tou.mutation.ResetWithdrawRealAmount()
	tou.mutation.SetWithdrawRealAmount(i)
	return tou
}

// SetNillableWithdrawRealAmount sets the "withdraw_real_amount" field if the given value is not nil.
func (tou *TransferOrderUpdate) SetNillableWithdrawRealAmount(i *int64) *TransferOrderUpdate {
	if i != nil {
		tou.SetWithdrawRealAmount(*i)
	}
	return tou
}

// AddWithdrawRealAmount adds i to the "withdraw_real_amount" field.
func (tou *TransferOrderUpdate) AddWithdrawRealAmount(i int64) *TransferOrderUpdate {
	tou.mutation.AddWithdrawRealAmount(i)
	return tou
}

// SetOperateUserID sets the "operate_user_id" field.
func (tou *TransferOrderUpdate) SetOperateUserID(i int64) *TransferOrderUpdate {
	tou.mutation.SetOperateUserID(i)
	return tou
}

// SetNillableOperateUserID sets the "operate_user_id" field if the given value is not nil.
func (tou *TransferOrderUpdate) SetNillableOperateUserID(i *int64) *TransferOrderUpdate {
	if i != nil {
		tou.SetOperateUserID(*i)
	}
	return tou
}

// SetRejectReason sets the "reject_reason" field.
func (tou *TransferOrderUpdate) SetRejectReason(s string) *TransferOrderUpdate {
	tou.mutation.SetRejectReason(s)
	return tou
}

// SetNillableRejectReason sets the "reject_reason" field if the given value is not nil.
func (tou *TransferOrderUpdate) SetNillableRejectReason(s *string) *TransferOrderUpdate {
	if s != nil {
		tou.SetRejectReason(*s)
	}
	return tou
}

// SetSourceUser sets the "source_user" edge to the User entity.
func (tou *TransferOrderUpdate) SetSourceUser(u *User) *TransferOrderUpdate {
	return tou.SetSourceUserID(u.ID)
}

// SetTargetUser sets the "target_user" edge to the User entity.
func (tou *TransferOrderUpdate) SetTargetUser(u *User) *TransferOrderUpdate {
	return tou.SetTargetUserID(u.ID)
}

// AddBillIDs adds the "bills" edge to the Bill entity by IDs.
func (tou *TransferOrderUpdate) AddBillIDs(ids ...int64) *TransferOrderUpdate {
	tou.mutation.AddBillIDs(ids...)
	return tou
}

// AddBills adds the "bills" edges to the Bill entity.
func (tou *TransferOrderUpdate) AddBills(b ...*Bill) *TransferOrderUpdate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return tou.AddBillIDs(ids...)
}

// SetVxSocialID sets the "vx_social" edge to the VXSocial entity by ID.
func (tou *TransferOrderUpdate) SetVxSocialID(id int64) *TransferOrderUpdate {
	tou.mutation.SetVxSocialID(id)
	return tou
}

// SetNillableVxSocialID sets the "vx_social" edge to the VXSocial entity by ID if the given value is not nil.
func (tou *TransferOrderUpdate) SetNillableVxSocialID(id *int64) *TransferOrderUpdate {
	if id != nil {
		tou = tou.SetVxSocialID(*id)
	}
	return tou
}

// SetVxSocial sets the "vx_social" edge to the VXSocial entity.
func (tou *TransferOrderUpdate) SetVxSocial(v *VXSocial) *TransferOrderUpdate {
	return tou.SetVxSocialID(v.ID)
}

// SetSymbol sets the "symbol" edge to the Symbol entity.
func (tou *TransferOrderUpdate) SetSymbol(s *Symbol) *TransferOrderUpdate {
	return tou.SetSymbolID(s.ID)
}

// SetOperateUser sets the "operate_user" edge to the User entity.
func (tou *TransferOrderUpdate) SetOperateUser(u *User) *TransferOrderUpdate {
	return tou.SetOperateUserID(u.ID)
}

// Mutation returns the TransferOrderMutation object of the builder.
func (tou *TransferOrderUpdate) Mutation() *TransferOrderMutation {
	return tou.mutation
}

// ClearSourceUser clears the "source_user" edge to the User entity.
func (tou *TransferOrderUpdate) ClearSourceUser() *TransferOrderUpdate {
	tou.mutation.ClearSourceUser()
	return tou
}

// ClearTargetUser clears the "target_user" edge to the User entity.
func (tou *TransferOrderUpdate) ClearTargetUser() *TransferOrderUpdate {
	tou.mutation.ClearTargetUser()
	return tou
}

// ClearBills clears all "bills" edges to the Bill entity.
func (tou *TransferOrderUpdate) ClearBills() *TransferOrderUpdate {
	tou.mutation.ClearBills()
	return tou
}

// RemoveBillIDs removes the "bills" edge to Bill entities by IDs.
func (tou *TransferOrderUpdate) RemoveBillIDs(ids ...int64) *TransferOrderUpdate {
	tou.mutation.RemoveBillIDs(ids...)
	return tou
}

// RemoveBills removes "bills" edges to Bill entities.
func (tou *TransferOrderUpdate) RemoveBills(b ...*Bill) *TransferOrderUpdate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return tou.RemoveBillIDs(ids...)
}

// ClearVxSocial clears the "vx_social" edge to the VXSocial entity.
func (tou *TransferOrderUpdate) ClearVxSocial() *TransferOrderUpdate {
	tou.mutation.ClearVxSocial()
	return tou
}

// ClearSymbol clears the "symbol" edge to the Symbol entity.
func (tou *TransferOrderUpdate) ClearSymbol() *TransferOrderUpdate {
	tou.mutation.ClearSymbol()
	return tou
}

// ClearOperateUser clears the "operate_user" edge to the User entity.
func (tou *TransferOrderUpdate) ClearOperateUser() *TransferOrderUpdate {
	tou.mutation.ClearOperateUser()
	return tou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tou *TransferOrderUpdate) Save(ctx context.Context) (int, error) {
	tou.defaults()
	return withHooks(ctx, tou.sqlSave, tou.mutation, tou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tou *TransferOrderUpdate) SaveX(ctx context.Context) int {
	affected, err := tou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tou *TransferOrderUpdate) Exec(ctx context.Context) error {
	_, err := tou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tou *TransferOrderUpdate) ExecX(ctx context.Context) {
	if err := tou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tou *TransferOrderUpdate) defaults() {
	if _, ok := tou.mutation.UpdatedAt(); !ok {
		v := transferorder.UpdateDefaultUpdatedAt()
		tou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tou *TransferOrderUpdate) check() error {
	if v, ok := tou.mutation.Status(); ok {
		if err := transferorder.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "TransferOrder.status": %w`, err)}
		}
	}
	if v, ok := tou.mutation.GetType(); ok {
		if err := transferorder.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "TransferOrder.type": %w`, err)}
		}
	}
	if _, ok := tou.mutation.SourceUserID(); tou.mutation.SourceUserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "TransferOrder.source_user"`)
	}
	if _, ok := tou.mutation.TargetUserID(); tou.mutation.TargetUserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "TransferOrder.target_user"`)
	}
	if _, ok := tou.mutation.SymbolID(); tou.mutation.SymbolCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "TransferOrder.symbol"`)
	}
	if _, ok := tou.mutation.OperateUserID(); tou.mutation.OperateUserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "TransferOrder.operate_user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tou *TransferOrderUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TransferOrderUpdate {
	tou.modifiers = append(tou.modifiers, modifiers...)
	return tou
}

func (tou *TransferOrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(transferorder.Table, transferorder.Columns, sqlgraph.NewFieldSpec(transferorder.FieldID, field.TypeInt64))
	if ps := tou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tou.mutation.CreatedBy(); ok {
		_spec.SetField(transferorder.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := tou.mutation.AddedCreatedBy(); ok {
		_spec.AddField(transferorder.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := tou.mutation.UpdatedBy(); ok {
		_spec.SetField(transferorder.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := tou.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(transferorder.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := tou.mutation.UpdatedAt(); ok {
		_spec.SetField(transferorder.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tou.mutation.DeletedAt(); ok {
		_spec.SetField(transferorder.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := tou.mutation.Status(); ok {
		_spec.SetField(transferorder.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tou.mutation.Amount(); ok {
		_spec.SetField(transferorder.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := tou.mutation.AddedAmount(); ok {
		_spec.AddField(transferorder.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := tou.mutation.GetType(); ok {
		_spec.SetField(transferorder.FieldType, field.TypeEnum, value)
	}
	if value, ok := tou.mutation.SerialNumber(); ok {
		_spec.SetField(transferorder.FieldSerialNumber, field.TypeString, value)
	}
	if value, ok := tou.mutation.ThirdAPIResp(); ok {
		_spec.SetField(transferorder.FieldThirdAPIResp, field.TypeString, value)
	}
	if value, ok := tou.mutation.OutTransactionID(); ok {
		_spec.SetField(transferorder.FieldOutTransactionID, field.TypeString, value)
	}
	if value, ok := tou.mutation.WithdrawAccount(); ok {
		_spec.SetField(transferorder.FieldWithdrawAccount, field.TypeString, value)
	}
	if value, ok := tou.mutation.WithdrawRate(); ok {
		_spec.SetField(transferorder.FieldWithdrawRate, field.TypeInt64, value)
	}
	if value, ok := tou.mutation.AddedWithdrawRate(); ok {
		_spec.AddField(transferorder.FieldWithdrawRate, field.TypeInt64, value)
	}
	if value, ok := tou.mutation.WithdrawRealAmount(); ok {
		_spec.SetField(transferorder.FieldWithdrawRealAmount, field.TypeInt64, value)
	}
	if value, ok := tou.mutation.AddedWithdrawRealAmount(); ok {
		_spec.AddField(transferorder.FieldWithdrawRealAmount, field.TypeInt64, value)
	}
	if value, ok := tou.mutation.RejectReason(); ok {
		_spec.SetField(transferorder.FieldRejectReason, field.TypeString, value)
	}
	if tou.mutation.SourceUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transferorder.SourceUserTable,
			Columns: []string{transferorder.SourceUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tou.mutation.SourceUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transferorder.SourceUserTable,
			Columns: []string{transferorder.SourceUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tou.mutation.TargetUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transferorder.TargetUserTable,
			Columns: []string{transferorder.TargetUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tou.mutation.TargetUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transferorder.TargetUserTable,
			Columns: []string{transferorder.TargetUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tou.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transferorder.BillsTable,
			Columns: []string{transferorder.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tou.mutation.RemovedBillsIDs(); len(nodes) > 0 && !tou.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transferorder.BillsTable,
			Columns: []string{transferorder.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tou.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transferorder.BillsTable,
			Columns: []string{transferorder.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tou.mutation.VxSocialCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transferorder.VxSocialTable,
			Columns: []string{transferorder.VxSocialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vxsocial.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tou.mutation.VxSocialIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transferorder.VxSocialTable,
			Columns: []string{transferorder.VxSocialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vxsocial.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tou.mutation.SymbolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transferorder.SymbolTable,
			Columns: []string{transferorder.SymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tou.mutation.SymbolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transferorder.SymbolTable,
			Columns: []string{transferorder.SymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tou.mutation.OperateUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transferorder.OperateUserTable,
			Columns: []string{transferorder.OperateUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tou.mutation.OperateUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transferorder.OperateUserTable,
			Columns: []string{transferorder.OperateUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tou.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transferorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tou.mutation.done = true
	return n, nil
}

// TransferOrderUpdateOne is the builder for updating a single TransferOrder entity.
type TransferOrderUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TransferOrderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedBy sets the "created_by" field.
func (touo *TransferOrderUpdateOne) SetCreatedBy(i int64) *TransferOrderUpdateOne {
	touo.mutation.ResetCreatedBy()
	touo.mutation.SetCreatedBy(i)
	return touo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (touo *TransferOrderUpdateOne) SetNillableCreatedBy(i *int64) *TransferOrderUpdateOne {
	if i != nil {
		touo.SetCreatedBy(*i)
	}
	return touo
}

// AddCreatedBy adds i to the "created_by" field.
func (touo *TransferOrderUpdateOne) AddCreatedBy(i int64) *TransferOrderUpdateOne {
	touo.mutation.AddCreatedBy(i)
	return touo
}

// SetUpdatedBy sets the "updated_by" field.
func (touo *TransferOrderUpdateOne) SetUpdatedBy(i int64) *TransferOrderUpdateOne {
	touo.mutation.ResetUpdatedBy()
	touo.mutation.SetUpdatedBy(i)
	return touo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (touo *TransferOrderUpdateOne) SetNillableUpdatedBy(i *int64) *TransferOrderUpdateOne {
	if i != nil {
		touo.SetUpdatedBy(*i)
	}
	return touo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (touo *TransferOrderUpdateOne) AddUpdatedBy(i int64) *TransferOrderUpdateOne {
	touo.mutation.AddUpdatedBy(i)
	return touo
}

// SetUpdatedAt sets the "updated_at" field.
func (touo *TransferOrderUpdateOne) SetUpdatedAt(t time.Time) *TransferOrderUpdateOne {
	touo.mutation.SetUpdatedAt(t)
	return touo
}

// SetDeletedAt sets the "deleted_at" field.
func (touo *TransferOrderUpdateOne) SetDeletedAt(t time.Time) *TransferOrderUpdateOne {
	touo.mutation.SetDeletedAt(t)
	return touo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (touo *TransferOrderUpdateOne) SetNillableDeletedAt(t *time.Time) *TransferOrderUpdateOne {
	if t != nil {
		touo.SetDeletedAt(*t)
	}
	return touo
}

// SetSourceUserID sets the "source_user_id" field.
func (touo *TransferOrderUpdateOne) SetSourceUserID(i int64) *TransferOrderUpdateOne {
	touo.mutation.SetSourceUserID(i)
	return touo
}

// SetNillableSourceUserID sets the "source_user_id" field if the given value is not nil.
func (touo *TransferOrderUpdateOne) SetNillableSourceUserID(i *int64) *TransferOrderUpdateOne {
	if i != nil {
		touo.SetSourceUserID(*i)
	}
	return touo
}

// SetTargetUserID sets the "target_user_id" field.
func (touo *TransferOrderUpdateOne) SetTargetUserID(i int64) *TransferOrderUpdateOne {
	touo.mutation.SetTargetUserID(i)
	return touo
}

// SetNillableTargetUserID sets the "target_user_id" field if the given value is not nil.
func (touo *TransferOrderUpdateOne) SetNillableTargetUserID(i *int64) *TransferOrderUpdateOne {
	if i != nil {
		touo.SetTargetUserID(*i)
	}
	return touo
}

// SetStatus sets the "status" field.
func (touo *TransferOrderUpdateOne) SetStatus(t transferorder.Status) *TransferOrderUpdateOne {
	touo.mutation.SetStatus(t)
	return touo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (touo *TransferOrderUpdateOne) SetNillableStatus(t *transferorder.Status) *TransferOrderUpdateOne {
	if t != nil {
		touo.SetStatus(*t)
	}
	return touo
}

// SetSymbolID sets the "symbol_id" field.
func (touo *TransferOrderUpdateOne) SetSymbolID(i int64) *TransferOrderUpdateOne {
	touo.mutation.SetSymbolID(i)
	return touo
}

// SetNillableSymbolID sets the "symbol_id" field if the given value is not nil.
func (touo *TransferOrderUpdateOne) SetNillableSymbolID(i *int64) *TransferOrderUpdateOne {
	if i != nil {
		touo.SetSymbolID(*i)
	}
	return touo
}

// SetAmount sets the "amount" field.
func (touo *TransferOrderUpdateOne) SetAmount(i int64) *TransferOrderUpdateOne {
	touo.mutation.ResetAmount()
	touo.mutation.SetAmount(i)
	return touo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (touo *TransferOrderUpdateOne) SetNillableAmount(i *int64) *TransferOrderUpdateOne {
	if i != nil {
		touo.SetAmount(*i)
	}
	return touo
}

// AddAmount adds i to the "amount" field.
func (touo *TransferOrderUpdateOne) AddAmount(i int64) *TransferOrderUpdateOne {
	touo.mutation.AddAmount(i)
	return touo
}

// SetType sets the "type" field.
func (touo *TransferOrderUpdateOne) SetType(eot enums.TransferOrderType) *TransferOrderUpdateOne {
	touo.mutation.SetType(eot)
	return touo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (touo *TransferOrderUpdateOne) SetNillableType(eot *enums.TransferOrderType) *TransferOrderUpdateOne {
	if eot != nil {
		touo.SetType(*eot)
	}
	return touo
}

// SetSerialNumber sets the "serial_number" field.
func (touo *TransferOrderUpdateOne) SetSerialNumber(s string) *TransferOrderUpdateOne {
	touo.mutation.SetSerialNumber(s)
	return touo
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (touo *TransferOrderUpdateOne) SetNillableSerialNumber(s *string) *TransferOrderUpdateOne {
	if s != nil {
		touo.SetSerialNumber(*s)
	}
	return touo
}

// SetSocialID sets the "social_id" field.
func (touo *TransferOrderUpdateOne) SetSocialID(i int64) *TransferOrderUpdateOne {
	touo.mutation.SetSocialID(i)
	return touo
}

// SetNillableSocialID sets the "social_id" field if the given value is not nil.
func (touo *TransferOrderUpdateOne) SetNillableSocialID(i *int64) *TransferOrderUpdateOne {
	if i != nil {
		touo.SetSocialID(*i)
	}
	return touo
}

// ClearSocialID clears the value of the "social_id" field.
func (touo *TransferOrderUpdateOne) ClearSocialID() *TransferOrderUpdateOne {
	touo.mutation.ClearSocialID()
	return touo
}

// SetThirdAPIResp sets the "third_api_resp" field.
func (touo *TransferOrderUpdateOne) SetThirdAPIResp(s string) *TransferOrderUpdateOne {
	touo.mutation.SetThirdAPIResp(s)
	return touo
}

// SetNillableThirdAPIResp sets the "third_api_resp" field if the given value is not nil.
func (touo *TransferOrderUpdateOne) SetNillableThirdAPIResp(s *string) *TransferOrderUpdateOne {
	if s != nil {
		touo.SetThirdAPIResp(*s)
	}
	return touo
}

// SetOutTransactionID sets the "out_transaction_id" field.
func (touo *TransferOrderUpdateOne) SetOutTransactionID(s string) *TransferOrderUpdateOne {
	touo.mutation.SetOutTransactionID(s)
	return touo
}

// SetNillableOutTransactionID sets the "out_transaction_id" field if the given value is not nil.
func (touo *TransferOrderUpdateOne) SetNillableOutTransactionID(s *string) *TransferOrderUpdateOne {
	if s != nil {
		touo.SetOutTransactionID(*s)
	}
	return touo
}

// SetWithdrawAccount sets the "withdraw_account" field.
func (touo *TransferOrderUpdateOne) SetWithdrawAccount(s string) *TransferOrderUpdateOne {
	touo.mutation.SetWithdrawAccount(s)
	return touo
}

// SetNillableWithdrawAccount sets the "withdraw_account" field if the given value is not nil.
func (touo *TransferOrderUpdateOne) SetNillableWithdrawAccount(s *string) *TransferOrderUpdateOne {
	if s != nil {
		touo.SetWithdrawAccount(*s)
	}
	return touo
}

// SetWithdrawRate sets the "withdraw_rate" field.
func (touo *TransferOrderUpdateOne) SetWithdrawRate(i int64) *TransferOrderUpdateOne {
	touo.mutation.ResetWithdrawRate()
	touo.mutation.SetWithdrawRate(i)
	return touo
}

// SetNillableWithdrawRate sets the "withdraw_rate" field if the given value is not nil.
func (touo *TransferOrderUpdateOne) SetNillableWithdrawRate(i *int64) *TransferOrderUpdateOne {
	if i != nil {
		touo.SetWithdrawRate(*i)
	}
	return touo
}

// AddWithdrawRate adds i to the "withdraw_rate" field.
func (touo *TransferOrderUpdateOne) AddWithdrawRate(i int64) *TransferOrderUpdateOne {
	touo.mutation.AddWithdrawRate(i)
	return touo
}

// SetWithdrawRealAmount sets the "withdraw_real_amount" field.
func (touo *TransferOrderUpdateOne) SetWithdrawRealAmount(i int64) *TransferOrderUpdateOne {
	touo.mutation.ResetWithdrawRealAmount()
	touo.mutation.SetWithdrawRealAmount(i)
	return touo
}

// SetNillableWithdrawRealAmount sets the "withdraw_real_amount" field if the given value is not nil.
func (touo *TransferOrderUpdateOne) SetNillableWithdrawRealAmount(i *int64) *TransferOrderUpdateOne {
	if i != nil {
		touo.SetWithdrawRealAmount(*i)
	}
	return touo
}

// AddWithdrawRealAmount adds i to the "withdraw_real_amount" field.
func (touo *TransferOrderUpdateOne) AddWithdrawRealAmount(i int64) *TransferOrderUpdateOne {
	touo.mutation.AddWithdrawRealAmount(i)
	return touo
}

// SetOperateUserID sets the "operate_user_id" field.
func (touo *TransferOrderUpdateOne) SetOperateUserID(i int64) *TransferOrderUpdateOne {
	touo.mutation.SetOperateUserID(i)
	return touo
}

// SetNillableOperateUserID sets the "operate_user_id" field if the given value is not nil.
func (touo *TransferOrderUpdateOne) SetNillableOperateUserID(i *int64) *TransferOrderUpdateOne {
	if i != nil {
		touo.SetOperateUserID(*i)
	}
	return touo
}

// SetRejectReason sets the "reject_reason" field.
func (touo *TransferOrderUpdateOne) SetRejectReason(s string) *TransferOrderUpdateOne {
	touo.mutation.SetRejectReason(s)
	return touo
}

// SetNillableRejectReason sets the "reject_reason" field if the given value is not nil.
func (touo *TransferOrderUpdateOne) SetNillableRejectReason(s *string) *TransferOrderUpdateOne {
	if s != nil {
		touo.SetRejectReason(*s)
	}
	return touo
}

// SetSourceUser sets the "source_user" edge to the User entity.
func (touo *TransferOrderUpdateOne) SetSourceUser(u *User) *TransferOrderUpdateOne {
	return touo.SetSourceUserID(u.ID)
}

// SetTargetUser sets the "target_user" edge to the User entity.
func (touo *TransferOrderUpdateOne) SetTargetUser(u *User) *TransferOrderUpdateOne {
	return touo.SetTargetUserID(u.ID)
}

// AddBillIDs adds the "bills" edge to the Bill entity by IDs.
func (touo *TransferOrderUpdateOne) AddBillIDs(ids ...int64) *TransferOrderUpdateOne {
	touo.mutation.AddBillIDs(ids...)
	return touo
}

// AddBills adds the "bills" edges to the Bill entity.
func (touo *TransferOrderUpdateOne) AddBills(b ...*Bill) *TransferOrderUpdateOne {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return touo.AddBillIDs(ids...)
}

// SetVxSocialID sets the "vx_social" edge to the VXSocial entity by ID.
func (touo *TransferOrderUpdateOne) SetVxSocialID(id int64) *TransferOrderUpdateOne {
	touo.mutation.SetVxSocialID(id)
	return touo
}

// SetNillableVxSocialID sets the "vx_social" edge to the VXSocial entity by ID if the given value is not nil.
func (touo *TransferOrderUpdateOne) SetNillableVxSocialID(id *int64) *TransferOrderUpdateOne {
	if id != nil {
		touo = touo.SetVxSocialID(*id)
	}
	return touo
}

// SetVxSocial sets the "vx_social" edge to the VXSocial entity.
func (touo *TransferOrderUpdateOne) SetVxSocial(v *VXSocial) *TransferOrderUpdateOne {
	return touo.SetVxSocialID(v.ID)
}

// SetSymbol sets the "symbol" edge to the Symbol entity.
func (touo *TransferOrderUpdateOne) SetSymbol(s *Symbol) *TransferOrderUpdateOne {
	return touo.SetSymbolID(s.ID)
}

// SetOperateUser sets the "operate_user" edge to the User entity.
func (touo *TransferOrderUpdateOne) SetOperateUser(u *User) *TransferOrderUpdateOne {
	return touo.SetOperateUserID(u.ID)
}

// Mutation returns the TransferOrderMutation object of the builder.
func (touo *TransferOrderUpdateOne) Mutation() *TransferOrderMutation {
	return touo.mutation
}

// ClearSourceUser clears the "source_user" edge to the User entity.
func (touo *TransferOrderUpdateOne) ClearSourceUser() *TransferOrderUpdateOne {
	touo.mutation.ClearSourceUser()
	return touo
}

// ClearTargetUser clears the "target_user" edge to the User entity.
func (touo *TransferOrderUpdateOne) ClearTargetUser() *TransferOrderUpdateOne {
	touo.mutation.ClearTargetUser()
	return touo
}

// ClearBills clears all "bills" edges to the Bill entity.
func (touo *TransferOrderUpdateOne) ClearBills() *TransferOrderUpdateOne {
	touo.mutation.ClearBills()
	return touo
}

// RemoveBillIDs removes the "bills" edge to Bill entities by IDs.
func (touo *TransferOrderUpdateOne) RemoveBillIDs(ids ...int64) *TransferOrderUpdateOne {
	touo.mutation.RemoveBillIDs(ids...)
	return touo
}

// RemoveBills removes "bills" edges to Bill entities.
func (touo *TransferOrderUpdateOne) RemoveBills(b ...*Bill) *TransferOrderUpdateOne {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return touo.RemoveBillIDs(ids...)
}

// ClearVxSocial clears the "vx_social" edge to the VXSocial entity.
func (touo *TransferOrderUpdateOne) ClearVxSocial() *TransferOrderUpdateOne {
	touo.mutation.ClearVxSocial()
	return touo
}

// ClearSymbol clears the "symbol" edge to the Symbol entity.
func (touo *TransferOrderUpdateOne) ClearSymbol() *TransferOrderUpdateOne {
	touo.mutation.ClearSymbol()
	return touo
}

// ClearOperateUser clears the "operate_user" edge to the User entity.
func (touo *TransferOrderUpdateOne) ClearOperateUser() *TransferOrderUpdateOne {
	touo.mutation.ClearOperateUser()
	return touo
}

// Where appends a list predicates to the TransferOrderUpdate builder.
func (touo *TransferOrderUpdateOne) Where(ps ...predicate.TransferOrder) *TransferOrderUpdateOne {
	touo.mutation.Where(ps...)
	return touo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (touo *TransferOrderUpdateOne) Select(field string, fields ...string) *TransferOrderUpdateOne {
	touo.fields = append([]string{field}, fields...)
	return touo
}

// Save executes the query and returns the updated TransferOrder entity.
func (touo *TransferOrderUpdateOne) Save(ctx context.Context) (*TransferOrder, error) {
	touo.defaults()
	return withHooks(ctx, touo.sqlSave, touo.mutation, touo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (touo *TransferOrderUpdateOne) SaveX(ctx context.Context) *TransferOrder {
	node, err := touo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (touo *TransferOrderUpdateOne) Exec(ctx context.Context) error {
	_, err := touo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (touo *TransferOrderUpdateOne) ExecX(ctx context.Context) {
	if err := touo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (touo *TransferOrderUpdateOne) defaults() {
	if _, ok := touo.mutation.UpdatedAt(); !ok {
		v := transferorder.UpdateDefaultUpdatedAt()
		touo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (touo *TransferOrderUpdateOne) check() error {
	if v, ok := touo.mutation.Status(); ok {
		if err := transferorder.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "TransferOrder.status": %w`, err)}
		}
	}
	if v, ok := touo.mutation.GetType(); ok {
		if err := transferorder.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "TransferOrder.type": %w`, err)}
		}
	}
	if _, ok := touo.mutation.SourceUserID(); touo.mutation.SourceUserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "TransferOrder.source_user"`)
	}
	if _, ok := touo.mutation.TargetUserID(); touo.mutation.TargetUserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "TransferOrder.target_user"`)
	}
	if _, ok := touo.mutation.SymbolID(); touo.mutation.SymbolCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "TransferOrder.symbol"`)
	}
	if _, ok := touo.mutation.OperateUserID(); touo.mutation.OperateUserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "TransferOrder.operate_user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (touo *TransferOrderUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TransferOrderUpdateOne {
	touo.modifiers = append(touo.modifiers, modifiers...)
	return touo
}

func (touo *TransferOrderUpdateOne) sqlSave(ctx context.Context) (_node *TransferOrder, err error) {
	if err := touo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(transferorder.Table, transferorder.Columns, sqlgraph.NewFieldSpec(transferorder.FieldID, field.TypeInt64))
	id, ok := touo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "TransferOrder.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := touo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transferorder.FieldID)
		for _, f := range fields {
			if !transferorder.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != transferorder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := touo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := touo.mutation.CreatedBy(); ok {
		_spec.SetField(transferorder.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := touo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(transferorder.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := touo.mutation.UpdatedBy(); ok {
		_spec.SetField(transferorder.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := touo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(transferorder.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := touo.mutation.UpdatedAt(); ok {
		_spec.SetField(transferorder.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := touo.mutation.DeletedAt(); ok {
		_spec.SetField(transferorder.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := touo.mutation.Status(); ok {
		_spec.SetField(transferorder.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := touo.mutation.Amount(); ok {
		_spec.SetField(transferorder.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := touo.mutation.AddedAmount(); ok {
		_spec.AddField(transferorder.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := touo.mutation.GetType(); ok {
		_spec.SetField(transferorder.FieldType, field.TypeEnum, value)
	}
	if value, ok := touo.mutation.SerialNumber(); ok {
		_spec.SetField(transferorder.FieldSerialNumber, field.TypeString, value)
	}
	if value, ok := touo.mutation.ThirdAPIResp(); ok {
		_spec.SetField(transferorder.FieldThirdAPIResp, field.TypeString, value)
	}
	if value, ok := touo.mutation.OutTransactionID(); ok {
		_spec.SetField(transferorder.FieldOutTransactionID, field.TypeString, value)
	}
	if value, ok := touo.mutation.WithdrawAccount(); ok {
		_spec.SetField(transferorder.FieldWithdrawAccount, field.TypeString, value)
	}
	if value, ok := touo.mutation.WithdrawRate(); ok {
		_spec.SetField(transferorder.FieldWithdrawRate, field.TypeInt64, value)
	}
	if value, ok := touo.mutation.AddedWithdrawRate(); ok {
		_spec.AddField(transferorder.FieldWithdrawRate, field.TypeInt64, value)
	}
	if value, ok := touo.mutation.WithdrawRealAmount(); ok {
		_spec.SetField(transferorder.FieldWithdrawRealAmount, field.TypeInt64, value)
	}
	if value, ok := touo.mutation.AddedWithdrawRealAmount(); ok {
		_spec.AddField(transferorder.FieldWithdrawRealAmount, field.TypeInt64, value)
	}
	if value, ok := touo.mutation.RejectReason(); ok {
		_spec.SetField(transferorder.FieldRejectReason, field.TypeString, value)
	}
	if touo.mutation.SourceUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transferorder.SourceUserTable,
			Columns: []string{transferorder.SourceUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := touo.mutation.SourceUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transferorder.SourceUserTable,
			Columns: []string{transferorder.SourceUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if touo.mutation.TargetUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transferorder.TargetUserTable,
			Columns: []string{transferorder.TargetUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := touo.mutation.TargetUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transferorder.TargetUserTable,
			Columns: []string{transferorder.TargetUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if touo.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transferorder.BillsTable,
			Columns: []string{transferorder.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := touo.mutation.RemovedBillsIDs(); len(nodes) > 0 && !touo.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transferorder.BillsTable,
			Columns: []string{transferorder.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := touo.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transferorder.BillsTable,
			Columns: []string{transferorder.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if touo.mutation.VxSocialCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transferorder.VxSocialTable,
			Columns: []string{transferorder.VxSocialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vxsocial.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := touo.mutation.VxSocialIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transferorder.VxSocialTable,
			Columns: []string{transferorder.VxSocialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vxsocial.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if touo.mutation.SymbolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transferorder.SymbolTable,
			Columns: []string{transferorder.SymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := touo.mutation.SymbolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transferorder.SymbolTable,
			Columns: []string{transferorder.SymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if touo.mutation.OperateUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transferorder.OperateUserTable,
			Columns: []string{transferorder.OperateUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := touo.mutation.OperateUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transferorder.OperateUserTable,
			Columns: []string{transferorder.OperateUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(touo.modifiers...)
	_node = &TransferOrder{config: touo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, touo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transferorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	touo.mutation.done = true
	return _node, nil
}
