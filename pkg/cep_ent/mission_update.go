// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/hmackeypair"
	"cephalon-ent/pkg/cep_ent/mission"
	"cephalon-ent/pkg/cep_ent/missionbatch"
	"cephalon-ent/pkg/cep_ent/missionconsumeorder"
	"cephalon-ent/pkg/cep_ent/missionproduceorder"
	"cephalon-ent/pkg/cep_ent/missionproduction"
	"cephalon-ent/pkg/cep_ent/predicate"
	"cephalon-ent/pkg/cep_ent/user"
	"cephalon-ent/pkg/enums"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MissionUpdate is the builder for updating Mission entities.
type MissionUpdate struct {
	config
	hooks    []Hook
	mutation *MissionMutation
}

// Where appends a list predicates to the MissionUpdate builder.
func (mu *MissionUpdate) Where(ps ...predicate.Mission) *MissionUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetCreatedBy sets the "created_by" field.
func (mu *MissionUpdate) SetCreatedBy(i int64) *MissionUpdate {
	mu.mutation.ResetCreatedBy()
	mu.mutation.SetCreatedBy(i)
	return mu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mu *MissionUpdate) SetNillableCreatedBy(i *int64) *MissionUpdate {
	if i != nil {
		mu.SetCreatedBy(*i)
	}
	return mu
}

// AddCreatedBy adds i to the "created_by" field.
func (mu *MissionUpdate) AddCreatedBy(i int64) *MissionUpdate {
	mu.mutation.AddCreatedBy(i)
	return mu
}

// SetUpdatedBy sets the "updated_by" field.
func (mu *MissionUpdate) SetUpdatedBy(i int64) *MissionUpdate {
	mu.mutation.ResetUpdatedBy()
	mu.mutation.SetUpdatedBy(i)
	return mu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mu *MissionUpdate) SetNillableUpdatedBy(i *int64) *MissionUpdate {
	if i != nil {
		mu.SetUpdatedBy(*i)
	}
	return mu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (mu *MissionUpdate) AddUpdatedBy(i int64) *MissionUpdate {
	mu.mutation.AddUpdatedBy(i)
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MissionUpdate) SetUpdatedAt(t time.Time) *MissionUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetDeletedAt sets the "deleted_at" field.
func (mu *MissionUpdate) SetDeletedAt(t time.Time) *MissionUpdate {
	mu.mutation.SetDeletedAt(t)
	return mu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mu *MissionUpdate) SetNillableDeletedAt(t *time.Time) *MissionUpdate {
	if t != nil {
		mu.SetDeletedAt(*t)
	}
	return mu
}

// SetType sets the "type" field.
func (mu *MissionUpdate) SetType(et enums.MissionType) *MissionUpdate {
	mu.mutation.SetType(et)
	return mu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mu *MissionUpdate) SetNillableType(et *enums.MissionType) *MissionUpdate {
	if et != nil {
		mu.SetType(*et)
	}
	return mu
}

// SetIsTime sets the "is_time" field.
func (mu *MissionUpdate) SetIsTime(b bool) *MissionUpdate {
	mu.mutation.SetIsTime(b)
	return mu
}

// SetNillableIsTime sets the "is_time" field if the given value is not nil.
func (mu *MissionUpdate) SetNillableIsTime(b *bool) *MissionUpdate {
	if b != nil {
		mu.SetIsTime(*b)
	}
	return mu
}

// SetBody sets the "body" field.
func (mu *MissionUpdate) SetBody(s string) *MissionUpdate {
	mu.mutation.SetBody(s)
	return mu
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (mu *MissionUpdate) SetNillableBody(s *string) *MissionUpdate {
	if s != nil {
		mu.SetBody(*s)
	}
	return mu
}

// SetCallBackURL sets the "call_back_url" field.
func (mu *MissionUpdate) SetCallBackURL(s string) *MissionUpdate {
	mu.mutation.SetCallBackURL(s)
	return mu
}

// SetNillableCallBackURL sets the "call_back_url" field if the given value is not nil.
func (mu *MissionUpdate) SetNillableCallBackURL(s *string) *MissionUpdate {
	if s != nil {
		mu.SetCallBackURL(*s)
	}
	return mu
}

// SetStatus sets the "status" field.
func (mu *MissionUpdate) SetStatus(es enums.MissionStatus) *MissionUpdate {
	mu.mutation.SetStatus(es)
	return mu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mu *MissionUpdate) SetNillableStatus(es *enums.MissionStatus) *MissionUpdate {
	if es != nil {
		mu.SetStatus(*es)
	}
	return mu
}

// SetResultUrls sets the "result_urls" field.
func (mu *MissionUpdate) SetResultUrls(s string) *MissionUpdate {
	mu.mutation.SetResultUrls(s)
	return mu
}

// SetNillableResultUrls sets the "result_urls" field if the given value is not nil.
func (mu *MissionUpdate) SetNillableResultUrls(s *string) *MissionUpdate {
	if s != nil {
		mu.SetResultUrls(*s)
	}
	return mu
}

// SetAdditionalResult sets the "additional_result" field.
func (mu *MissionUpdate) SetAdditionalResult(s string) *MissionUpdate {
	mu.mutation.SetAdditionalResult(s)
	return mu
}

// SetNillableAdditionalResult sets the "additional_result" field if the given value is not nil.
func (mu *MissionUpdate) SetNillableAdditionalResult(s *string) *MissionUpdate {
	if s != nil {
		mu.SetAdditionalResult(*s)
	}
	return mu
}

// SetHmacKeyPairID sets the "hmac_key_pair_id" field.
func (mu *MissionUpdate) SetHmacKeyPairID(i int64) *MissionUpdate {
	mu.mutation.SetHmacKeyPairID(i)
	return mu
}

// SetNillableHmacKeyPairID sets the "hmac_key_pair_id" field if the given value is not nil.
func (mu *MissionUpdate) SetNillableHmacKeyPairID(i *int64) *MissionUpdate {
	if i != nil {
		mu.SetHmacKeyPairID(*i)
	}
	return mu
}

// SetUserID sets the "user_id" field.
func (mu *MissionUpdate) SetUserID(i int64) *MissionUpdate {
	mu.mutation.SetUserID(i)
	return mu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (mu *MissionUpdate) SetNillableUserID(i *int64) *MissionUpdate {
	if i != nil {
		mu.SetUserID(*i)
	}
	return mu
}

// SetMissionBatchNumber sets the "mission_batch_number" field.
func (mu *MissionUpdate) SetMissionBatchNumber(s string) *MissionUpdate {
	mu.mutation.SetMissionBatchNumber(s)
	return mu
}

// SetNillableMissionBatchNumber sets the "mission_batch_number" field if the given value is not nil.
func (mu *MissionUpdate) SetNillableMissionBatchNumber(s *string) *MissionUpdate {
	if s != nil {
		mu.SetMissionBatchNumber(*s)
	}
	return mu
}

// SetMissionBatchID sets the "mission_batch_id" field.
func (mu *MissionUpdate) SetMissionBatchID(i int64) *MissionUpdate {
	mu.mutation.SetMissionBatchID(i)
	return mu
}

// SetNillableMissionBatchID sets the "mission_batch_id" field if the given value is not nil.
func (mu *MissionUpdate) SetNillableMissionBatchID(i *int64) *MissionUpdate {
	if i != nil {
		mu.SetMissionBatchID(*i)
	}
	return mu
}

// AddMissionProductionIDs adds the "mission_productions" edge to the MissionProduction entity by IDs.
func (mu *MissionUpdate) AddMissionProductionIDs(ids ...int64) *MissionUpdate {
	mu.mutation.AddMissionProductionIDs(ids...)
	return mu
}

// AddMissionProductions adds the "mission_productions" edges to the MissionProduction entity.
func (mu *MissionUpdate) AddMissionProductions(m ...*MissionProduction) *MissionUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddMissionProductionIDs(ids...)
}

// SetMissionConsumeOrderID sets the "mission_consume_order" edge to the MissionConsumeOrder entity by ID.
func (mu *MissionUpdate) SetMissionConsumeOrderID(id int64) *MissionUpdate {
	mu.mutation.SetMissionConsumeOrderID(id)
	return mu
}

// SetNillableMissionConsumeOrderID sets the "mission_consume_order" edge to the MissionConsumeOrder entity by ID if the given value is not nil.
func (mu *MissionUpdate) SetNillableMissionConsumeOrderID(id *int64) *MissionUpdate {
	if id != nil {
		mu = mu.SetMissionConsumeOrderID(*id)
	}
	return mu
}

// SetMissionConsumeOrder sets the "mission_consume_order" edge to the MissionConsumeOrder entity.
func (mu *MissionUpdate) SetMissionConsumeOrder(m *MissionConsumeOrder) *MissionUpdate {
	return mu.SetMissionConsumeOrderID(m.ID)
}

// AddMissionProduceOrderIDs adds the "mission_produce_orders" edge to the MissionProduceOrder entity by IDs.
func (mu *MissionUpdate) AddMissionProduceOrderIDs(ids ...int64) *MissionUpdate {
	mu.mutation.AddMissionProduceOrderIDs(ids...)
	return mu
}

// AddMissionProduceOrders adds the "mission_produce_orders" edges to the MissionProduceOrder entity.
func (mu *MissionUpdate) AddMissionProduceOrders(m ...*MissionProduceOrder) *MissionUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddMissionProduceOrderIDs(ids...)
}

// SetHmacKeyPair sets the "hmac_key_pair" edge to the HmacKeyPair entity.
func (mu *MissionUpdate) SetHmacKeyPair(h *HmacKeyPair) *MissionUpdate {
	return mu.SetHmacKeyPairID(h.ID)
}

// SetUser sets the "user" edge to the User entity.
func (mu *MissionUpdate) SetUser(u *User) *MissionUpdate {
	return mu.SetUserID(u.ID)
}

// SetMissionBatch sets the "mission_batch" edge to the MissionBatch entity.
func (mu *MissionUpdate) SetMissionBatch(m *MissionBatch) *MissionUpdate {
	return mu.SetMissionBatchID(m.ID)
}

// Mutation returns the MissionMutation object of the builder.
func (mu *MissionUpdate) Mutation() *MissionMutation {
	return mu.mutation
}

// ClearMissionProductions clears all "mission_productions" edges to the MissionProduction entity.
func (mu *MissionUpdate) ClearMissionProductions() *MissionUpdate {
	mu.mutation.ClearMissionProductions()
	return mu
}

// RemoveMissionProductionIDs removes the "mission_productions" edge to MissionProduction entities by IDs.
func (mu *MissionUpdate) RemoveMissionProductionIDs(ids ...int64) *MissionUpdate {
	mu.mutation.RemoveMissionProductionIDs(ids...)
	return mu
}

// RemoveMissionProductions removes "mission_productions" edges to MissionProduction entities.
func (mu *MissionUpdate) RemoveMissionProductions(m ...*MissionProduction) *MissionUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveMissionProductionIDs(ids...)
}

// ClearMissionConsumeOrder clears the "mission_consume_order" edge to the MissionConsumeOrder entity.
func (mu *MissionUpdate) ClearMissionConsumeOrder() *MissionUpdate {
	mu.mutation.ClearMissionConsumeOrder()
	return mu
}

// ClearMissionProduceOrders clears all "mission_produce_orders" edges to the MissionProduceOrder entity.
func (mu *MissionUpdate) ClearMissionProduceOrders() *MissionUpdate {
	mu.mutation.ClearMissionProduceOrders()
	return mu
}

// RemoveMissionProduceOrderIDs removes the "mission_produce_orders" edge to MissionProduceOrder entities by IDs.
func (mu *MissionUpdate) RemoveMissionProduceOrderIDs(ids ...int64) *MissionUpdate {
	mu.mutation.RemoveMissionProduceOrderIDs(ids...)
	return mu
}

// RemoveMissionProduceOrders removes "mission_produce_orders" edges to MissionProduceOrder entities.
func (mu *MissionUpdate) RemoveMissionProduceOrders(m ...*MissionProduceOrder) *MissionUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveMissionProduceOrderIDs(ids...)
}

// ClearHmacKeyPair clears the "hmac_key_pair" edge to the HmacKeyPair entity.
func (mu *MissionUpdate) ClearHmacKeyPair() *MissionUpdate {
	mu.mutation.ClearHmacKeyPair()
	return mu
}

// ClearUser clears the "user" edge to the User entity.
func (mu *MissionUpdate) ClearUser() *MissionUpdate {
	mu.mutation.ClearUser()
	return mu
}

// ClearMissionBatch clears the "mission_batch" edge to the MissionBatch entity.
func (mu *MissionUpdate) ClearMissionBatch() *MissionUpdate {
	mu.mutation.ClearMissionBatch()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MissionUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MissionUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MissionUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MissionUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MissionUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		v := mission.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MissionUpdate) check() error {
	if v, ok := mu.mutation.GetType(); ok {
		if err := mission.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "Mission.type": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Status(); ok {
		if err := mission.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "Mission.status": %w`, err)}
		}
	}
	if _, ok := mu.mutation.HmacKeyPairID(); mu.mutation.HmacKeyPairCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "Mission.hmac_key_pair"`)
	}
	if _, ok := mu.mutation.UserID(); mu.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "Mission.user"`)
	}
	if _, ok := mu.mutation.MissionBatchID(); mu.mutation.MissionBatchCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "Mission.mission_batch"`)
	}
	return nil
}

func (mu *MissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(mission.Table, mission.Columns, sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.CreatedBy(); ok {
		_spec.SetField(mission.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(mission.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.UpdatedBy(); ok {
		_spec.SetField(mission.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(mission.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(mission.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.DeletedAt(); ok {
		_spec.SetField(mission.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.GetType(); ok {
		_spec.SetField(mission.FieldType, field.TypeEnum, value)
	}
	if value, ok := mu.mutation.IsTime(); ok {
		_spec.SetField(mission.FieldIsTime, field.TypeBool, value)
	}
	if value, ok := mu.mutation.Body(); ok {
		_spec.SetField(mission.FieldBody, field.TypeString, value)
	}
	if value, ok := mu.mutation.CallBackURL(); ok {
		_spec.SetField(mission.FieldCallBackURL, field.TypeString, value)
	}
	if value, ok := mu.mutation.Status(); ok {
		_spec.SetField(mission.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := mu.mutation.ResultUrls(); ok {
		_spec.SetField(mission.FieldResultUrls, field.TypeString, value)
	}
	if value, ok := mu.mutation.AdditionalResult(); ok {
		_spec.SetField(mission.FieldAdditionalResult, field.TypeString, value)
	}
	if value, ok := mu.mutation.MissionBatchNumber(); ok {
		_spec.SetField(mission.FieldMissionBatchNumber, field.TypeString, value)
	}
	if mu.mutation.MissionProductionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mission.MissionProductionsTable,
			Columns: []string{mission.MissionProductionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduction.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedMissionProductionsIDs(); len(nodes) > 0 && !mu.mutation.MissionProductionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mission.MissionProductionsTable,
			Columns: []string{mission.MissionProductionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduction.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MissionProductionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mission.MissionProductionsTable,
			Columns: []string{mission.MissionProductionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduction.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.MissionConsumeOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   mission.MissionConsumeOrderTable,
			Columns: []string{mission.MissionConsumeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MissionConsumeOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   mission.MissionConsumeOrderTable,
			Columns: []string{mission.MissionConsumeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.MissionProduceOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mission.MissionProduceOrdersTable,
			Columns: []string{mission.MissionProduceOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedMissionProduceOrdersIDs(); len(nodes) > 0 && !mu.mutation.MissionProduceOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mission.MissionProduceOrdersTable,
			Columns: []string{mission.MissionProduceOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MissionProduceOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mission.MissionProduceOrdersTable,
			Columns: []string{mission.MissionProduceOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.HmacKeyPairCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mission.HmacKeyPairTable,
			Columns: []string{mission.HmacKeyPairColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hmackeypair.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.HmacKeyPairIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mission.HmacKeyPairTable,
			Columns: []string{mission.HmacKeyPairColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hmackeypair.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mission.UserTable,
			Columns: []string{mission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mission.UserTable,
			Columns: []string{mission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.MissionBatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mission.MissionBatchTable,
			Columns: []string{mission.MissionBatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionbatch.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MissionBatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mission.MissionBatchTable,
			Columns: []string{mission.MissionBatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionbatch.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MissionUpdateOne is the builder for updating a single Mission entity.
type MissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MissionMutation
}

// SetCreatedBy sets the "created_by" field.
func (muo *MissionUpdateOne) SetCreatedBy(i int64) *MissionUpdateOne {
	muo.mutation.ResetCreatedBy()
	muo.mutation.SetCreatedBy(i)
	return muo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (muo *MissionUpdateOne) SetNillableCreatedBy(i *int64) *MissionUpdateOne {
	if i != nil {
		muo.SetCreatedBy(*i)
	}
	return muo
}

// AddCreatedBy adds i to the "created_by" field.
func (muo *MissionUpdateOne) AddCreatedBy(i int64) *MissionUpdateOne {
	muo.mutation.AddCreatedBy(i)
	return muo
}

// SetUpdatedBy sets the "updated_by" field.
func (muo *MissionUpdateOne) SetUpdatedBy(i int64) *MissionUpdateOne {
	muo.mutation.ResetUpdatedBy()
	muo.mutation.SetUpdatedBy(i)
	return muo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (muo *MissionUpdateOne) SetNillableUpdatedBy(i *int64) *MissionUpdateOne {
	if i != nil {
		muo.SetUpdatedBy(*i)
	}
	return muo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (muo *MissionUpdateOne) AddUpdatedBy(i int64) *MissionUpdateOne {
	muo.mutation.AddUpdatedBy(i)
	return muo
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MissionUpdateOne) SetUpdatedAt(t time.Time) *MissionUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetDeletedAt sets the "deleted_at" field.
func (muo *MissionUpdateOne) SetDeletedAt(t time.Time) *MissionUpdateOne {
	muo.mutation.SetDeletedAt(t)
	return muo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (muo *MissionUpdateOne) SetNillableDeletedAt(t *time.Time) *MissionUpdateOne {
	if t != nil {
		muo.SetDeletedAt(*t)
	}
	return muo
}

// SetType sets the "type" field.
func (muo *MissionUpdateOne) SetType(et enums.MissionType) *MissionUpdateOne {
	muo.mutation.SetType(et)
	return muo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (muo *MissionUpdateOne) SetNillableType(et *enums.MissionType) *MissionUpdateOne {
	if et != nil {
		muo.SetType(*et)
	}
	return muo
}

// SetIsTime sets the "is_time" field.
func (muo *MissionUpdateOne) SetIsTime(b bool) *MissionUpdateOne {
	muo.mutation.SetIsTime(b)
	return muo
}

// SetNillableIsTime sets the "is_time" field if the given value is not nil.
func (muo *MissionUpdateOne) SetNillableIsTime(b *bool) *MissionUpdateOne {
	if b != nil {
		muo.SetIsTime(*b)
	}
	return muo
}

// SetBody sets the "body" field.
func (muo *MissionUpdateOne) SetBody(s string) *MissionUpdateOne {
	muo.mutation.SetBody(s)
	return muo
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (muo *MissionUpdateOne) SetNillableBody(s *string) *MissionUpdateOne {
	if s != nil {
		muo.SetBody(*s)
	}
	return muo
}

// SetCallBackURL sets the "call_back_url" field.
func (muo *MissionUpdateOne) SetCallBackURL(s string) *MissionUpdateOne {
	muo.mutation.SetCallBackURL(s)
	return muo
}

// SetNillableCallBackURL sets the "call_back_url" field if the given value is not nil.
func (muo *MissionUpdateOne) SetNillableCallBackURL(s *string) *MissionUpdateOne {
	if s != nil {
		muo.SetCallBackURL(*s)
	}
	return muo
}

// SetStatus sets the "status" field.
func (muo *MissionUpdateOne) SetStatus(es enums.MissionStatus) *MissionUpdateOne {
	muo.mutation.SetStatus(es)
	return muo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (muo *MissionUpdateOne) SetNillableStatus(es *enums.MissionStatus) *MissionUpdateOne {
	if es != nil {
		muo.SetStatus(*es)
	}
	return muo
}

// SetResultUrls sets the "result_urls" field.
func (muo *MissionUpdateOne) SetResultUrls(s string) *MissionUpdateOne {
	muo.mutation.SetResultUrls(s)
	return muo
}

// SetNillableResultUrls sets the "result_urls" field if the given value is not nil.
func (muo *MissionUpdateOne) SetNillableResultUrls(s *string) *MissionUpdateOne {
	if s != nil {
		muo.SetResultUrls(*s)
	}
	return muo
}

// SetAdditionalResult sets the "additional_result" field.
func (muo *MissionUpdateOne) SetAdditionalResult(s string) *MissionUpdateOne {
	muo.mutation.SetAdditionalResult(s)
	return muo
}

// SetNillableAdditionalResult sets the "additional_result" field if the given value is not nil.
func (muo *MissionUpdateOne) SetNillableAdditionalResult(s *string) *MissionUpdateOne {
	if s != nil {
		muo.SetAdditionalResult(*s)
	}
	return muo
}

// SetHmacKeyPairID sets the "hmac_key_pair_id" field.
func (muo *MissionUpdateOne) SetHmacKeyPairID(i int64) *MissionUpdateOne {
	muo.mutation.SetHmacKeyPairID(i)
	return muo
}

// SetNillableHmacKeyPairID sets the "hmac_key_pair_id" field if the given value is not nil.
func (muo *MissionUpdateOne) SetNillableHmacKeyPairID(i *int64) *MissionUpdateOne {
	if i != nil {
		muo.SetHmacKeyPairID(*i)
	}
	return muo
}

// SetUserID sets the "user_id" field.
func (muo *MissionUpdateOne) SetUserID(i int64) *MissionUpdateOne {
	muo.mutation.SetUserID(i)
	return muo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (muo *MissionUpdateOne) SetNillableUserID(i *int64) *MissionUpdateOne {
	if i != nil {
		muo.SetUserID(*i)
	}
	return muo
}

// SetMissionBatchNumber sets the "mission_batch_number" field.
func (muo *MissionUpdateOne) SetMissionBatchNumber(s string) *MissionUpdateOne {
	muo.mutation.SetMissionBatchNumber(s)
	return muo
}

// SetNillableMissionBatchNumber sets the "mission_batch_number" field if the given value is not nil.
func (muo *MissionUpdateOne) SetNillableMissionBatchNumber(s *string) *MissionUpdateOne {
	if s != nil {
		muo.SetMissionBatchNumber(*s)
	}
	return muo
}

// SetMissionBatchID sets the "mission_batch_id" field.
func (muo *MissionUpdateOne) SetMissionBatchID(i int64) *MissionUpdateOne {
	muo.mutation.SetMissionBatchID(i)
	return muo
}

// SetNillableMissionBatchID sets the "mission_batch_id" field if the given value is not nil.
func (muo *MissionUpdateOne) SetNillableMissionBatchID(i *int64) *MissionUpdateOne {
	if i != nil {
		muo.SetMissionBatchID(*i)
	}
	return muo
}

// AddMissionProductionIDs adds the "mission_productions" edge to the MissionProduction entity by IDs.
func (muo *MissionUpdateOne) AddMissionProductionIDs(ids ...int64) *MissionUpdateOne {
	muo.mutation.AddMissionProductionIDs(ids...)
	return muo
}

// AddMissionProductions adds the "mission_productions" edges to the MissionProduction entity.
func (muo *MissionUpdateOne) AddMissionProductions(m ...*MissionProduction) *MissionUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddMissionProductionIDs(ids...)
}

// SetMissionConsumeOrderID sets the "mission_consume_order" edge to the MissionConsumeOrder entity by ID.
func (muo *MissionUpdateOne) SetMissionConsumeOrderID(id int64) *MissionUpdateOne {
	muo.mutation.SetMissionConsumeOrderID(id)
	return muo
}

// SetNillableMissionConsumeOrderID sets the "mission_consume_order" edge to the MissionConsumeOrder entity by ID if the given value is not nil.
func (muo *MissionUpdateOne) SetNillableMissionConsumeOrderID(id *int64) *MissionUpdateOne {
	if id != nil {
		muo = muo.SetMissionConsumeOrderID(*id)
	}
	return muo
}

// SetMissionConsumeOrder sets the "mission_consume_order" edge to the MissionConsumeOrder entity.
func (muo *MissionUpdateOne) SetMissionConsumeOrder(m *MissionConsumeOrder) *MissionUpdateOne {
	return muo.SetMissionConsumeOrderID(m.ID)
}

// AddMissionProduceOrderIDs adds the "mission_produce_orders" edge to the MissionProduceOrder entity by IDs.
func (muo *MissionUpdateOne) AddMissionProduceOrderIDs(ids ...int64) *MissionUpdateOne {
	muo.mutation.AddMissionProduceOrderIDs(ids...)
	return muo
}

// AddMissionProduceOrders adds the "mission_produce_orders" edges to the MissionProduceOrder entity.
func (muo *MissionUpdateOne) AddMissionProduceOrders(m ...*MissionProduceOrder) *MissionUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddMissionProduceOrderIDs(ids...)
}

// SetHmacKeyPair sets the "hmac_key_pair" edge to the HmacKeyPair entity.
func (muo *MissionUpdateOne) SetHmacKeyPair(h *HmacKeyPair) *MissionUpdateOne {
	return muo.SetHmacKeyPairID(h.ID)
}

// SetUser sets the "user" edge to the User entity.
func (muo *MissionUpdateOne) SetUser(u *User) *MissionUpdateOne {
	return muo.SetUserID(u.ID)
}

// SetMissionBatch sets the "mission_batch" edge to the MissionBatch entity.
func (muo *MissionUpdateOne) SetMissionBatch(m *MissionBatch) *MissionUpdateOne {
	return muo.SetMissionBatchID(m.ID)
}

// Mutation returns the MissionMutation object of the builder.
func (muo *MissionUpdateOne) Mutation() *MissionMutation {
	return muo.mutation
}

// ClearMissionProductions clears all "mission_productions" edges to the MissionProduction entity.
func (muo *MissionUpdateOne) ClearMissionProductions() *MissionUpdateOne {
	muo.mutation.ClearMissionProductions()
	return muo
}

// RemoveMissionProductionIDs removes the "mission_productions" edge to MissionProduction entities by IDs.
func (muo *MissionUpdateOne) RemoveMissionProductionIDs(ids ...int64) *MissionUpdateOne {
	muo.mutation.RemoveMissionProductionIDs(ids...)
	return muo
}

// RemoveMissionProductions removes "mission_productions" edges to MissionProduction entities.
func (muo *MissionUpdateOne) RemoveMissionProductions(m ...*MissionProduction) *MissionUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveMissionProductionIDs(ids...)
}

// ClearMissionConsumeOrder clears the "mission_consume_order" edge to the MissionConsumeOrder entity.
func (muo *MissionUpdateOne) ClearMissionConsumeOrder() *MissionUpdateOne {
	muo.mutation.ClearMissionConsumeOrder()
	return muo
}

// ClearMissionProduceOrders clears all "mission_produce_orders" edges to the MissionProduceOrder entity.
func (muo *MissionUpdateOne) ClearMissionProduceOrders() *MissionUpdateOne {
	muo.mutation.ClearMissionProduceOrders()
	return muo
}

// RemoveMissionProduceOrderIDs removes the "mission_produce_orders" edge to MissionProduceOrder entities by IDs.
func (muo *MissionUpdateOne) RemoveMissionProduceOrderIDs(ids ...int64) *MissionUpdateOne {
	muo.mutation.RemoveMissionProduceOrderIDs(ids...)
	return muo
}

// RemoveMissionProduceOrders removes "mission_produce_orders" edges to MissionProduceOrder entities.
func (muo *MissionUpdateOne) RemoveMissionProduceOrders(m ...*MissionProduceOrder) *MissionUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveMissionProduceOrderIDs(ids...)
}

// ClearHmacKeyPair clears the "hmac_key_pair" edge to the HmacKeyPair entity.
func (muo *MissionUpdateOne) ClearHmacKeyPair() *MissionUpdateOne {
	muo.mutation.ClearHmacKeyPair()
	return muo
}

// ClearUser clears the "user" edge to the User entity.
func (muo *MissionUpdateOne) ClearUser() *MissionUpdateOne {
	muo.mutation.ClearUser()
	return muo
}

// ClearMissionBatch clears the "mission_batch" edge to the MissionBatch entity.
func (muo *MissionUpdateOne) ClearMissionBatch() *MissionUpdateOne {
	muo.mutation.ClearMissionBatch()
	return muo
}

// Where appends a list predicates to the MissionUpdate builder.
func (muo *MissionUpdateOne) Where(ps ...predicate.Mission) *MissionUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MissionUpdateOne) Select(field string, fields ...string) *MissionUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Mission entity.
func (muo *MissionUpdateOne) Save(ctx context.Context) (*Mission, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MissionUpdateOne) SaveX(ctx context.Context) *Mission {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MissionUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MissionUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MissionUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		v := mission.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MissionUpdateOne) check() error {
	if v, ok := muo.mutation.GetType(); ok {
		if err := mission.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "Mission.type": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Status(); ok {
		if err := mission.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "Mission.status": %w`, err)}
		}
	}
	if _, ok := muo.mutation.HmacKeyPairID(); muo.mutation.HmacKeyPairCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "Mission.hmac_key_pair"`)
	}
	if _, ok := muo.mutation.UserID(); muo.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "Mission.user"`)
	}
	if _, ok := muo.mutation.MissionBatchID(); muo.mutation.MissionBatchCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "Mission.mission_batch"`)
	}
	return nil
}

func (muo *MissionUpdateOne) sqlSave(ctx context.Context) (_node *Mission, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(mission.Table, mission.Columns, sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "Mission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mission.FieldID)
		for _, f := range fields {
			if !mission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != mission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.CreatedBy(); ok {
		_spec.SetField(mission.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(mission.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.UpdatedBy(); ok {
		_spec.SetField(mission.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(mission.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(mission.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.DeletedAt(); ok {
		_spec.SetField(mission.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.GetType(); ok {
		_spec.SetField(mission.FieldType, field.TypeEnum, value)
	}
	if value, ok := muo.mutation.IsTime(); ok {
		_spec.SetField(mission.FieldIsTime, field.TypeBool, value)
	}
	if value, ok := muo.mutation.Body(); ok {
		_spec.SetField(mission.FieldBody, field.TypeString, value)
	}
	if value, ok := muo.mutation.CallBackURL(); ok {
		_spec.SetField(mission.FieldCallBackURL, field.TypeString, value)
	}
	if value, ok := muo.mutation.Status(); ok {
		_spec.SetField(mission.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := muo.mutation.ResultUrls(); ok {
		_spec.SetField(mission.FieldResultUrls, field.TypeString, value)
	}
	if value, ok := muo.mutation.AdditionalResult(); ok {
		_spec.SetField(mission.FieldAdditionalResult, field.TypeString, value)
	}
	if value, ok := muo.mutation.MissionBatchNumber(); ok {
		_spec.SetField(mission.FieldMissionBatchNumber, field.TypeString, value)
	}
	if muo.mutation.MissionProductionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mission.MissionProductionsTable,
			Columns: []string{mission.MissionProductionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduction.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedMissionProductionsIDs(); len(nodes) > 0 && !muo.mutation.MissionProductionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mission.MissionProductionsTable,
			Columns: []string{mission.MissionProductionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduction.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MissionProductionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mission.MissionProductionsTable,
			Columns: []string{mission.MissionProductionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduction.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.MissionConsumeOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   mission.MissionConsumeOrderTable,
			Columns: []string{mission.MissionConsumeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MissionConsumeOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   mission.MissionConsumeOrderTable,
			Columns: []string{mission.MissionConsumeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.MissionProduceOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mission.MissionProduceOrdersTable,
			Columns: []string{mission.MissionProduceOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedMissionProduceOrdersIDs(); len(nodes) > 0 && !muo.mutation.MissionProduceOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mission.MissionProduceOrdersTable,
			Columns: []string{mission.MissionProduceOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MissionProduceOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mission.MissionProduceOrdersTable,
			Columns: []string{mission.MissionProduceOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.HmacKeyPairCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mission.HmacKeyPairTable,
			Columns: []string{mission.HmacKeyPairColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hmackeypair.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.HmacKeyPairIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mission.HmacKeyPairTable,
			Columns: []string{mission.HmacKeyPairColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hmackeypair.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mission.UserTable,
			Columns: []string{mission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mission.UserTable,
			Columns: []string{mission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.MissionBatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mission.MissionBatchTable,
			Columns: []string{mission.MissionBatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionbatch.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MissionBatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mission.MissionBatchTable,
			Columns: []string{mission.MissionBatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionbatch.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Mission{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
