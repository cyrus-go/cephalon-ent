// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/hmackeypair"
	"cephalon-ent/pkg/cep_ent/mission"
	"cephalon-ent/pkg/cep_ent/missionkeypair"
	"cephalon-ent/pkg/cep_ent/predicate"
	"cephalon-ent/pkg/enums"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// MissionUpdate is the builder for updating Mission entities.
type MissionUpdate struct {
	config
	hooks    []Hook
	mutation *MissionMutation
}

// Where appends a list predicates to the MissionUpdate builder.
func (mu *MissionUpdate) Where(ps ...predicate.Mission) *MissionUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetCreatedBy sets the "created_by" field.
func (mu *MissionUpdate) SetCreatedBy(i int64) *MissionUpdate {
	mu.mutation.ResetCreatedBy()
	mu.mutation.SetCreatedBy(i)
	return mu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mu *MissionUpdate) SetNillableCreatedBy(i *int64) *MissionUpdate {
	if i != nil {
		mu.SetCreatedBy(*i)
	}
	return mu
}

// AddCreatedBy adds i to the "created_by" field.
func (mu *MissionUpdate) AddCreatedBy(i int64) *MissionUpdate {
	mu.mutation.AddCreatedBy(i)
	return mu
}

// SetUpdatedBy sets the "updated_by" field.
func (mu *MissionUpdate) SetUpdatedBy(i int64) *MissionUpdate {
	mu.mutation.ResetUpdatedBy()
	mu.mutation.SetUpdatedBy(i)
	return mu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mu *MissionUpdate) SetNillableUpdatedBy(i *int64) *MissionUpdate {
	if i != nil {
		mu.SetUpdatedBy(*i)
	}
	return mu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (mu *MissionUpdate) AddUpdatedBy(i int64) *MissionUpdate {
	mu.mutation.AddUpdatedBy(i)
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MissionUpdate) SetUpdatedAt(t time.Time) *MissionUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetDeletedAt sets the "deleted_at" field.
func (mu *MissionUpdate) SetDeletedAt(t time.Time) *MissionUpdate {
	mu.mutation.SetDeletedAt(t)
	return mu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mu *MissionUpdate) SetNillableDeletedAt(t *time.Time) *MissionUpdate {
	if t != nil {
		mu.SetDeletedAt(*t)
	}
	return mu
}

// SetType sets the "type" field.
func (mu *MissionUpdate) SetType(et enums.MissionType) *MissionUpdate {
	mu.mutation.SetType(et)
	return mu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mu *MissionUpdate) SetNillableType(et *enums.MissionType) *MissionUpdate {
	if et != nil {
		mu.SetType(*et)
	}
	return mu
}

// SetBody sets the "body" field.
func (mu *MissionUpdate) SetBody(s string) *MissionUpdate {
	mu.mutation.SetBody(s)
	return mu
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (mu *MissionUpdate) SetNillableBody(s *string) *MissionUpdate {
	if s != nil {
		mu.SetBody(*s)
	}
	return mu
}

// SetCallBackURL sets the "call_back_url" field.
func (mu *MissionUpdate) SetCallBackURL(s string) *MissionUpdate {
	mu.mutation.SetCallBackURL(s)
	return mu
}

// SetNillableCallBackURL sets the "call_back_url" field if the given value is not nil.
func (mu *MissionUpdate) SetNillableCallBackURL(s *string) *MissionUpdate {
	if s != nil {
		mu.SetCallBackURL(*s)
	}
	return mu
}

// SetStatus sets the "status" field.
func (mu *MissionUpdate) SetStatus(es enums.MissionStatus) *MissionUpdate {
	mu.mutation.SetStatus(es)
	return mu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mu *MissionUpdate) SetNillableStatus(es *enums.MissionStatus) *MissionUpdate {
	if es != nil {
		mu.SetStatus(*es)
	}
	return mu
}

// SetResult sets the "result" field.
func (mu *MissionUpdate) SetResult(er enums.MissionResult) *MissionUpdate {
	mu.mutation.SetResult(er)
	return mu
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (mu *MissionUpdate) SetNillableResult(er *enums.MissionResult) *MissionUpdate {
	if er != nil {
		mu.SetResult(*er)
	}
	return mu
}

// SetResultUrls sets the "result_urls" field.
func (mu *MissionUpdate) SetResultUrls(s []string) *MissionUpdate {
	mu.mutation.SetResultUrls(s)
	return mu
}

// AppendResultUrls appends s to the "result_urls" field.
func (mu *MissionUpdate) AppendResultUrls(s []string) *MissionUpdate {
	mu.mutation.AppendResultUrls(s)
	return mu
}

// ClearResultUrls clears the value of the "result_urls" field.
func (mu *MissionUpdate) ClearResultUrls() *MissionUpdate {
	mu.mutation.ClearResultUrls()
	return mu
}

// SetKeyPairID sets the "key_pair_id" field.
func (mu *MissionUpdate) SetKeyPairID(i int64) *MissionUpdate {
	mu.mutation.SetKeyPairID(i)
	return mu
}

// SetNillableKeyPairID sets the "key_pair_id" field if the given value is not nil.
func (mu *MissionUpdate) SetNillableKeyPairID(i *int64) *MissionUpdate {
	if i != nil {
		mu.SetKeyPairID(*i)
	}
	return mu
}

// SetMissionBatchNumber sets the "mission_batch_number" field.
func (mu *MissionUpdate) SetMissionBatchNumber(s string) *MissionUpdate {
	mu.mutation.SetMissionBatchNumber(s)
	return mu
}

// SetNillableMissionBatchNumber sets the "mission_batch_number" field if the given value is not nil.
func (mu *MissionUpdate) SetNillableMissionBatchNumber(s *string) *MissionUpdate {
	if s != nil {
		mu.SetMissionBatchNumber(*s)
	}
	return mu
}

// AddMissionKeyPairIDs adds the "mission_key_pairs" edge to the MissionKeyPair entity by IDs.
func (mu *MissionUpdate) AddMissionKeyPairIDs(ids ...int64) *MissionUpdate {
	mu.mutation.AddMissionKeyPairIDs(ids...)
	return mu
}

// AddMissionKeyPairs adds the "mission_key_pairs" edges to the MissionKeyPair entity.
func (mu *MissionUpdate) AddMissionKeyPairs(m ...*MissionKeyPair) *MissionUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddMissionKeyPairIDs(ids...)
}

// SetKeyPair sets the "key_pair" edge to the HmacKeyPair entity.
func (mu *MissionUpdate) SetKeyPair(h *HmacKeyPair) *MissionUpdate {
	return mu.SetKeyPairID(h.ID)
}

// Mutation returns the MissionMutation object of the builder.
func (mu *MissionUpdate) Mutation() *MissionMutation {
	return mu.mutation
}

// ClearMissionKeyPairs clears all "mission_key_pairs" edges to the MissionKeyPair entity.
func (mu *MissionUpdate) ClearMissionKeyPairs() *MissionUpdate {
	mu.mutation.ClearMissionKeyPairs()
	return mu
}

// RemoveMissionKeyPairIDs removes the "mission_key_pairs" edge to MissionKeyPair entities by IDs.
func (mu *MissionUpdate) RemoveMissionKeyPairIDs(ids ...int64) *MissionUpdate {
	mu.mutation.RemoveMissionKeyPairIDs(ids...)
	return mu
}

// RemoveMissionKeyPairs removes "mission_key_pairs" edges to MissionKeyPair entities.
func (mu *MissionUpdate) RemoveMissionKeyPairs(m ...*MissionKeyPair) *MissionUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveMissionKeyPairIDs(ids...)
}

// ClearKeyPair clears the "key_pair" edge to the HmacKeyPair entity.
func (mu *MissionUpdate) ClearKeyPair() *MissionUpdate {
	mu.mutation.ClearKeyPair()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MissionUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MissionUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MissionUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MissionUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MissionUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		v := mission.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MissionUpdate) check() error {
	if v, ok := mu.mutation.GetType(); ok {
		if err := mission.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "Mission.type": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Status(); ok {
		if err := mission.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "Mission.status": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Result(); ok {
		if err := mission.ResultValidator(v); err != nil {
			return &ValidationError{Name: "result", err: fmt.Errorf(`cep_ent: validator failed for field "Mission.result": %w`, err)}
		}
	}
	if _, ok := mu.mutation.KeyPairID(); mu.mutation.KeyPairCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "Mission.key_pair"`)
	}
	return nil
}

func (mu *MissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(mission.Table, mission.Columns, sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.CreatedBy(); ok {
		_spec.SetField(mission.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(mission.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.UpdatedBy(); ok {
		_spec.SetField(mission.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(mission.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(mission.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.DeletedAt(); ok {
		_spec.SetField(mission.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.GetType(); ok {
		_spec.SetField(mission.FieldType, field.TypeEnum, value)
	}
	if value, ok := mu.mutation.Body(); ok {
		_spec.SetField(mission.FieldBody, field.TypeString, value)
	}
	if value, ok := mu.mutation.CallBackURL(); ok {
		_spec.SetField(mission.FieldCallBackURL, field.TypeString, value)
	}
	if value, ok := mu.mutation.Status(); ok {
		_spec.SetField(mission.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := mu.mutation.Result(); ok {
		_spec.SetField(mission.FieldResult, field.TypeEnum, value)
	}
	if value, ok := mu.mutation.ResultUrls(); ok {
		_spec.SetField(mission.FieldResultUrls, field.TypeJSON, value)
	}
	if value, ok := mu.mutation.AppendedResultUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, mission.FieldResultUrls, value)
		})
	}
	if mu.mutation.ResultUrlsCleared() {
		_spec.ClearField(mission.FieldResultUrls, field.TypeJSON)
	}
	if value, ok := mu.mutation.MissionBatchNumber(); ok {
		_spec.SetField(mission.FieldMissionBatchNumber, field.TypeString, value)
	}
	if mu.mutation.MissionKeyPairsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mission.MissionKeyPairsTable,
			Columns: []string{mission.MissionKeyPairsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionkeypair.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedMissionKeyPairsIDs(); len(nodes) > 0 && !mu.mutation.MissionKeyPairsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mission.MissionKeyPairsTable,
			Columns: []string{mission.MissionKeyPairsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionkeypair.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MissionKeyPairsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mission.MissionKeyPairsTable,
			Columns: []string{mission.MissionKeyPairsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionkeypair.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.KeyPairCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mission.KeyPairTable,
			Columns: []string{mission.KeyPairColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hmackeypair.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.KeyPairIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mission.KeyPairTable,
			Columns: []string{mission.KeyPairColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hmackeypair.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MissionUpdateOne is the builder for updating a single Mission entity.
type MissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MissionMutation
}

// SetCreatedBy sets the "created_by" field.
func (muo *MissionUpdateOne) SetCreatedBy(i int64) *MissionUpdateOne {
	muo.mutation.ResetCreatedBy()
	muo.mutation.SetCreatedBy(i)
	return muo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (muo *MissionUpdateOne) SetNillableCreatedBy(i *int64) *MissionUpdateOne {
	if i != nil {
		muo.SetCreatedBy(*i)
	}
	return muo
}

// AddCreatedBy adds i to the "created_by" field.
func (muo *MissionUpdateOne) AddCreatedBy(i int64) *MissionUpdateOne {
	muo.mutation.AddCreatedBy(i)
	return muo
}

// SetUpdatedBy sets the "updated_by" field.
func (muo *MissionUpdateOne) SetUpdatedBy(i int64) *MissionUpdateOne {
	muo.mutation.ResetUpdatedBy()
	muo.mutation.SetUpdatedBy(i)
	return muo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (muo *MissionUpdateOne) SetNillableUpdatedBy(i *int64) *MissionUpdateOne {
	if i != nil {
		muo.SetUpdatedBy(*i)
	}
	return muo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (muo *MissionUpdateOne) AddUpdatedBy(i int64) *MissionUpdateOne {
	muo.mutation.AddUpdatedBy(i)
	return muo
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MissionUpdateOne) SetUpdatedAt(t time.Time) *MissionUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetDeletedAt sets the "deleted_at" field.
func (muo *MissionUpdateOne) SetDeletedAt(t time.Time) *MissionUpdateOne {
	muo.mutation.SetDeletedAt(t)
	return muo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (muo *MissionUpdateOne) SetNillableDeletedAt(t *time.Time) *MissionUpdateOne {
	if t != nil {
		muo.SetDeletedAt(*t)
	}
	return muo
}

// SetType sets the "type" field.
func (muo *MissionUpdateOne) SetType(et enums.MissionType) *MissionUpdateOne {
	muo.mutation.SetType(et)
	return muo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (muo *MissionUpdateOne) SetNillableType(et *enums.MissionType) *MissionUpdateOne {
	if et != nil {
		muo.SetType(*et)
	}
	return muo
}

// SetBody sets the "body" field.
func (muo *MissionUpdateOne) SetBody(s string) *MissionUpdateOne {
	muo.mutation.SetBody(s)
	return muo
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (muo *MissionUpdateOne) SetNillableBody(s *string) *MissionUpdateOne {
	if s != nil {
		muo.SetBody(*s)
	}
	return muo
}

// SetCallBackURL sets the "call_back_url" field.
func (muo *MissionUpdateOne) SetCallBackURL(s string) *MissionUpdateOne {
	muo.mutation.SetCallBackURL(s)
	return muo
}

// SetNillableCallBackURL sets the "call_back_url" field if the given value is not nil.
func (muo *MissionUpdateOne) SetNillableCallBackURL(s *string) *MissionUpdateOne {
	if s != nil {
		muo.SetCallBackURL(*s)
	}
	return muo
}

// SetStatus sets the "status" field.
func (muo *MissionUpdateOne) SetStatus(es enums.MissionStatus) *MissionUpdateOne {
	muo.mutation.SetStatus(es)
	return muo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (muo *MissionUpdateOne) SetNillableStatus(es *enums.MissionStatus) *MissionUpdateOne {
	if es != nil {
		muo.SetStatus(*es)
	}
	return muo
}

// SetResult sets the "result" field.
func (muo *MissionUpdateOne) SetResult(er enums.MissionResult) *MissionUpdateOne {
	muo.mutation.SetResult(er)
	return muo
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (muo *MissionUpdateOne) SetNillableResult(er *enums.MissionResult) *MissionUpdateOne {
	if er != nil {
		muo.SetResult(*er)
	}
	return muo
}

// SetResultUrls sets the "result_urls" field.
func (muo *MissionUpdateOne) SetResultUrls(s []string) *MissionUpdateOne {
	muo.mutation.SetResultUrls(s)
	return muo
}

// AppendResultUrls appends s to the "result_urls" field.
func (muo *MissionUpdateOne) AppendResultUrls(s []string) *MissionUpdateOne {
	muo.mutation.AppendResultUrls(s)
	return muo
}

// ClearResultUrls clears the value of the "result_urls" field.
func (muo *MissionUpdateOne) ClearResultUrls() *MissionUpdateOne {
	muo.mutation.ClearResultUrls()
	return muo
}

// SetKeyPairID sets the "key_pair_id" field.
func (muo *MissionUpdateOne) SetKeyPairID(i int64) *MissionUpdateOne {
	muo.mutation.SetKeyPairID(i)
	return muo
}

// SetNillableKeyPairID sets the "key_pair_id" field if the given value is not nil.
func (muo *MissionUpdateOne) SetNillableKeyPairID(i *int64) *MissionUpdateOne {
	if i != nil {
		muo.SetKeyPairID(*i)
	}
	return muo
}

// SetMissionBatchNumber sets the "mission_batch_number" field.
func (muo *MissionUpdateOne) SetMissionBatchNumber(s string) *MissionUpdateOne {
	muo.mutation.SetMissionBatchNumber(s)
	return muo
}

// SetNillableMissionBatchNumber sets the "mission_batch_number" field if the given value is not nil.
func (muo *MissionUpdateOne) SetNillableMissionBatchNumber(s *string) *MissionUpdateOne {
	if s != nil {
		muo.SetMissionBatchNumber(*s)
	}
	return muo
}

// AddMissionKeyPairIDs adds the "mission_key_pairs" edge to the MissionKeyPair entity by IDs.
func (muo *MissionUpdateOne) AddMissionKeyPairIDs(ids ...int64) *MissionUpdateOne {
	muo.mutation.AddMissionKeyPairIDs(ids...)
	return muo
}

// AddMissionKeyPairs adds the "mission_key_pairs" edges to the MissionKeyPair entity.
func (muo *MissionUpdateOne) AddMissionKeyPairs(m ...*MissionKeyPair) *MissionUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddMissionKeyPairIDs(ids...)
}

// SetKeyPair sets the "key_pair" edge to the HmacKeyPair entity.
func (muo *MissionUpdateOne) SetKeyPair(h *HmacKeyPair) *MissionUpdateOne {
	return muo.SetKeyPairID(h.ID)
}

// Mutation returns the MissionMutation object of the builder.
func (muo *MissionUpdateOne) Mutation() *MissionMutation {
	return muo.mutation
}

// ClearMissionKeyPairs clears all "mission_key_pairs" edges to the MissionKeyPair entity.
func (muo *MissionUpdateOne) ClearMissionKeyPairs() *MissionUpdateOne {
	muo.mutation.ClearMissionKeyPairs()
	return muo
}

// RemoveMissionKeyPairIDs removes the "mission_key_pairs" edge to MissionKeyPair entities by IDs.
func (muo *MissionUpdateOne) RemoveMissionKeyPairIDs(ids ...int64) *MissionUpdateOne {
	muo.mutation.RemoveMissionKeyPairIDs(ids...)
	return muo
}

// RemoveMissionKeyPairs removes "mission_key_pairs" edges to MissionKeyPair entities.
func (muo *MissionUpdateOne) RemoveMissionKeyPairs(m ...*MissionKeyPair) *MissionUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveMissionKeyPairIDs(ids...)
}

// ClearKeyPair clears the "key_pair" edge to the HmacKeyPair entity.
func (muo *MissionUpdateOne) ClearKeyPair() *MissionUpdateOne {
	muo.mutation.ClearKeyPair()
	return muo
}

// Where appends a list predicates to the MissionUpdate builder.
func (muo *MissionUpdateOne) Where(ps ...predicate.Mission) *MissionUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MissionUpdateOne) Select(field string, fields ...string) *MissionUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Mission entity.
func (muo *MissionUpdateOne) Save(ctx context.Context) (*Mission, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MissionUpdateOne) SaveX(ctx context.Context) *Mission {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MissionUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MissionUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MissionUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		v := mission.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MissionUpdateOne) check() error {
	if v, ok := muo.mutation.GetType(); ok {
		if err := mission.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "Mission.type": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Status(); ok {
		if err := mission.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "Mission.status": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Result(); ok {
		if err := mission.ResultValidator(v); err != nil {
			return &ValidationError{Name: "result", err: fmt.Errorf(`cep_ent: validator failed for field "Mission.result": %w`, err)}
		}
	}
	if _, ok := muo.mutation.KeyPairID(); muo.mutation.KeyPairCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "Mission.key_pair"`)
	}
	return nil
}

func (muo *MissionUpdateOne) sqlSave(ctx context.Context) (_node *Mission, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(mission.Table, mission.Columns, sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "Mission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mission.FieldID)
		for _, f := range fields {
			if !mission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != mission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.CreatedBy(); ok {
		_spec.SetField(mission.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(mission.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.UpdatedBy(); ok {
		_spec.SetField(mission.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(mission.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(mission.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.DeletedAt(); ok {
		_spec.SetField(mission.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.GetType(); ok {
		_spec.SetField(mission.FieldType, field.TypeEnum, value)
	}
	if value, ok := muo.mutation.Body(); ok {
		_spec.SetField(mission.FieldBody, field.TypeString, value)
	}
	if value, ok := muo.mutation.CallBackURL(); ok {
		_spec.SetField(mission.FieldCallBackURL, field.TypeString, value)
	}
	if value, ok := muo.mutation.Status(); ok {
		_spec.SetField(mission.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := muo.mutation.Result(); ok {
		_spec.SetField(mission.FieldResult, field.TypeEnum, value)
	}
	if value, ok := muo.mutation.ResultUrls(); ok {
		_spec.SetField(mission.FieldResultUrls, field.TypeJSON, value)
	}
	if value, ok := muo.mutation.AppendedResultUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, mission.FieldResultUrls, value)
		})
	}
	if muo.mutation.ResultUrlsCleared() {
		_spec.ClearField(mission.FieldResultUrls, field.TypeJSON)
	}
	if value, ok := muo.mutation.MissionBatchNumber(); ok {
		_spec.SetField(mission.FieldMissionBatchNumber, field.TypeString, value)
	}
	if muo.mutation.MissionKeyPairsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mission.MissionKeyPairsTable,
			Columns: []string{mission.MissionKeyPairsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionkeypair.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedMissionKeyPairsIDs(); len(nodes) > 0 && !muo.mutation.MissionKeyPairsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mission.MissionKeyPairsTable,
			Columns: []string{mission.MissionKeyPairsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionkeypair.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MissionKeyPairsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mission.MissionKeyPairsTable,
			Columns: []string{mission.MissionKeyPairsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionkeypair.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.KeyPairCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mission.KeyPairTable,
			Columns: []string{mission.KeyPairColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hmackeypair.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.KeyPairIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mission.KeyPairTable,
			Columns: []string{mission.KeyPairColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hmackeypair.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Mission{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
