// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/bill"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/symbol"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/transferorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/vxsocial"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// TransferOrderCreate is the builder for creating a TransferOrder entity.
type TransferOrderCreate struct {
	config
	mutation *TransferOrderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (toc *TransferOrderCreate) SetCreatedBy(i int64) *TransferOrderCreate {
	toc.mutation.SetCreatedBy(i)
	return toc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (toc *TransferOrderCreate) SetNillableCreatedBy(i *int64) *TransferOrderCreate {
	if i != nil {
		toc.SetCreatedBy(*i)
	}
	return toc
}

// SetUpdatedBy sets the "updated_by" field.
func (toc *TransferOrderCreate) SetUpdatedBy(i int64) *TransferOrderCreate {
	toc.mutation.SetUpdatedBy(i)
	return toc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (toc *TransferOrderCreate) SetNillableUpdatedBy(i *int64) *TransferOrderCreate {
	if i != nil {
		toc.SetUpdatedBy(*i)
	}
	return toc
}

// SetCreatedAt sets the "created_at" field.
func (toc *TransferOrderCreate) SetCreatedAt(t time.Time) *TransferOrderCreate {
	toc.mutation.SetCreatedAt(t)
	return toc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (toc *TransferOrderCreate) SetNillableCreatedAt(t *time.Time) *TransferOrderCreate {
	if t != nil {
		toc.SetCreatedAt(*t)
	}
	return toc
}

// SetUpdatedAt sets the "updated_at" field.
func (toc *TransferOrderCreate) SetUpdatedAt(t time.Time) *TransferOrderCreate {
	toc.mutation.SetUpdatedAt(t)
	return toc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (toc *TransferOrderCreate) SetNillableUpdatedAt(t *time.Time) *TransferOrderCreate {
	if t != nil {
		toc.SetUpdatedAt(*t)
	}
	return toc
}

// SetDeletedAt sets the "deleted_at" field.
func (toc *TransferOrderCreate) SetDeletedAt(t time.Time) *TransferOrderCreate {
	toc.mutation.SetDeletedAt(t)
	return toc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (toc *TransferOrderCreate) SetNillableDeletedAt(t *time.Time) *TransferOrderCreate {
	if t != nil {
		toc.SetDeletedAt(*t)
	}
	return toc
}

// SetSourceUserID sets the "source_user_id" field.
func (toc *TransferOrderCreate) SetSourceUserID(i int64) *TransferOrderCreate {
	toc.mutation.SetSourceUserID(i)
	return toc
}

// SetNillableSourceUserID sets the "source_user_id" field if the given value is not nil.
func (toc *TransferOrderCreate) SetNillableSourceUserID(i *int64) *TransferOrderCreate {
	if i != nil {
		toc.SetSourceUserID(*i)
	}
	return toc
}

// SetTargetUserID sets the "target_user_id" field.
func (toc *TransferOrderCreate) SetTargetUserID(i int64) *TransferOrderCreate {
	toc.mutation.SetTargetUserID(i)
	return toc
}

// SetNillableTargetUserID sets the "target_user_id" field if the given value is not nil.
func (toc *TransferOrderCreate) SetNillableTargetUserID(i *int64) *TransferOrderCreate {
	if i != nil {
		toc.SetTargetUserID(*i)
	}
	return toc
}

// SetStatus sets the "status" field.
func (toc *TransferOrderCreate) SetStatus(t transferorder.Status) *TransferOrderCreate {
	toc.mutation.SetStatus(t)
	return toc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (toc *TransferOrderCreate) SetNillableStatus(t *transferorder.Status) *TransferOrderCreate {
	if t != nil {
		toc.SetStatus(*t)
	}
	return toc
}

// SetSymbolID sets the "symbol_id" field.
func (toc *TransferOrderCreate) SetSymbolID(i int64) *TransferOrderCreate {
	toc.mutation.SetSymbolID(i)
	return toc
}

// SetNillableSymbolID sets the "symbol_id" field if the given value is not nil.
func (toc *TransferOrderCreate) SetNillableSymbolID(i *int64) *TransferOrderCreate {
	if i != nil {
		toc.SetSymbolID(*i)
	}
	return toc
}

// SetAmount sets the "amount" field.
func (toc *TransferOrderCreate) SetAmount(i int64) *TransferOrderCreate {
	toc.mutation.SetAmount(i)
	return toc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (toc *TransferOrderCreate) SetNillableAmount(i *int64) *TransferOrderCreate {
	if i != nil {
		toc.SetAmount(*i)
	}
	return toc
}

// SetType sets the "type" field.
func (toc *TransferOrderCreate) SetType(eot enums.TransferOrderType) *TransferOrderCreate {
	toc.mutation.SetType(eot)
	return toc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (toc *TransferOrderCreate) SetNillableType(eot *enums.TransferOrderType) *TransferOrderCreate {
	if eot != nil {
		toc.SetType(*eot)
	}
	return toc
}

// SetSerialNumber sets the "serial_number" field.
func (toc *TransferOrderCreate) SetSerialNumber(s string) *TransferOrderCreate {
	toc.mutation.SetSerialNumber(s)
	return toc
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (toc *TransferOrderCreate) SetNillableSerialNumber(s *string) *TransferOrderCreate {
	if s != nil {
		toc.SetSerialNumber(*s)
	}
	return toc
}

// SetSocialID sets the "social_id" field.
func (toc *TransferOrderCreate) SetSocialID(i int64) *TransferOrderCreate {
	toc.mutation.SetSocialID(i)
	return toc
}

// SetNillableSocialID sets the "social_id" field if the given value is not nil.
func (toc *TransferOrderCreate) SetNillableSocialID(i *int64) *TransferOrderCreate {
	if i != nil {
		toc.SetSocialID(*i)
	}
	return toc
}

// SetThirdAPIResp sets the "third_api_resp" field.
func (toc *TransferOrderCreate) SetThirdAPIResp(s string) *TransferOrderCreate {
	toc.mutation.SetThirdAPIResp(s)
	return toc
}

// SetNillableThirdAPIResp sets the "third_api_resp" field if the given value is not nil.
func (toc *TransferOrderCreate) SetNillableThirdAPIResp(s *string) *TransferOrderCreate {
	if s != nil {
		toc.SetThirdAPIResp(*s)
	}
	return toc
}

// SetOutTransactionID sets the "out_transaction_id" field.
func (toc *TransferOrderCreate) SetOutTransactionID(s string) *TransferOrderCreate {
	toc.mutation.SetOutTransactionID(s)
	return toc
}

// SetNillableOutTransactionID sets the "out_transaction_id" field if the given value is not nil.
func (toc *TransferOrderCreate) SetNillableOutTransactionID(s *string) *TransferOrderCreate {
	if s != nil {
		toc.SetOutTransactionID(*s)
	}
	return toc
}

// SetWithdrawAccount sets the "withdraw_account" field.
func (toc *TransferOrderCreate) SetWithdrawAccount(s string) *TransferOrderCreate {
	toc.mutation.SetWithdrawAccount(s)
	return toc
}

// SetNillableWithdrawAccount sets the "withdraw_account" field if the given value is not nil.
func (toc *TransferOrderCreate) SetNillableWithdrawAccount(s *string) *TransferOrderCreate {
	if s != nil {
		toc.SetWithdrawAccount(*s)
	}
	return toc
}

// SetWithdrawRate sets the "withdraw_rate" field.
func (toc *TransferOrderCreate) SetWithdrawRate(i int64) *TransferOrderCreate {
	toc.mutation.SetWithdrawRate(i)
	return toc
}

// SetNillableWithdrawRate sets the "withdraw_rate" field if the given value is not nil.
func (toc *TransferOrderCreate) SetNillableWithdrawRate(i *int64) *TransferOrderCreate {
	if i != nil {
		toc.SetWithdrawRate(*i)
	}
	return toc
}

// SetWithdrawRealAmount sets the "withdraw_real_amount" field.
func (toc *TransferOrderCreate) SetWithdrawRealAmount(i int64) *TransferOrderCreate {
	toc.mutation.SetWithdrawRealAmount(i)
	return toc
}

// SetNillableWithdrawRealAmount sets the "withdraw_real_amount" field if the given value is not nil.
func (toc *TransferOrderCreate) SetNillableWithdrawRealAmount(i *int64) *TransferOrderCreate {
	if i != nil {
		toc.SetWithdrawRealAmount(*i)
	}
	return toc
}

// SetOperateUserID sets the "operate_user_id" field.
func (toc *TransferOrderCreate) SetOperateUserID(i int64) *TransferOrderCreate {
	toc.mutation.SetOperateUserID(i)
	return toc
}

// SetNillableOperateUserID sets the "operate_user_id" field if the given value is not nil.
func (toc *TransferOrderCreate) SetNillableOperateUserID(i *int64) *TransferOrderCreate {
	if i != nil {
		toc.SetOperateUserID(*i)
	}
	return toc
}

// SetID sets the "id" field.
func (toc *TransferOrderCreate) SetID(i int64) *TransferOrderCreate {
	toc.mutation.SetID(i)
	return toc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (toc *TransferOrderCreate) SetNillableID(i *int64) *TransferOrderCreate {
	if i != nil {
		toc.SetID(*i)
	}
	return toc
}

// SetSourceUser sets the "source_user" edge to the User entity.
func (toc *TransferOrderCreate) SetSourceUser(u *User) *TransferOrderCreate {
	return toc.SetSourceUserID(u.ID)
}

// SetTargetUser sets the "target_user" edge to the User entity.
func (toc *TransferOrderCreate) SetTargetUser(u *User) *TransferOrderCreate {
	return toc.SetTargetUserID(u.ID)
}

// AddBillIDs adds the "bills" edge to the Bill entity by IDs.
func (toc *TransferOrderCreate) AddBillIDs(ids ...int64) *TransferOrderCreate {
	toc.mutation.AddBillIDs(ids...)
	return toc
}

// AddBills adds the "bills" edges to the Bill entity.
func (toc *TransferOrderCreate) AddBills(b ...*Bill) *TransferOrderCreate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return toc.AddBillIDs(ids...)
}

// SetVxSocialID sets the "vx_social" edge to the VXSocial entity by ID.
func (toc *TransferOrderCreate) SetVxSocialID(id int64) *TransferOrderCreate {
	toc.mutation.SetVxSocialID(id)
	return toc
}

// SetNillableVxSocialID sets the "vx_social" edge to the VXSocial entity by ID if the given value is not nil.
func (toc *TransferOrderCreate) SetNillableVxSocialID(id *int64) *TransferOrderCreate {
	if id != nil {
		toc = toc.SetVxSocialID(*id)
	}
	return toc
}

// SetVxSocial sets the "vx_social" edge to the VXSocial entity.
func (toc *TransferOrderCreate) SetVxSocial(v *VXSocial) *TransferOrderCreate {
	return toc.SetVxSocialID(v.ID)
}

// SetSymbol sets the "symbol" edge to the Symbol entity.
func (toc *TransferOrderCreate) SetSymbol(s *Symbol) *TransferOrderCreate {
	return toc.SetSymbolID(s.ID)
}

// SetOperateUser sets the "operate_user" edge to the User entity.
func (toc *TransferOrderCreate) SetOperateUser(u *User) *TransferOrderCreate {
	return toc.SetOperateUserID(u.ID)
}

// Mutation returns the TransferOrderMutation object of the builder.
func (toc *TransferOrderCreate) Mutation() *TransferOrderMutation {
	return toc.mutation
}

// Save creates the TransferOrder in the database.
func (toc *TransferOrderCreate) Save(ctx context.Context) (*TransferOrder, error) {
	toc.defaults()
	return withHooks(ctx, toc.sqlSave, toc.mutation, toc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (toc *TransferOrderCreate) SaveX(ctx context.Context) *TransferOrder {
	v, err := toc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (toc *TransferOrderCreate) Exec(ctx context.Context) error {
	_, err := toc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (toc *TransferOrderCreate) ExecX(ctx context.Context) {
	if err := toc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (toc *TransferOrderCreate) defaults() {
	if _, ok := toc.mutation.CreatedBy(); !ok {
		v := transferorder.DefaultCreatedBy
		toc.mutation.SetCreatedBy(v)
	}
	if _, ok := toc.mutation.UpdatedBy(); !ok {
		v := transferorder.DefaultUpdatedBy
		toc.mutation.SetUpdatedBy(v)
	}
	if _, ok := toc.mutation.CreatedAt(); !ok {
		v := transferorder.DefaultCreatedAt()
		toc.mutation.SetCreatedAt(v)
	}
	if _, ok := toc.mutation.UpdatedAt(); !ok {
		v := transferorder.DefaultUpdatedAt()
		toc.mutation.SetUpdatedAt(v)
	}
	if _, ok := toc.mutation.DeletedAt(); !ok {
		v := transferorder.DefaultDeletedAt
		toc.mutation.SetDeletedAt(v)
	}
	if _, ok := toc.mutation.SourceUserID(); !ok {
		v := transferorder.DefaultSourceUserID
		toc.mutation.SetSourceUserID(v)
	}
	if _, ok := toc.mutation.TargetUserID(); !ok {
		v := transferorder.DefaultTargetUserID
		toc.mutation.SetTargetUserID(v)
	}
	if _, ok := toc.mutation.Status(); !ok {
		v := transferorder.DefaultStatus
		toc.mutation.SetStatus(v)
	}
	if _, ok := toc.mutation.SymbolID(); !ok {
		v := transferorder.DefaultSymbolID
		toc.mutation.SetSymbolID(v)
	}
	if _, ok := toc.mutation.Amount(); !ok {
		v := transferorder.DefaultAmount
		toc.mutation.SetAmount(v)
	}
	if _, ok := toc.mutation.GetType(); !ok {
		v := transferorder.DefaultType
		toc.mutation.SetType(v)
	}
	if _, ok := toc.mutation.SerialNumber(); !ok {
		v := transferorder.DefaultSerialNumber
		toc.mutation.SetSerialNumber(v)
	}
	if _, ok := toc.mutation.SocialID(); !ok {
		v := transferorder.DefaultSocialID
		toc.mutation.SetSocialID(v)
	}
	if _, ok := toc.mutation.ThirdAPIResp(); !ok {
		v := transferorder.DefaultThirdAPIResp
		toc.mutation.SetThirdAPIResp(v)
	}
	if _, ok := toc.mutation.OutTransactionID(); !ok {
		v := transferorder.DefaultOutTransactionID
		toc.mutation.SetOutTransactionID(v)
	}
	if _, ok := toc.mutation.WithdrawAccount(); !ok {
		v := transferorder.DefaultWithdrawAccount
		toc.mutation.SetWithdrawAccount(v)
	}
	if _, ok := toc.mutation.WithdrawRate(); !ok {
		v := transferorder.DefaultWithdrawRate
		toc.mutation.SetWithdrawRate(v)
	}
	if _, ok := toc.mutation.WithdrawRealAmount(); !ok {
		v := transferorder.DefaultWithdrawRealAmount
		toc.mutation.SetWithdrawRealAmount(v)
	}
	if _, ok := toc.mutation.OperateUserID(); !ok {
		v := transferorder.DefaultOperateUserID
		toc.mutation.SetOperateUserID(v)
	}
	if _, ok := toc.mutation.ID(); !ok {
		v := transferorder.DefaultID()
		toc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (toc *TransferOrderCreate) check() error {
	if _, ok := toc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "TransferOrder.created_by"`)}
	}
	if _, ok := toc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "TransferOrder.updated_by"`)}
	}
	if _, ok := toc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "TransferOrder.created_at"`)}
	}
	if _, ok := toc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "TransferOrder.updated_at"`)}
	}
	if _, ok := toc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "TransferOrder.deleted_at"`)}
	}
	if _, ok := toc.mutation.SourceUserID(); !ok {
		return &ValidationError{Name: "source_user_id", err: errors.New(`cep_ent: missing required field "TransferOrder.source_user_id"`)}
	}
	if _, ok := toc.mutation.TargetUserID(); !ok {
		return &ValidationError{Name: "target_user_id", err: errors.New(`cep_ent: missing required field "TransferOrder.target_user_id"`)}
	}
	if _, ok := toc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`cep_ent: missing required field "TransferOrder.status"`)}
	}
	if v, ok := toc.mutation.Status(); ok {
		if err := transferorder.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "TransferOrder.status": %w`, err)}
		}
	}
	if _, ok := toc.mutation.SymbolID(); !ok {
		return &ValidationError{Name: "symbol_id", err: errors.New(`cep_ent: missing required field "TransferOrder.symbol_id"`)}
	}
	if _, ok := toc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`cep_ent: missing required field "TransferOrder.amount"`)}
	}
	if _, ok := toc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`cep_ent: missing required field "TransferOrder.type"`)}
	}
	if v, ok := toc.mutation.GetType(); ok {
		if err := transferorder.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "TransferOrder.type": %w`, err)}
		}
	}
	if _, ok := toc.mutation.SerialNumber(); !ok {
		return &ValidationError{Name: "serial_number", err: errors.New(`cep_ent: missing required field "TransferOrder.serial_number"`)}
	}
	if _, ok := toc.mutation.ThirdAPIResp(); !ok {
		return &ValidationError{Name: "third_api_resp", err: errors.New(`cep_ent: missing required field "TransferOrder.third_api_resp"`)}
	}
	if _, ok := toc.mutation.OutTransactionID(); !ok {
		return &ValidationError{Name: "out_transaction_id", err: errors.New(`cep_ent: missing required field "TransferOrder.out_transaction_id"`)}
	}
	if _, ok := toc.mutation.WithdrawAccount(); !ok {
		return &ValidationError{Name: "withdraw_account", err: errors.New(`cep_ent: missing required field "TransferOrder.withdraw_account"`)}
	}
	if _, ok := toc.mutation.WithdrawRate(); !ok {
		return &ValidationError{Name: "withdraw_rate", err: errors.New(`cep_ent: missing required field "TransferOrder.withdraw_rate"`)}
	}
	if _, ok := toc.mutation.WithdrawRealAmount(); !ok {
		return &ValidationError{Name: "withdraw_real_amount", err: errors.New(`cep_ent: missing required field "TransferOrder.withdraw_real_amount"`)}
	}
	if _, ok := toc.mutation.OperateUserID(); !ok {
		return &ValidationError{Name: "operate_user_id", err: errors.New(`cep_ent: missing required field "TransferOrder.operate_user_id"`)}
	}
	if _, ok := toc.mutation.SourceUserID(); !ok {
		return &ValidationError{Name: "source_user", err: errors.New(`cep_ent: missing required edge "TransferOrder.source_user"`)}
	}
	if _, ok := toc.mutation.TargetUserID(); !ok {
		return &ValidationError{Name: "target_user", err: errors.New(`cep_ent: missing required edge "TransferOrder.target_user"`)}
	}
	if _, ok := toc.mutation.SymbolID(); !ok {
		return &ValidationError{Name: "symbol", err: errors.New(`cep_ent: missing required edge "TransferOrder.symbol"`)}
	}
	if _, ok := toc.mutation.OperateUserID(); !ok {
		return &ValidationError{Name: "operate_user", err: errors.New(`cep_ent: missing required edge "TransferOrder.operate_user"`)}
	}
	return nil
}

func (toc *TransferOrderCreate) sqlSave(ctx context.Context) (*TransferOrder, error) {
	if err := toc.check(); err != nil {
		return nil, err
	}
	_node, _spec := toc.createSpec()
	if err := sqlgraph.CreateNode(ctx, toc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	toc.mutation.id = &_node.ID
	toc.mutation.done = true
	return _node, nil
}

func (toc *TransferOrderCreate) createSpec() (*TransferOrder, *sqlgraph.CreateSpec) {
	var (
		_node = &TransferOrder{config: toc.config}
		_spec = sqlgraph.NewCreateSpec(transferorder.Table, sqlgraph.NewFieldSpec(transferorder.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = toc.conflict
	if id, ok := toc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := toc.mutation.CreatedBy(); ok {
		_spec.SetField(transferorder.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := toc.mutation.UpdatedBy(); ok {
		_spec.SetField(transferorder.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := toc.mutation.CreatedAt(); ok {
		_spec.SetField(transferorder.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := toc.mutation.UpdatedAt(); ok {
		_spec.SetField(transferorder.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := toc.mutation.DeletedAt(); ok {
		_spec.SetField(transferorder.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := toc.mutation.Status(); ok {
		_spec.SetField(transferorder.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := toc.mutation.Amount(); ok {
		_spec.SetField(transferorder.FieldAmount, field.TypeInt64, value)
		_node.Amount = value
	}
	if value, ok := toc.mutation.GetType(); ok {
		_spec.SetField(transferorder.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := toc.mutation.SerialNumber(); ok {
		_spec.SetField(transferorder.FieldSerialNumber, field.TypeString, value)
		_node.SerialNumber = value
	}
	if value, ok := toc.mutation.ThirdAPIResp(); ok {
		_spec.SetField(transferorder.FieldThirdAPIResp, field.TypeString, value)
		_node.ThirdAPIResp = value
	}
	if value, ok := toc.mutation.OutTransactionID(); ok {
		_spec.SetField(transferorder.FieldOutTransactionID, field.TypeString, value)
		_node.OutTransactionID = value
	}
	if value, ok := toc.mutation.WithdrawAccount(); ok {
		_spec.SetField(transferorder.FieldWithdrawAccount, field.TypeString, value)
		_node.WithdrawAccount = value
	}
	if value, ok := toc.mutation.WithdrawRate(); ok {
		_spec.SetField(transferorder.FieldWithdrawRate, field.TypeInt64, value)
		_node.WithdrawRate = value
	}
	if value, ok := toc.mutation.WithdrawRealAmount(); ok {
		_spec.SetField(transferorder.FieldWithdrawRealAmount, field.TypeInt64, value)
		_node.WithdrawRealAmount = value
	}
	if nodes := toc.mutation.SourceUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transferorder.SourceUserTable,
			Columns: []string{transferorder.SourceUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SourceUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := toc.mutation.TargetUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transferorder.TargetUserTable,
			Columns: []string{transferorder.TargetUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TargetUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := toc.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transferorder.BillsTable,
			Columns: []string{transferorder.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := toc.mutation.VxSocialIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transferorder.VxSocialTable,
			Columns: []string{transferorder.VxSocialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vxsocial.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SocialID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := toc.mutation.SymbolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transferorder.SymbolTable,
			Columns: []string{transferorder.SymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SymbolID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := toc.mutation.OperateUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transferorder.OperateUserTable,
			Columns: []string{transferorder.OperateUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OperateUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TransferOrder.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TransferOrderUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (toc *TransferOrderCreate) OnConflict(opts ...sql.ConflictOption) *TransferOrderUpsertOne {
	toc.conflict = opts
	return &TransferOrderUpsertOne{
		create: toc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TransferOrder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (toc *TransferOrderCreate) OnConflictColumns(columns ...string) *TransferOrderUpsertOne {
	toc.conflict = append(toc.conflict, sql.ConflictColumns(columns...))
	return &TransferOrderUpsertOne{
		create: toc,
	}
}

type (
	// TransferOrderUpsertOne is the builder for "upsert"-ing
	//  one TransferOrder node.
	TransferOrderUpsertOne struct {
		create *TransferOrderCreate
	}

	// TransferOrderUpsert is the "OnConflict" setter.
	TransferOrderUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *TransferOrderUpsert) SetCreatedBy(v int64) *TransferOrderUpsert {
	u.Set(transferorder.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *TransferOrderUpsert) UpdateCreatedBy() *TransferOrderUpsert {
	u.SetExcluded(transferorder.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *TransferOrderUpsert) AddCreatedBy(v int64) *TransferOrderUpsert {
	u.Add(transferorder.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *TransferOrderUpsert) SetUpdatedBy(v int64) *TransferOrderUpsert {
	u.Set(transferorder.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *TransferOrderUpsert) UpdateUpdatedBy() *TransferOrderUpsert {
	u.SetExcluded(transferorder.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *TransferOrderUpsert) AddUpdatedBy(v int64) *TransferOrderUpsert {
	u.Add(transferorder.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TransferOrderUpsert) SetUpdatedAt(v time.Time) *TransferOrderUpsert {
	u.Set(transferorder.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TransferOrderUpsert) UpdateUpdatedAt() *TransferOrderUpsert {
	u.SetExcluded(transferorder.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TransferOrderUpsert) SetDeletedAt(v time.Time) *TransferOrderUpsert {
	u.Set(transferorder.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TransferOrderUpsert) UpdateDeletedAt() *TransferOrderUpsert {
	u.SetExcluded(transferorder.FieldDeletedAt)
	return u
}

// SetSourceUserID sets the "source_user_id" field.
func (u *TransferOrderUpsert) SetSourceUserID(v int64) *TransferOrderUpsert {
	u.Set(transferorder.FieldSourceUserID, v)
	return u
}

// UpdateSourceUserID sets the "source_user_id" field to the value that was provided on create.
func (u *TransferOrderUpsert) UpdateSourceUserID() *TransferOrderUpsert {
	u.SetExcluded(transferorder.FieldSourceUserID)
	return u
}

// SetTargetUserID sets the "target_user_id" field.
func (u *TransferOrderUpsert) SetTargetUserID(v int64) *TransferOrderUpsert {
	u.Set(transferorder.FieldTargetUserID, v)
	return u
}

// UpdateTargetUserID sets the "target_user_id" field to the value that was provided on create.
func (u *TransferOrderUpsert) UpdateTargetUserID() *TransferOrderUpsert {
	u.SetExcluded(transferorder.FieldTargetUserID)
	return u
}

// SetStatus sets the "status" field.
func (u *TransferOrderUpsert) SetStatus(v transferorder.Status) *TransferOrderUpsert {
	u.Set(transferorder.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TransferOrderUpsert) UpdateStatus() *TransferOrderUpsert {
	u.SetExcluded(transferorder.FieldStatus)
	return u
}

// SetSymbolID sets the "symbol_id" field.
func (u *TransferOrderUpsert) SetSymbolID(v int64) *TransferOrderUpsert {
	u.Set(transferorder.FieldSymbolID, v)
	return u
}

// UpdateSymbolID sets the "symbol_id" field to the value that was provided on create.
func (u *TransferOrderUpsert) UpdateSymbolID() *TransferOrderUpsert {
	u.SetExcluded(transferorder.FieldSymbolID)
	return u
}

// SetAmount sets the "amount" field.
func (u *TransferOrderUpsert) SetAmount(v int64) *TransferOrderUpsert {
	u.Set(transferorder.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *TransferOrderUpsert) UpdateAmount() *TransferOrderUpsert {
	u.SetExcluded(transferorder.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *TransferOrderUpsert) AddAmount(v int64) *TransferOrderUpsert {
	u.Add(transferorder.FieldAmount, v)
	return u
}

// SetType sets the "type" field.
func (u *TransferOrderUpsert) SetType(v enums.TransferOrderType) *TransferOrderUpsert {
	u.Set(transferorder.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TransferOrderUpsert) UpdateType() *TransferOrderUpsert {
	u.SetExcluded(transferorder.FieldType)
	return u
}

// SetSerialNumber sets the "serial_number" field.
func (u *TransferOrderUpsert) SetSerialNumber(v string) *TransferOrderUpsert {
	u.Set(transferorder.FieldSerialNumber, v)
	return u
}

// UpdateSerialNumber sets the "serial_number" field to the value that was provided on create.
func (u *TransferOrderUpsert) UpdateSerialNumber() *TransferOrderUpsert {
	u.SetExcluded(transferorder.FieldSerialNumber)
	return u
}

// SetSocialID sets the "social_id" field.
func (u *TransferOrderUpsert) SetSocialID(v int64) *TransferOrderUpsert {
	u.Set(transferorder.FieldSocialID, v)
	return u
}

// UpdateSocialID sets the "social_id" field to the value that was provided on create.
func (u *TransferOrderUpsert) UpdateSocialID() *TransferOrderUpsert {
	u.SetExcluded(transferorder.FieldSocialID)
	return u
}

// ClearSocialID clears the value of the "social_id" field.
func (u *TransferOrderUpsert) ClearSocialID() *TransferOrderUpsert {
	u.SetNull(transferorder.FieldSocialID)
	return u
}

// SetThirdAPIResp sets the "third_api_resp" field.
func (u *TransferOrderUpsert) SetThirdAPIResp(v string) *TransferOrderUpsert {
	u.Set(transferorder.FieldThirdAPIResp, v)
	return u
}

// UpdateThirdAPIResp sets the "third_api_resp" field to the value that was provided on create.
func (u *TransferOrderUpsert) UpdateThirdAPIResp() *TransferOrderUpsert {
	u.SetExcluded(transferorder.FieldThirdAPIResp)
	return u
}

// SetOutTransactionID sets the "out_transaction_id" field.
func (u *TransferOrderUpsert) SetOutTransactionID(v string) *TransferOrderUpsert {
	u.Set(transferorder.FieldOutTransactionID, v)
	return u
}

// UpdateOutTransactionID sets the "out_transaction_id" field to the value that was provided on create.
func (u *TransferOrderUpsert) UpdateOutTransactionID() *TransferOrderUpsert {
	u.SetExcluded(transferorder.FieldOutTransactionID)
	return u
}

// SetWithdrawAccount sets the "withdraw_account" field.
func (u *TransferOrderUpsert) SetWithdrawAccount(v string) *TransferOrderUpsert {
	u.Set(transferorder.FieldWithdrawAccount, v)
	return u
}

// UpdateWithdrawAccount sets the "withdraw_account" field to the value that was provided on create.
func (u *TransferOrderUpsert) UpdateWithdrawAccount() *TransferOrderUpsert {
	u.SetExcluded(transferorder.FieldWithdrawAccount)
	return u
}

// SetWithdrawRate sets the "withdraw_rate" field.
func (u *TransferOrderUpsert) SetWithdrawRate(v int64) *TransferOrderUpsert {
	u.Set(transferorder.FieldWithdrawRate, v)
	return u
}

// UpdateWithdrawRate sets the "withdraw_rate" field to the value that was provided on create.
func (u *TransferOrderUpsert) UpdateWithdrawRate() *TransferOrderUpsert {
	u.SetExcluded(transferorder.FieldWithdrawRate)
	return u
}

// AddWithdrawRate adds v to the "withdraw_rate" field.
func (u *TransferOrderUpsert) AddWithdrawRate(v int64) *TransferOrderUpsert {
	u.Add(transferorder.FieldWithdrawRate, v)
	return u
}

// SetWithdrawRealAmount sets the "withdraw_real_amount" field.
func (u *TransferOrderUpsert) SetWithdrawRealAmount(v int64) *TransferOrderUpsert {
	u.Set(transferorder.FieldWithdrawRealAmount, v)
	return u
}

// UpdateWithdrawRealAmount sets the "withdraw_real_amount" field to the value that was provided on create.
func (u *TransferOrderUpsert) UpdateWithdrawRealAmount() *TransferOrderUpsert {
	u.SetExcluded(transferorder.FieldWithdrawRealAmount)
	return u
}

// AddWithdrawRealAmount adds v to the "withdraw_real_amount" field.
func (u *TransferOrderUpsert) AddWithdrawRealAmount(v int64) *TransferOrderUpsert {
	u.Add(transferorder.FieldWithdrawRealAmount, v)
	return u
}

// SetOperateUserID sets the "operate_user_id" field.
func (u *TransferOrderUpsert) SetOperateUserID(v int64) *TransferOrderUpsert {
	u.Set(transferorder.FieldOperateUserID, v)
	return u
}

// UpdateOperateUserID sets the "operate_user_id" field to the value that was provided on create.
func (u *TransferOrderUpsert) UpdateOperateUserID() *TransferOrderUpsert {
	u.SetExcluded(transferorder.FieldOperateUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TransferOrder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(transferorder.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TransferOrderUpsertOne) UpdateNewValues() *TransferOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(transferorder.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(transferorder.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TransferOrder.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TransferOrderUpsertOne) Ignore() *TransferOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TransferOrderUpsertOne) DoNothing() *TransferOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TransferOrderCreate.OnConflict
// documentation for more info.
func (u *TransferOrderUpsertOne) Update(set func(*TransferOrderUpsert)) *TransferOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TransferOrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *TransferOrderUpsertOne) SetCreatedBy(v int64) *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *TransferOrderUpsertOne) AddCreatedBy(v int64) *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *TransferOrderUpsertOne) UpdateCreatedBy() *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *TransferOrderUpsertOne) SetUpdatedBy(v int64) *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *TransferOrderUpsertOne) AddUpdatedBy(v int64) *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *TransferOrderUpsertOne) UpdateUpdatedBy() *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TransferOrderUpsertOne) SetUpdatedAt(v time.Time) *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TransferOrderUpsertOne) UpdateUpdatedAt() *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TransferOrderUpsertOne) SetDeletedAt(v time.Time) *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TransferOrderUpsertOne) UpdateDeletedAt() *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetSourceUserID sets the "source_user_id" field.
func (u *TransferOrderUpsertOne) SetSourceUserID(v int64) *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetSourceUserID(v)
	})
}

// UpdateSourceUserID sets the "source_user_id" field to the value that was provided on create.
func (u *TransferOrderUpsertOne) UpdateSourceUserID() *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateSourceUserID()
	})
}

// SetTargetUserID sets the "target_user_id" field.
func (u *TransferOrderUpsertOne) SetTargetUserID(v int64) *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetTargetUserID(v)
	})
}

// UpdateTargetUserID sets the "target_user_id" field to the value that was provided on create.
func (u *TransferOrderUpsertOne) UpdateTargetUserID() *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateTargetUserID()
	})
}

// SetStatus sets the "status" field.
func (u *TransferOrderUpsertOne) SetStatus(v transferorder.Status) *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TransferOrderUpsertOne) UpdateStatus() *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateStatus()
	})
}

// SetSymbolID sets the "symbol_id" field.
func (u *TransferOrderUpsertOne) SetSymbolID(v int64) *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetSymbolID(v)
	})
}

// UpdateSymbolID sets the "symbol_id" field to the value that was provided on create.
func (u *TransferOrderUpsertOne) UpdateSymbolID() *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateSymbolID()
	})
}

// SetAmount sets the "amount" field.
func (u *TransferOrderUpsertOne) SetAmount(v int64) *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *TransferOrderUpsertOne) AddAmount(v int64) *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *TransferOrderUpsertOne) UpdateAmount() *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateAmount()
	})
}

// SetType sets the "type" field.
func (u *TransferOrderUpsertOne) SetType(v enums.TransferOrderType) *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TransferOrderUpsertOne) UpdateType() *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateType()
	})
}

// SetSerialNumber sets the "serial_number" field.
func (u *TransferOrderUpsertOne) SetSerialNumber(v string) *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetSerialNumber(v)
	})
}

// UpdateSerialNumber sets the "serial_number" field to the value that was provided on create.
func (u *TransferOrderUpsertOne) UpdateSerialNumber() *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateSerialNumber()
	})
}

// SetSocialID sets the "social_id" field.
func (u *TransferOrderUpsertOne) SetSocialID(v int64) *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetSocialID(v)
	})
}

// UpdateSocialID sets the "social_id" field to the value that was provided on create.
func (u *TransferOrderUpsertOne) UpdateSocialID() *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateSocialID()
	})
}

// ClearSocialID clears the value of the "social_id" field.
func (u *TransferOrderUpsertOne) ClearSocialID() *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.ClearSocialID()
	})
}

// SetThirdAPIResp sets the "third_api_resp" field.
func (u *TransferOrderUpsertOne) SetThirdAPIResp(v string) *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetThirdAPIResp(v)
	})
}

// UpdateThirdAPIResp sets the "third_api_resp" field to the value that was provided on create.
func (u *TransferOrderUpsertOne) UpdateThirdAPIResp() *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateThirdAPIResp()
	})
}

// SetOutTransactionID sets the "out_transaction_id" field.
func (u *TransferOrderUpsertOne) SetOutTransactionID(v string) *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetOutTransactionID(v)
	})
}

// UpdateOutTransactionID sets the "out_transaction_id" field to the value that was provided on create.
func (u *TransferOrderUpsertOne) UpdateOutTransactionID() *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateOutTransactionID()
	})
}

// SetWithdrawAccount sets the "withdraw_account" field.
func (u *TransferOrderUpsertOne) SetWithdrawAccount(v string) *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetWithdrawAccount(v)
	})
}

// UpdateWithdrawAccount sets the "withdraw_account" field to the value that was provided on create.
func (u *TransferOrderUpsertOne) UpdateWithdrawAccount() *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateWithdrawAccount()
	})
}

// SetWithdrawRate sets the "withdraw_rate" field.
func (u *TransferOrderUpsertOne) SetWithdrawRate(v int64) *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetWithdrawRate(v)
	})
}

// AddWithdrawRate adds v to the "withdraw_rate" field.
func (u *TransferOrderUpsertOne) AddWithdrawRate(v int64) *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.AddWithdrawRate(v)
	})
}

// UpdateWithdrawRate sets the "withdraw_rate" field to the value that was provided on create.
func (u *TransferOrderUpsertOne) UpdateWithdrawRate() *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateWithdrawRate()
	})
}

// SetWithdrawRealAmount sets the "withdraw_real_amount" field.
func (u *TransferOrderUpsertOne) SetWithdrawRealAmount(v int64) *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetWithdrawRealAmount(v)
	})
}

// AddWithdrawRealAmount adds v to the "withdraw_real_amount" field.
func (u *TransferOrderUpsertOne) AddWithdrawRealAmount(v int64) *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.AddWithdrawRealAmount(v)
	})
}

// UpdateWithdrawRealAmount sets the "withdraw_real_amount" field to the value that was provided on create.
func (u *TransferOrderUpsertOne) UpdateWithdrawRealAmount() *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateWithdrawRealAmount()
	})
}

// SetOperateUserID sets the "operate_user_id" field.
func (u *TransferOrderUpsertOne) SetOperateUserID(v int64) *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetOperateUserID(v)
	})
}

// UpdateOperateUserID sets the "operate_user_id" field to the value that was provided on create.
func (u *TransferOrderUpsertOne) UpdateOperateUserID() *TransferOrderUpsertOne {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateOperateUserID()
	})
}

// Exec executes the query.
func (u *TransferOrderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for TransferOrderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TransferOrderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TransferOrderUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TransferOrderUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TransferOrderCreateBulk is the builder for creating many TransferOrder entities in bulk.
type TransferOrderCreateBulk struct {
	config
	err      error
	builders []*TransferOrderCreate
	conflict []sql.ConflictOption
}

// Save creates the TransferOrder entities in the database.
func (tocb *TransferOrderCreateBulk) Save(ctx context.Context) ([]*TransferOrder, error) {
	if tocb.err != nil {
		return nil, tocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tocb.builders))
	nodes := make([]*TransferOrder, len(tocb.builders))
	mutators := make([]Mutator, len(tocb.builders))
	for i := range tocb.builders {
		func(i int, root context.Context) {
			builder := tocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TransferOrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tocb *TransferOrderCreateBulk) SaveX(ctx context.Context) []*TransferOrder {
	v, err := tocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tocb *TransferOrderCreateBulk) Exec(ctx context.Context) error {
	_, err := tocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tocb *TransferOrderCreateBulk) ExecX(ctx context.Context) {
	if err := tocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TransferOrder.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TransferOrderUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (tocb *TransferOrderCreateBulk) OnConflict(opts ...sql.ConflictOption) *TransferOrderUpsertBulk {
	tocb.conflict = opts
	return &TransferOrderUpsertBulk{
		create: tocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TransferOrder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tocb *TransferOrderCreateBulk) OnConflictColumns(columns ...string) *TransferOrderUpsertBulk {
	tocb.conflict = append(tocb.conflict, sql.ConflictColumns(columns...))
	return &TransferOrderUpsertBulk{
		create: tocb,
	}
}

// TransferOrderUpsertBulk is the builder for "upsert"-ing
// a bulk of TransferOrder nodes.
type TransferOrderUpsertBulk struct {
	create *TransferOrderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TransferOrder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(transferorder.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TransferOrderUpsertBulk) UpdateNewValues() *TransferOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(transferorder.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(transferorder.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TransferOrder.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TransferOrderUpsertBulk) Ignore() *TransferOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TransferOrderUpsertBulk) DoNothing() *TransferOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TransferOrderCreateBulk.OnConflict
// documentation for more info.
func (u *TransferOrderUpsertBulk) Update(set func(*TransferOrderUpsert)) *TransferOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TransferOrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *TransferOrderUpsertBulk) SetCreatedBy(v int64) *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *TransferOrderUpsertBulk) AddCreatedBy(v int64) *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *TransferOrderUpsertBulk) UpdateCreatedBy() *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *TransferOrderUpsertBulk) SetUpdatedBy(v int64) *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *TransferOrderUpsertBulk) AddUpdatedBy(v int64) *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *TransferOrderUpsertBulk) UpdateUpdatedBy() *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TransferOrderUpsertBulk) SetUpdatedAt(v time.Time) *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TransferOrderUpsertBulk) UpdateUpdatedAt() *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TransferOrderUpsertBulk) SetDeletedAt(v time.Time) *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TransferOrderUpsertBulk) UpdateDeletedAt() *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetSourceUserID sets the "source_user_id" field.
func (u *TransferOrderUpsertBulk) SetSourceUserID(v int64) *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetSourceUserID(v)
	})
}

// UpdateSourceUserID sets the "source_user_id" field to the value that was provided on create.
func (u *TransferOrderUpsertBulk) UpdateSourceUserID() *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateSourceUserID()
	})
}

// SetTargetUserID sets the "target_user_id" field.
func (u *TransferOrderUpsertBulk) SetTargetUserID(v int64) *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetTargetUserID(v)
	})
}

// UpdateTargetUserID sets the "target_user_id" field to the value that was provided on create.
func (u *TransferOrderUpsertBulk) UpdateTargetUserID() *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateTargetUserID()
	})
}

// SetStatus sets the "status" field.
func (u *TransferOrderUpsertBulk) SetStatus(v transferorder.Status) *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TransferOrderUpsertBulk) UpdateStatus() *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateStatus()
	})
}

// SetSymbolID sets the "symbol_id" field.
func (u *TransferOrderUpsertBulk) SetSymbolID(v int64) *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetSymbolID(v)
	})
}

// UpdateSymbolID sets the "symbol_id" field to the value that was provided on create.
func (u *TransferOrderUpsertBulk) UpdateSymbolID() *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateSymbolID()
	})
}

// SetAmount sets the "amount" field.
func (u *TransferOrderUpsertBulk) SetAmount(v int64) *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *TransferOrderUpsertBulk) AddAmount(v int64) *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *TransferOrderUpsertBulk) UpdateAmount() *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateAmount()
	})
}

// SetType sets the "type" field.
func (u *TransferOrderUpsertBulk) SetType(v enums.TransferOrderType) *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TransferOrderUpsertBulk) UpdateType() *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateType()
	})
}

// SetSerialNumber sets the "serial_number" field.
func (u *TransferOrderUpsertBulk) SetSerialNumber(v string) *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetSerialNumber(v)
	})
}

// UpdateSerialNumber sets the "serial_number" field to the value that was provided on create.
func (u *TransferOrderUpsertBulk) UpdateSerialNumber() *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateSerialNumber()
	})
}

// SetSocialID sets the "social_id" field.
func (u *TransferOrderUpsertBulk) SetSocialID(v int64) *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetSocialID(v)
	})
}

// UpdateSocialID sets the "social_id" field to the value that was provided on create.
func (u *TransferOrderUpsertBulk) UpdateSocialID() *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateSocialID()
	})
}

// ClearSocialID clears the value of the "social_id" field.
func (u *TransferOrderUpsertBulk) ClearSocialID() *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.ClearSocialID()
	})
}

// SetThirdAPIResp sets the "third_api_resp" field.
func (u *TransferOrderUpsertBulk) SetThirdAPIResp(v string) *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetThirdAPIResp(v)
	})
}

// UpdateThirdAPIResp sets the "third_api_resp" field to the value that was provided on create.
func (u *TransferOrderUpsertBulk) UpdateThirdAPIResp() *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateThirdAPIResp()
	})
}

// SetOutTransactionID sets the "out_transaction_id" field.
func (u *TransferOrderUpsertBulk) SetOutTransactionID(v string) *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetOutTransactionID(v)
	})
}

// UpdateOutTransactionID sets the "out_transaction_id" field to the value that was provided on create.
func (u *TransferOrderUpsertBulk) UpdateOutTransactionID() *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateOutTransactionID()
	})
}

// SetWithdrawAccount sets the "withdraw_account" field.
func (u *TransferOrderUpsertBulk) SetWithdrawAccount(v string) *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetWithdrawAccount(v)
	})
}

// UpdateWithdrawAccount sets the "withdraw_account" field to the value that was provided on create.
func (u *TransferOrderUpsertBulk) UpdateWithdrawAccount() *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateWithdrawAccount()
	})
}

// SetWithdrawRate sets the "withdraw_rate" field.
func (u *TransferOrderUpsertBulk) SetWithdrawRate(v int64) *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetWithdrawRate(v)
	})
}

// AddWithdrawRate adds v to the "withdraw_rate" field.
func (u *TransferOrderUpsertBulk) AddWithdrawRate(v int64) *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.AddWithdrawRate(v)
	})
}

// UpdateWithdrawRate sets the "withdraw_rate" field to the value that was provided on create.
func (u *TransferOrderUpsertBulk) UpdateWithdrawRate() *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateWithdrawRate()
	})
}

// SetWithdrawRealAmount sets the "withdraw_real_amount" field.
func (u *TransferOrderUpsertBulk) SetWithdrawRealAmount(v int64) *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetWithdrawRealAmount(v)
	})
}

// AddWithdrawRealAmount adds v to the "withdraw_real_amount" field.
func (u *TransferOrderUpsertBulk) AddWithdrawRealAmount(v int64) *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.AddWithdrawRealAmount(v)
	})
}

// UpdateWithdrawRealAmount sets the "withdraw_real_amount" field to the value that was provided on create.
func (u *TransferOrderUpsertBulk) UpdateWithdrawRealAmount() *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateWithdrawRealAmount()
	})
}

// SetOperateUserID sets the "operate_user_id" field.
func (u *TransferOrderUpsertBulk) SetOperateUserID(v int64) *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.SetOperateUserID(v)
	})
}

// UpdateOperateUserID sets the "operate_user_id" field to the value that was provided on create.
func (u *TransferOrderUpsertBulk) UpdateOperateUserID() *TransferOrderUpsertBulk {
	return u.Update(func(s *TransferOrderUpsert) {
		s.UpdateOperateUserID()
	})
}

// Exec executes the query.
func (u *TransferOrderUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the TransferOrderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for TransferOrderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TransferOrderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
