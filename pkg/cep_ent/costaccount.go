// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/costaccount"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
)

// CostAccount is the model entity for the CostAccount schema.
type CostAccount struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int64 `json:"created_by"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int64 `json:"updated_by"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at"`
	// 外键用户 id
	UserID int64 `json:"user_id"`
	// 总余额
	TotalCep int64 `json:"total_cep"`
	// 累计总余额
	SumTotalCep int64 `json:"sum_total_cep"`
	// 暂时冻结的总余额
	FrozenTotalCep int64 `json:"frozen_total_cep"`
	// 本金余额
	PureCep int64 `json:"pure_cep"`
	// 累计本金余额
	SumPureCep int64 `json:"sum_pure_cep"`
	// 暂时冻结的本金余额
	FrozenPureCep int64 `json:"frozen_pure_cep"`
	// 赠送余额
	GiftCep int64 `json:"gift_cep"`
	// 累计赠送余额
	SumGiftCep int64 `json:"sum_gift_cep"`
	// 暂时冻结的赠金余额
	FrozenGiftCep int64 `json:"frozen_gift_cep"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CostAccountQuery when eager-loading is set.
	Edges        CostAccountEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CostAccountEdges holds the relations/edges for other nodes in the graph.
type CostAccountEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// CostBills holds the value of the cost_bills edge.
	CostBills []*CostBill `json:"cost_bills,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CostAccountEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// CostBillsOrErr returns the CostBills value or an error if the edge
// was not loaded in eager-loading.
func (e CostAccountEdges) CostBillsOrErr() ([]*CostBill, error) {
	if e.loadedTypes[1] {
		return e.CostBills, nil
	}
	return nil, &NotLoadedError{edge: "cost_bills"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CostAccount) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case costaccount.FieldID, costaccount.FieldCreatedBy, costaccount.FieldUpdatedBy, costaccount.FieldUserID, costaccount.FieldTotalCep, costaccount.FieldSumTotalCep, costaccount.FieldFrozenTotalCep, costaccount.FieldPureCep, costaccount.FieldSumPureCep, costaccount.FieldFrozenPureCep, costaccount.FieldGiftCep, costaccount.FieldSumGiftCep, costaccount.FieldFrozenGiftCep:
			values[i] = new(sql.NullInt64)
		case costaccount.FieldCreatedAt, costaccount.FieldUpdatedAt, costaccount.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CostAccount fields.
func (ca *CostAccount) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case costaccount.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ca.ID = int64(value.Int64)
		case costaccount.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ca.CreatedBy = value.Int64
			}
		case costaccount.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ca.UpdatedBy = value.Int64
			}
		case costaccount.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ca.CreatedAt = value.Time
			}
		case costaccount.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ca.UpdatedAt = value.Time
			}
		case costaccount.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ca.DeletedAt = value.Time
			}
		case costaccount.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ca.UserID = value.Int64
			}
		case costaccount.FieldTotalCep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_cep", values[i])
			} else if value.Valid {
				ca.TotalCep = value.Int64
			}
		case costaccount.FieldSumTotalCep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sum_total_cep", values[i])
			} else if value.Valid {
				ca.SumTotalCep = value.Int64
			}
		case costaccount.FieldFrozenTotalCep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field frozen_total_cep", values[i])
			} else if value.Valid {
				ca.FrozenTotalCep = value.Int64
			}
		case costaccount.FieldPureCep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pure_cep", values[i])
			} else if value.Valid {
				ca.PureCep = value.Int64
			}
		case costaccount.FieldSumPureCep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sum_pure_cep", values[i])
			} else if value.Valid {
				ca.SumPureCep = value.Int64
			}
		case costaccount.FieldFrozenPureCep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field frozen_pure_cep", values[i])
			} else if value.Valid {
				ca.FrozenPureCep = value.Int64
			}
		case costaccount.FieldGiftCep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gift_cep", values[i])
			} else if value.Valid {
				ca.GiftCep = value.Int64
			}
		case costaccount.FieldSumGiftCep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sum_gift_cep", values[i])
			} else if value.Valid {
				ca.SumGiftCep = value.Int64
			}
		case costaccount.FieldFrozenGiftCep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field frozen_gift_cep", values[i])
			} else if value.Valid {
				ca.FrozenGiftCep = value.Int64
			}
		default:
			ca.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CostAccount.
// This includes values selected through modifiers, order, etc.
func (ca *CostAccount) Value(name string) (ent.Value, error) {
	return ca.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the CostAccount entity.
func (ca *CostAccount) QueryUser() *UserQuery {
	return NewCostAccountClient(ca.config).QueryUser(ca)
}

// QueryCostBills queries the "cost_bills" edge of the CostAccount entity.
func (ca *CostAccount) QueryCostBills() *CostBillQuery {
	return NewCostAccountClient(ca.config).QueryCostBills(ca)
}

// Update returns a builder for updating this CostAccount.
// Note that you need to call CostAccount.Unwrap() before calling this method if this CostAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (ca *CostAccount) Update() *CostAccountUpdateOne {
	return NewCostAccountClient(ca.config).UpdateOne(ca)
}

// Unwrap unwraps the CostAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ca *CostAccount) Unwrap() *CostAccount {
	_tx, ok := ca.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: CostAccount is not a transactional entity")
	}
	ca.config.driver = _tx.drv
	return ca
}

// String implements the fmt.Stringer.
func (ca *CostAccount) String() string {
	var builder strings.Builder
	builder.WriteString("CostAccount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ca.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", ca.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", ca.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ca.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ca.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(ca.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ca.UserID))
	builder.WriteString(", ")
	builder.WriteString("total_cep=")
	builder.WriteString(fmt.Sprintf("%v", ca.TotalCep))
	builder.WriteString(", ")
	builder.WriteString("sum_total_cep=")
	builder.WriteString(fmt.Sprintf("%v", ca.SumTotalCep))
	builder.WriteString(", ")
	builder.WriteString("frozen_total_cep=")
	builder.WriteString(fmt.Sprintf("%v", ca.FrozenTotalCep))
	builder.WriteString(", ")
	builder.WriteString("pure_cep=")
	builder.WriteString(fmt.Sprintf("%v", ca.PureCep))
	builder.WriteString(", ")
	builder.WriteString("sum_pure_cep=")
	builder.WriteString(fmt.Sprintf("%v", ca.SumPureCep))
	builder.WriteString(", ")
	builder.WriteString("frozen_pure_cep=")
	builder.WriteString(fmt.Sprintf("%v", ca.FrozenPureCep))
	builder.WriteString(", ")
	builder.WriteString("gift_cep=")
	builder.WriteString(fmt.Sprintf("%v", ca.GiftCep))
	builder.WriteString(", ")
	builder.WriteString("sum_gift_cep=")
	builder.WriteString(fmt.Sprintf("%v", ca.SumGiftCep))
	builder.WriteString(", ")
	builder.WriteString("frozen_gift_cep=")
	builder.WriteString(fmt.Sprintf("%v", ca.FrozenGiftCep))
	builder.WriteByte(')')
	return builder.String()
}

// CostAccounts is a parsable slice of CostAccount.
type CostAccounts []*CostAccount
