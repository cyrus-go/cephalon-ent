// Code generated by ent, DO NOT EDIT.

package gpu

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

const (
	// Label holds the string label denoting the gpu type in the database.
	Label = "gpu"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldPower holds the string denoting the power field in the database.
	FieldPower = "power"
	// FieldVideoMemory holds the string denoting the video_memory field in the database.
	FieldVideoMemory = "video_memory"
	// FieldCPU holds the string denoting the cpu field in the database.
	FieldCPU = "cpu"
	// FieldMemory holds the string denoting the memory field in the database.
	FieldMemory = "memory"
	// FieldLowestEarnMonth holds the string denoting the lowest_earn_month field in the database.
	FieldLowestEarnMonth = "lowest_earn_month"
	// FieldHighestEarnMonth holds the string denoting the highest_earn_month field in the database.
	FieldHighestEarnMonth = "highest_earn_month"
	// FieldTroubleDeductAmount holds the string denoting the trouble_deduct_amount field in the database.
	FieldTroubleDeductAmount = "trouble_deduct_amount"
	// FieldWithdrawRetainAmount holds the string denoting the withdraw_retain_amount field in the database.
	FieldWithdrawRetainAmount = "withdraw_retain_amount"
	// EdgeDeviceGpuMissions holds the string denoting the device_gpu_missions edge name in mutations.
	EdgeDeviceGpuMissions = "device_gpu_missions"
	// EdgePrices holds the string denoting the prices edge name in mutations.
	EdgePrices = "prices"
	// Table holds the table name of the gpu in the database.
	Table = "gpus"
	// DeviceGpuMissionsTable is the table that holds the device_gpu_missions relation/edge.
	DeviceGpuMissionsTable = "device_gpu_missions"
	// DeviceGpuMissionsInverseTable is the table name for the DeviceGpuMission entity.
	// It exists in this package in order to avoid circular dependency with the "devicegpumission" package.
	DeviceGpuMissionsInverseTable = "device_gpu_missions"
	// DeviceGpuMissionsColumn is the table column denoting the device_gpu_missions relation/edge.
	DeviceGpuMissionsColumn = "gpu_id"
	// PricesTable is the table that holds the prices relation/edge.
	PricesTable = "prices"
	// PricesInverseTable is the table name for the Price entity.
	// It exists in this package in order to avoid circular dependency with the "price" package.
	PricesInverseTable = "prices"
	// PricesColumn is the table column denoting the prices relation/edge.
	PricesColumn = "gpu_id"
)

// Columns holds all SQL columns for gpu fields.
var Columns = []string{
	FieldID,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldVersion,
	FieldPower,
	FieldVideoMemory,
	FieldCPU,
	FieldMemory,
	FieldLowestEarnMonth,
	FieldHighestEarnMonth,
	FieldTroubleDeductAmount,
	FieldWithdrawRetainAmount,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedBy holds the default value on creation for the "created_by" field.
	DefaultCreatedBy int64
	// DefaultUpdatedBy holds the default value on creation for the "updated_by" field.
	DefaultUpdatedBy int64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt time.Time
	// DefaultPower holds the default value on creation for the "power" field.
	DefaultPower int
	// DefaultVideoMemory holds the default value on creation for the "video_memory" field.
	DefaultVideoMemory int
	// DefaultCPU holds the default value on creation for the "cpu" field.
	DefaultCPU int
	// DefaultMemory holds the default value on creation for the "memory" field.
	DefaultMemory int
	// DefaultLowestEarnMonth holds the default value on creation for the "lowest_earn_month" field.
	DefaultLowestEarnMonth int64
	// DefaultHighestEarnMonth holds the default value on creation for the "highest_earn_month" field.
	DefaultHighestEarnMonth int64
	// DefaultTroubleDeductAmount holds the default value on creation for the "trouble_deduct_amount" field.
	DefaultTroubleDeductAmount int64
	// DefaultWithdrawRetainAmount holds the default value on creation for the "withdraw_retain_amount" field.
	DefaultWithdrawRetainAmount int64
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
)

const DefaultVersion enums.GpuVersion = "RTX2060"

// VersionValidator is a validator for the "version" field enum values. It is called by the builders before save.
func VersionValidator(v enums.GpuVersion) error {
	switch v {
	case "unknown", "RTX2060", "RTX2060Ti", "RTX2070", "RTX2070Ti", "RTX2080", "RTX2080Ti", "RTX3060", "RTX3060Ti", "RTX3070", "RTX3070Ti", "RTX3080", "RTX3080Ti", "RTX3090", "RTX3090Ti", "RTX4060", "RTX4060Ti", "RTX4070", "RTX4070Ti", "RTX4080", "RTX4090", "A800", "A100", "V100", "ComputilityKing-I", "Ascend910ProB", "P40":
		return nil
	default:
		return fmt.Errorf("gpu: invalid enum value for version field: %q", v)
	}
}

// OrderOption defines the ordering options for the Gpu queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByPower orders the results by the power field.
func ByPower(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPower, opts...).ToFunc()
}

// ByVideoMemory orders the results by the video_memory field.
func ByVideoMemory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVideoMemory, opts...).ToFunc()
}

// ByCPU orders the results by the cpu field.
func ByCPU(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCPU, opts...).ToFunc()
}

// ByMemory orders the results by the memory field.
func ByMemory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemory, opts...).ToFunc()
}

// ByLowestEarnMonth orders the results by the lowest_earn_month field.
func ByLowestEarnMonth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLowestEarnMonth, opts...).ToFunc()
}

// ByHighestEarnMonth orders the results by the highest_earn_month field.
func ByHighestEarnMonth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHighestEarnMonth, opts...).ToFunc()
}

// ByTroubleDeductAmount orders the results by the trouble_deduct_amount field.
func ByTroubleDeductAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTroubleDeductAmount, opts...).ToFunc()
}

// ByWithdrawRetainAmount orders the results by the withdraw_retain_amount field.
func ByWithdrawRetainAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWithdrawRetainAmount, opts...).ToFunc()
}

// ByDeviceGpuMissionsCount orders the results by device_gpu_missions count.
func ByDeviceGpuMissionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeviceGpuMissionsStep(), opts...)
	}
}

// ByDeviceGpuMissions orders the results by device_gpu_missions terms.
func ByDeviceGpuMissions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeviceGpuMissionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPricesCount orders the results by prices count.
func ByPricesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPricesStep(), opts...)
	}
}

// ByPrices orders the results by prices terms.
func ByPrices(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPricesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDeviceGpuMissionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeviceGpuMissionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DeviceGpuMissionsTable, DeviceGpuMissionsColumn),
	)
}
func newPricesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PricesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PricesTable, PricesColumn),
	)
}
