// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missioncategory"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// MissionCategoryUpdate is the builder for updating MissionCategory entities.
type MissionCategoryUpdate struct {
	config
	hooks     []Hook
	mutation  *MissionCategoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MissionCategoryUpdate builder.
func (mcu *MissionCategoryUpdate) Where(ps ...predicate.MissionCategory) *MissionCategoryUpdate {
	mcu.mutation.Where(ps...)
	return mcu
}

// SetCreatedBy sets the "created_by" field.
func (mcu *MissionCategoryUpdate) SetCreatedBy(i int64) *MissionCategoryUpdate {
	mcu.mutation.ResetCreatedBy()
	mcu.mutation.SetCreatedBy(i)
	return mcu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mcu *MissionCategoryUpdate) SetNillableCreatedBy(i *int64) *MissionCategoryUpdate {
	if i != nil {
		mcu.SetCreatedBy(*i)
	}
	return mcu
}

// AddCreatedBy adds i to the "created_by" field.
func (mcu *MissionCategoryUpdate) AddCreatedBy(i int64) *MissionCategoryUpdate {
	mcu.mutation.AddCreatedBy(i)
	return mcu
}

// SetUpdatedBy sets the "updated_by" field.
func (mcu *MissionCategoryUpdate) SetUpdatedBy(i int64) *MissionCategoryUpdate {
	mcu.mutation.ResetUpdatedBy()
	mcu.mutation.SetUpdatedBy(i)
	return mcu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mcu *MissionCategoryUpdate) SetNillableUpdatedBy(i *int64) *MissionCategoryUpdate {
	if i != nil {
		mcu.SetUpdatedBy(*i)
	}
	return mcu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (mcu *MissionCategoryUpdate) AddUpdatedBy(i int64) *MissionCategoryUpdate {
	mcu.mutation.AddUpdatedBy(i)
	return mcu
}

// SetUpdatedAt sets the "updated_at" field.
func (mcu *MissionCategoryUpdate) SetUpdatedAt(t time.Time) *MissionCategoryUpdate {
	mcu.mutation.SetUpdatedAt(t)
	return mcu
}

// SetDeletedAt sets the "deleted_at" field.
func (mcu *MissionCategoryUpdate) SetDeletedAt(t time.Time) *MissionCategoryUpdate {
	mcu.mutation.SetDeletedAt(t)
	return mcu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mcu *MissionCategoryUpdate) SetNillableDeletedAt(t *time.Time) *MissionCategoryUpdate {
	if t != nil {
		mcu.SetDeletedAt(*t)
	}
	return mcu
}

// SetCategory sets the "category" field.
func (mcu *MissionCategoryUpdate) SetCategory(s string) *MissionCategoryUpdate {
	mcu.mutation.SetCategory(s)
	return mcu
}

// SetType sets the "type" field.
func (mcu *MissionCategoryUpdate) SetType(et enums.CategoryType) *MissionCategoryUpdate {
	mcu.mutation.SetType(et)
	return mcu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mcu *MissionCategoryUpdate) SetNillableType(et *enums.CategoryType) *MissionCategoryUpdate {
	if et != nil {
		mcu.SetType(*et)
	}
	return mcu
}

// SetWeight sets the "weight" field.
func (mcu *MissionCategoryUpdate) SetWeight(i int) *MissionCategoryUpdate {
	mcu.mutation.ResetWeight()
	mcu.mutation.SetWeight(i)
	return mcu
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (mcu *MissionCategoryUpdate) SetNillableWeight(i *int) *MissionCategoryUpdate {
	if i != nil {
		mcu.SetWeight(*i)
	}
	return mcu
}

// AddWeight adds i to the "weight" field.
func (mcu *MissionCategoryUpdate) AddWeight(i int) *MissionCategoryUpdate {
	mcu.mutation.AddWeight(i)
	return mcu
}

// Mutation returns the MissionCategoryMutation object of the builder.
func (mcu *MissionCategoryUpdate) Mutation() *MissionCategoryMutation {
	return mcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mcu *MissionCategoryUpdate) Save(ctx context.Context) (int, error) {
	mcu.defaults()
	return withHooks(ctx, mcu.sqlSave, mcu.mutation, mcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mcu *MissionCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := mcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mcu *MissionCategoryUpdate) Exec(ctx context.Context) error {
	_, err := mcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcu *MissionCategoryUpdate) ExecX(ctx context.Context) {
	if err := mcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mcu *MissionCategoryUpdate) defaults() {
	if _, ok := mcu.mutation.UpdatedAt(); !ok {
		v := missioncategory.UpdateDefaultUpdatedAt()
		mcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mcu *MissionCategoryUpdate) check() error {
	if v, ok := mcu.mutation.GetType(); ok {
		if err := missioncategory.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "MissionCategory.type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mcu *MissionCategoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MissionCategoryUpdate {
	mcu.modifiers = append(mcu.modifiers, modifiers...)
	return mcu
}

func (mcu *MissionCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(missioncategory.Table, missioncategory.Columns, sqlgraph.NewFieldSpec(missioncategory.FieldID, field.TypeInt64))
	if ps := mcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mcu.mutation.CreatedBy(); ok {
		_spec.SetField(missioncategory.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mcu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(missioncategory.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mcu.mutation.UpdatedBy(); ok {
		_spec.SetField(missioncategory.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mcu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(missioncategory.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mcu.mutation.UpdatedAt(); ok {
		_spec.SetField(missioncategory.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mcu.mutation.DeletedAt(); ok {
		_spec.SetField(missioncategory.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := mcu.mutation.Category(); ok {
		_spec.SetField(missioncategory.FieldCategory, field.TypeString, value)
	}
	if value, ok := mcu.mutation.GetType(); ok {
		_spec.SetField(missioncategory.FieldType, field.TypeEnum, value)
	}
	if value, ok := mcu.mutation.Weight(); ok {
		_spec.SetField(missioncategory.FieldWeight, field.TypeInt, value)
	}
	if value, ok := mcu.mutation.AddedWeight(); ok {
		_spec.AddField(missioncategory.FieldWeight, field.TypeInt, value)
	}
	_spec.AddModifiers(mcu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{missioncategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mcu.mutation.done = true
	return n, nil
}

// MissionCategoryUpdateOne is the builder for updating a single MissionCategory entity.
type MissionCategoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MissionCategoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedBy sets the "created_by" field.
func (mcuo *MissionCategoryUpdateOne) SetCreatedBy(i int64) *MissionCategoryUpdateOne {
	mcuo.mutation.ResetCreatedBy()
	mcuo.mutation.SetCreatedBy(i)
	return mcuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mcuo *MissionCategoryUpdateOne) SetNillableCreatedBy(i *int64) *MissionCategoryUpdateOne {
	if i != nil {
		mcuo.SetCreatedBy(*i)
	}
	return mcuo
}

// AddCreatedBy adds i to the "created_by" field.
func (mcuo *MissionCategoryUpdateOne) AddCreatedBy(i int64) *MissionCategoryUpdateOne {
	mcuo.mutation.AddCreatedBy(i)
	return mcuo
}

// SetUpdatedBy sets the "updated_by" field.
func (mcuo *MissionCategoryUpdateOne) SetUpdatedBy(i int64) *MissionCategoryUpdateOne {
	mcuo.mutation.ResetUpdatedBy()
	mcuo.mutation.SetUpdatedBy(i)
	return mcuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mcuo *MissionCategoryUpdateOne) SetNillableUpdatedBy(i *int64) *MissionCategoryUpdateOne {
	if i != nil {
		mcuo.SetUpdatedBy(*i)
	}
	return mcuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (mcuo *MissionCategoryUpdateOne) AddUpdatedBy(i int64) *MissionCategoryUpdateOne {
	mcuo.mutation.AddUpdatedBy(i)
	return mcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (mcuo *MissionCategoryUpdateOne) SetUpdatedAt(t time.Time) *MissionCategoryUpdateOne {
	mcuo.mutation.SetUpdatedAt(t)
	return mcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (mcuo *MissionCategoryUpdateOne) SetDeletedAt(t time.Time) *MissionCategoryUpdateOne {
	mcuo.mutation.SetDeletedAt(t)
	return mcuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mcuo *MissionCategoryUpdateOne) SetNillableDeletedAt(t *time.Time) *MissionCategoryUpdateOne {
	if t != nil {
		mcuo.SetDeletedAt(*t)
	}
	return mcuo
}

// SetCategory sets the "category" field.
func (mcuo *MissionCategoryUpdateOne) SetCategory(s string) *MissionCategoryUpdateOne {
	mcuo.mutation.SetCategory(s)
	return mcuo
}

// SetType sets the "type" field.
func (mcuo *MissionCategoryUpdateOne) SetType(et enums.CategoryType) *MissionCategoryUpdateOne {
	mcuo.mutation.SetType(et)
	return mcuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mcuo *MissionCategoryUpdateOne) SetNillableType(et *enums.CategoryType) *MissionCategoryUpdateOne {
	if et != nil {
		mcuo.SetType(*et)
	}
	return mcuo
}

// SetWeight sets the "weight" field.
func (mcuo *MissionCategoryUpdateOne) SetWeight(i int) *MissionCategoryUpdateOne {
	mcuo.mutation.ResetWeight()
	mcuo.mutation.SetWeight(i)
	return mcuo
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (mcuo *MissionCategoryUpdateOne) SetNillableWeight(i *int) *MissionCategoryUpdateOne {
	if i != nil {
		mcuo.SetWeight(*i)
	}
	return mcuo
}

// AddWeight adds i to the "weight" field.
func (mcuo *MissionCategoryUpdateOne) AddWeight(i int) *MissionCategoryUpdateOne {
	mcuo.mutation.AddWeight(i)
	return mcuo
}

// Mutation returns the MissionCategoryMutation object of the builder.
func (mcuo *MissionCategoryUpdateOne) Mutation() *MissionCategoryMutation {
	return mcuo.mutation
}

// Where appends a list predicates to the MissionCategoryUpdate builder.
func (mcuo *MissionCategoryUpdateOne) Where(ps ...predicate.MissionCategory) *MissionCategoryUpdateOne {
	mcuo.mutation.Where(ps...)
	return mcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mcuo *MissionCategoryUpdateOne) Select(field string, fields ...string) *MissionCategoryUpdateOne {
	mcuo.fields = append([]string{field}, fields...)
	return mcuo
}

// Save executes the query and returns the updated MissionCategory entity.
func (mcuo *MissionCategoryUpdateOne) Save(ctx context.Context) (*MissionCategory, error) {
	mcuo.defaults()
	return withHooks(ctx, mcuo.sqlSave, mcuo.mutation, mcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mcuo *MissionCategoryUpdateOne) SaveX(ctx context.Context) *MissionCategory {
	node, err := mcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mcuo *MissionCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := mcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcuo *MissionCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := mcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mcuo *MissionCategoryUpdateOne) defaults() {
	if _, ok := mcuo.mutation.UpdatedAt(); !ok {
		v := missioncategory.UpdateDefaultUpdatedAt()
		mcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mcuo *MissionCategoryUpdateOne) check() error {
	if v, ok := mcuo.mutation.GetType(); ok {
		if err := missioncategory.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "MissionCategory.type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mcuo *MissionCategoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MissionCategoryUpdateOne {
	mcuo.modifiers = append(mcuo.modifiers, modifiers...)
	return mcuo
}

func (mcuo *MissionCategoryUpdateOne) sqlSave(ctx context.Context) (_node *MissionCategory, err error) {
	if err := mcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(missioncategory.Table, missioncategory.Columns, sqlgraph.NewFieldSpec(missioncategory.FieldID, field.TypeInt64))
	id, ok := mcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "MissionCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, missioncategory.FieldID)
		for _, f := range fields {
			if !missioncategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != missioncategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mcuo.mutation.CreatedBy(); ok {
		_spec.SetField(missioncategory.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mcuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(missioncategory.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mcuo.mutation.UpdatedBy(); ok {
		_spec.SetField(missioncategory.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mcuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(missioncategory.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(missioncategory.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mcuo.mutation.DeletedAt(); ok {
		_spec.SetField(missioncategory.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := mcuo.mutation.Category(); ok {
		_spec.SetField(missioncategory.FieldCategory, field.TypeString, value)
	}
	if value, ok := mcuo.mutation.GetType(); ok {
		_spec.SetField(missioncategory.FieldType, field.TypeEnum, value)
	}
	if value, ok := mcuo.mutation.Weight(); ok {
		_spec.SetField(missioncategory.FieldWeight, field.TypeInt, value)
	}
	if value, ok := mcuo.mutation.AddedWeight(); ok {
		_spec.AddField(missioncategory.FieldWeight, field.TypeInt, value)
	}
	_spec.AddModifiers(mcuo.modifiers...)
	_node = &MissionCategory{config: mcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{missioncategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mcuo.mutation.done = true
	return _node, nil
}
