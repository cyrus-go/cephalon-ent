// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/transferorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/withdrawrecord"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// WithdrawRecordUpdate is the builder for updating WithdrawRecord entities.
type WithdrawRecordUpdate struct {
	config
	hooks     []Hook
	mutation  *WithdrawRecordMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the WithdrawRecordUpdate builder.
func (wru *WithdrawRecordUpdate) Where(ps ...predicate.WithdrawRecord) *WithdrawRecordUpdate {
	wru.mutation.Where(ps...)
	return wru
}

// SetCreatedBy sets the "created_by" field.
func (wru *WithdrawRecordUpdate) SetCreatedBy(i int64) *WithdrawRecordUpdate {
	wru.mutation.ResetCreatedBy()
	wru.mutation.SetCreatedBy(i)
	return wru
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (wru *WithdrawRecordUpdate) SetNillableCreatedBy(i *int64) *WithdrawRecordUpdate {
	if i != nil {
		wru.SetCreatedBy(*i)
	}
	return wru
}

// AddCreatedBy adds i to the "created_by" field.
func (wru *WithdrawRecordUpdate) AddCreatedBy(i int64) *WithdrawRecordUpdate {
	wru.mutation.AddCreatedBy(i)
	return wru
}

// SetUpdatedBy sets the "updated_by" field.
func (wru *WithdrawRecordUpdate) SetUpdatedBy(i int64) *WithdrawRecordUpdate {
	wru.mutation.ResetUpdatedBy()
	wru.mutation.SetUpdatedBy(i)
	return wru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (wru *WithdrawRecordUpdate) SetNillableUpdatedBy(i *int64) *WithdrawRecordUpdate {
	if i != nil {
		wru.SetUpdatedBy(*i)
	}
	return wru
}

// AddUpdatedBy adds i to the "updated_by" field.
func (wru *WithdrawRecordUpdate) AddUpdatedBy(i int64) *WithdrawRecordUpdate {
	wru.mutation.AddUpdatedBy(i)
	return wru
}

// SetUpdatedAt sets the "updated_at" field.
func (wru *WithdrawRecordUpdate) SetUpdatedAt(t time.Time) *WithdrawRecordUpdate {
	wru.mutation.SetUpdatedAt(t)
	return wru
}

// SetDeletedAt sets the "deleted_at" field.
func (wru *WithdrawRecordUpdate) SetDeletedAt(t time.Time) *WithdrawRecordUpdate {
	wru.mutation.SetDeletedAt(t)
	return wru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wru *WithdrawRecordUpdate) SetNillableDeletedAt(t *time.Time) *WithdrawRecordUpdate {
	if t != nil {
		wru.SetDeletedAt(*t)
	}
	return wru
}

// SetUserID sets the "user_id" field.
func (wru *WithdrawRecordUpdate) SetUserID(i int64) *WithdrawRecordUpdate {
	wru.mutation.SetUserID(i)
	return wru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (wru *WithdrawRecordUpdate) SetNillableUserID(i *int64) *WithdrawRecordUpdate {
	if i != nil {
		wru.SetUserID(*i)
	}
	return wru
}

// SetWithdrawAccount sets the "withdraw_account" field.
func (wru *WithdrawRecordUpdate) SetWithdrawAccount(s string) *WithdrawRecordUpdate {
	wru.mutation.SetWithdrawAccount(s)
	return wru
}

// SetNillableWithdrawAccount sets the "withdraw_account" field if the given value is not nil.
func (wru *WithdrawRecordUpdate) SetNillableWithdrawAccount(s *string) *WithdrawRecordUpdate {
	if s != nil {
		wru.SetWithdrawAccount(*s)
	}
	return wru
}

// SetType sets the "type" field.
func (wru *WithdrawRecordUpdate) SetType(et enums.WithdrawType) *WithdrawRecordUpdate {
	wru.mutation.SetType(et)
	return wru
}

// SetNillableType sets the "type" field if the given value is not nil.
func (wru *WithdrawRecordUpdate) SetNillableType(et *enums.WithdrawType) *WithdrawRecordUpdate {
	if et != nil {
		wru.SetType(*et)
	}
	return wru
}

// SetAmount sets the "amount" field.
func (wru *WithdrawRecordUpdate) SetAmount(i int64) *WithdrawRecordUpdate {
	wru.mutation.ResetAmount()
	wru.mutation.SetAmount(i)
	return wru
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (wru *WithdrawRecordUpdate) SetNillableAmount(i *int64) *WithdrawRecordUpdate {
	if i != nil {
		wru.SetAmount(*i)
	}
	return wru
}

// AddAmount adds i to the "amount" field.
func (wru *WithdrawRecordUpdate) AddAmount(i int64) *WithdrawRecordUpdate {
	wru.mutation.AddAmount(i)
	return wru
}

// SetRemainAmount sets the "remain_amount" field.
func (wru *WithdrawRecordUpdate) SetRemainAmount(i int64) *WithdrawRecordUpdate {
	wru.mutation.ResetRemainAmount()
	wru.mutation.SetRemainAmount(i)
	return wru
}

// SetNillableRemainAmount sets the "remain_amount" field if the given value is not nil.
func (wru *WithdrawRecordUpdate) SetNillableRemainAmount(i *int64) *WithdrawRecordUpdate {
	if i != nil {
		wru.SetRemainAmount(*i)
	}
	return wru
}

// AddRemainAmount adds i to the "remain_amount" field.
func (wru *WithdrawRecordUpdate) AddRemainAmount(i int64) *WithdrawRecordUpdate {
	wru.mutation.AddRemainAmount(i)
	return wru
}

// SetRate sets the "rate" field.
func (wru *WithdrawRecordUpdate) SetRate(i int64) *WithdrawRecordUpdate {
	wru.mutation.ResetRate()
	wru.mutation.SetRate(i)
	return wru
}

// SetNillableRate sets the "rate" field if the given value is not nil.
func (wru *WithdrawRecordUpdate) SetNillableRate(i *int64) *WithdrawRecordUpdate {
	if i != nil {
		wru.SetRate(*i)
	}
	return wru
}

// AddRate adds i to the "rate" field.
func (wru *WithdrawRecordUpdate) AddRate(i int64) *WithdrawRecordUpdate {
	wru.mutation.AddRate(i)
	return wru
}

// SetRealAmount sets the "real_amount" field.
func (wru *WithdrawRecordUpdate) SetRealAmount(i int64) *WithdrawRecordUpdate {
	wru.mutation.ResetRealAmount()
	wru.mutation.SetRealAmount(i)
	return wru
}

// SetNillableRealAmount sets the "real_amount" field if the given value is not nil.
func (wru *WithdrawRecordUpdate) SetNillableRealAmount(i *int64) *WithdrawRecordUpdate {
	if i != nil {
		wru.SetRealAmount(*i)
	}
	return wru
}

// AddRealAmount adds i to the "real_amount" field.
func (wru *WithdrawRecordUpdate) AddRealAmount(i int64) *WithdrawRecordUpdate {
	wru.mutation.AddRealAmount(i)
	return wru
}

// SetStatus sets the "status" field.
func (wru *WithdrawRecordUpdate) SetStatus(es enums.WithdrawStatus) *WithdrawRecordUpdate {
	wru.mutation.SetStatus(es)
	return wru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wru *WithdrawRecordUpdate) SetNillableStatus(es *enums.WithdrawStatus) *WithdrawRecordUpdate {
	if es != nil {
		wru.SetStatus(*es)
	}
	return wru
}

// SetRejectReason sets the "reject_reason" field.
func (wru *WithdrawRecordUpdate) SetRejectReason(s string) *WithdrawRecordUpdate {
	wru.mutation.SetRejectReason(s)
	return wru
}

// SetNillableRejectReason sets the "reject_reason" field if the given value is not nil.
func (wru *WithdrawRecordUpdate) SetNillableRejectReason(s *string) *WithdrawRecordUpdate {
	if s != nil {
		wru.SetRejectReason(*s)
	}
	return wru
}

// SetOperateUserID sets the "operate_user_id" field.
func (wru *WithdrawRecordUpdate) SetOperateUserID(i int64) *WithdrawRecordUpdate {
	wru.mutation.SetOperateUserID(i)
	return wru
}

// SetNillableOperateUserID sets the "operate_user_id" field if the given value is not nil.
func (wru *WithdrawRecordUpdate) SetNillableOperateUserID(i *int64) *WithdrawRecordUpdate {
	if i != nil {
		wru.SetOperateUserID(*i)
	}
	return wru
}

// SetTransferOrderID sets the "transfer_order_id" field.
func (wru *WithdrawRecordUpdate) SetTransferOrderID(i int64) *WithdrawRecordUpdate {
	wru.mutation.SetTransferOrderID(i)
	return wru
}

// SetNillableTransferOrderID sets the "transfer_order_id" field if the given value is not nil.
func (wru *WithdrawRecordUpdate) SetNillableTransferOrderID(i *int64) *WithdrawRecordUpdate {
	if i != nil {
		wru.SetTransferOrderID(*i)
	}
	return wru
}

// SetUser sets the "user" edge to the User entity.
func (wru *WithdrawRecordUpdate) SetUser(u *User) *WithdrawRecordUpdate {
	return wru.SetUserID(u.ID)
}

// SetOperateUser sets the "operate_user" edge to the User entity.
func (wru *WithdrawRecordUpdate) SetOperateUser(u *User) *WithdrawRecordUpdate {
	return wru.SetOperateUserID(u.ID)
}

// SetTransferOrder sets the "transfer_order" edge to the TransferOrder entity.
func (wru *WithdrawRecordUpdate) SetTransferOrder(t *TransferOrder) *WithdrawRecordUpdate {
	return wru.SetTransferOrderID(t.ID)
}

// Mutation returns the WithdrawRecordMutation object of the builder.
func (wru *WithdrawRecordUpdate) Mutation() *WithdrawRecordMutation {
	return wru.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (wru *WithdrawRecordUpdate) ClearUser() *WithdrawRecordUpdate {
	wru.mutation.ClearUser()
	return wru
}

// ClearOperateUser clears the "operate_user" edge to the User entity.
func (wru *WithdrawRecordUpdate) ClearOperateUser() *WithdrawRecordUpdate {
	wru.mutation.ClearOperateUser()
	return wru
}

// ClearTransferOrder clears the "transfer_order" edge to the TransferOrder entity.
func (wru *WithdrawRecordUpdate) ClearTransferOrder() *WithdrawRecordUpdate {
	wru.mutation.ClearTransferOrder()
	return wru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wru *WithdrawRecordUpdate) Save(ctx context.Context) (int, error) {
	wru.defaults()
	return withHooks(ctx, wru.sqlSave, wru.mutation, wru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wru *WithdrawRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := wru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wru *WithdrawRecordUpdate) Exec(ctx context.Context) error {
	_, err := wru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wru *WithdrawRecordUpdate) ExecX(ctx context.Context) {
	if err := wru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wru *WithdrawRecordUpdate) defaults() {
	if _, ok := wru.mutation.UpdatedAt(); !ok {
		v := withdrawrecord.UpdateDefaultUpdatedAt()
		wru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wru *WithdrawRecordUpdate) check() error {
	if v, ok := wru.mutation.GetType(); ok {
		if err := withdrawrecord.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "WithdrawRecord.type": %w`, err)}
		}
	}
	if v, ok := wru.mutation.Status(); ok {
		if err := withdrawrecord.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "WithdrawRecord.status": %w`, err)}
		}
	}
	if _, ok := wru.mutation.UserID(); wru.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "WithdrawRecord.user"`)
	}
	if _, ok := wru.mutation.OperateUserID(); wru.mutation.OperateUserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "WithdrawRecord.operate_user"`)
	}
	if _, ok := wru.mutation.TransferOrderID(); wru.mutation.TransferOrderCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "WithdrawRecord.transfer_order"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wru *WithdrawRecordUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WithdrawRecordUpdate {
	wru.modifiers = append(wru.modifiers, modifiers...)
	return wru
}

func (wru *WithdrawRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(withdrawrecord.Table, withdrawrecord.Columns, sqlgraph.NewFieldSpec(withdrawrecord.FieldID, field.TypeInt64))
	if ps := wru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wru.mutation.CreatedBy(); ok {
		_spec.SetField(withdrawrecord.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := wru.mutation.AddedCreatedBy(); ok {
		_spec.AddField(withdrawrecord.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := wru.mutation.UpdatedBy(); ok {
		_spec.SetField(withdrawrecord.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := wru.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(withdrawrecord.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := wru.mutation.UpdatedAt(); ok {
		_spec.SetField(withdrawrecord.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wru.mutation.DeletedAt(); ok {
		_spec.SetField(withdrawrecord.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := wru.mutation.WithdrawAccount(); ok {
		_spec.SetField(withdrawrecord.FieldWithdrawAccount, field.TypeString, value)
	}
	if value, ok := wru.mutation.GetType(); ok {
		_spec.SetField(withdrawrecord.FieldType, field.TypeEnum, value)
	}
	if value, ok := wru.mutation.Amount(); ok {
		_spec.SetField(withdrawrecord.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := wru.mutation.AddedAmount(); ok {
		_spec.AddField(withdrawrecord.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := wru.mutation.RemainAmount(); ok {
		_spec.SetField(withdrawrecord.FieldRemainAmount, field.TypeInt64, value)
	}
	if value, ok := wru.mutation.AddedRemainAmount(); ok {
		_spec.AddField(withdrawrecord.FieldRemainAmount, field.TypeInt64, value)
	}
	if value, ok := wru.mutation.Rate(); ok {
		_spec.SetField(withdrawrecord.FieldRate, field.TypeInt64, value)
	}
	if value, ok := wru.mutation.AddedRate(); ok {
		_spec.AddField(withdrawrecord.FieldRate, field.TypeInt64, value)
	}
	if value, ok := wru.mutation.RealAmount(); ok {
		_spec.SetField(withdrawrecord.FieldRealAmount, field.TypeInt64, value)
	}
	if value, ok := wru.mutation.AddedRealAmount(); ok {
		_spec.AddField(withdrawrecord.FieldRealAmount, field.TypeInt64, value)
	}
	if value, ok := wru.mutation.Status(); ok {
		_spec.SetField(withdrawrecord.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := wru.mutation.RejectReason(); ok {
		_spec.SetField(withdrawrecord.FieldRejectReason, field.TypeString, value)
	}
	if wru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   withdrawrecord.UserTable,
			Columns: []string{withdrawrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   withdrawrecord.UserTable,
			Columns: []string{withdrawrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wru.mutation.OperateUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   withdrawrecord.OperateUserTable,
			Columns: []string{withdrawrecord.OperateUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wru.mutation.OperateUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   withdrawrecord.OperateUserTable,
			Columns: []string{withdrawrecord.OperateUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wru.mutation.TransferOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   withdrawrecord.TransferOrderTable,
			Columns: []string{withdrawrecord.TransferOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transferorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wru.mutation.TransferOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   withdrawrecord.TransferOrderTable,
			Columns: []string{withdrawrecord.TransferOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transferorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(wru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, wru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{withdrawrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wru.mutation.done = true
	return n, nil
}

// WithdrawRecordUpdateOne is the builder for updating a single WithdrawRecord entity.
type WithdrawRecordUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *WithdrawRecordMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedBy sets the "created_by" field.
func (wruo *WithdrawRecordUpdateOne) SetCreatedBy(i int64) *WithdrawRecordUpdateOne {
	wruo.mutation.ResetCreatedBy()
	wruo.mutation.SetCreatedBy(i)
	return wruo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (wruo *WithdrawRecordUpdateOne) SetNillableCreatedBy(i *int64) *WithdrawRecordUpdateOne {
	if i != nil {
		wruo.SetCreatedBy(*i)
	}
	return wruo
}

// AddCreatedBy adds i to the "created_by" field.
func (wruo *WithdrawRecordUpdateOne) AddCreatedBy(i int64) *WithdrawRecordUpdateOne {
	wruo.mutation.AddCreatedBy(i)
	return wruo
}

// SetUpdatedBy sets the "updated_by" field.
func (wruo *WithdrawRecordUpdateOne) SetUpdatedBy(i int64) *WithdrawRecordUpdateOne {
	wruo.mutation.ResetUpdatedBy()
	wruo.mutation.SetUpdatedBy(i)
	return wruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (wruo *WithdrawRecordUpdateOne) SetNillableUpdatedBy(i *int64) *WithdrawRecordUpdateOne {
	if i != nil {
		wruo.SetUpdatedBy(*i)
	}
	return wruo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (wruo *WithdrawRecordUpdateOne) AddUpdatedBy(i int64) *WithdrawRecordUpdateOne {
	wruo.mutation.AddUpdatedBy(i)
	return wruo
}

// SetUpdatedAt sets the "updated_at" field.
func (wruo *WithdrawRecordUpdateOne) SetUpdatedAt(t time.Time) *WithdrawRecordUpdateOne {
	wruo.mutation.SetUpdatedAt(t)
	return wruo
}

// SetDeletedAt sets the "deleted_at" field.
func (wruo *WithdrawRecordUpdateOne) SetDeletedAt(t time.Time) *WithdrawRecordUpdateOne {
	wruo.mutation.SetDeletedAt(t)
	return wruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wruo *WithdrawRecordUpdateOne) SetNillableDeletedAt(t *time.Time) *WithdrawRecordUpdateOne {
	if t != nil {
		wruo.SetDeletedAt(*t)
	}
	return wruo
}

// SetUserID sets the "user_id" field.
func (wruo *WithdrawRecordUpdateOne) SetUserID(i int64) *WithdrawRecordUpdateOne {
	wruo.mutation.SetUserID(i)
	return wruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (wruo *WithdrawRecordUpdateOne) SetNillableUserID(i *int64) *WithdrawRecordUpdateOne {
	if i != nil {
		wruo.SetUserID(*i)
	}
	return wruo
}

// SetWithdrawAccount sets the "withdraw_account" field.
func (wruo *WithdrawRecordUpdateOne) SetWithdrawAccount(s string) *WithdrawRecordUpdateOne {
	wruo.mutation.SetWithdrawAccount(s)
	return wruo
}

// SetNillableWithdrawAccount sets the "withdraw_account" field if the given value is not nil.
func (wruo *WithdrawRecordUpdateOne) SetNillableWithdrawAccount(s *string) *WithdrawRecordUpdateOne {
	if s != nil {
		wruo.SetWithdrawAccount(*s)
	}
	return wruo
}

// SetType sets the "type" field.
func (wruo *WithdrawRecordUpdateOne) SetType(et enums.WithdrawType) *WithdrawRecordUpdateOne {
	wruo.mutation.SetType(et)
	return wruo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (wruo *WithdrawRecordUpdateOne) SetNillableType(et *enums.WithdrawType) *WithdrawRecordUpdateOne {
	if et != nil {
		wruo.SetType(*et)
	}
	return wruo
}

// SetAmount sets the "amount" field.
func (wruo *WithdrawRecordUpdateOne) SetAmount(i int64) *WithdrawRecordUpdateOne {
	wruo.mutation.ResetAmount()
	wruo.mutation.SetAmount(i)
	return wruo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (wruo *WithdrawRecordUpdateOne) SetNillableAmount(i *int64) *WithdrawRecordUpdateOne {
	if i != nil {
		wruo.SetAmount(*i)
	}
	return wruo
}

// AddAmount adds i to the "amount" field.
func (wruo *WithdrawRecordUpdateOne) AddAmount(i int64) *WithdrawRecordUpdateOne {
	wruo.mutation.AddAmount(i)
	return wruo
}

// SetRemainAmount sets the "remain_amount" field.
func (wruo *WithdrawRecordUpdateOne) SetRemainAmount(i int64) *WithdrawRecordUpdateOne {
	wruo.mutation.ResetRemainAmount()
	wruo.mutation.SetRemainAmount(i)
	return wruo
}

// SetNillableRemainAmount sets the "remain_amount" field if the given value is not nil.
func (wruo *WithdrawRecordUpdateOne) SetNillableRemainAmount(i *int64) *WithdrawRecordUpdateOne {
	if i != nil {
		wruo.SetRemainAmount(*i)
	}
	return wruo
}

// AddRemainAmount adds i to the "remain_amount" field.
func (wruo *WithdrawRecordUpdateOne) AddRemainAmount(i int64) *WithdrawRecordUpdateOne {
	wruo.mutation.AddRemainAmount(i)
	return wruo
}

// SetRate sets the "rate" field.
func (wruo *WithdrawRecordUpdateOne) SetRate(i int64) *WithdrawRecordUpdateOne {
	wruo.mutation.ResetRate()
	wruo.mutation.SetRate(i)
	return wruo
}

// SetNillableRate sets the "rate" field if the given value is not nil.
func (wruo *WithdrawRecordUpdateOne) SetNillableRate(i *int64) *WithdrawRecordUpdateOne {
	if i != nil {
		wruo.SetRate(*i)
	}
	return wruo
}

// AddRate adds i to the "rate" field.
func (wruo *WithdrawRecordUpdateOne) AddRate(i int64) *WithdrawRecordUpdateOne {
	wruo.mutation.AddRate(i)
	return wruo
}

// SetRealAmount sets the "real_amount" field.
func (wruo *WithdrawRecordUpdateOne) SetRealAmount(i int64) *WithdrawRecordUpdateOne {
	wruo.mutation.ResetRealAmount()
	wruo.mutation.SetRealAmount(i)
	return wruo
}

// SetNillableRealAmount sets the "real_amount" field if the given value is not nil.
func (wruo *WithdrawRecordUpdateOne) SetNillableRealAmount(i *int64) *WithdrawRecordUpdateOne {
	if i != nil {
		wruo.SetRealAmount(*i)
	}
	return wruo
}

// AddRealAmount adds i to the "real_amount" field.
func (wruo *WithdrawRecordUpdateOne) AddRealAmount(i int64) *WithdrawRecordUpdateOne {
	wruo.mutation.AddRealAmount(i)
	return wruo
}

// SetStatus sets the "status" field.
func (wruo *WithdrawRecordUpdateOne) SetStatus(es enums.WithdrawStatus) *WithdrawRecordUpdateOne {
	wruo.mutation.SetStatus(es)
	return wruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wruo *WithdrawRecordUpdateOne) SetNillableStatus(es *enums.WithdrawStatus) *WithdrawRecordUpdateOne {
	if es != nil {
		wruo.SetStatus(*es)
	}
	return wruo
}

// SetRejectReason sets the "reject_reason" field.
func (wruo *WithdrawRecordUpdateOne) SetRejectReason(s string) *WithdrawRecordUpdateOne {
	wruo.mutation.SetRejectReason(s)
	return wruo
}

// SetNillableRejectReason sets the "reject_reason" field if the given value is not nil.
func (wruo *WithdrawRecordUpdateOne) SetNillableRejectReason(s *string) *WithdrawRecordUpdateOne {
	if s != nil {
		wruo.SetRejectReason(*s)
	}
	return wruo
}

// SetOperateUserID sets the "operate_user_id" field.
func (wruo *WithdrawRecordUpdateOne) SetOperateUserID(i int64) *WithdrawRecordUpdateOne {
	wruo.mutation.SetOperateUserID(i)
	return wruo
}

// SetNillableOperateUserID sets the "operate_user_id" field if the given value is not nil.
func (wruo *WithdrawRecordUpdateOne) SetNillableOperateUserID(i *int64) *WithdrawRecordUpdateOne {
	if i != nil {
		wruo.SetOperateUserID(*i)
	}
	return wruo
}

// SetTransferOrderID sets the "transfer_order_id" field.
func (wruo *WithdrawRecordUpdateOne) SetTransferOrderID(i int64) *WithdrawRecordUpdateOne {
	wruo.mutation.SetTransferOrderID(i)
	return wruo
}

// SetNillableTransferOrderID sets the "transfer_order_id" field if the given value is not nil.
func (wruo *WithdrawRecordUpdateOne) SetNillableTransferOrderID(i *int64) *WithdrawRecordUpdateOne {
	if i != nil {
		wruo.SetTransferOrderID(*i)
	}
	return wruo
}

// SetUser sets the "user" edge to the User entity.
func (wruo *WithdrawRecordUpdateOne) SetUser(u *User) *WithdrawRecordUpdateOne {
	return wruo.SetUserID(u.ID)
}

// SetOperateUser sets the "operate_user" edge to the User entity.
func (wruo *WithdrawRecordUpdateOne) SetOperateUser(u *User) *WithdrawRecordUpdateOne {
	return wruo.SetOperateUserID(u.ID)
}

// SetTransferOrder sets the "transfer_order" edge to the TransferOrder entity.
func (wruo *WithdrawRecordUpdateOne) SetTransferOrder(t *TransferOrder) *WithdrawRecordUpdateOne {
	return wruo.SetTransferOrderID(t.ID)
}

// Mutation returns the WithdrawRecordMutation object of the builder.
func (wruo *WithdrawRecordUpdateOne) Mutation() *WithdrawRecordMutation {
	return wruo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (wruo *WithdrawRecordUpdateOne) ClearUser() *WithdrawRecordUpdateOne {
	wruo.mutation.ClearUser()
	return wruo
}

// ClearOperateUser clears the "operate_user" edge to the User entity.
func (wruo *WithdrawRecordUpdateOne) ClearOperateUser() *WithdrawRecordUpdateOne {
	wruo.mutation.ClearOperateUser()
	return wruo
}

// ClearTransferOrder clears the "transfer_order" edge to the TransferOrder entity.
func (wruo *WithdrawRecordUpdateOne) ClearTransferOrder() *WithdrawRecordUpdateOne {
	wruo.mutation.ClearTransferOrder()
	return wruo
}

// Where appends a list predicates to the WithdrawRecordUpdate builder.
func (wruo *WithdrawRecordUpdateOne) Where(ps ...predicate.WithdrawRecord) *WithdrawRecordUpdateOne {
	wruo.mutation.Where(ps...)
	return wruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wruo *WithdrawRecordUpdateOne) Select(field string, fields ...string) *WithdrawRecordUpdateOne {
	wruo.fields = append([]string{field}, fields...)
	return wruo
}

// Save executes the query and returns the updated WithdrawRecord entity.
func (wruo *WithdrawRecordUpdateOne) Save(ctx context.Context) (*WithdrawRecord, error) {
	wruo.defaults()
	return withHooks(ctx, wruo.sqlSave, wruo.mutation, wruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wruo *WithdrawRecordUpdateOne) SaveX(ctx context.Context) *WithdrawRecord {
	node, err := wruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wruo *WithdrawRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := wruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wruo *WithdrawRecordUpdateOne) ExecX(ctx context.Context) {
	if err := wruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wruo *WithdrawRecordUpdateOne) defaults() {
	if _, ok := wruo.mutation.UpdatedAt(); !ok {
		v := withdrawrecord.UpdateDefaultUpdatedAt()
		wruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wruo *WithdrawRecordUpdateOne) check() error {
	if v, ok := wruo.mutation.GetType(); ok {
		if err := withdrawrecord.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "WithdrawRecord.type": %w`, err)}
		}
	}
	if v, ok := wruo.mutation.Status(); ok {
		if err := withdrawrecord.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "WithdrawRecord.status": %w`, err)}
		}
	}
	if _, ok := wruo.mutation.UserID(); wruo.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "WithdrawRecord.user"`)
	}
	if _, ok := wruo.mutation.OperateUserID(); wruo.mutation.OperateUserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "WithdrawRecord.operate_user"`)
	}
	if _, ok := wruo.mutation.TransferOrderID(); wruo.mutation.TransferOrderCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "WithdrawRecord.transfer_order"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wruo *WithdrawRecordUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WithdrawRecordUpdateOne {
	wruo.modifiers = append(wruo.modifiers, modifiers...)
	return wruo
}

func (wruo *WithdrawRecordUpdateOne) sqlSave(ctx context.Context) (_node *WithdrawRecord, err error) {
	if err := wruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(withdrawrecord.Table, withdrawrecord.Columns, sqlgraph.NewFieldSpec(withdrawrecord.FieldID, field.TypeInt64))
	id, ok := wruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "WithdrawRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, withdrawrecord.FieldID)
		for _, f := range fields {
			if !withdrawrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != withdrawrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wruo.mutation.CreatedBy(); ok {
		_spec.SetField(withdrawrecord.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := wruo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(withdrawrecord.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := wruo.mutation.UpdatedBy(); ok {
		_spec.SetField(withdrawrecord.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := wruo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(withdrawrecord.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := wruo.mutation.UpdatedAt(); ok {
		_spec.SetField(withdrawrecord.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wruo.mutation.DeletedAt(); ok {
		_spec.SetField(withdrawrecord.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := wruo.mutation.WithdrawAccount(); ok {
		_spec.SetField(withdrawrecord.FieldWithdrawAccount, field.TypeString, value)
	}
	if value, ok := wruo.mutation.GetType(); ok {
		_spec.SetField(withdrawrecord.FieldType, field.TypeEnum, value)
	}
	if value, ok := wruo.mutation.Amount(); ok {
		_spec.SetField(withdrawrecord.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := wruo.mutation.AddedAmount(); ok {
		_spec.AddField(withdrawrecord.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := wruo.mutation.RemainAmount(); ok {
		_spec.SetField(withdrawrecord.FieldRemainAmount, field.TypeInt64, value)
	}
	if value, ok := wruo.mutation.AddedRemainAmount(); ok {
		_spec.AddField(withdrawrecord.FieldRemainAmount, field.TypeInt64, value)
	}
	if value, ok := wruo.mutation.Rate(); ok {
		_spec.SetField(withdrawrecord.FieldRate, field.TypeInt64, value)
	}
	if value, ok := wruo.mutation.AddedRate(); ok {
		_spec.AddField(withdrawrecord.FieldRate, field.TypeInt64, value)
	}
	if value, ok := wruo.mutation.RealAmount(); ok {
		_spec.SetField(withdrawrecord.FieldRealAmount, field.TypeInt64, value)
	}
	if value, ok := wruo.mutation.AddedRealAmount(); ok {
		_spec.AddField(withdrawrecord.FieldRealAmount, field.TypeInt64, value)
	}
	if value, ok := wruo.mutation.Status(); ok {
		_spec.SetField(withdrawrecord.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := wruo.mutation.RejectReason(); ok {
		_spec.SetField(withdrawrecord.FieldRejectReason, field.TypeString, value)
	}
	if wruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   withdrawrecord.UserTable,
			Columns: []string{withdrawrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   withdrawrecord.UserTable,
			Columns: []string{withdrawrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wruo.mutation.OperateUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   withdrawrecord.OperateUserTable,
			Columns: []string{withdrawrecord.OperateUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wruo.mutation.OperateUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   withdrawrecord.OperateUserTable,
			Columns: []string{withdrawrecord.OperateUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wruo.mutation.TransferOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   withdrawrecord.TransferOrderTable,
			Columns: []string{withdrawrecord.TransferOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transferorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wruo.mutation.TransferOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   withdrawrecord.TransferOrderTable,
			Columns: []string{withdrawrecord.TransferOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transferorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(wruo.modifiers...)
	_node = &WithdrawRecord{config: wruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{withdrawrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wruo.mutation.done = true
	return _node, nil
}
