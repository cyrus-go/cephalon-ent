// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/device"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/earnbill"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionconsumeorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionproduceorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionproduction"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
)

// MissionProduceOrderQuery is the builder for querying MissionProduceOrder entities.
type MissionProduceOrderQuery struct {
	config
	ctx                     *QueryContext
	order                   []missionproduceorder.OrderOption
	inters                  []Interceptor
	predicates              []predicate.MissionProduceOrder
	withUser                *UserQuery
	withEarnBills           *EarnBillQuery
	withDevice              *DeviceQuery
	withMissionConsumeOrder *MissionConsumeOrderQuery
	withMissionProduction   *MissionProductionQuery
	withFKs                 bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MissionProduceOrderQuery builder.
func (mpoq *MissionProduceOrderQuery) Where(ps ...predicate.MissionProduceOrder) *MissionProduceOrderQuery {
	mpoq.predicates = append(mpoq.predicates, ps...)
	return mpoq
}

// Limit the number of records to be returned by this query.
func (mpoq *MissionProduceOrderQuery) Limit(limit int) *MissionProduceOrderQuery {
	mpoq.ctx.Limit = &limit
	return mpoq
}

// Offset to start from.
func (mpoq *MissionProduceOrderQuery) Offset(offset int) *MissionProduceOrderQuery {
	mpoq.ctx.Offset = &offset
	return mpoq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mpoq *MissionProduceOrderQuery) Unique(unique bool) *MissionProduceOrderQuery {
	mpoq.ctx.Unique = &unique
	return mpoq
}

// Order specifies how the records should be ordered.
func (mpoq *MissionProduceOrderQuery) Order(o ...missionproduceorder.OrderOption) *MissionProduceOrderQuery {
	mpoq.order = append(mpoq.order, o...)
	return mpoq
}

// QueryUser chains the current query on the "user" edge.
func (mpoq *MissionProduceOrderQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: mpoq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mpoq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mpoq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(missionproduceorder.Table, missionproduceorder.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, missionproduceorder.UserTable, missionproduceorder.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(mpoq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEarnBills chains the current query on the "earn_bills" edge.
func (mpoq *MissionProduceOrderQuery) QueryEarnBills() *EarnBillQuery {
	query := (&EarnBillClient{config: mpoq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mpoq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mpoq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(missionproduceorder.Table, missionproduceorder.FieldID, selector),
			sqlgraph.To(earnbill.Table, earnbill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, missionproduceorder.EarnBillsTable, missionproduceorder.EarnBillsColumn),
		)
		fromU = sqlgraph.SetNeighbors(mpoq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDevice chains the current query on the "device" edge.
func (mpoq *MissionProduceOrderQuery) QueryDevice() *DeviceQuery {
	query := (&DeviceClient{config: mpoq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mpoq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mpoq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(missionproduceorder.Table, missionproduceorder.FieldID, selector),
			sqlgraph.To(device.Table, device.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, missionproduceorder.DeviceTable, missionproduceorder.DeviceColumn),
		)
		fromU = sqlgraph.SetNeighbors(mpoq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMissionConsumeOrder chains the current query on the "mission_consume_order" edge.
func (mpoq *MissionProduceOrderQuery) QueryMissionConsumeOrder() *MissionConsumeOrderQuery {
	query := (&MissionConsumeOrderClient{config: mpoq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mpoq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mpoq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(missionproduceorder.Table, missionproduceorder.FieldID, selector),
			sqlgraph.To(missionconsumeorder.Table, missionconsumeorder.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, missionproduceorder.MissionConsumeOrderTable, missionproduceorder.MissionConsumeOrderColumn),
		)
		fromU = sqlgraph.SetNeighbors(mpoq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMissionProduction chains the current query on the "mission_production" edge.
func (mpoq *MissionProduceOrderQuery) QueryMissionProduction() *MissionProductionQuery {
	query := (&MissionProductionClient{config: mpoq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mpoq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mpoq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(missionproduceorder.Table, missionproduceorder.FieldID, selector),
			sqlgraph.To(missionproduction.Table, missionproduction.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, missionproduceorder.MissionProductionTable, missionproduceorder.MissionProductionColumn),
		)
		fromU = sqlgraph.SetNeighbors(mpoq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first MissionProduceOrder entity from the query.
// Returns a *NotFoundError when no MissionProduceOrder was found.
func (mpoq *MissionProduceOrderQuery) First(ctx context.Context) (*MissionProduceOrder, error) {
	nodes, err := mpoq.Limit(1).All(setContextOp(ctx, mpoq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{missionproduceorder.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mpoq *MissionProduceOrderQuery) FirstX(ctx context.Context) *MissionProduceOrder {
	node, err := mpoq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MissionProduceOrder ID from the query.
// Returns a *NotFoundError when no MissionProduceOrder ID was found.
func (mpoq *MissionProduceOrderQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = mpoq.Limit(1).IDs(setContextOp(ctx, mpoq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{missionproduceorder.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mpoq *MissionProduceOrderQuery) FirstIDX(ctx context.Context) int64 {
	id, err := mpoq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single MissionProduceOrder entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one MissionProduceOrder entity is found.
// Returns a *NotFoundError when no MissionProduceOrder entities are found.
func (mpoq *MissionProduceOrderQuery) Only(ctx context.Context) (*MissionProduceOrder, error) {
	nodes, err := mpoq.Limit(2).All(setContextOp(ctx, mpoq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{missionproduceorder.Label}
	default:
		return nil, &NotSingularError{missionproduceorder.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mpoq *MissionProduceOrderQuery) OnlyX(ctx context.Context) *MissionProduceOrder {
	node, err := mpoq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only MissionProduceOrder ID in the query.
// Returns a *NotSingularError when more than one MissionProduceOrder ID is found.
// Returns a *NotFoundError when no entities are found.
func (mpoq *MissionProduceOrderQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = mpoq.Limit(2).IDs(setContextOp(ctx, mpoq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{missionproduceorder.Label}
	default:
		err = &NotSingularError{missionproduceorder.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mpoq *MissionProduceOrderQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := mpoq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MissionProduceOrders.
func (mpoq *MissionProduceOrderQuery) All(ctx context.Context) ([]*MissionProduceOrder, error) {
	ctx = setContextOp(ctx, mpoq.ctx, "All")
	if err := mpoq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*MissionProduceOrder, *MissionProduceOrderQuery]()
	return withInterceptors[[]*MissionProduceOrder](ctx, mpoq, qr, mpoq.inters)
}

// AllX is like All, but panics if an error occurs.
func (mpoq *MissionProduceOrderQuery) AllX(ctx context.Context) []*MissionProduceOrder {
	nodes, err := mpoq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MissionProduceOrder IDs.
func (mpoq *MissionProduceOrderQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if mpoq.ctx.Unique == nil && mpoq.path != nil {
		mpoq.Unique(true)
	}
	ctx = setContextOp(ctx, mpoq.ctx, "IDs")
	if err = mpoq.Select(missionproduceorder.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mpoq *MissionProduceOrderQuery) IDsX(ctx context.Context) []int64 {
	ids, err := mpoq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mpoq *MissionProduceOrderQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, mpoq.ctx, "Count")
	if err := mpoq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, mpoq, querierCount[*MissionProduceOrderQuery](), mpoq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (mpoq *MissionProduceOrderQuery) CountX(ctx context.Context) int {
	count, err := mpoq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mpoq *MissionProduceOrderQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, mpoq.ctx, "Exist")
	switch _, err := mpoq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("cep_ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (mpoq *MissionProduceOrderQuery) ExistX(ctx context.Context) bool {
	exist, err := mpoq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MissionProduceOrderQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mpoq *MissionProduceOrderQuery) Clone() *MissionProduceOrderQuery {
	if mpoq == nil {
		return nil
	}
	return &MissionProduceOrderQuery{
		config:                  mpoq.config,
		ctx:                     mpoq.ctx.Clone(),
		order:                   append([]missionproduceorder.OrderOption{}, mpoq.order...),
		inters:                  append([]Interceptor{}, mpoq.inters...),
		predicates:              append([]predicate.MissionProduceOrder{}, mpoq.predicates...),
		withUser:                mpoq.withUser.Clone(),
		withEarnBills:           mpoq.withEarnBills.Clone(),
		withDevice:              mpoq.withDevice.Clone(),
		withMissionConsumeOrder: mpoq.withMissionConsumeOrder.Clone(),
		withMissionProduction:   mpoq.withMissionProduction.Clone(),
		// clone intermediate query.
		sql:  mpoq.sql.Clone(),
		path: mpoq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (mpoq *MissionProduceOrderQuery) WithUser(opts ...func(*UserQuery)) *MissionProduceOrderQuery {
	query := (&UserClient{config: mpoq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mpoq.withUser = query
	return mpoq
}

// WithEarnBills tells the query-builder to eager-load the nodes that are connected to
// the "earn_bills" edge. The optional arguments are used to configure the query builder of the edge.
func (mpoq *MissionProduceOrderQuery) WithEarnBills(opts ...func(*EarnBillQuery)) *MissionProduceOrderQuery {
	query := (&EarnBillClient{config: mpoq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mpoq.withEarnBills = query
	return mpoq
}

// WithDevice tells the query-builder to eager-load the nodes that are connected to
// the "device" edge. The optional arguments are used to configure the query builder of the edge.
func (mpoq *MissionProduceOrderQuery) WithDevice(opts ...func(*DeviceQuery)) *MissionProduceOrderQuery {
	query := (&DeviceClient{config: mpoq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mpoq.withDevice = query
	return mpoq
}

// WithMissionConsumeOrder tells the query-builder to eager-load the nodes that are connected to
// the "mission_consume_order" edge. The optional arguments are used to configure the query builder of the edge.
func (mpoq *MissionProduceOrderQuery) WithMissionConsumeOrder(opts ...func(*MissionConsumeOrderQuery)) *MissionProduceOrderQuery {
	query := (&MissionConsumeOrderClient{config: mpoq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mpoq.withMissionConsumeOrder = query
	return mpoq
}

// WithMissionProduction tells the query-builder to eager-load the nodes that are connected to
// the "mission_production" edge. The optional arguments are used to configure the query builder of the edge.
func (mpoq *MissionProduceOrderQuery) WithMissionProduction(opts ...func(*MissionProductionQuery)) *MissionProduceOrderQuery {
	query := (&MissionProductionClient{config: mpoq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mpoq.withMissionProduction = query
	return mpoq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MissionProduceOrder.Query().
//		GroupBy(missionproduceorder.FieldCreatedBy).
//		Aggregate(cep_ent.Count()).
//		Scan(ctx, &v)
func (mpoq *MissionProduceOrderQuery) GroupBy(field string, fields ...string) *MissionProduceOrderGroupBy {
	mpoq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &MissionProduceOrderGroupBy{build: mpoq}
	grbuild.flds = &mpoq.ctx.Fields
	grbuild.label = missionproduceorder.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by"`
//	}
//
//	client.MissionProduceOrder.Query().
//		Select(missionproduceorder.FieldCreatedBy).
//		Scan(ctx, &v)
func (mpoq *MissionProduceOrderQuery) Select(fields ...string) *MissionProduceOrderSelect {
	mpoq.ctx.Fields = append(mpoq.ctx.Fields, fields...)
	sbuild := &MissionProduceOrderSelect{MissionProduceOrderQuery: mpoq}
	sbuild.label = missionproduceorder.Label
	sbuild.flds, sbuild.scan = &mpoq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a MissionProduceOrderSelect configured with the given aggregations.
func (mpoq *MissionProduceOrderQuery) Aggregate(fns ...AggregateFunc) *MissionProduceOrderSelect {
	return mpoq.Select().Aggregate(fns...)
}

func (mpoq *MissionProduceOrderQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range mpoq.inters {
		if inter == nil {
			return fmt.Errorf("cep_ent: uninitialized interceptor (forgotten import cep_ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, mpoq); err != nil {
				return err
			}
		}
	}
	for _, f := range mpoq.ctx.Fields {
		if !missionproduceorder.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
		}
	}
	if mpoq.path != nil {
		prev, err := mpoq.path(ctx)
		if err != nil {
			return err
		}
		mpoq.sql = prev
	}
	return nil
}

func (mpoq *MissionProduceOrderQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*MissionProduceOrder, error) {
	var (
		nodes       = []*MissionProduceOrder{}
		withFKs     = mpoq.withFKs
		_spec       = mpoq.querySpec()
		loadedTypes = [5]bool{
			mpoq.withUser != nil,
			mpoq.withEarnBills != nil,
			mpoq.withDevice != nil,
			mpoq.withMissionConsumeOrder != nil,
			mpoq.withMissionProduction != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, missionproduceorder.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*MissionProduceOrder).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &MissionProduceOrder{config: mpoq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, mpoq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := mpoq.withUser; query != nil {
		if err := mpoq.loadUser(ctx, query, nodes, nil,
			func(n *MissionProduceOrder, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := mpoq.withEarnBills; query != nil {
		if err := mpoq.loadEarnBills(ctx, query, nodes,
			func(n *MissionProduceOrder) { n.Edges.EarnBills = []*EarnBill{} },
			func(n *MissionProduceOrder, e *EarnBill) { n.Edges.EarnBills = append(n.Edges.EarnBills, e) }); err != nil {
			return nil, err
		}
	}
	if query := mpoq.withDevice; query != nil {
		if err := mpoq.loadDevice(ctx, query, nodes, nil,
			func(n *MissionProduceOrder, e *Device) { n.Edges.Device = e }); err != nil {
			return nil, err
		}
	}
	if query := mpoq.withMissionConsumeOrder; query != nil {
		if err := mpoq.loadMissionConsumeOrder(ctx, query, nodes, nil,
			func(n *MissionProduceOrder, e *MissionConsumeOrder) { n.Edges.MissionConsumeOrder = e }); err != nil {
			return nil, err
		}
	}
	if query := mpoq.withMissionProduction; query != nil {
		if err := mpoq.loadMissionProduction(ctx, query, nodes, nil,
			func(n *MissionProduceOrder, e *MissionProduction) { n.Edges.MissionProduction = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (mpoq *MissionProduceOrderQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*MissionProduceOrder, init func(*MissionProduceOrder), assign func(*MissionProduceOrder, *User)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*MissionProduceOrder)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (mpoq *MissionProduceOrderQuery) loadEarnBills(ctx context.Context, query *EarnBillQuery, nodes []*MissionProduceOrder, init func(*MissionProduceOrder), assign func(*MissionProduceOrder, *EarnBill)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*MissionProduceOrder)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(earnbill.FieldReasonID)
	}
	query.Where(predicate.EarnBill(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(missionproduceorder.EarnBillsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ReasonID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "reason_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (mpoq *MissionProduceOrderQuery) loadDevice(ctx context.Context, query *DeviceQuery, nodes []*MissionProduceOrder, init func(*MissionProduceOrder), assign func(*MissionProduceOrder, *Device)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*MissionProduceOrder)
	for i := range nodes {
		fk := nodes[i].DeviceID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(device.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "device_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (mpoq *MissionProduceOrderQuery) loadMissionConsumeOrder(ctx context.Context, query *MissionConsumeOrderQuery, nodes []*MissionProduceOrder, init func(*MissionProduceOrder), assign func(*MissionProduceOrder, *MissionConsumeOrder)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*MissionProduceOrder)
	for i := range nodes {
		fk := nodes[i].MissionConsumeOrderID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(missionconsumeorder.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "mission_consume_order_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (mpoq *MissionProduceOrderQuery) loadMissionProduction(ctx context.Context, query *MissionProductionQuery, nodes []*MissionProduceOrder, init func(*MissionProduceOrder), assign func(*MissionProduceOrder, *MissionProduction)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*MissionProduceOrder)
	for i := range nodes {
		if nodes[i].MissionProductionID == nil {
			continue
		}
		fk := *nodes[i].MissionProductionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(missionproduction.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "mission_production_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (mpoq *MissionProduceOrderQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mpoq.querySpec()
	_spec.Node.Columns = mpoq.ctx.Fields
	if len(mpoq.ctx.Fields) > 0 {
		_spec.Unique = mpoq.ctx.Unique != nil && *mpoq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, mpoq.driver, _spec)
}

func (mpoq *MissionProduceOrderQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(missionproduceorder.Table, missionproduceorder.Columns, sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64))
	_spec.From = mpoq.sql
	if unique := mpoq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if mpoq.path != nil {
		_spec.Unique = true
	}
	if fields := mpoq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, missionproduceorder.FieldID)
		for i := range fields {
			if fields[i] != missionproduceorder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if mpoq.withUser != nil {
			_spec.Node.AddColumnOnce(missionproduceorder.FieldUserID)
		}
		if mpoq.withDevice != nil {
			_spec.Node.AddColumnOnce(missionproduceorder.FieldDeviceID)
		}
		if mpoq.withMissionConsumeOrder != nil {
			_spec.Node.AddColumnOnce(missionproduceorder.FieldMissionConsumeOrderID)
		}
		if mpoq.withMissionProduction != nil {
			_spec.Node.AddColumnOnce(missionproduceorder.FieldMissionProductionID)
		}
	}
	if ps := mpoq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mpoq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mpoq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mpoq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mpoq *MissionProduceOrderQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mpoq.driver.Dialect())
	t1 := builder.Table(missionproduceorder.Table)
	columns := mpoq.ctx.Fields
	if len(columns) == 0 {
		columns = missionproduceorder.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mpoq.sql != nil {
		selector = mpoq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if mpoq.ctx.Unique != nil && *mpoq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range mpoq.predicates {
		p(selector)
	}
	for _, p := range mpoq.order {
		p(selector)
	}
	if offset := mpoq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mpoq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MissionProduceOrderGroupBy is the group-by builder for MissionProduceOrder entities.
type MissionProduceOrderGroupBy struct {
	selector
	build *MissionProduceOrderQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mpogb *MissionProduceOrderGroupBy) Aggregate(fns ...AggregateFunc) *MissionProduceOrderGroupBy {
	mpogb.fns = append(mpogb.fns, fns...)
	return mpogb
}

// Scan applies the selector query and scans the result into the given value.
func (mpogb *MissionProduceOrderGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mpogb.build.ctx, "GroupBy")
	if err := mpogb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MissionProduceOrderQuery, *MissionProduceOrderGroupBy](ctx, mpogb.build, mpogb, mpogb.build.inters, v)
}

func (mpogb *MissionProduceOrderGroupBy) sqlScan(ctx context.Context, root *MissionProduceOrderQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(mpogb.fns))
	for _, fn := range mpogb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*mpogb.flds)+len(mpogb.fns))
		for _, f := range *mpogb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*mpogb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mpogb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// MissionProduceOrderSelect is the builder for selecting fields of MissionProduceOrder entities.
type MissionProduceOrderSelect struct {
	*MissionProduceOrderQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (mpos *MissionProduceOrderSelect) Aggregate(fns ...AggregateFunc) *MissionProduceOrderSelect {
	mpos.fns = append(mpos.fns, fns...)
	return mpos
}

// Scan applies the selector query and scans the result into the given value.
func (mpos *MissionProduceOrderSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mpos.ctx, "Select")
	if err := mpos.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MissionProduceOrderQuery, *MissionProduceOrderSelect](ctx, mpos.MissionProduceOrderQuery, mpos, mpos.inters, v)
}

func (mpos *MissionProduceOrderSelect) sqlScan(ctx context.Context, root *MissionProduceOrderQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(mpos.fns))
	for _, fn := range mpos.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*mpos.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mpos.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
