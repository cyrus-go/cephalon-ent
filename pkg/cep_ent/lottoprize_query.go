// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lotto"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottoprize"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottorecord"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// LottoPrizeQuery is the builder for querying LottoPrize entities.
type LottoPrizeQuery struct {
	config
	ctx              *QueryContext
	order            []lottoprize.OrderOption
	inters           []Interceptor
	predicates       []predicate.LottoPrize
	withLotto        *LottoQuery
	withLottoRecords *LottoRecordQuery
	modifiers        []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the LottoPrizeQuery builder.
func (lpq *LottoPrizeQuery) Where(ps ...predicate.LottoPrize) *LottoPrizeQuery {
	lpq.predicates = append(lpq.predicates, ps...)
	return lpq
}

// Limit the number of records to be returned by this query.
func (lpq *LottoPrizeQuery) Limit(limit int) *LottoPrizeQuery {
	lpq.ctx.Limit = &limit
	return lpq
}

// Offset to start from.
func (lpq *LottoPrizeQuery) Offset(offset int) *LottoPrizeQuery {
	lpq.ctx.Offset = &offset
	return lpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (lpq *LottoPrizeQuery) Unique(unique bool) *LottoPrizeQuery {
	lpq.ctx.Unique = &unique
	return lpq
}

// Order specifies how the records should be ordered.
func (lpq *LottoPrizeQuery) Order(o ...lottoprize.OrderOption) *LottoPrizeQuery {
	lpq.order = append(lpq.order, o...)
	return lpq
}

// QueryLotto chains the current query on the "lotto" edge.
func (lpq *LottoPrizeQuery) QueryLotto() *LottoQuery {
	query := (&LottoClient{config: lpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lottoprize.Table, lottoprize.FieldID, selector),
			sqlgraph.To(lotto.Table, lotto.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, lottoprize.LottoTable, lottoprize.LottoColumn),
		)
		fromU = sqlgraph.SetNeighbors(lpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLottoRecords chains the current query on the "lotto_records" edge.
func (lpq *LottoPrizeQuery) QueryLottoRecords() *LottoRecordQuery {
	query := (&LottoRecordClient{config: lpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lottoprize.Table, lottoprize.FieldID, selector),
			sqlgraph.To(lottorecord.Table, lottorecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, lottoprize.LottoRecordsTable, lottoprize.LottoRecordsColumn),
		)
		fromU = sqlgraph.SetNeighbors(lpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first LottoPrize entity from the query.
// Returns a *NotFoundError when no LottoPrize was found.
func (lpq *LottoPrizeQuery) First(ctx context.Context) (*LottoPrize, error) {
	nodes, err := lpq.Limit(1).All(setContextOp(ctx, lpq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{lottoprize.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (lpq *LottoPrizeQuery) FirstX(ctx context.Context) *LottoPrize {
	node, err := lpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first LottoPrize ID from the query.
// Returns a *NotFoundError when no LottoPrize ID was found.
func (lpq *LottoPrizeQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = lpq.Limit(1).IDs(setContextOp(ctx, lpq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{lottoprize.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (lpq *LottoPrizeQuery) FirstIDX(ctx context.Context) int64 {
	id, err := lpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single LottoPrize entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one LottoPrize entity is found.
// Returns a *NotFoundError when no LottoPrize entities are found.
func (lpq *LottoPrizeQuery) Only(ctx context.Context) (*LottoPrize, error) {
	nodes, err := lpq.Limit(2).All(setContextOp(ctx, lpq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{lottoprize.Label}
	default:
		return nil, &NotSingularError{lottoprize.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (lpq *LottoPrizeQuery) OnlyX(ctx context.Context) *LottoPrize {
	node, err := lpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only LottoPrize ID in the query.
// Returns a *NotSingularError when more than one LottoPrize ID is found.
// Returns a *NotFoundError when no entities are found.
func (lpq *LottoPrizeQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = lpq.Limit(2).IDs(setContextOp(ctx, lpq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{lottoprize.Label}
	default:
		err = &NotSingularError{lottoprize.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (lpq *LottoPrizeQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := lpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of LottoPrizes.
func (lpq *LottoPrizeQuery) All(ctx context.Context) ([]*LottoPrize, error) {
	ctx = setContextOp(ctx, lpq.ctx, "All")
	if err := lpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*LottoPrize, *LottoPrizeQuery]()
	return withInterceptors[[]*LottoPrize](ctx, lpq, qr, lpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (lpq *LottoPrizeQuery) AllX(ctx context.Context) []*LottoPrize {
	nodes, err := lpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of LottoPrize IDs.
func (lpq *LottoPrizeQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if lpq.ctx.Unique == nil && lpq.path != nil {
		lpq.Unique(true)
	}
	ctx = setContextOp(ctx, lpq.ctx, "IDs")
	if err = lpq.Select(lottoprize.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (lpq *LottoPrizeQuery) IDsX(ctx context.Context) []int64 {
	ids, err := lpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (lpq *LottoPrizeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, lpq.ctx, "Count")
	if err := lpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, lpq, querierCount[*LottoPrizeQuery](), lpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (lpq *LottoPrizeQuery) CountX(ctx context.Context) int {
	count, err := lpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (lpq *LottoPrizeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, lpq.ctx, "Exist")
	switch _, err := lpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("cep_ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (lpq *LottoPrizeQuery) ExistX(ctx context.Context) bool {
	exist, err := lpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the LottoPrizeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (lpq *LottoPrizeQuery) Clone() *LottoPrizeQuery {
	if lpq == nil {
		return nil
	}
	return &LottoPrizeQuery{
		config:           lpq.config,
		ctx:              lpq.ctx.Clone(),
		order:            append([]lottoprize.OrderOption{}, lpq.order...),
		inters:           append([]Interceptor{}, lpq.inters...),
		predicates:       append([]predicate.LottoPrize{}, lpq.predicates...),
		withLotto:        lpq.withLotto.Clone(),
		withLottoRecords: lpq.withLottoRecords.Clone(),
		// clone intermediate query.
		sql:  lpq.sql.Clone(),
		path: lpq.path,
	}
}

// WithLotto tells the query-builder to eager-load the nodes that are connected to
// the "lotto" edge. The optional arguments are used to configure the query builder of the edge.
func (lpq *LottoPrizeQuery) WithLotto(opts ...func(*LottoQuery)) *LottoPrizeQuery {
	query := (&LottoClient{config: lpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lpq.withLotto = query
	return lpq
}

// WithLottoRecords tells the query-builder to eager-load the nodes that are connected to
// the "lotto_records" edge. The optional arguments are used to configure the query builder of the edge.
func (lpq *LottoPrizeQuery) WithLottoRecords(opts ...func(*LottoRecordQuery)) *LottoPrizeQuery {
	query := (&LottoRecordClient{config: lpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lpq.withLottoRecords = query
	return lpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by,string"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.LottoPrize.Query().
//		GroupBy(lottoprize.FieldCreatedBy).
//		Aggregate(cep_ent.Count()).
//		Scan(ctx, &v)
func (lpq *LottoPrizeQuery) GroupBy(field string, fields ...string) *LottoPrizeGroupBy {
	lpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &LottoPrizeGroupBy{build: lpq}
	grbuild.flds = &lpq.ctx.Fields
	grbuild.label = lottoprize.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by,string"`
//	}
//
//	client.LottoPrize.Query().
//		Select(lottoprize.FieldCreatedBy).
//		Scan(ctx, &v)
func (lpq *LottoPrizeQuery) Select(fields ...string) *LottoPrizeSelect {
	lpq.ctx.Fields = append(lpq.ctx.Fields, fields...)
	sbuild := &LottoPrizeSelect{LottoPrizeQuery: lpq}
	sbuild.label = lottoprize.Label
	sbuild.flds, sbuild.scan = &lpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a LottoPrizeSelect configured with the given aggregations.
func (lpq *LottoPrizeQuery) Aggregate(fns ...AggregateFunc) *LottoPrizeSelect {
	return lpq.Select().Aggregate(fns...)
}

func (lpq *LottoPrizeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range lpq.inters {
		if inter == nil {
			return fmt.Errorf("cep_ent: uninitialized interceptor (forgotten import cep_ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, lpq); err != nil {
				return err
			}
		}
	}
	for _, f := range lpq.ctx.Fields {
		if !lottoprize.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
		}
	}
	if lpq.path != nil {
		prev, err := lpq.path(ctx)
		if err != nil {
			return err
		}
		lpq.sql = prev
	}
	return nil
}

func (lpq *LottoPrizeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*LottoPrize, error) {
	var (
		nodes       = []*LottoPrize{}
		_spec       = lpq.querySpec()
		loadedTypes = [2]bool{
			lpq.withLotto != nil,
			lpq.withLottoRecords != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*LottoPrize).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &LottoPrize{config: lpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(lpq.modifiers) > 0 {
		_spec.Modifiers = lpq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, lpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := lpq.withLotto; query != nil {
		if err := lpq.loadLotto(ctx, query, nodes, nil,
			func(n *LottoPrize, e *Lotto) { n.Edges.Lotto = e }); err != nil {
			return nil, err
		}
	}
	if query := lpq.withLottoRecords; query != nil {
		if err := lpq.loadLottoRecords(ctx, query, nodes,
			func(n *LottoPrize) { n.Edges.LottoRecords = []*LottoRecord{} },
			func(n *LottoPrize, e *LottoRecord) { n.Edges.LottoRecords = append(n.Edges.LottoRecords, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (lpq *LottoPrizeQuery) loadLotto(ctx context.Context, query *LottoQuery, nodes []*LottoPrize, init func(*LottoPrize), assign func(*LottoPrize, *Lotto)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*LottoPrize)
	for i := range nodes {
		fk := nodes[i].LottoID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(lotto.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "lotto_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (lpq *LottoPrizeQuery) loadLottoRecords(ctx context.Context, query *LottoRecordQuery, nodes []*LottoPrize, init func(*LottoPrize), assign func(*LottoPrize, *LottoRecord)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*LottoPrize)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(lottorecord.FieldLottoPrizeID)
	}
	query.Where(predicate.LottoRecord(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(lottoprize.LottoRecordsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.LottoPrizeID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "lotto_prize_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (lpq *LottoPrizeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := lpq.querySpec()
	if len(lpq.modifiers) > 0 {
		_spec.Modifiers = lpq.modifiers
	}
	_spec.Node.Columns = lpq.ctx.Fields
	if len(lpq.ctx.Fields) > 0 {
		_spec.Unique = lpq.ctx.Unique != nil && *lpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, lpq.driver, _spec)
}

func (lpq *LottoPrizeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(lottoprize.Table, lottoprize.Columns, sqlgraph.NewFieldSpec(lottoprize.FieldID, field.TypeInt64))
	_spec.From = lpq.sql
	if unique := lpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if lpq.path != nil {
		_spec.Unique = true
	}
	if fields := lpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lottoprize.FieldID)
		for i := range fields {
			if fields[i] != lottoprize.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if lpq.withLotto != nil {
			_spec.Node.AddColumnOnce(lottoprize.FieldLottoID)
		}
	}
	if ps := lpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := lpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := lpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := lpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (lpq *LottoPrizeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(lpq.driver.Dialect())
	t1 := builder.Table(lottoprize.Table)
	columns := lpq.ctx.Fields
	if len(columns) == 0 {
		columns = lottoprize.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if lpq.sql != nil {
		selector = lpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if lpq.ctx.Unique != nil && *lpq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range lpq.modifiers {
		m(selector)
	}
	for _, p := range lpq.predicates {
		p(selector)
	}
	for _, p := range lpq.order {
		p(selector)
	}
	if offset := lpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := lpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (lpq *LottoPrizeQuery) Modify(modifiers ...func(s *sql.Selector)) *LottoPrizeSelect {
	lpq.modifiers = append(lpq.modifiers, modifiers...)
	return lpq.Select()
}

// LottoPrizeGroupBy is the group-by builder for LottoPrize entities.
type LottoPrizeGroupBy struct {
	selector
	build *LottoPrizeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (lpgb *LottoPrizeGroupBy) Aggregate(fns ...AggregateFunc) *LottoPrizeGroupBy {
	lpgb.fns = append(lpgb.fns, fns...)
	return lpgb
}

// Scan applies the selector query and scans the result into the given value.
func (lpgb *LottoPrizeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lpgb.build.ctx, "GroupBy")
	if err := lpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LottoPrizeQuery, *LottoPrizeGroupBy](ctx, lpgb.build, lpgb, lpgb.build.inters, v)
}

func (lpgb *LottoPrizeGroupBy) sqlScan(ctx context.Context, root *LottoPrizeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(lpgb.fns))
	for _, fn := range lpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*lpgb.flds)+len(lpgb.fns))
		for _, f := range *lpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*lpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// LottoPrizeSelect is the builder for selecting fields of LottoPrize entities.
type LottoPrizeSelect struct {
	*LottoPrizeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (lps *LottoPrizeSelect) Aggregate(fns ...AggregateFunc) *LottoPrizeSelect {
	lps.fns = append(lps.fns, fns...)
	return lps
}

// Scan applies the selector query and scans the result into the given value.
func (lps *LottoPrizeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lps.ctx, "Select")
	if err := lps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LottoPrizeQuery, *LottoPrizeSelect](ctx, lps.LottoPrizeQuery, lps, lps.inters, v)
}

func (lps *LottoPrizeSelect) sqlScan(ctx context.Context, root *LottoPrizeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(lps.fns))
	for _, fn := range lps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*lps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (lps *LottoPrizeSelect) Modify(modifiers ...func(s *sql.Selector)) *LottoPrizeSelect {
	lps.modifiers = append(lps.modifiers, modifiers...)
	return lps
}
