// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/symbol"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/wallet"
)

// WalletUpdate is the builder for updating Wallet entities.
type WalletUpdate struct {
	config
	hooks     []Hook
	mutation  *WalletMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the WalletUpdate builder.
func (wu *WalletUpdate) Where(ps ...predicate.Wallet) *WalletUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetCreatedBy sets the "created_by" field.
func (wu *WalletUpdate) SetCreatedBy(i int64) *WalletUpdate {
	wu.mutation.ResetCreatedBy()
	wu.mutation.SetCreatedBy(i)
	return wu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (wu *WalletUpdate) SetNillableCreatedBy(i *int64) *WalletUpdate {
	if i != nil {
		wu.SetCreatedBy(*i)
	}
	return wu
}

// AddCreatedBy adds i to the "created_by" field.
func (wu *WalletUpdate) AddCreatedBy(i int64) *WalletUpdate {
	wu.mutation.AddCreatedBy(i)
	return wu
}

// SetUpdatedBy sets the "updated_by" field.
func (wu *WalletUpdate) SetUpdatedBy(i int64) *WalletUpdate {
	wu.mutation.ResetUpdatedBy()
	wu.mutation.SetUpdatedBy(i)
	return wu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (wu *WalletUpdate) SetNillableUpdatedBy(i *int64) *WalletUpdate {
	if i != nil {
		wu.SetUpdatedBy(*i)
	}
	return wu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (wu *WalletUpdate) AddUpdatedBy(i int64) *WalletUpdate {
	wu.mutation.AddUpdatedBy(i)
	return wu
}

// SetUpdatedAt sets the "updated_at" field.
func (wu *WalletUpdate) SetUpdatedAt(t time.Time) *WalletUpdate {
	wu.mutation.SetUpdatedAt(t)
	return wu
}

// SetDeletedAt sets the "deleted_at" field.
func (wu *WalletUpdate) SetDeletedAt(t time.Time) *WalletUpdate {
	wu.mutation.SetDeletedAt(t)
	return wu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wu *WalletUpdate) SetNillableDeletedAt(t *time.Time) *WalletUpdate {
	if t != nil {
		wu.SetDeletedAt(*t)
	}
	return wu
}

// SetUserID sets the "user_id" field.
func (wu *WalletUpdate) SetUserID(i int64) *WalletUpdate {
	wu.mutation.SetUserID(i)
	return wu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (wu *WalletUpdate) SetNillableUserID(i *int64) *WalletUpdate {
	if i != nil {
		wu.SetUserID(*i)
	}
	return wu
}

// SetSymbolID sets the "symbol_id" field.
func (wu *WalletUpdate) SetSymbolID(i int64) *WalletUpdate {
	wu.mutation.SetSymbolID(i)
	return wu
}

// SetNillableSymbolID sets the "symbol_id" field if the given value is not nil.
func (wu *WalletUpdate) SetNillableSymbolID(i *int64) *WalletUpdate {
	if i != nil {
		wu.SetSymbolID(*i)
	}
	return wu
}

// SetAmount sets the "amount" field.
func (wu *WalletUpdate) SetAmount(i int64) *WalletUpdate {
	wu.mutation.ResetAmount()
	wu.mutation.SetAmount(i)
	return wu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (wu *WalletUpdate) SetNillableAmount(i *int64) *WalletUpdate {
	if i != nil {
		wu.SetAmount(*i)
	}
	return wu
}

// AddAmount adds i to the "amount" field.
func (wu *WalletUpdate) AddAmount(i int64) *WalletUpdate {
	wu.mutation.AddAmount(i)
	return wu
}

// SetUser sets the "user" edge to the User entity.
func (wu *WalletUpdate) SetUser(u *User) *WalletUpdate {
	return wu.SetUserID(u.ID)
}

// SetSymbol sets the "symbol" edge to the Symbol entity.
func (wu *WalletUpdate) SetSymbol(s *Symbol) *WalletUpdate {
	return wu.SetSymbolID(s.ID)
}

// Mutation returns the WalletMutation object of the builder.
func (wu *WalletUpdate) Mutation() *WalletMutation {
	return wu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (wu *WalletUpdate) ClearUser() *WalletUpdate {
	wu.mutation.ClearUser()
	return wu
}

// ClearSymbol clears the "symbol" edge to the Symbol entity.
func (wu *WalletUpdate) ClearSymbol() *WalletUpdate {
	wu.mutation.ClearSymbol()
	return wu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WalletUpdate) Save(ctx context.Context) (int, error) {
	wu.defaults()
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WalletUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WalletUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WalletUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wu *WalletUpdate) defaults() {
	if _, ok := wu.mutation.UpdatedAt(); !ok {
		v := wallet.UpdateDefaultUpdatedAt()
		wu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wu *WalletUpdate) check() error {
	if _, ok := wu.mutation.UserID(); wu.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "Wallet.user"`)
	}
	if _, ok := wu.mutation.SymbolID(); wu.mutation.SymbolCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "Wallet.symbol"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wu *WalletUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WalletUpdate {
	wu.modifiers = append(wu.modifiers, modifiers...)
	return wu
}

func (wu *WalletUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(wallet.Table, wallet.Columns, sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt64))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.CreatedBy(); ok {
		_spec.SetField(wallet.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := wu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(wallet.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := wu.mutation.UpdatedBy(); ok {
		_spec.SetField(wallet.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := wu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(wallet.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := wu.mutation.UpdatedAt(); ok {
		_spec.SetField(wallet.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wu.mutation.DeletedAt(); ok {
		_spec.SetField(wallet.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := wu.mutation.Amount(); ok {
		_spec.SetField(wallet.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := wu.mutation.AddedAmount(); ok {
		_spec.AddField(wallet.FieldAmount, field.TypeInt64, value)
	}
	if wu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wallet.UserTable,
			Columns: []string{wallet.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wallet.UserTable,
			Columns: []string{wallet.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.SymbolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wallet.SymbolTable,
			Columns: []string{wallet.SymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.SymbolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wallet.SymbolTable,
			Columns: []string{wallet.SymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(wu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wallet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WalletUpdateOne is the builder for updating a single Wallet entity.
type WalletUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *WalletMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedBy sets the "created_by" field.
func (wuo *WalletUpdateOne) SetCreatedBy(i int64) *WalletUpdateOne {
	wuo.mutation.ResetCreatedBy()
	wuo.mutation.SetCreatedBy(i)
	return wuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (wuo *WalletUpdateOne) SetNillableCreatedBy(i *int64) *WalletUpdateOne {
	if i != nil {
		wuo.SetCreatedBy(*i)
	}
	return wuo
}

// AddCreatedBy adds i to the "created_by" field.
func (wuo *WalletUpdateOne) AddCreatedBy(i int64) *WalletUpdateOne {
	wuo.mutation.AddCreatedBy(i)
	return wuo
}

// SetUpdatedBy sets the "updated_by" field.
func (wuo *WalletUpdateOne) SetUpdatedBy(i int64) *WalletUpdateOne {
	wuo.mutation.ResetUpdatedBy()
	wuo.mutation.SetUpdatedBy(i)
	return wuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (wuo *WalletUpdateOne) SetNillableUpdatedBy(i *int64) *WalletUpdateOne {
	if i != nil {
		wuo.SetUpdatedBy(*i)
	}
	return wuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (wuo *WalletUpdateOne) AddUpdatedBy(i int64) *WalletUpdateOne {
	wuo.mutation.AddUpdatedBy(i)
	return wuo
}

// SetUpdatedAt sets the "updated_at" field.
func (wuo *WalletUpdateOne) SetUpdatedAt(t time.Time) *WalletUpdateOne {
	wuo.mutation.SetUpdatedAt(t)
	return wuo
}

// SetDeletedAt sets the "deleted_at" field.
func (wuo *WalletUpdateOne) SetDeletedAt(t time.Time) *WalletUpdateOne {
	wuo.mutation.SetDeletedAt(t)
	return wuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wuo *WalletUpdateOne) SetNillableDeletedAt(t *time.Time) *WalletUpdateOne {
	if t != nil {
		wuo.SetDeletedAt(*t)
	}
	return wuo
}

// SetUserID sets the "user_id" field.
func (wuo *WalletUpdateOne) SetUserID(i int64) *WalletUpdateOne {
	wuo.mutation.SetUserID(i)
	return wuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (wuo *WalletUpdateOne) SetNillableUserID(i *int64) *WalletUpdateOne {
	if i != nil {
		wuo.SetUserID(*i)
	}
	return wuo
}

// SetSymbolID sets the "symbol_id" field.
func (wuo *WalletUpdateOne) SetSymbolID(i int64) *WalletUpdateOne {
	wuo.mutation.SetSymbolID(i)
	return wuo
}

// SetNillableSymbolID sets the "symbol_id" field if the given value is not nil.
func (wuo *WalletUpdateOne) SetNillableSymbolID(i *int64) *WalletUpdateOne {
	if i != nil {
		wuo.SetSymbolID(*i)
	}
	return wuo
}

// SetAmount sets the "amount" field.
func (wuo *WalletUpdateOne) SetAmount(i int64) *WalletUpdateOne {
	wuo.mutation.ResetAmount()
	wuo.mutation.SetAmount(i)
	return wuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (wuo *WalletUpdateOne) SetNillableAmount(i *int64) *WalletUpdateOne {
	if i != nil {
		wuo.SetAmount(*i)
	}
	return wuo
}

// AddAmount adds i to the "amount" field.
func (wuo *WalletUpdateOne) AddAmount(i int64) *WalletUpdateOne {
	wuo.mutation.AddAmount(i)
	return wuo
}

// SetUser sets the "user" edge to the User entity.
func (wuo *WalletUpdateOne) SetUser(u *User) *WalletUpdateOne {
	return wuo.SetUserID(u.ID)
}

// SetSymbol sets the "symbol" edge to the Symbol entity.
func (wuo *WalletUpdateOne) SetSymbol(s *Symbol) *WalletUpdateOne {
	return wuo.SetSymbolID(s.ID)
}

// Mutation returns the WalletMutation object of the builder.
func (wuo *WalletUpdateOne) Mutation() *WalletMutation {
	return wuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (wuo *WalletUpdateOne) ClearUser() *WalletUpdateOne {
	wuo.mutation.ClearUser()
	return wuo
}

// ClearSymbol clears the "symbol" edge to the Symbol entity.
func (wuo *WalletUpdateOne) ClearSymbol() *WalletUpdateOne {
	wuo.mutation.ClearSymbol()
	return wuo
}

// Where appends a list predicates to the WalletUpdate builder.
func (wuo *WalletUpdateOne) Where(ps ...predicate.Wallet) *WalletUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WalletUpdateOne) Select(field string, fields ...string) *WalletUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Wallet entity.
func (wuo *WalletUpdateOne) Save(ctx context.Context) (*Wallet, error) {
	wuo.defaults()
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WalletUpdateOne) SaveX(ctx context.Context) *Wallet {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WalletUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WalletUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wuo *WalletUpdateOne) defaults() {
	if _, ok := wuo.mutation.UpdatedAt(); !ok {
		v := wallet.UpdateDefaultUpdatedAt()
		wuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wuo *WalletUpdateOne) check() error {
	if _, ok := wuo.mutation.UserID(); wuo.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "Wallet.user"`)
	}
	if _, ok := wuo.mutation.SymbolID(); wuo.mutation.SymbolCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "Wallet.symbol"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wuo *WalletUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WalletUpdateOne {
	wuo.modifiers = append(wuo.modifiers, modifiers...)
	return wuo
}

func (wuo *WalletUpdateOne) sqlSave(ctx context.Context) (_node *Wallet, err error) {
	if err := wuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(wallet.Table, wallet.Columns, sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt64))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "Wallet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, wallet.FieldID)
		for _, f := range fields {
			if !wallet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != wallet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.CreatedBy(); ok {
		_spec.SetField(wallet.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := wuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(wallet.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := wuo.mutation.UpdatedBy(); ok {
		_spec.SetField(wallet.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := wuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(wallet.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := wuo.mutation.UpdatedAt(); ok {
		_spec.SetField(wallet.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wuo.mutation.DeletedAt(); ok {
		_spec.SetField(wallet.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := wuo.mutation.Amount(); ok {
		_spec.SetField(wallet.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := wuo.mutation.AddedAmount(); ok {
		_spec.AddField(wallet.FieldAmount, field.TypeInt64, value)
	}
	if wuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wallet.UserTable,
			Columns: []string{wallet.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wallet.UserTable,
			Columns: []string{wallet.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.SymbolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wallet.SymbolTable,
			Columns: []string{wallet.SymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.SymbolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wallet.SymbolTable,
			Columns: []string{wallet.SymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(wuo.modifiers...)
	_node = &Wallet{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wallet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
