// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/bill"
	"cephalon-ent/pkg/cep_ent/predicate"
	"cephalon-ent/pkg/cep_ent/user"
	"cephalon-ent/pkg/cep_ent/wallet"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WalletUpdate is the builder for updating Wallet entities.
type WalletUpdate struct {
	config
	hooks    []Hook
	mutation *WalletMutation
}

// Where appends a list predicates to the WalletUpdate builder.
func (wu *WalletUpdate) Where(ps ...predicate.Wallet) *WalletUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetCreatedBy sets the "created_by" field.
func (wu *WalletUpdate) SetCreatedBy(i int64) *WalletUpdate {
	wu.mutation.ResetCreatedBy()
	wu.mutation.SetCreatedBy(i)
	return wu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (wu *WalletUpdate) SetNillableCreatedBy(i *int64) *WalletUpdate {
	if i != nil {
		wu.SetCreatedBy(*i)
	}
	return wu
}

// AddCreatedBy adds i to the "created_by" field.
func (wu *WalletUpdate) AddCreatedBy(i int64) *WalletUpdate {
	wu.mutation.AddCreatedBy(i)
	return wu
}

// SetUpdatedBy sets the "updated_by" field.
func (wu *WalletUpdate) SetUpdatedBy(i int64) *WalletUpdate {
	wu.mutation.ResetUpdatedBy()
	wu.mutation.SetUpdatedBy(i)
	return wu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (wu *WalletUpdate) SetNillableUpdatedBy(i *int64) *WalletUpdate {
	if i != nil {
		wu.SetUpdatedBy(*i)
	}
	return wu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (wu *WalletUpdate) AddUpdatedBy(i int64) *WalletUpdate {
	wu.mutation.AddUpdatedBy(i)
	return wu
}

// SetUpdatedAt sets the "updated_at" field.
func (wu *WalletUpdate) SetUpdatedAt(t time.Time) *WalletUpdate {
	wu.mutation.SetUpdatedAt(t)
	return wu
}

// SetDeletedAt sets the "deleted_at" field.
func (wu *WalletUpdate) SetDeletedAt(t time.Time) *WalletUpdate {
	wu.mutation.SetDeletedAt(t)
	return wu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wu *WalletUpdate) SetNillableDeletedAt(t *time.Time) *WalletUpdate {
	if t != nil {
		wu.SetDeletedAt(*t)
	}
	return wu
}

// SetUserID sets the "user_id" field.
func (wu *WalletUpdate) SetUserID(i int64) *WalletUpdate {
	wu.mutation.SetUserID(i)
	return wu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (wu *WalletUpdate) SetNillableUserID(i *int64) *WalletUpdate {
	if i != nil {
		wu.SetUserID(*i)
	}
	return wu
}

// SetCep sets the "cep" field.
func (wu *WalletUpdate) SetCep(i int64) *WalletUpdate {
	wu.mutation.ResetCep()
	wu.mutation.SetCep(i)
	return wu
}

// SetNillableCep sets the "cep" field if the given value is not nil.
func (wu *WalletUpdate) SetNillableCep(i *int64) *WalletUpdate {
	if i != nil {
		wu.SetCep(*i)
	}
	return wu
}

// AddCep adds i to the "cep" field.
func (wu *WalletUpdate) AddCep(i int64) *WalletUpdate {
	wu.mutation.AddCep(i)
	return wu
}

// SetSumCep sets the "sum_cep" field.
func (wu *WalletUpdate) SetSumCep(i int64) *WalletUpdate {
	wu.mutation.ResetSumCep()
	wu.mutation.SetSumCep(i)
	return wu
}

// SetNillableSumCep sets the "sum_cep" field if the given value is not nil.
func (wu *WalletUpdate) SetNillableSumCep(i *int64) *WalletUpdate {
	if i != nil {
		wu.SetSumCep(*i)
	}
	return wu
}

// AddSumCep adds i to the "sum_cep" field.
func (wu *WalletUpdate) AddSumCep(i int64) *WalletUpdate {
	wu.mutation.AddSumCep(i)
	return wu
}

// SetUser sets the "user" edge to the User entity.
func (wu *WalletUpdate) SetUser(u *User) *WalletUpdate {
	return wu.SetUserID(u.ID)
}

// AddBillIDs adds the "bills" edge to the Bill entity by IDs.
func (wu *WalletUpdate) AddBillIDs(ids ...int64) *WalletUpdate {
	wu.mutation.AddBillIDs(ids...)
	return wu
}

// AddBills adds the "bills" edges to the Bill entity.
func (wu *WalletUpdate) AddBills(b ...*Bill) *WalletUpdate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return wu.AddBillIDs(ids...)
}

// Mutation returns the WalletMutation object of the builder.
func (wu *WalletUpdate) Mutation() *WalletMutation {
	return wu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (wu *WalletUpdate) ClearUser() *WalletUpdate {
	wu.mutation.ClearUser()
	return wu
}

// ClearBills clears all "bills" edges to the Bill entity.
func (wu *WalletUpdate) ClearBills() *WalletUpdate {
	wu.mutation.ClearBills()
	return wu
}

// RemoveBillIDs removes the "bills" edge to Bill entities by IDs.
func (wu *WalletUpdate) RemoveBillIDs(ids ...int64) *WalletUpdate {
	wu.mutation.RemoveBillIDs(ids...)
	return wu
}

// RemoveBills removes "bills" edges to Bill entities.
func (wu *WalletUpdate) RemoveBills(b ...*Bill) *WalletUpdate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return wu.RemoveBillIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WalletUpdate) Save(ctx context.Context) (int, error) {
	wu.defaults()
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WalletUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WalletUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WalletUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wu *WalletUpdate) defaults() {
	if _, ok := wu.mutation.UpdatedAt(); !ok {
		v := wallet.UpdateDefaultUpdatedAt()
		wu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wu *WalletUpdate) check() error {
	if _, ok := wu.mutation.UserID(); wu.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "Wallet.user"`)
	}
	return nil
}

func (wu *WalletUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(wallet.Table, wallet.Columns, sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt64))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.CreatedBy(); ok {
		_spec.SetField(wallet.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := wu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(wallet.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := wu.mutation.UpdatedBy(); ok {
		_spec.SetField(wallet.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := wu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(wallet.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := wu.mutation.UpdatedAt(); ok {
		_spec.SetField(wallet.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wu.mutation.DeletedAt(); ok {
		_spec.SetField(wallet.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := wu.mutation.Cep(); ok {
		_spec.SetField(wallet.FieldCep, field.TypeInt64, value)
	}
	if value, ok := wu.mutation.AddedCep(); ok {
		_spec.AddField(wallet.FieldCep, field.TypeInt64, value)
	}
	if value, ok := wu.mutation.SumCep(); ok {
		_spec.SetField(wallet.FieldSumCep, field.TypeInt64, value)
	}
	if value, ok := wu.mutation.AddedSumCep(); ok {
		_spec.AddField(wallet.FieldSumCep, field.TypeInt64, value)
	}
	if wu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   wallet.UserTable,
			Columns: []string{wallet.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   wallet.UserTable,
			Columns: []string{wallet.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wallet.BillsTable,
			Columns: []string{wallet.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedBillsIDs(); len(nodes) > 0 && !wu.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wallet.BillsTable,
			Columns: []string{wallet.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wallet.BillsTable,
			Columns: []string{wallet.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wallet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WalletUpdateOne is the builder for updating a single Wallet entity.
type WalletUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WalletMutation
}

// SetCreatedBy sets the "created_by" field.
func (wuo *WalletUpdateOne) SetCreatedBy(i int64) *WalletUpdateOne {
	wuo.mutation.ResetCreatedBy()
	wuo.mutation.SetCreatedBy(i)
	return wuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (wuo *WalletUpdateOne) SetNillableCreatedBy(i *int64) *WalletUpdateOne {
	if i != nil {
		wuo.SetCreatedBy(*i)
	}
	return wuo
}

// AddCreatedBy adds i to the "created_by" field.
func (wuo *WalletUpdateOne) AddCreatedBy(i int64) *WalletUpdateOne {
	wuo.mutation.AddCreatedBy(i)
	return wuo
}

// SetUpdatedBy sets the "updated_by" field.
func (wuo *WalletUpdateOne) SetUpdatedBy(i int64) *WalletUpdateOne {
	wuo.mutation.ResetUpdatedBy()
	wuo.mutation.SetUpdatedBy(i)
	return wuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (wuo *WalletUpdateOne) SetNillableUpdatedBy(i *int64) *WalletUpdateOne {
	if i != nil {
		wuo.SetUpdatedBy(*i)
	}
	return wuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (wuo *WalletUpdateOne) AddUpdatedBy(i int64) *WalletUpdateOne {
	wuo.mutation.AddUpdatedBy(i)
	return wuo
}

// SetUpdatedAt sets the "updated_at" field.
func (wuo *WalletUpdateOne) SetUpdatedAt(t time.Time) *WalletUpdateOne {
	wuo.mutation.SetUpdatedAt(t)
	return wuo
}

// SetDeletedAt sets the "deleted_at" field.
func (wuo *WalletUpdateOne) SetDeletedAt(t time.Time) *WalletUpdateOne {
	wuo.mutation.SetDeletedAt(t)
	return wuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wuo *WalletUpdateOne) SetNillableDeletedAt(t *time.Time) *WalletUpdateOne {
	if t != nil {
		wuo.SetDeletedAt(*t)
	}
	return wuo
}

// SetUserID sets the "user_id" field.
func (wuo *WalletUpdateOne) SetUserID(i int64) *WalletUpdateOne {
	wuo.mutation.SetUserID(i)
	return wuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (wuo *WalletUpdateOne) SetNillableUserID(i *int64) *WalletUpdateOne {
	if i != nil {
		wuo.SetUserID(*i)
	}
	return wuo
}

// SetCep sets the "cep" field.
func (wuo *WalletUpdateOne) SetCep(i int64) *WalletUpdateOne {
	wuo.mutation.ResetCep()
	wuo.mutation.SetCep(i)
	return wuo
}

// SetNillableCep sets the "cep" field if the given value is not nil.
func (wuo *WalletUpdateOne) SetNillableCep(i *int64) *WalletUpdateOne {
	if i != nil {
		wuo.SetCep(*i)
	}
	return wuo
}

// AddCep adds i to the "cep" field.
func (wuo *WalletUpdateOne) AddCep(i int64) *WalletUpdateOne {
	wuo.mutation.AddCep(i)
	return wuo
}

// SetSumCep sets the "sum_cep" field.
func (wuo *WalletUpdateOne) SetSumCep(i int64) *WalletUpdateOne {
	wuo.mutation.ResetSumCep()
	wuo.mutation.SetSumCep(i)
	return wuo
}

// SetNillableSumCep sets the "sum_cep" field if the given value is not nil.
func (wuo *WalletUpdateOne) SetNillableSumCep(i *int64) *WalletUpdateOne {
	if i != nil {
		wuo.SetSumCep(*i)
	}
	return wuo
}

// AddSumCep adds i to the "sum_cep" field.
func (wuo *WalletUpdateOne) AddSumCep(i int64) *WalletUpdateOne {
	wuo.mutation.AddSumCep(i)
	return wuo
}

// SetUser sets the "user" edge to the User entity.
func (wuo *WalletUpdateOne) SetUser(u *User) *WalletUpdateOne {
	return wuo.SetUserID(u.ID)
}

// AddBillIDs adds the "bills" edge to the Bill entity by IDs.
func (wuo *WalletUpdateOne) AddBillIDs(ids ...int64) *WalletUpdateOne {
	wuo.mutation.AddBillIDs(ids...)
	return wuo
}

// AddBills adds the "bills" edges to the Bill entity.
func (wuo *WalletUpdateOne) AddBills(b ...*Bill) *WalletUpdateOne {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return wuo.AddBillIDs(ids...)
}

// Mutation returns the WalletMutation object of the builder.
func (wuo *WalletUpdateOne) Mutation() *WalletMutation {
	return wuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (wuo *WalletUpdateOne) ClearUser() *WalletUpdateOne {
	wuo.mutation.ClearUser()
	return wuo
}

// ClearBills clears all "bills" edges to the Bill entity.
func (wuo *WalletUpdateOne) ClearBills() *WalletUpdateOne {
	wuo.mutation.ClearBills()
	return wuo
}

// RemoveBillIDs removes the "bills" edge to Bill entities by IDs.
func (wuo *WalletUpdateOne) RemoveBillIDs(ids ...int64) *WalletUpdateOne {
	wuo.mutation.RemoveBillIDs(ids...)
	return wuo
}

// RemoveBills removes "bills" edges to Bill entities.
func (wuo *WalletUpdateOne) RemoveBills(b ...*Bill) *WalletUpdateOne {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return wuo.RemoveBillIDs(ids...)
}

// Where appends a list predicates to the WalletUpdate builder.
func (wuo *WalletUpdateOne) Where(ps ...predicate.Wallet) *WalletUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WalletUpdateOne) Select(field string, fields ...string) *WalletUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Wallet entity.
func (wuo *WalletUpdateOne) Save(ctx context.Context) (*Wallet, error) {
	wuo.defaults()
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WalletUpdateOne) SaveX(ctx context.Context) *Wallet {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WalletUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WalletUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wuo *WalletUpdateOne) defaults() {
	if _, ok := wuo.mutation.UpdatedAt(); !ok {
		v := wallet.UpdateDefaultUpdatedAt()
		wuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wuo *WalletUpdateOne) check() error {
	if _, ok := wuo.mutation.UserID(); wuo.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "Wallet.user"`)
	}
	return nil
}

func (wuo *WalletUpdateOne) sqlSave(ctx context.Context) (_node *Wallet, err error) {
	if err := wuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(wallet.Table, wallet.Columns, sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt64))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "Wallet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, wallet.FieldID)
		for _, f := range fields {
			if !wallet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != wallet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.CreatedBy(); ok {
		_spec.SetField(wallet.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := wuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(wallet.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := wuo.mutation.UpdatedBy(); ok {
		_spec.SetField(wallet.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := wuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(wallet.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := wuo.mutation.UpdatedAt(); ok {
		_spec.SetField(wallet.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wuo.mutation.DeletedAt(); ok {
		_spec.SetField(wallet.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := wuo.mutation.Cep(); ok {
		_spec.SetField(wallet.FieldCep, field.TypeInt64, value)
	}
	if value, ok := wuo.mutation.AddedCep(); ok {
		_spec.AddField(wallet.FieldCep, field.TypeInt64, value)
	}
	if value, ok := wuo.mutation.SumCep(); ok {
		_spec.SetField(wallet.FieldSumCep, field.TypeInt64, value)
	}
	if value, ok := wuo.mutation.AddedSumCep(); ok {
		_spec.AddField(wallet.FieldSumCep, field.TypeInt64, value)
	}
	if wuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   wallet.UserTable,
			Columns: []string{wallet.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   wallet.UserTable,
			Columns: []string{wallet.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wallet.BillsTable,
			Columns: []string{wallet.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedBillsIDs(); len(nodes) > 0 && !wuo.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wallet.BillsTable,
			Columns: []string{wallet.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wallet.BillsTable,
			Columns: []string{wallet.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Wallet{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wallet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
