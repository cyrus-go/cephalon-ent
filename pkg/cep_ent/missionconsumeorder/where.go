// Code generated by ent, DO NOT EDIT.

package missionconsumeorder

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldLTE(FieldID, id))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldDeletedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldUserID, v))
}

// MissionID applies equality check predicate on the "mission_id" field. It's identical to MissionIDEQ.
func MissionID(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldMissionID, v))
}

// PureCep applies equality check predicate on the "pure_cep" field. It's identical to PureCepEQ.
func PureCep(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldPureCep, v))
}

// GiftCep applies equality check predicate on the "gift_cep" field. It's identical to GiftCepEQ.
func GiftCep(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldGiftCep, v))
}

// IsTime applies equality check predicate on the "is_time" field. It's identical to IsTimeEQ.
func IsTime(v bool) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldIsTime, v))
}

// SerialNumber applies equality check predicate on the "serial_number" field. It's identical to SerialNumberEQ.
func SerialNumber(v string) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldSerialNumber, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldStartedAt, v))
}

// FinishedAt applies equality check predicate on the "finished_at" field. It's identical to FinishedAtEQ.
func FinishedAt(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldFinishedAt, v))
}

// MissionBatchID applies equality check predicate on the "mission_batch_id" field. It's identical to MissionBatchIDEQ.
func MissionBatchID(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldMissionBatchID, v))
}

// MissionBatchNumber applies equality check predicate on the "mission_batch_number" field. It's identical to MissionBatchNumberEQ.
func MissionBatchNumber(v string) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldMissionBatchNumber, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldLTE(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldLTE(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldLTE(FieldDeletedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldNotIn(FieldUserID, vs...))
}

// MissionIDEQ applies the EQ predicate on the "mission_id" field.
func MissionIDEQ(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldMissionID, v))
}

// MissionIDNEQ applies the NEQ predicate on the "mission_id" field.
func MissionIDNEQ(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldNEQ(FieldMissionID, v))
}

// MissionIDIn applies the In predicate on the "mission_id" field.
func MissionIDIn(vs ...int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldIn(FieldMissionID, vs...))
}

// MissionIDNotIn applies the NotIn predicate on the "mission_id" field.
func MissionIDNotIn(vs ...int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldNotIn(FieldMissionID, vs...))
}

// MissionIDGT applies the GT predicate on the "mission_id" field.
func MissionIDGT(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldGT(FieldMissionID, v))
}

// MissionIDGTE applies the GTE predicate on the "mission_id" field.
func MissionIDGTE(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldGTE(FieldMissionID, v))
}

// MissionIDLT applies the LT predicate on the "mission_id" field.
func MissionIDLT(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldLT(FieldMissionID, v))
}

// MissionIDLTE applies the LTE predicate on the "mission_id" field.
func MissionIDLTE(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldLTE(FieldMissionID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v enums.MissionOrderStatus) predicate.MissionConsumeOrder {
	vc := v
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v enums.MissionOrderStatus) predicate.MissionConsumeOrder {
	vc := v
	return predicate.MissionConsumeOrder(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...enums.MissionOrderStatus) predicate.MissionConsumeOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MissionConsumeOrder(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...enums.MissionOrderStatus) predicate.MissionConsumeOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MissionConsumeOrder(sql.FieldNotIn(FieldStatus, v...))
}

// PureCepEQ applies the EQ predicate on the "pure_cep" field.
func PureCepEQ(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldPureCep, v))
}

// PureCepNEQ applies the NEQ predicate on the "pure_cep" field.
func PureCepNEQ(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldNEQ(FieldPureCep, v))
}

// PureCepIn applies the In predicate on the "pure_cep" field.
func PureCepIn(vs ...int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldIn(FieldPureCep, vs...))
}

// PureCepNotIn applies the NotIn predicate on the "pure_cep" field.
func PureCepNotIn(vs ...int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldNotIn(FieldPureCep, vs...))
}

// PureCepGT applies the GT predicate on the "pure_cep" field.
func PureCepGT(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldGT(FieldPureCep, v))
}

// PureCepGTE applies the GTE predicate on the "pure_cep" field.
func PureCepGTE(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldGTE(FieldPureCep, v))
}

// PureCepLT applies the LT predicate on the "pure_cep" field.
func PureCepLT(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldLT(FieldPureCep, v))
}

// PureCepLTE applies the LTE predicate on the "pure_cep" field.
func PureCepLTE(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldLTE(FieldPureCep, v))
}

// GiftCepEQ applies the EQ predicate on the "gift_cep" field.
func GiftCepEQ(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldGiftCep, v))
}

// GiftCepNEQ applies the NEQ predicate on the "gift_cep" field.
func GiftCepNEQ(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldNEQ(FieldGiftCep, v))
}

// GiftCepIn applies the In predicate on the "gift_cep" field.
func GiftCepIn(vs ...int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldIn(FieldGiftCep, vs...))
}

// GiftCepNotIn applies the NotIn predicate on the "gift_cep" field.
func GiftCepNotIn(vs ...int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldNotIn(FieldGiftCep, vs...))
}

// GiftCepGT applies the GT predicate on the "gift_cep" field.
func GiftCepGT(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldGT(FieldGiftCep, v))
}

// GiftCepGTE applies the GTE predicate on the "gift_cep" field.
func GiftCepGTE(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldGTE(FieldGiftCep, v))
}

// GiftCepLT applies the LT predicate on the "gift_cep" field.
func GiftCepLT(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldLT(FieldGiftCep, v))
}

// GiftCepLTE applies the LTE predicate on the "gift_cep" field.
func GiftCepLTE(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldLTE(FieldGiftCep, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v enums.MissionType) predicate.MissionConsumeOrder {
	vc := v
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldType, vc))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v enums.MissionType) predicate.MissionConsumeOrder {
	vc := v
	return predicate.MissionConsumeOrder(sql.FieldNEQ(FieldType, vc))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...enums.MissionType) predicate.MissionConsumeOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MissionConsumeOrder(sql.FieldIn(FieldType, v...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...enums.MissionType) predicate.MissionConsumeOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MissionConsumeOrder(sql.FieldNotIn(FieldType, v...))
}

// IsTimeEQ applies the EQ predicate on the "is_time" field.
func IsTimeEQ(v bool) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldIsTime, v))
}

// IsTimeNEQ applies the NEQ predicate on the "is_time" field.
func IsTimeNEQ(v bool) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldNEQ(FieldIsTime, v))
}

// CallWayEQ applies the EQ predicate on the "call_way" field.
func CallWayEQ(v enums.MissionCallWay) predicate.MissionConsumeOrder {
	vc := v
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldCallWay, vc))
}

// CallWayNEQ applies the NEQ predicate on the "call_way" field.
func CallWayNEQ(v enums.MissionCallWay) predicate.MissionConsumeOrder {
	vc := v
	return predicate.MissionConsumeOrder(sql.FieldNEQ(FieldCallWay, vc))
}

// CallWayIn applies the In predicate on the "call_way" field.
func CallWayIn(vs ...enums.MissionCallWay) predicate.MissionConsumeOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MissionConsumeOrder(sql.FieldIn(FieldCallWay, v...))
}

// CallWayNotIn applies the NotIn predicate on the "call_way" field.
func CallWayNotIn(vs ...enums.MissionCallWay) predicate.MissionConsumeOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MissionConsumeOrder(sql.FieldNotIn(FieldCallWay, v...))
}

// SerialNumberEQ applies the EQ predicate on the "serial_number" field.
func SerialNumberEQ(v string) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldSerialNumber, v))
}

// SerialNumberNEQ applies the NEQ predicate on the "serial_number" field.
func SerialNumberNEQ(v string) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldNEQ(FieldSerialNumber, v))
}

// SerialNumberIn applies the In predicate on the "serial_number" field.
func SerialNumberIn(vs ...string) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldIn(FieldSerialNumber, vs...))
}

// SerialNumberNotIn applies the NotIn predicate on the "serial_number" field.
func SerialNumberNotIn(vs ...string) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldNotIn(FieldSerialNumber, vs...))
}

// SerialNumberGT applies the GT predicate on the "serial_number" field.
func SerialNumberGT(v string) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldGT(FieldSerialNumber, v))
}

// SerialNumberGTE applies the GTE predicate on the "serial_number" field.
func SerialNumberGTE(v string) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldGTE(FieldSerialNumber, v))
}

// SerialNumberLT applies the LT predicate on the "serial_number" field.
func SerialNumberLT(v string) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldLT(FieldSerialNumber, v))
}

// SerialNumberLTE applies the LTE predicate on the "serial_number" field.
func SerialNumberLTE(v string) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldLTE(FieldSerialNumber, v))
}

// SerialNumberContains applies the Contains predicate on the "serial_number" field.
func SerialNumberContains(v string) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldContains(FieldSerialNumber, v))
}

// SerialNumberHasPrefix applies the HasPrefix predicate on the "serial_number" field.
func SerialNumberHasPrefix(v string) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldHasPrefix(FieldSerialNumber, v))
}

// SerialNumberHasSuffix applies the HasSuffix predicate on the "serial_number" field.
func SerialNumberHasSuffix(v string) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldHasSuffix(FieldSerialNumber, v))
}

// SerialNumberEqualFold applies the EqualFold predicate on the "serial_number" field.
func SerialNumberEqualFold(v string) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldEqualFold(FieldSerialNumber, v))
}

// SerialNumberContainsFold applies the ContainsFold predicate on the "serial_number" field.
func SerialNumberContainsFold(v string) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldContainsFold(FieldSerialNumber, v))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldLTE(FieldStartedAt, v))
}

// FinishedAtEQ applies the EQ predicate on the "finished_at" field.
func FinishedAtEQ(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldFinishedAt, v))
}

// FinishedAtNEQ applies the NEQ predicate on the "finished_at" field.
func FinishedAtNEQ(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldNEQ(FieldFinishedAt, v))
}

// FinishedAtIn applies the In predicate on the "finished_at" field.
func FinishedAtIn(vs ...time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldIn(FieldFinishedAt, vs...))
}

// FinishedAtNotIn applies the NotIn predicate on the "finished_at" field.
func FinishedAtNotIn(vs ...time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldNotIn(FieldFinishedAt, vs...))
}

// FinishedAtGT applies the GT predicate on the "finished_at" field.
func FinishedAtGT(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldGT(FieldFinishedAt, v))
}

// FinishedAtGTE applies the GTE predicate on the "finished_at" field.
func FinishedAtGTE(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldGTE(FieldFinishedAt, v))
}

// FinishedAtLT applies the LT predicate on the "finished_at" field.
func FinishedAtLT(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldLT(FieldFinishedAt, v))
}

// FinishedAtLTE applies the LTE predicate on the "finished_at" field.
func FinishedAtLTE(v time.Time) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldLTE(FieldFinishedAt, v))
}

// MissionBatchIDEQ applies the EQ predicate on the "mission_batch_id" field.
func MissionBatchIDEQ(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldMissionBatchID, v))
}

// MissionBatchIDNEQ applies the NEQ predicate on the "mission_batch_id" field.
func MissionBatchIDNEQ(v int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldNEQ(FieldMissionBatchID, v))
}

// MissionBatchIDIn applies the In predicate on the "mission_batch_id" field.
func MissionBatchIDIn(vs ...int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldIn(FieldMissionBatchID, vs...))
}

// MissionBatchIDNotIn applies the NotIn predicate on the "mission_batch_id" field.
func MissionBatchIDNotIn(vs ...int64) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldNotIn(FieldMissionBatchID, vs...))
}

// MissionBatchNumberEQ applies the EQ predicate on the "mission_batch_number" field.
func MissionBatchNumberEQ(v string) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldEQ(FieldMissionBatchNumber, v))
}

// MissionBatchNumberNEQ applies the NEQ predicate on the "mission_batch_number" field.
func MissionBatchNumberNEQ(v string) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldNEQ(FieldMissionBatchNumber, v))
}

// MissionBatchNumberIn applies the In predicate on the "mission_batch_number" field.
func MissionBatchNumberIn(vs ...string) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldIn(FieldMissionBatchNumber, vs...))
}

// MissionBatchNumberNotIn applies the NotIn predicate on the "mission_batch_number" field.
func MissionBatchNumberNotIn(vs ...string) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldNotIn(FieldMissionBatchNumber, vs...))
}

// MissionBatchNumberGT applies the GT predicate on the "mission_batch_number" field.
func MissionBatchNumberGT(v string) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldGT(FieldMissionBatchNumber, v))
}

// MissionBatchNumberGTE applies the GTE predicate on the "mission_batch_number" field.
func MissionBatchNumberGTE(v string) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldGTE(FieldMissionBatchNumber, v))
}

// MissionBatchNumberLT applies the LT predicate on the "mission_batch_number" field.
func MissionBatchNumberLT(v string) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldLT(FieldMissionBatchNumber, v))
}

// MissionBatchNumberLTE applies the LTE predicate on the "mission_batch_number" field.
func MissionBatchNumberLTE(v string) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldLTE(FieldMissionBatchNumber, v))
}

// MissionBatchNumberContains applies the Contains predicate on the "mission_batch_number" field.
func MissionBatchNumberContains(v string) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldContains(FieldMissionBatchNumber, v))
}

// MissionBatchNumberHasPrefix applies the HasPrefix predicate on the "mission_batch_number" field.
func MissionBatchNumberHasPrefix(v string) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldHasPrefix(FieldMissionBatchNumber, v))
}

// MissionBatchNumberHasSuffix applies the HasSuffix predicate on the "mission_batch_number" field.
func MissionBatchNumberHasSuffix(v string) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldHasSuffix(FieldMissionBatchNumber, v))
}

// MissionBatchNumberEqualFold applies the EqualFold predicate on the "mission_batch_number" field.
func MissionBatchNumberEqualFold(v string) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldEqualFold(FieldMissionBatchNumber, v))
}

// MissionBatchNumberContainsFold applies the ContainsFold predicate on the "mission_batch_number" field.
func MissionBatchNumberContainsFold(v string) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(sql.FieldContainsFold(FieldMissionBatchNumber, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCostBills applies the HasEdge predicate on the "cost_bills" edge.
func HasCostBills() predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CostBillsTable, CostBillsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCostBillsWith applies the HasEdge predicate on the "cost_bills" edge with a given conditions (other predicates).
func HasCostBillsWith(preds ...predicate.CostBill) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(func(s *sql.Selector) {
		step := newCostBillsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMissionProduceOrders applies the HasEdge predicate on the "mission_produce_orders" edge.
func HasMissionProduceOrders() predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MissionProduceOrdersTable, MissionProduceOrdersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMissionProduceOrdersWith applies the HasEdge predicate on the "mission_produce_orders" edge with a given conditions (other predicates).
func HasMissionProduceOrdersWith(preds ...predicate.MissionProduceOrder) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(func(s *sql.Selector) {
		step := newMissionProduceOrdersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMissionBatch applies the HasEdge predicate on the "mission_batch" edge.
func HasMissionBatch() predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MissionBatchTable, MissionBatchColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMissionBatchWith applies the HasEdge predicate on the "mission_batch" edge with a given conditions (other predicates).
func HasMissionBatchWith(preds ...predicate.MissionBatch) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(func(s *sql.Selector) {
		step := newMissionBatchStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MissionConsumeOrder) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MissionConsumeOrder) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MissionConsumeOrder) predicate.MissionConsumeOrder {
	return predicate.MissionConsumeOrder(func(s *sql.Selector) {
		p(s.Not())
	})
}
