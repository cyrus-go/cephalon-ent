// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/bill"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/invite"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/symbol"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/transferorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
)

// BillQuery is the builder for querying Bill entities.
type BillQuery struct {
	config
	ctx               *QueryContext
	order             []bill.OrderOption
	inters            []Interceptor
	predicates        []predicate.Bill
	withSourceUser    *UserQuery
	withTargetUser    *UserQuery
	withTransferOrder *TransferOrderQuery
	withMissionOrder  *MissionOrderQuery
	withInvite        *InviteQuery
	withSymbol        *SymbolQuery
	modifiers         []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BillQuery builder.
func (bq *BillQuery) Where(ps ...predicate.Bill) *BillQuery {
	bq.predicates = append(bq.predicates, ps...)
	return bq
}

// Limit the number of records to be returned by this query.
func (bq *BillQuery) Limit(limit int) *BillQuery {
	bq.ctx.Limit = &limit
	return bq
}

// Offset to start from.
func (bq *BillQuery) Offset(offset int) *BillQuery {
	bq.ctx.Offset = &offset
	return bq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (bq *BillQuery) Unique(unique bool) *BillQuery {
	bq.ctx.Unique = &unique
	return bq
}

// Order specifies how the records should be ordered.
func (bq *BillQuery) Order(o ...bill.OrderOption) *BillQuery {
	bq.order = append(bq.order, o...)
	return bq
}

// QuerySourceUser chains the current query on the "source_user" edge.
func (bq *BillQuery) QuerySourceUser() *UserQuery {
	query := (&UserClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(bill.Table, bill.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bill.SourceUserTable, bill.SourceUserColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTargetUser chains the current query on the "target_user" edge.
func (bq *BillQuery) QueryTargetUser() *UserQuery {
	query := (&UserClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(bill.Table, bill.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bill.TargetUserTable, bill.TargetUserColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTransferOrder chains the current query on the "transfer_order" edge.
func (bq *BillQuery) QueryTransferOrder() *TransferOrderQuery {
	query := (&TransferOrderClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(bill.Table, bill.FieldID, selector),
			sqlgraph.To(transferorder.Table, transferorder.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bill.TransferOrderTable, bill.TransferOrderColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMissionOrder chains the current query on the "mission_order" edge.
func (bq *BillQuery) QueryMissionOrder() *MissionOrderQuery {
	query := (&MissionOrderClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(bill.Table, bill.FieldID, selector),
			sqlgraph.To(missionorder.Table, missionorder.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bill.MissionOrderTable, bill.MissionOrderColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInvite chains the current query on the "invite" edge.
func (bq *BillQuery) QueryInvite() *InviteQuery {
	query := (&InviteClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(bill.Table, bill.FieldID, selector),
			sqlgraph.To(invite.Table, invite.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bill.InviteTable, bill.InviteColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySymbol chains the current query on the "symbol" edge.
func (bq *BillQuery) QuerySymbol() *SymbolQuery {
	query := (&SymbolClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(bill.Table, bill.FieldID, selector),
			sqlgraph.To(symbol.Table, symbol.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bill.SymbolTable, bill.SymbolColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Bill entity from the query.
// Returns a *NotFoundError when no Bill was found.
func (bq *BillQuery) First(ctx context.Context) (*Bill, error) {
	nodes, err := bq.Limit(1).All(setContextOp(ctx, bq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{bill.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (bq *BillQuery) FirstX(ctx context.Context) *Bill {
	node, err := bq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Bill ID from the query.
// Returns a *NotFoundError when no Bill ID was found.
func (bq *BillQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = bq.Limit(1).IDs(setContextOp(ctx, bq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{bill.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (bq *BillQuery) FirstIDX(ctx context.Context) int64 {
	id, err := bq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Bill entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Bill entity is found.
// Returns a *NotFoundError when no Bill entities are found.
func (bq *BillQuery) Only(ctx context.Context) (*Bill, error) {
	nodes, err := bq.Limit(2).All(setContextOp(ctx, bq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{bill.Label}
	default:
		return nil, &NotSingularError{bill.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (bq *BillQuery) OnlyX(ctx context.Context) *Bill {
	node, err := bq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Bill ID in the query.
// Returns a *NotSingularError when more than one Bill ID is found.
// Returns a *NotFoundError when no entities are found.
func (bq *BillQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = bq.Limit(2).IDs(setContextOp(ctx, bq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{bill.Label}
	default:
		err = &NotSingularError{bill.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (bq *BillQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := bq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Bills.
func (bq *BillQuery) All(ctx context.Context) ([]*Bill, error) {
	ctx = setContextOp(ctx, bq.ctx, "All")
	if err := bq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Bill, *BillQuery]()
	return withInterceptors[[]*Bill](ctx, bq, qr, bq.inters)
}

// AllX is like All, but panics if an error occurs.
func (bq *BillQuery) AllX(ctx context.Context) []*Bill {
	nodes, err := bq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Bill IDs.
func (bq *BillQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if bq.ctx.Unique == nil && bq.path != nil {
		bq.Unique(true)
	}
	ctx = setContextOp(ctx, bq.ctx, "IDs")
	if err = bq.Select(bill.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (bq *BillQuery) IDsX(ctx context.Context) []int64 {
	ids, err := bq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (bq *BillQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, bq.ctx, "Count")
	if err := bq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, bq, querierCount[*BillQuery](), bq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (bq *BillQuery) CountX(ctx context.Context) int {
	count, err := bq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (bq *BillQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, bq.ctx, "Exist")
	switch _, err := bq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("cep_ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (bq *BillQuery) ExistX(ctx context.Context) bool {
	exist, err := bq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BillQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (bq *BillQuery) Clone() *BillQuery {
	if bq == nil {
		return nil
	}
	return &BillQuery{
		config:            bq.config,
		ctx:               bq.ctx.Clone(),
		order:             append([]bill.OrderOption{}, bq.order...),
		inters:            append([]Interceptor{}, bq.inters...),
		predicates:        append([]predicate.Bill{}, bq.predicates...),
		withSourceUser:    bq.withSourceUser.Clone(),
		withTargetUser:    bq.withTargetUser.Clone(),
		withTransferOrder: bq.withTransferOrder.Clone(),
		withMissionOrder:  bq.withMissionOrder.Clone(),
		withInvite:        bq.withInvite.Clone(),
		withSymbol:        bq.withSymbol.Clone(),
		// clone intermediate query.
		sql:  bq.sql.Clone(),
		path: bq.path,
	}
}

// WithSourceUser tells the query-builder to eager-load the nodes that are connected to
// the "source_user" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BillQuery) WithSourceUser(opts ...func(*UserQuery)) *BillQuery {
	query := (&UserClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withSourceUser = query
	return bq
}

// WithTargetUser tells the query-builder to eager-load the nodes that are connected to
// the "target_user" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BillQuery) WithTargetUser(opts ...func(*UserQuery)) *BillQuery {
	query := (&UserClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withTargetUser = query
	return bq
}

// WithTransferOrder tells the query-builder to eager-load the nodes that are connected to
// the "transfer_order" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BillQuery) WithTransferOrder(opts ...func(*TransferOrderQuery)) *BillQuery {
	query := (&TransferOrderClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withTransferOrder = query
	return bq
}

// WithMissionOrder tells the query-builder to eager-load the nodes that are connected to
// the "mission_order" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BillQuery) WithMissionOrder(opts ...func(*MissionOrderQuery)) *BillQuery {
	query := (&MissionOrderClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withMissionOrder = query
	return bq
}

// WithInvite tells the query-builder to eager-load the nodes that are connected to
// the "invite" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BillQuery) WithInvite(opts ...func(*InviteQuery)) *BillQuery {
	query := (&InviteClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withInvite = query
	return bq
}

// WithSymbol tells the query-builder to eager-load the nodes that are connected to
// the "symbol" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BillQuery) WithSymbol(opts ...func(*SymbolQuery)) *BillQuery {
	query := (&SymbolClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withSymbol = query
	return bq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Bill.Query().
//		GroupBy(bill.FieldCreatedBy).
//		Aggregate(cep_ent.Count()).
//		Scan(ctx, &v)
func (bq *BillQuery) GroupBy(field string, fields ...string) *BillGroupBy {
	bq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &BillGroupBy{build: bq}
	grbuild.flds = &bq.ctx.Fields
	grbuild.label = bill.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by"`
//	}
//
//	client.Bill.Query().
//		Select(bill.FieldCreatedBy).
//		Scan(ctx, &v)
func (bq *BillQuery) Select(fields ...string) *BillSelect {
	bq.ctx.Fields = append(bq.ctx.Fields, fields...)
	sbuild := &BillSelect{BillQuery: bq}
	sbuild.label = bill.Label
	sbuild.flds, sbuild.scan = &bq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a BillSelect configured with the given aggregations.
func (bq *BillQuery) Aggregate(fns ...AggregateFunc) *BillSelect {
	return bq.Select().Aggregate(fns...)
}

func (bq *BillQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range bq.inters {
		if inter == nil {
			return fmt.Errorf("cep_ent: uninitialized interceptor (forgotten import cep_ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, bq); err != nil {
				return err
			}
		}
	}
	for _, f := range bq.ctx.Fields {
		if !bill.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
		}
	}
	if bq.path != nil {
		prev, err := bq.path(ctx)
		if err != nil {
			return err
		}
		bq.sql = prev
	}
	return nil
}

func (bq *BillQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Bill, error) {
	var (
		nodes       = []*Bill{}
		_spec       = bq.querySpec()
		loadedTypes = [6]bool{
			bq.withSourceUser != nil,
			bq.withTargetUser != nil,
			bq.withTransferOrder != nil,
			bq.withMissionOrder != nil,
			bq.withInvite != nil,
			bq.withSymbol != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Bill).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Bill{config: bq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(bq.modifiers) > 0 {
		_spec.Modifiers = bq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, bq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := bq.withSourceUser; query != nil {
		if err := bq.loadSourceUser(ctx, query, nodes, nil,
			func(n *Bill, e *User) { n.Edges.SourceUser = e }); err != nil {
			return nil, err
		}
	}
	if query := bq.withTargetUser; query != nil {
		if err := bq.loadTargetUser(ctx, query, nodes, nil,
			func(n *Bill, e *User) { n.Edges.TargetUser = e }); err != nil {
			return nil, err
		}
	}
	if query := bq.withTransferOrder; query != nil {
		if err := bq.loadTransferOrder(ctx, query, nodes, nil,
			func(n *Bill, e *TransferOrder) { n.Edges.TransferOrder = e }); err != nil {
			return nil, err
		}
	}
	if query := bq.withMissionOrder; query != nil {
		if err := bq.loadMissionOrder(ctx, query, nodes, nil,
			func(n *Bill, e *MissionOrder) { n.Edges.MissionOrder = e }); err != nil {
			return nil, err
		}
	}
	if query := bq.withInvite; query != nil {
		if err := bq.loadInvite(ctx, query, nodes, nil,
			func(n *Bill, e *Invite) { n.Edges.Invite = e }); err != nil {
			return nil, err
		}
	}
	if query := bq.withSymbol; query != nil {
		if err := bq.loadSymbol(ctx, query, nodes, nil,
			func(n *Bill, e *Symbol) { n.Edges.Symbol = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (bq *BillQuery) loadSourceUser(ctx context.Context, query *UserQuery, nodes []*Bill, init func(*Bill), assign func(*Bill, *User)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*Bill)
	for i := range nodes {
		fk := nodes[i].SourceUserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "source_user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (bq *BillQuery) loadTargetUser(ctx context.Context, query *UserQuery, nodes []*Bill, init func(*Bill), assign func(*Bill, *User)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*Bill)
	for i := range nodes {
		fk := nodes[i].TargetUserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "target_user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (bq *BillQuery) loadTransferOrder(ctx context.Context, query *TransferOrderQuery, nodes []*Bill, init func(*Bill), assign func(*Bill, *TransferOrder)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*Bill)
	for i := range nodes {
		fk := nodes[i].OrderID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(transferorder.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "order_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (bq *BillQuery) loadMissionOrder(ctx context.Context, query *MissionOrderQuery, nodes []*Bill, init func(*Bill), assign func(*Bill, *MissionOrder)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*Bill)
	for i := range nodes {
		fk := nodes[i].OrderID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(missionorder.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "order_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (bq *BillQuery) loadInvite(ctx context.Context, query *InviteQuery, nodes []*Bill, init func(*Bill), assign func(*Bill, *Invite)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*Bill)
	for i := range nodes {
		fk := nodes[i].InviteID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(invite.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "invite_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (bq *BillQuery) loadSymbol(ctx context.Context, query *SymbolQuery, nodes []*Bill, init func(*Bill), assign func(*Bill, *Symbol)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*Bill)
	for i := range nodes {
		fk := nodes[i].SymbolID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(symbol.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "symbol_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (bq *BillQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := bq.querySpec()
	if len(bq.modifiers) > 0 {
		_spec.Modifiers = bq.modifiers
	}
	_spec.Node.Columns = bq.ctx.Fields
	if len(bq.ctx.Fields) > 0 {
		_spec.Unique = bq.ctx.Unique != nil && *bq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, bq.driver, _spec)
}

func (bq *BillQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(bill.Table, bill.Columns, sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64))
	_spec.From = bq.sql
	if unique := bq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if bq.path != nil {
		_spec.Unique = true
	}
	if fields := bq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bill.FieldID)
		for i := range fields {
			if fields[i] != bill.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if bq.withSourceUser != nil {
			_spec.Node.AddColumnOnce(bill.FieldSourceUserID)
		}
		if bq.withTargetUser != nil {
			_spec.Node.AddColumnOnce(bill.FieldTargetUserID)
		}
		if bq.withTransferOrder != nil {
			_spec.Node.AddColumnOnce(bill.FieldOrderID)
		}
		if bq.withMissionOrder != nil {
			_spec.Node.AddColumnOnce(bill.FieldOrderID)
		}
		if bq.withInvite != nil {
			_spec.Node.AddColumnOnce(bill.FieldInviteID)
		}
		if bq.withSymbol != nil {
			_spec.Node.AddColumnOnce(bill.FieldSymbolID)
		}
	}
	if ps := bq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := bq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := bq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := bq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (bq *BillQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(bq.driver.Dialect())
	t1 := builder.Table(bill.Table)
	columns := bq.ctx.Fields
	if len(columns) == 0 {
		columns = bill.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if bq.sql != nil {
		selector = bq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if bq.ctx.Unique != nil && *bq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range bq.modifiers {
		m(selector)
	}
	for _, p := range bq.predicates {
		p(selector)
	}
	for _, p := range bq.order {
		p(selector)
	}
	if offset := bq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := bq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (bq *BillQuery) Modify(modifiers ...func(s *sql.Selector)) *BillSelect {
	bq.modifiers = append(bq.modifiers, modifiers...)
	return bq.Select()
}

// BillGroupBy is the group-by builder for Bill entities.
type BillGroupBy struct {
	selector
	build *BillQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bgb *BillGroupBy) Aggregate(fns ...AggregateFunc) *BillGroupBy {
	bgb.fns = append(bgb.fns, fns...)
	return bgb
}

// Scan applies the selector query and scans the result into the given value.
func (bgb *BillGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bgb.build.ctx, "GroupBy")
	if err := bgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BillQuery, *BillGroupBy](ctx, bgb.build, bgb, bgb.build.inters, v)
}

func (bgb *BillGroupBy) sqlScan(ctx context.Context, root *BillQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(bgb.fns))
	for _, fn := range bgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*bgb.flds)+len(bgb.fns))
		for _, f := range *bgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*bgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// BillSelect is the builder for selecting fields of Bill entities.
type BillSelect struct {
	*BillQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (bs *BillSelect) Aggregate(fns ...AggregateFunc) *BillSelect {
	bs.fns = append(bs.fns, fns...)
	return bs
}

// Scan applies the selector query and scans the result into the given value.
func (bs *BillSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bs.ctx, "Select")
	if err := bs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BillQuery, *BillSelect](ctx, bs.BillQuery, bs, bs.inters, v)
}

func (bs *BillSelect) sqlScan(ctx context.Context, root *BillQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(bs.fns))
	for _, fn := range bs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*bs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (bs *BillSelect) Modify(modifiers ...func(s *sql.Selector)) *BillSelect {
	bs.modifiers = append(bs.modifiers, modifiers...)
	return bs
}
