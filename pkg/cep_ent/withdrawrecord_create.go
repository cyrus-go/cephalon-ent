// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/transferorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/withdrawrecord"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// WithdrawRecordCreate is the builder for creating a WithdrawRecord entity.
type WithdrawRecordCreate struct {
	config
	mutation *WithdrawRecordMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (wrc *WithdrawRecordCreate) SetCreatedBy(i int64) *WithdrawRecordCreate {
	wrc.mutation.SetCreatedBy(i)
	return wrc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (wrc *WithdrawRecordCreate) SetNillableCreatedBy(i *int64) *WithdrawRecordCreate {
	if i != nil {
		wrc.SetCreatedBy(*i)
	}
	return wrc
}

// SetUpdatedBy sets the "updated_by" field.
func (wrc *WithdrawRecordCreate) SetUpdatedBy(i int64) *WithdrawRecordCreate {
	wrc.mutation.SetUpdatedBy(i)
	return wrc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (wrc *WithdrawRecordCreate) SetNillableUpdatedBy(i *int64) *WithdrawRecordCreate {
	if i != nil {
		wrc.SetUpdatedBy(*i)
	}
	return wrc
}

// SetCreatedAt sets the "created_at" field.
func (wrc *WithdrawRecordCreate) SetCreatedAt(t time.Time) *WithdrawRecordCreate {
	wrc.mutation.SetCreatedAt(t)
	return wrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wrc *WithdrawRecordCreate) SetNillableCreatedAt(t *time.Time) *WithdrawRecordCreate {
	if t != nil {
		wrc.SetCreatedAt(*t)
	}
	return wrc
}

// SetUpdatedAt sets the "updated_at" field.
func (wrc *WithdrawRecordCreate) SetUpdatedAt(t time.Time) *WithdrawRecordCreate {
	wrc.mutation.SetUpdatedAt(t)
	return wrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wrc *WithdrawRecordCreate) SetNillableUpdatedAt(t *time.Time) *WithdrawRecordCreate {
	if t != nil {
		wrc.SetUpdatedAt(*t)
	}
	return wrc
}

// SetDeletedAt sets the "deleted_at" field.
func (wrc *WithdrawRecordCreate) SetDeletedAt(t time.Time) *WithdrawRecordCreate {
	wrc.mutation.SetDeletedAt(t)
	return wrc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wrc *WithdrawRecordCreate) SetNillableDeletedAt(t *time.Time) *WithdrawRecordCreate {
	if t != nil {
		wrc.SetDeletedAt(*t)
	}
	return wrc
}

// SetUserID sets the "user_id" field.
func (wrc *WithdrawRecordCreate) SetUserID(i int64) *WithdrawRecordCreate {
	wrc.mutation.SetUserID(i)
	return wrc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (wrc *WithdrawRecordCreate) SetNillableUserID(i *int64) *WithdrawRecordCreate {
	if i != nil {
		wrc.SetUserID(*i)
	}
	return wrc
}

// SetWithdrawAccount sets the "withdraw_account" field.
func (wrc *WithdrawRecordCreate) SetWithdrawAccount(s string) *WithdrawRecordCreate {
	wrc.mutation.SetWithdrawAccount(s)
	return wrc
}

// SetNillableWithdrawAccount sets the "withdraw_account" field if the given value is not nil.
func (wrc *WithdrawRecordCreate) SetNillableWithdrawAccount(s *string) *WithdrawRecordCreate {
	if s != nil {
		wrc.SetWithdrawAccount(*s)
	}
	return wrc
}

// SetBusinessName sets the "business_name" field.
func (wrc *WithdrawRecordCreate) SetBusinessName(s string) *WithdrawRecordCreate {
	wrc.mutation.SetBusinessName(s)
	return wrc
}

// SetNillableBusinessName sets the "business_name" field if the given value is not nil.
func (wrc *WithdrawRecordCreate) SetNillableBusinessName(s *string) *WithdrawRecordCreate {
	if s != nil {
		wrc.SetBusinessName(*s)
	}
	return wrc
}

// SetBank sets the "bank" field.
func (wrc *WithdrawRecordCreate) SetBank(s string) *WithdrawRecordCreate {
	wrc.mutation.SetBank(s)
	return wrc
}

// SetNillableBank sets the "bank" field if the given value is not nil.
func (wrc *WithdrawRecordCreate) SetNillableBank(s *string) *WithdrawRecordCreate {
	if s != nil {
		wrc.SetBank(*s)
	}
	return wrc
}

// SetType sets the "type" field.
func (wrc *WithdrawRecordCreate) SetType(et enums.WithdrawType) *WithdrawRecordCreate {
	wrc.mutation.SetType(et)
	return wrc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (wrc *WithdrawRecordCreate) SetNillableType(et *enums.WithdrawType) *WithdrawRecordCreate {
	if et != nil {
		wrc.SetType(*et)
	}
	return wrc
}

// SetAmount sets the "amount" field.
func (wrc *WithdrawRecordCreate) SetAmount(i int64) *WithdrawRecordCreate {
	wrc.mutation.SetAmount(i)
	return wrc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (wrc *WithdrawRecordCreate) SetNillableAmount(i *int64) *WithdrawRecordCreate {
	if i != nil {
		wrc.SetAmount(*i)
	}
	return wrc
}

// SetRemainAmount sets the "remain_amount" field.
func (wrc *WithdrawRecordCreate) SetRemainAmount(i int64) *WithdrawRecordCreate {
	wrc.mutation.SetRemainAmount(i)
	return wrc
}

// SetNillableRemainAmount sets the "remain_amount" field if the given value is not nil.
func (wrc *WithdrawRecordCreate) SetNillableRemainAmount(i *int64) *WithdrawRecordCreate {
	if i != nil {
		wrc.SetRemainAmount(*i)
	}
	return wrc
}

// SetRate sets the "rate" field.
func (wrc *WithdrawRecordCreate) SetRate(i int64) *WithdrawRecordCreate {
	wrc.mutation.SetRate(i)
	return wrc
}

// SetNillableRate sets the "rate" field if the given value is not nil.
func (wrc *WithdrawRecordCreate) SetNillableRate(i *int64) *WithdrawRecordCreate {
	if i != nil {
		wrc.SetRate(*i)
	}
	return wrc
}

// SetRealAmount sets the "real_amount" field.
func (wrc *WithdrawRecordCreate) SetRealAmount(i int64) *WithdrawRecordCreate {
	wrc.mutation.SetRealAmount(i)
	return wrc
}

// SetNillableRealAmount sets the "real_amount" field if the given value is not nil.
func (wrc *WithdrawRecordCreate) SetNillableRealAmount(i *int64) *WithdrawRecordCreate {
	if i != nil {
		wrc.SetRealAmount(*i)
	}
	return wrc
}

// SetStatus sets the "status" field.
func (wrc *WithdrawRecordCreate) SetStatus(es enums.WithdrawStatus) *WithdrawRecordCreate {
	wrc.mutation.SetStatus(es)
	return wrc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wrc *WithdrawRecordCreate) SetNillableStatus(es *enums.WithdrawStatus) *WithdrawRecordCreate {
	if es != nil {
		wrc.SetStatus(*es)
	}
	return wrc
}

// SetRejectReason sets the "reject_reason" field.
func (wrc *WithdrawRecordCreate) SetRejectReason(s string) *WithdrawRecordCreate {
	wrc.mutation.SetRejectReason(s)
	return wrc
}

// SetNillableRejectReason sets the "reject_reason" field if the given value is not nil.
func (wrc *WithdrawRecordCreate) SetNillableRejectReason(s *string) *WithdrawRecordCreate {
	if s != nil {
		wrc.SetRejectReason(*s)
	}
	return wrc
}

// SetOperateUserID sets the "operate_user_id" field.
func (wrc *WithdrawRecordCreate) SetOperateUserID(i int64) *WithdrawRecordCreate {
	wrc.mutation.SetOperateUserID(i)
	return wrc
}

// SetNillableOperateUserID sets the "operate_user_id" field if the given value is not nil.
func (wrc *WithdrawRecordCreate) SetNillableOperateUserID(i *int64) *WithdrawRecordCreate {
	if i != nil {
		wrc.SetOperateUserID(*i)
	}
	return wrc
}

// SetTransferOrderID sets the "transfer_order_id" field.
func (wrc *WithdrawRecordCreate) SetTransferOrderID(i int64) *WithdrawRecordCreate {
	wrc.mutation.SetTransferOrderID(i)
	return wrc
}

// SetNillableTransferOrderID sets the "transfer_order_id" field if the given value is not nil.
func (wrc *WithdrawRecordCreate) SetNillableTransferOrderID(i *int64) *WithdrawRecordCreate {
	if i != nil {
		wrc.SetTransferOrderID(*i)
	}
	return wrc
}

// SetID sets the "id" field.
func (wrc *WithdrawRecordCreate) SetID(i int64) *WithdrawRecordCreate {
	wrc.mutation.SetID(i)
	return wrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wrc *WithdrawRecordCreate) SetNillableID(i *int64) *WithdrawRecordCreate {
	if i != nil {
		wrc.SetID(*i)
	}
	return wrc
}

// SetUser sets the "user" edge to the User entity.
func (wrc *WithdrawRecordCreate) SetUser(u *User) *WithdrawRecordCreate {
	return wrc.SetUserID(u.ID)
}

// SetOperateUser sets the "operate_user" edge to the User entity.
func (wrc *WithdrawRecordCreate) SetOperateUser(u *User) *WithdrawRecordCreate {
	return wrc.SetOperateUserID(u.ID)
}

// SetTransferOrder sets the "transfer_order" edge to the TransferOrder entity.
func (wrc *WithdrawRecordCreate) SetTransferOrder(t *TransferOrder) *WithdrawRecordCreate {
	return wrc.SetTransferOrderID(t.ID)
}

// Mutation returns the WithdrawRecordMutation object of the builder.
func (wrc *WithdrawRecordCreate) Mutation() *WithdrawRecordMutation {
	return wrc.mutation
}

// Save creates the WithdrawRecord in the database.
func (wrc *WithdrawRecordCreate) Save(ctx context.Context) (*WithdrawRecord, error) {
	wrc.defaults()
	return withHooks(ctx, wrc.sqlSave, wrc.mutation, wrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wrc *WithdrawRecordCreate) SaveX(ctx context.Context) *WithdrawRecord {
	v, err := wrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wrc *WithdrawRecordCreate) Exec(ctx context.Context) error {
	_, err := wrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wrc *WithdrawRecordCreate) ExecX(ctx context.Context) {
	if err := wrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wrc *WithdrawRecordCreate) defaults() {
	if _, ok := wrc.mutation.CreatedBy(); !ok {
		v := withdrawrecord.DefaultCreatedBy
		wrc.mutation.SetCreatedBy(v)
	}
	if _, ok := wrc.mutation.UpdatedBy(); !ok {
		v := withdrawrecord.DefaultUpdatedBy
		wrc.mutation.SetUpdatedBy(v)
	}
	if _, ok := wrc.mutation.CreatedAt(); !ok {
		v := withdrawrecord.DefaultCreatedAt()
		wrc.mutation.SetCreatedAt(v)
	}
	if _, ok := wrc.mutation.UpdatedAt(); !ok {
		v := withdrawrecord.DefaultUpdatedAt()
		wrc.mutation.SetUpdatedAt(v)
	}
	if _, ok := wrc.mutation.DeletedAt(); !ok {
		v := withdrawrecord.DefaultDeletedAt
		wrc.mutation.SetDeletedAt(v)
	}
	if _, ok := wrc.mutation.UserID(); !ok {
		v := withdrawrecord.DefaultUserID
		wrc.mutation.SetUserID(v)
	}
	if _, ok := wrc.mutation.WithdrawAccount(); !ok {
		v := withdrawrecord.DefaultWithdrawAccount
		wrc.mutation.SetWithdrawAccount(v)
	}
	if _, ok := wrc.mutation.BusinessName(); !ok {
		v := withdrawrecord.DefaultBusinessName
		wrc.mutation.SetBusinessName(v)
	}
	if _, ok := wrc.mutation.Bank(); !ok {
		v := withdrawrecord.DefaultBank
		wrc.mutation.SetBank(v)
	}
	if _, ok := wrc.mutation.GetType(); !ok {
		v := withdrawrecord.DefaultType
		wrc.mutation.SetType(v)
	}
	if _, ok := wrc.mutation.Amount(); !ok {
		v := withdrawrecord.DefaultAmount
		wrc.mutation.SetAmount(v)
	}
	if _, ok := wrc.mutation.RemainAmount(); !ok {
		v := withdrawrecord.DefaultRemainAmount
		wrc.mutation.SetRemainAmount(v)
	}
	if _, ok := wrc.mutation.Rate(); !ok {
		v := withdrawrecord.DefaultRate
		wrc.mutation.SetRate(v)
	}
	if _, ok := wrc.mutation.RealAmount(); !ok {
		v := withdrawrecord.DefaultRealAmount
		wrc.mutation.SetRealAmount(v)
	}
	if _, ok := wrc.mutation.Status(); !ok {
		v := withdrawrecord.DefaultStatus
		wrc.mutation.SetStatus(v)
	}
	if _, ok := wrc.mutation.RejectReason(); !ok {
		v := withdrawrecord.DefaultRejectReason
		wrc.mutation.SetRejectReason(v)
	}
	if _, ok := wrc.mutation.OperateUserID(); !ok {
		v := withdrawrecord.DefaultOperateUserID
		wrc.mutation.SetOperateUserID(v)
	}
	if _, ok := wrc.mutation.TransferOrderID(); !ok {
		v := withdrawrecord.DefaultTransferOrderID
		wrc.mutation.SetTransferOrderID(v)
	}
	if _, ok := wrc.mutation.ID(); !ok {
		v := withdrawrecord.DefaultID()
		wrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wrc *WithdrawRecordCreate) check() error {
	if _, ok := wrc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "WithdrawRecord.created_by"`)}
	}
	if _, ok := wrc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "WithdrawRecord.updated_by"`)}
	}
	if _, ok := wrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "WithdrawRecord.created_at"`)}
	}
	if _, ok := wrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "WithdrawRecord.updated_at"`)}
	}
	if _, ok := wrc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "WithdrawRecord.deleted_at"`)}
	}
	if _, ok := wrc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "WithdrawRecord.user_id"`)}
	}
	if _, ok := wrc.mutation.WithdrawAccount(); !ok {
		return &ValidationError{Name: "withdraw_account", err: errors.New(`cep_ent: missing required field "WithdrawRecord.withdraw_account"`)}
	}
	if _, ok := wrc.mutation.BusinessName(); !ok {
		return &ValidationError{Name: "business_name", err: errors.New(`cep_ent: missing required field "WithdrawRecord.business_name"`)}
	}
	if _, ok := wrc.mutation.Bank(); !ok {
		return &ValidationError{Name: "bank", err: errors.New(`cep_ent: missing required field "WithdrawRecord.bank"`)}
	}
	if _, ok := wrc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`cep_ent: missing required field "WithdrawRecord.type"`)}
	}
	if v, ok := wrc.mutation.GetType(); ok {
		if err := withdrawrecord.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "WithdrawRecord.type": %w`, err)}
		}
	}
	if _, ok := wrc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`cep_ent: missing required field "WithdrawRecord.amount"`)}
	}
	if _, ok := wrc.mutation.RemainAmount(); !ok {
		return &ValidationError{Name: "remain_amount", err: errors.New(`cep_ent: missing required field "WithdrawRecord.remain_amount"`)}
	}
	if _, ok := wrc.mutation.Rate(); !ok {
		return &ValidationError{Name: "rate", err: errors.New(`cep_ent: missing required field "WithdrawRecord.rate"`)}
	}
	if _, ok := wrc.mutation.RealAmount(); !ok {
		return &ValidationError{Name: "real_amount", err: errors.New(`cep_ent: missing required field "WithdrawRecord.real_amount"`)}
	}
	if _, ok := wrc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`cep_ent: missing required field "WithdrawRecord.status"`)}
	}
	if v, ok := wrc.mutation.Status(); ok {
		if err := withdrawrecord.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "WithdrawRecord.status": %w`, err)}
		}
	}
	if _, ok := wrc.mutation.RejectReason(); !ok {
		return &ValidationError{Name: "reject_reason", err: errors.New(`cep_ent: missing required field "WithdrawRecord.reject_reason"`)}
	}
	if _, ok := wrc.mutation.OperateUserID(); !ok {
		return &ValidationError{Name: "operate_user_id", err: errors.New(`cep_ent: missing required field "WithdrawRecord.operate_user_id"`)}
	}
	if _, ok := wrc.mutation.TransferOrderID(); !ok {
		return &ValidationError{Name: "transfer_order_id", err: errors.New(`cep_ent: missing required field "WithdrawRecord.transfer_order_id"`)}
	}
	if _, ok := wrc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "WithdrawRecord.user"`)}
	}
	if _, ok := wrc.mutation.OperateUserID(); !ok {
		return &ValidationError{Name: "operate_user", err: errors.New(`cep_ent: missing required edge "WithdrawRecord.operate_user"`)}
	}
	if _, ok := wrc.mutation.TransferOrderID(); !ok {
		return &ValidationError{Name: "transfer_order", err: errors.New(`cep_ent: missing required edge "WithdrawRecord.transfer_order"`)}
	}
	return nil
}

func (wrc *WithdrawRecordCreate) sqlSave(ctx context.Context) (*WithdrawRecord, error) {
	if err := wrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	wrc.mutation.id = &_node.ID
	wrc.mutation.done = true
	return _node, nil
}

func (wrc *WithdrawRecordCreate) createSpec() (*WithdrawRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &WithdrawRecord{config: wrc.config}
		_spec = sqlgraph.NewCreateSpec(withdrawrecord.Table, sqlgraph.NewFieldSpec(withdrawrecord.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = wrc.conflict
	if id, ok := wrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := wrc.mutation.CreatedBy(); ok {
		_spec.SetField(withdrawrecord.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := wrc.mutation.UpdatedBy(); ok {
		_spec.SetField(withdrawrecord.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := wrc.mutation.CreatedAt(); ok {
		_spec.SetField(withdrawrecord.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wrc.mutation.UpdatedAt(); ok {
		_spec.SetField(withdrawrecord.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := wrc.mutation.DeletedAt(); ok {
		_spec.SetField(withdrawrecord.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := wrc.mutation.WithdrawAccount(); ok {
		_spec.SetField(withdrawrecord.FieldWithdrawAccount, field.TypeString, value)
		_node.WithdrawAccount = value
	}
	if value, ok := wrc.mutation.BusinessName(); ok {
		_spec.SetField(withdrawrecord.FieldBusinessName, field.TypeString, value)
		_node.BusinessName = value
	}
	if value, ok := wrc.mutation.Bank(); ok {
		_spec.SetField(withdrawrecord.FieldBank, field.TypeString, value)
		_node.Bank = value
	}
	if value, ok := wrc.mutation.GetType(); ok {
		_spec.SetField(withdrawrecord.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := wrc.mutation.Amount(); ok {
		_spec.SetField(withdrawrecord.FieldAmount, field.TypeInt64, value)
		_node.Amount = value
	}
	if value, ok := wrc.mutation.RemainAmount(); ok {
		_spec.SetField(withdrawrecord.FieldRemainAmount, field.TypeInt64, value)
		_node.RemainAmount = value
	}
	if value, ok := wrc.mutation.Rate(); ok {
		_spec.SetField(withdrawrecord.FieldRate, field.TypeInt64, value)
		_node.Rate = value
	}
	if value, ok := wrc.mutation.RealAmount(); ok {
		_spec.SetField(withdrawrecord.FieldRealAmount, field.TypeInt64, value)
		_node.RealAmount = value
	}
	if value, ok := wrc.mutation.Status(); ok {
		_spec.SetField(withdrawrecord.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := wrc.mutation.RejectReason(); ok {
		_spec.SetField(withdrawrecord.FieldRejectReason, field.TypeString, value)
		_node.RejectReason = value
	}
	if nodes := wrc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   withdrawrecord.UserTable,
			Columns: []string{withdrawrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wrc.mutation.OperateUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   withdrawrecord.OperateUserTable,
			Columns: []string{withdrawrecord.OperateUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OperateUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wrc.mutation.TransferOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   withdrawrecord.TransferOrderTable,
			Columns: []string{withdrawrecord.TransferOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transferorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TransferOrderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WithdrawRecord.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WithdrawRecordUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (wrc *WithdrawRecordCreate) OnConflict(opts ...sql.ConflictOption) *WithdrawRecordUpsertOne {
	wrc.conflict = opts
	return &WithdrawRecordUpsertOne{
		create: wrc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WithdrawRecord.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wrc *WithdrawRecordCreate) OnConflictColumns(columns ...string) *WithdrawRecordUpsertOne {
	wrc.conflict = append(wrc.conflict, sql.ConflictColumns(columns...))
	return &WithdrawRecordUpsertOne{
		create: wrc,
	}
}

type (
	// WithdrawRecordUpsertOne is the builder for "upsert"-ing
	//  one WithdrawRecord node.
	WithdrawRecordUpsertOne struct {
		create *WithdrawRecordCreate
	}

	// WithdrawRecordUpsert is the "OnConflict" setter.
	WithdrawRecordUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *WithdrawRecordUpsert) SetCreatedBy(v int64) *WithdrawRecordUpsert {
	u.Set(withdrawrecord.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *WithdrawRecordUpsert) UpdateCreatedBy() *WithdrawRecordUpsert {
	u.SetExcluded(withdrawrecord.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *WithdrawRecordUpsert) AddCreatedBy(v int64) *WithdrawRecordUpsert {
	u.Add(withdrawrecord.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *WithdrawRecordUpsert) SetUpdatedBy(v int64) *WithdrawRecordUpsert {
	u.Set(withdrawrecord.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *WithdrawRecordUpsert) UpdateUpdatedBy() *WithdrawRecordUpsert {
	u.SetExcluded(withdrawrecord.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *WithdrawRecordUpsert) AddUpdatedBy(v int64) *WithdrawRecordUpsert {
	u.Add(withdrawrecord.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WithdrawRecordUpsert) SetUpdatedAt(v time.Time) *WithdrawRecordUpsert {
	u.Set(withdrawrecord.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WithdrawRecordUpsert) UpdateUpdatedAt() *WithdrawRecordUpsert {
	u.SetExcluded(withdrawrecord.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WithdrawRecordUpsert) SetDeletedAt(v time.Time) *WithdrawRecordUpsert {
	u.Set(withdrawrecord.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WithdrawRecordUpsert) UpdateDeletedAt() *WithdrawRecordUpsert {
	u.SetExcluded(withdrawrecord.FieldDeletedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *WithdrawRecordUpsert) SetUserID(v int64) *WithdrawRecordUpsert {
	u.Set(withdrawrecord.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *WithdrawRecordUpsert) UpdateUserID() *WithdrawRecordUpsert {
	u.SetExcluded(withdrawrecord.FieldUserID)
	return u
}

// SetWithdrawAccount sets the "withdraw_account" field.
func (u *WithdrawRecordUpsert) SetWithdrawAccount(v string) *WithdrawRecordUpsert {
	u.Set(withdrawrecord.FieldWithdrawAccount, v)
	return u
}

// UpdateWithdrawAccount sets the "withdraw_account" field to the value that was provided on create.
func (u *WithdrawRecordUpsert) UpdateWithdrawAccount() *WithdrawRecordUpsert {
	u.SetExcluded(withdrawrecord.FieldWithdrawAccount)
	return u
}

// SetBusinessName sets the "business_name" field.
func (u *WithdrawRecordUpsert) SetBusinessName(v string) *WithdrawRecordUpsert {
	u.Set(withdrawrecord.FieldBusinessName, v)
	return u
}

// UpdateBusinessName sets the "business_name" field to the value that was provided on create.
func (u *WithdrawRecordUpsert) UpdateBusinessName() *WithdrawRecordUpsert {
	u.SetExcluded(withdrawrecord.FieldBusinessName)
	return u
}

// SetBank sets the "bank" field.
func (u *WithdrawRecordUpsert) SetBank(v string) *WithdrawRecordUpsert {
	u.Set(withdrawrecord.FieldBank, v)
	return u
}

// UpdateBank sets the "bank" field to the value that was provided on create.
func (u *WithdrawRecordUpsert) UpdateBank() *WithdrawRecordUpsert {
	u.SetExcluded(withdrawrecord.FieldBank)
	return u
}

// SetType sets the "type" field.
func (u *WithdrawRecordUpsert) SetType(v enums.WithdrawType) *WithdrawRecordUpsert {
	u.Set(withdrawrecord.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *WithdrawRecordUpsert) UpdateType() *WithdrawRecordUpsert {
	u.SetExcluded(withdrawrecord.FieldType)
	return u
}

// SetAmount sets the "amount" field.
func (u *WithdrawRecordUpsert) SetAmount(v int64) *WithdrawRecordUpsert {
	u.Set(withdrawrecord.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *WithdrawRecordUpsert) UpdateAmount() *WithdrawRecordUpsert {
	u.SetExcluded(withdrawrecord.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *WithdrawRecordUpsert) AddAmount(v int64) *WithdrawRecordUpsert {
	u.Add(withdrawrecord.FieldAmount, v)
	return u
}

// SetRemainAmount sets the "remain_amount" field.
func (u *WithdrawRecordUpsert) SetRemainAmount(v int64) *WithdrawRecordUpsert {
	u.Set(withdrawrecord.FieldRemainAmount, v)
	return u
}

// UpdateRemainAmount sets the "remain_amount" field to the value that was provided on create.
func (u *WithdrawRecordUpsert) UpdateRemainAmount() *WithdrawRecordUpsert {
	u.SetExcluded(withdrawrecord.FieldRemainAmount)
	return u
}

// AddRemainAmount adds v to the "remain_amount" field.
func (u *WithdrawRecordUpsert) AddRemainAmount(v int64) *WithdrawRecordUpsert {
	u.Add(withdrawrecord.FieldRemainAmount, v)
	return u
}

// SetRate sets the "rate" field.
func (u *WithdrawRecordUpsert) SetRate(v int64) *WithdrawRecordUpsert {
	u.Set(withdrawrecord.FieldRate, v)
	return u
}

// UpdateRate sets the "rate" field to the value that was provided on create.
func (u *WithdrawRecordUpsert) UpdateRate() *WithdrawRecordUpsert {
	u.SetExcluded(withdrawrecord.FieldRate)
	return u
}

// AddRate adds v to the "rate" field.
func (u *WithdrawRecordUpsert) AddRate(v int64) *WithdrawRecordUpsert {
	u.Add(withdrawrecord.FieldRate, v)
	return u
}

// SetRealAmount sets the "real_amount" field.
func (u *WithdrawRecordUpsert) SetRealAmount(v int64) *WithdrawRecordUpsert {
	u.Set(withdrawrecord.FieldRealAmount, v)
	return u
}

// UpdateRealAmount sets the "real_amount" field to the value that was provided on create.
func (u *WithdrawRecordUpsert) UpdateRealAmount() *WithdrawRecordUpsert {
	u.SetExcluded(withdrawrecord.FieldRealAmount)
	return u
}

// AddRealAmount adds v to the "real_amount" field.
func (u *WithdrawRecordUpsert) AddRealAmount(v int64) *WithdrawRecordUpsert {
	u.Add(withdrawrecord.FieldRealAmount, v)
	return u
}

// SetStatus sets the "status" field.
func (u *WithdrawRecordUpsert) SetStatus(v enums.WithdrawStatus) *WithdrawRecordUpsert {
	u.Set(withdrawrecord.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *WithdrawRecordUpsert) UpdateStatus() *WithdrawRecordUpsert {
	u.SetExcluded(withdrawrecord.FieldStatus)
	return u
}

// SetRejectReason sets the "reject_reason" field.
func (u *WithdrawRecordUpsert) SetRejectReason(v string) *WithdrawRecordUpsert {
	u.Set(withdrawrecord.FieldRejectReason, v)
	return u
}

// UpdateRejectReason sets the "reject_reason" field to the value that was provided on create.
func (u *WithdrawRecordUpsert) UpdateRejectReason() *WithdrawRecordUpsert {
	u.SetExcluded(withdrawrecord.FieldRejectReason)
	return u
}

// SetOperateUserID sets the "operate_user_id" field.
func (u *WithdrawRecordUpsert) SetOperateUserID(v int64) *WithdrawRecordUpsert {
	u.Set(withdrawrecord.FieldOperateUserID, v)
	return u
}

// UpdateOperateUserID sets the "operate_user_id" field to the value that was provided on create.
func (u *WithdrawRecordUpsert) UpdateOperateUserID() *WithdrawRecordUpsert {
	u.SetExcluded(withdrawrecord.FieldOperateUserID)
	return u
}

// SetTransferOrderID sets the "transfer_order_id" field.
func (u *WithdrawRecordUpsert) SetTransferOrderID(v int64) *WithdrawRecordUpsert {
	u.Set(withdrawrecord.FieldTransferOrderID, v)
	return u
}

// UpdateTransferOrderID sets the "transfer_order_id" field to the value that was provided on create.
func (u *WithdrawRecordUpsert) UpdateTransferOrderID() *WithdrawRecordUpsert {
	u.SetExcluded(withdrawrecord.FieldTransferOrderID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.WithdrawRecord.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(withdrawrecord.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WithdrawRecordUpsertOne) UpdateNewValues() *WithdrawRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(withdrawrecord.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(withdrawrecord.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WithdrawRecord.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WithdrawRecordUpsertOne) Ignore() *WithdrawRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WithdrawRecordUpsertOne) DoNothing() *WithdrawRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WithdrawRecordCreate.OnConflict
// documentation for more info.
func (u *WithdrawRecordUpsertOne) Update(set func(*WithdrawRecordUpsert)) *WithdrawRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WithdrawRecordUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *WithdrawRecordUpsertOne) SetCreatedBy(v int64) *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *WithdrawRecordUpsertOne) AddCreatedBy(v int64) *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *WithdrawRecordUpsertOne) UpdateCreatedBy() *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *WithdrawRecordUpsertOne) SetUpdatedBy(v int64) *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *WithdrawRecordUpsertOne) AddUpdatedBy(v int64) *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *WithdrawRecordUpsertOne) UpdateUpdatedBy() *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WithdrawRecordUpsertOne) SetUpdatedAt(v time.Time) *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WithdrawRecordUpsertOne) UpdateUpdatedAt() *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WithdrawRecordUpsertOne) SetDeletedAt(v time.Time) *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WithdrawRecordUpsertOne) UpdateDeletedAt() *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *WithdrawRecordUpsertOne) SetUserID(v int64) *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *WithdrawRecordUpsertOne) UpdateUserID() *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.UpdateUserID()
	})
}

// SetWithdrawAccount sets the "withdraw_account" field.
func (u *WithdrawRecordUpsertOne) SetWithdrawAccount(v string) *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.SetWithdrawAccount(v)
	})
}

// UpdateWithdrawAccount sets the "withdraw_account" field to the value that was provided on create.
func (u *WithdrawRecordUpsertOne) UpdateWithdrawAccount() *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.UpdateWithdrawAccount()
	})
}

// SetBusinessName sets the "business_name" field.
func (u *WithdrawRecordUpsertOne) SetBusinessName(v string) *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.SetBusinessName(v)
	})
}

// UpdateBusinessName sets the "business_name" field to the value that was provided on create.
func (u *WithdrawRecordUpsertOne) UpdateBusinessName() *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.UpdateBusinessName()
	})
}

// SetBank sets the "bank" field.
func (u *WithdrawRecordUpsertOne) SetBank(v string) *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.SetBank(v)
	})
}

// UpdateBank sets the "bank" field to the value that was provided on create.
func (u *WithdrawRecordUpsertOne) UpdateBank() *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.UpdateBank()
	})
}

// SetType sets the "type" field.
func (u *WithdrawRecordUpsertOne) SetType(v enums.WithdrawType) *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *WithdrawRecordUpsertOne) UpdateType() *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.UpdateType()
	})
}

// SetAmount sets the "amount" field.
func (u *WithdrawRecordUpsertOne) SetAmount(v int64) *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *WithdrawRecordUpsertOne) AddAmount(v int64) *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *WithdrawRecordUpsertOne) UpdateAmount() *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.UpdateAmount()
	})
}

// SetRemainAmount sets the "remain_amount" field.
func (u *WithdrawRecordUpsertOne) SetRemainAmount(v int64) *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.SetRemainAmount(v)
	})
}

// AddRemainAmount adds v to the "remain_amount" field.
func (u *WithdrawRecordUpsertOne) AddRemainAmount(v int64) *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.AddRemainAmount(v)
	})
}

// UpdateRemainAmount sets the "remain_amount" field to the value that was provided on create.
func (u *WithdrawRecordUpsertOne) UpdateRemainAmount() *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.UpdateRemainAmount()
	})
}

// SetRate sets the "rate" field.
func (u *WithdrawRecordUpsertOne) SetRate(v int64) *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.SetRate(v)
	})
}

// AddRate adds v to the "rate" field.
func (u *WithdrawRecordUpsertOne) AddRate(v int64) *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.AddRate(v)
	})
}

// UpdateRate sets the "rate" field to the value that was provided on create.
func (u *WithdrawRecordUpsertOne) UpdateRate() *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.UpdateRate()
	})
}

// SetRealAmount sets the "real_amount" field.
func (u *WithdrawRecordUpsertOne) SetRealAmount(v int64) *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.SetRealAmount(v)
	})
}

// AddRealAmount adds v to the "real_amount" field.
func (u *WithdrawRecordUpsertOne) AddRealAmount(v int64) *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.AddRealAmount(v)
	})
}

// UpdateRealAmount sets the "real_amount" field to the value that was provided on create.
func (u *WithdrawRecordUpsertOne) UpdateRealAmount() *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.UpdateRealAmount()
	})
}

// SetStatus sets the "status" field.
func (u *WithdrawRecordUpsertOne) SetStatus(v enums.WithdrawStatus) *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *WithdrawRecordUpsertOne) UpdateStatus() *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.UpdateStatus()
	})
}

// SetRejectReason sets the "reject_reason" field.
func (u *WithdrawRecordUpsertOne) SetRejectReason(v string) *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.SetRejectReason(v)
	})
}

// UpdateRejectReason sets the "reject_reason" field to the value that was provided on create.
func (u *WithdrawRecordUpsertOne) UpdateRejectReason() *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.UpdateRejectReason()
	})
}

// SetOperateUserID sets the "operate_user_id" field.
func (u *WithdrawRecordUpsertOne) SetOperateUserID(v int64) *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.SetOperateUserID(v)
	})
}

// UpdateOperateUserID sets the "operate_user_id" field to the value that was provided on create.
func (u *WithdrawRecordUpsertOne) UpdateOperateUserID() *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.UpdateOperateUserID()
	})
}

// SetTransferOrderID sets the "transfer_order_id" field.
func (u *WithdrawRecordUpsertOne) SetTransferOrderID(v int64) *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.SetTransferOrderID(v)
	})
}

// UpdateTransferOrderID sets the "transfer_order_id" field to the value that was provided on create.
func (u *WithdrawRecordUpsertOne) UpdateTransferOrderID() *WithdrawRecordUpsertOne {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.UpdateTransferOrderID()
	})
}

// Exec executes the query.
func (u *WithdrawRecordUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for WithdrawRecordCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WithdrawRecordUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WithdrawRecordUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WithdrawRecordUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WithdrawRecordCreateBulk is the builder for creating many WithdrawRecord entities in bulk.
type WithdrawRecordCreateBulk struct {
	config
	err      error
	builders []*WithdrawRecordCreate
	conflict []sql.ConflictOption
}

// Save creates the WithdrawRecord entities in the database.
func (wrcb *WithdrawRecordCreateBulk) Save(ctx context.Context) ([]*WithdrawRecord, error) {
	if wrcb.err != nil {
		return nil, wrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wrcb.builders))
	nodes := make([]*WithdrawRecord, len(wrcb.builders))
	mutators := make([]Mutator, len(wrcb.builders))
	for i := range wrcb.builders {
		func(i int, root context.Context) {
			builder := wrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WithdrawRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wrcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wrcb *WithdrawRecordCreateBulk) SaveX(ctx context.Context) []*WithdrawRecord {
	v, err := wrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wrcb *WithdrawRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := wrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wrcb *WithdrawRecordCreateBulk) ExecX(ctx context.Context) {
	if err := wrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WithdrawRecord.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WithdrawRecordUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (wrcb *WithdrawRecordCreateBulk) OnConflict(opts ...sql.ConflictOption) *WithdrawRecordUpsertBulk {
	wrcb.conflict = opts
	return &WithdrawRecordUpsertBulk{
		create: wrcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WithdrawRecord.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wrcb *WithdrawRecordCreateBulk) OnConflictColumns(columns ...string) *WithdrawRecordUpsertBulk {
	wrcb.conflict = append(wrcb.conflict, sql.ConflictColumns(columns...))
	return &WithdrawRecordUpsertBulk{
		create: wrcb,
	}
}

// WithdrawRecordUpsertBulk is the builder for "upsert"-ing
// a bulk of WithdrawRecord nodes.
type WithdrawRecordUpsertBulk struct {
	create *WithdrawRecordCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.WithdrawRecord.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(withdrawrecord.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WithdrawRecordUpsertBulk) UpdateNewValues() *WithdrawRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(withdrawrecord.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(withdrawrecord.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WithdrawRecord.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WithdrawRecordUpsertBulk) Ignore() *WithdrawRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WithdrawRecordUpsertBulk) DoNothing() *WithdrawRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WithdrawRecordCreateBulk.OnConflict
// documentation for more info.
func (u *WithdrawRecordUpsertBulk) Update(set func(*WithdrawRecordUpsert)) *WithdrawRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WithdrawRecordUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *WithdrawRecordUpsertBulk) SetCreatedBy(v int64) *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *WithdrawRecordUpsertBulk) AddCreatedBy(v int64) *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *WithdrawRecordUpsertBulk) UpdateCreatedBy() *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *WithdrawRecordUpsertBulk) SetUpdatedBy(v int64) *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *WithdrawRecordUpsertBulk) AddUpdatedBy(v int64) *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *WithdrawRecordUpsertBulk) UpdateUpdatedBy() *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WithdrawRecordUpsertBulk) SetUpdatedAt(v time.Time) *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WithdrawRecordUpsertBulk) UpdateUpdatedAt() *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WithdrawRecordUpsertBulk) SetDeletedAt(v time.Time) *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WithdrawRecordUpsertBulk) UpdateDeletedAt() *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *WithdrawRecordUpsertBulk) SetUserID(v int64) *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *WithdrawRecordUpsertBulk) UpdateUserID() *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.UpdateUserID()
	})
}

// SetWithdrawAccount sets the "withdraw_account" field.
func (u *WithdrawRecordUpsertBulk) SetWithdrawAccount(v string) *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.SetWithdrawAccount(v)
	})
}

// UpdateWithdrawAccount sets the "withdraw_account" field to the value that was provided on create.
func (u *WithdrawRecordUpsertBulk) UpdateWithdrawAccount() *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.UpdateWithdrawAccount()
	})
}

// SetBusinessName sets the "business_name" field.
func (u *WithdrawRecordUpsertBulk) SetBusinessName(v string) *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.SetBusinessName(v)
	})
}

// UpdateBusinessName sets the "business_name" field to the value that was provided on create.
func (u *WithdrawRecordUpsertBulk) UpdateBusinessName() *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.UpdateBusinessName()
	})
}

// SetBank sets the "bank" field.
func (u *WithdrawRecordUpsertBulk) SetBank(v string) *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.SetBank(v)
	})
}

// UpdateBank sets the "bank" field to the value that was provided on create.
func (u *WithdrawRecordUpsertBulk) UpdateBank() *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.UpdateBank()
	})
}

// SetType sets the "type" field.
func (u *WithdrawRecordUpsertBulk) SetType(v enums.WithdrawType) *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *WithdrawRecordUpsertBulk) UpdateType() *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.UpdateType()
	})
}

// SetAmount sets the "amount" field.
func (u *WithdrawRecordUpsertBulk) SetAmount(v int64) *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *WithdrawRecordUpsertBulk) AddAmount(v int64) *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *WithdrawRecordUpsertBulk) UpdateAmount() *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.UpdateAmount()
	})
}

// SetRemainAmount sets the "remain_amount" field.
func (u *WithdrawRecordUpsertBulk) SetRemainAmount(v int64) *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.SetRemainAmount(v)
	})
}

// AddRemainAmount adds v to the "remain_amount" field.
func (u *WithdrawRecordUpsertBulk) AddRemainAmount(v int64) *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.AddRemainAmount(v)
	})
}

// UpdateRemainAmount sets the "remain_amount" field to the value that was provided on create.
func (u *WithdrawRecordUpsertBulk) UpdateRemainAmount() *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.UpdateRemainAmount()
	})
}

// SetRate sets the "rate" field.
func (u *WithdrawRecordUpsertBulk) SetRate(v int64) *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.SetRate(v)
	})
}

// AddRate adds v to the "rate" field.
func (u *WithdrawRecordUpsertBulk) AddRate(v int64) *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.AddRate(v)
	})
}

// UpdateRate sets the "rate" field to the value that was provided on create.
func (u *WithdrawRecordUpsertBulk) UpdateRate() *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.UpdateRate()
	})
}

// SetRealAmount sets the "real_amount" field.
func (u *WithdrawRecordUpsertBulk) SetRealAmount(v int64) *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.SetRealAmount(v)
	})
}

// AddRealAmount adds v to the "real_amount" field.
func (u *WithdrawRecordUpsertBulk) AddRealAmount(v int64) *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.AddRealAmount(v)
	})
}

// UpdateRealAmount sets the "real_amount" field to the value that was provided on create.
func (u *WithdrawRecordUpsertBulk) UpdateRealAmount() *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.UpdateRealAmount()
	})
}

// SetStatus sets the "status" field.
func (u *WithdrawRecordUpsertBulk) SetStatus(v enums.WithdrawStatus) *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *WithdrawRecordUpsertBulk) UpdateStatus() *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.UpdateStatus()
	})
}

// SetRejectReason sets the "reject_reason" field.
func (u *WithdrawRecordUpsertBulk) SetRejectReason(v string) *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.SetRejectReason(v)
	})
}

// UpdateRejectReason sets the "reject_reason" field to the value that was provided on create.
func (u *WithdrawRecordUpsertBulk) UpdateRejectReason() *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.UpdateRejectReason()
	})
}

// SetOperateUserID sets the "operate_user_id" field.
func (u *WithdrawRecordUpsertBulk) SetOperateUserID(v int64) *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.SetOperateUserID(v)
	})
}

// UpdateOperateUserID sets the "operate_user_id" field to the value that was provided on create.
func (u *WithdrawRecordUpsertBulk) UpdateOperateUserID() *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.UpdateOperateUserID()
	})
}

// SetTransferOrderID sets the "transfer_order_id" field.
func (u *WithdrawRecordUpsertBulk) SetTransferOrderID(v int64) *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.SetTransferOrderID(v)
	})
}

// UpdateTransferOrderID sets the "transfer_order_id" field to the value that was provided on create.
func (u *WithdrawRecordUpsertBulk) UpdateTransferOrderID() *WithdrawRecordUpsertBulk {
	return u.Update(func(s *WithdrawRecordUpsert) {
		s.UpdateTransferOrderID()
	})
}

// Exec executes the query.
func (u *WithdrawRecordUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the WithdrawRecordCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for WithdrawRecordCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WithdrawRecordUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
