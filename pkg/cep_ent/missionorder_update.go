// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/bill"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/mission"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionbatch"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/symbol"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// MissionOrderUpdate is the builder for updating MissionOrder entities.
type MissionOrderUpdate struct {
	config
	hooks    []Hook
	mutation *MissionOrderMutation
}

// Where appends a list predicates to the MissionOrderUpdate builder.
func (mou *MissionOrderUpdate) Where(ps ...predicate.MissionOrder) *MissionOrderUpdate {
	mou.mutation.Where(ps...)
	return mou
}

// SetCreatedBy sets the "created_by" field.
func (mou *MissionOrderUpdate) SetCreatedBy(i int64) *MissionOrderUpdate {
	mou.mutation.ResetCreatedBy()
	mou.mutation.SetCreatedBy(i)
	return mou
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mou *MissionOrderUpdate) SetNillableCreatedBy(i *int64) *MissionOrderUpdate {
	if i != nil {
		mou.SetCreatedBy(*i)
	}
	return mou
}

// AddCreatedBy adds i to the "created_by" field.
func (mou *MissionOrderUpdate) AddCreatedBy(i int64) *MissionOrderUpdate {
	mou.mutation.AddCreatedBy(i)
	return mou
}

// SetUpdatedBy sets the "updated_by" field.
func (mou *MissionOrderUpdate) SetUpdatedBy(i int64) *MissionOrderUpdate {
	mou.mutation.ResetUpdatedBy()
	mou.mutation.SetUpdatedBy(i)
	return mou
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mou *MissionOrderUpdate) SetNillableUpdatedBy(i *int64) *MissionOrderUpdate {
	if i != nil {
		mou.SetUpdatedBy(*i)
	}
	return mou
}

// AddUpdatedBy adds i to the "updated_by" field.
func (mou *MissionOrderUpdate) AddUpdatedBy(i int64) *MissionOrderUpdate {
	mou.mutation.AddUpdatedBy(i)
	return mou
}

// SetUpdatedAt sets the "updated_at" field.
func (mou *MissionOrderUpdate) SetUpdatedAt(t time.Time) *MissionOrderUpdate {
	mou.mutation.SetUpdatedAt(t)
	return mou
}

// SetDeletedAt sets the "deleted_at" field.
func (mou *MissionOrderUpdate) SetDeletedAt(t time.Time) *MissionOrderUpdate {
	mou.mutation.SetDeletedAt(t)
	return mou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mou *MissionOrderUpdate) SetNillableDeletedAt(t *time.Time) *MissionOrderUpdate {
	if t != nil {
		mou.SetDeletedAt(*t)
	}
	return mou
}

// SetMissionID sets the "mission_id" field.
func (mou *MissionOrderUpdate) SetMissionID(i int64) *MissionOrderUpdate {
	mou.mutation.SetMissionID(i)
	return mou
}

// SetNillableMissionID sets the "mission_id" field if the given value is not nil.
func (mou *MissionOrderUpdate) SetNillableMissionID(i *int64) *MissionOrderUpdate {
	if i != nil {
		mou.SetMissionID(*i)
	}
	return mou
}

// SetStatus sets the "status" field.
func (mou *MissionOrderUpdate) SetStatus(eos enums.MissionOrderStatus) *MissionOrderUpdate {
	mou.mutation.SetStatus(eos)
	return mou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mou *MissionOrderUpdate) SetNillableStatus(eos *enums.MissionOrderStatus) *MissionOrderUpdate {
	if eos != nil {
		mou.SetStatus(*eos)
	}
	return mou
}

// SetSymbolID sets the "symbol_id" field.
func (mou *MissionOrderUpdate) SetSymbolID(i int64) *MissionOrderUpdate {
	mou.mutation.SetSymbolID(i)
	return mou
}

// SetNillableSymbolID sets the "symbol_id" field if the given value is not nil.
func (mou *MissionOrderUpdate) SetNillableSymbolID(i *int64) *MissionOrderUpdate {
	if i != nil {
		mou.SetSymbolID(*i)
	}
	return mou
}

// SetConsumeUserID sets the "consume_user_id" field.
func (mou *MissionOrderUpdate) SetConsumeUserID(i int64) *MissionOrderUpdate {
	mou.mutation.SetConsumeUserID(i)
	return mou
}

// SetNillableConsumeUserID sets the "consume_user_id" field if the given value is not nil.
func (mou *MissionOrderUpdate) SetNillableConsumeUserID(i *int64) *MissionOrderUpdate {
	if i != nil {
		mou.SetConsumeUserID(*i)
	}
	return mou
}

// SetConsumeAmount sets the "consume_amount" field.
func (mou *MissionOrderUpdate) SetConsumeAmount(i int64) *MissionOrderUpdate {
	mou.mutation.ResetConsumeAmount()
	mou.mutation.SetConsumeAmount(i)
	return mou
}

// SetNillableConsumeAmount sets the "consume_amount" field if the given value is not nil.
func (mou *MissionOrderUpdate) SetNillableConsumeAmount(i *int64) *MissionOrderUpdate {
	if i != nil {
		mou.SetConsumeAmount(*i)
	}
	return mou
}

// AddConsumeAmount adds i to the "consume_amount" field.
func (mou *MissionOrderUpdate) AddConsumeAmount(i int64) *MissionOrderUpdate {
	mou.mutation.AddConsumeAmount(i)
	return mou
}

// SetProduceUserID sets the "produce_user_id" field.
func (mou *MissionOrderUpdate) SetProduceUserID(i int64) *MissionOrderUpdate {
	mou.mutation.SetProduceUserID(i)
	return mou
}

// SetNillableProduceUserID sets the "produce_user_id" field if the given value is not nil.
func (mou *MissionOrderUpdate) SetNillableProduceUserID(i *int64) *MissionOrderUpdate {
	if i != nil {
		mou.SetProduceUserID(*i)
	}
	return mou
}

// SetProduceAmount sets the "produce_amount" field.
func (mou *MissionOrderUpdate) SetProduceAmount(i int64) *MissionOrderUpdate {
	mou.mutation.ResetProduceAmount()
	mou.mutation.SetProduceAmount(i)
	return mou
}

// SetNillableProduceAmount sets the "produce_amount" field if the given value is not nil.
func (mou *MissionOrderUpdate) SetNillableProduceAmount(i *int64) *MissionOrderUpdate {
	if i != nil {
		mou.SetProduceAmount(*i)
	}
	return mou
}

// AddProduceAmount adds i to the "produce_amount" field.
func (mou *MissionOrderUpdate) AddProduceAmount(i int64) *MissionOrderUpdate {
	mou.mutation.AddProduceAmount(i)
	return mou
}

// SetGasAmount sets the "gas_amount" field.
func (mou *MissionOrderUpdate) SetGasAmount(i int64) *MissionOrderUpdate {
	mou.mutation.ResetGasAmount()
	mou.mutation.SetGasAmount(i)
	return mou
}

// SetNillableGasAmount sets the "gas_amount" field if the given value is not nil.
func (mou *MissionOrderUpdate) SetNillableGasAmount(i *int64) *MissionOrderUpdate {
	if i != nil {
		mou.SetGasAmount(*i)
	}
	return mou
}

// AddGasAmount adds i to the "gas_amount" field.
func (mou *MissionOrderUpdate) AddGasAmount(i int64) *MissionOrderUpdate {
	mou.mutation.AddGasAmount(i)
	return mou
}

// SetMissionType sets the "mission_type" field.
func (mou *MissionOrderUpdate) SetMissionType(et enums.MissionType) *MissionOrderUpdate {
	mou.mutation.SetMissionType(et)
	return mou
}

// SetNillableMissionType sets the "mission_type" field if the given value is not nil.
func (mou *MissionOrderUpdate) SetNillableMissionType(et *enums.MissionType) *MissionOrderUpdate {
	if et != nil {
		mou.SetMissionType(*et)
	}
	return mou
}

// SetMissionBillingType sets the "mission_billing_type" field.
func (mou *MissionOrderUpdate) SetMissionBillingType(ebt enums.MissionBillingType) *MissionOrderUpdate {
	mou.mutation.SetMissionBillingType(ebt)
	return mou
}

// SetNillableMissionBillingType sets the "mission_billing_type" field if the given value is not nil.
func (mou *MissionOrderUpdate) SetNillableMissionBillingType(ebt *enums.MissionBillingType) *MissionOrderUpdate {
	if ebt != nil {
		mou.SetMissionBillingType(*ebt)
	}
	return mou
}

// SetCallWay sets the "call_way" field.
func (mou *MissionOrderUpdate) SetCallWay(ecw enums.MissionCallWay) *MissionOrderUpdate {
	mou.mutation.SetCallWay(ecw)
	return mou
}

// SetNillableCallWay sets the "call_way" field if the given value is not nil.
func (mou *MissionOrderUpdate) SetNillableCallWay(ecw *enums.MissionCallWay) *MissionOrderUpdate {
	if ecw != nil {
		mou.SetCallWay(*ecw)
	}
	return mou
}

// SetSerialNumber sets the "serial_number" field.
func (mou *MissionOrderUpdate) SetSerialNumber(s string) *MissionOrderUpdate {
	mou.mutation.SetSerialNumber(s)
	return mou
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (mou *MissionOrderUpdate) SetNillableSerialNumber(s *string) *MissionOrderUpdate {
	if s != nil {
		mou.SetSerialNumber(*s)
	}
	return mou
}

// SetStartedAt sets the "started_at" field.
func (mou *MissionOrderUpdate) SetStartedAt(t time.Time) *MissionOrderUpdate {
	mou.mutation.SetStartedAt(t)
	return mou
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (mou *MissionOrderUpdate) SetNillableStartedAt(t *time.Time) *MissionOrderUpdate {
	if t != nil {
		mou.SetStartedAt(*t)
	}
	return mou
}

// SetFinishedAt sets the "finished_at" field.
func (mou *MissionOrderUpdate) SetFinishedAt(t time.Time) *MissionOrderUpdate {
	mou.mutation.SetFinishedAt(t)
	return mou
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (mou *MissionOrderUpdate) SetNillableFinishedAt(t *time.Time) *MissionOrderUpdate {
	if t != nil {
		mou.SetFinishedAt(*t)
	}
	return mou
}

// SetBuyDuration sets the "buy_duration" field.
func (mou *MissionOrderUpdate) SetBuyDuration(i int64) *MissionOrderUpdate {
	mou.mutation.ResetBuyDuration()
	mou.mutation.SetBuyDuration(i)
	return mou
}

// SetNillableBuyDuration sets the "buy_duration" field if the given value is not nil.
func (mou *MissionOrderUpdate) SetNillableBuyDuration(i *int64) *MissionOrderUpdate {
	if i != nil {
		mou.SetBuyDuration(*i)
	}
	return mou
}

// AddBuyDuration adds i to the "buy_duration" field.
func (mou *MissionOrderUpdate) AddBuyDuration(i int64) *MissionOrderUpdate {
	mou.mutation.AddBuyDuration(i)
	return mou
}

// SetPlanStartedAt sets the "plan_started_at" field.
func (mou *MissionOrderUpdate) SetPlanStartedAt(t time.Time) *MissionOrderUpdate {
	mou.mutation.SetPlanStartedAt(t)
	return mou
}

// SetNillablePlanStartedAt sets the "plan_started_at" field if the given value is not nil.
func (mou *MissionOrderUpdate) SetNillablePlanStartedAt(t *time.Time) *MissionOrderUpdate {
	if t != nil {
		mou.SetPlanStartedAt(*t)
	}
	return mou
}

// ClearPlanStartedAt clears the value of the "plan_started_at" field.
func (mou *MissionOrderUpdate) ClearPlanStartedAt() *MissionOrderUpdate {
	mou.mutation.ClearPlanStartedAt()
	return mou
}

// SetPlanFinishedAt sets the "plan_finished_at" field.
func (mou *MissionOrderUpdate) SetPlanFinishedAt(t time.Time) *MissionOrderUpdate {
	mou.mutation.SetPlanFinishedAt(t)
	return mou
}

// SetNillablePlanFinishedAt sets the "plan_finished_at" field if the given value is not nil.
func (mou *MissionOrderUpdate) SetNillablePlanFinishedAt(t *time.Time) *MissionOrderUpdate {
	if t != nil {
		mou.SetPlanFinishedAt(*t)
	}
	return mou
}

// ClearPlanFinishedAt clears the value of the "plan_finished_at" field.
func (mou *MissionOrderUpdate) ClearPlanFinishedAt() *MissionOrderUpdate {
	mou.mutation.ClearPlanFinishedAt()
	return mou
}

// SetMissionBatchID sets the "mission_batch_id" field.
func (mou *MissionOrderUpdate) SetMissionBatchID(i int64) *MissionOrderUpdate {
	mou.mutation.SetMissionBatchID(i)
	return mou
}

// SetNillableMissionBatchID sets the "mission_batch_id" field if the given value is not nil.
func (mou *MissionOrderUpdate) SetNillableMissionBatchID(i *int64) *MissionOrderUpdate {
	if i != nil {
		mou.SetMissionBatchID(*i)
	}
	return mou
}

// SetMissionBatchNumber sets the "mission_batch_number" field.
func (mou *MissionOrderUpdate) SetMissionBatchNumber(s string) *MissionOrderUpdate {
	mou.mutation.SetMissionBatchNumber(s)
	return mou
}

// SetNillableMissionBatchNumber sets the "mission_batch_number" field if the given value is not nil.
func (mou *MissionOrderUpdate) SetNillableMissionBatchNumber(s *string) *MissionOrderUpdate {
	if s != nil {
		mou.SetMissionBatchNumber(*s)
	}
	return mou
}

// SetConsumeUser sets the "consume_user" edge to the User entity.
func (mou *MissionOrderUpdate) SetConsumeUser(u *User) *MissionOrderUpdate {
	return mou.SetConsumeUserID(u.ID)
}

// SetProduceUser sets the "produce_user" edge to the User entity.
func (mou *MissionOrderUpdate) SetProduceUser(u *User) *MissionOrderUpdate {
	return mou.SetProduceUserID(u.ID)
}

// SetSymbol sets the "symbol" edge to the Symbol entity.
func (mou *MissionOrderUpdate) SetSymbol(s *Symbol) *MissionOrderUpdate {
	return mou.SetSymbolID(s.ID)
}

// AddBillIDs adds the "bills" edge to the Bill entity by IDs.
func (mou *MissionOrderUpdate) AddBillIDs(ids ...int64) *MissionOrderUpdate {
	mou.mutation.AddBillIDs(ids...)
	return mou
}

// AddBills adds the "bills" edges to the Bill entity.
func (mou *MissionOrderUpdate) AddBills(b ...*Bill) *MissionOrderUpdate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return mou.AddBillIDs(ids...)
}

// SetMissionBatch sets the "mission_batch" edge to the MissionBatch entity.
func (mou *MissionOrderUpdate) SetMissionBatch(m *MissionBatch) *MissionOrderUpdate {
	return mou.SetMissionBatchID(m.ID)
}

// SetMission sets the "mission" edge to the Mission entity.
func (mou *MissionOrderUpdate) SetMission(m *Mission) *MissionOrderUpdate {
	return mou.SetMissionID(m.ID)
}

// Mutation returns the MissionOrderMutation object of the builder.
func (mou *MissionOrderUpdate) Mutation() *MissionOrderMutation {
	return mou.mutation
}

// ClearConsumeUser clears the "consume_user" edge to the User entity.
func (mou *MissionOrderUpdate) ClearConsumeUser() *MissionOrderUpdate {
	mou.mutation.ClearConsumeUser()
	return mou
}

// ClearProduceUser clears the "produce_user" edge to the User entity.
func (mou *MissionOrderUpdate) ClearProduceUser() *MissionOrderUpdate {
	mou.mutation.ClearProduceUser()
	return mou
}

// ClearSymbol clears the "symbol" edge to the Symbol entity.
func (mou *MissionOrderUpdate) ClearSymbol() *MissionOrderUpdate {
	mou.mutation.ClearSymbol()
	return mou
}

// ClearBills clears all "bills" edges to the Bill entity.
func (mou *MissionOrderUpdate) ClearBills() *MissionOrderUpdate {
	mou.mutation.ClearBills()
	return mou
}

// RemoveBillIDs removes the "bills" edge to Bill entities by IDs.
func (mou *MissionOrderUpdate) RemoveBillIDs(ids ...int64) *MissionOrderUpdate {
	mou.mutation.RemoveBillIDs(ids...)
	return mou
}

// RemoveBills removes "bills" edges to Bill entities.
func (mou *MissionOrderUpdate) RemoveBills(b ...*Bill) *MissionOrderUpdate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return mou.RemoveBillIDs(ids...)
}

// ClearMissionBatch clears the "mission_batch" edge to the MissionBatch entity.
func (mou *MissionOrderUpdate) ClearMissionBatch() *MissionOrderUpdate {
	mou.mutation.ClearMissionBatch()
	return mou
}

// ClearMission clears the "mission" edge to the Mission entity.
func (mou *MissionOrderUpdate) ClearMission() *MissionOrderUpdate {
	mou.mutation.ClearMission()
	return mou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mou *MissionOrderUpdate) Save(ctx context.Context) (int, error) {
	mou.defaults()
	return withHooks(ctx, mou.sqlSave, mou.mutation, mou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mou *MissionOrderUpdate) SaveX(ctx context.Context) int {
	affected, err := mou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mou *MissionOrderUpdate) Exec(ctx context.Context) error {
	_, err := mou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mou *MissionOrderUpdate) ExecX(ctx context.Context) {
	if err := mou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mou *MissionOrderUpdate) defaults() {
	if _, ok := mou.mutation.UpdatedAt(); !ok {
		v := missionorder.UpdateDefaultUpdatedAt()
		mou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mou *MissionOrderUpdate) check() error {
	if v, ok := mou.mutation.Status(); ok {
		if err := missionorder.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "MissionOrder.status": %w`, err)}
		}
	}
	if v, ok := mou.mutation.MissionType(); ok {
		if err := missionorder.MissionTypeValidator(v); err != nil {
			return &ValidationError{Name: "mission_type", err: fmt.Errorf(`cep_ent: validator failed for field "MissionOrder.mission_type": %w`, err)}
		}
	}
	if v, ok := mou.mutation.MissionBillingType(); ok {
		if err := missionorder.MissionBillingTypeValidator(v); err != nil {
			return &ValidationError{Name: "mission_billing_type", err: fmt.Errorf(`cep_ent: validator failed for field "MissionOrder.mission_billing_type": %w`, err)}
		}
	}
	if v, ok := mou.mutation.CallWay(); ok {
		if err := missionorder.CallWayValidator(v); err != nil {
			return &ValidationError{Name: "call_way", err: fmt.Errorf(`cep_ent: validator failed for field "MissionOrder.call_way": %w`, err)}
		}
	}
	if _, ok := mou.mutation.ConsumeUserID(); mou.mutation.ConsumeUserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionOrder.consume_user"`)
	}
	if _, ok := mou.mutation.ProduceUserID(); mou.mutation.ProduceUserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionOrder.produce_user"`)
	}
	if _, ok := mou.mutation.SymbolID(); mou.mutation.SymbolCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionOrder.symbol"`)
	}
	if _, ok := mou.mutation.MissionBatchID(); mou.mutation.MissionBatchCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionOrder.mission_batch"`)
	}
	if _, ok := mou.mutation.MissionID(); mou.mutation.MissionCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionOrder.mission"`)
	}
	return nil
}

func (mou *MissionOrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(missionorder.Table, missionorder.Columns, sqlgraph.NewFieldSpec(missionorder.FieldID, field.TypeInt64))
	if ps := mou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mou.mutation.CreatedBy(); ok {
		_spec.SetField(missionorder.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mou.mutation.AddedCreatedBy(); ok {
		_spec.AddField(missionorder.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mou.mutation.UpdatedBy(); ok {
		_spec.SetField(missionorder.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mou.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(missionorder.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mou.mutation.UpdatedAt(); ok {
		_spec.SetField(missionorder.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mou.mutation.DeletedAt(); ok {
		_spec.SetField(missionorder.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := mou.mutation.Status(); ok {
		_spec.SetField(missionorder.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := mou.mutation.ConsumeAmount(); ok {
		_spec.SetField(missionorder.FieldConsumeAmount, field.TypeInt64, value)
	}
	if value, ok := mou.mutation.AddedConsumeAmount(); ok {
		_spec.AddField(missionorder.FieldConsumeAmount, field.TypeInt64, value)
	}
	if value, ok := mou.mutation.ProduceAmount(); ok {
		_spec.SetField(missionorder.FieldProduceAmount, field.TypeInt64, value)
	}
	if value, ok := mou.mutation.AddedProduceAmount(); ok {
		_spec.AddField(missionorder.FieldProduceAmount, field.TypeInt64, value)
	}
	if value, ok := mou.mutation.GasAmount(); ok {
		_spec.SetField(missionorder.FieldGasAmount, field.TypeInt64, value)
	}
	if value, ok := mou.mutation.AddedGasAmount(); ok {
		_spec.AddField(missionorder.FieldGasAmount, field.TypeInt64, value)
	}
	if value, ok := mou.mutation.MissionType(); ok {
		_spec.SetField(missionorder.FieldMissionType, field.TypeEnum, value)
	}
	if value, ok := mou.mutation.MissionBillingType(); ok {
		_spec.SetField(missionorder.FieldMissionBillingType, field.TypeEnum, value)
	}
	if value, ok := mou.mutation.CallWay(); ok {
		_spec.SetField(missionorder.FieldCallWay, field.TypeEnum, value)
	}
	if value, ok := mou.mutation.SerialNumber(); ok {
		_spec.SetField(missionorder.FieldSerialNumber, field.TypeString, value)
	}
	if value, ok := mou.mutation.StartedAt(); ok {
		_spec.SetField(missionorder.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := mou.mutation.FinishedAt(); ok {
		_spec.SetField(missionorder.FieldFinishedAt, field.TypeTime, value)
	}
	if value, ok := mou.mutation.BuyDuration(); ok {
		_spec.SetField(missionorder.FieldBuyDuration, field.TypeInt64, value)
	}
	if value, ok := mou.mutation.AddedBuyDuration(); ok {
		_spec.AddField(missionorder.FieldBuyDuration, field.TypeInt64, value)
	}
	if value, ok := mou.mutation.PlanStartedAt(); ok {
		_spec.SetField(missionorder.FieldPlanStartedAt, field.TypeTime, value)
	}
	if mou.mutation.PlanStartedAtCleared() {
		_spec.ClearField(missionorder.FieldPlanStartedAt, field.TypeTime)
	}
	if value, ok := mou.mutation.PlanFinishedAt(); ok {
		_spec.SetField(missionorder.FieldPlanFinishedAt, field.TypeTime, value)
	}
	if mou.mutation.PlanFinishedAtCleared() {
		_spec.ClearField(missionorder.FieldPlanFinishedAt, field.TypeTime)
	}
	if value, ok := mou.mutation.MissionBatchNumber(); ok {
		_spec.SetField(missionorder.FieldMissionBatchNumber, field.TypeString, value)
	}
	if mou.mutation.ConsumeUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionorder.ConsumeUserTable,
			Columns: []string{missionorder.ConsumeUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mou.mutation.ConsumeUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionorder.ConsumeUserTable,
			Columns: []string{missionorder.ConsumeUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mou.mutation.ProduceUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionorder.ProduceUserTable,
			Columns: []string{missionorder.ProduceUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mou.mutation.ProduceUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionorder.ProduceUserTable,
			Columns: []string{missionorder.ProduceUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mou.mutation.SymbolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionorder.SymbolTable,
			Columns: []string{missionorder.SymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mou.mutation.SymbolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionorder.SymbolTable,
			Columns: []string{missionorder.SymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mou.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionorder.BillsTable,
			Columns: []string{missionorder.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mou.mutation.RemovedBillsIDs(); len(nodes) > 0 && !mou.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionorder.BillsTable,
			Columns: []string{missionorder.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mou.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionorder.BillsTable,
			Columns: []string{missionorder.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mou.mutation.MissionBatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionorder.MissionBatchTable,
			Columns: []string{missionorder.MissionBatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionbatch.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mou.mutation.MissionBatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionorder.MissionBatchTable,
			Columns: []string{missionorder.MissionBatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionbatch.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mou.mutation.MissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionorder.MissionTable,
			Columns: []string{missionorder.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mou.mutation.MissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionorder.MissionTable,
			Columns: []string{missionorder.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{missionorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mou.mutation.done = true
	return n, nil
}

// MissionOrderUpdateOne is the builder for updating a single MissionOrder entity.
type MissionOrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MissionOrderMutation
}

// SetCreatedBy sets the "created_by" field.
func (mouo *MissionOrderUpdateOne) SetCreatedBy(i int64) *MissionOrderUpdateOne {
	mouo.mutation.ResetCreatedBy()
	mouo.mutation.SetCreatedBy(i)
	return mouo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mouo *MissionOrderUpdateOne) SetNillableCreatedBy(i *int64) *MissionOrderUpdateOne {
	if i != nil {
		mouo.SetCreatedBy(*i)
	}
	return mouo
}

// AddCreatedBy adds i to the "created_by" field.
func (mouo *MissionOrderUpdateOne) AddCreatedBy(i int64) *MissionOrderUpdateOne {
	mouo.mutation.AddCreatedBy(i)
	return mouo
}

// SetUpdatedBy sets the "updated_by" field.
func (mouo *MissionOrderUpdateOne) SetUpdatedBy(i int64) *MissionOrderUpdateOne {
	mouo.mutation.ResetUpdatedBy()
	mouo.mutation.SetUpdatedBy(i)
	return mouo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mouo *MissionOrderUpdateOne) SetNillableUpdatedBy(i *int64) *MissionOrderUpdateOne {
	if i != nil {
		mouo.SetUpdatedBy(*i)
	}
	return mouo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (mouo *MissionOrderUpdateOne) AddUpdatedBy(i int64) *MissionOrderUpdateOne {
	mouo.mutation.AddUpdatedBy(i)
	return mouo
}

// SetUpdatedAt sets the "updated_at" field.
func (mouo *MissionOrderUpdateOne) SetUpdatedAt(t time.Time) *MissionOrderUpdateOne {
	mouo.mutation.SetUpdatedAt(t)
	return mouo
}

// SetDeletedAt sets the "deleted_at" field.
func (mouo *MissionOrderUpdateOne) SetDeletedAt(t time.Time) *MissionOrderUpdateOne {
	mouo.mutation.SetDeletedAt(t)
	return mouo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mouo *MissionOrderUpdateOne) SetNillableDeletedAt(t *time.Time) *MissionOrderUpdateOne {
	if t != nil {
		mouo.SetDeletedAt(*t)
	}
	return mouo
}

// SetMissionID sets the "mission_id" field.
func (mouo *MissionOrderUpdateOne) SetMissionID(i int64) *MissionOrderUpdateOne {
	mouo.mutation.SetMissionID(i)
	return mouo
}

// SetNillableMissionID sets the "mission_id" field if the given value is not nil.
func (mouo *MissionOrderUpdateOne) SetNillableMissionID(i *int64) *MissionOrderUpdateOne {
	if i != nil {
		mouo.SetMissionID(*i)
	}
	return mouo
}

// SetStatus sets the "status" field.
func (mouo *MissionOrderUpdateOne) SetStatus(eos enums.MissionOrderStatus) *MissionOrderUpdateOne {
	mouo.mutation.SetStatus(eos)
	return mouo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mouo *MissionOrderUpdateOne) SetNillableStatus(eos *enums.MissionOrderStatus) *MissionOrderUpdateOne {
	if eos != nil {
		mouo.SetStatus(*eos)
	}
	return mouo
}

// SetSymbolID sets the "symbol_id" field.
func (mouo *MissionOrderUpdateOne) SetSymbolID(i int64) *MissionOrderUpdateOne {
	mouo.mutation.SetSymbolID(i)
	return mouo
}

// SetNillableSymbolID sets the "symbol_id" field if the given value is not nil.
func (mouo *MissionOrderUpdateOne) SetNillableSymbolID(i *int64) *MissionOrderUpdateOne {
	if i != nil {
		mouo.SetSymbolID(*i)
	}
	return mouo
}

// SetConsumeUserID sets the "consume_user_id" field.
func (mouo *MissionOrderUpdateOne) SetConsumeUserID(i int64) *MissionOrderUpdateOne {
	mouo.mutation.SetConsumeUserID(i)
	return mouo
}

// SetNillableConsumeUserID sets the "consume_user_id" field if the given value is not nil.
func (mouo *MissionOrderUpdateOne) SetNillableConsumeUserID(i *int64) *MissionOrderUpdateOne {
	if i != nil {
		mouo.SetConsumeUserID(*i)
	}
	return mouo
}

// SetConsumeAmount sets the "consume_amount" field.
func (mouo *MissionOrderUpdateOne) SetConsumeAmount(i int64) *MissionOrderUpdateOne {
	mouo.mutation.ResetConsumeAmount()
	mouo.mutation.SetConsumeAmount(i)
	return mouo
}

// SetNillableConsumeAmount sets the "consume_amount" field if the given value is not nil.
func (mouo *MissionOrderUpdateOne) SetNillableConsumeAmount(i *int64) *MissionOrderUpdateOne {
	if i != nil {
		mouo.SetConsumeAmount(*i)
	}
	return mouo
}

// AddConsumeAmount adds i to the "consume_amount" field.
func (mouo *MissionOrderUpdateOne) AddConsumeAmount(i int64) *MissionOrderUpdateOne {
	mouo.mutation.AddConsumeAmount(i)
	return mouo
}

// SetProduceUserID sets the "produce_user_id" field.
func (mouo *MissionOrderUpdateOne) SetProduceUserID(i int64) *MissionOrderUpdateOne {
	mouo.mutation.SetProduceUserID(i)
	return mouo
}

// SetNillableProduceUserID sets the "produce_user_id" field if the given value is not nil.
func (mouo *MissionOrderUpdateOne) SetNillableProduceUserID(i *int64) *MissionOrderUpdateOne {
	if i != nil {
		mouo.SetProduceUserID(*i)
	}
	return mouo
}

// SetProduceAmount sets the "produce_amount" field.
func (mouo *MissionOrderUpdateOne) SetProduceAmount(i int64) *MissionOrderUpdateOne {
	mouo.mutation.ResetProduceAmount()
	mouo.mutation.SetProduceAmount(i)
	return mouo
}

// SetNillableProduceAmount sets the "produce_amount" field if the given value is not nil.
func (mouo *MissionOrderUpdateOne) SetNillableProduceAmount(i *int64) *MissionOrderUpdateOne {
	if i != nil {
		mouo.SetProduceAmount(*i)
	}
	return mouo
}

// AddProduceAmount adds i to the "produce_amount" field.
func (mouo *MissionOrderUpdateOne) AddProduceAmount(i int64) *MissionOrderUpdateOne {
	mouo.mutation.AddProduceAmount(i)
	return mouo
}

// SetGasAmount sets the "gas_amount" field.
func (mouo *MissionOrderUpdateOne) SetGasAmount(i int64) *MissionOrderUpdateOne {
	mouo.mutation.ResetGasAmount()
	mouo.mutation.SetGasAmount(i)
	return mouo
}

// SetNillableGasAmount sets the "gas_amount" field if the given value is not nil.
func (mouo *MissionOrderUpdateOne) SetNillableGasAmount(i *int64) *MissionOrderUpdateOne {
	if i != nil {
		mouo.SetGasAmount(*i)
	}
	return mouo
}

// AddGasAmount adds i to the "gas_amount" field.
func (mouo *MissionOrderUpdateOne) AddGasAmount(i int64) *MissionOrderUpdateOne {
	mouo.mutation.AddGasAmount(i)
	return mouo
}

// SetMissionType sets the "mission_type" field.
func (mouo *MissionOrderUpdateOne) SetMissionType(et enums.MissionType) *MissionOrderUpdateOne {
	mouo.mutation.SetMissionType(et)
	return mouo
}

// SetNillableMissionType sets the "mission_type" field if the given value is not nil.
func (mouo *MissionOrderUpdateOne) SetNillableMissionType(et *enums.MissionType) *MissionOrderUpdateOne {
	if et != nil {
		mouo.SetMissionType(*et)
	}
	return mouo
}

// SetMissionBillingType sets the "mission_billing_type" field.
func (mouo *MissionOrderUpdateOne) SetMissionBillingType(ebt enums.MissionBillingType) *MissionOrderUpdateOne {
	mouo.mutation.SetMissionBillingType(ebt)
	return mouo
}

// SetNillableMissionBillingType sets the "mission_billing_type" field if the given value is not nil.
func (mouo *MissionOrderUpdateOne) SetNillableMissionBillingType(ebt *enums.MissionBillingType) *MissionOrderUpdateOne {
	if ebt != nil {
		mouo.SetMissionBillingType(*ebt)
	}
	return mouo
}

// SetCallWay sets the "call_way" field.
func (mouo *MissionOrderUpdateOne) SetCallWay(ecw enums.MissionCallWay) *MissionOrderUpdateOne {
	mouo.mutation.SetCallWay(ecw)
	return mouo
}

// SetNillableCallWay sets the "call_way" field if the given value is not nil.
func (mouo *MissionOrderUpdateOne) SetNillableCallWay(ecw *enums.MissionCallWay) *MissionOrderUpdateOne {
	if ecw != nil {
		mouo.SetCallWay(*ecw)
	}
	return mouo
}

// SetSerialNumber sets the "serial_number" field.
func (mouo *MissionOrderUpdateOne) SetSerialNumber(s string) *MissionOrderUpdateOne {
	mouo.mutation.SetSerialNumber(s)
	return mouo
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (mouo *MissionOrderUpdateOne) SetNillableSerialNumber(s *string) *MissionOrderUpdateOne {
	if s != nil {
		mouo.SetSerialNumber(*s)
	}
	return mouo
}

// SetStartedAt sets the "started_at" field.
func (mouo *MissionOrderUpdateOne) SetStartedAt(t time.Time) *MissionOrderUpdateOne {
	mouo.mutation.SetStartedAt(t)
	return mouo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (mouo *MissionOrderUpdateOne) SetNillableStartedAt(t *time.Time) *MissionOrderUpdateOne {
	if t != nil {
		mouo.SetStartedAt(*t)
	}
	return mouo
}

// SetFinishedAt sets the "finished_at" field.
func (mouo *MissionOrderUpdateOne) SetFinishedAt(t time.Time) *MissionOrderUpdateOne {
	mouo.mutation.SetFinishedAt(t)
	return mouo
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (mouo *MissionOrderUpdateOne) SetNillableFinishedAt(t *time.Time) *MissionOrderUpdateOne {
	if t != nil {
		mouo.SetFinishedAt(*t)
	}
	return mouo
}

// SetBuyDuration sets the "buy_duration" field.
func (mouo *MissionOrderUpdateOne) SetBuyDuration(i int64) *MissionOrderUpdateOne {
	mouo.mutation.ResetBuyDuration()
	mouo.mutation.SetBuyDuration(i)
	return mouo
}

// SetNillableBuyDuration sets the "buy_duration" field if the given value is not nil.
func (mouo *MissionOrderUpdateOne) SetNillableBuyDuration(i *int64) *MissionOrderUpdateOne {
	if i != nil {
		mouo.SetBuyDuration(*i)
	}
	return mouo
}

// AddBuyDuration adds i to the "buy_duration" field.
func (mouo *MissionOrderUpdateOne) AddBuyDuration(i int64) *MissionOrderUpdateOne {
	mouo.mutation.AddBuyDuration(i)
	return mouo
}

// SetPlanStartedAt sets the "plan_started_at" field.
func (mouo *MissionOrderUpdateOne) SetPlanStartedAt(t time.Time) *MissionOrderUpdateOne {
	mouo.mutation.SetPlanStartedAt(t)
	return mouo
}

// SetNillablePlanStartedAt sets the "plan_started_at" field if the given value is not nil.
func (mouo *MissionOrderUpdateOne) SetNillablePlanStartedAt(t *time.Time) *MissionOrderUpdateOne {
	if t != nil {
		mouo.SetPlanStartedAt(*t)
	}
	return mouo
}

// ClearPlanStartedAt clears the value of the "plan_started_at" field.
func (mouo *MissionOrderUpdateOne) ClearPlanStartedAt() *MissionOrderUpdateOne {
	mouo.mutation.ClearPlanStartedAt()
	return mouo
}

// SetPlanFinishedAt sets the "plan_finished_at" field.
func (mouo *MissionOrderUpdateOne) SetPlanFinishedAt(t time.Time) *MissionOrderUpdateOne {
	mouo.mutation.SetPlanFinishedAt(t)
	return mouo
}

// SetNillablePlanFinishedAt sets the "plan_finished_at" field if the given value is not nil.
func (mouo *MissionOrderUpdateOne) SetNillablePlanFinishedAt(t *time.Time) *MissionOrderUpdateOne {
	if t != nil {
		mouo.SetPlanFinishedAt(*t)
	}
	return mouo
}

// ClearPlanFinishedAt clears the value of the "plan_finished_at" field.
func (mouo *MissionOrderUpdateOne) ClearPlanFinishedAt() *MissionOrderUpdateOne {
	mouo.mutation.ClearPlanFinishedAt()
	return mouo
}

// SetMissionBatchID sets the "mission_batch_id" field.
func (mouo *MissionOrderUpdateOne) SetMissionBatchID(i int64) *MissionOrderUpdateOne {
	mouo.mutation.SetMissionBatchID(i)
	return mouo
}

// SetNillableMissionBatchID sets the "mission_batch_id" field if the given value is not nil.
func (mouo *MissionOrderUpdateOne) SetNillableMissionBatchID(i *int64) *MissionOrderUpdateOne {
	if i != nil {
		mouo.SetMissionBatchID(*i)
	}
	return mouo
}

// SetMissionBatchNumber sets the "mission_batch_number" field.
func (mouo *MissionOrderUpdateOne) SetMissionBatchNumber(s string) *MissionOrderUpdateOne {
	mouo.mutation.SetMissionBatchNumber(s)
	return mouo
}

// SetNillableMissionBatchNumber sets the "mission_batch_number" field if the given value is not nil.
func (mouo *MissionOrderUpdateOne) SetNillableMissionBatchNumber(s *string) *MissionOrderUpdateOne {
	if s != nil {
		mouo.SetMissionBatchNumber(*s)
	}
	return mouo
}

// SetConsumeUser sets the "consume_user" edge to the User entity.
func (mouo *MissionOrderUpdateOne) SetConsumeUser(u *User) *MissionOrderUpdateOne {
	return mouo.SetConsumeUserID(u.ID)
}

// SetProduceUser sets the "produce_user" edge to the User entity.
func (mouo *MissionOrderUpdateOne) SetProduceUser(u *User) *MissionOrderUpdateOne {
	return mouo.SetProduceUserID(u.ID)
}

// SetSymbol sets the "symbol" edge to the Symbol entity.
func (mouo *MissionOrderUpdateOne) SetSymbol(s *Symbol) *MissionOrderUpdateOne {
	return mouo.SetSymbolID(s.ID)
}

// AddBillIDs adds the "bills" edge to the Bill entity by IDs.
func (mouo *MissionOrderUpdateOne) AddBillIDs(ids ...int64) *MissionOrderUpdateOne {
	mouo.mutation.AddBillIDs(ids...)
	return mouo
}

// AddBills adds the "bills" edges to the Bill entity.
func (mouo *MissionOrderUpdateOne) AddBills(b ...*Bill) *MissionOrderUpdateOne {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return mouo.AddBillIDs(ids...)
}

// SetMissionBatch sets the "mission_batch" edge to the MissionBatch entity.
func (mouo *MissionOrderUpdateOne) SetMissionBatch(m *MissionBatch) *MissionOrderUpdateOne {
	return mouo.SetMissionBatchID(m.ID)
}

// SetMission sets the "mission" edge to the Mission entity.
func (mouo *MissionOrderUpdateOne) SetMission(m *Mission) *MissionOrderUpdateOne {
	return mouo.SetMissionID(m.ID)
}

// Mutation returns the MissionOrderMutation object of the builder.
func (mouo *MissionOrderUpdateOne) Mutation() *MissionOrderMutation {
	return mouo.mutation
}

// ClearConsumeUser clears the "consume_user" edge to the User entity.
func (mouo *MissionOrderUpdateOne) ClearConsumeUser() *MissionOrderUpdateOne {
	mouo.mutation.ClearConsumeUser()
	return mouo
}

// ClearProduceUser clears the "produce_user" edge to the User entity.
func (mouo *MissionOrderUpdateOne) ClearProduceUser() *MissionOrderUpdateOne {
	mouo.mutation.ClearProduceUser()
	return mouo
}

// ClearSymbol clears the "symbol" edge to the Symbol entity.
func (mouo *MissionOrderUpdateOne) ClearSymbol() *MissionOrderUpdateOne {
	mouo.mutation.ClearSymbol()
	return mouo
}

// ClearBills clears all "bills" edges to the Bill entity.
func (mouo *MissionOrderUpdateOne) ClearBills() *MissionOrderUpdateOne {
	mouo.mutation.ClearBills()
	return mouo
}

// RemoveBillIDs removes the "bills" edge to Bill entities by IDs.
func (mouo *MissionOrderUpdateOne) RemoveBillIDs(ids ...int64) *MissionOrderUpdateOne {
	mouo.mutation.RemoveBillIDs(ids...)
	return mouo
}

// RemoveBills removes "bills" edges to Bill entities.
func (mouo *MissionOrderUpdateOne) RemoveBills(b ...*Bill) *MissionOrderUpdateOne {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return mouo.RemoveBillIDs(ids...)
}

// ClearMissionBatch clears the "mission_batch" edge to the MissionBatch entity.
func (mouo *MissionOrderUpdateOne) ClearMissionBatch() *MissionOrderUpdateOne {
	mouo.mutation.ClearMissionBatch()
	return mouo
}

// ClearMission clears the "mission" edge to the Mission entity.
func (mouo *MissionOrderUpdateOne) ClearMission() *MissionOrderUpdateOne {
	mouo.mutation.ClearMission()
	return mouo
}

// Where appends a list predicates to the MissionOrderUpdate builder.
func (mouo *MissionOrderUpdateOne) Where(ps ...predicate.MissionOrder) *MissionOrderUpdateOne {
	mouo.mutation.Where(ps...)
	return mouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mouo *MissionOrderUpdateOne) Select(field string, fields ...string) *MissionOrderUpdateOne {
	mouo.fields = append([]string{field}, fields...)
	return mouo
}

// Save executes the query and returns the updated MissionOrder entity.
func (mouo *MissionOrderUpdateOne) Save(ctx context.Context) (*MissionOrder, error) {
	mouo.defaults()
	return withHooks(ctx, mouo.sqlSave, mouo.mutation, mouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mouo *MissionOrderUpdateOne) SaveX(ctx context.Context) *MissionOrder {
	node, err := mouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mouo *MissionOrderUpdateOne) Exec(ctx context.Context) error {
	_, err := mouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mouo *MissionOrderUpdateOne) ExecX(ctx context.Context) {
	if err := mouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mouo *MissionOrderUpdateOne) defaults() {
	if _, ok := mouo.mutation.UpdatedAt(); !ok {
		v := missionorder.UpdateDefaultUpdatedAt()
		mouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mouo *MissionOrderUpdateOne) check() error {
	if v, ok := mouo.mutation.Status(); ok {
		if err := missionorder.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "MissionOrder.status": %w`, err)}
		}
	}
	if v, ok := mouo.mutation.MissionType(); ok {
		if err := missionorder.MissionTypeValidator(v); err != nil {
			return &ValidationError{Name: "mission_type", err: fmt.Errorf(`cep_ent: validator failed for field "MissionOrder.mission_type": %w`, err)}
		}
	}
	if v, ok := mouo.mutation.MissionBillingType(); ok {
		if err := missionorder.MissionBillingTypeValidator(v); err != nil {
			return &ValidationError{Name: "mission_billing_type", err: fmt.Errorf(`cep_ent: validator failed for field "MissionOrder.mission_billing_type": %w`, err)}
		}
	}
	if v, ok := mouo.mutation.CallWay(); ok {
		if err := missionorder.CallWayValidator(v); err != nil {
			return &ValidationError{Name: "call_way", err: fmt.Errorf(`cep_ent: validator failed for field "MissionOrder.call_way": %w`, err)}
		}
	}
	if _, ok := mouo.mutation.ConsumeUserID(); mouo.mutation.ConsumeUserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionOrder.consume_user"`)
	}
	if _, ok := mouo.mutation.ProduceUserID(); mouo.mutation.ProduceUserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionOrder.produce_user"`)
	}
	if _, ok := mouo.mutation.SymbolID(); mouo.mutation.SymbolCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionOrder.symbol"`)
	}
	if _, ok := mouo.mutation.MissionBatchID(); mouo.mutation.MissionBatchCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionOrder.mission_batch"`)
	}
	if _, ok := mouo.mutation.MissionID(); mouo.mutation.MissionCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionOrder.mission"`)
	}
	return nil
}

func (mouo *MissionOrderUpdateOne) sqlSave(ctx context.Context) (_node *MissionOrder, err error) {
	if err := mouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(missionorder.Table, missionorder.Columns, sqlgraph.NewFieldSpec(missionorder.FieldID, field.TypeInt64))
	id, ok := mouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "MissionOrder.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, missionorder.FieldID)
		for _, f := range fields {
			if !missionorder.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != missionorder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mouo.mutation.CreatedBy(); ok {
		_spec.SetField(missionorder.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mouo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(missionorder.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mouo.mutation.UpdatedBy(); ok {
		_spec.SetField(missionorder.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mouo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(missionorder.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mouo.mutation.UpdatedAt(); ok {
		_spec.SetField(missionorder.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mouo.mutation.DeletedAt(); ok {
		_spec.SetField(missionorder.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := mouo.mutation.Status(); ok {
		_spec.SetField(missionorder.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := mouo.mutation.ConsumeAmount(); ok {
		_spec.SetField(missionorder.FieldConsumeAmount, field.TypeInt64, value)
	}
	if value, ok := mouo.mutation.AddedConsumeAmount(); ok {
		_spec.AddField(missionorder.FieldConsumeAmount, field.TypeInt64, value)
	}
	if value, ok := mouo.mutation.ProduceAmount(); ok {
		_spec.SetField(missionorder.FieldProduceAmount, field.TypeInt64, value)
	}
	if value, ok := mouo.mutation.AddedProduceAmount(); ok {
		_spec.AddField(missionorder.FieldProduceAmount, field.TypeInt64, value)
	}
	if value, ok := mouo.mutation.GasAmount(); ok {
		_spec.SetField(missionorder.FieldGasAmount, field.TypeInt64, value)
	}
	if value, ok := mouo.mutation.AddedGasAmount(); ok {
		_spec.AddField(missionorder.FieldGasAmount, field.TypeInt64, value)
	}
	if value, ok := mouo.mutation.MissionType(); ok {
		_spec.SetField(missionorder.FieldMissionType, field.TypeEnum, value)
	}
	if value, ok := mouo.mutation.MissionBillingType(); ok {
		_spec.SetField(missionorder.FieldMissionBillingType, field.TypeEnum, value)
	}
	if value, ok := mouo.mutation.CallWay(); ok {
		_spec.SetField(missionorder.FieldCallWay, field.TypeEnum, value)
	}
	if value, ok := mouo.mutation.SerialNumber(); ok {
		_spec.SetField(missionorder.FieldSerialNumber, field.TypeString, value)
	}
	if value, ok := mouo.mutation.StartedAt(); ok {
		_spec.SetField(missionorder.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := mouo.mutation.FinishedAt(); ok {
		_spec.SetField(missionorder.FieldFinishedAt, field.TypeTime, value)
	}
	if value, ok := mouo.mutation.BuyDuration(); ok {
		_spec.SetField(missionorder.FieldBuyDuration, field.TypeInt64, value)
	}
	if value, ok := mouo.mutation.AddedBuyDuration(); ok {
		_spec.AddField(missionorder.FieldBuyDuration, field.TypeInt64, value)
	}
	if value, ok := mouo.mutation.PlanStartedAt(); ok {
		_spec.SetField(missionorder.FieldPlanStartedAt, field.TypeTime, value)
	}
	if mouo.mutation.PlanStartedAtCleared() {
		_spec.ClearField(missionorder.FieldPlanStartedAt, field.TypeTime)
	}
	if value, ok := mouo.mutation.PlanFinishedAt(); ok {
		_spec.SetField(missionorder.FieldPlanFinishedAt, field.TypeTime, value)
	}
	if mouo.mutation.PlanFinishedAtCleared() {
		_spec.ClearField(missionorder.FieldPlanFinishedAt, field.TypeTime)
	}
	if value, ok := mouo.mutation.MissionBatchNumber(); ok {
		_spec.SetField(missionorder.FieldMissionBatchNumber, field.TypeString, value)
	}
	if mouo.mutation.ConsumeUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionorder.ConsumeUserTable,
			Columns: []string{missionorder.ConsumeUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mouo.mutation.ConsumeUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionorder.ConsumeUserTable,
			Columns: []string{missionorder.ConsumeUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mouo.mutation.ProduceUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionorder.ProduceUserTable,
			Columns: []string{missionorder.ProduceUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mouo.mutation.ProduceUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionorder.ProduceUserTable,
			Columns: []string{missionorder.ProduceUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mouo.mutation.SymbolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionorder.SymbolTable,
			Columns: []string{missionorder.SymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mouo.mutation.SymbolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionorder.SymbolTable,
			Columns: []string{missionorder.SymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mouo.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionorder.BillsTable,
			Columns: []string{missionorder.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mouo.mutation.RemovedBillsIDs(); len(nodes) > 0 && !mouo.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionorder.BillsTable,
			Columns: []string{missionorder.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mouo.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionorder.BillsTable,
			Columns: []string{missionorder.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mouo.mutation.MissionBatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionorder.MissionBatchTable,
			Columns: []string{missionorder.MissionBatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionbatch.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mouo.mutation.MissionBatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionorder.MissionBatchTable,
			Columns: []string{missionorder.MissionBatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionbatch.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mouo.mutation.MissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionorder.MissionTable,
			Columns: []string{missionorder.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mouo.mutation.MissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionorder.MissionTable,
			Columns: []string{missionorder.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MissionOrder{config: mouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{missionorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mouo.mutation.done = true
	return _node, nil
}
