// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/bill"
	"cephalon-ent/pkg/cep_ent/missionconsumeorder"
	"cephalon-ent/pkg/cep_ent/missionproduceorder"
	"cephalon-ent/pkg/cep_ent/platformwallet"
	"cephalon-ent/pkg/cep_ent/predicate"
	"cephalon-ent/pkg/cep_ent/rechargeorder"
	"cephalon-ent/pkg/cep_ent/user"
	"cephalon-ent/pkg/cep_ent/wallet"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BillUpdate is the builder for updating Bill entities.
type BillUpdate struct {
	config
	hooks    []Hook
	mutation *BillMutation
}

// Where appends a list predicates to the BillUpdate builder.
func (bu *BillUpdate) Where(ps ...predicate.Bill) *BillUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetCreatedBy sets the "created_by" field.
func (bu *BillUpdate) SetCreatedBy(i int64) *BillUpdate {
	bu.mutation.ResetCreatedBy()
	bu.mutation.SetCreatedBy(i)
	return bu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (bu *BillUpdate) SetNillableCreatedBy(i *int64) *BillUpdate {
	if i != nil {
		bu.SetCreatedBy(*i)
	}
	return bu
}

// AddCreatedBy adds i to the "created_by" field.
func (bu *BillUpdate) AddCreatedBy(i int64) *BillUpdate {
	bu.mutation.AddCreatedBy(i)
	return bu
}

// SetUpdatedBy sets the "updated_by" field.
func (bu *BillUpdate) SetUpdatedBy(i int64) *BillUpdate {
	bu.mutation.ResetUpdatedBy()
	bu.mutation.SetUpdatedBy(i)
	return bu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (bu *BillUpdate) SetNillableUpdatedBy(i *int64) *BillUpdate {
	if i != nil {
		bu.SetUpdatedBy(*i)
	}
	return bu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (bu *BillUpdate) AddUpdatedBy(i int64) *BillUpdate {
	bu.mutation.AddUpdatedBy(i)
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BillUpdate) SetUpdatedAt(t time.Time) *BillUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// SetDeletedAt sets the "deleted_at" field.
func (bu *BillUpdate) SetDeletedAt(t time.Time) *BillUpdate {
	bu.mutation.SetDeletedAt(t)
	return bu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bu *BillUpdate) SetNillableDeletedAt(t *time.Time) *BillUpdate {
	if t != nil {
		bu.SetDeletedAt(*t)
	}
	return bu
}

// SetType sets the "type" field.
func (bu *BillUpdate) SetType(b bill.Type) *BillUpdate {
	bu.mutation.SetType(b)
	return bu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (bu *BillUpdate) SetNillableType(b *bill.Type) *BillUpdate {
	if b != nil {
		bu.SetType(*b)
	}
	return bu
}

// SetIsAdd sets the "is_add" field.
func (bu *BillUpdate) SetIsAdd(b bool) *BillUpdate {
	bu.mutation.SetIsAdd(b)
	return bu
}

// SetNillableIsAdd sets the "is_add" field if the given value is not nil.
func (bu *BillUpdate) SetNillableIsAdd(b *bool) *BillUpdate {
	if b != nil {
		bu.SetIsAdd(*b)
	}
	return bu
}

// SetUserID sets the "user_id" field.
func (bu *BillUpdate) SetUserID(i int64) *BillUpdate {
	bu.mutation.SetUserID(i)
	return bu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (bu *BillUpdate) SetNillableUserID(i *int64) *BillUpdate {
	if i != nil {
		bu.SetUserID(*i)
	}
	return bu
}

// SetSerialNumber sets the "serial_number" field.
func (bu *BillUpdate) SetSerialNumber(s string) *BillUpdate {
	bu.mutation.SetSerialNumber(s)
	return bu
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (bu *BillUpdate) SetNillableSerialNumber(s *string) *BillUpdate {
	if s != nil {
		bu.SetSerialNumber(*s)
	}
	return bu
}

// SetWalletID sets the "wallet_id" field.
func (bu *BillUpdate) SetWalletID(i int64) *BillUpdate {
	bu.mutation.SetWalletID(i)
	return bu
}

// SetNillableWalletID sets the "wallet_id" field if the given value is not nil.
func (bu *BillUpdate) SetNillableWalletID(i *int64) *BillUpdate {
	if i != nil {
		bu.SetWalletID(*i)
	}
	return bu
}

// SetCep sets the "cep" field.
func (bu *BillUpdate) SetCep(i int64) *BillUpdate {
	bu.mutation.ResetCep()
	bu.mutation.SetCep(i)
	return bu
}

// SetNillableCep sets the "cep" field if the given value is not nil.
func (bu *BillUpdate) SetNillableCep(i *int64) *BillUpdate {
	if i != nil {
		bu.SetCep(*i)
	}
	return bu
}

// AddCep adds i to the "cep" field.
func (bu *BillUpdate) AddCep(i int64) *BillUpdate {
	bu.mutation.AddCep(i)
	return bu
}

// SetReasonID sets the "reason_id" field.
func (bu *BillUpdate) SetReasonID(i int64) *BillUpdate {
	bu.mutation.SetReasonID(i)
	return bu
}

// SetNillableReasonID sets the "reason_id" field if the given value is not nil.
func (bu *BillUpdate) SetNillableReasonID(i *int64) *BillUpdate {
	if i != nil {
		bu.SetReasonID(*i)
	}
	return bu
}

// ClearReasonID clears the value of the "reason_id" field.
func (bu *BillUpdate) ClearReasonID() *BillUpdate {
	bu.mutation.ClearReasonID()
	return bu
}

// SetStatus sets the "status" field.
func (bu *BillUpdate) SetStatus(b bill.Status) *BillUpdate {
	bu.mutation.SetStatus(b)
	return bu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bu *BillUpdate) SetNillableStatus(b *bill.Status) *BillUpdate {
	if b != nil {
		bu.SetStatus(*b)
	}
	return bu
}

// SetMarketBillID sets the "market_bill_id" field.
func (bu *BillUpdate) SetMarketBillID(i int64) *BillUpdate {
	bu.mutation.ResetMarketBillID()
	bu.mutation.SetMarketBillID(i)
	return bu
}

// SetNillableMarketBillID sets the "market_bill_id" field if the given value is not nil.
func (bu *BillUpdate) SetNillableMarketBillID(i *int64) *BillUpdate {
	if i != nil {
		bu.SetMarketBillID(*i)
	}
	return bu
}

// AddMarketBillID adds i to the "market_bill_id" field.
func (bu *BillUpdate) AddMarketBillID(i int64) *BillUpdate {
	bu.mutation.AddMarketBillID(i)
	return bu
}

// SetPlatformWalletID sets the "platform_wallet_id" field.
func (bu *BillUpdate) SetPlatformWalletID(i int64) *BillUpdate {
	bu.mutation.SetPlatformWalletID(i)
	return bu
}

// SetNillablePlatformWalletID sets the "platform_wallet_id" field if the given value is not nil.
func (bu *BillUpdate) SetNillablePlatformWalletID(i *int64) *BillUpdate {
	if i != nil {
		bu.SetPlatformWalletID(*i)
	}
	return bu
}

// SetPlatformCep sets the "platform_cep" field.
func (bu *BillUpdate) SetPlatformCep(i int64) *BillUpdate {
	bu.mutation.ResetPlatformCep()
	bu.mutation.SetPlatformCep(i)
	return bu
}

// SetNillablePlatformCep sets the "platform_cep" field if the given value is not nil.
func (bu *BillUpdate) SetNillablePlatformCep(i *int64) *BillUpdate {
	if i != nil {
		bu.SetPlatformCep(*i)
	}
	return bu
}

// AddPlatformCep adds i to the "platform_cep" field.
func (bu *BillUpdate) AddPlatformCep(i int64) *BillUpdate {
	bu.mutation.AddPlatformCep(i)
	return bu
}

// SetUser sets the "user" edge to the User entity.
func (bu *BillUpdate) SetUser(u *User) *BillUpdate {
	return bu.SetUserID(u.ID)
}

// SetWallet sets the "wallet" edge to the Wallet entity.
func (bu *BillUpdate) SetWallet(w *Wallet) *BillUpdate {
	return bu.SetWalletID(w.ID)
}

// SetPlatformWallet sets the "platform_wallet" edge to the PlatformWallet entity.
func (bu *BillUpdate) SetPlatformWallet(p *PlatformWallet) *BillUpdate {
	return bu.SetPlatformWalletID(p.ID)
}

// SetRechargeOrderID sets the "recharge_order" edge to the RechargeOrder entity by ID.
func (bu *BillUpdate) SetRechargeOrderID(id int64) *BillUpdate {
	bu.mutation.SetRechargeOrderID(id)
	return bu
}

// SetNillableRechargeOrderID sets the "recharge_order" edge to the RechargeOrder entity by ID if the given value is not nil.
func (bu *BillUpdate) SetNillableRechargeOrderID(id *int64) *BillUpdate {
	if id != nil {
		bu = bu.SetRechargeOrderID(*id)
	}
	return bu
}

// SetRechargeOrder sets the "recharge_order" edge to the RechargeOrder entity.
func (bu *BillUpdate) SetRechargeOrder(r *RechargeOrder) *BillUpdate {
	return bu.SetRechargeOrderID(r.ID)
}

// SetMissionConsumeOrderID sets the "mission_consume_order" edge to the MissionConsumeOrder entity by ID.
func (bu *BillUpdate) SetMissionConsumeOrderID(id int64) *BillUpdate {
	bu.mutation.SetMissionConsumeOrderID(id)
	return bu
}

// SetNillableMissionConsumeOrderID sets the "mission_consume_order" edge to the MissionConsumeOrder entity by ID if the given value is not nil.
func (bu *BillUpdate) SetNillableMissionConsumeOrderID(id *int64) *BillUpdate {
	if id != nil {
		bu = bu.SetMissionConsumeOrderID(*id)
	}
	return bu
}

// SetMissionConsumeOrder sets the "mission_consume_order" edge to the MissionConsumeOrder entity.
func (bu *BillUpdate) SetMissionConsumeOrder(m *MissionConsumeOrder) *BillUpdate {
	return bu.SetMissionConsumeOrderID(m.ID)
}

// SetMissionProduceOrderID sets the "mission_produce_order" edge to the MissionProduceOrder entity by ID.
func (bu *BillUpdate) SetMissionProduceOrderID(id int64) *BillUpdate {
	bu.mutation.SetMissionProduceOrderID(id)
	return bu
}

// SetNillableMissionProduceOrderID sets the "mission_produce_order" edge to the MissionProduceOrder entity by ID if the given value is not nil.
func (bu *BillUpdate) SetNillableMissionProduceOrderID(id *int64) *BillUpdate {
	if id != nil {
		bu = bu.SetMissionProduceOrderID(*id)
	}
	return bu
}

// SetMissionProduceOrder sets the "mission_produce_order" edge to the MissionProduceOrder entity.
func (bu *BillUpdate) SetMissionProduceOrder(m *MissionProduceOrder) *BillUpdate {
	return bu.SetMissionProduceOrderID(m.ID)
}

// Mutation returns the BillMutation object of the builder.
func (bu *BillUpdate) Mutation() *BillMutation {
	return bu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (bu *BillUpdate) ClearUser() *BillUpdate {
	bu.mutation.ClearUser()
	return bu
}

// ClearWallet clears the "wallet" edge to the Wallet entity.
func (bu *BillUpdate) ClearWallet() *BillUpdate {
	bu.mutation.ClearWallet()
	return bu
}

// ClearPlatformWallet clears the "platform_wallet" edge to the PlatformWallet entity.
func (bu *BillUpdate) ClearPlatformWallet() *BillUpdate {
	bu.mutation.ClearPlatformWallet()
	return bu
}

// ClearRechargeOrder clears the "recharge_order" edge to the RechargeOrder entity.
func (bu *BillUpdate) ClearRechargeOrder() *BillUpdate {
	bu.mutation.ClearRechargeOrder()
	return bu
}

// ClearMissionConsumeOrder clears the "mission_consume_order" edge to the MissionConsumeOrder entity.
func (bu *BillUpdate) ClearMissionConsumeOrder() *BillUpdate {
	bu.mutation.ClearMissionConsumeOrder()
	return bu
}

// ClearMissionProduceOrder clears the "mission_produce_order" edge to the MissionProduceOrder entity.
func (bu *BillUpdate) ClearMissionProduceOrder() *BillUpdate {
	bu.mutation.ClearMissionProduceOrder()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BillUpdate) Save(ctx context.Context) (int, error) {
	bu.defaults()
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BillUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BillUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BillUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BillUpdate) defaults() {
	if _, ok := bu.mutation.UpdatedAt(); !ok {
		v := bill.UpdateDefaultUpdatedAt()
		bu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BillUpdate) check() error {
	if v, ok := bu.mutation.GetType(); ok {
		if err := bill.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "Bill.type": %w`, err)}
		}
	}
	if v, ok := bu.mutation.Status(); ok {
		if err := bill.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "Bill.status": %w`, err)}
		}
	}
	if _, ok := bu.mutation.UserID(); bu.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "Bill.user"`)
	}
	if _, ok := bu.mutation.WalletID(); bu.mutation.WalletCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "Bill.wallet"`)
	}
	if _, ok := bu.mutation.PlatformWalletID(); bu.mutation.PlatformWalletCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "Bill.platform_wallet"`)
	}
	return nil
}

func (bu *BillUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(bill.Table, bill.Columns, sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.CreatedBy(); ok {
		_spec.SetField(bill.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(bill.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.UpdatedBy(); ok {
		_spec.SetField(bill.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(bill.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(bill.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.DeletedAt(); ok {
		_spec.SetField(bill.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.GetType(); ok {
		_spec.SetField(bill.FieldType, field.TypeEnum, value)
	}
	if value, ok := bu.mutation.IsAdd(); ok {
		_spec.SetField(bill.FieldIsAdd, field.TypeBool, value)
	}
	if value, ok := bu.mutation.SerialNumber(); ok {
		_spec.SetField(bill.FieldSerialNumber, field.TypeString, value)
	}
	if value, ok := bu.mutation.Cep(); ok {
		_spec.SetField(bill.FieldCep, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedCep(); ok {
		_spec.AddField(bill.FieldCep, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.Status(); ok {
		_spec.SetField(bill.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := bu.mutation.MarketBillID(); ok {
		_spec.SetField(bill.FieldMarketBillID, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedMarketBillID(); ok {
		_spec.AddField(bill.FieldMarketBillID, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.PlatformCep(); ok {
		_spec.SetField(bill.FieldPlatformCep, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedPlatformCep(); ok {
		_spec.AddField(bill.FieldPlatformCep, field.TypeInt64, value)
	}
	if bu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.UserTable,
			Columns: []string{bill.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.UserTable,
			Columns: []string{bill.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.WalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.WalletTable,
			Columns: []string{bill.WalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.WalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.WalletTable,
			Columns: []string{bill.WalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.PlatformWalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.PlatformWalletTable,
			Columns: []string{bill.PlatformWalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformwallet.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.PlatformWalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.PlatformWalletTable,
			Columns: []string{bill.PlatformWalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformwallet.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.RechargeOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.RechargeOrderTable,
			Columns: []string{bill.RechargeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rechargeorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RechargeOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.RechargeOrderTable,
			Columns: []string{bill.RechargeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rechargeorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.MissionConsumeOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.MissionConsumeOrderTable,
			Columns: []string{bill.MissionConsumeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.MissionConsumeOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.MissionConsumeOrderTable,
			Columns: []string{bill.MissionConsumeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.MissionProduceOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.MissionProduceOrderTable,
			Columns: []string{bill.MissionProduceOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.MissionProduceOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.MissionProduceOrderTable,
			Columns: []string{bill.MissionProduceOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BillUpdateOne is the builder for updating a single Bill entity.
type BillUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillMutation
}

// SetCreatedBy sets the "created_by" field.
func (buo *BillUpdateOne) SetCreatedBy(i int64) *BillUpdateOne {
	buo.mutation.ResetCreatedBy()
	buo.mutation.SetCreatedBy(i)
	return buo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableCreatedBy(i *int64) *BillUpdateOne {
	if i != nil {
		buo.SetCreatedBy(*i)
	}
	return buo
}

// AddCreatedBy adds i to the "created_by" field.
func (buo *BillUpdateOne) AddCreatedBy(i int64) *BillUpdateOne {
	buo.mutation.AddCreatedBy(i)
	return buo
}

// SetUpdatedBy sets the "updated_by" field.
func (buo *BillUpdateOne) SetUpdatedBy(i int64) *BillUpdateOne {
	buo.mutation.ResetUpdatedBy()
	buo.mutation.SetUpdatedBy(i)
	return buo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableUpdatedBy(i *int64) *BillUpdateOne {
	if i != nil {
		buo.SetUpdatedBy(*i)
	}
	return buo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (buo *BillUpdateOne) AddUpdatedBy(i int64) *BillUpdateOne {
	buo.mutation.AddUpdatedBy(i)
	return buo
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BillUpdateOne) SetUpdatedAt(t time.Time) *BillUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// SetDeletedAt sets the "deleted_at" field.
func (buo *BillUpdateOne) SetDeletedAt(t time.Time) *BillUpdateOne {
	buo.mutation.SetDeletedAt(t)
	return buo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableDeletedAt(t *time.Time) *BillUpdateOne {
	if t != nil {
		buo.SetDeletedAt(*t)
	}
	return buo
}

// SetType sets the "type" field.
func (buo *BillUpdateOne) SetType(b bill.Type) *BillUpdateOne {
	buo.mutation.SetType(b)
	return buo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableType(b *bill.Type) *BillUpdateOne {
	if b != nil {
		buo.SetType(*b)
	}
	return buo
}

// SetIsAdd sets the "is_add" field.
func (buo *BillUpdateOne) SetIsAdd(b bool) *BillUpdateOne {
	buo.mutation.SetIsAdd(b)
	return buo
}

// SetNillableIsAdd sets the "is_add" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableIsAdd(b *bool) *BillUpdateOne {
	if b != nil {
		buo.SetIsAdd(*b)
	}
	return buo
}

// SetUserID sets the "user_id" field.
func (buo *BillUpdateOne) SetUserID(i int64) *BillUpdateOne {
	buo.mutation.SetUserID(i)
	return buo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableUserID(i *int64) *BillUpdateOne {
	if i != nil {
		buo.SetUserID(*i)
	}
	return buo
}

// SetSerialNumber sets the "serial_number" field.
func (buo *BillUpdateOne) SetSerialNumber(s string) *BillUpdateOne {
	buo.mutation.SetSerialNumber(s)
	return buo
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableSerialNumber(s *string) *BillUpdateOne {
	if s != nil {
		buo.SetSerialNumber(*s)
	}
	return buo
}

// SetWalletID sets the "wallet_id" field.
func (buo *BillUpdateOne) SetWalletID(i int64) *BillUpdateOne {
	buo.mutation.SetWalletID(i)
	return buo
}

// SetNillableWalletID sets the "wallet_id" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableWalletID(i *int64) *BillUpdateOne {
	if i != nil {
		buo.SetWalletID(*i)
	}
	return buo
}

// SetCep sets the "cep" field.
func (buo *BillUpdateOne) SetCep(i int64) *BillUpdateOne {
	buo.mutation.ResetCep()
	buo.mutation.SetCep(i)
	return buo
}

// SetNillableCep sets the "cep" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableCep(i *int64) *BillUpdateOne {
	if i != nil {
		buo.SetCep(*i)
	}
	return buo
}

// AddCep adds i to the "cep" field.
func (buo *BillUpdateOne) AddCep(i int64) *BillUpdateOne {
	buo.mutation.AddCep(i)
	return buo
}

// SetReasonID sets the "reason_id" field.
func (buo *BillUpdateOne) SetReasonID(i int64) *BillUpdateOne {
	buo.mutation.SetReasonID(i)
	return buo
}

// SetNillableReasonID sets the "reason_id" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableReasonID(i *int64) *BillUpdateOne {
	if i != nil {
		buo.SetReasonID(*i)
	}
	return buo
}

// ClearReasonID clears the value of the "reason_id" field.
func (buo *BillUpdateOne) ClearReasonID() *BillUpdateOne {
	buo.mutation.ClearReasonID()
	return buo
}

// SetStatus sets the "status" field.
func (buo *BillUpdateOne) SetStatus(b bill.Status) *BillUpdateOne {
	buo.mutation.SetStatus(b)
	return buo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableStatus(b *bill.Status) *BillUpdateOne {
	if b != nil {
		buo.SetStatus(*b)
	}
	return buo
}

// SetMarketBillID sets the "market_bill_id" field.
func (buo *BillUpdateOne) SetMarketBillID(i int64) *BillUpdateOne {
	buo.mutation.ResetMarketBillID()
	buo.mutation.SetMarketBillID(i)
	return buo
}

// SetNillableMarketBillID sets the "market_bill_id" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableMarketBillID(i *int64) *BillUpdateOne {
	if i != nil {
		buo.SetMarketBillID(*i)
	}
	return buo
}

// AddMarketBillID adds i to the "market_bill_id" field.
func (buo *BillUpdateOne) AddMarketBillID(i int64) *BillUpdateOne {
	buo.mutation.AddMarketBillID(i)
	return buo
}

// SetPlatformWalletID sets the "platform_wallet_id" field.
func (buo *BillUpdateOne) SetPlatformWalletID(i int64) *BillUpdateOne {
	buo.mutation.SetPlatformWalletID(i)
	return buo
}

// SetNillablePlatformWalletID sets the "platform_wallet_id" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillablePlatformWalletID(i *int64) *BillUpdateOne {
	if i != nil {
		buo.SetPlatformWalletID(*i)
	}
	return buo
}

// SetPlatformCep sets the "platform_cep" field.
func (buo *BillUpdateOne) SetPlatformCep(i int64) *BillUpdateOne {
	buo.mutation.ResetPlatformCep()
	buo.mutation.SetPlatformCep(i)
	return buo
}

// SetNillablePlatformCep sets the "platform_cep" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillablePlatformCep(i *int64) *BillUpdateOne {
	if i != nil {
		buo.SetPlatformCep(*i)
	}
	return buo
}

// AddPlatformCep adds i to the "platform_cep" field.
func (buo *BillUpdateOne) AddPlatformCep(i int64) *BillUpdateOne {
	buo.mutation.AddPlatformCep(i)
	return buo
}

// SetUser sets the "user" edge to the User entity.
func (buo *BillUpdateOne) SetUser(u *User) *BillUpdateOne {
	return buo.SetUserID(u.ID)
}

// SetWallet sets the "wallet" edge to the Wallet entity.
func (buo *BillUpdateOne) SetWallet(w *Wallet) *BillUpdateOne {
	return buo.SetWalletID(w.ID)
}

// SetPlatformWallet sets the "platform_wallet" edge to the PlatformWallet entity.
func (buo *BillUpdateOne) SetPlatformWallet(p *PlatformWallet) *BillUpdateOne {
	return buo.SetPlatformWalletID(p.ID)
}

// SetRechargeOrderID sets the "recharge_order" edge to the RechargeOrder entity by ID.
func (buo *BillUpdateOne) SetRechargeOrderID(id int64) *BillUpdateOne {
	buo.mutation.SetRechargeOrderID(id)
	return buo
}

// SetNillableRechargeOrderID sets the "recharge_order" edge to the RechargeOrder entity by ID if the given value is not nil.
func (buo *BillUpdateOne) SetNillableRechargeOrderID(id *int64) *BillUpdateOne {
	if id != nil {
		buo = buo.SetRechargeOrderID(*id)
	}
	return buo
}

// SetRechargeOrder sets the "recharge_order" edge to the RechargeOrder entity.
func (buo *BillUpdateOne) SetRechargeOrder(r *RechargeOrder) *BillUpdateOne {
	return buo.SetRechargeOrderID(r.ID)
}

// SetMissionConsumeOrderID sets the "mission_consume_order" edge to the MissionConsumeOrder entity by ID.
func (buo *BillUpdateOne) SetMissionConsumeOrderID(id int64) *BillUpdateOne {
	buo.mutation.SetMissionConsumeOrderID(id)
	return buo
}

// SetNillableMissionConsumeOrderID sets the "mission_consume_order" edge to the MissionConsumeOrder entity by ID if the given value is not nil.
func (buo *BillUpdateOne) SetNillableMissionConsumeOrderID(id *int64) *BillUpdateOne {
	if id != nil {
		buo = buo.SetMissionConsumeOrderID(*id)
	}
	return buo
}

// SetMissionConsumeOrder sets the "mission_consume_order" edge to the MissionConsumeOrder entity.
func (buo *BillUpdateOne) SetMissionConsumeOrder(m *MissionConsumeOrder) *BillUpdateOne {
	return buo.SetMissionConsumeOrderID(m.ID)
}

// SetMissionProduceOrderID sets the "mission_produce_order" edge to the MissionProduceOrder entity by ID.
func (buo *BillUpdateOne) SetMissionProduceOrderID(id int64) *BillUpdateOne {
	buo.mutation.SetMissionProduceOrderID(id)
	return buo
}

// SetNillableMissionProduceOrderID sets the "mission_produce_order" edge to the MissionProduceOrder entity by ID if the given value is not nil.
func (buo *BillUpdateOne) SetNillableMissionProduceOrderID(id *int64) *BillUpdateOne {
	if id != nil {
		buo = buo.SetMissionProduceOrderID(*id)
	}
	return buo
}

// SetMissionProduceOrder sets the "mission_produce_order" edge to the MissionProduceOrder entity.
func (buo *BillUpdateOne) SetMissionProduceOrder(m *MissionProduceOrder) *BillUpdateOne {
	return buo.SetMissionProduceOrderID(m.ID)
}

// Mutation returns the BillMutation object of the builder.
func (buo *BillUpdateOne) Mutation() *BillMutation {
	return buo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (buo *BillUpdateOne) ClearUser() *BillUpdateOne {
	buo.mutation.ClearUser()
	return buo
}

// ClearWallet clears the "wallet" edge to the Wallet entity.
func (buo *BillUpdateOne) ClearWallet() *BillUpdateOne {
	buo.mutation.ClearWallet()
	return buo
}

// ClearPlatformWallet clears the "platform_wallet" edge to the PlatformWallet entity.
func (buo *BillUpdateOne) ClearPlatformWallet() *BillUpdateOne {
	buo.mutation.ClearPlatformWallet()
	return buo
}

// ClearRechargeOrder clears the "recharge_order" edge to the RechargeOrder entity.
func (buo *BillUpdateOne) ClearRechargeOrder() *BillUpdateOne {
	buo.mutation.ClearRechargeOrder()
	return buo
}

// ClearMissionConsumeOrder clears the "mission_consume_order" edge to the MissionConsumeOrder entity.
func (buo *BillUpdateOne) ClearMissionConsumeOrder() *BillUpdateOne {
	buo.mutation.ClearMissionConsumeOrder()
	return buo
}

// ClearMissionProduceOrder clears the "mission_produce_order" edge to the MissionProduceOrder entity.
func (buo *BillUpdateOne) ClearMissionProduceOrder() *BillUpdateOne {
	buo.mutation.ClearMissionProduceOrder()
	return buo
}

// Where appends a list predicates to the BillUpdate builder.
func (buo *BillUpdateOne) Where(ps ...predicate.Bill) *BillUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BillUpdateOne) Select(field string, fields ...string) *BillUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Bill entity.
func (buo *BillUpdateOne) Save(ctx context.Context) (*Bill, error) {
	buo.defaults()
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BillUpdateOne) SaveX(ctx context.Context) *Bill {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BillUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BillUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BillUpdateOne) defaults() {
	if _, ok := buo.mutation.UpdatedAt(); !ok {
		v := bill.UpdateDefaultUpdatedAt()
		buo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BillUpdateOne) check() error {
	if v, ok := buo.mutation.GetType(); ok {
		if err := bill.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "Bill.type": %w`, err)}
		}
	}
	if v, ok := buo.mutation.Status(); ok {
		if err := bill.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "Bill.status": %w`, err)}
		}
	}
	if _, ok := buo.mutation.UserID(); buo.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "Bill.user"`)
	}
	if _, ok := buo.mutation.WalletID(); buo.mutation.WalletCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "Bill.wallet"`)
	}
	if _, ok := buo.mutation.PlatformWalletID(); buo.mutation.PlatformWalletCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "Bill.platform_wallet"`)
	}
	return nil
}

func (buo *BillUpdateOne) sqlSave(ctx context.Context) (_node *Bill, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bill.Table, bill.Columns, sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "Bill.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bill.FieldID)
		for _, f := range fields {
			if !bill.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != bill.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.CreatedBy(); ok {
		_spec.SetField(bill.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(bill.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.UpdatedBy(); ok {
		_spec.SetField(bill.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(bill.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(bill.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.DeletedAt(); ok {
		_spec.SetField(bill.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.GetType(); ok {
		_spec.SetField(bill.FieldType, field.TypeEnum, value)
	}
	if value, ok := buo.mutation.IsAdd(); ok {
		_spec.SetField(bill.FieldIsAdd, field.TypeBool, value)
	}
	if value, ok := buo.mutation.SerialNumber(); ok {
		_spec.SetField(bill.FieldSerialNumber, field.TypeString, value)
	}
	if value, ok := buo.mutation.Cep(); ok {
		_spec.SetField(bill.FieldCep, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedCep(); ok {
		_spec.AddField(bill.FieldCep, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.Status(); ok {
		_spec.SetField(bill.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := buo.mutation.MarketBillID(); ok {
		_spec.SetField(bill.FieldMarketBillID, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedMarketBillID(); ok {
		_spec.AddField(bill.FieldMarketBillID, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.PlatformCep(); ok {
		_spec.SetField(bill.FieldPlatformCep, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedPlatformCep(); ok {
		_spec.AddField(bill.FieldPlatformCep, field.TypeInt64, value)
	}
	if buo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.UserTable,
			Columns: []string{bill.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.UserTable,
			Columns: []string{bill.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.WalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.WalletTable,
			Columns: []string{bill.WalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.WalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.WalletTable,
			Columns: []string{bill.WalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.PlatformWalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.PlatformWalletTable,
			Columns: []string{bill.PlatformWalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformwallet.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.PlatformWalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.PlatformWalletTable,
			Columns: []string{bill.PlatformWalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformwallet.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.RechargeOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.RechargeOrderTable,
			Columns: []string{bill.RechargeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rechargeorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RechargeOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.RechargeOrderTable,
			Columns: []string{bill.RechargeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rechargeorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.MissionConsumeOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.MissionConsumeOrderTable,
			Columns: []string{bill.MissionConsumeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.MissionConsumeOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.MissionConsumeOrderTable,
			Columns: []string{bill.MissionConsumeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.MissionProduceOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.MissionProduceOrderTable,
			Columns: []string{bill.MissionProduceOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.MissionProduceOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.MissionProduceOrderTable,
			Columns: []string{bill.MissionProduceOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Bill{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
