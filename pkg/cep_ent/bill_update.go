// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/bill"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/invite"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionconsumeorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionproduceorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/symbol"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/transferorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// BillUpdate is the builder for updating Bill entities.
type BillUpdate struct {
	config
	hooks    []Hook
	mutation *BillMutation
}

// Where appends a list predicates to the BillUpdate builder.
func (bu *BillUpdate) Where(ps ...predicate.Bill) *BillUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetCreatedBy sets the "created_by" field.
func (bu *BillUpdate) SetCreatedBy(i int64) *BillUpdate {
	bu.mutation.ResetCreatedBy()
	bu.mutation.SetCreatedBy(i)
	return bu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (bu *BillUpdate) SetNillableCreatedBy(i *int64) *BillUpdate {
	if i != nil {
		bu.SetCreatedBy(*i)
	}
	return bu
}

// AddCreatedBy adds i to the "created_by" field.
func (bu *BillUpdate) AddCreatedBy(i int64) *BillUpdate {
	bu.mutation.AddCreatedBy(i)
	return bu
}

// SetUpdatedBy sets the "updated_by" field.
func (bu *BillUpdate) SetUpdatedBy(i int64) *BillUpdate {
	bu.mutation.ResetUpdatedBy()
	bu.mutation.SetUpdatedBy(i)
	return bu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (bu *BillUpdate) SetNillableUpdatedBy(i *int64) *BillUpdate {
	if i != nil {
		bu.SetUpdatedBy(*i)
	}
	return bu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (bu *BillUpdate) AddUpdatedBy(i int64) *BillUpdate {
	bu.mutation.AddUpdatedBy(i)
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BillUpdate) SetUpdatedAt(t time.Time) *BillUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// SetDeletedAt sets the "deleted_at" field.
func (bu *BillUpdate) SetDeletedAt(t time.Time) *BillUpdate {
	bu.mutation.SetDeletedAt(t)
	return bu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bu *BillUpdate) SetNillableDeletedAt(t *time.Time) *BillUpdate {
	if t != nil {
		bu.SetDeletedAt(*t)
	}
	return bu
}

// SetType sets the "type" field.
func (bu *BillUpdate) SetType(et enums.BillType) *BillUpdate {
	bu.mutation.SetType(et)
	return bu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (bu *BillUpdate) SetNillableType(et *enums.BillType) *BillUpdate {
	if et != nil {
		bu.SetType(*et)
	}
	return bu
}

// SetOrderID sets the "order_id" field.
func (bu *BillUpdate) SetOrderID(i int64) *BillUpdate {
	bu.mutation.SetOrderID(i)
	return bu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (bu *BillUpdate) SetNillableOrderID(i *int64) *BillUpdate {
	if i != nil {
		bu.SetOrderID(*i)
	}
	return bu
}

// ClearOrderID clears the value of the "order_id" field.
func (bu *BillUpdate) ClearOrderID() *BillUpdate {
	bu.mutation.ClearOrderID()
	return bu
}

// SetWay sets the "way" field.
func (bu *BillUpdate) SetWay(ew enums.BillWay) *BillUpdate {
	bu.mutation.SetWay(ew)
	return bu
}

// SetNillableWay sets the "way" field if the given value is not nil.
func (bu *BillUpdate) SetNillableWay(ew *enums.BillWay) *BillUpdate {
	if ew != nil {
		bu.SetWay(*ew)
	}
	return bu
}

// SetSymbolID sets the "symbol_id" field.
func (bu *BillUpdate) SetSymbolID(i int64) *BillUpdate {
	bu.mutation.SetSymbolID(i)
	return bu
}

// SetNillableSymbolID sets the "symbol_id" field if the given value is not nil.
func (bu *BillUpdate) SetNillableSymbolID(i *int64) *BillUpdate {
	if i != nil {
		bu.SetSymbolID(*i)
	}
	return bu
}

// SetAmount sets the "amount" field.
func (bu *BillUpdate) SetAmount(i int64) *BillUpdate {
	bu.mutation.ResetAmount()
	bu.mutation.SetAmount(i)
	return bu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (bu *BillUpdate) SetNillableAmount(i *int64) *BillUpdate {
	if i != nil {
		bu.SetAmount(*i)
	}
	return bu
}

// AddAmount adds i to the "amount" field.
func (bu *BillUpdate) AddAmount(i int64) *BillUpdate {
	bu.mutation.AddAmount(i)
	return bu
}

// SetTargetUserID sets the "target_user_id" field.
func (bu *BillUpdate) SetTargetUserID(i int64) *BillUpdate {
	bu.mutation.SetTargetUserID(i)
	return bu
}

// SetNillableTargetUserID sets the "target_user_id" field if the given value is not nil.
func (bu *BillUpdate) SetNillableTargetUserID(i *int64) *BillUpdate {
	if i != nil {
		bu.SetTargetUserID(*i)
	}
	return bu
}

// SetTargetBeforeAmount sets the "target_before_amount" field.
func (bu *BillUpdate) SetTargetBeforeAmount(i int64) *BillUpdate {
	bu.mutation.ResetTargetBeforeAmount()
	bu.mutation.SetTargetBeforeAmount(i)
	return bu
}

// SetNillableTargetBeforeAmount sets the "target_before_amount" field if the given value is not nil.
func (bu *BillUpdate) SetNillableTargetBeforeAmount(i *int64) *BillUpdate {
	if i != nil {
		bu.SetTargetBeforeAmount(*i)
	}
	return bu
}

// AddTargetBeforeAmount adds i to the "target_before_amount" field.
func (bu *BillUpdate) AddTargetBeforeAmount(i int64) *BillUpdate {
	bu.mutation.AddTargetBeforeAmount(i)
	return bu
}

// SetTargetAfterAmount sets the "target_after_amount" field.
func (bu *BillUpdate) SetTargetAfterAmount(i int64) *BillUpdate {
	bu.mutation.ResetTargetAfterAmount()
	bu.mutation.SetTargetAfterAmount(i)
	return bu
}

// SetNillableTargetAfterAmount sets the "target_after_amount" field if the given value is not nil.
func (bu *BillUpdate) SetNillableTargetAfterAmount(i *int64) *BillUpdate {
	if i != nil {
		bu.SetTargetAfterAmount(*i)
	}
	return bu
}

// AddTargetAfterAmount adds i to the "target_after_amount" field.
func (bu *BillUpdate) AddTargetAfterAmount(i int64) *BillUpdate {
	bu.mutation.AddTargetAfterAmount(i)
	return bu
}

// SetSourceUserID sets the "source_user_id" field.
func (bu *BillUpdate) SetSourceUserID(i int64) *BillUpdate {
	bu.mutation.SetSourceUserID(i)
	return bu
}

// SetNillableSourceUserID sets the "source_user_id" field if the given value is not nil.
func (bu *BillUpdate) SetNillableSourceUserID(i *int64) *BillUpdate {
	if i != nil {
		bu.SetSourceUserID(*i)
	}
	return bu
}

// SetSourceBeforeAmount sets the "source_before_amount" field.
func (bu *BillUpdate) SetSourceBeforeAmount(i int64) *BillUpdate {
	bu.mutation.ResetSourceBeforeAmount()
	bu.mutation.SetSourceBeforeAmount(i)
	return bu
}

// SetNillableSourceBeforeAmount sets the "source_before_amount" field if the given value is not nil.
func (bu *BillUpdate) SetNillableSourceBeforeAmount(i *int64) *BillUpdate {
	if i != nil {
		bu.SetSourceBeforeAmount(*i)
	}
	return bu
}

// AddSourceBeforeAmount adds i to the "source_before_amount" field.
func (bu *BillUpdate) AddSourceBeforeAmount(i int64) *BillUpdate {
	bu.mutation.AddSourceBeforeAmount(i)
	return bu
}

// SetSourceAfterAmount sets the "source_after_amount" field.
func (bu *BillUpdate) SetSourceAfterAmount(i int64) *BillUpdate {
	bu.mutation.ResetSourceAfterAmount()
	bu.mutation.SetSourceAfterAmount(i)
	return bu
}

// SetNillableSourceAfterAmount sets the "source_after_amount" field if the given value is not nil.
func (bu *BillUpdate) SetNillableSourceAfterAmount(i *int64) *BillUpdate {
	if i != nil {
		bu.SetSourceAfterAmount(*i)
	}
	return bu
}

// AddSourceAfterAmount adds i to the "source_after_amount" field.
func (bu *BillUpdate) AddSourceAfterAmount(i int64) *BillUpdate {
	bu.mutation.AddSourceAfterAmount(i)
	return bu
}

// SetSerialNumber sets the "serial_number" field.
func (bu *BillUpdate) SetSerialNumber(s string) *BillUpdate {
	bu.mutation.SetSerialNumber(s)
	return bu
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (bu *BillUpdate) SetNillableSerialNumber(s *string) *BillUpdate {
	if s != nil {
		bu.SetSerialNumber(*s)
	}
	return bu
}

// SetInviteID sets the "invite_id" field.
func (bu *BillUpdate) SetInviteID(i int64) *BillUpdate {
	bu.mutation.SetInviteID(i)
	return bu
}

// SetNillableInviteID sets the "invite_id" field if the given value is not nil.
func (bu *BillUpdate) SetNillableInviteID(i *int64) *BillUpdate {
	if i != nil {
		bu.SetInviteID(*i)
	}
	return bu
}

// SetSourceUser sets the "source_user" edge to the User entity.
func (bu *BillUpdate) SetSourceUser(u *User) *BillUpdate {
	return bu.SetSourceUserID(u.ID)
}

// SetTargetUser sets the "target_user" edge to the User entity.
func (bu *BillUpdate) SetTargetUser(u *User) *BillUpdate {
	return bu.SetTargetUserID(u.ID)
}

// SetTransferOrderID sets the "transfer_order" edge to the TransferOrder entity by ID.
func (bu *BillUpdate) SetTransferOrderID(id int64) *BillUpdate {
	bu.mutation.SetTransferOrderID(id)
	return bu
}

// SetNillableTransferOrderID sets the "transfer_order" edge to the TransferOrder entity by ID if the given value is not nil.
func (bu *BillUpdate) SetNillableTransferOrderID(id *int64) *BillUpdate {
	if id != nil {
		bu = bu.SetTransferOrderID(*id)
	}
	return bu
}

// SetTransferOrder sets the "transfer_order" edge to the TransferOrder entity.
func (bu *BillUpdate) SetTransferOrder(t *TransferOrder) *BillUpdate {
	return bu.SetTransferOrderID(t.ID)
}

// SetMissionConsumeOrderID sets the "mission_consume_order" edge to the MissionConsumeOrder entity by ID.
func (bu *BillUpdate) SetMissionConsumeOrderID(id int64) *BillUpdate {
	bu.mutation.SetMissionConsumeOrderID(id)
	return bu
}

// SetNillableMissionConsumeOrderID sets the "mission_consume_order" edge to the MissionConsumeOrder entity by ID if the given value is not nil.
func (bu *BillUpdate) SetNillableMissionConsumeOrderID(id *int64) *BillUpdate {
	if id != nil {
		bu = bu.SetMissionConsumeOrderID(*id)
	}
	return bu
}

// SetMissionConsumeOrder sets the "mission_consume_order" edge to the MissionConsumeOrder entity.
func (bu *BillUpdate) SetMissionConsumeOrder(m *MissionConsumeOrder) *BillUpdate {
	return bu.SetMissionConsumeOrderID(m.ID)
}

// SetMissionProduceOrderID sets the "mission_produce_order" edge to the MissionProduceOrder entity by ID.
func (bu *BillUpdate) SetMissionProduceOrderID(id int64) *BillUpdate {
	bu.mutation.SetMissionProduceOrderID(id)
	return bu
}

// SetNillableMissionProduceOrderID sets the "mission_produce_order" edge to the MissionProduceOrder entity by ID if the given value is not nil.
func (bu *BillUpdate) SetNillableMissionProduceOrderID(id *int64) *BillUpdate {
	if id != nil {
		bu = bu.SetMissionProduceOrderID(*id)
	}
	return bu
}

// SetMissionProduceOrder sets the "mission_produce_order" edge to the MissionProduceOrder entity.
func (bu *BillUpdate) SetMissionProduceOrder(m *MissionProduceOrder) *BillUpdate {
	return bu.SetMissionProduceOrderID(m.ID)
}

// SetInvite sets the "invite" edge to the Invite entity.
func (bu *BillUpdate) SetInvite(i *Invite) *BillUpdate {
	return bu.SetInviteID(i.ID)
}

// SetSymbol sets the "symbol" edge to the Symbol entity.
func (bu *BillUpdate) SetSymbol(s *Symbol) *BillUpdate {
	return bu.SetSymbolID(s.ID)
}

// Mutation returns the BillMutation object of the builder.
func (bu *BillUpdate) Mutation() *BillMutation {
	return bu.mutation
}

// ClearSourceUser clears the "source_user" edge to the User entity.
func (bu *BillUpdate) ClearSourceUser() *BillUpdate {
	bu.mutation.ClearSourceUser()
	return bu
}

// ClearTargetUser clears the "target_user" edge to the User entity.
func (bu *BillUpdate) ClearTargetUser() *BillUpdate {
	bu.mutation.ClearTargetUser()
	return bu
}

// ClearTransferOrder clears the "transfer_order" edge to the TransferOrder entity.
func (bu *BillUpdate) ClearTransferOrder() *BillUpdate {
	bu.mutation.ClearTransferOrder()
	return bu
}

// ClearMissionConsumeOrder clears the "mission_consume_order" edge to the MissionConsumeOrder entity.
func (bu *BillUpdate) ClearMissionConsumeOrder() *BillUpdate {
	bu.mutation.ClearMissionConsumeOrder()
	return bu
}

// ClearMissionProduceOrder clears the "mission_produce_order" edge to the MissionProduceOrder entity.
func (bu *BillUpdate) ClearMissionProduceOrder() *BillUpdate {
	bu.mutation.ClearMissionProduceOrder()
	return bu
}

// ClearInvite clears the "invite" edge to the Invite entity.
func (bu *BillUpdate) ClearInvite() *BillUpdate {
	bu.mutation.ClearInvite()
	return bu
}

// ClearSymbol clears the "symbol" edge to the Symbol entity.
func (bu *BillUpdate) ClearSymbol() *BillUpdate {
	bu.mutation.ClearSymbol()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BillUpdate) Save(ctx context.Context) (int, error) {
	bu.defaults()
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BillUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BillUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BillUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BillUpdate) defaults() {
	if _, ok := bu.mutation.UpdatedAt(); !ok {
		v := bill.UpdateDefaultUpdatedAt()
		bu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BillUpdate) check() error {
	if v, ok := bu.mutation.GetType(); ok {
		if err := bill.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "Bill.type": %w`, err)}
		}
	}
	if v, ok := bu.mutation.Way(); ok {
		if err := bill.WayValidator(v); err != nil {
			return &ValidationError{Name: "way", err: fmt.Errorf(`cep_ent: validator failed for field "Bill.way": %w`, err)}
		}
	}
	if _, ok := bu.mutation.SourceUserID(); bu.mutation.SourceUserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "Bill.source_user"`)
	}
	if _, ok := bu.mutation.TargetUserID(); bu.mutation.TargetUserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "Bill.target_user"`)
	}
	if _, ok := bu.mutation.InviteID(); bu.mutation.InviteCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "Bill.invite"`)
	}
	if _, ok := bu.mutation.SymbolID(); bu.mutation.SymbolCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "Bill.symbol"`)
	}
	return nil
}

func (bu *BillUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(bill.Table, bill.Columns, sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.CreatedBy(); ok {
		_spec.SetField(bill.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(bill.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.UpdatedBy(); ok {
		_spec.SetField(bill.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(bill.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(bill.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.DeletedAt(); ok {
		_spec.SetField(bill.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.GetType(); ok {
		_spec.SetField(bill.FieldType, field.TypeEnum, value)
	}
	if value, ok := bu.mutation.Way(); ok {
		_spec.SetField(bill.FieldWay, field.TypeEnum, value)
	}
	if value, ok := bu.mutation.Amount(); ok {
		_spec.SetField(bill.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedAmount(); ok {
		_spec.AddField(bill.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.TargetBeforeAmount(); ok {
		_spec.SetField(bill.FieldTargetBeforeAmount, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedTargetBeforeAmount(); ok {
		_spec.AddField(bill.FieldTargetBeforeAmount, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.TargetAfterAmount(); ok {
		_spec.SetField(bill.FieldTargetAfterAmount, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedTargetAfterAmount(); ok {
		_spec.AddField(bill.FieldTargetAfterAmount, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.SourceBeforeAmount(); ok {
		_spec.SetField(bill.FieldSourceBeforeAmount, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedSourceBeforeAmount(); ok {
		_spec.AddField(bill.FieldSourceBeforeAmount, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.SourceAfterAmount(); ok {
		_spec.SetField(bill.FieldSourceAfterAmount, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedSourceAfterAmount(); ok {
		_spec.AddField(bill.FieldSourceAfterAmount, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.SerialNumber(); ok {
		_spec.SetField(bill.FieldSerialNumber, field.TypeString, value)
	}
	if bu.mutation.SourceUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.SourceUserTable,
			Columns: []string{bill.SourceUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.SourceUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.SourceUserTable,
			Columns: []string{bill.SourceUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.TargetUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.TargetUserTable,
			Columns: []string{bill.TargetUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.TargetUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.TargetUserTable,
			Columns: []string{bill.TargetUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.TransferOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.TransferOrderTable,
			Columns: []string{bill.TransferOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transferorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.TransferOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.TransferOrderTable,
			Columns: []string{bill.TransferOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transferorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.MissionConsumeOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.MissionConsumeOrderTable,
			Columns: []string{bill.MissionConsumeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.MissionConsumeOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.MissionConsumeOrderTable,
			Columns: []string{bill.MissionConsumeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.MissionProduceOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.MissionProduceOrderTable,
			Columns: []string{bill.MissionProduceOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.MissionProduceOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.MissionProduceOrderTable,
			Columns: []string{bill.MissionProduceOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.InviteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.InviteTable,
			Columns: []string{bill.InviteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.InviteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.InviteTable,
			Columns: []string{bill.InviteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.SymbolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.SymbolTable,
			Columns: []string{bill.SymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.SymbolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.SymbolTable,
			Columns: []string{bill.SymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BillUpdateOne is the builder for updating a single Bill entity.
type BillUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillMutation
}

// SetCreatedBy sets the "created_by" field.
func (buo *BillUpdateOne) SetCreatedBy(i int64) *BillUpdateOne {
	buo.mutation.ResetCreatedBy()
	buo.mutation.SetCreatedBy(i)
	return buo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableCreatedBy(i *int64) *BillUpdateOne {
	if i != nil {
		buo.SetCreatedBy(*i)
	}
	return buo
}

// AddCreatedBy adds i to the "created_by" field.
func (buo *BillUpdateOne) AddCreatedBy(i int64) *BillUpdateOne {
	buo.mutation.AddCreatedBy(i)
	return buo
}

// SetUpdatedBy sets the "updated_by" field.
func (buo *BillUpdateOne) SetUpdatedBy(i int64) *BillUpdateOne {
	buo.mutation.ResetUpdatedBy()
	buo.mutation.SetUpdatedBy(i)
	return buo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableUpdatedBy(i *int64) *BillUpdateOne {
	if i != nil {
		buo.SetUpdatedBy(*i)
	}
	return buo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (buo *BillUpdateOne) AddUpdatedBy(i int64) *BillUpdateOne {
	buo.mutation.AddUpdatedBy(i)
	return buo
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BillUpdateOne) SetUpdatedAt(t time.Time) *BillUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// SetDeletedAt sets the "deleted_at" field.
func (buo *BillUpdateOne) SetDeletedAt(t time.Time) *BillUpdateOne {
	buo.mutation.SetDeletedAt(t)
	return buo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableDeletedAt(t *time.Time) *BillUpdateOne {
	if t != nil {
		buo.SetDeletedAt(*t)
	}
	return buo
}

// SetType sets the "type" field.
func (buo *BillUpdateOne) SetType(et enums.BillType) *BillUpdateOne {
	buo.mutation.SetType(et)
	return buo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableType(et *enums.BillType) *BillUpdateOne {
	if et != nil {
		buo.SetType(*et)
	}
	return buo
}

// SetOrderID sets the "order_id" field.
func (buo *BillUpdateOne) SetOrderID(i int64) *BillUpdateOne {
	buo.mutation.SetOrderID(i)
	return buo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableOrderID(i *int64) *BillUpdateOne {
	if i != nil {
		buo.SetOrderID(*i)
	}
	return buo
}

// ClearOrderID clears the value of the "order_id" field.
func (buo *BillUpdateOne) ClearOrderID() *BillUpdateOne {
	buo.mutation.ClearOrderID()
	return buo
}

// SetWay sets the "way" field.
func (buo *BillUpdateOne) SetWay(ew enums.BillWay) *BillUpdateOne {
	buo.mutation.SetWay(ew)
	return buo
}

// SetNillableWay sets the "way" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableWay(ew *enums.BillWay) *BillUpdateOne {
	if ew != nil {
		buo.SetWay(*ew)
	}
	return buo
}

// SetSymbolID sets the "symbol_id" field.
func (buo *BillUpdateOne) SetSymbolID(i int64) *BillUpdateOne {
	buo.mutation.SetSymbolID(i)
	return buo
}

// SetNillableSymbolID sets the "symbol_id" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableSymbolID(i *int64) *BillUpdateOne {
	if i != nil {
		buo.SetSymbolID(*i)
	}
	return buo
}

// SetAmount sets the "amount" field.
func (buo *BillUpdateOne) SetAmount(i int64) *BillUpdateOne {
	buo.mutation.ResetAmount()
	buo.mutation.SetAmount(i)
	return buo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableAmount(i *int64) *BillUpdateOne {
	if i != nil {
		buo.SetAmount(*i)
	}
	return buo
}

// AddAmount adds i to the "amount" field.
func (buo *BillUpdateOne) AddAmount(i int64) *BillUpdateOne {
	buo.mutation.AddAmount(i)
	return buo
}

// SetTargetUserID sets the "target_user_id" field.
func (buo *BillUpdateOne) SetTargetUserID(i int64) *BillUpdateOne {
	buo.mutation.SetTargetUserID(i)
	return buo
}

// SetNillableTargetUserID sets the "target_user_id" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableTargetUserID(i *int64) *BillUpdateOne {
	if i != nil {
		buo.SetTargetUserID(*i)
	}
	return buo
}

// SetTargetBeforeAmount sets the "target_before_amount" field.
func (buo *BillUpdateOne) SetTargetBeforeAmount(i int64) *BillUpdateOne {
	buo.mutation.ResetTargetBeforeAmount()
	buo.mutation.SetTargetBeforeAmount(i)
	return buo
}

// SetNillableTargetBeforeAmount sets the "target_before_amount" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableTargetBeforeAmount(i *int64) *BillUpdateOne {
	if i != nil {
		buo.SetTargetBeforeAmount(*i)
	}
	return buo
}

// AddTargetBeforeAmount adds i to the "target_before_amount" field.
func (buo *BillUpdateOne) AddTargetBeforeAmount(i int64) *BillUpdateOne {
	buo.mutation.AddTargetBeforeAmount(i)
	return buo
}

// SetTargetAfterAmount sets the "target_after_amount" field.
func (buo *BillUpdateOne) SetTargetAfterAmount(i int64) *BillUpdateOne {
	buo.mutation.ResetTargetAfterAmount()
	buo.mutation.SetTargetAfterAmount(i)
	return buo
}

// SetNillableTargetAfterAmount sets the "target_after_amount" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableTargetAfterAmount(i *int64) *BillUpdateOne {
	if i != nil {
		buo.SetTargetAfterAmount(*i)
	}
	return buo
}

// AddTargetAfterAmount adds i to the "target_after_amount" field.
func (buo *BillUpdateOne) AddTargetAfterAmount(i int64) *BillUpdateOne {
	buo.mutation.AddTargetAfterAmount(i)
	return buo
}

// SetSourceUserID sets the "source_user_id" field.
func (buo *BillUpdateOne) SetSourceUserID(i int64) *BillUpdateOne {
	buo.mutation.SetSourceUserID(i)
	return buo
}

// SetNillableSourceUserID sets the "source_user_id" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableSourceUserID(i *int64) *BillUpdateOne {
	if i != nil {
		buo.SetSourceUserID(*i)
	}
	return buo
}

// SetSourceBeforeAmount sets the "source_before_amount" field.
func (buo *BillUpdateOne) SetSourceBeforeAmount(i int64) *BillUpdateOne {
	buo.mutation.ResetSourceBeforeAmount()
	buo.mutation.SetSourceBeforeAmount(i)
	return buo
}

// SetNillableSourceBeforeAmount sets the "source_before_amount" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableSourceBeforeAmount(i *int64) *BillUpdateOne {
	if i != nil {
		buo.SetSourceBeforeAmount(*i)
	}
	return buo
}

// AddSourceBeforeAmount adds i to the "source_before_amount" field.
func (buo *BillUpdateOne) AddSourceBeforeAmount(i int64) *BillUpdateOne {
	buo.mutation.AddSourceBeforeAmount(i)
	return buo
}

// SetSourceAfterAmount sets the "source_after_amount" field.
func (buo *BillUpdateOne) SetSourceAfterAmount(i int64) *BillUpdateOne {
	buo.mutation.ResetSourceAfterAmount()
	buo.mutation.SetSourceAfterAmount(i)
	return buo
}

// SetNillableSourceAfterAmount sets the "source_after_amount" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableSourceAfterAmount(i *int64) *BillUpdateOne {
	if i != nil {
		buo.SetSourceAfterAmount(*i)
	}
	return buo
}

// AddSourceAfterAmount adds i to the "source_after_amount" field.
func (buo *BillUpdateOne) AddSourceAfterAmount(i int64) *BillUpdateOne {
	buo.mutation.AddSourceAfterAmount(i)
	return buo
}

// SetSerialNumber sets the "serial_number" field.
func (buo *BillUpdateOne) SetSerialNumber(s string) *BillUpdateOne {
	buo.mutation.SetSerialNumber(s)
	return buo
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableSerialNumber(s *string) *BillUpdateOne {
	if s != nil {
		buo.SetSerialNumber(*s)
	}
	return buo
}

// SetInviteID sets the "invite_id" field.
func (buo *BillUpdateOne) SetInviteID(i int64) *BillUpdateOne {
	buo.mutation.SetInviteID(i)
	return buo
}

// SetNillableInviteID sets the "invite_id" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableInviteID(i *int64) *BillUpdateOne {
	if i != nil {
		buo.SetInviteID(*i)
	}
	return buo
}

// SetSourceUser sets the "source_user" edge to the User entity.
func (buo *BillUpdateOne) SetSourceUser(u *User) *BillUpdateOne {
	return buo.SetSourceUserID(u.ID)
}

// SetTargetUser sets the "target_user" edge to the User entity.
func (buo *BillUpdateOne) SetTargetUser(u *User) *BillUpdateOne {
	return buo.SetTargetUserID(u.ID)
}

// SetTransferOrderID sets the "transfer_order" edge to the TransferOrder entity by ID.
func (buo *BillUpdateOne) SetTransferOrderID(id int64) *BillUpdateOne {
	buo.mutation.SetTransferOrderID(id)
	return buo
}

// SetNillableTransferOrderID sets the "transfer_order" edge to the TransferOrder entity by ID if the given value is not nil.
func (buo *BillUpdateOne) SetNillableTransferOrderID(id *int64) *BillUpdateOne {
	if id != nil {
		buo = buo.SetTransferOrderID(*id)
	}
	return buo
}

// SetTransferOrder sets the "transfer_order" edge to the TransferOrder entity.
func (buo *BillUpdateOne) SetTransferOrder(t *TransferOrder) *BillUpdateOne {
	return buo.SetTransferOrderID(t.ID)
}

// SetMissionConsumeOrderID sets the "mission_consume_order" edge to the MissionConsumeOrder entity by ID.
func (buo *BillUpdateOne) SetMissionConsumeOrderID(id int64) *BillUpdateOne {
	buo.mutation.SetMissionConsumeOrderID(id)
	return buo
}

// SetNillableMissionConsumeOrderID sets the "mission_consume_order" edge to the MissionConsumeOrder entity by ID if the given value is not nil.
func (buo *BillUpdateOne) SetNillableMissionConsumeOrderID(id *int64) *BillUpdateOne {
	if id != nil {
		buo = buo.SetMissionConsumeOrderID(*id)
	}
	return buo
}

// SetMissionConsumeOrder sets the "mission_consume_order" edge to the MissionConsumeOrder entity.
func (buo *BillUpdateOne) SetMissionConsumeOrder(m *MissionConsumeOrder) *BillUpdateOne {
	return buo.SetMissionConsumeOrderID(m.ID)
}

// SetMissionProduceOrderID sets the "mission_produce_order" edge to the MissionProduceOrder entity by ID.
func (buo *BillUpdateOne) SetMissionProduceOrderID(id int64) *BillUpdateOne {
	buo.mutation.SetMissionProduceOrderID(id)
	return buo
}

// SetNillableMissionProduceOrderID sets the "mission_produce_order" edge to the MissionProduceOrder entity by ID if the given value is not nil.
func (buo *BillUpdateOne) SetNillableMissionProduceOrderID(id *int64) *BillUpdateOne {
	if id != nil {
		buo = buo.SetMissionProduceOrderID(*id)
	}
	return buo
}

// SetMissionProduceOrder sets the "mission_produce_order" edge to the MissionProduceOrder entity.
func (buo *BillUpdateOne) SetMissionProduceOrder(m *MissionProduceOrder) *BillUpdateOne {
	return buo.SetMissionProduceOrderID(m.ID)
}

// SetInvite sets the "invite" edge to the Invite entity.
func (buo *BillUpdateOne) SetInvite(i *Invite) *BillUpdateOne {
	return buo.SetInviteID(i.ID)
}

// SetSymbol sets the "symbol" edge to the Symbol entity.
func (buo *BillUpdateOne) SetSymbol(s *Symbol) *BillUpdateOne {
	return buo.SetSymbolID(s.ID)
}

// Mutation returns the BillMutation object of the builder.
func (buo *BillUpdateOne) Mutation() *BillMutation {
	return buo.mutation
}

// ClearSourceUser clears the "source_user" edge to the User entity.
func (buo *BillUpdateOne) ClearSourceUser() *BillUpdateOne {
	buo.mutation.ClearSourceUser()
	return buo
}

// ClearTargetUser clears the "target_user" edge to the User entity.
func (buo *BillUpdateOne) ClearTargetUser() *BillUpdateOne {
	buo.mutation.ClearTargetUser()
	return buo
}

// ClearTransferOrder clears the "transfer_order" edge to the TransferOrder entity.
func (buo *BillUpdateOne) ClearTransferOrder() *BillUpdateOne {
	buo.mutation.ClearTransferOrder()
	return buo
}

// ClearMissionConsumeOrder clears the "mission_consume_order" edge to the MissionConsumeOrder entity.
func (buo *BillUpdateOne) ClearMissionConsumeOrder() *BillUpdateOne {
	buo.mutation.ClearMissionConsumeOrder()
	return buo
}

// ClearMissionProduceOrder clears the "mission_produce_order" edge to the MissionProduceOrder entity.
func (buo *BillUpdateOne) ClearMissionProduceOrder() *BillUpdateOne {
	buo.mutation.ClearMissionProduceOrder()
	return buo
}

// ClearInvite clears the "invite" edge to the Invite entity.
func (buo *BillUpdateOne) ClearInvite() *BillUpdateOne {
	buo.mutation.ClearInvite()
	return buo
}

// ClearSymbol clears the "symbol" edge to the Symbol entity.
func (buo *BillUpdateOne) ClearSymbol() *BillUpdateOne {
	buo.mutation.ClearSymbol()
	return buo
}

// Where appends a list predicates to the BillUpdate builder.
func (buo *BillUpdateOne) Where(ps ...predicate.Bill) *BillUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BillUpdateOne) Select(field string, fields ...string) *BillUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Bill entity.
func (buo *BillUpdateOne) Save(ctx context.Context) (*Bill, error) {
	buo.defaults()
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BillUpdateOne) SaveX(ctx context.Context) *Bill {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BillUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BillUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BillUpdateOne) defaults() {
	if _, ok := buo.mutation.UpdatedAt(); !ok {
		v := bill.UpdateDefaultUpdatedAt()
		buo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BillUpdateOne) check() error {
	if v, ok := buo.mutation.GetType(); ok {
		if err := bill.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "Bill.type": %w`, err)}
		}
	}
	if v, ok := buo.mutation.Way(); ok {
		if err := bill.WayValidator(v); err != nil {
			return &ValidationError{Name: "way", err: fmt.Errorf(`cep_ent: validator failed for field "Bill.way": %w`, err)}
		}
	}
	if _, ok := buo.mutation.SourceUserID(); buo.mutation.SourceUserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "Bill.source_user"`)
	}
	if _, ok := buo.mutation.TargetUserID(); buo.mutation.TargetUserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "Bill.target_user"`)
	}
	if _, ok := buo.mutation.InviteID(); buo.mutation.InviteCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "Bill.invite"`)
	}
	if _, ok := buo.mutation.SymbolID(); buo.mutation.SymbolCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "Bill.symbol"`)
	}
	return nil
}

func (buo *BillUpdateOne) sqlSave(ctx context.Context) (_node *Bill, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bill.Table, bill.Columns, sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "Bill.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bill.FieldID)
		for _, f := range fields {
			if !bill.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != bill.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.CreatedBy(); ok {
		_spec.SetField(bill.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(bill.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.UpdatedBy(); ok {
		_spec.SetField(bill.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(bill.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(bill.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.DeletedAt(); ok {
		_spec.SetField(bill.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.GetType(); ok {
		_spec.SetField(bill.FieldType, field.TypeEnum, value)
	}
	if value, ok := buo.mutation.Way(); ok {
		_spec.SetField(bill.FieldWay, field.TypeEnum, value)
	}
	if value, ok := buo.mutation.Amount(); ok {
		_spec.SetField(bill.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedAmount(); ok {
		_spec.AddField(bill.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.TargetBeforeAmount(); ok {
		_spec.SetField(bill.FieldTargetBeforeAmount, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedTargetBeforeAmount(); ok {
		_spec.AddField(bill.FieldTargetBeforeAmount, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.TargetAfterAmount(); ok {
		_spec.SetField(bill.FieldTargetAfterAmount, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedTargetAfterAmount(); ok {
		_spec.AddField(bill.FieldTargetAfterAmount, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.SourceBeforeAmount(); ok {
		_spec.SetField(bill.FieldSourceBeforeAmount, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedSourceBeforeAmount(); ok {
		_spec.AddField(bill.FieldSourceBeforeAmount, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.SourceAfterAmount(); ok {
		_spec.SetField(bill.FieldSourceAfterAmount, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedSourceAfterAmount(); ok {
		_spec.AddField(bill.FieldSourceAfterAmount, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.SerialNumber(); ok {
		_spec.SetField(bill.FieldSerialNumber, field.TypeString, value)
	}
	if buo.mutation.SourceUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.SourceUserTable,
			Columns: []string{bill.SourceUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.SourceUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.SourceUserTable,
			Columns: []string{bill.SourceUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.TargetUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.TargetUserTable,
			Columns: []string{bill.TargetUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.TargetUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.TargetUserTable,
			Columns: []string{bill.TargetUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.TransferOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.TransferOrderTable,
			Columns: []string{bill.TransferOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transferorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.TransferOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.TransferOrderTable,
			Columns: []string{bill.TransferOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transferorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.MissionConsumeOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.MissionConsumeOrderTable,
			Columns: []string{bill.MissionConsumeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.MissionConsumeOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.MissionConsumeOrderTable,
			Columns: []string{bill.MissionConsumeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.MissionProduceOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.MissionProduceOrderTable,
			Columns: []string{bill.MissionProduceOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.MissionProduceOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.MissionProduceOrderTable,
			Columns: []string{bill.MissionProduceOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.InviteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.InviteTable,
			Columns: []string{bill.InviteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.InviteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.InviteTable,
			Columns: []string{bill.InviteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.SymbolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.SymbolTable,
			Columns: []string{bill.SymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.SymbolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.SymbolTable,
			Columns: []string{bill.SymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Bill{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
