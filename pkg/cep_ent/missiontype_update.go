// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/missiontype"
	"cephalon-ent/pkg/cep_ent/predicate"
	"cephalon-ent/pkg/enums"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MissionTypeUpdate is the builder for updating MissionType entities.
type MissionTypeUpdate struct {
	config
	hooks    []Hook
	mutation *MissionTypeMutation
}

// Where appends a list predicates to the MissionTypeUpdate builder.
func (mtu *MissionTypeUpdate) Where(ps ...predicate.MissionType) *MissionTypeUpdate {
	mtu.mutation.Where(ps...)
	return mtu
}

// SetCreatedBy sets the "created_by" field.
func (mtu *MissionTypeUpdate) SetCreatedBy(i int64) *MissionTypeUpdate {
	mtu.mutation.ResetCreatedBy()
	mtu.mutation.SetCreatedBy(i)
	return mtu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mtu *MissionTypeUpdate) SetNillableCreatedBy(i *int64) *MissionTypeUpdate {
	if i != nil {
		mtu.SetCreatedBy(*i)
	}
	return mtu
}

// AddCreatedBy adds i to the "created_by" field.
func (mtu *MissionTypeUpdate) AddCreatedBy(i int64) *MissionTypeUpdate {
	mtu.mutation.AddCreatedBy(i)
	return mtu
}

// SetUpdatedBy sets the "updated_by" field.
func (mtu *MissionTypeUpdate) SetUpdatedBy(i int64) *MissionTypeUpdate {
	mtu.mutation.ResetUpdatedBy()
	mtu.mutation.SetUpdatedBy(i)
	return mtu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mtu *MissionTypeUpdate) SetNillableUpdatedBy(i *int64) *MissionTypeUpdate {
	if i != nil {
		mtu.SetUpdatedBy(*i)
	}
	return mtu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (mtu *MissionTypeUpdate) AddUpdatedBy(i int64) *MissionTypeUpdate {
	mtu.mutation.AddUpdatedBy(i)
	return mtu
}

// SetUpdatedAt sets the "updated_at" field.
func (mtu *MissionTypeUpdate) SetUpdatedAt(t time.Time) *MissionTypeUpdate {
	mtu.mutation.SetUpdatedAt(t)
	return mtu
}

// SetDeletedAt sets the "deleted_at" field.
func (mtu *MissionTypeUpdate) SetDeletedAt(t time.Time) *MissionTypeUpdate {
	mtu.mutation.SetDeletedAt(t)
	return mtu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mtu *MissionTypeUpdate) SetNillableDeletedAt(t *time.Time) *MissionTypeUpdate {
	if t != nil {
		mtu.SetDeletedAt(*t)
	}
	return mtu
}

// SetType sets the "type" field.
func (mtu *MissionTypeUpdate) SetType(et enums.MissionType) *MissionTypeUpdate {
	mtu.mutation.SetType(et)
	return mtu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mtu *MissionTypeUpdate) SetNillableType(et *enums.MissionType) *MissionTypeUpdate {
	if et != nil {
		mtu.SetType(*et)
	}
	return mtu
}

// SetGpu sets the "gpu" field.
func (mtu *MissionTypeUpdate) SetGpu(e enums.GPU) *MissionTypeUpdate {
	mtu.mutation.SetGpu(e)
	return mtu
}

// SetNillableGpu sets the "gpu" field if the given value is not nil.
func (mtu *MissionTypeUpdate) SetNillableGpu(e *enums.GPU) *MissionTypeUpdate {
	if e != nil {
		mtu.SetGpu(*e)
	}
	return mtu
}

// SetCep sets the "cep" field.
func (mtu *MissionTypeUpdate) SetCep(i int64) *MissionTypeUpdate {
	mtu.mutation.ResetCep()
	mtu.mutation.SetCep(i)
	return mtu
}

// SetNillableCep sets the "cep" field if the given value is not nil.
func (mtu *MissionTypeUpdate) SetNillableCep(i *int64) *MissionTypeUpdate {
	if i != nil {
		mtu.SetCep(*i)
	}
	return mtu
}

// AddCep adds i to the "cep" field.
func (mtu *MissionTypeUpdate) AddCep(i int64) *MissionTypeUpdate {
	mtu.mutation.AddCep(i)
	return mtu
}

// SetIsTime sets the "is_time" field.
func (mtu *MissionTypeUpdate) SetIsTime(b bool) *MissionTypeUpdate {
	mtu.mutation.SetIsTime(b)
	return mtu
}

// SetNillableIsTime sets the "is_time" field if the given value is not nil.
func (mtu *MissionTypeUpdate) SetNillableIsTime(b *bool) *MissionTypeUpdate {
	if b != nil {
		mtu.SetIsTime(*b)
	}
	return mtu
}

// SetCategory sets the "category" field.
func (mtu *MissionTypeUpdate) SetCategory(ec enums.MissionCategory) *MissionTypeUpdate {
	mtu.mutation.SetCategory(ec)
	return mtu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (mtu *MissionTypeUpdate) SetNillableCategory(ec *enums.MissionCategory) *MissionTypeUpdate {
	if ec != nil {
		mtu.SetCategory(*ec)
	}
	return mtu
}

// Mutation returns the MissionTypeMutation object of the builder.
func (mtu *MissionTypeUpdate) Mutation() *MissionTypeMutation {
	return mtu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mtu *MissionTypeUpdate) Save(ctx context.Context) (int, error) {
	mtu.defaults()
	return withHooks(ctx, mtu.sqlSave, mtu.mutation, mtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mtu *MissionTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := mtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mtu *MissionTypeUpdate) Exec(ctx context.Context) error {
	_, err := mtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtu *MissionTypeUpdate) ExecX(ctx context.Context) {
	if err := mtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mtu *MissionTypeUpdate) defaults() {
	if _, ok := mtu.mutation.UpdatedAt(); !ok {
		v := missiontype.UpdateDefaultUpdatedAt()
		mtu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mtu *MissionTypeUpdate) check() error {
	if v, ok := mtu.mutation.GetType(); ok {
		if err := missiontype.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "MissionType.type": %w`, err)}
		}
	}
	if v, ok := mtu.mutation.Gpu(); ok {
		if err := missiontype.GpuValidator(v); err != nil {
			return &ValidationError{Name: "gpu", err: fmt.Errorf(`cep_ent: validator failed for field "MissionType.gpu": %w`, err)}
		}
	}
	if v, ok := mtu.mutation.Category(); ok {
		if err := missiontype.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`cep_ent: validator failed for field "MissionType.category": %w`, err)}
		}
	}
	return nil
}

func (mtu *MissionTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(missiontype.Table, missiontype.Columns, sqlgraph.NewFieldSpec(missiontype.FieldID, field.TypeInt64))
	if ps := mtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mtu.mutation.CreatedBy(); ok {
		_spec.SetField(missiontype.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mtu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(missiontype.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mtu.mutation.UpdatedBy(); ok {
		_spec.SetField(missiontype.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mtu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(missiontype.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mtu.mutation.UpdatedAt(); ok {
		_spec.SetField(missiontype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mtu.mutation.DeletedAt(); ok {
		_spec.SetField(missiontype.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := mtu.mutation.GetType(); ok {
		_spec.SetField(missiontype.FieldType, field.TypeEnum, value)
	}
	if value, ok := mtu.mutation.Gpu(); ok {
		_spec.SetField(missiontype.FieldGpu, field.TypeEnum, value)
	}
	if value, ok := mtu.mutation.Cep(); ok {
		_spec.SetField(missiontype.FieldCep, field.TypeInt64, value)
	}
	if value, ok := mtu.mutation.AddedCep(); ok {
		_spec.AddField(missiontype.FieldCep, field.TypeInt64, value)
	}
	if value, ok := mtu.mutation.IsTime(); ok {
		_spec.SetField(missiontype.FieldIsTime, field.TypeBool, value)
	}
	if value, ok := mtu.mutation.Category(); ok {
		_spec.SetField(missiontype.FieldCategory, field.TypeEnum, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{missiontype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mtu.mutation.done = true
	return n, nil
}

// MissionTypeUpdateOne is the builder for updating a single MissionType entity.
type MissionTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MissionTypeMutation
}

// SetCreatedBy sets the "created_by" field.
func (mtuo *MissionTypeUpdateOne) SetCreatedBy(i int64) *MissionTypeUpdateOne {
	mtuo.mutation.ResetCreatedBy()
	mtuo.mutation.SetCreatedBy(i)
	return mtuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mtuo *MissionTypeUpdateOne) SetNillableCreatedBy(i *int64) *MissionTypeUpdateOne {
	if i != nil {
		mtuo.SetCreatedBy(*i)
	}
	return mtuo
}

// AddCreatedBy adds i to the "created_by" field.
func (mtuo *MissionTypeUpdateOne) AddCreatedBy(i int64) *MissionTypeUpdateOne {
	mtuo.mutation.AddCreatedBy(i)
	return mtuo
}

// SetUpdatedBy sets the "updated_by" field.
func (mtuo *MissionTypeUpdateOne) SetUpdatedBy(i int64) *MissionTypeUpdateOne {
	mtuo.mutation.ResetUpdatedBy()
	mtuo.mutation.SetUpdatedBy(i)
	return mtuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mtuo *MissionTypeUpdateOne) SetNillableUpdatedBy(i *int64) *MissionTypeUpdateOne {
	if i != nil {
		mtuo.SetUpdatedBy(*i)
	}
	return mtuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (mtuo *MissionTypeUpdateOne) AddUpdatedBy(i int64) *MissionTypeUpdateOne {
	mtuo.mutation.AddUpdatedBy(i)
	return mtuo
}

// SetUpdatedAt sets the "updated_at" field.
func (mtuo *MissionTypeUpdateOne) SetUpdatedAt(t time.Time) *MissionTypeUpdateOne {
	mtuo.mutation.SetUpdatedAt(t)
	return mtuo
}

// SetDeletedAt sets the "deleted_at" field.
func (mtuo *MissionTypeUpdateOne) SetDeletedAt(t time.Time) *MissionTypeUpdateOne {
	mtuo.mutation.SetDeletedAt(t)
	return mtuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mtuo *MissionTypeUpdateOne) SetNillableDeletedAt(t *time.Time) *MissionTypeUpdateOne {
	if t != nil {
		mtuo.SetDeletedAt(*t)
	}
	return mtuo
}

// SetType sets the "type" field.
func (mtuo *MissionTypeUpdateOne) SetType(et enums.MissionType) *MissionTypeUpdateOne {
	mtuo.mutation.SetType(et)
	return mtuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mtuo *MissionTypeUpdateOne) SetNillableType(et *enums.MissionType) *MissionTypeUpdateOne {
	if et != nil {
		mtuo.SetType(*et)
	}
	return mtuo
}

// SetGpu sets the "gpu" field.
func (mtuo *MissionTypeUpdateOne) SetGpu(e enums.GPU) *MissionTypeUpdateOne {
	mtuo.mutation.SetGpu(e)
	return mtuo
}

// SetNillableGpu sets the "gpu" field if the given value is not nil.
func (mtuo *MissionTypeUpdateOne) SetNillableGpu(e *enums.GPU) *MissionTypeUpdateOne {
	if e != nil {
		mtuo.SetGpu(*e)
	}
	return mtuo
}

// SetCep sets the "cep" field.
func (mtuo *MissionTypeUpdateOne) SetCep(i int64) *MissionTypeUpdateOne {
	mtuo.mutation.ResetCep()
	mtuo.mutation.SetCep(i)
	return mtuo
}

// SetNillableCep sets the "cep" field if the given value is not nil.
func (mtuo *MissionTypeUpdateOne) SetNillableCep(i *int64) *MissionTypeUpdateOne {
	if i != nil {
		mtuo.SetCep(*i)
	}
	return mtuo
}

// AddCep adds i to the "cep" field.
func (mtuo *MissionTypeUpdateOne) AddCep(i int64) *MissionTypeUpdateOne {
	mtuo.mutation.AddCep(i)
	return mtuo
}

// SetIsTime sets the "is_time" field.
func (mtuo *MissionTypeUpdateOne) SetIsTime(b bool) *MissionTypeUpdateOne {
	mtuo.mutation.SetIsTime(b)
	return mtuo
}

// SetNillableIsTime sets the "is_time" field if the given value is not nil.
func (mtuo *MissionTypeUpdateOne) SetNillableIsTime(b *bool) *MissionTypeUpdateOne {
	if b != nil {
		mtuo.SetIsTime(*b)
	}
	return mtuo
}

// SetCategory sets the "category" field.
func (mtuo *MissionTypeUpdateOne) SetCategory(ec enums.MissionCategory) *MissionTypeUpdateOne {
	mtuo.mutation.SetCategory(ec)
	return mtuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (mtuo *MissionTypeUpdateOne) SetNillableCategory(ec *enums.MissionCategory) *MissionTypeUpdateOne {
	if ec != nil {
		mtuo.SetCategory(*ec)
	}
	return mtuo
}

// Mutation returns the MissionTypeMutation object of the builder.
func (mtuo *MissionTypeUpdateOne) Mutation() *MissionTypeMutation {
	return mtuo.mutation
}

// Where appends a list predicates to the MissionTypeUpdate builder.
func (mtuo *MissionTypeUpdateOne) Where(ps ...predicate.MissionType) *MissionTypeUpdateOne {
	mtuo.mutation.Where(ps...)
	return mtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mtuo *MissionTypeUpdateOne) Select(field string, fields ...string) *MissionTypeUpdateOne {
	mtuo.fields = append([]string{field}, fields...)
	return mtuo
}

// Save executes the query and returns the updated MissionType entity.
func (mtuo *MissionTypeUpdateOne) Save(ctx context.Context) (*MissionType, error) {
	mtuo.defaults()
	return withHooks(ctx, mtuo.sqlSave, mtuo.mutation, mtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mtuo *MissionTypeUpdateOne) SaveX(ctx context.Context) *MissionType {
	node, err := mtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mtuo *MissionTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := mtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtuo *MissionTypeUpdateOne) ExecX(ctx context.Context) {
	if err := mtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mtuo *MissionTypeUpdateOne) defaults() {
	if _, ok := mtuo.mutation.UpdatedAt(); !ok {
		v := missiontype.UpdateDefaultUpdatedAt()
		mtuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mtuo *MissionTypeUpdateOne) check() error {
	if v, ok := mtuo.mutation.GetType(); ok {
		if err := missiontype.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "MissionType.type": %w`, err)}
		}
	}
	if v, ok := mtuo.mutation.Gpu(); ok {
		if err := missiontype.GpuValidator(v); err != nil {
			return &ValidationError{Name: "gpu", err: fmt.Errorf(`cep_ent: validator failed for field "MissionType.gpu": %w`, err)}
		}
	}
	if v, ok := mtuo.mutation.Category(); ok {
		if err := missiontype.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`cep_ent: validator failed for field "MissionType.category": %w`, err)}
		}
	}
	return nil
}

func (mtuo *MissionTypeUpdateOne) sqlSave(ctx context.Context) (_node *MissionType, err error) {
	if err := mtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(missiontype.Table, missiontype.Columns, sqlgraph.NewFieldSpec(missiontype.FieldID, field.TypeInt64))
	id, ok := mtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "MissionType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, missiontype.FieldID)
		for _, f := range fields {
			if !missiontype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != missiontype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mtuo.mutation.CreatedBy(); ok {
		_spec.SetField(missiontype.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mtuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(missiontype.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mtuo.mutation.UpdatedBy(); ok {
		_spec.SetField(missiontype.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mtuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(missiontype.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mtuo.mutation.UpdatedAt(); ok {
		_spec.SetField(missiontype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mtuo.mutation.DeletedAt(); ok {
		_spec.SetField(missiontype.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := mtuo.mutation.GetType(); ok {
		_spec.SetField(missiontype.FieldType, field.TypeEnum, value)
	}
	if value, ok := mtuo.mutation.Gpu(); ok {
		_spec.SetField(missiontype.FieldGpu, field.TypeEnum, value)
	}
	if value, ok := mtuo.mutation.Cep(); ok {
		_spec.SetField(missiontype.FieldCep, field.TypeInt64, value)
	}
	if value, ok := mtuo.mutation.AddedCep(); ok {
		_spec.AddField(missiontype.FieldCep, field.TypeInt64, value)
	}
	if value, ok := mtuo.mutation.IsTime(); ok {
		_spec.SetField(missiontype.FieldIsTime, field.TypeBool, value)
	}
	if value, ok := mtuo.mutation.Category(); ok {
		_spec.SetField(missiontype.FieldCategory, field.TypeEnum, value)
	}
	_node = &MissionType{config: mtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{missiontype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mtuo.mutation.done = true
	return _node, nil
}
