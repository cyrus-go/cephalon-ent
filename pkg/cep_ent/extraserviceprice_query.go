// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/extraservice"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/extraserviceprice"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// ExtraServicePriceQuery is the builder for querying ExtraServicePrice entities.
type ExtraServicePriceQuery struct {
	config
	ctx              *QueryContext
	order            []extraserviceprice.OrderOption
	inters           []Interceptor
	predicates       []predicate.ExtraServicePrice
	withExtraService *ExtraServiceQuery
	modifiers        []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ExtraServicePriceQuery builder.
func (espq *ExtraServicePriceQuery) Where(ps ...predicate.ExtraServicePrice) *ExtraServicePriceQuery {
	espq.predicates = append(espq.predicates, ps...)
	return espq
}

// Limit the number of records to be returned by this query.
func (espq *ExtraServicePriceQuery) Limit(limit int) *ExtraServicePriceQuery {
	espq.ctx.Limit = &limit
	return espq
}

// Offset to start from.
func (espq *ExtraServicePriceQuery) Offset(offset int) *ExtraServicePriceQuery {
	espq.ctx.Offset = &offset
	return espq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (espq *ExtraServicePriceQuery) Unique(unique bool) *ExtraServicePriceQuery {
	espq.ctx.Unique = &unique
	return espq
}

// Order specifies how the records should be ordered.
func (espq *ExtraServicePriceQuery) Order(o ...extraserviceprice.OrderOption) *ExtraServicePriceQuery {
	espq.order = append(espq.order, o...)
	return espq
}

// QueryExtraService chains the current query on the "extra_service" edge.
func (espq *ExtraServicePriceQuery) QueryExtraService() *ExtraServiceQuery {
	query := (&ExtraServiceClient{config: espq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := espq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := espq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(extraserviceprice.Table, extraserviceprice.FieldID, selector),
			sqlgraph.To(extraservice.Table, extraservice.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, extraserviceprice.ExtraServiceTable, extraserviceprice.ExtraServiceColumn),
		)
		fromU = sqlgraph.SetNeighbors(espq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ExtraServicePrice entity from the query.
// Returns a *NotFoundError when no ExtraServicePrice was found.
func (espq *ExtraServicePriceQuery) First(ctx context.Context) (*ExtraServicePrice, error) {
	nodes, err := espq.Limit(1).All(setContextOp(ctx, espq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{extraserviceprice.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (espq *ExtraServicePriceQuery) FirstX(ctx context.Context) *ExtraServicePrice {
	node, err := espq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ExtraServicePrice ID from the query.
// Returns a *NotFoundError when no ExtraServicePrice ID was found.
func (espq *ExtraServicePriceQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = espq.Limit(1).IDs(setContextOp(ctx, espq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{extraserviceprice.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (espq *ExtraServicePriceQuery) FirstIDX(ctx context.Context) int64 {
	id, err := espq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ExtraServicePrice entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ExtraServicePrice entity is found.
// Returns a *NotFoundError when no ExtraServicePrice entities are found.
func (espq *ExtraServicePriceQuery) Only(ctx context.Context) (*ExtraServicePrice, error) {
	nodes, err := espq.Limit(2).All(setContextOp(ctx, espq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{extraserviceprice.Label}
	default:
		return nil, &NotSingularError{extraserviceprice.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (espq *ExtraServicePriceQuery) OnlyX(ctx context.Context) *ExtraServicePrice {
	node, err := espq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ExtraServicePrice ID in the query.
// Returns a *NotSingularError when more than one ExtraServicePrice ID is found.
// Returns a *NotFoundError when no entities are found.
func (espq *ExtraServicePriceQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = espq.Limit(2).IDs(setContextOp(ctx, espq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{extraserviceprice.Label}
	default:
		err = &NotSingularError{extraserviceprice.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (espq *ExtraServicePriceQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := espq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ExtraServicePrices.
func (espq *ExtraServicePriceQuery) All(ctx context.Context) ([]*ExtraServicePrice, error) {
	ctx = setContextOp(ctx, espq.ctx, "All")
	if err := espq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ExtraServicePrice, *ExtraServicePriceQuery]()
	return withInterceptors[[]*ExtraServicePrice](ctx, espq, qr, espq.inters)
}

// AllX is like All, but panics if an error occurs.
func (espq *ExtraServicePriceQuery) AllX(ctx context.Context) []*ExtraServicePrice {
	nodes, err := espq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ExtraServicePrice IDs.
func (espq *ExtraServicePriceQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if espq.ctx.Unique == nil && espq.path != nil {
		espq.Unique(true)
	}
	ctx = setContextOp(ctx, espq.ctx, "IDs")
	if err = espq.Select(extraserviceprice.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (espq *ExtraServicePriceQuery) IDsX(ctx context.Context) []int64 {
	ids, err := espq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (espq *ExtraServicePriceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, espq.ctx, "Count")
	if err := espq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, espq, querierCount[*ExtraServicePriceQuery](), espq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (espq *ExtraServicePriceQuery) CountX(ctx context.Context) int {
	count, err := espq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (espq *ExtraServicePriceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, espq.ctx, "Exist")
	switch _, err := espq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("cep_ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (espq *ExtraServicePriceQuery) ExistX(ctx context.Context) bool {
	exist, err := espq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ExtraServicePriceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (espq *ExtraServicePriceQuery) Clone() *ExtraServicePriceQuery {
	if espq == nil {
		return nil
	}
	return &ExtraServicePriceQuery{
		config:           espq.config,
		ctx:              espq.ctx.Clone(),
		order:            append([]extraserviceprice.OrderOption{}, espq.order...),
		inters:           append([]Interceptor{}, espq.inters...),
		predicates:       append([]predicate.ExtraServicePrice{}, espq.predicates...),
		withExtraService: espq.withExtraService.Clone(),
		// clone intermediate query.
		sql:  espq.sql.Clone(),
		path: espq.path,
	}
}

// WithExtraService tells the query-builder to eager-load the nodes that are connected to
// the "extra_service" edge. The optional arguments are used to configure the query builder of the edge.
func (espq *ExtraServicePriceQuery) WithExtraService(opts ...func(*ExtraServiceQuery)) *ExtraServicePriceQuery {
	query := (&ExtraServiceClient{config: espq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	espq.withExtraService = query
	return espq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by,string"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ExtraServicePrice.Query().
//		GroupBy(extraserviceprice.FieldCreatedBy).
//		Aggregate(cep_ent.Count()).
//		Scan(ctx, &v)
func (espq *ExtraServicePriceQuery) GroupBy(field string, fields ...string) *ExtraServicePriceGroupBy {
	espq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ExtraServicePriceGroupBy{build: espq}
	grbuild.flds = &espq.ctx.Fields
	grbuild.label = extraserviceprice.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by,string"`
//	}
//
//	client.ExtraServicePrice.Query().
//		Select(extraserviceprice.FieldCreatedBy).
//		Scan(ctx, &v)
func (espq *ExtraServicePriceQuery) Select(fields ...string) *ExtraServicePriceSelect {
	espq.ctx.Fields = append(espq.ctx.Fields, fields...)
	sbuild := &ExtraServicePriceSelect{ExtraServicePriceQuery: espq}
	sbuild.label = extraserviceprice.Label
	sbuild.flds, sbuild.scan = &espq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ExtraServicePriceSelect configured with the given aggregations.
func (espq *ExtraServicePriceQuery) Aggregate(fns ...AggregateFunc) *ExtraServicePriceSelect {
	return espq.Select().Aggregate(fns...)
}

func (espq *ExtraServicePriceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range espq.inters {
		if inter == nil {
			return fmt.Errorf("cep_ent: uninitialized interceptor (forgotten import cep_ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, espq); err != nil {
				return err
			}
		}
	}
	for _, f := range espq.ctx.Fields {
		if !extraserviceprice.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
		}
	}
	if espq.path != nil {
		prev, err := espq.path(ctx)
		if err != nil {
			return err
		}
		espq.sql = prev
	}
	return nil
}

func (espq *ExtraServicePriceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ExtraServicePrice, error) {
	var (
		nodes       = []*ExtraServicePrice{}
		_spec       = espq.querySpec()
		loadedTypes = [1]bool{
			espq.withExtraService != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ExtraServicePrice).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ExtraServicePrice{config: espq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(espq.modifiers) > 0 {
		_spec.Modifiers = espq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, espq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := espq.withExtraService; query != nil {
		if err := espq.loadExtraService(ctx, query, nodes, nil,
			func(n *ExtraServicePrice, e *ExtraService) { n.Edges.ExtraService = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (espq *ExtraServicePriceQuery) loadExtraService(ctx context.Context, query *ExtraServiceQuery, nodes []*ExtraServicePrice, init func(*ExtraServicePrice), assign func(*ExtraServicePrice, *ExtraService)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*ExtraServicePrice)
	for i := range nodes {
		fk := nodes[i].ExtraServiceID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(extraservice.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "extra_service_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (espq *ExtraServicePriceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := espq.querySpec()
	if len(espq.modifiers) > 0 {
		_spec.Modifiers = espq.modifiers
	}
	_spec.Node.Columns = espq.ctx.Fields
	if len(espq.ctx.Fields) > 0 {
		_spec.Unique = espq.ctx.Unique != nil && *espq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, espq.driver, _spec)
}

func (espq *ExtraServicePriceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(extraserviceprice.Table, extraserviceprice.Columns, sqlgraph.NewFieldSpec(extraserviceprice.FieldID, field.TypeInt64))
	_spec.From = espq.sql
	if unique := espq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if espq.path != nil {
		_spec.Unique = true
	}
	if fields := espq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, extraserviceprice.FieldID)
		for i := range fields {
			if fields[i] != extraserviceprice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if espq.withExtraService != nil {
			_spec.Node.AddColumnOnce(extraserviceprice.FieldExtraServiceID)
		}
	}
	if ps := espq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := espq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := espq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := espq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (espq *ExtraServicePriceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(espq.driver.Dialect())
	t1 := builder.Table(extraserviceprice.Table)
	columns := espq.ctx.Fields
	if len(columns) == 0 {
		columns = extraserviceprice.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if espq.sql != nil {
		selector = espq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if espq.ctx.Unique != nil && *espq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range espq.modifiers {
		m(selector)
	}
	for _, p := range espq.predicates {
		p(selector)
	}
	for _, p := range espq.order {
		p(selector)
	}
	if offset := espq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := espq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (espq *ExtraServicePriceQuery) Modify(modifiers ...func(s *sql.Selector)) *ExtraServicePriceSelect {
	espq.modifiers = append(espq.modifiers, modifiers...)
	return espq.Select()
}

// ExtraServicePriceGroupBy is the group-by builder for ExtraServicePrice entities.
type ExtraServicePriceGroupBy struct {
	selector
	build *ExtraServicePriceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (espgb *ExtraServicePriceGroupBy) Aggregate(fns ...AggregateFunc) *ExtraServicePriceGroupBy {
	espgb.fns = append(espgb.fns, fns...)
	return espgb
}

// Scan applies the selector query and scans the result into the given value.
func (espgb *ExtraServicePriceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, espgb.build.ctx, "GroupBy")
	if err := espgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ExtraServicePriceQuery, *ExtraServicePriceGroupBy](ctx, espgb.build, espgb, espgb.build.inters, v)
}

func (espgb *ExtraServicePriceGroupBy) sqlScan(ctx context.Context, root *ExtraServicePriceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(espgb.fns))
	for _, fn := range espgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*espgb.flds)+len(espgb.fns))
		for _, f := range *espgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*espgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := espgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ExtraServicePriceSelect is the builder for selecting fields of ExtraServicePrice entities.
type ExtraServicePriceSelect struct {
	*ExtraServicePriceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (esps *ExtraServicePriceSelect) Aggregate(fns ...AggregateFunc) *ExtraServicePriceSelect {
	esps.fns = append(esps.fns, fns...)
	return esps
}

// Scan applies the selector query and scans the result into the given value.
func (esps *ExtraServicePriceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, esps.ctx, "Select")
	if err := esps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ExtraServicePriceQuery, *ExtraServicePriceSelect](ctx, esps.ExtraServicePriceQuery, esps, esps.inters, v)
}

func (esps *ExtraServicePriceSelect) sqlScan(ctx context.Context, root *ExtraServicePriceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(esps.fns))
	for _, fn := range esps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*esps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := esps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (esps *ExtraServicePriceSelect) Modify(modifiers ...func(s *sql.Selector)) *ExtraServicePriceSelect {
	esps.modifiers = append(esps.modifiers, modifiers...)
	return esps
}
