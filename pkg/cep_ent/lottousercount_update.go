// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lotto"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottousercount"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
)

// LottoUserCountUpdate is the builder for updating LottoUserCount entities.
type LottoUserCountUpdate struct {
	config
	hooks     []Hook
	mutation  *LottoUserCountMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the LottoUserCountUpdate builder.
func (lucu *LottoUserCountUpdate) Where(ps ...predicate.LottoUserCount) *LottoUserCountUpdate {
	lucu.mutation.Where(ps...)
	return lucu
}

// SetCreatedBy sets the "created_by" field.
func (lucu *LottoUserCountUpdate) SetCreatedBy(i int64) *LottoUserCountUpdate {
	lucu.mutation.ResetCreatedBy()
	lucu.mutation.SetCreatedBy(i)
	return lucu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (lucu *LottoUserCountUpdate) SetNillableCreatedBy(i *int64) *LottoUserCountUpdate {
	if i != nil {
		lucu.SetCreatedBy(*i)
	}
	return lucu
}

// AddCreatedBy adds i to the "created_by" field.
func (lucu *LottoUserCountUpdate) AddCreatedBy(i int64) *LottoUserCountUpdate {
	lucu.mutation.AddCreatedBy(i)
	return lucu
}

// SetUpdatedBy sets the "updated_by" field.
func (lucu *LottoUserCountUpdate) SetUpdatedBy(i int64) *LottoUserCountUpdate {
	lucu.mutation.ResetUpdatedBy()
	lucu.mutation.SetUpdatedBy(i)
	return lucu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (lucu *LottoUserCountUpdate) SetNillableUpdatedBy(i *int64) *LottoUserCountUpdate {
	if i != nil {
		lucu.SetUpdatedBy(*i)
	}
	return lucu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (lucu *LottoUserCountUpdate) AddUpdatedBy(i int64) *LottoUserCountUpdate {
	lucu.mutation.AddUpdatedBy(i)
	return lucu
}

// SetUpdatedAt sets the "updated_at" field.
func (lucu *LottoUserCountUpdate) SetUpdatedAt(t time.Time) *LottoUserCountUpdate {
	lucu.mutation.SetUpdatedAt(t)
	return lucu
}

// SetDeletedAt sets the "deleted_at" field.
func (lucu *LottoUserCountUpdate) SetDeletedAt(t time.Time) *LottoUserCountUpdate {
	lucu.mutation.SetDeletedAt(t)
	return lucu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lucu *LottoUserCountUpdate) SetNillableDeletedAt(t *time.Time) *LottoUserCountUpdate {
	if t != nil {
		lucu.SetDeletedAt(*t)
	}
	return lucu
}

// SetUserID sets the "user_id" field.
func (lucu *LottoUserCountUpdate) SetUserID(i int64) *LottoUserCountUpdate {
	lucu.mutation.SetUserID(i)
	return lucu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (lucu *LottoUserCountUpdate) SetNillableUserID(i *int64) *LottoUserCountUpdate {
	if i != nil {
		lucu.SetUserID(*i)
	}
	return lucu
}

// SetLottoID sets the "lotto_id" field.
func (lucu *LottoUserCountUpdate) SetLottoID(i int64) *LottoUserCountUpdate {
	lucu.mutation.SetLottoID(i)
	return lucu
}

// SetNillableLottoID sets the "lotto_id" field if the given value is not nil.
func (lucu *LottoUserCountUpdate) SetNillableLottoID(i *int64) *LottoUserCountUpdate {
	if i != nil {
		lucu.SetLottoID(*i)
	}
	return lucu
}

// SetRemainLottoCount sets the "remain_lotto_count" field.
func (lucu *LottoUserCountUpdate) SetRemainLottoCount(i int64) *LottoUserCountUpdate {
	lucu.mutation.ResetRemainLottoCount()
	lucu.mutation.SetRemainLottoCount(i)
	return lucu
}

// SetNillableRemainLottoCount sets the "remain_lotto_count" field if the given value is not nil.
func (lucu *LottoUserCountUpdate) SetNillableRemainLottoCount(i *int64) *LottoUserCountUpdate {
	if i != nil {
		lucu.SetRemainLottoCount(*i)
	}
	return lucu
}

// AddRemainLottoCount adds i to the "remain_lotto_count" field.
func (lucu *LottoUserCountUpdate) AddRemainLottoCount(i int64) *LottoUserCountUpdate {
	lucu.mutation.AddRemainLottoCount(i)
	return lucu
}

// SetUser sets the "user" edge to the User entity.
func (lucu *LottoUserCountUpdate) SetUser(u *User) *LottoUserCountUpdate {
	return lucu.SetUserID(u.ID)
}

// SetLotto sets the "lotto" edge to the Lotto entity.
func (lucu *LottoUserCountUpdate) SetLotto(l *Lotto) *LottoUserCountUpdate {
	return lucu.SetLottoID(l.ID)
}

// Mutation returns the LottoUserCountMutation object of the builder.
func (lucu *LottoUserCountUpdate) Mutation() *LottoUserCountMutation {
	return lucu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (lucu *LottoUserCountUpdate) ClearUser() *LottoUserCountUpdate {
	lucu.mutation.ClearUser()
	return lucu
}

// ClearLotto clears the "lotto" edge to the Lotto entity.
func (lucu *LottoUserCountUpdate) ClearLotto() *LottoUserCountUpdate {
	lucu.mutation.ClearLotto()
	return lucu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lucu *LottoUserCountUpdate) Save(ctx context.Context) (int, error) {
	lucu.defaults()
	return withHooks(ctx, lucu.sqlSave, lucu.mutation, lucu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lucu *LottoUserCountUpdate) SaveX(ctx context.Context) int {
	affected, err := lucu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lucu *LottoUserCountUpdate) Exec(ctx context.Context) error {
	_, err := lucu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lucu *LottoUserCountUpdate) ExecX(ctx context.Context) {
	if err := lucu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lucu *LottoUserCountUpdate) defaults() {
	if _, ok := lucu.mutation.UpdatedAt(); !ok {
		v := lottousercount.UpdateDefaultUpdatedAt()
		lucu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lucu *LottoUserCountUpdate) check() error {
	if _, ok := lucu.mutation.UserID(); lucu.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "LottoUserCount.user"`)
	}
	if _, ok := lucu.mutation.LottoID(); lucu.mutation.LottoCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "LottoUserCount.lotto"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (lucu *LottoUserCountUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LottoUserCountUpdate {
	lucu.modifiers = append(lucu.modifiers, modifiers...)
	return lucu
}

func (lucu *LottoUserCountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lucu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(lottousercount.Table, lottousercount.Columns, sqlgraph.NewFieldSpec(lottousercount.FieldID, field.TypeInt64))
	if ps := lucu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lucu.mutation.CreatedBy(); ok {
		_spec.SetField(lottousercount.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := lucu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(lottousercount.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := lucu.mutation.UpdatedBy(); ok {
		_spec.SetField(lottousercount.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := lucu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(lottousercount.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := lucu.mutation.UpdatedAt(); ok {
		_spec.SetField(lottousercount.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lucu.mutation.DeletedAt(); ok {
		_spec.SetField(lottousercount.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := lucu.mutation.RemainLottoCount(); ok {
		_spec.SetField(lottousercount.FieldRemainLottoCount, field.TypeInt64, value)
	}
	if value, ok := lucu.mutation.AddedRemainLottoCount(); ok {
		_spec.AddField(lottousercount.FieldRemainLottoCount, field.TypeInt64, value)
	}
	if lucu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottousercount.UserTable,
			Columns: []string{lottousercount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lucu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottousercount.UserTable,
			Columns: []string{lottousercount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lucu.mutation.LottoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottousercount.LottoTable,
			Columns: []string{lottousercount.LottoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lotto.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lucu.mutation.LottoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottousercount.LottoTable,
			Columns: []string{lottousercount.LottoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lotto.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(lucu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, lucu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lottousercount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lucu.mutation.done = true
	return n, nil
}

// LottoUserCountUpdateOne is the builder for updating a single LottoUserCount entity.
type LottoUserCountUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *LottoUserCountMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedBy sets the "created_by" field.
func (lucuo *LottoUserCountUpdateOne) SetCreatedBy(i int64) *LottoUserCountUpdateOne {
	lucuo.mutation.ResetCreatedBy()
	lucuo.mutation.SetCreatedBy(i)
	return lucuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (lucuo *LottoUserCountUpdateOne) SetNillableCreatedBy(i *int64) *LottoUserCountUpdateOne {
	if i != nil {
		lucuo.SetCreatedBy(*i)
	}
	return lucuo
}

// AddCreatedBy adds i to the "created_by" field.
func (lucuo *LottoUserCountUpdateOne) AddCreatedBy(i int64) *LottoUserCountUpdateOne {
	lucuo.mutation.AddCreatedBy(i)
	return lucuo
}

// SetUpdatedBy sets the "updated_by" field.
func (lucuo *LottoUserCountUpdateOne) SetUpdatedBy(i int64) *LottoUserCountUpdateOne {
	lucuo.mutation.ResetUpdatedBy()
	lucuo.mutation.SetUpdatedBy(i)
	return lucuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (lucuo *LottoUserCountUpdateOne) SetNillableUpdatedBy(i *int64) *LottoUserCountUpdateOne {
	if i != nil {
		lucuo.SetUpdatedBy(*i)
	}
	return lucuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (lucuo *LottoUserCountUpdateOne) AddUpdatedBy(i int64) *LottoUserCountUpdateOne {
	lucuo.mutation.AddUpdatedBy(i)
	return lucuo
}

// SetUpdatedAt sets the "updated_at" field.
func (lucuo *LottoUserCountUpdateOne) SetUpdatedAt(t time.Time) *LottoUserCountUpdateOne {
	lucuo.mutation.SetUpdatedAt(t)
	return lucuo
}

// SetDeletedAt sets the "deleted_at" field.
func (lucuo *LottoUserCountUpdateOne) SetDeletedAt(t time.Time) *LottoUserCountUpdateOne {
	lucuo.mutation.SetDeletedAt(t)
	return lucuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lucuo *LottoUserCountUpdateOne) SetNillableDeletedAt(t *time.Time) *LottoUserCountUpdateOne {
	if t != nil {
		lucuo.SetDeletedAt(*t)
	}
	return lucuo
}

// SetUserID sets the "user_id" field.
func (lucuo *LottoUserCountUpdateOne) SetUserID(i int64) *LottoUserCountUpdateOne {
	lucuo.mutation.SetUserID(i)
	return lucuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (lucuo *LottoUserCountUpdateOne) SetNillableUserID(i *int64) *LottoUserCountUpdateOne {
	if i != nil {
		lucuo.SetUserID(*i)
	}
	return lucuo
}

// SetLottoID sets the "lotto_id" field.
func (lucuo *LottoUserCountUpdateOne) SetLottoID(i int64) *LottoUserCountUpdateOne {
	lucuo.mutation.SetLottoID(i)
	return lucuo
}

// SetNillableLottoID sets the "lotto_id" field if the given value is not nil.
func (lucuo *LottoUserCountUpdateOne) SetNillableLottoID(i *int64) *LottoUserCountUpdateOne {
	if i != nil {
		lucuo.SetLottoID(*i)
	}
	return lucuo
}

// SetRemainLottoCount sets the "remain_lotto_count" field.
func (lucuo *LottoUserCountUpdateOne) SetRemainLottoCount(i int64) *LottoUserCountUpdateOne {
	lucuo.mutation.ResetRemainLottoCount()
	lucuo.mutation.SetRemainLottoCount(i)
	return lucuo
}

// SetNillableRemainLottoCount sets the "remain_lotto_count" field if the given value is not nil.
func (lucuo *LottoUserCountUpdateOne) SetNillableRemainLottoCount(i *int64) *LottoUserCountUpdateOne {
	if i != nil {
		lucuo.SetRemainLottoCount(*i)
	}
	return lucuo
}

// AddRemainLottoCount adds i to the "remain_lotto_count" field.
func (lucuo *LottoUserCountUpdateOne) AddRemainLottoCount(i int64) *LottoUserCountUpdateOne {
	lucuo.mutation.AddRemainLottoCount(i)
	return lucuo
}

// SetUser sets the "user" edge to the User entity.
func (lucuo *LottoUserCountUpdateOne) SetUser(u *User) *LottoUserCountUpdateOne {
	return lucuo.SetUserID(u.ID)
}

// SetLotto sets the "lotto" edge to the Lotto entity.
func (lucuo *LottoUserCountUpdateOne) SetLotto(l *Lotto) *LottoUserCountUpdateOne {
	return lucuo.SetLottoID(l.ID)
}

// Mutation returns the LottoUserCountMutation object of the builder.
func (lucuo *LottoUserCountUpdateOne) Mutation() *LottoUserCountMutation {
	return lucuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (lucuo *LottoUserCountUpdateOne) ClearUser() *LottoUserCountUpdateOne {
	lucuo.mutation.ClearUser()
	return lucuo
}

// ClearLotto clears the "lotto" edge to the Lotto entity.
func (lucuo *LottoUserCountUpdateOne) ClearLotto() *LottoUserCountUpdateOne {
	lucuo.mutation.ClearLotto()
	return lucuo
}

// Where appends a list predicates to the LottoUserCountUpdate builder.
func (lucuo *LottoUserCountUpdateOne) Where(ps ...predicate.LottoUserCount) *LottoUserCountUpdateOne {
	lucuo.mutation.Where(ps...)
	return lucuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lucuo *LottoUserCountUpdateOne) Select(field string, fields ...string) *LottoUserCountUpdateOne {
	lucuo.fields = append([]string{field}, fields...)
	return lucuo
}

// Save executes the query and returns the updated LottoUserCount entity.
func (lucuo *LottoUserCountUpdateOne) Save(ctx context.Context) (*LottoUserCount, error) {
	lucuo.defaults()
	return withHooks(ctx, lucuo.sqlSave, lucuo.mutation, lucuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lucuo *LottoUserCountUpdateOne) SaveX(ctx context.Context) *LottoUserCount {
	node, err := lucuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lucuo *LottoUserCountUpdateOne) Exec(ctx context.Context) error {
	_, err := lucuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lucuo *LottoUserCountUpdateOne) ExecX(ctx context.Context) {
	if err := lucuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lucuo *LottoUserCountUpdateOne) defaults() {
	if _, ok := lucuo.mutation.UpdatedAt(); !ok {
		v := lottousercount.UpdateDefaultUpdatedAt()
		lucuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lucuo *LottoUserCountUpdateOne) check() error {
	if _, ok := lucuo.mutation.UserID(); lucuo.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "LottoUserCount.user"`)
	}
	if _, ok := lucuo.mutation.LottoID(); lucuo.mutation.LottoCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "LottoUserCount.lotto"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (lucuo *LottoUserCountUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LottoUserCountUpdateOne {
	lucuo.modifiers = append(lucuo.modifiers, modifiers...)
	return lucuo
}

func (lucuo *LottoUserCountUpdateOne) sqlSave(ctx context.Context) (_node *LottoUserCount, err error) {
	if err := lucuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(lottousercount.Table, lottousercount.Columns, sqlgraph.NewFieldSpec(lottousercount.FieldID, field.TypeInt64))
	id, ok := lucuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "LottoUserCount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lucuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lottousercount.FieldID)
		for _, f := range fields {
			if !lottousercount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != lottousercount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lucuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lucuo.mutation.CreatedBy(); ok {
		_spec.SetField(lottousercount.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := lucuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(lottousercount.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := lucuo.mutation.UpdatedBy(); ok {
		_spec.SetField(lottousercount.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := lucuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(lottousercount.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := lucuo.mutation.UpdatedAt(); ok {
		_spec.SetField(lottousercount.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lucuo.mutation.DeletedAt(); ok {
		_spec.SetField(lottousercount.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := lucuo.mutation.RemainLottoCount(); ok {
		_spec.SetField(lottousercount.FieldRemainLottoCount, field.TypeInt64, value)
	}
	if value, ok := lucuo.mutation.AddedRemainLottoCount(); ok {
		_spec.AddField(lottousercount.FieldRemainLottoCount, field.TypeInt64, value)
	}
	if lucuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottousercount.UserTable,
			Columns: []string{lottousercount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lucuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottousercount.UserTable,
			Columns: []string{lottousercount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lucuo.mutation.LottoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottousercount.LottoTable,
			Columns: []string{lottousercount.LottoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lotto.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lucuo.mutation.LottoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottousercount.LottoTable,
			Columns: []string{lottousercount.LottoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lotto.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(lucuo.modifiers...)
	_node = &LottoUserCount{config: lucuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lucuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lottousercount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lucuo.mutation.done = true
	return _node, nil
}
