// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/device"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/frpcinfo"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/frpsinfo"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// FrpcInfoUpdate is the builder for updating FrpcInfo entities.
type FrpcInfoUpdate struct {
	config
	hooks     []Hook
	mutation  *FrpcInfoMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the FrpcInfoUpdate builder.
func (fiu *FrpcInfoUpdate) Where(ps ...predicate.FrpcInfo) *FrpcInfoUpdate {
	fiu.mutation.Where(ps...)
	return fiu
}

// SetCreatedBy sets the "created_by" field.
func (fiu *FrpcInfoUpdate) SetCreatedBy(i int64) *FrpcInfoUpdate {
	fiu.mutation.ResetCreatedBy()
	fiu.mutation.SetCreatedBy(i)
	return fiu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (fiu *FrpcInfoUpdate) SetNillableCreatedBy(i *int64) *FrpcInfoUpdate {
	if i != nil {
		fiu.SetCreatedBy(*i)
	}
	return fiu
}

// AddCreatedBy adds i to the "created_by" field.
func (fiu *FrpcInfoUpdate) AddCreatedBy(i int64) *FrpcInfoUpdate {
	fiu.mutation.AddCreatedBy(i)
	return fiu
}

// SetUpdatedBy sets the "updated_by" field.
func (fiu *FrpcInfoUpdate) SetUpdatedBy(i int64) *FrpcInfoUpdate {
	fiu.mutation.ResetUpdatedBy()
	fiu.mutation.SetUpdatedBy(i)
	return fiu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fiu *FrpcInfoUpdate) SetNillableUpdatedBy(i *int64) *FrpcInfoUpdate {
	if i != nil {
		fiu.SetUpdatedBy(*i)
	}
	return fiu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (fiu *FrpcInfoUpdate) AddUpdatedBy(i int64) *FrpcInfoUpdate {
	fiu.mutation.AddUpdatedBy(i)
	return fiu
}

// SetUpdatedAt sets the "updated_at" field.
func (fiu *FrpcInfoUpdate) SetUpdatedAt(t time.Time) *FrpcInfoUpdate {
	fiu.mutation.SetUpdatedAt(t)
	return fiu
}

// SetDeletedAt sets the "deleted_at" field.
func (fiu *FrpcInfoUpdate) SetDeletedAt(t time.Time) *FrpcInfoUpdate {
	fiu.mutation.SetDeletedAt(t)
	return fiu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fiu *FrpcInfoUpdate) SetNillableDeletedAt(t *time.Time) *FrpcInfoUpdate {
	if t != nil {
		fiu.SetDeletedAt(*t)
	}
	return fiu
}

// SetTag sets the "tag" field.
func (fiu *FrpcInfoUpdate) SetTag(s string) *FrpcInfoUpdate {
	fiu.mutation.SetTag(s)
	return fiu
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (fiu *FrpcInfoUpdate) SetNillableTag(s *string) *FrpcInfoUpdate {
	if s != nil {
		fiu.SetTag(*s)
	}
	return fiu
}

// SetType sets the "type" field.
func (fiu *FrpcInfoUpdate) SetType(s string) *FrpcInfoUpdate {
	fiu.mutation.SetType(s)
	return fiu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fiu *FrpcInfoUpdate) SetNillableType(s *string) *FrpcInfoUpdate {
	if s != nil {
		fiu.SetType(*s)
	}
	return fiu
}

// SetLocalIP sets the "local_ip" field.
func (fiu *FrpcInfoUpdate) SetLocalIP(s string) *FrpcInfoUpdate {
	fiu.mutation.SetLocalIP(s)
	return fiu
}

// SetNillableLocalIP sets the "local_ip" field if the given value is not nil.
func (fiu *FrpcInfoUpdate) SetNillableLocalIP(s *string) *FrpcInfoUpdate {
	if s != nil {
		fiu.SetLocalIP(*s)
	}
	return fiu
}

// SetLocalPort sets the "local_port" field.
func (fiu *FrpcInfoUpdate) SetLocalPort(i int) *FrpcInfoUpdate {
	fiu.mutation.ResetLocalPort()
	fiu.mutation.SetLocalPort(i)
	return fiu
}

// SetNillableLocalPort sets the "local_port" field if the given value is not nil.
func (fiu *FrpcInfoUpdate) SetNillableLocalPort(i *int) *FrpcInfoUpdate {
	if i != nil {
		fiu.SetLocalPort(*i)
	}
	return fiu
}

// AddLocalPort adds i to the "local_port" field.
func (fiu *FrpcInfoUpdate) AddLocalPort(i int) *FrpcInfoUpdate {
	fiu.mutation.AddLocalPort(i)
	return fiu
}

// SetRemotePort sets the "remote_port" field.
func (fiu *FrpcInfoUpdate) SetRemotePort(i int) *FrpcInfoUpdate {
	fiu.mutation.ResetRemotePort()
	fiu.mutation.SetRemotePort(i)
	return fiu
}

// SetNillableRemotePort sets the "remote_port" field if the given value is not nil.
func (fiu *FrpcInfoUpdate) SetNillableRemotePort(i *int) *FrpcInfoUpdate {
	if i != nil {
		fiu.SetRemotePort(*i)
	}
	return fiu
}

// AddRemotePort adds i to the "remote_port" field.
func (fiu *FrpcInfoUpdate) AddRemotePort(i int) *FrpcInfoUpdate {
	fiu.mutation.AddRemotePort(i)
	return fiu
}

// SetIsUsing sets the "is_using" field.
func (fiu *FrpcInfoUpdate) SetIsUsing(b bool) *FrpcInfoUpdate {
	fiu.mutation.SetIsUsing(b)
	return fiu
}

// SetNillableIsUsing sets the "is_using" field if the given value is not nil.
func (fiu *FrpcInfoUpdate) SetNillableIsUsing(b *bool) *FrpcInfoUpdate {
	if b != nil {
		fiu.SetIsUsing(*b)
	}
	return fiu
}

// SetFrpsID sets the "frps_id" field.
func (fiu *FrpcInfoUpdate) SetFrpsID(i int64) *FrpcInfoUpdate {
	fiu.mutation.SetFrpsID(i)
	return fiu
}

// SetNillableFrpsID sets the "frps_id" field if the given value is not nil.
func (fiu *FrpcInfoUpdate) SetNillableFrpsID(i *int64) *FrpcInfoUpdate {
	if i != nil {
		fiu.SetFrpsID(*i)
	}
	return fiu
}

// SetDeviceID sets the "device_id" field.
func (fiu *FrpcInfoUpdate) SetDeviceID(i int64) *FrpcInfoUpdate {
	fiu.mutation.SetDeviceID(i)
	return fiu
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (fiu *FrpcInfoUpdate) SetNillableDeviceID(i *int64) *FrpcInfoUpdate {
	if i != nil {
		fiu.SetDeviceID(*i)
	}
	return fiu
}

// SetFrpsInfoID sets the "frps_info" edge to the FrpsInfo entity by ID.
func (fiu *FrpcInfoUpdate) SetFrpsInfoID(id int64) *FrpcInfoUpdate {
	fiu.mutation.SetFrpsInfoID(id)
	return fiu
}

// SetFrpsInfo sets the "frps_info" edge to the FrpsInfo entity.
func (fiu *FrpcInfoUpdate) SetFrpsInfo(f *FrpsInfo) *FrpcInfoUpdate {
	return fiu.SetFrpsInfoID(f.ID)
}

// SetDevice sets the "device" edge to the Device entity.
func (fiu *FrpcInfoUpdate) SetDevice(d *Device) *FrpcInfoUpdate {
	return fiu.SetDeviceID(d.ID)
}

// Mutation returns the FrpcInfoMutation object of the builder.
func (fiu *FrpcInfoUpdate) Mutation() *FrpcInfoMutation {
	return fiu.mutation
}

// ClearFrpsInfo clears the "frps_info" edge to the FrpsInfo entity.
func (fiu *FrpcInfoUpdate) ClearFrpsInfo() *FrpcInfoUpdate {
	fiu.mutation.ClearFrpsInfo()
	return fiu
}

// ClearDevice clears the "device" edge to the Device entity.
func (fiu *FrpcInfoUpdate) ClearDevice() *FrpcInfoUpdate {
	fiu.mutation.ClearDevice()
	return fiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fiu *FrpcInfoUpdate) Save(ctx context.Context) (int, error) {
	fiu.defaults()
	return withHooks(ctx, fiu.sqlSave, fiu.mutation, fiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fiu *FrpcInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := fiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fiu *FrpcInfoUpdate) Exec(ctx context.Context) error {
	_, err := fiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fiu *FrpcInfoUpdate) ExecX(ctx context.Context) {
	if err := fiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fiu *FrpcInfoUpdate) defaults() {
	if _, ok := fiu.mutation.UpdatedAt(); !ok {
		v := frpcinfo.UpdateDefaultUpdatedAt()
		fiu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fiu *FrpcInfoUpdate) check() error {
	if _, ok := fiu.mutation.FrpsInfoID(); fiu.mutation.FrpsInfoCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "FrpcInfo.frps_info"`)
	}
	if _, ok := fiu.mutation.DeviceID(); fiu.mutation.DeviceCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "FrpcInfo.device"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fiu *FrpcInfoUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FrpcInfoUpdate {
	fiu.modifiers = append(fiu.modifiers, modifiers...)
	return fiu
}

func (fiu *FrpcInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(frpcinfo.Table, frpcinfo.Columns, sqlgraph.NewFieldSpec(frpcinfo.FieldID, field.TypeInt64))
	if ps := fiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fiu.mutation.CreatedBy(); ok {
		_spec.SetField(frpcinfo.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := fiu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(frpcinfo.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := fiu.mutation.UpdatedBy(); ok {
		_spec.SetField(frpcinfo.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := fiu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(frpcinfo.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := fiu.mutation.UpdatedAt(); ok {
		_spec.SetField(frpcinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fiu.mutation.DeletedAt(); ok {
		_spec.SetField(frpcinfo.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := fiu.mutation.Tag(); ok {
		_spec.SetField(frpcinfo.FieldTag, field.TypeString, value)
	}
	if value, ok := fiu.mutation.GetType(); ok {
		_spec.SetField(frpcinfo.FieldType, field.TypeString, value)
	}
	if value, ok := fiu.mutation.LocalIP(); ok {
		_spec.SetField(frpcinfo.FieldLocalIP, field.TypeString, value)
	}
	if value, ok := fiu.mutation.LocalPort(); ok {
		_spec.SetField(frpcinfo.FieldLocalPort, field.TypeInt, value)
	}
	if value, ok := fiu.mutation.AddedLocalPort(); ok {
		_spec.AddField(frpcinfo.FieldLocalPort, field.TypeInt, value)
	}
	if value, ok := fiu.mutation.RemotePort(); ok {
		_spec.SetField(frpcinfo.FieldRemotePort, field.TypeInt, value)
	}
	if value, ok := fiu.mutation.AddedRemotePort(); ok {
		_spec.AddField(frpcinfo.FieldRemotePort, field.TypeInt, value)
	}
	if value, ok := fiu.mutation.IsUsing(); ok {
		_spec.SetField(frpcinfo.FieldIsUsing, field.TypeBool, value)
	}
	if fiu.mutation.FrpsInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   frpcinfo.FrpsInfoTable,
			Columns: []string{frpcinfo.FrpsInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(frpsinfo.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiu.mutation.FrpsInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   frpcinfo.FrpsInfoTable,
			Columns: []string{frpcinfo.FrpsInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(frpsinfo.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fiu.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   frpcinfo.DeviceTable,
			Columns: []string{frpcinfo.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiu.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   frpcinfo.DeviceTable,
			Columns: []string{frpcinfo.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(fiu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, fiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{frpcinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fiu.mutation.done = true
	return n, nil
}

// FrpcInfoUpdateOne is the builder for updating a single FrpcInfo entity.
type FrpcInfoUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *FrpcInfoMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedBy sets the "created_by" field.
func (fiuo *FrpcInfoUpdateOne) SetCreatedBy(i int64) *FrpcInfoUpdateOne {
	fiuo.mutation.ResetCreatedBy()
	fiuo.mutation.SetCreatedBy(i)
	return fiuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (fiuo *FrpcInfoUpdateOne) SetNillableCreatedBy(i *int64) *FrpcInfoUpdateOne {
	if i != nil {
		fiuo.SetCreatedBy(*i)
	}
	return fiuo
}

// AddCreatedBy adds i to the "created_by" field.
func (fiuo *FrpcInfoUpdateOne) AddCreatedBy(i int64) *FrpcInfoUpdateOne {
	fiuo.mutation.AddCreatedBy(i)
	return fiuo
}

// SetUpdatedBy sets the "updated_by" field.
func (fiuo *FrpcInfoUpdateOne) SetUpdatedBy(i int64) *FrpcInfoUpdateOne {
	fiuo.mutation.ResetUpdatedBy()
	fiuo.mutation.SetUpdatedBy(i)
	return fiuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fiuo *FrpcInfoUpdateOne) SetNillableUpdatedBy(i *int64) *FrpcInfoUpdateOne {
	if i != nil {
		fiuo.SetUpdatedBy(*i)
	}
	return fiuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (fiuo *FrpcInfoUpdateOne) AddUpdatedBy(i int64) *FrpcInfoUpdateOne {
	fiuo.mutation.AddUpdatedBy(i)
	return fiuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fiuo *FrpcInfoUpdateOne) SetUpdatedAt(t time.Time) *FrpcInfoUpdateOne {
	fiuo.mutation.SetUpdatedAt(t)
	return fiuo
}

// SetDeletedAt sets the "deleted_at" field.
func (fiuo *FrpcInfoUpdateOne) SetDeletedAt(t time.Time) *FrpcInfoUpdateOne {
	fiuo.mutation.SetDeletedAt(t)
	return fiuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fiuo *FrpcInfoUpdateOne) SetNillableDeletedAt(t *time.Time) *FrpcInfoUpdateOne {
	if t != nil {
		fiuo.SetDeletedAt(*t)
	}
	return fiuo
}

// SetTag sets the "tag" field.
func (fiuo *FrpcInfoUpdateOne) SetTag(s string) *FrpcInfoUpdateOne {
	fiuo.mutation.SetTag(s)
	return fiuo
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (fiuo *FrpcInfoUpdateOne) SetNillableTag(s *string) *FrpcInfoUpdateOne {
	if s != nil {
		fiuo.SetTag(*s)
	}
	return fiuo
}

// SetType sets the "type" field.
func (fiuo *FrpcInfoUpdateOne) SetType(s string) *FrpcInfoUpdateOne {
	fiuo.mutation.SetType(s)
	return fiuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fiuo *FrpcInfoUpdateOne) SetNillableType(s *string) *FrpcInfoUpdateOne {
	if s != nil {
		fiuo.SetType(*s)
	}
	return fiuo
}

// SetLocalIP sets the "local_ip" field.
func (fiuo *FrpcInfoUpdateOne) SetLocalIP(s string) *FrpcInfoUpdateOne {
	fiuo.mutation.SetLocalIP(s)
	return fiuo
}

// SetNillableLocalIP sets the "local_ip" field if the given value is not nil.
func (fiuo *FrpcInfoUpdateOne) SetNillableLocalIP(s *string) *FrpcInfoUpdateOne {
	if s != nil {
		fiuo.SetLocalIP(*s)
	}
	return fiuo
}

// SetLocalPort sets the "local_port" field.
func (fiuo *FrpcInfoUpdateOne) SetLocalPort(i int) *FrpcInfoUpdateOne {
	fiuo.mutation.ResetLocalPort()
	fiuo.mutation.SetLocalPort(i)
	return fiuo
}

// SetNillableLocalPort sets the "local_port" field if the given value is not nil.
func (fiuo *FrpcInfoUpdateOne) SetNillableLocalPort(i *int) *FrpcInfoUpdateOne {
	if i != nil {
		fiuo.SetLocalPort(*i)
	}
	return fiuo
}

// AddLocalPort adds i to the "local_port" field.
func (fiuo *FrpcInfoUpdateOne) AddLocalPort(i int) *FrpcInfoUpdateOne {
	fiuo.mutation.AddLocalPort(i)
	return fiuo
}

// SetRemotePort sets the "remote_port" field.
func (fiuo *FrpcInfoUpdateOne) SetRemotePort(i int) *FrpcInfoUpdateOne {
	fiuo.mutation.ResetRemotePort()
	fiuo.mutation.SetRemotePort(i)
	return fiuo
}

// SetNillableRemotePort sets the "remote_port" field if the given value is not nil.
func (fiuo *FrpcInfoUpdateOne) SetNillableRemotePort(i *int) *FrpcInfoUpdateOne {
	if i != nil {
		fiuo.SetRemotePort(*i)
	}
	return fiuo
}

// AddRemotePort adds i to the "remote_port" field.
func (fiuo *FrpcInfoUpdateOne) AddRemotePort(i int) *FrpcInfoUpdateOne {
	fiuo.mutation.AddRemotePort(i)
	return fiuo
}

// SetIsUsing sets the "is_using" field.
func (fiuo *FrpcInfoUpdateOne) SetIsUsing(b bool) *FrpcInfoUpdateOne {
	fiuo.mutation.SetIsUsing(b)
	return fiuo
}

// SetNillableIsUsing sets the "is_using" field if the given value is not nil.
func (fiuo *FrpcInfoUpdateOne) SetNillableIsUsing(b *bool) *FrpcInfoUpdateOne {
	if b != nil {
		fiuo.SetIsUsing(*b)
	}
	return fiuo
}

// SetFrpsID sets the "frps_id" field.
func (fiuo *FrpcInfoUpdateOne) SetFrpsID(i int64) *FrpcInfoUpdateOne {
	fiuo.mutation.SetFrpsID(i)
	return fiuo
}

// SetNillableFrpsID sets the "frps_id" field if the given value is not nil.
func (fiuo *FrpcInfoUpdateOne) SetNillableFrpsID(i *int64) *FrpcInfoUpdateOne {
	if i != nil {
		fiuo.SetFrpsID(*i)
	}
	return fiuo
}

// SetDeviceID sets the "device_id" field.
func (fiuo *FrpcInfoUpdateOne) SetDeviceID(i int64) *FrpcInfoUpdateOne {
	fiuo.mutation.SetDeviceID(i)
	return fiuo
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (fiuo *FrpcInfoUpdateOne) SetNillableDeviceID(i *int64) *FrpcInfoUpdateOne {
	if i != nil {
		fiuo.SetDeviceID(*i)
	}
	return fiuo
}

// SetFrpsInfoID sets the "frps_info" edge to the FrpsInfo entity by ID.
func (fiuo *FrpcInfoUpdateOne) SetFrpsInfoID(id int64) *FrpcInfoUpdateOne {
	fiuo.mutation.SetFrpsInfoID(id)
	return fiuo
}

// SetFrpsInfo sets the "frps_info" edge to the FrpsInfo entity.
func (fiuo *FrpcInfoUpdateOne) SetFrpsInfo(f *FrpsInfo) *FrpcInfoUpdateOne {
	return fiuo.SetFrpsInfoID(f.ID)
}

// SetDevice sets the "device" edge to the Device entity.
func (fiuo *FrpcInfoUpdateOne) SetDevice(d *Device) *FrpcInfoUpdateOne {
	return fiuo.SetDeviceID(d.ID)
}

// Mutation returns the FrpcInfoMutation object of the builder.
func (fiuo *FrpcInfoUpdateOne) Mutation() *FrpcInfoMutation {
	return fiuo.mutation
}

// ClearFrpsInfo clears the "frps_info" edge to the FrpsInfo entity.
func (fiuo *FrpcInfoUpdateOne) ClearFrpsInfo() *FrpcInfoUpdateOne {
	fiuo.mutation.ClearFrpsInfo()
	return fiuo
}

// ClearDevice clears the "device" edge to the Device entity.
func (fiuo *FrpcInfoUpdateOne) ClearDevice() *FrpcInfoUpdateOne {
	fiuo.mutation.ClearDevice()
	return fiuo
}

// Where appends a list predicates to the FrpcInfoUpdate builder.
func (fiuo *FrpcInfoUpdateOne) Where(ps ...predicate.FrpcInfo) *FrpcInfoUpdateOne {
	fiuo.mutation.Where(ps...)
	return fiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fiuo *FrpcInfoUpdateOne) Select(field string, fields ...string) *FrpcInfoUpdateOne {
	fiuo.fields = append([]string{field}, fields...)
	return fiuo
}

// Save executes the query and returns the updated FrpcInfo entity.
func (fiuo *FrpcInfoUpdateOne) Save(ctx context.Context) (*FrpcInfo, error) {
	fiuo.defaults()
	return withHooks(ctx, fiuo.sqlSave, fiuo.mutation, fiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fiuo *FrpcInfoUpdateOne) SaveX(ctx context.Context) *FrpcInfo {
	node, err := fiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fiuo *FrpcInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := fiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fiuo *FrpcInfoUpdateOne) ExecX(ctx context.Context) {
	if err := fiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fiuo *FrpcInfoUpdateOne) defaults() {
	if _, ok := fiuo.mutation.UpdatedAt(); !ok {
		v := frpcinfo.UpdateDefaultUpdatedAt()
		fiuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fiuo *FrpcInfoUpdateOne) check() error {
	if _, ok := fiuo.mutation.FrpsInfoID(); fiuo.mutation.FrpsInfoCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "FrpcInfo.frps_info"`)
	}
	if _, ok := fiuo.mutation.DeviceID(); fiuo.mutation.DeviceCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "FrpcInfo.device"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fiuo *FrpcInfoUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FrpcInfoUpdateOne {
	fiuo.modifiers = append(fiuo.modifiers, modifiers...)
	return fiuo
}

func (fiuo *FrpcInfoUpdateOne) sqlSave(ctx context.Context) (_node *FrpcInfo, err error) {
	if err := fiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(frpcinfo.Table, frpcinfo.Columns, sqlgraph.NewFieldSpec(frpcinfo.FieldID, field.TypeInt64))
	id, ok := fiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "FrpcInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, frpcinfo.FieldID)
		for _, f := range fields {
			if !frpcinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != frpcinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fiuo.mutation.CreatedBy(); ok {
		_spec.SetField(frpcinfo.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := fiuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(frpcinfo.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := fiuo.mutation.UpdatedBy(); ok {
		_spec.SetField(frpcinfo.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := fiuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(frpcinfo.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := fiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(frpcinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fiuo.mutation.DeletedAt(); ok {
		_spec.SetField(frpcinfo.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := fiuo.mutation.Tag(); ok {
		_spec.SetField(frpcinfo.FieldTag, field.TypeString, value)
	}
	if value, ok := fiuo.mutation.GetType(); ok {
		_spec.SetField(frpcinfo.FieldType, field.TypeString, value)
	}
	if value, ok := fiuo.mutation.LocalIP(); ok {
		_spec.SetField(frpcinfo.FieldLocalIP, field.TypeString, value)
	}
	if value, ok := fiuo.mutation.LocalPort(); ok {
		_spec.SetField(frpcinfo.FieldLocalPort, field.TypeInt, value)
	}
	if value, ok := fiuo.mutation.AddedLocalPort(); ok {
		_spec.AddField(frpcinfo.FieldLocalPort, field.TypeInt, value)
	}
	if value, ok := fiuo.mutation.RemotePort(); ok {
		_spec.SetField(frpcinfo.FieldRemotePort, field.TypeInt, value)
	}
	if value, ok := fiuo.mutation.AddedRemotePort(); ok {
		_spec.AddField(frpcinfo.FieldRemotePort, field.TypeInt, value)
	}
	if value, ok := fiuo.mutation.IsUsing(); ok {
		_spec.SetField(frpcinfo.FieldIsUsing, field.TypeBool, value)
	}
	if fiuo.mutation.FrpsInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   frpcinfo.FrpsInfoTable,
			Columns: []string{frpcinfo.FrpsInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(frpsinfo.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiuo.mutation.FrpsInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   frpcinfo.FrpsInfoTable,
			Columns: []string{frpcinfo.FrpsInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(frpsinfo.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fiuo.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   frpcinfo.DeviceTable,
			Columns: []string{frpcinfo.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiuo.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   frpcinfo.DeviceTable,
			Columns: []string{frpcinfo.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(fiuo.modifiers...)
	_node = &FrpcInfo{config: fiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{frpcinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fiuo.mutation.done = true
	return _node, nil
}
