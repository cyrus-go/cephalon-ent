// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/symbol"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/wallet"
)

// WalletCreate is the builder for creating a Wallet entity.
type WalletCreate struct {
	config
	mutation *WalletMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (wc *WalletCreate) SetCreatedBy(i int64) *WalletCreate {
	wc.mutation.SetCreatedBy(i)
	return wc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (wc *WalletCreate) SetNillableCreatedBy(i *int64) *WalletCreate {
	if i != nil {
		wc.SetCreatedBy(*i)
	}
	return wc
}

// SetUpdatedBy sets the "updated_by" field.
func (wc *WalletCreate) SetUpdatedBy(i int64) *WalletCreate {
	wc.mutation.SetUpdatedBy(i)
	return wc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (wc *WalletCreate) SetNillableUpdatedBy(i *int64) *WalletCreate {
	if i != nil {
		wc.SetUpdatedBy(*i)
	}
	return wc
}

// SetCreatedAt sets the "created_at" field.
func (wc *WalletCreate) SetCreatedAt(t time.Time) *WalletCreate {
	wc.mutation.SetCreatedAt(t)
	return wc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wc *WalletCreate) SetNillableCreatedAt(t *time.Time) *WalletCreate {
	if t != nil {
		wc.SetCreatedAt(*t)
	}
	return wc
}

// SetUpdatedAt sets the "updated_at" field.
func (wc *WalletCreate) SetUpdatedAt(t time.Time) *WalletCreate {
	wc.mutation.SetUpdatedAt(t)
	return wc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wc *WalletCreate) SetNillableUpdatedAt(t *time.Time) *WalletCreate {
	if t != nil {
		wc.SetUpdatedAt(*t)
	}
	return wc
}

// SetDeletedAt sets the "deleted_at" field.
func (wc *WalletCreate) SetDeletedAt(t time.Time) *WalletCreate {
	wc.mutation.SetDeletedAt(t)
	return wc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wc *WalletCreate) SetNillableDeletedAt(t *time.Time) *WalletCreate {
	if t != nil {
		wc.SetDeletedAt(*t)
	}
	return wc
}

// SetUserID sets the "user_id" field.
func (wc *WalletCreate) SetUserID(i int64) *WalletCreate {
	wc.mutation.SetUserID(i)
	return wc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (wc *WalletCreate) SetNillableUserID(i *int64) *WalletCreate {
	if i != nil {
		wc.SetUserID(*i)
	}
	return wc
}

// SetSymbolID sets the "symbol_id" field.
func (wc *WalletCreate) SetSymbolID(i int64) *WalletCreate {
	wc.mutation.SetSymbolID(i)
	return wc
}

// SetNillableSymbolID sets the "symbol_id" field if the given value is not nil.
func (wc *WalletCreate) SetNillableSymbolID(i *int64) *WalletCreate {
	if i != nil {
		wc.SetSymbolID(*i)
	}
	return wc
}

// SetAmount sets the "amount" field.
func (wc *WalletCreate) SetAmount(i int64) *WalletCreate {
	wc.mutation.SetAmount(i)
	return wc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (wc *WalletCreate) SetNillableAmount(i *int64) *WalletCreate {
	if i != nil {
		wc.SetAmount(*i)
	}
	return wc
}

// SetWithdrawAmount sets the "withdraw_amount" field.
func (wc *WalletCreate) SetWithdrawAmount(i int64) *WalletCreate {
	wc.mutation.SetWithdrawAmount(i)
	return wc
}

// SetNillableWithdrawAmount sets the "withdraw_amount" field if the given value is not nil.
func (wc *WalletCreate) SetNillableWithdrawAmount(i *int64) *WalletCreate {
	if i != nil {
		wc.SetWithdrawAmount(*i)
	}
	return wc
}

// SetID sets the "id" field.
func (wc *WalletCreate) SetID(i int64) *WalletCreate {
	wc.mutation.SetID(i)
	return wc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wc *WalletCreate) SetNillableID(i *int64) *WalletCreate {
	if i != nil {
		wc.SetID(*i)
	}
	return wc
}

// SetUser sets the "user" edge to the User entity.
func (wc *WalletCreate) SetUser(u *User) *WalletCreate {
	return wc.SetUserID(u.ID)
}

// SetSymbol sets the "symbol" edge to the Symbol entity.
func (wc *WalletCreate) SetSymbol(s *Symbol) *WalletCreate {
	return wc.SetSymbolID(s.ID)
}

// Mutation returns the WalletMutation object of the builder.
func (wc *WalletCreate) Mutation() *WalletMutation {
	return wc.mutation
}

// Save creates the Wallet in the database.
func (wc *WalletCreate) Save(ctx context.Context) (*Wallet, error) {
	wc.defaults()
	return withHooks(ctx, wc.sqlSave, wc.mutation, wc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WalletCreate) SaveX(ctx context.Context) *Wallet {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *WalletCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *WalletCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wc *WalletCreate) defaults() {
	if _, ok := wc.mutation.CreatedBy(); !ok {
		v := wallet.DefaultCreatedBy
		wc.mutation.SetCreatedBy(v)
	}
	if _, ok := wc.mutation.UpdatedBy(); !ok {
		v := wallet.DefaultUpdatedBy
		wc.mutation.SetUpdatedBy(v)
	}
	if _, ok := wc.mutation.CreatedAt(); !ok {
		v := wallet.DefaultCreatedAt()
		wc.mutation.SetCreatedAt(v)
	}
	if _, ok := wc.mutation.UpdatedAt(); !ok {
		v := wallet.DefaultUpdatedAt()
		wc.mutation.SetUpdatedAt(v)
	}
	if _, ok := wc.mutation.DeletedAt(); !ok {
		v := wallet.DefaultDeletedAt
		wc.mutation.SetDeletedAt(v)
	}
	if _, ok := wc.mutation.UserID(); !ok {
		v := wallet.DefaultUserID
		wc.mutation.SetUserID(v)
	}
	if _, ok := wc.mutation.SymbolID(); !ok {
		v := wallet.DefaultSymbolID
		wc.mutation.SetSymbolID(v)
	}
	if _, ok := wc.mutation.Amount(); !ok {
		v := wallet.DefaultAmount
		wc.mutation.SetAmount(v)
	}
	if _, ok := wc.mutation.WithdrawAmount(); !ok {
		v := wallet.DefaultWithdrawAmount
		wc.mutation.SetWithdrawAmount(v)
	}
	if _, ok := wc.mutation.ID(); !ok {
		v := wallet.DefaultID()
		wc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wc *WalletCreate) check() error {
	if _, ok := wc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "Wallet.created_by"`)}
	}
	if _, ok := wc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "Wallet.updated_by"`)}
	}
	if _, ok := wc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "Wallet.created_at"`)}
	}
	if _, ok := wc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "Wallet.updated_at"`)}
	}
	if _, ok := wc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "Wallet.deleted_at"`)}
	}
	if _, ok := wc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "Wallet.user_id"`)}
	}
	if _, ok := wc.mutation.SymbolID(); !ok {
		return &ValidationError{Name: "symbol_id", err: errors.New(`cep_ent: missing required field "Wallet.symbol_id"`)}
	}
	if _, ok := wc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`cep_ent: missing required field "Wallet.amount"`)}
	}
	if _, ok := wc.mutation.WithdrawAmount(); !ok {
		return &ValidationError{Name: "withdraw_amount", err: errors.New(`cep_ent: missing required field "Wallet.withdraw_amount"`)}
	}
	if _, ok := wc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "Wallet.user"`)}
	}
	if _, ok := wc.mutation.SymbolID(); !ok {
		return &ValidationError{Name: "symbol", err: errors.New(`cep_ent: missing required edge "Wallet.symbol"`)}
	}
	return nil
}

func (wc *WalletCreate) sqlSave(ctx context.Context) (*Wallet, error) {
	if err := wc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	wc.mutation.id = &_node.ID
	wc.mutation.done = true
	return _node, nil
}

func (wc *WalletCreate) createSpec() (*Wallet, *sqlgraph.CreateSpec) {
	var (
		_node = &Wallet{config: wc.config}
		_spec = sqlgraph.NewCreateSpec(wallet.Table, sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = wc.conflict
	if id, ok := wc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := wc.mutation.CreatedBy(); ok {
		_spec.SetField(wallet.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := wc.mutation.UpdatedBy(); ok {
		_spec.SetField(wallet.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := wc.mutation.CreatedAt(); ok {
		_spec.SetField(wallet.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wc.mutation.UpdatedAt(); ok {
		_spec.SetField(wallet.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := wc.mutation.DeletedAt(); ok {
		_spec.SetField(wallet.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := wc.mutation.Amount(); ok {
		_spec.SetField(wallet.FieldAmount, field.TypeInt64, value)
		_node.Amount = value
	}
	if value, ok := wc.mutation.WithdrawAmount(); ok {
		_spec.SetField(wallet.FieldWithdrawAmount, field.TypeInt64, value)
		_node.WithdrawAmount = value
	}
	if nodes := wc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wallet.UserTable,
			Columns: []string{wallet.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.SymbolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wallet.SymbolTable,
			Columns: []string{wallet.SymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SymbolID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Wallet.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WalletUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (wc *WalletCreate) OnConflict(opts ...sql.ConflictOption) *WalletUpsertOne {
	wc.conflict = opts
	return &WalletUpsertOne{
		create: wc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Wallet.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wc *WalletCreate) OnConflictColumns(columns ...string) *WalletUpsertOne {
	wc.conflict = append(wc.conflict, sql.ConflictColumns(columns...))
	return &WalletUpsertOne{
		create: wc,
	}
}

type (
	// WalletUpsertOne is the builder for "upsert"-ing
	//  one Wallet node.
	WalletUpsertOne struct {
		create *WalletCreate
	}

	// WalletUpsert is the "OnConflict" setter.
	WalletUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *WalletUpsert) SetCreatedBy(v int64) *WalletUpsert {
	u.Set(wallet.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *WalletUpsert) UpdateCreatedBy() *WalletUpsert {
	u.SetExcluded(wallet.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *WalletUpsert) AddCreatedBy(v int64) *WalletUpsert {
	u.Add(wallet.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *WalletUpsert) SetUpdatedBy(v int64) *WalletUpsert {
	u.Set(wallet.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *WalletUpsert) UpdateUpdatedBy() *WalletUpsert {
	u.SetExcluded(wallet.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *WalletUpsert) AddUpdatedBy(v int64) *WalletUpsert {
	u.Add(wallet.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WalletUpsert) SetUpdatedAt(v time.Time) *WalletUpsert {
	u.Set(wallet.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WalletUpsert) UpdateUpdatedAt() *WalletUpsert {
	u.SetExcluded(wallet.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WalletUpsert) SetDeletedAt(v time.Time) *WalletUpsert {
	u.Set(wallet.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WalletUpsert) UpdateDeletedAt() *WalletUpsert {
	u.SetExcluded(wallet.FieldDeletedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *WalletUpsert) SetUserID(v int64) *WalletUpsert {
	u.Set(wallet.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *WalletUpsert) UpdateUserID() *WalletUpsert {
	u.SetExcluded(wallet.FieldUserID)
	return u
}

// SetSymbolID sets the "symbol_id" field.
func (u *WalletUpsert) SetSymbolID(v int64) *WalletUpsert {
	u.Set(wallet.FieldSymbolID, v)
	return u
}

// UpdateSymbolID sets the "symbol_id" field to the value that was provided on create.
func (u *WalletUpsert) UpdateSymbolID() *WalletUpsert {
	u.SetExcluded(wallet.FieldSymbolID)
	return u
}

// SetAmount sets the "amount" field.
func (u *WalletUpsert) SetAmount(v int64) *WalletUpsert {
	u.Set(wallet.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *WalletUpsert) UpdateAmount() *WalletUpsert {
	u.SetExcluded(wallet.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *WalletUpsert) AddAmount(v int64) *WalletUpsert {
	u.Add(wallet.FieldAmount, v)
	return u
}

// SetWithdrawAmount sets the "withdraw_amount" field.
func (u *WalletUpsert) SetWithdrawAmount(v int64) *WalletUpsert {
	u.Set(wallet.FieldWithdrawAmount, v)
	return u
}

// UpdateWithdrawAmount sets the "withdraw_amount" field to the value that was provided on create.
func (u *WalletUpsert) UpdateWithdrawAmount() *WalletUpsert {
	u.SetExcluded(wallet.FieldWithdrawAmount)
	return u
}

// AddWithdrawAmount adds v to the "withdraw_amount" field.
func (u *WalletUpsert) AddWithdrawAmount(v int64) *WalletUpsert {
	u.Add(wallet.FieldWithdrawAmount, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Wallet.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(wallet.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WalletUpsertOne) UpdateNewValues() *WalletUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(wallet.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(wallet.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Wallet.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WalletUpsertOne) Ignore() *WalletUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WalletUpsertOne) DoNothing() *WalletUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WalletCreate.OnConflict
// documentation for more info.
func (u *WalletUpsertOne) Update(set func(*WalletUpsert)) *WalletUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WalletUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *WalletUpsertOne) SetCreatedBy(v int64) *WalletUpsertOne {
	return u.Update(func(s *WalletUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *WalletUpsertOne) AddCreatedBy(v int64) *WalletUpsertOne {
	return u.Update(func(s *WalletUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *WalletUpsertOne) UpdateCreatedBy() *WalletUpsertOne {
	return u.Update(func(s *WalletUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *WalletUpsertOne) SetUpdatedBy(v int64) *WalletUpsertOne {
	return u.Update(func(s *WalletUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *WalletUpsertOne) AddUpdatedBy(v int64) *WalletUpsertOne {
	return u.Update(func(s *WalletUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *WalletUpsertOne) UpdateUpdatedBy() *WalletUpsertOne {
	return u.Update(func(s *WalletUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WalletUpsertOne) SetUpdatedAt(v time.Time) *WalletUpsertOne {
	return u.Update(func(s *WalletUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WalletUpsertOne) UpdateUpdatedAt() *WalletUpsertOne {
	return u.Update(func(s *WalletUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WalletUpsertOne) SetDeletedAt(v time.Time) *WalletUpsertOne {
	return u.Update(func(s *WalletUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WalletUpsertOne) UpdateDeletedAt() *WalletUpsertOne {
	return u.Update(func(s *WalletUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *WalletUpsertOne) SetUserID(v int64) *WalletUpsertOne {
	return u.Update(func(s *WalletUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *WalletUpsertOne) UpdateUserID() *WalletUpsertOne {
	return u.Update(func(s *WalletUpsert) {
		s.UpdateUserID()
	})
}

// SetSymbolID sets the "symbol_id" field.
func (u *WalletUpsertOne) SetSymbolID(v int64) *WalletUpsertOne {
	return u.Update(func(s *WalletUpsert) {
		s.SetSymbolID(v)
	})
}

// UpdateSymbolID sets the "symbol_id" field to the value that was provided on create.
func (u *WalletUpsertOne) UpdateSymbolID() *WalletUpsertOne {
	return u.Update(func(s *WalletUpsert) {
		s.UpdateSymbolID()
	})
}

// SetAmount sets the "amount" field.
func (u *WalletUpsertOne) SetAmount(v int64) *WalletUpsertOne {
	return u.Update(func(s *WalletUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *WalletUpsertOne) AddAmount(v int64) *WalletUpsertOne {
	return u.Update(func(s *WalletUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *WalletUpsertOne) UpdateAmount() *WalletUpsertOne {
	return u.Update(func(s *WalletUpsert) {
		s.UpdateAmount()
	})
}

// SetWithdrawAmount sets the "withdraw_amount" field.
func (u *WalletUpsertOne) SetWithdrawAmount(v int64) *WalletUpsertOne {
	return u.Update(func(s *WalletUpsert) {
		s.SetWithdrawAmount(v)
	})
}

// AddWithdrawAmount adds v to the "withdraw_amount" field.
func (u *WalletUpsertOne) AddWithdrawAmount(v int64) *WalletUpsertOne {
	return u.Update(func(s *WalletUpsert) {
		s.AddWithdrawAmount(v)
	})
}

// UpdateWithdrawAmount sets the "withdraw_amount" field to the value that was provided on create.
func (u *WalletUpsertOne) UpdateWithdrawAmount() *WalletUpsertOne {
	return u.Update(func(s *WalletUpsert) {
		s.UpdateWithdrawAmount()
	})
}

// Exec executes the query.
func (u *WalletUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for WalletCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WalletUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WalletUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WalletUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WalletCreateBulk is the builder for creating many Wallet entities in bulk.
type WalletCreateBulk struct {
	config
	err      error
	builders []*WalletCreate
	conflict []sql.ConflictOption
}

// Save creates the Wallet entities in the database.
func (wcb *WalletCreateBulk) Save(ctx context.Context) ([]*Wallet, error) {
	if wcb.err != nil {
		return nil, wcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Wallet, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WalletMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WalletCreateBulk) SaveX(ctx context.Context) []*Wallet {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *WalletCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *WalletCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Wallet.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WalletUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (wcb *WalletCreateBulk) OnConflict(opts ...sql.ConflictOption) *WalletUpsertBulk {
	wcb.conflict = opts
	return &WalletUpsertBulk{
		create: wcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Wallet.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wcb *WalletCreateBulk) OnConflictColumns(columns ...string) *WalletUpsertBulk {
	wcb.conflict = append(wcb.conflict, sql.ConflictColumns(columns...))
	return &WalletUpsertBulk{
		create: wcb,
	}
}

// WalletUpsertBulk is the builder for "upsert"-ing
// a bulk of Wallet nodes.
type WalletUpsertBulk struct {
	create *WalletCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Wallet.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(wallet.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WalletUpsertBulk) UpdateNewValues() *WalletUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(wallet.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(wallet.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Wallet.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WalletUpsertBulk) Ignore() *WalletUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WalletUpsertBulk) DoNothing() *WalletUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WalletCreateBulk.OnConflict
// documentation for more info.
func (u *WalletUpsertBulk) Update(set func(*WalletUpsert)) *WalletUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WalletUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *WalletUpsertBulk) SetCreatedBy(v int64) *WalletUpsertBulk {
	return u.Update(func(s *WalletUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *WalletUpsertBulk) AddCreatedBy(v int64) *WalletUpsertBulk {
	return u.Update(func(s *WalletUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *WalletUpsertBulk) UpdateCreatedBy() *WalletUpsertBulk {
	return u.Update(func(s *WalletUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *WalletUpsertBulk) SetUpdatedBy(v int64) *WalletUpsertBulk {
	return u.Update(func(s *WalletUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *WalletUpsertBulk) AddUpdatedBy(v int64) *WalletUpsertBulk {
	return u.Update(func(s *WalletUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *WalletUpsertBulk) UpdateUpdatedBy() *WalletUpsertBulk {
	return u.Update(func(s *WalletUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WalletUpsertBulk) SetUpdatedAt(v time.Time) *WalletUpsertBulk {
	return u.Update(func(s *WalletUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WalletUpsertBulk) UpdateUpdatedAt() *WalletUpsertBulk {
	return u.Update(func(s *WalletUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WalletUpsertBulk) SetDeletedAt(v time.Time) *WalletUpsertBulk {
	return u.Update(func(s *WalletUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WalletUpsertBulk) UpdateDeletedAt() *WalletUpsertBulk {
	return u.Update(func(s *WalletUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *WalletUpsertBulk) SetUserID(v int64) *WalletUpsertBulk {
	return u.Update(func(s *WalletUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *WalletUpsertBulk) UpdateUserID() *WalletUpsertBulk {
	return u.Update(func(s *WalletUpsert) {
		s.UpdateUserID()
	})
}

// SetSymbolID sets the "symbol_id" field.
func (u *WalletUpsertBulk) SetSymbolID(v int64) *WalletUpsertBulk {
	return u.Update(func(s *WalletUpsert) {
		s.SetSymbolID(v)
	})
}

// UpdateSymbolID sets the "symbol_id" field to the value that was provided on create.
func (u *WalletUpsertBulk) UpdateSymbolID() *WalletUpsertBulk {
	return u.Update(func(s *WalletUpsert) {
		s.UpdateSymbolID()
	})
}

// SetAmount sets the "amount" field.
func (u *WalletUpsertBulk) SetAmount(v int64) *WalletUpsertBulk {
	return u.Update(func(s *WalletUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *WalletUpsertBulk) AddAmount(v int64) *WalletUpsertBulk {
	return u.Update(func(s *WalletUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *WalletUpsertBulk) UpdateAmount() *WalletUpsertBulk {
	return u.Update(func(s *WalletUpsert) {
		s.UpdateAmount()
	})
}

// SetWithdrawAmount sets the "withdraw_amount" field.
func (u *WalletUpsertBulk) SetWithdrawAmount(v int64) *WalletUpsertBulk {
	return u.Update(func(s *WalletUpsert) {
		s.SetWithdrawAmount(v)
	})
}

// AddWithdrawAmount adds v to the "withdraw_amount" field.
func (u *WalletUpsertBulk) AddWithdrawAmount(v int64) *WalletUpsertBulk {
	return u.Update(func(s *WalletUpsert) {
		s.AddWithdrawAmount(v)
	})
}

// UpdateWithdrawAmount sets the "withdraw_amount" field to the value that was provided on create.
func (u *WalletUpsertBulk) UpdateWithdrawAmount() *WalletUpsertBulk {
	return u.Update(func(s *WalletUpsert) {
		s.UpdateWithdrawAmount()
	})
}

// Exec executes the query.
func (u *WalletUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the WalletCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for WalletCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WalletUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
