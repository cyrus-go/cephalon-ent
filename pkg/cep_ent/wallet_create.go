// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/bill"
	"cephalon-ent/pkg/cep_ent/user"
	"cephalon-ent/pkg/cep_ent/wallet"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WalletCreate is the builder for creating a Wallet entity.
type WalletCreate struct {
	config
	mutation *WalletMutation
	hooks    []Hook
}

// SetCreatedBy sets the "created_by" field.
func (wc *WalletCreate) SetCreatedBy(i int64) *WalletCreate {
	wc.mutation.SetCreatedBy(i)
	return wc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (wc *WalletCreate) SetNillableCreatedBy(i *int64) *WalletCreate {
	if i != nil {
		wc.SetCreatedBy(*i)
	}
	return wc
}

// SetUpdatedBy sets the "updated_by" field.
func (wc *WalletCreate) SetUpdatedBy(i int64) *WalletCreate {
	wc.mutation.SetUpdatedBy(i)
	return wc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (wc *WalletCreate) SetNillableUpdatedBy(i *int64) *WalletCreate {
	if i != nil {
		wc.SetUpdatedBy(*i)
	}
	return wc
}

// SetCreatedAt sets the "created_at" field.
func (wc *WalletCreate) SetCreatedAt(t time.Time) *WalletCreate {
	wc.mutation.SetCreatedAt(t)
	return wc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wc *WalletCreate) SetNillableCreatedAt(t *time.Time) *WalletCreate {
	if t != nil {
		wc.SetCreatedAt(*t)
	}
	return wc
}

// SetUpdatedAt sets the "updated_at" field.
func (wc *WalletCreate) SetUpdatedAt(t time.Time) *WalletCreate {
	wc.mutation.SetUpdatedAt(t)
	return wc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wc *WalletCreate) SetNillableUpdatedAt(t *time.Time) *WalletCreate {
	if t != nil {
		wc.SetUpdatedAt(*t)
	}
	return wc
}

// SetDeletedAt sets the "deleted_at" field.
func (wc *WalletCreate) SetDeletedAt(t time.Time) *WalletCreate {
	wc.mutation.SetDeletedAt(t)
	return wc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wc *WalletCreate) SetNillableDeletedAt(t *time.Time) *WalletCreate {
	if t != nil {
		wc.SetDeletedAt(*t)
	}
	return wc
}

// SetUserID sets the "user_id" field.
func (wc *WalletCreate) SetUserID(i int64) *WalletCreate {
	wc.mutation.SetUserID(i)
	return wc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (wc *WalletCreate) SetNillableUserID(i *int64) *WalletCreate {
	if i != nil {
		wc.SetUserID(*i)
	}
	return wc
}

// SetCep sets the "cep" field.
func (wc *WalletCreate) SetCep(i int64) *WalletCreate {
	wc.mutation.SetCep(i)
	return wc
}

// SetNillableCep sets the "cep" field if the given value is not nil.
func (wc *WalletCreate) SetNillableCep(i *int64) *WalletCreate {
	if i != nil {
		wc.SetCep(*i)
	}
	return wc
}

// SetSumCep sets the "sum_cep" field.
func (wc *WalletCreate) SetSumCep(i int64) *WalletCreate {
	wc.mutation.SetSumCep(i)
	return wc
}

// SetNillableSumCep sets the "sum_cep" field if the given value is not nil.
func (wc *WalletCreate) SetNillableSumCep(i *int64) *WalletCreate {
	if i != nil {
		wc.SetSumCep(*i)
	}
	return wc
}

// SetID sets the "id" field.
func (wc *WalletCreate) SetID(i int64) *WalletCreate {
	wc.mutation.SetID(i)
	return wc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wc *WalletCreate) SetNillableID(i *int64) *WalletCreate {
	if i != nil {
		wc.SetID(*i)
	}
	return wc
}

// SetUser sets the "user" edge to the User entity.
func (wc *WalletCreate) SetUser(u *User) *WalletCreate {
	return wc.SetUserID(u.ID)
}

// AddBillIDs adds the "bills" edge to the Bill entity by IDs.
func (wc *WalletCreate) AddBillIDs(ids ...int64) *WalletCreate {
	wc.mutation.AddBillIDs(ids...)
	return wc
}

// AddBills adds the "bills" edges to the Bill entity.
func (wc *WalletCreate) AddBills(b ...*Bill) *WalletCreate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return wc.AddBillIDs(ids...)
}

// Mutation returns the WalletMutation object of the builder.
func (wc *WalletCreate) Mutation() *WalletMutation {
	return wc.mutation
}

// Save creates the Wallet in the database.
func (wc *WalletCreate) Save(ctx context.Context) (*Wallet, error) {
	wc.defaults()
	return withHooks(ctx, wc.sqlSave, wc.mutation, wc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WalletCreate) SaveX(ctx context.Context) *Wallet {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *WalletCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *WalletCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wc *WalletCreate) defaults() {
	if _, ok := wc.mutation.CreatedBy(); !ok {
		v := wallet.DefaultCreatedBy
		wc.mutation.SetCreatedBy(v)
	}
	if _, ok := wc.mutation.UpdatedBy(); !ok {
		v := wallet.DefaultUpdatedBy
		wc.mutation.SetUpdatedBy(v)
	}
	if _, ok := wc.mutation.CreatedAt(); !ok {
		v := wallet.DefaultCreatedAt()
		wc.mutation.SetCreatedAt(v)
	}
	if _, ok := wc.mutation.UpdatedAt(); !ok {
		v := wallet.DefaultUpdatedAt()
		wc.mutation.SetUpdatedAt(v)
	}
	if _, ok := wc.mutation.DeletedAt(); !ok {
		v := wallet.DefaultDeletedAt
		wc.mutation.SetDeletedAt(v)
	}
	if _, ok := wc.mutation.UserID(); !ok {
		v := wallet.DefaultUserID
		wc.mutation.SetUserID(v)
	}
	if _, ok := wc.mutation.Cep(); !ok {
		v := wallet.DefaultCep
		wc.mutation.SetCep(v)
	}
	if _, ok := wc.mutation.SumCep(); !ok {
		v := wallet.DefaultSumCep
		wc.mutation.SetSumCep(v)
	}
	if _, ok := wc.mutation.ID(); !ok {
		v := wallet.DefaultID()
		wc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wc *WalletCreate) check() error {
	if _, ok := wc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "Wallet.created_by"`)}
	}
	if _, ok := wc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "Wallet.updated_by"`)}
	}
	if _, ok := wc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "Wallet.created_at"`)}
	}
	if _, ok := wc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "Wallet.updated_at"`)}
	}
	if _, ok := wc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "Wallet.deleted_at"`)}
	}
	if _, ok := wc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "Wallet.user_id"`)}
	}
	if _, ok := wc.mutation.Cep(); !ok {
		return &ValidationError{Name: "cep", err: errors.New(`cep_ent: missing required field "Wallet.cep"`)}
	}
	if _, ok := wc.mutation.SumCep(); !ok {
		return &ValidationError{Name: "sum_cep", err: errors.New(`cep_ent: missing required field "Wallet.sum_cep"`)}
	}
	if _, ok := wc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "Wallet.user"`)}
	}
	return nil
}

func (wc *WalletCreate) sqlSave(ctx context.Context) (*Wallet, error) {
	if err := wc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	wc.mutation.id = &_node.ID
	wc.mutation.done = true
	return _node, nil
}

func (wc *WalletCreate) createSpec() (*Wallet, *sqlgraph.CreateSpec) {
	var (
		_node = &Wallet{config: wc.config}
		_spec = sqlgraph.NewCreateSpec(wallet.Table, sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt64))
	)
	if id, ok := wc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := wc.mutation.CreatedBy(); ok {
		_spec.SetField(wallet.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := wc.mutation.UpdatedBy(); ok {
		_spec.SetField(wallet.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := wc.mutation.CreatedAt(); ok {
		_spec.SetField(wallet.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wc.mutation.UpdatedAt(); ok {
		_spec.SetField(wallet.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := wc.mutation.DeletedAt(); ok {
		_spec.SetField(wallet.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := wc.mutation.Cep(); ok {
		_spec.SetField(wallet.FieldCep, field.TypeInt64, value)
		_node.Cep = value
	}
	if value, ok := wc.mutation.SumCep(); ok {
		_spec.SetField(wallet.FieldSumCep, field.TypeInt64, value)
		_node.SumCep = value
	}
	if nodes := wc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   wallet.UserTable,
			Columns: []string{wallet.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wallet.BillsTable,
			Columns: []string{wallet.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WalletCreateBulk is the builder for creating many Wallet entities in bulk.
type WalletCreateBulk struct {
	config
	builders []*WalletCreate
}

// Save creates the Wallet entities in the database.
func (wcb *WalletCreateBulk) Save(ctx context.Context) ([]*Wallet, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Wallet, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WalletMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WalletCreateBulk) SaveX(ctx context.Context) []*Wallet {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *WalletCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *WalletCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}
