// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/symbol"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/transferorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/withdrawrecord"
)

// WithdrawRecordQuery is the builder for querying WithdrawRecord entities.
type WithdrawRecordQuery struct {
	config
	ctx               *QueryContext
	order             []withdrawrecord.OrderOption
	inters            []Interceptor
	predicates        []predicate.WithdrawRecord
	withUser          *UserQuery
	withOperateUser   *UserQuery
	withTransferOrder *TransferOrderQuery
	withSymbol        *SymbolQuery
	modifiers         []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the WithdrawRecordQuery builder.
func (wrq *WithdrawRecordQuery) Where(ps ...predicate.WithdrawRecord) *WithdrawRecordQuery {
	wrq.predicates = append(wrq.predicates, ps...)
	return wrq
}

// Limit the number of records to be returned by this query.
func (wrq *WithdrawRecordQuery) Limit(limit int) *WithdrawRecordQuery {
	wrq.ctx.Limit = &limit
	return wrq
}

// Offset to start from.
func (wrq *WithdrawRecordQuery) Offset(offset int) *WithdrawRecordQuery {
	wrq.ctx.Offset = &offset
	return wrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (wrq *WithdrawRecordQuery) Unique(unique bool) *WithdrawRecordQuery {
	wrq.ctx.Unique = &unique
	return wrq
}

// Order specifies how the records should be ordered.
func (wrq *WithdrawRecordQuery) Order(o ...withdrawrecord.OrderOption) *WithdrawRecordQuery {
	wrq.order = append(wrq.order, o...)
	return wrq
}

// QueryUser chains the current query on the "user" edge.
func (wrq *WithdrawRecordQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: wrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(withdrawrecord.Table, withdrawrecord.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, withdrawrecord.UserTable, withdrawrecord.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(wrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOperateUser chains the current query on the "operate_user" edge.
func (wrq *WithdrawRecordQuery) QueryOperateUser() *UserQuery {
	query := (&UserClient{config: wrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(withdrawrecord.Table, withdrawrecord.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, withdrawrecord.OperateUserTable, withdrawrecord.OperateUserColumn),
		)
		fromU = sqlgraph.SetNeighbors(wrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTransferOrder chains the current query on the "transfer_order" edge.
func (wrq *WithdrawRecordQuery) QueryTransferOrder() *TransferOrderQuery {
	query := (&TransferOrderClient{config: wrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(withdrawrecord.Table, withdrawrecord.FieldID, selector),
			sqlgraph.To(transferorder.Table, transferorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, withdrawrecord.TransferOrderTable, withdrawrecord.TransferOrderColumn),
		)
		fromU = sqlgraph.SetNeighbors(wrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySymbol chains the current query on the "symbol" edge.
func (wrq *WithdrawRecordQuery) QuerySymbol() *SymbolQuery {
	query := (&SymbolClient{config: wrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(withdrawrecord.Table, withdrawrecord.FieldID, selector),
			sqlgraph.To(symbol.Table, symbol.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, withdrawrecord.SymbolTable, withdrawrecord.SymbolColumn),
		)
		fromU = sqlgraph.SetNeighbors(wrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first WithdrawRecord entity from the query.
// Returns a *NotFoundError when no WithdrawRecord was found.
func (wrq *WithdrawRecordQuery) First(ctx context.Context) (*WithdrawRecord, error) {
	nodes, err := wrq.Limit(1).All(setContextOp(ctx, wrq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{withdrawrecord.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (wrq *WithdrawRecordQuery) FirstX(ctx context.Context) *WithdrawRecord {
	node, err := wrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first WithdrawRecord ID from the query.
// Returns a *NotFoundError when no WithdrawRecord ID was found.
func (wrq *WithdrawRecordQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = wrq.Limit(1).IDs(setContextOp(ctx, wrq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{withdrawrecord.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (wrq *WithdrawRecordQuery) FirstIDX(ctx context.Context) int64 {
	id, err := wrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single WithdrawRecord entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one WithdrawRecord entity is found.
// Returns a *NotFoundError when no WithdrawRecord entities are found.
func (wrq *WithdrawRecordQuery) Only(ctx context.Context) (*WithdrawRecord, error) {
	nodes, err := wrq.Limit(2).All(setContextOp(ctx, wrq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{withdrawrecord.Label}
	default:
		return nil, &NotSingularError{withdrawrecord.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (wrq *WithdrawRecordQuery) OnlyX(ctx context.Context) *WithdrawRecord {
	node, err := wrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only WithdrawRecord ID in the query.
// Returns a *NotSingularError when more than one WithdrawRecord ID is found.
// Returns a *NotFoundError when no entities are found.
func (wrq *WithdrawRecordQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = wrq.Limit(2).IDs(setContextOp(ctx, wrq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{withdrawrecord.Label}
	default:
		err = &NotSingularError{withdrawrecord.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (wrq *WithdrawRecordQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := wrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of WithdrawRecords.
func (wrq *WithdrawRecordQuery) All(ctx context.Context) ([]*WithdrawRecord, error) {
	ctx = setContextOp(ctx, wrq.ctx, "All")
	if err := wrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*WithdrawRecord, *WithdrawRecordQuery]()
	return withInterceptors[[]*WithdrawRecord](ctx, wrq, qr, wrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (wrq *WithdrawRecordQuery) AllX(ctx context.Context) []*WithdrawRecord {
	nodes, err := wrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of WithdrawRecord IDs.
func (wrq *WithdrawRecordQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if wrq.ctx.Unique == nil && wrq.path != nil {
		wrq.Unique(true)
	}
	ctx = setContextOp(ctx, wrq.ctx, "IDs")
	if err = wrq.Select(withdrawrecord.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (wrq *WithdrawRecordQuery) IDsX(ctx context.Context) []int64 {
	ids, err := wrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (wrq *WithdrawRecordQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, wrq.ctx, "Count")
	if err := wrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, wrq, querierCount[*WithdrawRecordQuery](), wrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (wrq *WithdrawRecordQuery) CountX(ctx context.Context) int {
	count, err := wrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (wrq *WithdrawRecordQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, wrq.ctx, "Exist")
	switch _, err := wrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("cep_ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (wrq *WithdrawRecordQuery) ExistX(ctx context.Context) bool {
	exist, err := wrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the WithdrawRecordQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (wrq *WithdrawRecordQuery) Clone() *WithdrawRecordQuery {
	if wrq == nil {
		return nil
	}
	return &WithdrawRecordQuery{
		config:            wrq.config,
		ctx:               wrq.ctx.Clone(),
		order:             append([]withdrawrecord.OrderOption{}, wrq.order...),
		inters:            append([]Interceptor{}, wrq.inters...),
		predicates:        append([]predicate.WithdrawRecord{}, wrq.predicates...),
		withUser:          wrq.withUser.Clone(),
		withOperateUser:   wrq.withOperateUser.Clone(),
		withTransferOrder: wrq.withTransferOrder.Clone(),
		withSymbol:        wrq.withSymbol.Clone(),
		// clone intermediate query.
		sql:  wrq.sql.Clone(),
		path: wrq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (wrq *WithdrawRecordQuery) WithUser(opts ...func(*UserQuery)) *WithdrawRecordQuery {
	query := (&UserClient{config: wrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wrq.withUser = query
	return wrq
}

// WithOperateUser tells the query-builder to eager-load the nodes that are connected to
// the "operate_user" edge. The optional arguments are used to configure the query builder of the edge.
func (wrq *WithdrawRecordQuery) WithOperateUser(opts ...func(*UserQuery)) *WithdrawRecordQuery {
	query := (&UserClient{config: wrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wrq.withOperateUser = query
	return wrq
}

// WithTransferOrder tells the query-builder to eager-load the nodes that are connected to
// the "transfer_order" edge. The optional arguments are used to configure the query builder of the edge.
func (wrq *WithdrawRecordQuery) WithTransferOrder(opts ...func(*TransferOrderQuery)) *WithdrawRecordQuery {
	query := (&TransferOrderClient{config: wrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wrq.withTransferOrder = query
	return wrq
}

// WithSymbol tells the query-builder to eager-load the nodes that are connected to
// the "symbol" edge. The optional arguments are used to configure the query builder of the edge.
func (wrq *WithdrawRecordQuery) WithSymbol(opts ...func(*SymbolQuery)) *WithdrawRecordQuery {
	query := (&SymbolClient{config: wrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wrq.withSymbol = query
	return wrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by,string"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.WithdrawRecord.Query().
//		GroupBy(withdrawrecord.FieldCreatedBy).
//		Aggregate(cep_ent.Count()).
//		Scan(ctx, &v)
func (wrq *WithdrawRecordQuery) GroupBy(field string, fields ...string) *WithdrawRecordGroupBy {
	wrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &WithdrawRecordGroupBy{build: wrq}
	grbuild.flds = &wrq.ctx.Fields
	grbuild.label = withdrawrecord.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by,string"`
//	}
//
//	client.WithdrawRecord.Query().
//		Select(withdrawrecord.FieldCreatedBy).
//		Scan(ctx, &v)
func (wrq *WithdrawRecordQuery) Select(fields ...string) *WithdrawRecordSelect {
	wrq.ctx.Fields = append(wrq.ctx.Fields, fields...)
	sbuild := &WithdrawRecordSelect{WithdrawRecordQuery: wrq}
	sbuild.label = withdrawrecord.Label
	sbuild.flds, sbuild.scan = &wrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a WithdrawRecordSelect configured with the given aggregations.
func (wrq *WithdrawRecordQuery) Aggregate(fns ...AggregateFunc) *WithdrawRecordSelect {
	return wrq.Select().Aggregate(fns...)
}

func (wrq *WithdrawRecordQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range wrq.inters {
		if inter == nil {
			return fmt.Errorf("cep_ent: uninitialized interceptor (forgotten import cep_ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, wrq); err != nil {
				return err
			}
		}
	}
	for _, f := range wrq.ctx.Fields {
		if !withdrawrecord.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
		}
	}
	if wrq.path != nil {
		prev, err := wrq.path(ctx)
		if err != nil {
			return err
		}
		wrq.sql = prev
	}
	return nil
}

func (wrq *WithdrawRecordQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*WithdrawRecord, error) {
	var (
		nodes       = []*WithdrawRecord{}
		_spec       = wrq.querySpec()
		loadedTypes = [4]bool{
			wrq.withUser != nil,
			wrq.withOperateUser != nil,
			wrq.withTransferOrder != nil,
			wrq.withSymbol != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*WithdrawRecord).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &WithdrawRecord{config: wrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(wrq.modifiers) > 0 {
		_spec.Modifiers = wrq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, wrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := wrq.withUser; query != nil {
		if err := wrq.loadUser(ctx, query, nodes, nil,
			func(n *WithdrawRecord, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := wrq.withOperateUser; query != nil {
		if err := wrq.loadOperateUser(ctx, query, nodes, nil,
			func(n *WithdrawRecord, e *User) { n.Edges.OperateUser = e }); err != nil {
			return nil, err
		}
	}
	if query := wrq.withTransferOrder; query != nil {
		if err := wrq.loadTransferOrder(ctx, query, nodes, nil,
			func(n *WithdrawRecord, e *TransferOrder) { n.Edges.TransferOrder = e }); err != nil {
			return nil, err
		}
	}
	if query := wrq.withSymbol; query != nil {
		if err := wrq.loadSymbol(ctx, query, nodes, nil,
			func(n *WithdrawRecord, e *Symbol) { n.Edges.Symbol = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (wrq *WithdrawRecordQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*WithdrawRecord, init func(*WithdrawRecord), assign func(*WithdrawRecord, *User)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*WithdrawRecord)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (wrq *WithdrawRecordQuery) loadOperateUser(ctx context.Context, query *UserQuery, nodes []*WithdrawRecord, init func(*WithdrawRecord), assign func(*WithdrawRecord, *User)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*WithdrawRecord)
	for i := range nodes {
		fk := nodes[i].OperateUserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "operate_user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (wrq *WithdrawRecordQuery) loadTransferOrder(ctx context.Context, query *TransferOrderQuery, nodes []*WithdrawRecord, init func(*WithdrawRecord), assign func(*WithdrawRecord, *TransferOrder)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*WithdrawRecord)
	for i := range nodes {
		fk := nodes[i].TransferOrderID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(transferorder.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "transfer_order_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (wrq *WithdrawRecordQuery) loadSymbol(ctx context.Context, query *SymbolQuery, nodes []*WithdrawRecord, init func(*WithdrawRecord), assign func(*WithdrawRecord, *Symbol)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*WithdrawRecord)
	for i := range nodes {
		fk := nodes[i].SymbolID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(symbol.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "symbol_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (wrq *WithdrawRecordQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := wrq.querySpec()
	if len(wrq.modifiers) > 0 {
		_spec.Modifiers = wrq.modifiers
	}
	_spec.Node.Columns = wrq.ctx.Fields
	if len(wrq.ctx.Fields) > 0 {
		_spec.Unique = wrq.ctx.Unique != nil && *wrq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, wrq.driver, _spec)
}

func (wrq *WithdrawRecordQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(withdrawrecord.Table, withdrawrecord.Columns, sqlgraph.NewFieldSpec(withdrawrecord.FieldID, field.TypeInt64))
	_spec.From = wrq.sql
	if unique := wrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if wrq.path != nil {
		_spec.Unique = true
	}
	if fields := wrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, withdrawrecord.FieldID)
		for i := range fields {
			if fields[i] != withdrawrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if wrq.withUser != nil {
			_spec.Node.AddColumnOnce(withdrawrecord.FieldUserID)
		}
		if wrq.withOperateUser != nil {
			_spec.Node.AddColumnOnce(withdrawrecord.FieldOperateUserID)
		}
		if wrq.withTransferOrder != nil {
			_spec.Node.AddColumnOnce(withdrawrecord.FieldTransferOrderID)
		}
		if wrq.withSymbol != nil {
			_spec.Node.AddColumnOnce(withdrawrecord.FieldSymbolID)
		}
	}
	if ps := wrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := wrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := wrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := wrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (wrq *WithdrawRecordQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(wrq.driver.Dialect())
	t1 := builder.Table(withdrawrecord.Table)
	columns := wrq.ctx.Fields
	if len(columns) == 0 {
		columns = withdrawrecord.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if wrq.sql != nil {
		selector = wrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if wrq.ctx.Unique != nil && *wrq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range wrq.modifiers {
		m(selector)
	}
	for _, p := range wrq.predicates {
		p(selector)
	}
	for _, p := range wrq.order {
		p(selector)
	}
	if offset := wrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := wrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (wrq *WithdrawRecordQuery) Modify(modifiers ...func(s *sql.Selector)) *WithdrawRecordSelect {
	wrq.modifiers = append(wrq.modifiers, modifiers...)
	return wrq.Select()
}

// WithdrawRecordGroupBy is the group-by builder for WithdrawRecord entities.
type WithdrawRecordGroupBy struct {
	selector
	build *WithdrawRecordQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (wrgb *WithdrawRecordGroupBy) Aggregate(fns ...AggregateFunc) *WithdrawRecordGroupBy {
	wrgb.fns = append(wrgb.fns, fns...)
	return wrgb
}

// Scan applies the selector query and scans the result into the given value.
func (wrgb *WithdrawRecordGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wrgb.build.ctx, "GroupBy")
	if err := wrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WithdrawRecordQuery, *WithdrawRecordGroupBy](ctx, wrgb.build, wrgb, wrgb.build.inters, v)
}

func (wrgb *WithdrawRecordGroupBy) sqlScan(ctx context.Context, root *WithdrawRecordQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(wrgb.fns))
	for _, fn := range wrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*wrgb.flds)+len(wrgb.fns))
		for _, f := range *wrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*wrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// WithdrawRecordSelect is the builder for selecting fields of WithdrawRecord entities.
type WithdrawRecordSelect struct {
	*WithdrawRecordQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (wrs *WithdrawRecordSelect) Aggregate(fns ...AggregateFunc) *WithdrawRecordSelect {
	wrs.fns = append(wrs.fns, fns...)
	return wrs
}

// Scan applies the selector query and scans the result into the given value.
func (wrs *WithdrawRecordSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wrs.ctx, "Select")
	if err := wrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WithdrawRecordQuery, *WithdrawRecordSelect](ctx, wrs.WithdrawRecordQuery, wrs, wrs.inters, v)
}

func (wrs *WithdrawRecordSelect) sqlScan(ctx context.Context, root *WithdrawRecordQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(wrs.fns))
	for _, fn := range wrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*wrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (wrs *WithdrawRecordSelect) Modify(modifiers ...func(s *sql.Selector)) *WithdrawRecordSelect {
	wrs.modifiers = append(wrs.modifiers, modifiers...)
	return wrs
}
