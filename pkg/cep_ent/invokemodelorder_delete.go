// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/invokemodelorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// InvokeModelOrderDelete is the builder for deleting a InvokeModelOrder entity.
type InvokeModelOrderDelete struct {
	config
	hooks    []Hook
	mutation *InvokeModelOrderMutation
}

// Where appends a list predicates to the InvokeModelOrderDelete builder.
func (imod *InvokeModelOrderDelete) Where(ps ...predicate.InvokeModelOrder) *InvokeModelOrderDelete {
	imod.mutation.Where(ps...)
	return imod
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (imod *InvokeModelOrderDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, imod.sqlExec, imod.mutation, imod.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (imod *InvokeModelOrderDelete) ExecX(ctx context.Context) int {
	n, err := imod.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (imod *InvokeModelOrderDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(invokemodelorder.Table, sqlgraph.NewFieldSpec(invokemodelorder.FieldID, field.TypeInt64))
	if ps := imod.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, imod.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	imod.mutation.done = true
	return affected, err
}

// InvokeModelOrderDeleteOne is the builder for deleting a single InvokeModelOrder entity.
type InvokeModelOrderDeleteOne struct {
	imod *InvokeModelOrderDelete
}

// Where appends a list predicates to the InvokeModelOrderDelete builder.
func (imodo *InvokeModelOrderDeleteOne) Where(ps ...predicate.InvokeModelOrder) *InvokeModelOrderDeleteOne {
	imodo.imod.mutation.Where(ps...)
	return imodo
}

// Exec executes the deletion query.
func (imodo *InvokeModelOrderDeleteOne) Exec(ctx context.Context) error {
	n, err := imodo.imod.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{invokemodelorder.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (imodo *InvokeModelOrderDeleteOne) ExecX(ctx context.Context) {
	if err := imodo.Exec(ctx); err != nil {
		panic(err)
	}
}
