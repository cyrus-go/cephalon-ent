// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/cloudfile"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
)

// CloudFile is the model entity for the CloudFile schema.
type CloudFile struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建者 ID
	CreatedBy int64 `json:"created_by"`
	// 更新者 ID
	UpdatedBy int64 `json:"updated_by"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// 外键用户id
	UserID int64 `json:"user_id"`
	// 文件名
	Name string `json:"name"`
	// 文件图标
	Icon string `json:"icon"`
	// 文件大小
	Size int64 `json:"size"`
	// md5
	Md5 string `json:"md5"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CloudFileQuery when eager-loading is set.
	Edges        CloudFileEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CloudFileEdges holds the relations/edges for other nodes in the graph.
type CloudFileEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CloudFileEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CloudFile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cloudfile.FieldID, cloudfile.FieldCreatedBy, cloudfile.FieldUpdatedBy, cloudfile.FieldUserID, cloudfile.FieldSize:
			values[i] = new(sql.NullInt64)
		case cloudfile.FieldName, cloudfile.FieldIcon, cloudfile.FieldMd5:
			values[i] = new(sql.NullString)
		case cloudfile.FieldCreatedAt, cloudfile.FieldUpdatedAt, cloudfile.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CloudFile fields.
func (cf *CloudFile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cloudfile.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cf.ID = int64(value.Int64)
		case cloudfile.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				cf.CreatedBy = value.Int64
			}
		case cloudfile.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				cf.UpdatedBy = value.Int64
			}
		case cloudfile.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cf.CreatedAt = value.Time
			}
		case cloudfile.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cf.UpdatedAt = value.Time
			}
		case cloudfile.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				cf.DeletedAt = value.Time
			}
		case cloudfile.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				cf.UserID = value.Int64
			}
		case cloudfile.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cf.Name = value.String
			}
		case cloudfile.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				cf.Icon = value.String
			}
		case cloudfile.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				cf.Size = value.Int64
			}
		case cloudfile.FieldMd5:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field md5", values[i])
			} else if value.Valid {
				cf.Md5 = value.String
			}
		default:
			cf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CloudFile.
// This includes values selected through modifiers, order, etc.
func (cf *CloudFile) Value(name string) (ent.Value, error) {
	return cf.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the CloudFile entity.
func (cf *CloudFile) QueryUser() *UserQuery {
	return NewCloudFileClient(cf.config).QueryUser(cf)
}

// Update returns a builder for updating this CloudFile.
// Note that you need to call CloudFile.Unwrap() before calling this method if this CloudFile
// was returned from a transaction, and the transaction was committed or rolled back.
func (cf *CloudFile) Update() *CloudFileUpdateOne {
	return NewCloudFileClient(cf.config).UpdateOne(cf)
}

// Unwrap unwraps the CloudFile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cf *CloudFile) Unwrap() *CloudFile {
	_tx, ok := cf.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: CloudFile is not a transactional entity")
	}
	cf.config.driver = _tx.drv
	return cf
}

// String implements the fmt.Stringer.
func (cf *CloudFile) String() string {
	var builder strings.Builder
	builder.WriteString("CloudFile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cf.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", cf.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", cf.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cf.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cf.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(cf.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", cf.UserID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(cf.Name)
	builder.WriteString(", ")
	builder.WriteString("icon=")
	builder.WriteString(cf.Icon)
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", cf.Size))
	builder.WriteString(", ")
	builder.WriteString("md5=")
	builder.WriteString(cf.Md5)
	builder.WriteByte(')')
	return builder.String()
}

// CloudFiles is a parsable slice of CloudFile.
type CloudFiles []*CloudFile
