// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/survey"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/surveyquestion"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/surveyresponse"
)

// SurveyCreate is the builder for creating a Survey entity.
type SurveyCreate struct {
	config
	mutation *SurveyMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (sc *SurveyCreate) SetCreatedBy(i int64) *SurveyCreate {
	sc.mutation.SetCreatedBy(i)
	return sc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sc *SurveyCreate) SetNillableCreatedBy(i *int64) *SurveyCreate {
	if i != nil {
		sc.SetCreatedBy(*i)
	}
	return sc
}

// SetUpdatedBy sets the "updated_by" field.
func (sc *SurveyCreate) SetUpdatedBy(i int64) *SurveyCreate {
	sc.mutation.SetUpdatedBy(i)
	return sc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sc *SurveyCreate) SetNillableUpdatedBy(i *int64) *SurveyCreate {
	if i != nil {
		sc.SetUpdatedBy(*i)
	}
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *SurveyCreate) SetCreatedAt(t time.Time) *SurveyCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SurveyCreate) SetNillableCreatedAt(t *time.Time) *SurveyCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SurveyCreate) SetUpdatedAt(t time.Time) *SurveyCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SurveyCreate) SetNillableUpdatedAt(t *time.Time) *SurveyCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetDeletedAt sets the "deleted_at" field.
func (sc *SurveyCreate) SetDeletedAt(t time.Time) *SurveyCreate {
	sc.mutation.SetDeletedAt(t)
	return sc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sc *SurveyCreate) SetNillableDeletedAt(t *time.Time) *SurveyCreate {
	if t != nil {
		sc.SetDeletedAt(*t)
	}
	return sc
}

// SetTitle sets the "title" field.
func (sc *SurveyCreate) SetTitle(s string) *SurveyCreate {
	sc.mutation.SetTitle(s)
	return sc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (sc *SurveyCreate) SetNillableTitle(s *string) *SurveyCreate {
	if s != nil {
		sc.SetTitle(*s)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SurveyCreate) SetID(i int64) *SurveyCreate {
	sc.mutation.SetID(i)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *SurveyCreate) SetNillableID(i *int64) *SurveyCreate {
	if i != nil {
		sc.SetID(*i)
	}
	return sc
}

// AddSurveyQuestionIDs adds the "survey_questions" edge to the SurveyQuestion entity by IDs.
func (sc *SurveyCreate) AddSurveyQuestionIDs(ids ...int64) *SurveyCreate {
	sc.mutation.AddSurveyQuestionIDs(ids...)
	return sc
}

// AddSurveyQuestions adds the "survey_questions" edges to the SurveyQuestion entity.
func (sc *SurveyCreate) AddSurveyQuestions(s ...*SurveyQuestion) *SurveyCreate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddSurveyQuestionIDs(ids...)
}

// AddSurveyResponseIDs adds the "survey_responses" edge to the SurveyResponse entity by IDs.
func (sc *SurveyCreate) AddSurveyResponseIDs(ids ...int64) *SurveyCreate {
	sc.mutation.AddSurveyResponseIDs(ids...)
	return sc
}

// AddSurveyResponses adds the "survey_responses" edges to the SurveyResponse entity.
func (sc *SurveyCreate) AddSurveyResponses(s ...*SurveyResponse) *SurveyCreate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddSurveyResponseIDs(ids...)
}

// Mutation returns the SurveyMutation object of the builder.
func (sc *SurveyCreate) Mutation() *SurveyMutation {
	return sc.mutation
}

// Save creates the Survey in the database.
func (sc *SurveyCreate) Save(ctx context.Context) (*Survey, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SurveyCreate) SaveX(ctx context.Context) *Survey {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SurveyCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SurveyCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SurveyCreate) defaults() {
	if _, ok := sc.mutation.CreatedBy(); !ok {
		v := survey.DefaultCreatedBy
		sc.mutation.SetCreatedBy(v)
	}
	if _, ok := sc.mutation.UpdatedBy(); !ok {
		v := survey.DefaultUpdatedBy
		sc.mutation.SetUpdatedBy(v)
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := survey.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := survey.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.DeletedAt(); !ok {
		v := survey.DefaultDeletedAt
		sc.mutation.SetDeletedAt(v)
	}
	if _, ok := sc.mutation.Title(); !ok {
		v := survey.DefaultTitle
		sc.mutation.SetTitle(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := survey.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SurveyCreate) check() error {
	if _, ok := sc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "Survey.created_by"`)}
	}
	if _, ok := sc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "Survey.updated_by"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "Survey.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "Survey.updated_at"`)}
	}
	if _, ok := sc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "Survey.deleted_at"`)}
	}
	if _, ok := sc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`cep_ent: missing required field "Survey.title"`)}
	}
	return nil
}

func (sc *SurveyCreate) sqlSave(ctx context.Context) (*Survey, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SurveyCreate) createSpec() (*Survey, *sqlgraph.CreateSpec) {
	var (
		_node = &Survey{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(survey.Table, sqlgraph.NewFieldSpec(survey.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreatedBy(); ok {
		_spec.SetField(survey.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := sc.mutation.UpdatedBy(); ok {
		_spec.SetField(survey.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(survey.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(survey.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.SetField(survey.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := sc.mutation.Title(); ok {
		_spec.SetField(survey.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if nodes := sc.mutation.SurveyQuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   survey.SurveyQuestionsTable,
			Columns: []string{survey.SurveyQuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyquestion.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.SurveyResponsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   survey.SurveyResponsesTable,
			Columns: []string{survey.SurveyResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyresponse.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Survey.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SurveyUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (sc *SurveyCreate) OnConflict(opts ...sql.ConflictOption) *SurveyUpsertOne {
	sc.conflict = opts
	return &SurveyUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Survey.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *SurveyCreate) OnConflictColumns(columns ...string) *SurveyUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SurveyUpsertOne{
		create: sc,
	}
}

type (
	// SurveyUpsertOne is the builder for "upsert"-ing
	//  one Survey node.
	SurveyUpsertOne struct {
		create *SurveyCreate
	}

	// SurveyUpsert is the "OnConflict" setter.
	SurveyUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *SurveyUpsert) SetCreatedBy(v int64) *SurveyUpsert {
	u.Set(survey.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *SurveyUpsert) UpdateCreatedBy() *SurveyUpsert {
	u.SetExcluded(survey.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *SurveyUpsert) AddCreatedBy(v int64) *SurveyUpsert {
	u.Add(survey.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *SurveyUpsert) SetUpdatedBy(v int64) *SurveyUpsert {
	u.Set(survey.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *SurveyUpsert) UpdateUpdatedBy() *SurveyUpsert {
	u.SetExcluded(survey.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *SurveyUpsert) AddUpdatedBy(v int64) *SurveyUpsert {
	u.Add(survey.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SurveyUpsert) SetUpdatedAt(v time.Time) *SurveyUpsert {
	u.Set(survey.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SurveyUpsert) UpdateUpdatedAt() *SurveyUpsert {
	u.SetExcluded(survey.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SurveyUpsert) SetDeletedAt(v time.Time) *SurveyUpsert {
	u.Set(survey.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SurveyUpsert) UpdateDeletedAt() *SurveyUpsert {
	u.SetExcluded(survey.FieldDeletedAt)
	return u
}

// SetTitle sets the "title" field.
func (u *SurveyUpsert) SetTitle(v string) *SurveyUpsert {
	u.Set(survey.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *SurveyUpsert) UpdateTitle() *SurveyUpsert {
	u.SetExcluded(survey.FieldTitle)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Survey.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(survey.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SurveyUpsertOne) UpdateNewValues() *SurveyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(survey.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(survey.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Survey.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SurveyUpsertOne) Ignore() *SurveyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SurveyUpsertOne) DoNothing() *SurveyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SurveyCreate.OnConflict
// documentation for more info.
func (u *SurveyUpsertOne) Update(set func(*SurveyUpsert)) *SurveyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SurveyUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *SurveyUpsertOne) SetCreatedBy(v int64) *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *SurveyUpsertOne) AddCreatedBy(v int64) *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *SurveyUpsertOne) UpdateCreatedBy() *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *SurveyUpsertOne) SetUpdatedBy(v int64) *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *SurveyUpsertOne) AddUpdatedBy(v int64) *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *SurveyUpsertOne) UpdateUpdatedBy() *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SurveyUpsertOne) SetUpdatedAt(v time.Time) *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SurveyUpsertOne) UpdateUpdatedAt() *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SurveyUpsertOne) SetDeletedAt(v time.Time) *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SurveyUpsertOne) UpdateDeletedAt() *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetTitle sets the "title" field.
func (u *SurveyUpsertOne) SetTitle(v string) *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *SurveyUpsertOne) UpdateTitle() *SurveyUpsertOne {
	return u.Update(func(s *SurveyUpsert) {
		s.UpdateTitle()
	})
}

// Exec executes the query.
func (u *SurveyUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for SurveyCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SurveyUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SurveyUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SurveyUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SurveyCreateBulk is the builder for creating many Survey entities in bulk.
type SurveyCreateBulk struct {
	config
	err      error
	builders []*SurveyCreate
	conflict []sql.ConflictOption
}

// Save creates the Survey entities in the database.
func (scb *SurveyCreateBulk) Save(ctx context.Context) ([]*Survey, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Survey, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SurveyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SurveyCreateBulk) SaveX(ctx context.Context) []*Survey {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SurveyCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SurveyCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Survey.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SurveyUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (scb *SurveyCreateBulk) OnConflict(opts ...sql.ConflictOption) *SurveyUpsertBulk {
	scb.conflict = opts
	return &SurveyUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Survey.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *SurveyCreateBulk) OnConflictColumns(columns ...string) *SurveyUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SurveyUpsertBulk{
		create: scb,
	}
}

// SurveyUpsertBulk is the builder for "upsert"-ing
// a bulk of Survey nodes.
type SurveyUpsertBulk struct {
	create *SurveyCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Survey.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(survey.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SurveyUpsertBulk) UpdateNewValues() *SurveyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(survey.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(survey.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Survey.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SurveyUpsertBulk) Ignore() *SurveyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SurveyUpsertBulk) DoNothing() *SurveyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SurveyCreateBulk.OnConflict
// documentation for more info.
func (u *SurveyUpsertBulk) Update(set func(*SurveyUpsert)) *SurveyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SurveyUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *SurveyUpsertBulk) SetCreatedBy(v int64) *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *SurveyUpsertBulk) AddCreatedBy(v int64) *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *SurveyUpsertBulk) UpdateCreatedBy() *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *SurveyUpsertBulk) SetUpdatedBy(v int64) *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *SurveyUpsertBulk) AddUpdatedBy(v int64) *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *SurveyUpsertBulk) UpdateUpdatedBy() *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SurveyUpsertBulk) SetUpdatedAt(v time.Time) *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SurveyUpsertBulk) UpdateUpdatedAt() *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SurveyUpsertBulk) SetDeletedAt(v time.Time) *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SurveyUpsertBulk) UpdateDeletedAt() *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetTitle sets the "title" field.
func (u *SurveyUpsertBulk) SetTitle(v string) *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *SurveyUpsertBulk) UpdateTitle() *SurveyUpsertBulk {
	return u.Update(func(s *SurveyUpsert) {
		s.UpdateTitle()
	})
}

// Exec executes the query.
func (u *SurveyUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the SurveyCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for SurveyCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SurveyUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
