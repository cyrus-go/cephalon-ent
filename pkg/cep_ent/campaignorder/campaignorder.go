// Code generated by ent, DO NOT EDIT.

package campaignorder

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the campaignorder type in the database.
	Label = "campaign_order"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldCampaignID holds the string denoting the campaign_id field in the database.
	FieldCampaignID = "campaign_id"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeCampaign holds the string denoting the campaign edge name in mutations.
	EdgeCampaign = "campaign"
	// EdgeCostBills holds the string denoting the cost_bills edge name in mutations.
	EdgeCostBills = "cost_bills"
	// EdgeRechargeOrder holds the string denoting the recharge_order edge name in mutations.
	EdgeRechargeOrder = "recharge_order"
	// Table holds the table name of the campaignorder in the database.
	Table = "campaign_orders"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "campaign_orders"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// CampaignTable is the table that holds the campaign relation/edge.
	CampaignTable = "campaign_orders"
	// CampaignInverseTable is the table name for the Campaign entity.
	// It exists in this package in order to avoid circular dependency with the "campaign" package.
	CampaignInverseTable = "campaigns"
	// CampaignColumn is the table column denoting the campaign relation/edge.
	CampaignColumn = "campaign_id"
	// CostBillsTable is the table that holds the cost_bills relation/edge.
	CostBillsTable = "cost_bills"
	// CostBillsInverseTable is the table name for the CostBill entity.
	// It exists in this package in order to avoid circular dependency with the "costbill" package.
	CostBillsInverseTable = "cost_bills"
	// CostBillsColumn is the table column denoting the cost_bills relation/edge.
	CostBillsColumn = "campaign_order_id"
	// RechargeOrderTable is the table that holds the recharge_order relation/edge.
	RechargeOrderTable = "recharge_orders"
	// RechargeOrderInverseTable is the table name for the RechargeOrder entity.
	// It exists in this package in order to avoid circular dependency with the "rechargeorder" package.
	RechargeOrderInverseTable = "recharge_orders"
	// RechargeOrderColumn is the table column denoting the recharge_order relation/edge.
	RechargeOrderColumn = "campaign_order_id"
)

// Columns holds all SQL columns for campaignorder fields.
var Columns = []string{
	FieldID,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldUserID,
	FieldCampaignID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedBy holds the default value on creation for the "created_by" field.
	DefaultCreatedBy int64
	// DefaultUpdatedBy holds the default value on creation for the "updated_by" field.
	DefaultUpdatedBy int64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt time.Time
	// DefaultUserID holds the default value on creation for the "user_id" field.
	DefaultUserID int64
	// DefaultCampaignID holds the default value on creation for the "campaign_id" field.
	DefaultCampaignID int64
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
)

// OrderOption defines the ordering options for the CampaignOrder queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByCampaignID orders the results by the campaign_id field.
func ByCampaignID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCampaignID, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByCampaignField orders the results by campaign field.
func ByCampaignField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCampaignStep(), sql.OrderByField(field, opts...))
	}
}

// ByCostBillsCount orders the results by cost_bills count.
func ByCostBillsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCostBillsStep(), opts...)
	}
}

// ByCostBills orders the results by cost_bills terms.
func ByCostBills(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCostBillsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRechargeOrderField orders the results by recharge_order field.
func ByRechargeOrderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRechargeOrderStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newCampaignStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CampaignInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CampaignTable, CampaignColumn),
	)
}
func newCostBillsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CostBillsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CostBillsTable, CostBillsColumn),
	)
}
func newRechargeOrderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RechargeOrderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, RechargeOrderTable, RechargeOrderColumn),
	)
}
