// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/profitsetting"
	"cephalon-ent/pkg/cep_ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProfitSettingCreate is the builder for creating a ProfitSetting entity.
type ProfitSettingCreate struct {
	config
	mutation *ProfitSettingMutation
	hooks    []Hook
}

// SetCreatedBy sets the "created_by" field.
func (psc *ProfitSettingCreate) SetCreatedBy(i int64) *ProfitSettingCreate {
	psc.mutation.SetCreatedBy(i)
	return psc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (psc *ProfitSettingCreate) SetNillableCreatedBy(i *int64) *ProfitSettingCreate {
	if i != nil {
		psc.SetCreatedBy(*i)
	}
	return psc
}

// SetUpdatedBy sets the "updated_by" field.
func (psc *ProfitSettingCreate) SetUpdatedBy(i int64) *ProfitSettingCreate {
	psc.mutation.SetUpdatedBy(i)
	return psc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (psc *ProfitSettingCreate) SetNillableUpdatedBy(i *int64) *ProfitSettingCreate {
	if i != nil {
		psc.SetUpdatedBy(*i)
	}
	return psc
}

// SetCreatedAt sets the "created_at" field.
func (psc *ProfitSettingCreate) SetCreatedAt(t time.Time) *ProfitSettingCreate {
	psc.mutation.SetCreatedAt(t)
	return psc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (psc *ProfitSettingCreate) SetNillableCreatedAt(t *time.Time) *ProfitSettingCreate {
	if t != nil {
		psc.SetCreatedAt(*t)
	}
	return psc
}

// SetUpdatedAt sets the "updated_at" field.
func (psc *ProfitSettingCreate) SetUpdatedAt(t time.Time) *ProfitSettingCreate {
	psc.mutation.SetUpdatedAt(t)
	return psc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (psc *ProfitSettingCreate) SetNillableUpdatedAt(t *time.Time) *ProfitSettingCreate {
	if t != nil {
		psc.SetUpdatedAt(*t)
	}
	return psc
}

// SetDeletedAt sets the "deleted_at" field.
func (psc *ProfitSettingCreate) SetDeletedAt(t time.Time) *ProfitSettingCreate {
	psc.mutation.SetDeletedAt(t)
	return psc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (psc *ProfitSettingCreate) SetNillableDeletedAt(t *time.Time) *ProfitSettingCreate {
	if t != nil {
		psc.SetDeletedAt(*t)
	}
	return psc
}

// SetUserID sets the "user_id" field.
func (psc *ProfitSettingCreate) SetUserID(i int64) *ProfitSettingCreate {
	psc.mutation.SetUserID(i)
	return psc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (psc *ProfitSettingCreate) SetNillableUserID(i *int64) *ProfitSettingCreate {
	if i != nil {
		psc.SetUserID(*i)
	}
	return psc
}

// SetRatio sets the "ratio" field.
func (psc *ProfitSettingCreate) SetRatio(i int64) *ProfitSettingCreate {
	psc.mutation.SetRatio(i)
	return psc
}

// SetNillableRatio sets the "ratio" field if the given value is not nil.
func (psc *ProfitSettingCreate) SetNillableRatio(i *int64) *ProfitSettingCreate {
	if i != nil {
		psc.SetRatio(*i)
	}
	return psc
}

// SetID sets the "id" field.
func (psc *ProfitSettingCreate) SetID(i int64) *ProfitSettingCreate {
	psc.mutation.SetID(i)
	return psc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (psc *ProfitSettingCreate) SetNillableID(i *int64) *ProfitSettingCreate {
	if i != nil {
		psc.SetID(*i)
	}
	return psc
}

// SetUser sets the "user" edge to the User entity.
func (psc *ProfitSettingCreate) SetUser(u *User) *ProfitSettingCreate {
	return psc.SetUserID(u.ID)
}

// Mutation returns the ProfitSettingMutation object of the builder.
func (psc *ProfitSettingCreate) Mutation() *ProfitSettingMutation {
	return psc.mutation
}

// Save creates the ProfitSetting in the database.
func (psc *ProfitSettingCreate) Save(ctx context.Context) (*ProfitSetting, error) {
	psc.defaults()
	return withHooks(ctx, psc.sqlSave, psc.mutation, psc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (psc *ProfitSettingCreate) SaveX(ctx context.Context) *ProfitSetting {
	v, err := psc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psc *ProfitSettingCreate) Exec(ctx context.Context) error {
	_, err := psc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psc *ProfitSettingCreate) ExecX(ctx context.Context) {
	if err := psc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psc *ProfitSettingCreate) defaults() {
	if _, ok := psc.mutation.CreatedBy(); !ok {
		v := profitsetting.DefaultCreatedBy
		psc.mutation.SetCreatedBy(v)
	}
	if _, ok := psc.mutation.UpdatedBy(); !ok {
		v := profitsetting.DefaultUpdatedBy
		psc.mutation.SetUpdatedBy(v)
	}
	if _, ok := psc.mutation.CreatedAt(); !ok {
		v := profitsetting.DefaultCreatedAt()
		psc.mutation.SetCreatedAt(v)
	}
	if _, ok := psc.mutation.UpdatedAt(); !ok {
		v := profitsetting.DefaultUpdatedAt()
		psc.mutation.SetUpdatedAt(v)
	}
	if _, ok := psc.mutation.DeletedAt(); !ok {
		v := profitsetting.DefaultDeletedAt
		psc.mutation.SetDeletedAt(v)
	}
	if _, ok := psc.mutation.UserID(); !ok {
		v := profitsetting.DefaultUserID
		psc.mutation.SetUserID(v)
	}
	if _, ok := psc.mutation.Ratio(); !ok {
		v := profitsetting.DefaultRatio
		psc.mutation.SetRatio(v)
	}
	if _, ok := psc.mutation.ID(); !ok {
		v := profitsetting.DefaultID()
		psc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psc *ProfitSettingCreate) check() error {
	if _, ok := psc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "ProfitSetting.created_by"`)}
	}
	if _, ok := psc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "ProfitSetting.updated_by"`)}
	}
	if _, ok := psc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "ProfitSetting.created_at"`)}
	}
	if _, ok := psc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "ProfitSetting.updated_at"`)}
	}
	if _, ok := psc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "ProfitSetting.deleted_at"`)}
	}
	if _, ok := psc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "ProfitSetting.user_id"`)}
	}
	if _, ok := psc.mutation.Ratio(); !ok {
		return &ValidationError{Name: "ratio", err: errors.New(`cep_ent: missing required field "ProfitSetting.ratio"`)}
	}
	if _, ok := psc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "ProfitSetting.user"`)}
	}
	return nil
}

func (psc *ProfitSettingCreate) sqlSave(ctx context.Context) (*ProfitSetting, error) {
	if err := psc.check(); err != nil {
		return nil, err
	}
	_node, _spec := psc.createSpec()
	if err := sqlgraph.CreateNode(ctx, psc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	psc.mutation.id = &_node.ID
	psc.mutation.done = true
	return _node, nil
}

func (psc *ProfitSettingCreate) createSpec() (*ProfitSetting, *sqlgraph.CreateSpec) {
	var (
		_node = &ProfitSetting{config: psc.config}
		_spec = sqlgraph.NewCreateSpec(profitsetting.Table, sqlgraph.NewFieldSpec(profitsetting.FieldID, field.TypeInt64))
	)
	if id, ok := psc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := psc.mutation.CreatedBy(); ok {
		_spec.SetField(profitsetting.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := psc.mutation.UpdatedBy(); ok {
		_spec.SetField(profitsetting.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := psc.mutation.CreatedAt(); ok {
		_spec.SetField(profitsetting.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := psc.mutation.UpdatedAt(); ok {
		_spec.SetField(profitsetting.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := psc.mutation.DeletedAt(); ok {
		_spec.SetField(profitsetting.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := psc.mutation.Ratio(); ok {
		_spec.SetField(profitsetting.FieldRatio, field.TypeInt64, value)
		_node.Ratio = value
	}
	if nodes := psc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profitsetting.UserTable,
			Columns: []string{profitsetting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProfitSettingCreateBulk is the builder for creating many ProfitSetting entities in bulk.
type ProfitSettingCreateBulk struct {
	config
	builders []*ProfitSettingCreate
}

// Save creates the ProfitSetting entities in the database.
func (pscb *ProfitSettingCreateBulk) Save(ctx context.Context) ([]*ProfitSetting, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pscb.builders))
	nodes := make([]*ProfitSetting, len(pscb.builders))
	mutators := make([]Mutator, len(pscb.builders))
	for i := range pscb.builders {
		func(i int, root context.Context) {
			builder := pscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProfitSettingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pscb *ProfitSettingCreateBulk) SaveX(ctx context.Context) []*ProfitSetting {
	v, err := pscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pscb *ProfitSettingCreateBulk) Exec(ctx context.Context) error {
	_, err := pscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pscb *ProfitSettingCreateBulk) ExecX(ctx context.Context) {
	if err := pscb.Exec(ctx); err != nil {
		panic(err)
	}
}
