// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/extraservice"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/extraserviceprice"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/mission"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionextraservice"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// ExtraServiceQuery is the builder for querying ExtraService entities.
type ExtraServiceQuery struct {
	config
	ctx                      *QueryContext
	order                    []extraservice.OrderOption
	inters                   []Interceptor
	predicates               []predicate.ExtraService
	withMissions             *MissionQuery
	withMissionExtraServices *MissionExtraServiceQuery
	withExtraServicePrices   *ExtraServicePriceQuery
	withFKs                  bool
	modifiers                []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ExtraServiceQuery builder.
func (esq *ExtraServiceQuery) Where(ps ...predicate.ExtraService) *ExtraServiceQuery {
	esq.predicates = append(esq.predicates, ps...)
	return esq
}

// Limit the number of records to be returned by this query.
func (esq *ExtraServiceQuery) Limit(limit int) *ExtraServiceQuery {
	esq.ctx.Limit = &limit
	return esq
}

// Offset to start from.
func (esq *ExtraServiceQuery) Offset(offset int) *ExtraServiceQuery {
	esq.ctx.Offset = &offset
	return esq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (esq *ExtraServiceQuery) Unique(unique bool) *ExtraServiceQuery {
	esq.ctx.Unique = &unique
	return esq
}

// Order specifies how the records should be ordered.
func (esq *ExtraServiceQuery) Order(o ...extraservice.OrderOption) *ExtraServiceQuery {
	esq.order = append(esq.order, o...)
	return esq
}

// QueryMissions chains the current query on the "missions" edge.
func (esq *ExtraServiceQuery) QueryMissions() *MissionQuery {
	query := (&MissionClient{config: esq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := esq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := esq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(extraservice.Table, extraservice.FieldID, selector),
			sqlgraph.To(mission.Table, mission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, extraservice.MissionsTable, extraservice.MissionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(esq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMissionExtraServices chains the current query on the "mission_extra_services" edge.
func (esq *ExtraServiceQuery) QueryMissionExtraServices() *MissionExtraServiceQuery {
	query := (&MissionExtraServiceClient{config: esq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := esq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := esq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(extraservice.Table, extraservice.FieldID, selector),
			sqlgraph.To(missionextraservice.Table, missionextraservice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, extraservice.MissionExtraServicesTable, extraservice.MissionExtraServicesColumn),
		)
		fromU = sqlgraph.SetNeighbors(esq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExtraServicePrices chains the current query on the "extra_service_prices" edge.
func (esq *ExtraServiceQuery) QueryExtraServicePrices() *ExtraServicePriceQuery {
	query := (&ExtraServicePriceClient{config: esq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := esq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := esq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(extraservice.Table, extraservice.FieldID, selector),
			sqlgraph.To(extraserviceprice.Table, extraserviceprice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, extraservice.ExtraServicePricesTable, extraservice.ExtraServicePricesColumn),
		)
		fromU = sqlgraph.SetNeighbors(esq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ExtraService entity from the query.
// Returns a *NotFoundError when no ExtraService was found.
func (esq *ExtraServiceQuery) First(ctx context.Context) (*ExtraService, error) {
	nodes, err := esq.Limit(1).All(setContextOp(ctx, esq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{extraservice.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (esq *ExtraServiceQuery) FirstX(ctx context.Context) *ExtraService {
	node, err := esq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ExtraService ID from the query.
// Returns a *NotFoundError when no ExtraService ID was found.
func (esq *ExtraServiceQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = esq.Limit(1).IDs(setContextOp(ctx, esq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{extraservice.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (esq *ExtraServiceQuery) FirstIDX(ctx context.Context) int64 {
	id, err := esq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ExtraService entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ExtraService entity is found.
// Returns a *NotFoundError when no ExtraService entities are found.
func (esq *ExtraServiceQuery) Only(ctx context.Context) (*ExtraService, error) {
	nodes, err := esq.Limit(2).All(setContextOp(ctx, esq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{extraservice.Label}
	default:
		return nil, &NotSingularError{extraservice.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (esq *ExtraServiceQuery) OnlyX(ctx context.Context) *ExtraService {
	node, err := esq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ExtraService ID in the query.
// Returns a *NotSingularError when more than one ExtraService ID is found.
// Returns a *NotFoundError when no entities are found.
func (esq *ExtraServiceQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = esq.Limit(2).IDs(setContextOp(ctx, esq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{extraservice.Label}
	default:
		err = &NotSingularError{extraservice.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (esq *ExtraServiceQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := esq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ExtraServices.
func (esq *ExtraServiceQuery) All(ctx context.Context) ([]*ExtraService, error) {
	ctx = setContextOp(ctx, esq.ctx, "All")
	if err := esq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ExtraService, *ExtraServiceQuery]()
	return withInterceptors[[]*ExtraService](ctx, esq, qr, esq.inters)
}

// AllX is like All, but panics if an error occurs.
func (esq *ExtraServiceQuery) AllX(ctx context.Context) []*ExtraService {
	nodes, err := esq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ExtraService IDs.
func (esq *ExtraServiceQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if esq.ctx.Unique == nil && esq.path != nil {
		esq.Unique(true)
	}
	ctx = setContextOp(ctx, esq.ctx, "IDs")
	if err = esq.Select(extraservice.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (esq *ExtraServiceQuery) IDsX(ctx context.Context) []int64 {
	ids, err := esq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (esq *ExtraServiceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, esq.ctx, "Count")
	if err := esq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, esq, querierCount[*ExtraServiceQuery](), esq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (esq *ExtraServiceQuery) CountX(ctx context.Context) int {
	count, err := esq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (esq *ExtraServiceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, esq.ctx, "Exist")
	switch _, err := esq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("cep_ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (esq *ExtraServiceQuery) ExistX(ctx context.Context) bool {
	exist, err := esq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ExtraServiceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (esq *ExtraServiceQuery) Clone() *ExtraServiceQuery {
	if esq == nil {
		return nil
	}
	return &ExtraServiceQuery{
		config:                   esq.config,
		ctx:                      esq.ctx.Clone(),
		order:                    append([]extraservice.OrderOption{}, esq.order...),
		inters:                   append([]Interceptor{}, esq.inters...),
		predicates:               append([]predicate.ExtraService{}, esq.predicates...),
		withMissions:             esq.withMissions.Clone(),
		withMissionExtraServices: esq.withMissionExtraServices.Clone(),
		withExtraServicePrices:   esq.withExtraServicePrices.Clone(),
		// clone intermediate query.
		sql:  esq.sql.Clone(),
		path: esq.path,
	}
}

// WithMissions tells the query-builder to eager-load the nodes that are connected to
// the "missions" edge. The optional arguments are used to configure the query builder of the edge.
func (esq *ExtraServiceQuery) WithMissions(opts ...func(*MissionQuery)) *ExtraServiceQuery {
	query := (&MissionClient{config: esq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	esq.withMissions = query
	return esq
}

// WithMissionExtraServices tells the query-builder to eager-load the nodes that are connected to
// the "mission_extra_services" edge. The optional arguments are used to configure the query builder of the edge.
func (esq *ExtraServiceQuery) WithMissionExtraServices(opts ...func(*MissionExtraServiceQuery)) *ExtraServiceQuery {
	query := (&MissionExtraServiceClient{config: esq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	esq.withMissionExtraServices = query
	return esq
}

// WithExtraServicePrices tells the query-builder to eager-load the nodes that are connected to
// the "extra_service_prices" edge. The optional arguments are used to configure the query builder of the edge.
func (esq *ExtraServiceQuery) WithExtraServicePrices(opts ...func(*ExtraServicePriceQuery)) *ExtraServiceQuery {
	query := (&ExtraServicePriceClient{config: esq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	esq.withExtraServicePrices = query
	return esq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ExtraService.Query().
//		GroupBy(extraservice.FieldCreatedBy).
//		Aggregate(cep_ent.Count()).
//		Scan(ctx, &v)
func (esq *ExtraServiceQuery) GroupBy(field string, fields ...string) *ExtraServiceGroupBy {
	esq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ExtraServiceGroupBy{build: esq}
	grbuild.flds = &esq.ctx.Fields
	grbuild.label = extraservice.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by"`
//	}
//
//	client.ExtraService.Query().
//		Select(extraservice.FieldCreatedBy).
//		Scan(ctx, &v)
func (esq *ExtraServiceQuery) Select(fields ...string) *ExtraServiceSelect {
	esq.ctx.Fields = append(esq.ctx.Fields, fields...)
	sbuild := &ExtraServiceSelect{ExtraServiceQuery: esq}
	sbuild.label = extraservice.Label
	sbuild.flds, sbuild.scan = &esq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ExtraServiceSelect configured with the given aggregations.
func (esq *ExtraServiceQuery) Aggregate(fns ...AggregateFunc) *ExtraServiceSelect {
	return esq.Select().Aggregate(fns...)
}

func (esq *ExtraServiceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range esq.inters {
		if inter == nil {
			return fmt.Errorf("cep_ent: uninitialized interceptor (forgotten import cep_ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, esq); err != nil {
				return err
			}
		}
	}
	for _, f := range esq.ctx.Fields {
		if !extraservice.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
		}
	}
	if esq.path != nil {
		prev, err := esq.path(ctx)
		if err != nil {
			return err
		}
		esq.sql = prev
	}
	return nil
}

func (esq *ExtraServiceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ExtraService, error) {
	var (
		nodes       = []*ExtraService{}
		withFKs     = esq.withFKs
		_spec       = esq.querySpec()
		loadedTypes = [3]bool{
			esq.withMissions != nil,
			esq.withMissionExtraServices != nil,
			esq.withExtraServicePrices != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, extraservice.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ExtraService).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ExtraService{config: esq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(esq.modifiers) > 0 {
		_spec.Modifiers = esq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, esq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := esq.withMissions; query != nil {
		if err := esq.loadMissions(ctx, query, nodes,
			func(n *ExtraService) { n.Edges.Missions = []*Mission{} },
			func(n *ExtraService, e *Mission) { n.Edges.Missions = append(n.Edges.Missions, e) }); err != nil {
			return nil, err
		}
	}
	if query := esq.withMissionExtraServices; query != nil {
		if err := esq.loadMissionExtraServices(ctx, query, nodes,
			func(n *ExtraService) { n.Edges.MissionExtraServices = []*MissionExtraService{} },
			func(n *ExtraService, e *MissionExtraService) {
				n.Edges.MissionExtraServices = append(n.Edges.MissionExtraServices, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := esq.withExtraServicePrices; query != nil {
		if err := esq.loadExtraServicePrices(ctx, query, nodes,
			func(n *ExtraService) { n.Edges.ExtraServicePrices = []*ExtraServicePrice{} },
			func(n *ExtraService, e *ExtraServicePrice) {
				n.Edges.ExtraServicePrices = append(n.Edges.ExtraServicePrices, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (esq *ExtraServiceQuery) loadMissions(ctx context.Context, query *MissionQuery, nodes []*ExtraService, init func(*ExtraService), assign func(*ExtraService, *Mission)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*ExtraService)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Mission(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(extraservice.MissionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.extra_service_missions
		if fk == nil {
			return fmt.Errorf(`foreign-key "extra_service_missions" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "extra_service_missions" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (esq *ExtraServiceQuery) loadMissionExtraServices(ctx context.Context, query *MissionExtraServiceQuery, nodes []*ExtraService, init func(*ExtraService), assign func(*ExtraService, *MissionExtraService)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*ExtraService)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(missionextraservice.FieldExtraServiceID)
	}
	query.Where(predicate.MissionExtraService(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(extraservice.MissionExtraServicesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ExtraServiceID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "extra_service_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (esq *ExtraServiceQuery) loadExtraServicePrices(ctx context.Context, query *ExtraServicePriceQuery, nodes []*ExtraService, init func(*ExtraService), assign func(*ExtraService, *ExtraServicePrice)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*ExtraService)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(extraserviceprice.FieldExtraServiceID)
	}
	query.Where(predicate.ExtraServicePrice(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(extraservice.ExtraServicePricesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ExtraServiceID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "extra_service_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (esq *ExtraServiceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := esq.querySpec()
	if len(esq.modifiers) > 0 {
		_spec.Modifiers = esq.modifiers
	}
	_spec.Node.Columns = esq.ctx.Fields
	if len(esq.ctx.Fields) > 0 {
		_spec.Unique = esq.ctx.Unique != nil && *esq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, esq.driver, _spec)
}

func (esq *ExtraServiceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(extraservice.Table, extraservice.Columns, sqlgraph.NewFieldSpec(extraservice.FieldID, field.TypeInt64))
	_spec.From = esq.sql
	if unique := esq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if esq.path != nil {
		_spec.Unique = true
	}
	if fields := esq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, extraservice.FieldID)
		for i := range fields {
			if fields[i] != extraservice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := esq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := esq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := esq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := esq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (esq *ExtraServiceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(esq.driver.Dialect())
	t1 := builder.Table(extraservice.Table)
	columns := esq.ctx.Fields
	if len(columns) == 0 {
		columns = extraservice.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if esq.sql != nil {
		selector = esq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if esq.ctx.Unique != nil && *esq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range esq.modifiers {
		m(selector)
	}
	for _, p := range esq.predicates {
		p(selector)
	}
	for _, p := range esq.order {
		p(selector)
	}
	if offset := esq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := esq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (esq *ExtraServiceQuery) Modify(modifiers ...func(s *sql.Selector)) *ExtraServiceSelect {
	esq.modifiers = append(esq.modifiers, modifiers...)
	return esq.Select()
}

// ExtraServiceGroupBy is the group-by builder for ExtraService entities.
type ExtraServiceGroupBy struct {
	selector
	build *ExtraServiceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (esgb *ExtraServiceGroupBy) Aggregate(fns ...AggregateFunc) *ExtraServiceGroupBy {
	esgb.fns = append(esgb.fns, fns...)
	return esgb
}

// Scan applies the selector query and scans the result into the given value.
func (esgb *ExtraServiceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, esgb.build.ctx, "GroupBy")
	if err := esgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ExtraServiceQuery, *ExtraServiceGroupBy](ctx, esgb.build, esgb, esgb.build.inters, v)
}

func (esgb *ExtraServiceGroupBy) sqlScan(ctx context.Context, root *ExtraServiceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(esgb.fns))
	for _, fn := range esgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*esgb.flds)+len(esgb.fns))
		for _, f := range *esgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*esgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := esgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ExtraServiceSelect is the builder for selecting fields of ExtraService entities.
type ExtraServiceSelect struct {
	*ExtraServiceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ess *ExtraServiceSelect) Aggregate(fns ...AggregateFunc) *ExtraServiceSelect {
	ess.fns = append(ess.fns, fns...)
	return ess
}

// Scan applies the selector query and scans the result into the given value.
func (ess *ExtraServiceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ess.ctx, "Select")
	if err := ess.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ExtraServiceQuery, *ExtraServiceSelect](ctx, ess.ExtraServiceQuery, ess, ess.inters, v)
}

func (ess *ExtraServiceSelect) sqlScan(ctx context.Context, root *ExtraServiceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ess.fns))
	for _, fn := range ess.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ess.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ess.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ess *ExtraServiceSelect) Modify(modifiers ...func(s *sql.Selector)) *ExtraServiceSelect {
	ess.modifiers = append(ess.modifiers, modifiers...)
	return ess
}
