// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionextraservice"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// MissionExtraServiceDelete is the builder for deleting a MissionExtraService entity.
type MissionExtraServiceDelete struct {
	config
	hooks    []Hook
	mutation *MissionExtraServiceMutation
}

// Where appends a list predicates to the MissionExtraServiceDelete builder.
func (mesd *MissionExtraServiceDelete) Where(ps ...predicate.MissionExtraService) *MissionExtraServiceDelete {
	mesd.mutation.Where(ps...)
	return mesd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mesd *MissionExtraServiceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, mesd.sqlExec, mesd.mutation, mesd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mesd *MissionExtraServiceDelete) ExecX(ctx context.Context) int {
	n, err := mesd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mesd *MissionExtraServiceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(missionextraservice.Table, sqlgraph.NewFieldSpec(missionextraservice.FieldID, field.TypeInt64))
	if ps := mesd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mesd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mesd.mutation.done = true
	return affected, err
}

// MissionExtraServiceDeleteOne is the builder for deleting a single MissionExtraService entity.
type MissionExtraServiceDeleteOne struct {
	mesd *MissionExtraServiceDelete
}

// Where appends a list predicates to the MissionExtraServiceDelete builder.
func (mesdo *MissionExtraServiceDeleteOne) Where(ps ...predicate.MissionExtraService) *MissionExtraServiceDeleteOne {
	mesdo.mesd.mutation.Where(ps...)
	return mesdo
}

// Exec executes the deletion query.
func (mesdo *MissionExtraServiceDeleteOne) Exec(ctx context.Context) error {
	n, err := mesdo.mesd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{missionextraservice.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mesdo *MissionExtraServiceDeleteOne) ExecX(ctx context.Context) {
	if err := mesdo.Exec(ctx); err != nil {
		panic(err)
	}
}
