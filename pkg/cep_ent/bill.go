// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/bill"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/invite"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/symbol"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/transferorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// 记录用户账户的变动，流水记录
type Bill struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建者 ID
	CreatedBy int64 `json:"created_by,string"`
	// 更新者 ID
	UpdatedBy int64 `json:"updated_by,string"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// 流水的类型，对应的 order_id 关联哪张表依赖于该字段
	Type enums.BillType `json:"type"`
	// 比如 type 为 mission 时关联任务订单。当为 0 时，流水没有详细订单信息
	OrderID int64 `json:"order_id,string"`
	// 额度账户流水的产生方式，微信、支付宝、计时消耗等，偏向于业务展示
	Way enums.BillWay `json:"way"`
	// 消费的外键币种 id
	SymbolID int64 `json:"symbol_id,string"`
	// 获得的外键币种 id
	TargetSymbolID int64 `json:"target_symbol_id,string"`
	// 外键分润币种 id
	ProfitSymbolID int64 `json:"profit_symbol_id,string"`
	// 消耗多少货币金额
	Amount int64 `json:"amount"`
	// 流水目标钱包 id
	TargetUserID int64 `json:"target_user_id,string"`
	// 目标钱包期初金额
	TargetBeforeAmount int64 `json:"target_before_amount"`
	// 目标钱包期末金额
	TargetAfterAmount int64 `json:"target_after_amount"`
	// 流水来源钱包 id
	SourceUserID int64 `json:"source_user_id,string"`
	// 来源钱包期初金额
	SourceBeforeAmount int64 `json:"source_before_amount"`
	// 来源钱包期初金额
	SourceAfterAmount int64 `json:"source_after_amount"`
	// 流水号，唯一
	SerialNumber string `json:"serial_number"`
	// 外键关联某个邀请码
	InviteID int64 `json:"invite_id,string"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BillQuery when eager-loading is set.
	Edges        BillEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BillEdges holds the relations/edges for other nodes in the graph.
type BillEdges struct {
	// SourceUser holds the value of the source_user edge.
	SourceUser *User `json:"source_user,omitempty"`
	// TargetUser holds the value of the target_user edge.
	TargetUser *User `json:"target_user,omitempty"`
	// TransferOrder holds the value of the transfer_order edge.
	TransferOrder *TransferOrder `json:"transfer_order,omitempty"`
	// MissionOrder holds the value of the mission_order edge.
	MissionOrder *MissionOrder `json:"mission_order,omitempty"`
	// Invite holds the value of the invite edge.
	Invite *Invite `json:"invite,omitempty"`
	// Symbol holds the value of the symbol edge.
	Symbol *Symbol `json:"symbol,omitempty"`
	// TargetSymbol holds the value of the target_symbol edge.
	TargetSymbol *Symbol `json:"target_symbol,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// SourceUserOrErr returns the SourceUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillEdges) SourceUserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.SourceUser == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.SourceUser, nil
	}
	return nil, &NotLoadedError{edge: "source_user"}
}

// TargetUserOrErr returns the TargetUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillEdges) TargetUserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.TargetUser == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.TargetUser, nil
	}
	return nil, &NotLoadedError{edge: "target_user"}
}

// TransferOrderOrErr returns the TransferOrder value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillEdges) TransferOrderOrErr() (*TransferOrder, error) {
	if e.loadedTypes[2] {
		if e.TransferOrder == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: transferorder.Label}
		}
		return e.TransferOrder, nil
	}
	return nil, &NotLoadedError{edge: "transfer_order"}
}

// MissionOrderOrErr returns the MissionOrder value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillEdges) MissionOrderOrErr() (*MissionOrder, error) {
	if e.loadedTypes[3] {
		if e.MissionOrder == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: missionorder.Label}
		}
		return e.MissionOrder, nil
	}
	return nil, &NotLoadedError{edge: "mission_order"}
}

// InviteOrErr returns the Invite value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillEdges) InviteOrErr() (*Invite, error) {
	if e.loadedTypes[4] {
		if e.Invite == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: invite.Label}
		}
		return e.Invite, nil
	}
	return nil, &NotLoadedError{edge: "invite"}
}

// SymbolOrErr returns the Symbol value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillEdges) SymbolOrErr() (*Symbol, error) {
	if e.loadedTypes[5] {
		if e.Symbol == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: symbol.Label}
		}
		return e.Symbol, nil
	}
	return nil, &NotLoadedError{edge: "symbol"}
}

// TargetSymbolOrErr returns the TargetSymbol value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillEdges) TargetSymbolOrErr() (*Symbol, error) {
	if e.loadedTypes[6] {
		if e.TargetSymbol == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: symbol.Label}
		}
		return e.TargetSymbol, nil
	}
	return nil, &NotLoadedError{edge: "target_symbol"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bill) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bill.FieldID, bill.FieldCreatedBy, bill.FieldUpdatedBy, bill.FieldOrderID, bill.FieldSymbolID, bill.FieldTargetSymbolID, bill.FieldProfitSymbolID, bill.FieldAmount, bill.FieldTargetUserID, bill.FieldTargetBeforeAmount, bill.FieldTargetAfterAmount, bill.FieldSourceUserID, bill.FieldSourceBeforeAmount, bill.FieldSourceAfterAmount, bill.FieldInviteID:
			values[i] = new(sql.NullInt64)
		case bill.FieldType, bill.FieldWay, bill.FieldSerialNumber:
			values[i] = new(sql.NullString)
		case bill.FieldCreatedAt, bill.FieldUpdatedAt, bill.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bill fields.
func (b *Bill) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bill.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int64(value.Int64)
		case bill.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				b.CreatedBy = value.Int64
			}
		case bill.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				b.UpdatedBy = value.Int64
			}
		case bill.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				b.CreatedAt = value.Time
			}
		case bill.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				b.UpdatedAt = value.Time
			}
		case bill.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				b.DeletedAt = value.Time
			}
		case bill.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				b.Type = enums.BillType(value.String)
			}
		case bill.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				b.OrderID = value.Int64
			}
		case bill.FieldWay:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field way", values[i])
			} else if value.Valid {
				b.Way = enums.BillWay(value.String)
			}
		case bill.FieldSymbolID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field symbol_id", values[i])
			} else if value.Valid {
				b.SymbolID = value.Int64
			}
		case bill.FieldTargetSymbolID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field target_symbol_id", values[i])
			} else if value.Valid {
				b.TargetSymbolID = value.Int64
			}
		case bill.FieldProfitSymbolID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field profit_symbol_id", values[i])
			} else if value.Valid {
				b.ProfitSymbolID = value.Int64
			}
		case bill.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				b.Amount = value.Int64
			}
		case bill.FieldTargetUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field target_user_id", values[i])
			} else if value.Valid {
				b.TargetUserID = value.Int64
			}
		case bill.FieldTargetBeforeAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field target_before_amount", values[i])
			} else if value.Valid {
				b.TargetBeforeAmount = value.Int64
			}
		case bill.FieldTargetAfterAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field target_after_amount", values[i])
			} else if value.Valid {
				b.TargetAfterAmount = value.Int64
			}
		case bill.FieldSourceUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field source_user_id", values[i])
			} else if value.Valid {
				b.SourceUserID = value.Int64
			}
		case bill.FieldSourceBeforeAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field source_before_amount", values[i])
			} else if value.Valid {
				b.SourceBeforeAmount = value.Int64
			}
		case bill.FieldSourceAfterAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field source_after_amount", values[i])
			} else if value.Valid {
				b.SourceAfterAmount = value.Int64
			}
		case bill.FieldSerialNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field serial_number", values[i])
			} else if value.Valid {
				b.SerialNumber = value.String
			}
		case bill.FieldInviteID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field invite_id", values[i])
			} else if value.Valid {
				b.InviteID = value.Int64
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Bill.
// This includes values selected through modifiers, order, etc.
func (b *Bill) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// QuerySourceUser queries the "source_user" edge of the Bill entity.
func (b *Bill) QuerySourceUser() *UserQuery {
	return NewBillClient(b.config).QuerySourceUser(b)
}

// QueryTargetUser queries the "target_user" edge of the Bill entity.
func (b *Bill) QueryTargetUser() *UserQuery {
	return NewBillClient(b.config).QueryTargetUser(b)
}

// QueryTransferOrder queries the "transfer_order" edge of the Bill entity.
func (b *Bill) QueryTransferOrder() *TransferOrderQuery {
	return NewBillClient(b.config).QueryTransferOrder(b)
}

// QueryMissionOrder queries the "mission_order" edge of the Bill entity.
func (b *Bill) QueryMissionOrder() *MissionOrderQuery {
	return NewBillClient(b.config).QueryMissionOrder(b)
}

// QueryInvite queries the "invite" edge of the Bill entity.
func (b *Bill) QueryInvite() *InviteQuery {
	return NewBillClient(b.config).QueryInvite(b)
}

// QuerySymbol queries the "symbol" edge of the Bill entity.
func (b *Bill) QuerySymbol() *SymbolQuery {
	return NewBillClient(b.config).QuerySymbol(b)
}

// QueryTargetSymbol queries the "target_symbol" edge of the Bill entity.
func (b *Bill) QueryTargetSymbol() *SymbolQuery {
	return NewBillClient(b.config).QueryTargetSymbol(b)
}

// Update returns a builder for updating this Bill.
// Note that you need to call Bill.Unwrap() before calling this method if this Bill
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bill) Update() *BillUpdateOne {
	return NewBillClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Bill entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Bill) Unwrap() *Bill {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: Bill is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bill) String() string {
	var builder strings.Builder
	builder.WriteString("Bill(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", b.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", b.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(b.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(b.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(b.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", b.Type))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", b.OrderID))
	builder.WriteString(", ")
	builder.WriteString("way=")
	builder.WriteString(fmt.Sprintf("%v", b.Way))
	builder.WriteString(", ")
	builder.WriteString("symbol_id=")
	builder.WriteString(fmt.Sprintf("%v", b.SymbolID))
	builder.WriteString(", ")
	builder.WriteString("target_symbol_id=")
	builder.WriteString(fmt.Sprintf("%v", b.TargetSymbolID))
	builder.WriteString(", ")
	builder.WriteString("profit_symbol_id=")
	builder.WriteString(fmt.Sprintf("%v", b.ProfitSymbolID))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", b.Amount))
	builder.WriteString(", ")
	builder.WriteString("target_user_id=")
	builder.WriteString(fmt.Sprintf("%v", b.TargetUserID))
	builder.WriteString(", ")
	builder.WriteString("target_before_amount=")
	builder.WriteString(fmt.Sprintf("%v", b.TargetBeforeAmount))
	builder.WriteString(", ")
	builder.WriteString("target_after_amount=")
	builder.WriteString(fmt.Sprintf("%v", b.TargetAfterAmount))
	builder.WriteString(", ")
	builder.WriteString("source_user_id=")
	builder.WriteString(fmt.Sprintf("%v", b.SourceUserID))
	builder.WriteString(", ")
	builder.WriteString("source_before_amount=")
	builder.WriteString(fmt.Sprintf("%v", b.SourceBeforeAmount))
	builder.WriteString(", ")
	builder.WriteString("source_after_amount=")
	builder.WriteString(fmt.Sprintf("%v", b.SourceAfterAmount))
	builder.WriteString(", ")
	builder.WriteString("serial_number=")
	builder.WriteString(b.SerialNumber)
	builder.WriteString(", ")
	builder.WriteString("invite_id=")
	builder.WriteString(fmt.Sprintf("%v", b.InviteID))
	builder.WriteByte(')')
	return builder.String()
}

// Bills is a parsable slice of Bill.
type Bills []*Bill
