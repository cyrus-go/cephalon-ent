// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/loginrecord"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
)

// LoginRecordCreate is the builder for creating a LoginRecord entity.
type LoginRecordCreate struct {
	config
	mutation *LoginRecordMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (lrc *LoginRecordCreate) SetCreatedBy(i int64) *LoginRecordCreate {
	lrc.mutation.SetCreatedBy(i)
	return lrc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (lrc *LoginRecordCreate) SetNillableCreatedBy(i *int64) *LoginRecordCreate {
	if i != nil {
		lrc.SetCreatedBy(*i)
	}
	return lrc
}

// SetUpdatedBy sets the "updated_by" field.
func (lrc *LoginRecordCreate) SetUpdatedBy(i int64) *LoginRecordCreate {
	lrc.mutation.SetUpdatedBy(i)
	return lrc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (lrc *LoginRecordCreate) SetNillableUpdatedBy(i *int64) *LoginRecordCreate {
	if i != nil {
		lrc.SetUpdatedBy(*i)
	}
	return lrc
}

// SetCreatedAt sets the "created_at" field.
func (lrc *LoginRecordCreate) SetCreatedAt(t time.Time) *LoginRecordCreate {
	lrc.mutation.SetCreatedAt(t)
	return lrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lrc *LoginRecordCreate) SetNillableCreatedAt(t *time.Time) *LoginRecordCreate {
	if t != nil {
		lrc.SetCreatedAt(*t)
	}
	return lrc
}

// SetUpdatedAt sets the "updated_at" field.
func (lrc *LoginRecordCreate) SetUpdatedAt(t time.Time) *LoginRecordCreate {
	lrc.mutation.SetUpdatedAt(t)
	return lrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lrc *LoginRecordCreate) SetNillableUpdatedAt(t *time.Time) *LoginRecordCreate {
	if t != nil {
		lrc.SetUpdatedAt(*t)
	}
	return lrc
}

// SetDeletedAt sets the "deleted_at" field.
func (lrc *LoginRecordCreate) SetDeletedAt(t time.Time) *LoginRecordCreate {
	lrc.mutation.SetDeletedAt(t)
	return lrc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lrc *LoginRecordCreate) SetNillableDeletedAt(t *time.Time) *LoginRecordCreate {
	if t != nil {
		lrc.SetDeletedAt(*t)
	}
	return lrc
}

// SetUa sets the "ua" field.
func (lrc *LoginRecordCreate) SetUa(s string) *LoginRecordCreate {
	lrc.mutation.SetUa(s)
	return lrc
}

// SetNillableUa sets the "ua" field if the given value is not nil.
func (lrc *LoginRecordCreate) SetNillableUa(s *string) *LoginRecordCreate {
	if s != nil {
		lrc.SetUa(*s)
	}
	return lrc
}

// SetIP sets the "ip" field.
func (lrc *LoginRecordCreate) SetIP(s string) *LoginRecordCreate {
	lrc.mutation.SetIP(s)
	return lrc
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (lrc *LoginRecordCreate) SetNillableIP(s *string) *LoginRecordCreate {
	if s != nil {
		lrc.SetIP(*s)
	}
	return lrc
}

// SetWay sets the "way" field.
func (lrc *LoginRecordCreate) SetWay(s string) *LoginRecordCreate {
	lrc.mutation.SetWay(s)
	return lrc
}

// SetNillableWay sets the "way" field if the given value is not nil.
func (lrc *LoginRecordCreate) SetNillableWay(s *string) *LoginRecordCreate {
	if s != nil {
		lrc.SetWay(*s)
	}
	return lrc
}

// SetUserID sets the "user_id" field.
func (lrc *LoginRecordCreate) SetUserID(i int64) *LoginRecordCreate {
	lrc.mutation.SetUserID(i)
	return lrc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (lrc *LoginRecordCreate) SetNillableUserID(i *int64) *LoginRecordCreate {
	if i != nil {
		lrc.SetUserID(*i)
	}
	return lrc
}

// SetID sets the "id" field.
func (lrc *LoginRecordCreate) SetID(i int64) *LoginRecordCreate {
	lrc.mutation.SetID(i)
	return lrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lrc *LoginRecordCreate) SetNillableID(i *int64) *LoginRecordCreate {
	if i != nil {
		lrc.SetID(*i)
	}
	return lrc
}

// SetUser sets the "user" edge to the User entity.
func (lrc *LoginRecordCreate) SetUser(u *User) *LoginRecordCreate {
	return lrc.SetUserID(u.ID)
}

// Mutation returns the LoginRecordMutation object of the builder.
func (lrc *LoginRecordCreate) Mutation() *LoginRecordMutation {
	return lrc.mutation
}

// Save creates the LoginRecord in the database.
func (lrc *LoginRecordCreate) Save(ctx context.Context) (*LoginRecord, error) {
	lrc.defaults()
	return withHooks(ctx, lrc.sqlSave, lrc.mutation, lrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lrc *LoginRecordCreate) SaveX(ctx context.Context) *LoginRecord {
	v, err := lrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lrc *LoginRecordCreate) Exec(ctx context.Context) error {
	_, err := lrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lrc *LoginRecordCreate) ExecX(ctx context.Context) {
	if err := lrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lrc *LoginRecordCreate) defaults() {
	if _, ok := lrc.mutation.CreatedBy(); !ok {
		v := loginrecord.DefaultCreatedBy
		lrc.mutation.SetCreatedBy(v)
	}
	if _, ok := lrc.mutation.UpdatedBy(); !ok {
		v := loginrecord.DefaultUpdatedBy
		lrc.mutation.SetUpdatedBy(v)
	}
	if _, ok := lrc.mutation.CreatedAt(); !ok {
		v := loginrecord.DefaultCreatedAt()
		lrc.mutation.SetCreatedAt(v)
	}
	if _, ok := lrc.mutation.UpdatedAt(); !ok {
		v := loginrecord.DefaultUpdatedAt()
		lrc.mutation.SetUpdatedAt(v)
	}
	if _, ok := lrc.mutation.DeletedAt(); !ok {
		v := loginrecord.DefaultDeletedAt
		lrc.mutation.SetDeletedAt(v)
	}
	if _, ok := lrc.mutation.Ua(); !ok {
		v := loginrecord.DefaultUa
		lrc.mutation.SetUa(v)
	}
	if _, ok := lrc.mutation.IP(); !ok {
		v := loginrecord.DefaultIP
		lrc.mutation.SetIP(v)
	}
	if _, ok := lrc.mutation.Way(); !ok {
		v := loginrecord.DefaultWay
		lrc.mutation.SetWay(v)
	}
	if _, ok := lrc.mutation.UserID(); !ok {
		v := loginrecord.DefaultUserID
		lrc.mutation.SetUserID(v)
	}
	if _, ok := lrc.mutation.ID(); !ok {
		v := loginrecord.DefaultID()
		lrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lrc *LoginRecordCreate) check() error {
	if _, ok := lrc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "LoginRecord.created_by"`)}
	}
	if _, ok := lrc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "LoginRecord.updated_by"`)}
	}
	if _, ok := lrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "LoginRecord.created_at"`)}
	}
	if _, ok := lrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "LoginRecord.updated_at"`)}
	}
	if _, ok := lrc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "LoginRecord.deleted_at"`)}
	}
	if _, ok := lrc.mutation.Ua(); !ok {
		return &ValidationError{Name: "ua", err: errors.New(`cep_ent: missing required field "LoginRecord.ua"`)}
	}
	if _, ok := lrc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`cep_ent: missing required field "LoginRecord.ip"`)}
	}
	if _, ok := lrc.mutation.Way(); !ok {
		return &ValidationError{Name: "way", err: errors.New(`cep_ent: missing required field "LoginRecord.way"`)}
	}
	if _, ok := lrc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "LoginRecord.user_id"`)}
	}
	if _, ok := lrc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "LoginRecord.user"`)}
	}
	return nil
}

func (lrc *LoginRecordCreate) sqlSave(ctx context.Context) (*LoginRecord, error) {
	if err := lrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	lrc.mutation.id = &_node.ID
	lrc.mutation.done = true
	return _node, nil
}

func (lrc *LoginRecordCreate) createSpec() (*LoginRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &LoginRecord{config: lrc.config}
		_spec = sqlgraph.NewCreateSpec(loginrecord.Table, sqlgraph.NewFieldSpec(loginrecord.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = lrc.conflict
	if id, ok := lrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lrc.mutation.CreatedBy(); ok {
		_spec.SetField(loginrecord.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := lrc.mutation.UpdatedBy(); ok {
		_spec.SetField(loginrecord.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := lrc.mutation.CreatedAt(); ok {
		_spec.SetField(loginrecord.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lrc.mutation.UpdatedAt(); ok {
		_spec.SetField(loginrecord.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := lrc.mutation.DeletedAt(); ok {
		_spec.SetField(loginrecord.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := lrc.mutation.Ua(); ok {
		_spec.SetField(loginrecord.FieldUa, field.TypeString, value)
		_node.Ua = value
	}
	if value, ok := lrc.mutation.IP(); ok {
		_spec.SetField(loginrecord.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	if value, ok := lrc.mutation.Way(); ok {
		_spec.SetField(loginrecord.FieldWay, field.TypeString, value)
		_node.Way = value
	}
	if nodes := lrc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loginrecord.UserTable,
			Columns: []string{loginrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LoginRecord.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LoginRecordUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (lrc *LoginRecordCreate) OnConflict(opts ...sql.ConflictOption) *LoginRecordUpsertOne {
	lrc.conflict = opts
	return &LoginRecordUpsertOne{
		create: lrc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LoginRecord.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lrc *LoginRecordCreate) OnConflictColumns(columns ...string) *LoginRecordUpsertOne {
	lrc.conflict = append(lrc.conflict, sql.ConflictColumns(columns...))
	return &LoginRecordUpsertOne{
		create: lrc,
	}
}

type (
	// LoginRecordUpsertOne is the builder for "upsert"-ing
	//  one LoginRecord node.
	LoginRecordUpsertOne struct {
		create *LoginRecordCreate
	}

	// LoginRecordUpsert is the "OnConflict" setter.
	LoginRecordUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *LoginRecordUpsert) SetCreatedBy(v int64) *LoginRecordUpsert {
	u.Set(loginrecord.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *LoginRecordUpsert) UpdateCreatedBy() *LoginRecordUpsert {
	u.SetExcluded(loginrecord.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *LoginRecordUpsert) AddCreatedBy(v int64) *LoginRecordUpsert {
	u.Add(loginrecord.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *LoginRecordUpsert) SetUpdatedBy(v int64) *LoginRecordUpsert {
	u.Set(loginrecord.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *LoginRecordUpsert) UpdateUpdatedBy() *LoginRecordUpsert {
	u.SetExcluded(loginrecord.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *LoginRecordUpsert) AddUpdatedBy(v int64) *LoginRecordUpsert {
	u.Add(loginrecord.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LoginRecordUpsert) SetUpdatedAt(v time.Time) *LoginRecordUpsert {
	u.Set(loginrecord.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LoginRecordUpsert) UpdateUpdatedAt() *LoginRecordUpsert {
	u.SetExcluded(loginrecord.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LoginRecordUpsert) SetDeletedAt(v time.Time) *LoginRecordUpsert {
	u.Set(loginrecord.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LoginRecordUpsert) UpdateDeletedAt() *LoginRecordUpsert {
	u.SetExcluded(loginrecord.FieldDeletedAt)
	return u
}

// SetUa sets the "ua" field.
func (u *LoginRecordUpsert) SetUa(v string) *LoginRecordUpsert {
	u.Set(loginrecord.FieldUa, v)
	return u
}

// UpdateUa sets the "ua" field to the value that was provided on create.
func (u *LoginRecordUpsert) UpdateUa() *LoginRecordUpsert {
	u.SetExcluded(loginrecord.FieldUa)
	return u
}

// SetIP sets the "ip" field.
func (u *LoginRecordUpsert) SetIP(v string) *LoginRecordUpsert {
	u.Set(loginrecord.FieldIP, v)
	return u
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *LoginRecordUpsert) UpdateIP() *LoginRecordUpsert {
	u.SetExcluded(loginrecord.FieldIP)
	return u
}

// SetWay sets the "way" field.
func (u *LoginRecordUpsert) SetWay(v string) *LoginRecordUpsert {
	u.Set(loginrecord.FieldWay, v)
	return u
}

// UpdateWay sets the "way" field to the value that was provided on create.
func (u *LoginRecordUpsert) UpdateWay() *LoginRecordUpsert {
	u.SetExcluded(loginrecord.FieldWay)
	return u
}

// SetUserID sets the "user_id" field.
func (u *LoginRecordUpsert) SetUserID(v int64) *LoginRecordUpsert {
	u.Set(loginrecord.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *LoginRecordUpsert) UpdateUserID() *LoginRecordUpsert {
	u.SetExcluded(loginrecord.FieldUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.LoginRecord.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(loginrecord.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LoginRecordUpsertOne) UpdateNewValues() *LoginRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(loginrecord.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(loginrecord.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LoginRecord.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LoginRecordUpsertOne) Ignore() *LoginRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LoginRecordUpsertOne) DoNothing() *LoginRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LoginRecordCreate.OnConflict
// documentation for more info.
func (u *LoginRecordUpsertOne) Update(set func(*LoginRecordUpsert)) *LoginRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LoginRecordUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *LoginRecordUpsertOne) SetCreatedBy(v int64) *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *LoginRecordUpsertOne) AddCreatedBy(v int64) *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *LoginRecordUpsertOne) UpdateCreatedBy() *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *LoginRecordUpsertOne) SetUpdatedBy(v int64) *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *LoginRecordUpsertOne) AddUpdatedBy(v int64) *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *LoginRecordUpsertOne) UpdateUpdatedBy() *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LoginRecordUpsertOne) SetUpdatedAt(v time.Time) *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LoginRecordUpsertOne) UpdateUpdatedAt() *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LoginRecordUpsertOne) SetDeletedAt(v time.Time) *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LoginRecordUpsertOne) UpdateDeletedAt() *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUa sets the "ua" field.
func (u *LoginRecordUpsertOne) SetUa(v string) *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetUa(v)
	})
}

// UpdateUa sets the "ua" field to the value that was provided on create.
func (u *LoginRecordUpsertOne) UpdateUa() *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateUa()
	})
}

// SetIP sets the "ip" field.
func (u *LoginRecordUpsertOne) SetIP(v string) *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *LoginRecordUpsertOne) UpdateIP() *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateIP()
	})
}

// SetWay sets the "way" field.
func (u *LoginRecordUpsertOne) SetWay(v string) *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetWay(v)
	})
}

// UpdateWay sets the "way" field to the value that was provided on create.
func (u *LoginRecordUpsertOne) UpdateWay() *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateWay()
	})
}

// SetUserID sets the "user_id" field.
func (u *LoginRecordUpsertOne) SetUserID(v int64) *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *LoginRecordUpsertOne) UpdateUserID() *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *LoginRecordUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for LoginRecordCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LoginRecordUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LoginRecordUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LoginRecordUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LoginRecordCreateBulk is the builder for creating many LoginRecord entities in bulk.
type LoginRecordCreateBulk struct {
	config
	err      error
	builders []*LoginRecordCreate
	conflict []sql.ConflictOption
}

// Save creates the LoginRecord entities in the database.
func (lrcb *LoginRecordCreateBulk) Save(ctx context.Context) ([]*LoginRecord, error) {
	if lrcb.err != nil {
		return nil, lrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lrcb.builders))
	nodes := make([]*LoginRecord, len(lrcb.builders))
	mutators := make([]Mutator, len(lrcb.builders))
	for i := range lrcb.builders {
		func(i int, root context.Context) {
			builder := lrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LoginRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lrcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lrcb *LoginRecordCreateBulk) SaveX(ctx context.Context) []*LoginRecord {
	v, err := lrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lrcb *LoginRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := lrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lrcb *LoginRecordCreateBulk) ExecX(ctx context.Context) {
	if err := lrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LoginRecord.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LoginRecordUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (lrcb *LoginRecordCreateBulk) OnConflict(opts ...sql.ConflictOption) *LoginRecordUpsertBulk {
	lrcb.conflict = opts
	return &LoginRecordUpsertBulk{
		create: lrcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LoginRecord.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lrcb *LoginRecordCreateBulk) OnConflictColumns(columns ...string) *LoginRecordUpsertBulk {
	lrcb.conflict = append(lrcb.conflict, sql.ConflictColumns(columns...))
	return &LoginRecordUpsertBulk{
		create: lrcb,
	}
}

// LoginRecordUpsertBulk is the builder for "upsert"-ing
// a bulk of LoginRecord nodes.
type LoginRecordUpsertBulk struct {
	create *LoginRecordCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.LoginRecord.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(loginrecord.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LoginRecordUpsertBulk) UpdateNewValues() *LoginRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(loginrecord.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(loginrecord.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LoginRecord.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LoginRecordUpsertBulk) Ignore() *LoginRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LoginRecordUpsertBulk) DoNothing() *LoginRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LoginRecordCreateBulk.OnConflict
// documentation for more info.
func (u *LoginRecordUpsertBulk) Update(set func(*LoginRecordUpsert)) *LoginRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LoginRecordUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *LoginRecordUpsertBulk) SetCreatedBy(v int64) *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *LoginRecordUpsertBulk) AddCreatedBy(v int64) *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *LoginRecordUpsertBulk) UpdateCreatedBy() *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *LoginRecordUpsertBulk) SetUpdatedBy(v int64) *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *LoginRecordUpsertBulk) AddUpdatedBy(v int64) *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *LoginRecordUpsertBulk) UpdateUpdatedBy() *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LoginRecordUpsertBulk) SetUpdatedAt(v time.Time) *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LoginRecordUpsertBulk) UpdateUpdatedAt() *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LoginRecordUpsertBulk) SetDeletedAt(v time.Time) *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LoginRecordUpsertBulk) UpdateDeletedAt() *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUa sets the "ua" field.
func (u *LoginRecordUpsertBulk) SetUa(v string) *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetUa(v)
	})
}

// UpdateUa sets the "ua" field to the value that was provided on create.
func (u *LoginRecordUpsertBulk) UpdateUa() *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateUa()
	})
}

// SetIP sets the "ip" field.
func (u *LoginRecordUpsertBulk) SetIP(v string) *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *LoginRecordUpsertBulk) UpdateIP() *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateIP()
	})
}

// SetWay sets the "way" field.
func (u *LoginRecordUpsertBulk) SetWay(v string) *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetWay(v)
	})
}

// UpdateWay sets the "way" field to the value that was provided on create.
func (u *LoginRecordUpsertBulk) UpdateWay() *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateWay()
	})
}

// SetUserID sets the "user_id" field.
func (u *LoginRecordUpsertBulk) SetUserID(v int64) *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *LoginRecordUpsertBulk) UpdateUserID() *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *LoginRecordUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the LoginRecordCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for LoginRecordCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LoginRecordUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
