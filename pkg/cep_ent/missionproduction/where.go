// Code generated by ent, DO NOT EDIT.

package missionproduction

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLTE(FieldID, id))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldDeletedAt, v))
}

// MissionID applies equality check predicate on the "mission_id" field. It's identical to MissionIDEQ.
func MissionID(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldMissionID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldUserID, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldStartedAt, v))
}

// FinishedAt applies equality check predicate on the "finished_at" field. It's identical to FinishedAtEQ.
func FinishedAt(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldFinishedAt, v))
}

// DeviceID applies equality check predicate on the "device_id" field. It's identical to DeviceIDEQ.
func DeviceID(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldDeviceID, v))
}

// DeviceSlot applies equality check predicate on the "device_slot" field. It's identical to DeviceSlotEQ.
func DeviceSlot(v int8) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldDeviceSlot, v))
}

// Urls applies equality check predicate on the "urls" field. It's identical to UrlsEQ.
func Urls(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldUrls, v))
}

// RespStatusCode applies equality check predicate on the "resp_status_code" field. It's identical to RespStatusCodeEQ.
func RespStatusCode(v int32) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldRespStatusCode, v))
}

// RespBody applies equality check predicate on the "resp_body" field. It's identical to RespBodyEQ.
func RespBody(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldRespBody, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLTE(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLTE(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLTE(FieldDeletedAt, v))
}

// MissionIDEQ applies the EQ predicate on the "mission_id" field.
func MissionIDEQ(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldMissionID, v))
}

// MissionIDNEQ applies the NEQ predicate on the "mission_id" field.
func MissionIDNEQ(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNEQ(FieldMissionID, v))
}

// MissionIDIn applies the In predicate on the "mission_id" field.
func MissionIDIn(vs ...int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldIn(FieldMissionID, vs...))
}

// MissionIDNotIn applies the NotIn predicate on the "mission_id" field.
func MissionIDNotIn(vs ...int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNotIn(FieldMissionID, vs...))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNotIn(FieldUserID, vs...))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLTE(FieldStartedAt, v))
}

// FinishedAtEQ applies the EQ predicate on the "finished_at" field.
func FinishedAtEQ(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldFinishedAt, v))
}

// FinishedAtNEQ applies the NEQ predicate on the "finished_at" field.
func FinishedAtNEQ(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNEQ(FieldFinishedAt, v))
}

// FinishedAtIn applies the In predicate on the "finished_at" field.
func FinishedAtIn(vs ...time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldIn(FieldFinishedAt, vs...))
}

// FinishedAtNotIn applies the NotIn predicate on the "finished_at" field.
func FinishedAtNotIn(vs ...time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNotIn(FieldFinishedAt, vs...))
}

// FinishedAtGT applies the GT predicate on the "finished_at" field.
func FinishedAtGT(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGT(FieldFinishedAt, v))
}

// FinishedAtGTE applies the GTE predicate on the "finished_at" field.
func FinishedAtGTE(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGTE(FieldFinishedAt, v))
}

// FinishedAtLT applies the LT predicate on the "finished_at" field.
func FinishedAtLT(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLT(FieldFinishedAt, v))
}

// FinishedAtLTE applies the LTE predicate on the "finished_at" field.
func FinishedAtLTE(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLTE(FieldFinishedAt, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v enums.MissionState) predicate.MissionProduction {
	vc := v
	return predicate.MissionProduction(sql.FieldEQ(FieldState, vc))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v enums.MissionState) predicate.MissionProduction {
	vc := v
	return predicate.MissionProduction(sql.FieldNEQ(FieldState, vc))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...enums.MissionState) predicate.MissionProduction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MissionProduction(sql.FieldIn(FieldState, v...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...enums.MissionState) predicate.MissionProduction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MissionProduction(sql.FieldNotIn(FieldState, v...))
}

// DeviceIDEQ applies the EQ predicate on the "device_id" field.
func DeviceIDEQ(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldDeviceID, v))
}

// DeviceIDNEQ applies the NEQ predicate on the "device_id" field.
func DeviceIDNEQ(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNEQ(FieldDeviceID, v))
}

// DeviceIDIn applies the In predicate on the "device_id" field.
func DeviceIDIn(vs ...int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldIn(FieldDeviceID, vs...))
}

// DeviceIDNotIn applies the NotIn predicate on the "device_id" field.
func DeviceIDNotIn(vs ...int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNotIn(FieldDeviceID, vs...))
}

// GpuVersionEQ applies the EQ predicate on the "gpu_version" field.
func GpuVersionEQ(v enums.GpuVersion) predicate.MissionProduction {
	vc := v
	return predicate.MissionProduction(sql.FieldEQ(FieldGpuVersion, vc))
}

// GpuVersionNEQ applies the NEQ predicate on the "gpu_version" field.
func GpuVersionNEQ(v enums.GpuVersion) predicate.MissionProduction {
	vc := v
	return predicate.MissionProduction(sql.FieldNEQ(FieldGpuVersion, vc))
}

// GpuVersionIn applies the In predicate on the "gpu_version" field.
func GpuVersionIn(vs ...enums.GpuVersion) predicate.MissionProduction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MissionProduction(sql.FieldIn(FieldGpuVersion, v...))
}

// GpuVersionNotIn applies the NotIn predicate on the "gpu_version" field.
func GpuVersionNotIn(vs ...enums.GpuVersion) predicate.MissionProduction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MissionProduction(sql.FieldNotIn(FieldGpuVersion, v...))
}

// DeviceSlotEQ applies the EQ predicate on the "device_slot" field.
func DeviceSlotEQ(v int8) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldDeviceSlot, v))
}

// DeviceSlotNEQ applies the NEQ predicate on the "device_slot" field.
func DeviceSlotNEQ(v int8) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNEQ(FieldDeviceSlot, v))
}

// DeviceSlotIn applies the In predicate on the "device_slot" field.
func DeviceSlotIn(vs ...int8) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldIn(FieldDeviceSlot, vs...))
}

// DeviceSlotNotIn applies the NotIn predicate on the "device_slot" field.
func DeviceSlotNotIn(vs ...int8) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNotIn(FieldDeviceSlot, vs...))
}

// DeviceSlotGT applies the GT predicate on the "device_slot" field.
func DeviceSlotGT(v int8) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGT(FieldDeviceSlot, v))
}

// DeviceSlotGTE applies the GTE predicate on the "device_slot" field.
func DeviceSlotGTE(v int8) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGTE(FieldDeviceSlot, v))
}

// DeviceSlotLT applies the LT predicate on the "device_slot" field.
func DeviceSlotLT(v int8) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLT(FieldDeviceSlot, v))
}

// DeviceSlotLTE applies the LTE predicate on the "device_slot" field.
func DeviceSlotLTE(v int8) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLTE(FieldDeviceSlot, v))
}

// UrlsEQ applies the EQ predicate on the "urls" field.
func UrlsEQ(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldUrls, v))
}

// UrlsNEQ applies the NEQ predicate on the "urls" field.
func UrlsNEQ(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNEQ(FieldUrls, v))
}

// UrlsIn applies the In predicate on the "urls" field.
func UrlsIn(vs ...string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldIn(FieldUrls, vs...))
}

// UrlsNotIn applies the NotIn predicate on the "urls" field.
func UrlsNotIn(vs ...string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNotIn(FieldUrls, vs...))
}

// UrlsGT applies the GT predicate on the "urls" field.
func UrlsGT(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGT(FieldUrls, v))
}

// UrlsGTE applies the GTE predicate on the "urls" field.
func UrlsGTE(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGTE(FieldUrls, v))
}

// UrlsLT applies the LT predicate on the "urls" field.
func UrlsLT(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLT(FieldUrls, v))
}

// UrlsLTE applies the LTE predicate on the "urls" field.
func UrlsLTE(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLTE(FieldUrls, v))
}

// UrlsContains applies the Contains predicate on the "urls" field.
func UrlsContains(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldContains(FieldUrls, v))
}

// UrlsHasPrefix applies the HasPrefix predicate on the "urls" field.
func UrlsHasPrefix(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldHasPrefix(FieldUrls, v))
}

// UrlsHasSuffix applies the HasSuffix predicate on the "urls" field.
func UrlsHasSuffix(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldHasSuffix(FieldUrls, v))
}

// UrlsEqualFold applies the EqualFold predicate on the "urls" field.
func UrlsEqualFold(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEqualFold(FieldUrls, v))
}

// UrlsContainsFold applies the ContainsFold predicate on the "urls" field.
func UrlsContainsFold(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldContainsFold(FieldUrls, v))
}

// RespStatusCodeEQ applies the EQ predicate on the "resp_status_code" field.
func RespStatusCodeEQ(v int32) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldRespStatusCode, v))
}

// RespStatusCodeNEQ applies the NEQ predicate on the "resp_status_code" field.
func RespStatusCodeNEQ(v int32) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNEQ(FieldRespStatusCode, v))
}

// RespStatusCodeIn applies the In predicate on the "resp_status_code" field.
func RespStatusCodeIn(vs ...int32) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldIn(FieldRespStatusCode, vs...))
}

// RespStatusCodeNotIn applies the NotIn predicate on the "resp_status_code" field.
func RespStatusCodeNotIn(vs ...int32) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNotIn(FieldRespStatusCode, vs...))
}

// RespStatusCodeGT applies the GT predicate on the "resp_status_code" field.
func RespStatusCodeGT(v int32) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGT(FieldRespStatusCode, v))
}

// RespStatusCodeGTE applies the GTE predicate on the "resp_status_code" field.
func RespStatusCodeGTE(v int32) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGTE(FieldRespStatusCode, v))
}

// RespStatusCodeLT applies the LT predicate on the "resp_status_code" field.
func RespStatusCodeLT(v int32) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLT(FieldRespStatusCode, v))
}

// RespStatusCodeLTE applies the LTE predicate on the "resp_status_code" field.
func RespStatusCodeLTE(v int32) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLTE(FieldRespStatusCode, v))
}

// RespBodyEQ applies the EQ predicate on the "resp_body" field.
func RespBodyEQ(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldRespBody, v))
}

// RespBodyNEQ applies the NEQ predicate on the "resp_body" field.
func RespBodyNEQ(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNEQ(FieldRespBody, v))
}

// RespBodyIn applies the In predicate on the "resp_body" field.
func RespBodyIn(vs ...string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldIn(FieldRespBody, vs...))
}

// RespBodyNotIn applies the NotIn predicate on the "resp_body" field.
func RespBodyNotIn(vs ...string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNotIn(FieldRespBody, vs...))
}

// RespBodyGT applies the GT predicate on the "resp_body" field.
func RespBodyGT(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGT(FieldRespBody, v))
}

// RespBodyGTE applies the GTE predicate on the "resp_body" field.
func RespBodyGTE(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGTE(FieldRespBody, v))
}

// RespBodyLT applies the LT predicate on the "resp_body" field.
func RespBodyLT(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLT(FieldRespBody, v))
}

// RespBodyLTE applies the LTE predicate on the "resp_body" field.
func RespBodyLTE(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLTE(FieldRespBody, v))
}

// RespBodyContains applies the Contains predicate on the "resp_body" field.
func RespBodyContains(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldContains(FieldRespBody, v))
}

// RespBodyHasPrefix applies the HasPrefix predicate on the "resp_body" field.
func RespBodyHasPrefix(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldHasPrefix(FieldRespBody, v))
}

// RespBodyHasSuffix applies the HasSuffix predicate on the "resp_body" field.
func RespBodyHasSuffix(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldHasSuffix(FieldRespBody, v))
}

// RespBodyEqualFold applies the EqualFold predicate on the "resp_body" field.
func RespBodyEqualFold(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEqualFold(FieldRespBody, v))
}

// RespBodyContainsFold applies the ContainsFold predicate on the "resp_body" field.
func RespBodyContainsFold(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldContainsFold(FieldRespBody, v))
}

// HasMission applies the HasEdge predicate on the "mission" edge.
func HasMission() predicate.MissionProduction {
	return predicate.MissionProduction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MissionTable, MissionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMissionWith applies the HasEdge predicate on the "mission" edge with a given conditions (other predicates).
func HasMissionWith(preds ...predicate.Mission) predicate.MissionProduction {
	return predicate.MissionProduction(func(s *sql.Selector) {
		step := newMissionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.MissionProduction {
	return predicate.MissionProduction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.MissionProduction {
	return predicate.MissionProduction(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDevice applies the HasEdge predicate on the "device" edge.
func HasDevice() predicate.MissionProduction {
	return predicate.MissionProduction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DeviceTable, DeviceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeviceWith applies the HasEdge predicate on the "device" edge with a given conditions (other predicates).
func HasDeviceWith(preds ...predicate.Device) predicate.MissionProduction {
	return predicate.MissionProduction(func(s *sql.Selector) {
		step := newDeviceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMissionProduceOrder applies the HasEdge predicate on the "mission_produce_order" edge.
func HasMissionProduceOrder() predicate.MissionProduction {
	return predicate.MissionProduction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, MissionProduceOrderTable, MissionProduceOrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMissionProduceOrderWith applies the HasEdge predicate on the "mission_produce_order" edge with a given conditions (other predicates).
func HasMissionProduceOrderWith(preds ...predicate.MissionProduceOrder) predicate.MissionProduction {
	return predicate.MissionProduction(func(s *sql.Selector) {
		step := newMissionProduceOrderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MissionProduction) predicate.MissionProduction {
	return predicate.MissionProduction(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MissionProduction) predicate.MissionProduction {
	return predicate.MissionProduction(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MissionProduction) predicate.MissionProduction {
	return predicate.MissionProduction(sql.NotPredicates(p))
}
