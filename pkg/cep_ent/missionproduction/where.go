// Code generated by ent, DO NOT EDIT.

package missionproduction

import (
	"cephalon-ent/pkg/cep_ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLTE(FieldID, id))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldDeletedAt, v))
}

// MissionID applies equality check predicate on the "mission_id" field. It's identical to MissionIDEQ.
func MissionID(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldMissionID, v))
}

// HmacKeyPairID applies equality check predicate on the "hmac_key_pair_id" field. It's identical to HmacKeyPairIDEQ.
func HmacKeyPairID(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldHmacKeyPairID, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldStartedAt, v))
}

// FinishedAt applies equality check predicate on the "finished_at" field. It's identical to FinishedAtEQ.
func FinishedAt(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldFinishedAt, v))
}

// DeviceID applies equality check predicate on the "device_id" field. It's identical to DeviceIDEQ.
func DeviceID(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldDeviceID, v))
}

// ResultUrls applies equality check predicate on the "result_urls" field. It's identical to ResultUrlsEQ.
func ResultUrls(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldResultUrls, v))
}

// AdditionalResult applies equality check predicate on the "additional_result" field. It's identical to AdditionalResultEQ.
func AdditionalResult(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldAdditionalResult, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLTE(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLTE(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLTE(FieldDeletedAt, v))
}

// MissionIDEQ applies the EQ predicate on the "mission_id" field.
func MissionIDEQ(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldMissionID, v))
}

// MissionIDNEQ applies the NEQ predicate on the "mission_id" field.
func MissionIDNEQ(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNEQ(FieldMissionID, v))
}

// MissionIDIn applies the In predicate on the "mission_id" field.
func MissionIDIn(vs ...int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldIn(FieldMissionID, vs...))
}

// MissionIDNotIn applies the NotIn predicate on the "mission_id" field.
func MissionIDNotIn(vs ...int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNotIn(FieldMissionID, vs...))
}

// HmacKeyPairIDEQ applies the EQ predicate on the "hmac_key_pair_id" field.
func HmacKeyPairIDEQ(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldHmacKeyPairID, v))
}

// HmacKeyPairIDNEQ applies the NEQ predicate on the "hmac_key_pair_id" field.
func HmacKeyPairIDNEQ(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNEQ(FieldHmacKeyPairID, v))
}

// HmacKeyPairIDIn applies the In predicate on the "hmac_key_pair_id" field.
func HmacKeyPairIDIn(vs ...int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldIn(FieldHmacKeyPairID, vs...))
}

// HmacKeyPairIDNotIn applies the NotIn predicate on the "hmac_key_pair_id" field.
func HmacKeyPairIDNotIn(vs ...int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNotIn(FieldHmacKeyPairID, vs...))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLTE(FieldStartedAt, v))
}

// FinishedAtEQ applies the EQ predicate on the "finished_at" field.
func FinishedAtEQ(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldFinishedAt, v))
}

// FinishedAtNEQ applies the NEQ predicate on the "finished_at" field.
func FinishedAtNEQ(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNEQ(FieldFinishedAt, v))
}

// FinishedAtIn applies the In predicate on the "finished_at" field.
func FinishedAtIn(vs ...time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldIn(FieldFinishedAt, vs...))
}

// FinishedAtNotIn applies the NotIn predicate on the "finished_at" field.
func FinishedAtNotIn(vs ...time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNotIn(FieldFinishedAt, vs...))
}

// FinishedAtGT applies the GT predicate on the "finished_at" field.
func FinishedAtGT(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGT(FieldFinishedAt, v))
}

// FinishedAtGTE applies the GTE predicate on the "finished_at" field.
func FinishedAtGTE(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGTE(FieldFinishedAt, v))
}

// FinishedAtLT applies the LT predicate on the "finished_at" field.
func FinishedAtLT(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLT(FieldFinishedAt, v))
}

// FinishedAtLTE applies the LTE predicate on the "finished_at" field.
func FinishedAtLTE(v time.Time) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLTE(FieldFinishedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNotIn(FieldStatus, vs...))
}

// DeviceIDEQ applies the EQ predicate on the "device_id" field.
func DeviceIDEQ(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldDeviceID, v))
}

// DeviceIDNEQ applies the NEQ predicate on the "device_id" field.
func DeviceIDNEQ(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNEQ(FieldDeviceID, v))
}

// DeviceIDIn applies the In predicate on the "device_id" field.
func DeviceIDIn(vs ...int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldIn(FieldDeviceID, vs...))
}

// DeviceIDNotIn applies the NotIn predicate on the "device_id" field.
func DeviceIDNotIn(vs ...int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNotIn(FieldDeviceID, vs...))
}

// DeviceIDGT applies the GT predicate on the "device_id" field.
func DeviceIDGT(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGT(FieldDeviceID, v))
}

// DeviceIDGTE applies the GTE predicate on the "device_id" field.
func DeviceIDGTE(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGTE(FieldDeviceID, v))
}

// DeviceIDLT applies the LT predicate on the "device_id" field.
func DeviceIDLT(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLT(FieldDeviceID, v))
}

// DeviceIDLTE applies the LTE predicate on the "device_id" field.
func DeviceIDLTE(v int64) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLTE(FieldDeviceID, v))
}

// ResultUrlsEQ applies the EQ predicate on the "result_urls" field.
func ResultUrlsEQ(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldResultUrls, v))
}

// ResultUrlsNEQ applies the NEQ predicate on the "result_urls" field.
func ResultUrlsNEQ(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNEQ(FieldResultUrls, v))
}

// ResultUrlsIn applies the In predicate on the "result_urls" field.
func ResultUrlsIn(vs ...string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldIn(FieldResultUrls, vs...))
}

// ResultUrlsNotIn applies the NotIn predicate on the "result_urls" field.
func ResultUrlsNotIn(vs ...string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNotIn(FieldResultUrls, vs...))
}

// ResultUrlsGT applies the GT predicate on the "result_urls" field.
func ResultUrlsGT(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGT(FieldResultUrls, v))
}

// ResultUrlsGTE applies the GTE predicate on the "result_urls" field.
func ResultUrlsGTE(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGTE(FieldResultUrls, v))
}

// ResultUrlsLT applies the LT predicate on the "result_urls" field.
func ResultUrlsLT(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLT(FieldResultUrls, v))
}

// ResultUrlsLTE applies the LTE predicate on the "result_urls" field.
func ResultUrlsLTE(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLTE(FieldResultUrls, v))
}

// ResultUrlsContains applies the Contains predicate on the "result_urls" field.
func ResultUrlsContains(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldContains(FieldResultUrls, v))
}

// ResultUrlsHasPrefix applies the HasPrefix predicate on the "result_urls" field.
func ResultUrlsHasPrefix(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldHasPrefix(FieldResultUrls, v))
}

// ResultUrlsHasSuffix applies the HasSuffix predicate on the "result_urls" field.
func ResultUrlsHasSuffix(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldHasSuffix(FieldResultUrls, v))
}

// ResultUrlsEqualFold applies the EqualFold predicate on the "result_urls" field.
func ResultUrlsEqualFold(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEqualFold(FieldResultUrls, v))
}

// ResultUrlsContainsFold applies the ContainsFold predicate on the "result_urls" field.
func ResultUrlsContainsFold(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldContainsFold(FieldResultUrls, v))
}

// AdditionalResultEQ applies the EQ predicate on the "additional_result" field.
func AdditionalResultEQ(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEQ(FieldAdditionalResult, v))
}

// AdditionalResultNEQ applies the NEQ predicate on the "additional_result" field.
func AdditionalResultNEQ(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNEQ(FieldAdditionalResult, v))
}

// AdditionalResultIn applies the In predicate on the "additional_result" field.
func AdditionalResultIn(vs ...string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldIn(FieldAdditionalResult, vs...))
}

// AdditionalResultNotIn applies the NotIn predicate on the "additional_result" field.
func AdditionalResultNotIn(vs ...string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldNotIn(FieldAdditionalResult, vs...))
}

// AdditionalResultGT applies the GT predicate on the "additional_result" field.
func AdditionalResultGT(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGT(FieldAdditionalResult, v))
}

// AdditionalResultGTE applies the GTE predicate on the "additional_result" field.
func AdditionalResultGTE(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldGTE(FieldAdditionalResult, v))
}

// AdditionalResultLT applies the LT predicate on the "additional_result" field.
func AdditionalResultLT(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLT(FieldAdditionalResult, v))
}

// AdditionalResultLTE applies the LTE predicate on the "additional_result" field.
func AdditionalResultLTE(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldLTE(FieldAdditionalResult, v))
}

// AdditionalResultContains applies the Contains predicate on the "additional_result" field.
func AdditionalResultContains(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldContains(FieldAdditionalResult, v))
}

// AdditionalResultHasPrefix applies the HasPrefix predicate on the "additional_result" field.
func AdditionalResultHasPrefix(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldHasPrefix(FieldAdditionalResult, v))
}

// AdditionalResultHasSuffix applies the HasSuffix predicate on the "additional_result" field.
func AdditionalResultHasSuffix(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldHasSuffix(FieldAdditionalResult, v))
}

// AdditionalResultEqualFold applies the EqualFold predicate on the "additional_result" field.
func AdditionalResultEqualFold(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldEqualFold(FieldAdditionalResult, v))
}

// AdditionalResultContainsFold applies the ContainsFold predicate on the "additional_result" field.
func AdditionalResultContainsFold(v string) predicate.MissionProduction {
	return predicate.MissionProduction(sql.FieldContainsFold(FieldAdditionalResult, v))
}

// HasMissionProduceOrder applies the HasEdge predicate on the "mission_produce_order" edge.
func HasMissionProduceOrder() predicate.MissionProduction {
	return predicate.MissionProduction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, MissionProduceOrderTable, MissionProduceOrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMissionProduceOrderWith applies the HasEdge predicate on the "mission_produce_order" edge with a given conditions (other predicates).
func HasMissionProduceOrderWith(preds ...predicate.MissionProduceOrder) predicate.MissionProduction {
	return predicate.MissionProduction(func(s *sql.Selector) {
		step := newMissionProduceOrderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMission applies the HasEdge predicate on the "mission" edge.
func HasMission() predicate.MissionProduction {
	return predicate.MissionProduction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MissionTable, MissionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMissionWith applies the HasEdge predicate on the "mission" edge with a given conditions (other predicates).
func HasMissionWith(preds ...predicate.Mission) predicate.MissionProduction {
	return predicate.MissionProduction(func(s *sql.Selector) {
		step := newMissionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHmacKeyPair applies the HasEdge predicate on the "hmac_key_pair" edge.
func HasHmacKeyPair() predicate.MissionProduction {
	return predicate.MissionProduction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HmacKeyPairTable, HmacKeyPairColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHmacKeyPairWith applies the HasEdge predicate on the "hmac_key_pair" edge with a given conditions (other predicates).
func HasHmacKeyPairWith(preds ...predicate.HmacKeyPair) predicate.MissionProduction {
	return predicate.MissionProduction(func(s *sql.Selector) {
		step := newHmacKeyPairStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MissionProduction) predicate.MissionProduction {
	return predicate.MissionProduction(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MissionProduction) predicate.MissionProduction {
	return predicate.MissionProduction(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MissionProduction) predicate.MissionProduction {
	return predicate.MissionProduction(func(s *sql.Selector) {
		p(s.Not())
	})
}
