// Code generated by ent, DO NOT EDIT.

package costbill

import (
	"cephalon-ent/pkg/enums"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the costbill type in the database.
	Label = "cost_bill"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldIsAdd holds the string denoting the is_add field in the database.
	FieldIsAdd = "is_add"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldSerialNumber holds the string denoting the serial_number field in the database.
	FieldSerialNumber = "serial_number"
	// FieldCostAccountID holds the string denoting the cost_account_id field in the database.
	FieldCostAccountID = "cost_account_id"
	// FieldPureCep holds the string denoting the pure_cep field in the database.
	FieldPureCep = "pure_cep"
	// FieldGiftCep holds the string denoting the gift_cep field in the database.
	FieldGiftCep = "gift_cep"
	// FieldReasonID holds the string denoting the reason_id field in the database.
	FieldReasonID = "reason_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldMarketBillID holds the string denoting the market_bill_id field in the database.
	FieldMarketBillID = "market_bill_id"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeCostAccount holds the string denoting the cost_account edge name in mutations.
	EdgeCostAccount = "cost_account"
	// EdgeRechargeOrder holds the string denoting the recharge_order edge name in mutations.
	EdgeRechargeOrder = "recharge_order"
	// EdgeMissionConsumeOrder holds the string denoting the mission_consume_order edge name in mutations.
	EdgeMissionConsumeOrder = "mission_consume_order"
	// Table holds the table name of the costbill in the database.
	Table = "cost_bills"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "cost_bills"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// CostAccountTable is the table that holds the cost_account relation/edge.
	CostAccountTable = "cost_bills"
	// CostAccountInverseTable is the table name for the CostAccount entity.
	// It exists in this package in order to avoid circular dependency with the "costaccount" package.
	CostAccountInverseTable = "cost_accounts"
	// CostAccountColumn is the table column denoting the cost_account relation/edge.
	CostAccountColumn = "cost_account_id"
	// RechargeOrderTable is the table that holds the recharge_order relation/edge.
	RechargeOrderTable = "cost_bills"
	// RechargeOrderInverseTable is the table name for the RechargeOrder entity.
	// It exists in this package in order to avoid circular dependency with the "rechargeorder" package.
	RechargeOrderInverseTable = "recharge_orders"
	// RechargeOrderColumn is the table column denoting the recharge_order relation/edge.
	RechargeOrderColumn = "reason_id"
	// MissionConsumeOrderTable is the table that holds the mission_consume_order relation/edge.
	MissionConsumeOrderTable = "cost_bills"
	// MissionConsumeOrderInverseTable is the table name for the MissionConsumeOrder entity.
	// It exists in this package in order to avoid circular dependency with the "missionconsumeorder" package.
	MissionConsumeOrderInverseTable = "mission_consume_orders"
	// MissionConsumeOrderColumn is the table column denoting the mission_consume_order relation/edge.
	MissionConsumeOrderColumn = "reason_id"
)

// Columns holds all SQL columns for costbill fields.
var Columns = []string{
	FieldID,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldType,
	FieldIsAdd,
	FieldUserID,
	FieldSerialNumber,
	FieldCostAccountID,
	FieldPureCep,
	FieldGiftCep,
	FieldReasonID,
	FieldStatus,
	FieldMarketBillID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedBy holds the default value on creation for the "created_by" field.
	DefaultCreatedBy int64
	// DefaultUpdatedBy holds the default value on creation for the "updated_by" field.
	DefaultUpdatedBy int64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt time.Time
	// DefaultIsAdd holds the default value on creation for the "is_add" field.
	DefaultIsAdd bool
	// DefaultUserID holds the default value on creation for the "user_id" field.
	DefaultUserID int64
	// DefaultSerialNumber holds the default value on creation for the "serial_number" field.
	DefaultSerialNumber string
	// DefaultCostAccountID holds the default value on creation for the "cost_account_id" field.
	DefaultCostAccountID int64
	// DefaultPureCep holds the default value on creation for the "pure_cep" field.
	DefaultPureCep int64
	// DefaultGiftCep holds the default value on creation for the "gift_cep" field.
	DefaultGiftCep int64
	// DefaultReasonID holds the default value on creation for the "reason_id" field.
	DefaultReasonID int64
	// DefaultMarketBillID holds the default value on creation for the "market_bill_id" field.
	DefaultMarketBillID int64
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
)

// Type defines the type for the "type" enum field.
type Type string

// TypeMission is the default value of the Type enum.
const DefaultType = TypeMission

// Type values.
const (
	TypeMission  Type = "mission"
	TypeRecharge Type = "recharge"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeMission, TypeRecharge:
		return nil
	default:
		return fmt.Errorf("costbill: invalid enum value for type field: %q", _type)
	}
}

const DefaultStatus enums.BillStatus = "pending"

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s enums.BillStatus) error {
	switch s {
	case "pending", "canceled", "done":
		return nil
	default:
		return fmt.Errorf("costbill: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the CostBill queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByIsAdd orders the results by the is_add field.
func ByIsAdd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsAdd, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// BySerialNumber orders the results by the serial_number field.
func BySerialNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSerialNumber, opts...).ToFunc()
}

// ByCostAccountID orders the results by the cost_account_id field.
func ByCostAccountID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCostAccountID, opts...).ToFunc()
}

// ByPureCep orders the results by the pure_cep field.
func ByPureCep(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPureCep, opts...).ToFunc()
}

// ByGiftCep orders the results by the gift_cep field.
func ByGiftCep(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGiftCep, opts...).ToFunc()
}

// ByReasonID orders the results by the reason_id field.
func ByReasonID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReasonID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByMarketBillID orders the results by the market_bill_id field.
func ByMarketBillID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMarketBillID, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByCostAccountField orders the results by cost_account field.
func ByCostAccountField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCostAccountStep(), sql.OrderByField(field, opts...))
	}
}

// ByRechargeOrderField orders the results by recharge_order field.
func ByRechargeOrderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRechargeOrderStep(), sql.OrderByField(field, opts...))
	}
}

// ByMissionConsumeOrderField orders the results by mission_consume_order field.
func ByMissionConsumeOrderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMissionConsumeOrderStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newCostAccountStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CostAccountInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CostAccountTable, CostAccountColumn),
	)
}
func newRechargeOrderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RechargeOrderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RechargeOrderTable, RechargeOrderColumn),
	)
}
func newMissionConsumeOrderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MissionConsumeOrderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MissionConsumeOrderTable, MissionConsumeOrderColumn),
	)
}
