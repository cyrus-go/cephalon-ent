// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/transferorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/withdrawrecord"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// 提现记录，记录所有的提现信息
type WithdrawRecord struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建者 ID
	CreatedBy int64 `json:"created_by,string"`
	// 更新者 ID
	UpdatedBy int64 `json:"updated_by,string"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// 提现的用户 id
	UserID int64 `json:"user_id,string"`
	// 提现账户
	WithdrawAccount string `json:"withdraw_account"`
	// 提现类型
	Type enums.WithdrawType `json:"type"`
	// 提现金额，单位：厘
	Amount int64 `json:"amount"`
	// 本次提现后余额，单位：厘
	RemainAmount int64 `json:"remain_amount"`
	// 提现手续费率，100 为基准，比如手续费 7%，值就应该为 7，最大值不能超过 100, 默认 7%
	Rate int64 `json:"withdraw_rate"`
	// 提现实际到账（扣除手续费），单位：厘
	RealAmount int64 `json:"withdraw_real_amount"`
	// 转账订单的状态，比如微信发起支付后可能没完成支付
	Status enums.WithdrawStatus `json:"status"`
	// 提现审批拒绝的理由
	RejectReason string `json:"reject_reason"`
	// 操作的用户 id，手动充值或者提现审批才有数据，默认为 0
	OperateUserID int64 `json:"operate_user_id,string"`
	// 对应的交易订单 id（一对一）
	TransferOrderID int64 `json:"transfer_order_id,string"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WithdrawRecordQuery when eager-loading is set.
	Edges        WithdrawRecordEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WithdrawRecordEdges holds the relations/edges for other nodes in the graph.
type WithdrawRecordEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// OperateUser holds the value of the operate_user edge.
	OperateUser *User `json:"operate_user,omitempty"`
	// TransferOrder holds the value of the transfer_order edge.
	TransferOrder *TransferOrder `json:"transfer_order,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WithdrawRecordEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// OperateUserOrErr returns the OperateUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WithdrawRecordEdges) OperateUserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.OperateUser == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.OperateUser, nil
	}
	return nil, &NotLoadedError{edge: "operate_user"}
}

// TransferOrderOrErr returns the TransferOrder value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WithdrawRecordEdges) TransferOrderOrErr() (*TransferOrder, error) {
	if e.loadedTypes[2] {
		if e.TransferOrder == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: transferorder.Label}
		}
		return e.TransferOrder, nil
	}
	return nil, &NotLoadedError{edge: "transfer_order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WithdrawRecord) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case withdrawrecord.FieldID, withdrawrecord.FieldCreatedBy, withdrawrecord.FieldUpdatedBy, withdrawrecord.FieldUserID, withdrawrecord.FieldAmount, withdrawrecord.FieldRemainAmount, withdrawrecord.FieldRate, withdrawrecord.FieldRealAmount, withdrawrecord.FieldOperateUserID, withdrawrecord.FieldTransferOrderID:
			values[i] = new(sql.NullInt64)
		case withdrawrecord.FieldWithdrawAccount, withdrawrecord.FieldType, withdrawrecord.FieldStatus, withdrawrecord.FieldRejectReason:
			values[i] = new(sql.NullString)
		case withdrawrecord.FieldCreatedAt, withdrawrecord.FieldUpdatedAt, withdrawrecord.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WithdrawRecord fields.
func (wr *WithdrawRecord) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case withdrawrecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wr.ID = int64(value.Int64)
		case withdrawrecord.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				wr.CreatedBy = value.Int64
			}
		case withdrawrecord.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				wr.UpdatedBy = value.Int64
			}
		case withdrawrecord.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wr.CreatedAt = value.Time
			}
		case withdrawrecord.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wr.UpdatedAt = value.Time
			}
		case withdrawrecord.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				wr.DeletedAt = value.Time
			}
		case withdrawrecord.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				wr.UserID = value.Int64
			}
		case withdrawrecord.FieldWithdrawAccount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field withdraw_account", values[i])
			} else if value.Valid {
				wr.WithdrawAccount = value.String
			}
		case withdrawrecord.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				wr.Type = enums.WithdrawType(value.String)
			}
		case withdrawrecord.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				wr.Amount = value.Int64
			}
		case withdrawrecord.FieldRemainAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field remain_amount", values[i])
			} else if value.Valid {
				wr.RemainAmount = value.Int64
			}
		case withdrawrecord.FieldRate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rate", values[i])
			} else if value.Valid {
				wr.Rate = value.Int64
			}
		case withdrawrecord.FieldRealAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field real_amount", values[i])
			} else if value.Valid {
				wr.RealAmount = value.Int64
			}
		case withdrawrecord.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				wr.Status = enums.WithdrawStatus(value.String)
			}
		case withdrawrecord.FieldRejectReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reject_reason", values[i])
			} else if value.Valid {
				wr.RejectReason = value.String
			}
		case withdrawrecord.FieldOperateUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field operate_user_id", values[i])
			} else if value.Valid {
				wr.OperateUserID = value.Int64
			}
		case withdrawrecord.FieldTransferOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field transfer_order_id", values[i])
			} else if value.Valid {
				wr.TransferOrderID = value.Int64
			}
		default:
			wr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WithdrawRecord.
// This includes values selected through modifiers, order, etc.
func (wr *WithdrawRecord) Value(name string) (ent.Value, error) {
	return wr.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the WithdrawRecord entity.
func (wr *WithdrawRecord) QueryUser() *UserQuery {
	return NewWithdrawRecordClient(wr.config).QueryUser(wr)
}

// QueryOperateUser queries the "operate_user" edge of the WithdrawRecord entity.
func (wr *WithdrawRecord) QueryOperateUser() *UserQuery {
	return NewWithdrawRecordClient(wr.config).QueryOperateUser(wr)
}

// QueryTransferOrder queries the "transfer_order" edge of the WithdrawRecord entity.
func (wr *WithdrawRecord) QueryTransferOrder() *TransferOrderQuery {
	return NewWithdrawRecordClient(wr.config).QueryTransferOrder(wr)
}

// Update returns a builder for updating this WithdrawRecord.
// Note that you need to call WithdrawRecord.Unwrap() before calling this method if this WithdrawRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (wr *WithdrawRecord) Update() *WithdrawRecordUpdateOne {
	return NewWithdrawRecordClient(wr.config).UpdateOne(wr)
}

// Unwrap unwraps the WithdrawRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wr *WithdrawRecord) Unwrap() *WithdrawRecord {
	_tx, ok := wr.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: WithdrawRecord is not a transactional entity")
	}
	wr.config.driver = _tx.drv
	return wr
}

// String implements the fmt.Stringer.
func (wr *WithdrawRecord) String() string {
	var builder strings.Builder
	builder.WriteString("WithdrawRecord(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wr.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", wr.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", wr.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(wr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(wr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(wr.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", wr.UserID))
	builder.WriteString(", ")
	builder.WriteString("withdraw_account=")
	builder.WriteString(wr.WithdrawAccount)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", wr.Type))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", wr.Amount))
	builder.WriteString(", ")
	builder.WriteString("remain_amount=")
	builder.WriteString(fmt.Sprintf("%v", wr.RemainAmount))
	builder.WriteString(", ")
	builder.WriteString("rate=")
	builder.WriteString(fmt.Sprintf("%v", wr.Rate))
	builder.WriteString(", ")
	builder.WriteString("real_amount=")
	builder.WriteString(fmt.Sprintf("%v", wr.RealAmount))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", wr.Status))
	builder.WriteString(", ")
	builder.WriteString("reject_reason=")
	builder.WriteString(wr.RejectReason)
	builder.WriteString(", ")
	builder.WriteString("operate_user_id=")
	builder.WriteString(fmt.Sprintf("%v", wr.OperateUserID))
	builder.WriteString(", ")
	builder.WriteString("transfer_order_id=")
	builder.WriteString(fmt.Sprintf("%v", wr.TransferOrderID))
	builder.WriteByte(')')
	return builder.String()
}

// WithdrawRecords is a parsable slice of WithdrawRecord.
type WithdrawRecords []*WithdrawRecord
