// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/gpupeak"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// GpuPeakUpdate is the builder for updating GpuPeak entities.
type GpuPeakUpdate struct {
	config
	hooks     []Hook
	mutation  *GpuPeakMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the GpuPeakUpdate builder.
func (gpu *GpuPeakUpdate) Where(ps ...predicate.GpuPeak) *GpuPeakUpdate {
	gpu.mutation.Where(ps...)
	return gpu
}

// SetCreatedBy sets the "created_by" field.
func (gpu *GpuPeakUpdate) SetCreatedBy(i int64) *GpuPeakUpdate {
	gpu.mutation.ResetCreatedBy()
	gpu.mutation.SetCreatedBy(i)
	return gpu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (gpu *GpuPeakUpdate) SetNillableCreatedBy(i *int64) *GpuPeakUpdate {
	if i != nil {
		gpu.SetCreatedBy(*i)
	}
	return gpu
}

// AddCreatedBy adds i to the "created_by" field.
func (gpu *GpuPeakUpdate) AddCreatedBy(i int64) *GpuPeakUpdate {
	gpu.mutation.AddCreatedBy(i)
	return gpu
}

// SetUpdatedBy sets the "updated_by" field.
func (gpu *GpuPeakUpdate) SetUpdatedBy(i int64) *GpuPeakUpdate {
	gpu.mutation.ResetUpdatedBy()
	gpu.mutation.SetUpdatedBy(i)
	return gpu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (gpu *GpuPeakUpdate) SetNillableUpdatedBy(i *int64) *GpuPeakUpdate {
	if i != nil {
		gpu.SetUpdatedBy(*i)
	}
	return gpu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (gpu *GpuPeakUpdate) AddUpdatedBy(i int64) *GpuPeakUpdate {
	gpu.mutation.AddUpdatedBy(i)
	return gpu
}

// SetUpdatedAt sets the "updated_at" field.
func (gpu *GpuPeakUpdate) SetUpdatedAt(t time.Time) *GpuPeakUpdate {
	gpu.mutation.SetUpdatedAt(t)
	return gpu
}

// SetDeletedAt sets the "deleted_at" field.
func (gpu *GpuPeakUpdate) SetDeletedAt(t time.Time) *GpuPeakUpdate {
	gpu.mutation.SetDeletedAt(t)
	return gpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gpu *GpuPeakUpdate) SetNillableDeletedAt(t *time.Time) *GpuPeakUpdate {
	if t != nil {
		gpu.SetDeletedAt(*t)
	}
	return gpu
}

// SetVersion sets the "version" field.
func (gpu *GpuPeakUpdate) SetVersion(ev enums.GpuVersion) *GpuPeakUpdate {
	gpu.mutation.SetVersion(ev)
	return gpu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (gpu *GpuPeakUpdate) SetNillableVersion(ev *enums.GpuVersion) *GpuPeakUpdate {
	if ev != nil {
		gpu.SetVersion(*ev)
	}
	return gpu
}

// SetPeak sets the "peak" field.
func (gpu *GpuPeakUpdate) SetPeak(i int) *GpuPeakUpdate {
	gpu.mutation.ResetPeak()
	gpu.mutation.SetPeak(i)
	return gpu
}

// SetNillablePeak sets the "peak" field if the given value is not nil.
func (gpu *GpuPeakUpdate) SetNillablePeak(i *int) *GpuPeakUpdate {
	if i != nil {
		gpu.SetPeak(*i)
	}
	return gpu
}

// AddPeak adds i to the "peak" field.
func (gpu *GpuPeakUpdate) AddPeak(i int) *GpuPeakUpdate {
	gpu.mutation.AddPeak(i)
	return gpu
}

// Mutation returns the GpuPeakMutation object of the builder.
func (gpu *GpuPeakUpdate) Mutation() *GpuPeakMutation {
	return gpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gpu *GpuPeakUpdate) Save(ctx context.Context) (int, error) {
	gpu.defaults()
	return withHooks(ctx, gpu.sqlSave, gpu.mutation, gpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gpu *GpuPeakUpdate) SaveX(ctx context.Context) int {
	affected, err := gpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gpu *GpuPeakUpdate) Exec(ctx context.Context) error {
	_, err := gpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gpu *GpuPeakUpdate) ExecX(ctx context.Context) {
	if err := gpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gpu *GpuPeakUpdate) defaults() {
	if _, ok := gpu.mutation.UpdatedAt(); !ok {
		v := gpupeak.UpdateDefaultUpdatedAt()
		gpu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gpu *GpuPeakUpdate) check() error {
	if v, ok := gpu.mutation.Version(); ok {
		if err := gpupeak.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`cep_ent: validator failed for field "GpuPeak.version": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gpu *GpuPeakUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GpuPeakUpdate {
	gpu.modifiers = append(gpu.modifiers, modifiers...)
	return gpu
}

func (gpu *GpuPeakUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(gpupeak.Table, gpupeak.Columns, sqlgraph.NewFieldSpec(gpupeak.FieldID, field.TypeInt64))
	if ps := gpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gpu.mutation.CreatedBy(); ok {
		_spec.SetField(gpupeak.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := gpu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(gpupeak.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := gpu.mutation.UpdatedBy(); ok {
		_spec.SetField(gpupeak.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := gpu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(gpupeak.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := gpu.mutation.UpdatedAt(); ok {
		_spec.SetField(gpupeak.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := gpu.mutation.DeletedAt(); ok {
		_spec.SetField(gpupeak.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := gpu.mutation.Version(); ok {
		_spec.SetField(gpupeak.FieldVersion, field.TypeEnum, value)
	}
	if value, ok := gpu.mutation.Peak(); ok {
		_spec.SetField(gpupeak.FieldPeak, field.TypeInt, value)
	}
	if value, ok := gpu.mutation.AddedPeak(); ok {
		_spec.AddField(gpupeak.FieldPeak, field.TypeInt, value)
	}
	_spec.AddModifiers(gpu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, gpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gpupeak.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gpu.mutation.done = true
	return n, nil
}

// GpuPeakUpdateOne is the builder for updating a single GpuPeak entity.
type GpuPeakUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *GpuPeakMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedBy sets the "created_by" field.
func (gpuo *GpuPeakUpdateOne) SetCreatedBy(i int64) *GpuPeakUpdateOne {
	gpuo.mutation.ResetCreatedBy()
	gpuo.mutation.SetCreatedBy(i)
	return gpuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (gpuo *GpuPeakUpdateOne) SetNillableCreatedBy(i *int64) *GpuPeakUpdateOne {
	if i != nil {
		gpuo.SetCreatedBy(*i)
	}
	return gpuo
}

// AddCreatedBy adds i to the "created_by" field.
func (gpuo *GpuPeakUpdateOne) AddCreatedBy(i int64) *GpuPeakUpdateOne {
	gpuo.mutation.AddCreatedBy(i)
	return gpuo
}

// SetUpdatedBy sets the "updated_by" field.
func (gpuo *GpuPeakUpdateOne) SetUpdatedBy(i int64) *GpuPeakUpdateOne {
	gpuo.mutation.ResetUpdatedBy()
	gpuo.mutation.SetUpdatedBy(i)
	return gpuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (gpuo *GpuPeakUpdateOne) SetNillableUpdatedBy(i *int64) *GpuPeakUpdateOne {
	if i != nil {
		gpuo.SetUpdatedBy(*i)
	}
	return gpuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (gpuo *GpuPeakUpdateOne) AddUpdatedBy(i int64) *GpuPeakUpdateOne {
	gpuo.mutation.AddUpdatedBy(i)
	return gpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (gpuo *GpuPeakUpdateOne) SetUpdatedAt(t time.Time) *GpuPeakUpdateOne {
	gpuo.mutation.SetUpdatedAt(t)
	return gpuo
}

// SetDeletedAt sets the "deleted_at" field.
func (gpuo *GpuPeakUpdateOne) SetDeletedAt(t time.Time) *GpuPeakUpdateOne {
	gpuo.mutation.SetDeletedAt(t)
	return gpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gpuo *GpuPeakUpdateOne) SetNillableDeletedAt(t *time.Time) *GpuPeakUpdateOne {
	if t != nil {
		gpuo.SetDeletedAt(*t)
	}
	return gpuo
}

// SetVersion sets the "version" field.
func (gpuo *GpuPeakUpdateOne) SetVersion(ev enums.GpuVersion) *GpuPeakUpdateOne {
	gpuo.mutation.SetVersion(ev)
	return gpuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (gpuo *GpuPeakUpdateOne) SetNillableVersion(ev *enums.GpuVersion) *GpuPeakUpdateOne {
	if ev != nil {
		gpuo.SetVersion(*ev)
	}
	return gpuo
}

// SetPeak sets the "peak" field.
func (gpuo *GpuPeakUpdateOne) SetPeak(i int) *GpuPeakUpdateOne {
	gpuo.mutation.ResetPeak()
	gpuo.mutation.SetPeak(i)
	return gpuo
}

// SetNillablePeak sets the "peak" field if the given value is not nil.
func (gpuo *GpuPeakUpdateOne) SetNillablePeak(i *int) *GpuPeakUpdateOne {
	if i != nil {
		gpuo.SetPeak(*i)
	}
	return gpuo
}

// AddPeak adds i to the "peak" field.
func (gpuo *GpuPeakUpdateOne) AddPeak(i int) *GpuPeakUpdateOne {
	gpuo.mutation.AddPeak(i)
	return gpuo
}

// Mutation returns the GpuPeakMutation object of the builder.
func (gpuo *GpuPeakUpdateOne) Mutation() *GpuPeakMutation {
	return gpuo.mutation
}

// Where appends a list predicates to the GpuPeakUpdate builder.
func (gpuo *GpuPeakUpdateOne) Where(ps ...predicate.GpuPeak) *GpuPeakUpdateOne {
	gpuo.mutation.Where(ps...)
	return gpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gpuo *GpuPeakUpdateOne) Select(field string, fields ...string) *GpuPeakUpdateOne {
	gpuo.fields = append([]string{field}, fields...)
	return gpuo
}

// Save executes the query and returns the updated GpuPeak entity.
func (gpuo *GpuPeakUpdateOne) Save(ctx context.Context) (*GpuPeak, error) {
	gpuo.defaults()
	return withHooks(ctx, gpuo.sqlSave, gpuo.mutation, gpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gpuo *GpuPeakUpdateOne) SaveX(ctx context.Context) *GpuPeak {
	node, err := gpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gpuo *GpuPeakUpdateOne) Exec(ctx context.Context) error {
	_, err := gpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gpuo *GpuPeakUpdateOne) ExecX(ctx context.Context) {
	if err := gpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gpuo *GpuPeakUpdateOne) defaults() {
	if _, ok := gpuo.mutation.UpdatedAt(); !ok {
		v := gpupeak.UpdateDefaultUpdatedAt()
		gpuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gpuo *GpuPeakUpdateOne) check() error {
	if v, ok := gpuo.mutation.Version(); ok {
		if err := gpupeak.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`cep_ent: validator failed for field "GpuPeak.version": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gpuo *GpuPeakUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GpuPeakUpdateOne {
	gpuo.modifiers = append(gpuo.modifiers, modifiers...)
	return gpuo
}

func (gpuo *GpuPeakUpdateOne) sqlSave(ctx context.Context) (_node *GpuPeak, err error) {
	if err := gpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(gpupeak.Table, gpupeak.Columns, sqlgraph.NewFieldSpec(gpupeak.FieldID, field.TypeInt64))
	id, ok := gpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "GpuPeak.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gpupeak.FieldID)
		for _, f := range fields {
			if !gpupeak.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != gpupeak.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gpuo.mutation.CreatedBy(); ok {
		_spec.SetField(gpupeak.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := gpuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(gpupeak.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := gpuo.mutation.UpdatedBy(); ok {
		_spec.SetField(gpupeak.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := gpuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(gpupeak.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := gpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(gpupeak.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := gpuo.mutation.DeletedAt(); ok {
		_spec.SetField(gpupeak.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := gpuo.mutation.Version(); ok {
		_spec.SetField(gpupeak.FieldVersion, field.TypeEnum, value)
	}
	if value, ok := gpuo.mutation.Peak(); ok {
		_spec.SetField(gpupeak.FieldPeak, field.TypeInt, value)
	}
	if value, ok := gpuo.mutation.AddedPeak(); ok {
		_spec.AddField(gpupeak.FieldPeak, field.TypeInt, value)
	}
	_spec.AddModifiers(gpuo.modifiers...)
	_node = &GpuPeak{config: gpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gpupeak.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gpuo.mutation.done = true
	return _node, nil
}
