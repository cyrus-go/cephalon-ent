// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/incomewalletoperate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// IncomeWalletOperateCreate is the builder for creating a IncomeWalletOperate entity.
type IncomeWalletOperateCreate struct {
	config
	mutation *IncomeWalletOperateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (iwoc *IncomeWalletOperateCreate) SetCreatedBy(i int64) *IncomeWalletOperateCreate {
	iwoc.mutation.SetCreatedBy(i)
	return iwoc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (iwoc *IncomeWalletOperateCreate) SetNillableCreatedBy(i *int64) *IncomeWalletOperateCreate {
	if i != nil {
		iwoc.SetCreatedBy(*i)
	}
	return iwoc
}

// SetUpdatedBy sets the "updated_by" field.
func (iwoc *IncomeWalletOperateCreate) SetUpdatedBy(i int64) *IncomeWalletOperateCreate {
	iwoc.mutation.SetUpdatedBy(i)
	return iwoc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (iwoc *IncomeWalletOperateCreate) SetNillableUpdatedBy(i *int64) *IncomeWalletOperateCreate {
	if i != nil {
		iwoc.SetUpdatedBy(*i)
	}
	return iwoc
}

// SetCreatedAt sets the "created_at" field.
func (iwoc *IncomeWalletOperateCreate) SetCreatedAt(t time.Time) *IncomeWalletOperateCreate {
	iwoc.mutation.SetCreatedAt(t)
	return iwoc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iwoc *IncomeWalletOperateCreate) SetNillableCreatedAt(t *time.Time) *IncomeWalletOperateCreate {
	if t != nil {
		iwoc.SetCreatedAt(*t)
	}
	return iwoc
}

// SetUpdatedAt sets the "updated_at" field.
func (iwoc *IncomeWalletOperateCreate) SetUpdatedAt(t time.Time) *IncomeWalletOperateCreate {
	iwoc.mutation.SetUpdatedAt(t)
	return iwoc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (iwoc *IncomeWalletOperateCreate) SetNillableUpdatedAt(t *time.Time) *IncomeWalletOperateCreate {
	if t != nil {
		iwoc.SetUpdatedAt(*t)
	}
	return iwoc
}

// SetDeletedAt sets the "deleted_at" field.
func (iwoc *IncomeWalletOperateCreate) SetDeletedAt(t time.Time) *IncomeWalletOperateCreate {
	iwoc.mutation.SetDeletedAt(t)
	return iwoc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iwoc *IncomeWalletOperateCreate) SetNillableDeletedAt(t *time.Time) *IncomeWalletOperateCreate {
	if t != nil {
		iwoc.SetDeletedAt(*t)
	}
	return iwoc
}

// SetUserID sets the "user_id" field.
func (iwoc *IncomeWalletOperateCreate) SetUserID(i int64) *IncomeWalletOperateCreate {
	iwoc.mutation.SetUserID(i)
	return iwoc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (iwoc *IncomeWalletOperateCreate) SetNillableUserID(i *int64) *IncomeWalletOperateCreate {
	if i != nil {
		iwoc.SetUserID(*i)
	}
	return iwoc
}

// SetPhone sets the "phone" field.
func (iwoc *IncomeWalletOperateCreate) SetPhone(s string) *IncomeWalletOperateCreate {
	iwoc.mutation.SetPhone(s)
	return iwoc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (iwoc *IncomeWalletOperateCreate) SetNillablePhone(s *string) *IncomeWalletOperateCreate {
	if s != nil {
		iwoc.SetPhone(*s)
	}
	return iwoc
}

// SetType sets the "type" field.
func (iwoc *IncomeWalletOperateCreate) SetType(ewot enums.IncomeWalletOperateType) *IncomeWalletOperateCreate {
	iwoc.mutation.SetType(ewot)
	return iwoc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (iwoc *IncomeWalletOperateCreate) SetNillableType(ewot *enums.IncomeWalletOperateType) *IncomeWalletOperateCreate {
	if ewot != nil {
		iwoc.SetType(*ewot)
	}
	return iwoc
}

// SetAmount sets the "amount" field.
func (iwoc *IncomeWalletOperateCreate) SetAmount(i int64) *IncomeWalletOperateCreate {
	iwoc.mutation.SetAmount(i)
	return iwoc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (iwoc *IncomeWalletOperateCreate) SetNillableAmount(i *int64) *IncomeWalletOperateCreate {
	if i != nil {
		iwoc.SetAmount(*i)
	}
	return iwoc
}

// SetReason sets the "reason" field.
func (iwoc *IncomeWalletOperateCreate) SetReason(s string) *IncomeWalletOperateCreate {
	iwoc.mutation.SetReason(s)
	return iwoc
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (iwoc *IncomeWalletOperateCreate) SetNillableReason(s *string) *IncomeWalletOperateCreate {
	if s != nil {
		iwoc.SetReason(*s)
	}
	return iwoc
}

// SetCurrentBalance sets the "current_balance" field.
func (iwoc *IncomeWalletOperateCreate) SetCurrentBalance(i int64) *IncomeWalletOperateCreate {
	iwoc.mutation.SetCurrentBalance(i)
	return iwoc
}

// SetNillableCurrentBalance sets the "current_balance" field if the given value is not nil.
func (iwoc *IncomeWalletOperateCreate) SetNillableCurrentBalance(i *int64) *IncomeWalletOperateCreate {
	if i != nil {
		iwoc.SetCurrentBalance(*i)
	}
	return iwoc
}

// SetLastEditedAt sets the "last_edited_at" field.
func (iwoc *IncomeWalletOperateCreate) SetLastEditedAt(t time.Time) *IncomeWalletOperateCreate {
	iwoc.mutation.SetLastEditedAt(t)
	return iwoc
}

// SetNillableLastEditedAt sets the "last_edited_at" field if the given value is not nil.
func (iwoc *IncomeWalletOperateCreate) SetNillableLastEditedAt(t *time.Time) *IncomeWalletOperateCreate {
	if t != nil {
		iwoc.SetLastEditedAt(*t)
	}
	return iwoc
}

// SetRejectReason sets the "reject_reason" field.
func (iwoc *IncomeWalletOperateCreate) SetRejectReason(s string) *IncomeWalletOperateCreate {
	iwoc.mutation.SetRejectReason(s)
	return iwoc
}

// SetNillableRejectReason sets the "reject_reason" field if the given value is not nil.
func (iwoc *IncomeWalletOperateCreate) SetNillableRejectReason(s *string) *IncomeWalletOperateCreate {
	if s != nil {
		iwoc.SetRejectReason(*s)
	}
	return iwoc
}

// SetStatus sets the "status" field.
func (iwoc *IncomeWalletOperateCreate) SetStatus(ewos enums.IncomeWalletOperateStatus) *IncomeWalletOperateCreate {
	iwoc.mutation.SetStatus(ewos)
	return iwoc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iwoc *IncomeWalletOperateCreate) SetNillableStatus(ewos *enums.IncomeWalletOperateStatus) *IncomeWalletOperateCreate {
	if ewos != nil {
		iwoc.SetStatus(*ewos)
	}
	return iwoc
}

// SetApproveUserID sets the "approve_user_id" field.
func (iwoc *IncomeWalletOperateCreate) SetApproveUserID(i int64) *IncomeWalletOperateCreate {
	iwoc.mutation.SetApproveUserID(i)
	return iwoc
}

// SetNillableApproveUserID sets the "approve_user_id" field if the given value is not nil.
func (iwoc *IncomeWalletOperateCreate) SetNillableApproveUserID(i *int64) *IncomeWalletOperateCreate {
	if i != nil {
		iwoc.SetApproveUserID(*i)
	}
	return iwoc
}

// SetID sets the "id" field.
func (iwoc *IncomeWalletOperateCreate) SetID(i int64) *IncomeWalletOperateCreate {
	iwoc.mutation.SetID(i)
	return iwoc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (iwoc *IncomeWalletOperateCreate) SetNillableID(i *int64) *IncomeWalletOperateCreate {
	if i != nil {
		iwoc.SetID(*i)
	}
	return iwoc
}

// SetUser sets the "user" edge to the User entity.
func (iwoc *IncomeWalletOperateCreate) SetUser(u *User) *IncomeWalletOperateCreate {
	return iwoc.SetUserID(u.ID)
}

// SetApproveUser sets the "approve_user" edge to the User entity.
func (iwoc *IncomeWalletOperateCreate) SetApproveUser(u *User) *IncomeWalletOperateCreate {
	return iwoc.SetApproveUserID(u.ID)
}

// Mutation returns the IncomeWalletOperateMutation object of the builder.
func (iwoc *IncomeWalletOperateCreate) Mutation() *IncomeWalletOperateMutation {
	return iwoc.mutation
}

// Save creates the IncomeWalletOperate in the database.
func (iwoc *IncomeWalletOperateCreate) Save(ctx context.Context) (*IncomeWalletOperate, error) {
	iwoc.defaults()
	return withHooks(ctx, iwoc.sqlSave, iwoc.mutation, iwoc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (iwoc *IncomeWalletOperateCreate) SaveX(ctx context.Context) *IncomeWalletOperate {
	v, err := iwoc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iwoc *IncomeWalletOperateCreate) Exec(ctx context.Context) error {
	_, err := iwoc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iwoc *IncomeWalletOperateCreate) ExecX(ctx context.Context) {
	if err := iwoc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iwoc *IncomeWalletOperateCreate) defaults() {
	if _, ok := iwoc.mutation.CreatedBy(); !ok {
		v := incomewalletoperate.DefaultCreatedBy
		iwoc.mutation.SetCreatedBy(v)
	}
	if _, ok := iwoc.mutation.UpdatedBy(); !ok {
		v := incomewalletoperate.DefaultUpdatedBy
		iwoc.mutation.SetUpdatedBy(v)
	}
	if _, ok := iwoc.mutation.CreatedAt(); !ok {
		v := incomewalletoperate.DefaultCreatedAt()
		iwoc.mutation.SetCreatedAt(v)
	}
	if _, ok := iwoc.mutation.UpdatedAt(); !ok {
		v := incomewalletoperate.DefaultUpdatedAt()
		iwoc.mutation.SetUpdatedAt(v)
	}
	if _, ok := iwoc.mutation.DeletedAt(); !ok {
		v := incomewalletoperate.DefaultDeletedAt
		iwoc.mutation.SetDeletedAt(v)
	}
	if _, ok := iwoc.mutation.UserID(); !ok {
		v := incomewalletoperate.DefaultUserID
		iwoc.mutation.SetUserID(v)
	}
	if _, ok := iwoc.mutation.Phone(); !ok {
		v := incomewalletoperate.DefaultPhone
		iwoc.mutation.SetPhone(v)
	}
	if _, ok := iwoc.mutation.GetType(); !ok {
		v := incomewalletoperate.DefaultType
		iwoc.mutation.SetType(v)
	}
	if _, ok := iwoc.mutation.Amount(); !ok {
		v := incomewalletoperate.DefaultAmount
		iwoc.mutation.SetAmount(v)
	}
	if _, ok := iwoc.mutation.Reason(); !ok {
		v := incomewalletoperate.DefaultReason
		iwoc.mutation.SetReason(v)
	}
	if _, ok := iwoc.mutation.CurrentBalance(); !ok {
		v := incomewalletoperate.DefaultCurrentBalance
		iwoc.mutation.SetCurrentBalance(v)
	}
	if _, ok := iwoc.mutation.LastEditedAt(); !ok {
		v := incomewalletoperate.DefaultLastEditedAt
		iwoc.mutation.SetLastEditedAt(v)
	}
	if _, ok := iwoc.mutation.RejectReason(); !ok {
		v := incomewalletoperate.DefaultRejectReason
		iwoc.mutation.SetRejectReason(v)
	}
	if _, ok := iwoc.mutation.Status(); !ok {
		v := incomewalletoperate.DefaultStatus
		iwoc.mutation.SetStatus(v)
	}
	if _, ok := iwoc.mutation.ApproveUserID(); !ok {
		v := incomewalletoperate.DefaultApproveUserID
		iwoc.mutation.SetApproveUserID(v)
	}
	if _, ok := iwoc.mutation.ID(); !ok {
		v := incomewalletoperate.DefaultID()
		iwoc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iwoc *IncomeWalletOperateCreate) check() error {
	if _, ok := iwoc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "IncomeWalletOperate.created_by"`)}
	}
	if _, ok := iwoc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "IncomeWalletOperate.updated_by"`)}
	}
	if _, ok := iwoc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "IncomeWalletOperate.created_at"`)}
	}
	if _, ok := iwoc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "IncomeWalletOperate.updated_at"`)}
	}
	if _, ok := iwoc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "IncomeWalletOperate.deleted_at"`)}
	}
	if _, ok := iwoc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "IncomeWalletOperate.user_id"`)}
	}
	if _, ok := iwoc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`cep_ent: missing required field "IncomeWalletOperate.phone"`)}
	}
	if _, ok := iwoc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`cep_ent: missing required field "IncomeWalletOperate.type"`)}
	}
	if v, ok := iwoc.mutation.GetType(); ok {
		if err := incomewalletoperate.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "IncomeWalletOperate.type": %w`, err)}
		}
	}
	if _, ok := iwoc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`cep_ent: missing required field "IncomeWalletOperate.amount"`)}
	}
	if _, ok := iwoc.mutation.Reason(); !ok {
		return &ValidationError{Name: "reason", err: errors.New(`cep_ent: missing required field "IncomeWalletOperate.reason"`)}
	}
	if _, ok := iwoc.mutation.CurrentBalance(); !ok {
		return &ValidationError{Name: "current_balance", err: errors.New(`cep_ent: missing required field "IncomeWalletOperate.current_balance"`)}
	}
	if _, ok := iwoc.mutation.LastEditedAt(); !ok {
		return &ValidationError{Name: "last_edited_at", err: errors.New(`cep_ent: missing required field "IncomeWalletOperate.last_edited_at"`)}
	}
	if _, ok := iwoc.mutation.RejectReason(); !ok {
		return &ValidationError{Name: "reject_reason", err: errors.New(`cep_ent: missing required field "IncomeWalletOperate.reject_reason"`)}
	}
	if _, ok := iwoc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`cep_ent: missing required field "IncomeWalletOperate.status"`)}
	}
	if v, ok := iwoc.mutation.Status(); ok {
		if err := incomewalletoperate.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "IncomeWalletOperate.status": %w`, err)}
		}
	}
	if _, ok := iwoc.mutation.ApproveUserID(); !ok {
		return &ValidationError{Name: "approve_user_id", err: errors.New(`cep_ent: missing required field "IncomeWalletOperate.approve_user_id"`)}
	}
	if _, ok := iwoc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "IncomeWalletOperate.user"`)}
	}
	if _, ok := iwoc.mutation.ApproveUserID(); !ok {
		return &ValidationError{Name: "approve_user", err: errors.New(`cep_ent: missing required edge "IncomeWalletOperate.approve_user"`)}
	}
	return nil
}

func (iwoc *IncomeWalletOperateCreate) sqlSave(ctx context.Context) (*IncomeWalletOperate, error) {
	if err := iwoc.check(); err != nil {
		return nil, err
	}
	_node, _spec := iwoc.createSpec()
	if err := sqlgraph.CreateNode(ctx, iwoc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	iwoc.mutation.id = &_node.ID
	iwoc.mutation.done = true
	return _node, nil
}

func (iwoc *IncomeWalletOperateCreate) createSpec() (*IncomeWalletOperate, *sqlgraph.CreateSpec) {
	var (
		_node = &IncomeWalletOperate{config: iwoc.config}
		_spec = sqlgraph.NewCreateSpec(incomewalletoperate.Table, sqlgraph.NewFieldSpec(incomewalletoperate.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = iwoc.conflict
	if id, ok := iwoc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := iwoc.mutation.CreatedBy(); ok {
		_spec.SetField(incomewalletoperate.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := iwoc.mutation.UpdatedBy(); ok {
		_spec.SetField(incomewalletoperate.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := iwoc.mutation.CreatedAt(); ok {
		_spec.SetField(incomewalletoperate.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := iwoc.mutation.UpdatedAt(); ok {
		_spec.SetField(incomewalletoperate.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := iwoc.mutation.DeletedAt(); ok {
		_spec.SetField(incomewalletoperate.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := iwoc.mutation.Phone(); ok {
		_spec.SetField(incomewalletoperate.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := iwoc.mutation.GetType(); ok {
		_spec.SetField(incomewalletoperate.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := iwoc.mutation.Amount(); ok {
		_spec.SetField(incomewalletoperate.FieldAmount, field.TypeInt64, value)
		_node.Amount = value
	}
	if value, ok := iwoc.mutation.Reason(); ok {
		_spec.SetField(incomewalletoperate.FieldReason, field.TypeString, value)
		_node.Reason = value
	}
	if value, ok := iwoc.mutation.CurrentBalance(); ok {
		_spec.SetField(incomewalletoperate.FieldCurrentBalance, field.TypeInt64, value)
		_node.CurrentBalance = value
	}
	if value, ok := iwoc.mutation.LastEditedAt(); ok {
		_spec.SetField(incomewalletoperate.FieldLastEditedAt, field.TypeTime, value)
		_node.LastEditedAt = value
	}
	if value, ok := iwoc.mutation.RejectReason(); ok {
		_spec.SetField(incomewalletoperate.FieldRejectReason, field.TypeString, value)
		_node.RejectReason = value
	}
	if value, ok := iwoc.mutation.Status(); ok {
		_spec.SetField(incomewalletoperate.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := iwoc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incomewalletoperate.UserTable,
			Columns: []string{incomewalletoperate.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iwoc.mutation.ApproveUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incomewalletoperate.ApproveUserTable,
			Columns: []string{incomewalletoperate.ApproveUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ApproveUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IncomeWalletOperate.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncomeWalletOperateUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (iwoc *IncomeWalletOperateCreate) OnConflict(opts ...sql.ConflictOption) *IncomeWalletOperateUpsertOne {
	iwoc.conflict = opts
	return &IncomeWalletOperateUpsertOne{
		create: iwoc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IncomeWalletOperate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iwoc *IncomeWalletOperateCreate) OnConflictColumns(columns ...string) *IncomeWalletOperateUpsertOne {
	iwoc.conflict = append(iwoc.conflict, sql.ConflictColumns(columns...))
	return &IncomeWalletOperateUpsertOne{
		create: iwoc,
	}
}

type (
	// IncomeWalletOperateUpsertOne is the builder for "upsert"-ing
	//  one IncomeWalletOperate node.
	IncomeWalletOperateUpsertOne struct {
		create *IncomeWalletOperateCreate
	}

	// IncomeWalletOperateUpsert is the "OnConflict" setter.
	IncomeWalletOperateUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *IncomeWalletOperateUpsert) SetCreatedBy(v int64) *IncomeWalletOperateUpsert {
	u.Set(incomewalletoperate.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsert) UpdateCreatedBy() *IncomeWalletOperateUpsert {
	u.SetExcluded(incomewalletoperate.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *IncomeWalletOperateUpsert) AddCreatedBy(v int64) *IncomeWalletOperateUpsert {
	u.Add(incomewalletoperate.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *IncomeWalletOperateUpsert) SetUpdatedBy(v int64) *IncomeWalletOperateUpsert {
	u.Set(incomewalletoperate.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsert) UpdateUpdatedBy() *IncomeWalletOperateUpsert {
	u.SetExcluded(incomewalletoperate.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *IncomeWalletOperateUpsert) AddUpdatedBy(v int64) *IncomeWalletOperateUpsert {
	u.Add(incomewalletoperate.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IncomeWalletOperateUpsert) SetUpdatedAt(v time.Time) *IncomeWalletOperateUpsert {
	u.Set(incomewalletoperate.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsert) UpdateUpdatedAt() *IncomeWalletOperateUpsert {
	u.SetExcluded(incomewalletoperate.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *IncomeWalletOperateUpsert) SetDeletedAt(v time.Time) *IncomeWalletOperateUpsert {
	u.Set(incomewalletoperate.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsert) UpdateDeletedAt() *IncomeWalletOperateUpsert {
	u.SetExcluded(incomewalletoperate.FieldDeletedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *IncomeWalletOperateUpsert) SetUserID(v int64) *IncomeWalletOperateUpsert {
	u.Set(incomewalletoperate.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsert) UpdateUserID() *IncomeWalletOperateUpsert {
	u.SetExcluded(incomewalletoperate.FieldUserID)
	return u
}

// SetPhone sets the "phone" field.
func (u *IncomeWalletOperateUpsert) SetPhone(v string) *IncomeWalletOperateUpsert {
	u.Set(incomewalletoperate.FieldPhone, v)
	return u
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsert) UpdatePhone() *IncomeWalletOperateUpsert {
	u.SetExcluded(incomewalletoperate.FieldPhone)
	return u
}

// SetType sets the "type" field.
func (u *IncomeWalletOperateUpsert) SetType(v enums.IncomeWalletOperateType) *IncomeWalletOperateUpsert {
	u.Set(incomewalletoperate.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsert) UpdateType() *IncomeWalletOperateUpsert {
	u.SetExcluded(incomewalletoperate.FieldType)
	return u
}

// SetAmount sets the "amount" field.
func (u *IncomeWalletOperateUpsert) SetAmount(v int64) *IncomeWalletOperateUpsert {
	u.Set(incomewalletoperate.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsert) UpdateAmount() *IncomeWalletOperateUpsert {
	u.SetExcluded(incomewalletoperate.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *IncomeWalletOperateUpsert) AddAmount(v int64) *IncomeWalletOperateUpsert {
	u.Add(incomewalletoperate.FieldAmount, v)
	return u
}

// SetReason sets the "reason" field.
func (u *IncomeWalletOperateUpsert) SetReason(v string) *IncomeWalletOperateUpsert {
	u.Set(incomewalletoperate.FieldReason, v)
	return u
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsert) UpdateReason() *IncomeWalletOperateUpsert {
	u.SetExcluded(incomewalletoperate.FieldReason)
	return u
}

// SetCurrentBalance sets the "current_balance" field.
func (u *IncomeWalletOperateUpsert) SetCurrentBalance(v int64) *IncomeWalletOperateUpsert {
	u.Set(incomewalletoperate.FieldCurrentBalance, v)
	return u
}

// UpdateCurrentBalance sets the "current_balance" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsert) UpdateCurrentBalance() *IncomeWalletOperateUpsert {
	u.SetExcluded(incomewalletoperate.FieldCurrentBalance)
	return u
}

// AddCurrentBalance adds v to the "current_balance" field.
func (u *IncomeWalletOperateUpsert) AddCurrentBalance(v int64) *IncomeWalletOperateUpsert {
	u.Add(incomewalletoperate.FieldCurrentBalance, v)
	return u
}

// SetLastEditedAt sets the "last_edited_at" field.
func (u *IncomeWalletOperateUpsert) SetLastEditedAt(v time.Time) *IncomeWalletOperateUpsert {
	u.Set(incomewalletoperate.FieldLastEditedAt, v)
	return u
}

// UpdateLastEditedAt sets the "last_edited_at" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsert) UpdateLastEditedAt() *IncomeWalletOperateUpsert {
	u.SetExcluded(incomewalletoperate.FieldLastEditedAt)
	return u
}

// SetRejectReason sets the "reject_reason" field.
func (u *IncomeWalletOperateUpsert) SetRejectReason(v string) *IncomeWalletOperateUpsert {
	u.Set(incomewalletoperate.FieldRejectReason, v)
	return u
}

// UpdateRejectReason sets the "reject_reason" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsert) UpdateRejectReason() *IncomeWalletOperateUpsert {
	u.SetExcluded(incomewalletoperate.FieldRejectReason)
	return u
}

// SetStatus sets the "status" field.
func (u *IncomeWalletOperateUpsert) SetStatus(v enums.IncomeWalletOperateStatus) *IncomeWalletOperateUpsert {
	u.Set(incomewalletoperate.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsert) UpdateStatus() *IncomeWalletOperateUpsert {
	u.SetExcluded(incomewalletoperate.FieldStatus)
	return u
}

// SetApproveUserID sets the "approve_user_id" field.
func (u *IncomeWalletOperateUpsert) SetApproveUserID(v int64) *IncomeWalletOperateUpsert {
	u.Set(incomewalletoperate.FieldApproveUserID, v)
	return u
}

// UpdateApproveUserID sets the "approve_user_id" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsert) UpdateApproveUserID() *IncomeWalletOperateUpsert {
	u.SetExcluded(incomewalletoperate.FieldApproveUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.IncomeWalletOperate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(incomewalletoperate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IncomeWalletOperateUpsertOne) UpdateNewValues() *IncomeWalletOperateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(incomewalletoperate.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(incomewalletoperate.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IncomeWalletOperate.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IncomeWalletOperateUpsertOne) Ignore() *IncomeWalletOperateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncomeWalletOperateUpsertOne) DoNothing() *IncomeWalletOperateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncomeWalletOperateCreate.OnConflict
// documentation for more info.
func (u *IncomeWalletOperateUpsertOne) Update(set func(*IncomeWalletOperateUpsert)) *IncomeWalletOperateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncomeWalletOperateUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *IncomeWalletOperateUpsertOne) SetCreatedBy(v int64) *IncomeWalletOperateUpsertOne {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *IncomeWalletOperateUpsertOne) AddCreatedBy(v int64) *IncomeWalletOperateUpsertOne {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsertOne) UpdateCreatedBy() *IncomeWalletOperateUpsertOne {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *IncomeWalletOperateUpsertOne) SetUpdatedBy(v int64) *IncomeWalletOperateUpsertOne {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *IncomeWalletOperateUpsertOne) AddUpdatedBy(v int64) *IncomeWalletOperateUpsertOne {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsertOne) UpdateUpdatedBy() *IncomeWalletOperateUpsertOne {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IncomeWalletOperateUpsertOne) SetUpdatedAt(v time.Time) *IncomeWalletOperateUpsertOne {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsertOne) UpdateUpdatedAt() *IncomeWalletOperateUpsertOne {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *IncomeWalletOperateUpsertOne) SetDeletedAt(v time.Time) *IncomeWalletOperateUpsertOne {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsertOne) UpdateDeletedAt() *IncomeWalletOperateUpsertOne {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *IncomeWalletOperateUpsertOne) SetUserID(v int64) *IncomeWalletOperateUpsertOne {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsertOne) UpdateUserID() *IncomeWalletOperateUpsertOne {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.UpdateUserID()
	})
}

// SetPhone sets the "phone" field.
func (u *IncomeWalletOperateUpsertOne) SetPhone(v string) *IncomeWalletOperateUpsertOne {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsertOne) UpdatePhone() *IncomeWalletOperateUpsertOne {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.UpdatePhone()
	})
}

// SetType sets the "type" field.
func (u *IncomeWalletOperateUpsertOne) SetType(v enums.IncomeWalletOperateType) *IncomeWalletOperateUpsertOne {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsertOne) UpdateType() *IncomeWalletOperateUpsertOne {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.UpdateType()
	})
}

// SetAmount sets the "amount" field.
func (u *IncomeWalletOperateUpsertOne) SetAmount(v int64) *IncomeWalletOperateUpsertOne {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *IncomeWalletOperateUpsertOne) AddAmount(v int64) *IncomeWalletOperateUpsertOne {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsertOne) UpdateAmount() *IncomeWalletOperateUpsertOne {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.UpdateAmount()
	})
}

// SetReason sets the "reason" field.
func (u *IncomeWalletOperateUpsertOne) SetReason(v string) *IncomeWalletOperateUpsertOne {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.SetReason(v)
	})
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsertOne) UpdateReason() *IncomeWalletOperateUpsertOne {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.UpdateReason()
	})
}

// SetCurrentBalance sets the "current_balance" field.
func (u *IncomeWalletOperateUpsertOne) SetCurrentBalance(v int64) *IncomeWalletOperateUpsertOne {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.SetCurrentBalance(v)
	})
}

// AddCurrentBalance adds v to the "current_balance" field.
func (u *IncomeWalletOperateUpsertOne) AddCurrentBalance(v int64) *IncomeWalletOperateUpsertOne {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.AddCurrentBalance(v)
	})
}

// UpdateCurrentBalance sets the "current_balance" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsertOne) UpdateCurrentBalance() *IncomeWalletOperateUpsertOne {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.UpdateCurrentBalance()
	})
}

// SetLastEditedAt sets the "last_edited_at" field.
func (u *IncomeWalletOperateUpsertOne) SetLastEditedAt(v time.Time) *IncomeWalletOperateUpsertOne {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.SetLastEditedAt(v)
	})
}

// UpdateLastEditedAt sets the "last_edited_at" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsertOne) UpdateLastEditedAt() *IncomeWalletOperateUpsertOne {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.UpdateLastEditedAt()
	})
}

// SetRejectReason sets the "reject_reason" field.
func (u *IncomeWalletOperateUpsertOne) SetRejectReason(v string) *IncomeWalletOperateUpsertOne {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.SetRejectReason(v)
	})
}

// UpdateRejectReason sets the "reject_reason" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsertOne) UpdateRejectReason() *IncomeWalletOperateUpsertOne {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.UpdateRejectReason()
	})
}

// SetStatus sets the "status" field.
func (u *IncomeWalletOperateUpsertOne) SetStatus(v enums.IncomeWalletOperateStatus) *IncomeWalletOperateUpsertOne {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsertOne) UpdateStatus() *IncomeWalletOperateUpsertOne {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.UpdateStatus()
	})
}

// SetApproveUserID sets the "approve_user_id" field.
func (u *IncomeWalletOperateUpsertOne) SetApproveUserID(v int64) *IncomeWalletOperateUpsertOne {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.SetApproveUserID(v)
	})
}

// UpdateApproveUserID sets the "approve_user_id" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsertOne) UpdateApproveUserID() *IncomeWalletOperateUpsertOne {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.UpdateApproveUserID()
	})
}

// Exec executes the query.
func (u *IncomeWalletOperateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for IncomeWalletOperateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncomeWalletOperateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IncomeWalletOperateUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IncomeWalletOperateUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IncomeWalletOperateCreateBulk is the builder for creating many IncomeWalletOperate entities in bulk.
type IncomeWalletOperateCreateBulk struct {
	config
	err      error
	builders []*IncomeWalletOperateCreate
	conflict []sql.ConflictOption
}

// Save creates the IncomeWalletOperate entities in the database.
func (iwocb *IncomeWalletOperateCreateBulk) Save(ctx context.Context) ([]*IncomeWalletOperate, error) {
	if iwocb.err != nil {
		return nil, iwocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(iwocb.builders))
	nodes := make([]*IncomeWalletOperate, len(iwocb.builders))
	mutators := make([]Mutator, len(iwocb.builders))
	for i := range iwocb.builders {
		func(i int, root context.Context) {
			builder := iwocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IncomeWalletOperateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iwocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = iwocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iwocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iwocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iwocb *IncomeWalletOperateCreateBulk) SaveX(ctx context.Context) []*IncomeWalletOperate {
	v, err := iwocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iwocb *IncomeWalletOperateCreateBulk) Exec(ctx context.Context) error {
	_, err := iwocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iwocb *IncomeWalletOperateCreateBulk) ExecX(ctx context.Context) {
	if err := iwocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IncomeWalletOperate.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncomeWalletOperateUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (iwocb *IncomeWalletOperateCreateBulk) OnConflict(opts ...sql.ConflictOption) *IncomeWalletOperateUpsertBulk {
	iwocb.conflict = opts
	return &IncomeWalletOperateUpsertBulk{
		create: iwocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IncomeWalletOperate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iwocb *IncomeWalletOperateCreateBulk) OnConflictColumns(columns ...string) *IncomeWalletOperateUpsertBulk {
	iwocb.conflict = append(iwocb.conflict, sql.ConflictColumns(columns...))
	return &IncomeWalletOperateUpsertBulk{
		create: iwocb,
	}
}

// IncomeWalletOperateUpsertBulk is the builder for "upsert"-ing
// a bulk of IncomeWalletOperate nodes.
type IncomeWalletOperateUpsertBulk struct {
	create *IncomeWalletOperateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IncomeWalletOperate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(incomewalletoperate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IncomeWalletOperateUpsertBulk) UpdateNewValues() *IncomeWalletOperateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(incomewalletoperate.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(incomewalletoperate.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IncomeWalletOperate.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IncomeWalletOperateUpsertBulk) Ignore() *IncomeWalletOperateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncomeWalletOperateUpsertBulk) DoNothing() *IncomeWalletOperateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncomeWalletOperateCreateBulk.OnConflict
// documentation for more info.
func (u *IncomeWalletOperateUpsertBulk) Update(set func(*IncomeWalletOperateUpsert)) *IncomeWalletOperateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncomeWalletOperateUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *IncomeWalletOperateUpsertBulk) SetCreatedBy(v int64) *IncomeWalletOperateUpsertBulk {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *IncomeWalletOperateUpsertBulk) AddCreatedBy(v int64) *IncomeWalletOperateUpsertBulk {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsertBulk) UpdateCreatedBy() *IncomeWalletOperateUpsertBulk {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *IncomeWalletOperateUpsertBulk) SetUpdatedBy(v int64) *IncomeWalletOperateUpsertBulk {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *IncomeWalletOperateUpsertBulk) AddUpdatedBy(v int64) *IncomeWalletOperateUpsertBulk {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsertBulk) UpdateUpdatedBy() *IncomeWalletOperateUpsertBulk {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IncomeWalletOperateUpsertBulk) SetUpdatedAt(v time.Time) *IncomeWalletOperateUpsertBulk {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsertBulk) UpdateUpdatedAt() *IncomeWalletOperateUpsertBulk {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *IncomeWalletOperateUpsertBulk) SetDeletedAt(v time.Time) *IncomeWalletOperateUpsertBulk {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsertBulk) UpdateDeletedAt() *IncomeWalletOperateUpsertBulk {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *IncomeWalletOperateUpsertBulk) SetUserID(v int64) *IncomeWalletOperateUpsertBulk {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsertBulk) UpdateUserID() *IncomeWalletOperateUpsertBulk {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.UpdateUserID()
	})
}

// SetPhone sets the "phone" field.
func (u *IncomeWalletOperateUpsertBulk) SetPhone(v string) *IncomeWalletOperateUpsertBulk {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsertBulk) UpdatePhone() *IncomeWalletOperateUpsertBulk {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.UpdatePhone()
	})
}

// SetType sets the "type" field.
func (u *IncomeWalletOperateUpsertBulk) SetType(v enums.IncomeWalletOperateType) *IncomeWalletOperateUpsertBulk {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsertBulk) UpdateType() *IncomeWalletOperateUpsertBulk {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.UpdateType()
	})
}

// SetAmount sets the "amount" field.
func (u *IncomeWalletOperateUpsertBulk) SetAmount(v int64) *IncomeWalletOperateUpsertBulk {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *IncomeWalletOperateUpsertBulk) AddAmount(v int64) *IncomeWalletOperateUpsertBulk {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsertBulk) UpdateAmount() *IncomeWalletOperateUpsertBulk {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.UpdateAmount()
	})
}

// SetReason sets the "reason" field.
func (u *IncomeWalletOperateUpsertBulk) SetReason(v string) *IncomeWalletOperateUpsertBulk {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.SetReason(v)
	})
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsertBulk) UpdateReason() *IncomeWalletOperateUpsertBulk {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.UpdateReason()
	})
}

// SetCurrentBalance sets the "current_balance" field.
func (u *IncomeWalletOperateUpsertBulk) SetCurrentBalance(v int64) *IncomeWalletOperateUpsertBulk {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.SetCurrentBalance(v)
	})
}

// AddCurrentBalance adds v to the "current_balance" field.
func (u *IncomeWalletOperateUpsertBulk) AddCurrentBalance(v int64) *IncomeWalletOperateUpsertBulk {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.AddCurrentBalance(v)
	})
}

// UpdateCurrentBalance sets the "current_balance" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsertBulk) UpdateCurrentBalance() *IncomeWalletOperateUpsertBulk {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.UpdateCurrentBalance()
	})
}

// SetLastEditedAt sets the "last_edited_at" field.
func (u *IncomeWalletOperateUpsertBulk) SetLastEditedAt(v time.Time) *IncomeWalletOperateUpsertBulk {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.SetLastEditedAt(v)
	})
}

// UpdateLastEditedAt sets the "last_edited_at" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsertBulk) UpdateLastEditedAt() *IncomeWalletOperateUpsertBulk {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.UpdateLastEditedAt()
	})
}

// SetRejectReason sets the "reject_reason" field.
func (u *IncomeWalletOperateUpsertBulk) SetRejectReason(v string) *IncomeWalletOperateUpsertBulk {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.SetRejectReason(v)
	})
}

// UpdateRejectReason sets the "reject_reason" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsertBulk) UpdateRejectReason() *IncomeWalletOperateUpsertBulk {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.UpdateRejectReason()
	})
}

// SetStatus sets the "status" field.
func (u *IncomeWalletOperateUpsertBulk) SetStatus(v enums.IncomeWalletOperateStatus) *IncomeWalletOperateUpsertBulk {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsertBulk) UpdateStatus() *IncomeWalletOperateUpsertBulk {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.UpdateStatus()
	})
}

// SetApproveUserID sets the "approve_user_id" field.
func (u *IncomeWalletOperateUpsertBulk) SetApproveUserID(v int64) *IncomeWalletOperateUpsertBulk {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.SetApproveUserID(v)
	})
}

// UpdateApproveUserID sets the "approve_user_id" field to the value that was provided on create.
func (u *IncomeWalletOperateUpsertBulk) UpdateApproveUserID() *IncomeWalletOperateUpsertBulk {
	return u.Update(func(s *IncomeWalletOperateUpsert) {
		s.UpdateApproveUserID()
	})
}

// Exec executes the query.
func (u *IncomeWalletOperateUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the IncomeWalletOperateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for IncomeWalletOperateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncomeWalletOperateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
