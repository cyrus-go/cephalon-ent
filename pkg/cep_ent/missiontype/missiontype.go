// Code generated by ent, DO NOT EDIT.

package missiontype

import (
	"cephalon-ent/pkg/enums"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the missiontype type in the database.
	Label = "mission_type"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldGpu holds the string denoting the gpu field in the database.
	FieldGpu = "gpu"
	// FieldCep holds the string denoting the cep field in the database.
	FieldCep = "cep"
	// FieldIsTime holds the string denoting the is_time field in the database.
	FieldIsTime = "is_time"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// Table holds the table name of the missiontype in the database.
	Table = "mission_types"
)

// Columns holds all SQL columns for missiontype fields.
var Columns = []string{
	FieldID,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldType,
	FieldGpu,
	FieldCep,
	FieldIsTime,
	FieldCategory,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedBy holds the default value on creation for the "created_by" field.
	DefaultCreatedBy int64
	// DefaultUpdatedBy holds the default value on creation for the "updated_by" field.
	DefaultUpdatedBy int64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt time.Time
	// DefaultCep holds the default value on creation for the "cep" field.
	DefaultCep int64
	// DefaultIsTime holds the default value on creation for the "is_time" field.
	DefaultIsTime bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
)

const DefaultType enums.MissionType = "txt2img"

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type enums.MissionType) error {
	switch _type {
	case "sd_time", "txt2img", "img2img", "jp_time", "wt_time":
		return nil
	default:
		return fmt.Errorf("missiontype: invalid enum value for type field: %q", _type)
	}
}

const DefaultGpu enums.GPU = "3070"

// GpuValidator is a validator for the "gpu" field enum values. It is called by the builders before save.
func GpuValidator(gp enums.GPU) error {
	switch gp {
	case "3070", "3070Ti", "3080", "3080Ti", "3090", "3090Ti", "4070", "4070Ti", "4080", "4080Ti", "4090", "4090Ti", "A100", "V100":
		return nil
	default:
		return fmt.Errorf("missiontype: invalid enum value for gpu field: %q", gp)
	}
}

const DefaultCategory enums.MissionCategory = "SD"

// CategoryValidator is a validator for the "category" field enum values. It is called by the builders before save.
func CategoryValidator(c enums.MissionCategory) error {
	switch c {
	case "SD", "Jupyter", "WeTTy":
		return nil
	default:
		return fmt.Errorf("missiontype: invalid enum value for category field: %q", c)
	}
}

// OrderOption defines the ordering options for the MissionType queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByGpu orders the results by the gpu field.
func ByGpu(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGpu, opts...).ToFunc()
}

// ByCep orders the results by the cep field.
func ByCep(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCep, opts...).ToFunc()
}

// ByIsTime orders the results by the is_time field.
func ByIsTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsTime, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}
