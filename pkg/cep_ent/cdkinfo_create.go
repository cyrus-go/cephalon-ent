// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/cdkinfo"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// CDKInfoCreate is the builder for creating a CDKInfo entity.
type CDKInfoCreate struct {
	config
	mutation *CDKInfoMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (cic *CDKInfoCreate) SetCreatedBy(i int64) *CDKInfoCreate {
	cic.mutation.SetCreatedBy(i)
	return cic
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cic *CDKInfoCreate) SetNillableCreatedBy(i *int64) *CDKInfoCreate {
	if i != nil {
		cic.SetCreatedBy(*i)
	}
	return cic
}

// SetUpdatedBy sets the "updated_by" field.
func (cic *CDKInfoCreate) SetUpdatedBy(i int64) *CDKInfoCreate {
	cic.mutation.SetUpdatedBy(i)
	return cic
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cic *CDKInfoCreate) SetNillableUpdatedBy(i *int64) *CDKInfoCreate {
	if i != nil {
		cic.SetUpdatedBy(*i)
	}
	return cic
}

// SetCreatedAt sets the "created_at" field.
func (cic *CDKInfoCreate) SetCreatedAt(t time.Time) *CDKInfoCreate {
	cic.mutation.SetCreatedAt(t)
	return cic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cic *CDKInfoCreate) SetNillableCreatedAt(t *time.Time) *CDKInfoCreate {
	if t != nil {
		cic.SetCreatedAt(*t)
	}
	return cic
}

// SetUpdatedAt sets the "updated_at" field.
func (cic *CDKInfoCreate) SetUpdatedAt(t time.Time) *CDKInfoCreate {
	cic.mutation.SetUpdatedAt(t)
	return cic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cic *CDKInfoCreate) SetNillableUpdatedAt(t *time.Time) *CDKInfoCreate {
	if t != nil {
		cic.SetUpdatedAt(*t)
	}
	return cic
}

// SetDeletedAt sets the "deleted_at" field.
func (cic *CDKInfoCreate) SetDeletedAt(t time.Time) *CDKInfoCreate {
	cic.mutation.SetDeletedAt(t)
	return cic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cic *CDKInfoCreate) SetNillableDeletedAt(t *time.Time) *CDKInfoCreate {
	if t != nil {
		cic.SetDeletedAt(*t)
	}
	return cic
}

// SetIssueUserID sets the "issue_user_id" field.
func (cic *CDKInfoCreate) SetIssueUserID(i int64) *CDKInfoCreate {
	cic.mutation.SetIssueUserID(i)
	return cic
}

// SetNillableIssueUserID sets the "issue_user_id" field if the given value is not nil.
func (cic *CDKInfoCreate) SetNillableIssueUserID(i *int64) *CDKInfoCreate {
	if i != nil {
		cic.SetIssueUserID(*i)
	}
	return cic
}

// SetCdkNumber sets the "cdk_number" field.
func (cic *CDKInfoCreate) SetCdkNumber(s string) *CDKInfoCreate {
	cic.mutation.SetCdkNumber(s)
	return cic
}

// SetNillableCdkNumber sets the "cdk_number" field if the given value is not nil.
func (cic *CDKInfoCreate) SetNillableCdkNumber(s *string) *CDKInfoCreate {
	if s != nil {
		cic.SetCdkNumber(*s)
	}
	return cic
}

// SetType sets the "type" field.
func (cic *CDKInfoCreate) SetType(et enums.CDKType) *CDKInfoCreate {
	cic.mutation.SetType(et)
	return cic
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cic *CDKInfoCreate) SetNillableType(et *enums.CDKType) *CDKInfoCreate {
	if et != nil {
		cic.SetType(*et)
	}
	return cic
}

// SetGetCep sets the "get_cep" field.
func (cic *CDKInfoCreate) SetGetCep(i int64) *CDKInfoCreate {
	cic.mutation.SetGetCep(i)
	return cic
}

// SetNillableGetCep sets the "get_cep" field if the given value is not nil.
func (cic *CDKInfoCreate) SetNillableGetCep(i *int64) *CDKInfoCreate {
	if i != nil {
		cic.SetGetCep(*i)
	}
	return cic
}

// SetGetTime sets the "get_time" field.
func (cic *CDKInfoCreate) SetGetTime(i int64) *CDKInfoCreate {
	cic.mutation.SetGetTime(i)
	return cic
}

// SetNillableGetTime sets the "get_time" field if the given value is not nil.
func (cic *CDKInfoCreate) SetNillableGetTime(i *int64) *CDKInfoCreate {
	if i != nil {
		cic.SetGetTime(*i)
	}
	return cic
}

// SetBillingType sets the "billing_type" field.
func (cic *CDKInfoCreate) SetBillingType(ebt enums.MissionBillingType) *CDKInfoCreate {
	cic.mutation.SetBillingType(ebt)
	return cic
}

// SetNillableBillingType sets the "billing_type" field if the given value is not nil.
func (cic *CDKInfoCreate) SetNillableBillingType(ebt *enums.MissionBillingType) *CDKInfoCreate {
	if ebt != nil {
		cic.SetBillingType(*ebt)
	}
	return cic
}

// SetExpiredAt sets the "expired_at" field.
func (cic *CDKInfoCreate) SetExpiredAt(t time.Time) *CDKInfoCreate {
	cic.mutation.SetExpiredAt(t)
	return cic
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (cic *CDKInfoCreate) SetNillableExpiredAt(t *time.Time) *CDKInfoCreate {
	if t != nil {
		cic.SetExpiredAt(*t)
	}
	return cic
}

// SetUseTimes sets the "use_times" field.
func (cic *CDKInfoCreate) SetUseTimes(i int64) *CDKInfoCreate {
	cic.mutation.SetUseTimes(i)
	return cic
}

// SetNillableUseTimes sets the "use_times" field if the given value is not nil.
func (cic *CDKInfoCreate) SetNillableUseTimes(i *int64) *CDKInfoCreate {
	if i != nil {
		cic.SetUseTimes(*i)
	}
	return cic
}

// SetStatus sets the "status" field.
func (cic *CDKInfoCreate) SetStatus(es enums.CDKStatus) *CDKInfoCreate {
	cic.mutation.SetStatus(es)
	return cic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cic *CDKInfoCreate) SetNillableStatus(es *enums.CDKStatus) *CDKInfoCreate {
	if es != nil {
		cic.SetStatus(*es)
	}
	return cic
}

// SetUseUserID sets the "use_user_id" field.
func (cic *CDKInfoCreate) SetUseUserID(i int64) *CDKInfoCreate {
	cic.mutation.SetUseUserID(i)
	return cic
}

// SetNillableUseUserID sets the "use_user_id" field if the given value is not nil.
func (cic *CDKInfoCreate) SetNillableUseUserID(i *int64) *CDKInfoCreate {
	if i != nil {
		cic.SetUseUserID(*i)
	}
	return cic
}

// SetUsedAt sets the "used_at" field.
func (cic *CDKInfoCreate) SetUsedAt(t time.Time) *CDKInfoCreate {
	cic.mutation.SetUsedAt(t)
	return cic
}

// SetNillableUsedAt sets the "used_at" field if the given value is not nil.
func (cic *CDKInfoCreate) SetNillableUsedAt(t *time.Time) *CDKInfoCreate {
	if t != nil {
		cic.SetUsedAt(*t)
	}
	return cic
}

// SetID sets the "id" field.
func (cic *CDKInfoCreate) SetID(i int64) *CDKInfoCreate {
	cic.mutation.SetID(i)
	return cic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cic *CDKInfoCreate) SetNillableID(i *int64) *CDKInfoCreate {
	if i != nil {
		cic.SetID(*i)
	}
	return cic
}

// SetIssueUser sets the "issue_user" edge to the User entity.
func (cic *CDKInfoCreate) SetIssueUser(u *User) *CDKInfoCreate {
	return cic.SetIssueUserID(u.ID)
}

// SetUseUser sets the "use_user" edge to the User entity.
func (cic *CDKInfoCreate) SetUseUser(u *User) *CDKInfoCreate {
	return cic.SetUseUserID(u.ID)
}

// Mutation returns the CDKInfoMutation object of the builder.
func (cic *CDKInfoCreate) Mutation() *CDKInfoMutation {
	return cic.mutation
}

// Save creates the CDKInfo in the database.
func (cic *CDKInfoCreate) Save(ctx context.Context) (*CDKInfo, error) {
	cic.defaults()
	return withHooks(ctx, cic.sqlSave, cic.mutation, cic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cic *CDKInfoCreate) SaveX(ctx context.Context) *CDKInfo {
	v, err := cic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cic *CDKInfoCreate) Exec(ctx context.Context) error {
	_, err := cic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cic *CDKInfoCreate) ExecX(ctx context.Context) {
	if err := cic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cic *CDKInfoCreate) defaults() {
	if _, ok := cic.mutation.CreatedBy(); !ok {
		v := cdkinfo.DefaultCreatedBy
		cic.mutation.SetCreatedBy(v)
	}
	if _, ok := cic.mutation.UpdatedBy(); !ok {
		v := cdkinfo.DefaultUpdatedBy
		cic.mutation.SetUpdatedBy(v)
	}
	if _, ok := cic.mutation.CreatedAt(); !ok {
		v := cdkinfo.DefaultCreatedAt()
		cic.mutation.SetCreatedAt(v)
	}
	if _, ok := cic.mutation.UpdatedAt(); !ok {
		v := cdkinfo.DefaultUpdatedAt()
		cic.mutation.SetUpdatedAt(v)
	}
	if _, ok := cic.mutation.DeletedAt(); !ok {
		v := cdkinfo.DefaultDeletedAt
		cic.mutation.SetDeletedAt(v)
	}
	if _, ok := cic.mutation.IssueUserID(); !ok {
		v := cdkinfo.DefaultIssueUserID
		cic.mutation.SetIssueUserID(v)
	}
	if _, ok := cic.mutation.CdkNumber(); !ok {
		v := cdkinfo.DefaultCdkNumber
		cic.mutation.SetCdkNumber(v)
	}
	if _, ok := cic.mutation.GetType(); !ok {
		v := cdkinfo.DefaultType
		cic.mutation.SetType(v)
	}
	if _, ok := cic.mutation.GetCep(); !ok {
		v := cdkinfo.DefaultGetCep
		cic.mutation.SetGetCep(v)
	}
	if _, ok := cic.mutation.GetTime(); !ok {
		v := cdkinfo.DefaultGetTime
		cic.mutation.SetGetTime(v)
	}
	if _, ok := cic.mutation.BillingType(); !ok {
		v := cdkinfo.DefaultBillingType
		cic.mutation.SetBillingType(v)
	}
	if _, ok := cic.mutation.ExpiredAt(); !ok {
		v := cdkinfo.DefaultExpiredAt
		cic.mutation.SetExpiredAt(v)
	}
	if _, ok := cic.mutation.UseTimes(); !ok {
		v := cdkinfo.DefaultUseTimes
		cic.mutation.SetUseTimes(v)
	}
	if _, ok := cic.mutation.Status(); !ok {
		v := cdkinfo.DefaultStatus
		cic.mutation.SetStatus(v)
	}
	if _, ok := cic.mutation.UseUserID(); !ok {
		v := cdkinfo.DefaultUseUserID
		cic.mutation.SetUseUserID(v)
	}
	if _, ok := cic.mutation.UsedAt(); !ok {
		v := cdkinfo.DefaultUsedAt
		cic.mutation.SetUsedAt(v)
	}
	if _, ok := cic.mutation.ID(); !ok {
		v := cdkinfo.DefaultID()
		cic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cic *CDKInfoCreate) check() error {
	if _, ok := cic.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "CDKInfo.created_by"`)}
	}
	if _, ok := cic.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "CDKInfo.updated_by"`)}
	}
	if _, ok := cic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "CDKInfo.created_at"`)}
	}
	if _, ok := cic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "CDKInfo.updated_at"`)}
	}
	if _, ok := cic.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "CDKInfo.deleted_at"`)}
	}
	if _, ok := cic.mutation.IssueUserID(); !ok {
		return &ValidationError{Name: "issue_user_id", err: errors.New(`cep_ent: missing required field "CDKInfo.issue_user_id"`)}
	}
	if _, ok := cic.mutation.CdkNumber(); !ok {
		return &ValidationError{Name: "cdk_number", err: errors.New(`cep_ent: missing required field "CDKInfo.cdk_number"`)}
	}
	if _, ok := cic.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`cep_ent: missing required field "CDKInfo.type"`)}
	}
	if v, ok := cic.mutation.GetType(); ok {
		if err := cdkinfo.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "CDKInfo.type": %w`, err)}
		}
	}
	if _, ok := cic.mutation.GetCep(); !ok {
		return &ValidationError{Name: "get_cep", err: errors.New(`cep_ent: missing required field "CDKInfo.get_cep"`)}
	}
	if _, ok := cic.mutation.GetTime(); !ok {
		return &ValidationError{Name: "get_time", err: errors.New(`cep_ent: missing required field "CDKInfo.get_time"`)}
	}
	if _, ok := cic.mutation.BillingType(); !ok {
		return &ValidationError{Name: "billing_type", err: errors.New(`cep_ent: missing required field "CDKInfo.billing_type"`)}
	}
	if v, ok := cic.mutation.BillingType(); ok {
		if err := cdkinfo.BillingTypeValidator(v); err != nil {
			return &ValidationError{Name: "billing_type", err: fmt.Errorf(`cep_ent: validator failed for field "CDKInfo.billing_type": %w`, err)}
		}
	}
	if _, ok := cic.mutation.UseTimes(); !ok {
		return &ValidationError{Name: "use_times", err: errors.New(`cep_ent: missing required field "CDKInfo.use_times"`)}
	}
	if _, ok := cic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`cep_ent: missing required field "CDKInfo.status"`)}
	}
	if v, ok := cic.mutation.Status(); ok {
		if err := cdkinfo.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "CDKInfo.status": %w`, err)}
		}
	}
	if _, ok := cic.mutation.UseUserID(); !ok {
		return &ValidationError{Name: "use_user_id", err: errors.New(`cep_ent: missing required field "CDKInfo.use_user_id"`)}
	}
	if _, ok := cic.mutation.IssueUserID(); !ok {
		return &ValidationError{Name: "issue_user", err: errors.New(`cep_ent: missing required edge "CDKInfo.issue_user"`)}
	}
	if _, ok := cic.mutation.UseUserID(); !ok {
		return &ValidationError{Name: "use_user", err: errors.New(`cep_ent: missing required edge "CDKInfo.use_user"`)}
	}
	return nil
}

func (cic *CDKInfoCreate) sqlSave(ctx context.Context) (*CDKInfo, error) {
	if err := cic.check(); err != nil {
		return nil, err
	}
	_node, _spec := cic.createSpec()
	if err := sqlgraph.CreateNode(ctx, cic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	cic.mutation.id = &_node.ID
	cic.mutation.done = true
	return _node, nil
}

func (cic *CDKInfoCreate) createSpec() (*CDKInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &CDKInfo{config: cic.config}
		_spec = sqlgraph.NewCreateSpec(cdkinfo.Table, sqlgraph.NewFieldSpec(cdkinfo.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = cic.conflict
	if id, ok := cic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cic.mutation.CreatedBy(); ok {
		_spec.SetField(cdkinfo.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := cic.mutation.UpdatedBy(); ok {
		_spec.SetField(cdkinfo.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := cic.mutation.CreatedAt(); ok {
		_spec.SetField(cdkinfo.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cic.mutation.UpdatedAt(); ok {
		_spec.SetField(cdkinfo.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cic.mutation.DeletedAt(); ok {
		_spec.SetField(cdkinfo.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := cic.mutation.CdkNumber(); ok {
		_spec.SetField(cdkinfo.FieldCdkNumber, field.TypeString, value)
		_node.CdkNumber = value
	}
	if value, ok := cic.mutation.GetType(); ok {
		_spec.SetField(cdkinfo.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := cic.mutation.GetCep(); ok {
		_spec.SetField(cdkinfo.FieldGetCep, field.TypeInt64, value)
		_node.GetCep = value
	}
	if value, ok := cic.mutation.GetTime(); ok {
		_spec.SetField(cdkinfo.FieldGetTime, field.TypeInt64, value)
		_node.GetTime = value
	}
	if value, ok := cic.mutation.BillingType(); ok {
		_spec.SetField(cdkinfo.FieldBillingType, field.TypeEnum, value)
		_node.BillingType = value
	}
	if value, ok := cic.mutation.ExpiredAt(); ok {
		_spec.SetField(cdkinfo.FieldExpiredAt, field.TypeTime, value)
		_node.ExpiredAt = &value
	}
	if value, ok := cic.mutation.UseTimes(); ok {
		_spec.SetField(cdkinfo.FieldUseTimes, field.TypeInt64, value)
		_node.UseTimes = value
	}
	if value, ok := cic.mutation.Status(); ok {
		_spec.SetField(cdkinfo.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := cic.mutation.UsedAt(); ok {
		_spec.SetField(cdkinfo.FieldUsedAt, field.TypeTime, value)
		_node.UsedAt = &value
	}
	if nodes := cic.mutation.IssueUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cdkinfo.IssueUserTable,
			Columns: []string{cdkinfo.IssueUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.IssueUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cic.mutation.UseUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cdkinfo.UseUserTable,
			Columns: []string{cdkinfo.UseUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UseUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CDKInfo.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CDKInfoUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (cic *CDKInfoCreate) OnConflict(opts ...sql.ConflictOption) *CDKInfoUpsertOne {
	cic.conflict = opts
	return &CDKInfoUpsertOne{
		create: cic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CDKInfo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cic *CDKInfoCreate) OnConflictColumns(columns ...string) *CDKInfoUpsertOne {
	cic.conflict = append(cic.conflict, sql.ConflictColumns(columns...))
	return &CDKInfoUpsertOne{
		create: cic,
	}
}

type (
	// CDKInfoUpsertOne is the builder for "upsert"-ing
	//  one CDKInfo node.
	CDKInfoUpsertOne struct {
		create *CDKInfoCreate
	}

	// CDKInfoUpsert is the "OnConflict" setter.
	CDKInfoUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *CDKInfoUpsert) SetCreatedBy(v int64) *CDKInfoUpsert {
	u.Set(cdkinfo.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *CDKInfoUpsert) UpdateCreatedBy() *CDKInfoUpsert {
	u.SetExcluded(cdkinfo.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *CDKInfoUpsert) AddCreatedBy(v int64) *CDKInfoUpsert {
	u.Add(cdkinfo.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *CDKInfoUpsert) SetUpdatedBy(v int64) *CDKInfoUpsert {
	u.Set(cdkinfo.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *CDKInfoUpsert) UpdateUpdatedBy() *CDKInfoUpsert {
	u.SetExcluded(cdkinfo.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *CDKInfoUpsert) AddUpdatedBy(v int64) *CDKInfoUpsert {
	u.Add(cdkinfo.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CDKInfoUpsert) SetUpdatedAt(v time.Time) *CDKInfoUpsert {
	u.Set(cdkinfo.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CDKInfoUpsert) UpdateUpdatedAt() *CDKInfoUpsert {
	u.SetExcluded(cdkinfo.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CDKInfoUpsert) SetDeletedAt(v time.Time) *CDKInfoUpsert {
	u.Set(cdkinfo.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CDKInfoUpsert) UpdateDeletedAt() *CDKInfoUpsert {
	u.SetExcluded(cdkinfo.FieldDeletedAt)
	return u
}

// SetIssueUserID sets the "issue_user_id" field.
func (u *CDKInfoUpsert) SetIssueUserID(v int64) *CDKInfoUpsert {
	u.Set(cdkinfo.FieldIssueUserID, v)
	return u
}

// UpdateIssueUserID sets the "issue_user_id" field to the value that was provided on create.
func (u *CDKInfoUpsert) UpdateIssueUserID() *CDKInfoUpsert {
	u.SetExcluded(cdkinfo.FieldIssueUserID)
	return u
}

// SetCdkNumber sets the "cdk_number" field.
func (u *CDKInfoUpsert) SetCdkNumber(v string) *CDKInfoUpsert {
	u.Set(cdkinfo.FieldCdkNumber, v)
	return u
}

// UpdateCdkNumber sets the "cdk_number" field to the value that was provided on create.
func (u *CDKInfoUpsert) UpdateCdkNumber() *CDKInfoUpsert {
	u.SetExcluded(cdkinfo.FieldCdkNumber)
	return u
}

// SetType sets the "type" field.
func (u *CDKInfoUpsert) SetType(v enums.CDKType) *CDKInfoUpsert {
	u.Set(cdkinfo.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CDKInfoUpsert) UpdateType() *CDKInfoUpsert {
	u.SetExcluded(cdkinfo.FieldType)
	return u
}

// SetGetCep sets the "get_cep" field.
func (u *CDKInfoUpsert) SetGetCep(v int64) *CDKInfoUpsert {
	u.Set(cdkinfo.FieldGetCep, v)
	return u
}

// UpdateGetCep sets the "get_cep" field to the value that was provided on create.
func (u *CDKInfoUpsert) UpdateGetCep() *CDKInfoUpsert {
	u.SetExcluded(cdkinfo.FieldGetCep)
	return u
}

// AddGetCep adds v to the "get_cep" field.
func (u *CDKInfoUpsert) AddGetCep(v int64) *CDKInfoUpsert {
	u.Add(cdkinfo.FieldGetCep, v)
	return u
}

// SetGetTime sets the "get_time" field.
func (u *CDKInfoUpsert) SetGetTime(v int64) *CDKInfoUpsert {
	u.Set(cdkinfo.FieldGetTime, v)
	return u
}

// UpdateGetTime sets the "get_time" field to the value that was provided on create.
func (u *CDKInfoUpsert) UpdateGetTime() *CDKInfoUpsert {
	u.SetExcluded(cdkinfo.FieldGetTime)
	return u
}

// AddGetTime adds v to the "get_time" field.
func (u *CDKInfoUpsert) AddGetTime(v int64) *CDKInfoUpsert {
	u.Add(cdkinfo.FieldGetTime, v)
	return u
}

// SetBillingType sets the "billing_type" field.
func (u *CDKInfoUpsert) SetBillingType(v enums.MissionBillingType) *CDKInfoUpsert {
	u.Set(cdkinfo.FieldBillingType, v)
	return u
}

// UpdateBillingType sets the "billing_type" field to the value that was provided on create.
func (u *CDKInfoUpsert) UpdateBillingType() *CDKInfoUpsert {
	u.SetExcluded(cdkinfo.FieldBillingType)
	return u
}

// SetExpiredAt sets the "expired_at" field.
func (u *CDKInfoUpsert) SetExpiredAt(v time.Time) *CDKInfoUpsert {
	u.Set(cdkinfo.FieldExpiredAt, v)
	return u
}

// UpdateExpiredAt sets the "expired_at" field to the value that was provided on create.
func (u *CDKInfoUpsert) UpdateExpiredAt() *CDKInfoUpsert {
	u.SetExcluded(cdkinfo.FieldExpiredAt)
	return u
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (u *CDKInfoUpsert) ClearExpiredAt() *CDKInfoUpsert {
	u.SetNull(cdkinfo.FieldExpiredAt)
	return u
}

// SetUseTimes sets the "use_times" field.
func (u *CDKInfoUpsert) SetUseTimes(v int64) *CDKInfoUpsert {
	u.Set(cdkinfo.FieldUseTimes, v)
	return u
}

// UpdateUseTimes sets the "use_times" field to the value that was provided on create.
func (u *CDKInfoUpsert) UpdateUseTimes() *CDKInfoUpsert {
	u.SetExcluded(cdkinfo.FieldUseTimes)
	return u
}

// AddUseTimes adds v to the "use_times" field.
func (u *CDKInfoUpsert) AddUseTimes(v int64) *CDKInfoUpsert {
	u.Add(cdkinfo.FieldUseTimes, v)
	return u
}

// SetStatus sets the "status" field.
func (u *CDKInfoUpsert) SetStatus(v enums.CDKStatus) *CDKInfoUpsert {
	u.Set(cdkinfo.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CDKInfoUpsert) UpdateStatus() *CDKInfoUpsert {
	u.SetExcluded(cdkinfo.FieldStatus)
	return u
}

// SetUseUserID sets the "use_user_id" field.
func (u *CDKInfoUpsert) SetUseUserID(v int64) *CDKInfoUpsert {
	u.Set(cdkinfo.FieldUseUserID, v)
	return u
}

// UpdateUseUserID sets the "use_user_id" field to the value that was provided on create.
func (u *CDKInfoUpsert) UpdateUseUserID() *CDKInfoUpsert {
	u.SetExcluded(cdkinfo.FieldUseUserID)
	return u
}

// SetUsedAt sets the "used_at" field.
func (u *CDKInfoUpsert) SetUsedAt(v time.Time) *CDKInfoUpsert {
	u.Set(cdkinfo.FieldUsedAt, v)
	return u
}

// UpdateUsedAt sets the "used_at" field to the value that was provided on create.
func (u *CDKInfoUpsert) UpdateUsedAt() *CDKInfoUpsert {
	u.SetExcluded(cdkinfo.FieldUsedAt)
	return u
}

// ClearUsedAt clears the value of the "used_at" field.
func (u *CDKInfoUpsert) ClearUsedAt() *CDKInfoUpsert {
	u.SetNull(cdkinfo.FieldUsedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CDKInfo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(cdkinfo.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CDKInfoUpsertOne) UpdateNewValues() *CDKInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(cdkinfo.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(cdkinfo.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CDKInfo.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CDKInfoUpsertOne) Ignore() *CDKInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CDKInfoUpsertOne) DoNothing() *CDKInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CDKInfoCreate.OnConflict
// documentation for more info.
func (u *CDKInfoUpsertOne) Update(set func(*CDKInfoUpsert)) *CDKInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CDKInfoUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *CDKInfoUpsertOne) SetCreatedBy(v int64) *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *CDKInfoUpsertOne) AddCreatedBy(v int64) *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *CDKInfoUpsertOne) UpdateCreatedBy() *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *CDKInfoUpsertOne) SetUpdatedBy(v int64) *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *CDKInfoUpsertOne) AddUpdatedBy(v int64) *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *CDKInfoUpsertOne) UpdateUpdatedBy() *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CDKInfoUpsertOne) SetUpdatedAt(v time.Time) *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CDKInfoUpsertOne) UpdateUpdatedAt() *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CDKInfoUpsertOne) SetDeletedAt(v time.Time) *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CDKInfoUpsertOne) UpdateDeletedAt() *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetIssueUserID sets the "issue_user_id" field.
func (u *CDKInfoUpsertOne) SetIssueUserID(v int64) *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.SetIssueUserID(v)
	})
}

// UpdateIssueUserID sets the "issue_user_id" field to the value that was provided on create.
func (u *CDKInfoUpsertOne) UpdateIssueUserID() *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.UpdateIssueUserID()
	})
}

// SetCdkNumber sets the "cdk_number" field.
func (u *CDKInfoUpsertOne) SetCdkNumber(v string) *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.SetCdkNumber(v)
	})
}

// UpdateCdkNumber sets the "cdk_number" field to the value that was provided on create.
func (u *CDKInfoUpsertOne) UpdateCdkNumber() *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.UpdateCdkNumber()
	})
}

// SetType sets the "type" field.
func (u *CDKInfoUpsertOne) SetType(v enums.CDKType) *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CDKInfoUpsertOne) UpdateType() *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.UpdateType()
	})
}

// SetGetCep sets the "get_cep" field.
func (u *CDKInfoUpsertOne) SetGetCep(v int64) *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.SetGetCep(v)
	})
}

// AddGetCep adds v to the "get_cep" field.
func (u *CDKInfoUpsertOne) AddGetCep(v int64) *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.AddGetCep(v)
	})
}

// UpdateGetCep sets the "get_cep" field to the value that was provided on create.
func (u *CDKInfoUpsertOne) UpdateGetCep() *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.UpdateGetCep()
	})
}

// SetGetTime sets the "get_time" field.
func (u *CDKInfoUpsertOne) SetGetTime(v int64) *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.SetGetTime(v)
	})
}

// AddGetTime adds v to the "get_time" field.
func (u *CDKInfoUpsertOne) AddGetTime(v int64) *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.AddGetTime(v)
	})
}

// UpdateGetTime sets the "get_time" field to the value that was provided on create.
func (u *CDKInfoUpsertOne) UpdateGetTime() *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.UpdateGetTime()
	})
}

// SetBillingType sets the "billing_type" field.
func (u *CDKInfoUpsertOne) SetBillingType(v enums.MissionBillingType) *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.SetBillingType(v)
	})
}

// UpdateBillingType sets the "billing_type" field to the value that was provided on create.
func (u *CDKInfoUpsertOne) UpdateBillingType() *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.UpdateBillingType()
	})
}

// SetExpiredAt sets the "expired_at" field.
func (u *CDKInfoUpsertOne) SetExpiredAt(v time.Time) *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.SetExpiredAt(v)
	})
}

// UpdateExpiredAt sets the "expired_at" field to the value that was provided on create.
func (u *CDKInfoUpsertOne) UpdateExpiredAt() *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.UpdateExpiredAt()
	})
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (u *CDKInfoUpsertOne) ClearExpiredAt() *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.ClearExpiredAt()
	})
}

// SetUseTimes sets the "use_times" field.
func (u *CDKInfoUpsertOne) SetUseTimes(v int64) *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.SetUseTimes(v)
	})
}

// AddUseTimes adds v to the "use_times" field.
func (u *CDKInfoUpsertOne) AddUseTimes(v int64) *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.AddUseTimes(v)
	})
}

// UpdateUseTimes sets the "use_times" field to the value that was provided on create.
func (u *CDKInfoUpsertOne) UpdateUseTimes() *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.UpdateUseTimes()
	})
}

// SetStatus sets the "status" field.
func (u *CDKInfoUpsertOne) SetStatus(v enums.CDKStatus) *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CDKInfoUpsertOne) UpdateStatus() *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.UpdateStatus()
	})
}

// SetUseUserID sets the "use_user_id" field.
func (u *CDKInfoUpsertOne) SetUseUserID(v int64) *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.SetUseUserID(v)
	})
}

// UpdateUseUserID sets the "use_user_id" field to the value that was provided on create.
func (u *CDKInfoUpsertOne) UpdateUseUserID() *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.UpdateUseUserID()
	})
}

// SetUsedAt sets the "used_at" field.
func (u *CDKInfoUpsertOne) SetUsedAt(v time.Time) *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.SetUsedAt(v)
	})
}

// UpdateUsedAt sets the "used_at" field to the value that was provided on create.
func (u *CDKInfoUpsertOne) UpdateUsedAt() *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.UpdateUsedAt()
	})
}

// ClearUsedAt clears the value of the "used_at" field.
func (u *CDKInfoUpsertOne) ClearUsedAt() *CDKInfoUpsertOne {
	return u.Update(func(s *CDKInfoUpsert) {
		s.ClearUsedAt()
	})
}

// Exec executes the query.
func (u *CDKInfoUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for CDKInfoCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CDKInfoUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CDKInfoUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CDKInfoUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CDKInfoCreateBulk is the builder for creating many CDKInfo entities in bulk.
type CDKInfoCreateBulk struct {
	config
	err      error
	builders []*CDKInfoCreate
	conflict []sql.ConflictOption
}

// Save creates the CDKInfo entities in the database.
func (cicb *CDKInfoCreateBulk) Save(ctx context.Context) ([]*CDKInfo, error) {
	if cicb.err != nil {
		return nil, cicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cicb.builders))
	nodes := make([]*CDKInfo, len(cicb.builders))
	mutators := make([]Mutator, len(cicb.builders))
	for i := range cicb.builders {
		func(i int, root context.Context) {
			builder := cicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CDKInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cicb *CDKInfoCreateBulk) SaveX(ctx context.Context) []*CDKInfo {
	v, err := cicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cicb *CDKInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := cicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cicb *CDKInfoCreateBulk) ExecX(ctx context.Context) {
	if err := cicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CDKInfo.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CDKInfoUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (cicb *CDKInfoCreateBulk) OnConflict(opts ...sql.ConflictOption) *CDKInfoUpsertBulk {
	cicb.conflict = opts
	return &CDKInfoUpsertBulk{
		create: cicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CDKInfo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cicb *CDKInfoCreateBulk) OnConflictColumns(columns ...string) *CDKInfoUpsertBulk {
	cicb.conflict = append(cicb.conflict, sql.ConflictColumns(columns...))
	return &CDKInfoUpsertBulk{
		create: cicb,
	}
}

// CDKInfoUpsertBulk is the builder for "upsert"-ing
// a bulk of CDKInfo nodes.
type CDKInfoUpsertBulk struct {
	create *CDKInfoCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CDKInfo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(cdkinfo.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CDKInfoUpsertBulk) UpdateNewValues() *CDKInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(cdkinfo.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(cdkinfo.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CDKInfo.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CDKInfoUpsertBulk) Ignore() *CDKInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CDKInfoUpsertBulk) DoNothing() *CDKInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CDKInfoCreateBulk.OnConflict
// documentation for more info.
func (u *CDKInfoUpsertBulk) Update(set func(*CDKInfoUpsert)) *CDKInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CDKInfoUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *CDKInfoUpsertBulk) SetCreatedBy(v int64) *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *CDKInfoUpsertBulk) AddCreatedBy(v int64) *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *CDKInfoUpsertBulk) UpdateCreatedBy() *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *CDKInfoUpsertBulk) SetUpdatedBy(v int64) *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *CDKInfoUpsertBulk) AddUpdatedBy(v int64) *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *CDKInfoUpsertBulk) UpdateUpdatedBy() *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CDKInfoUpsertBulk) SetUpdatedAt(v time.Time) *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CDKInfoUpsertBulk) UpdateUpdatedAt() *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CDKInfoUpsertBulk) SetDeletedAt(v time.Time) *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CDKInfoUpsertBulk) UpdateDeletedAt() *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetIssueUserID sets the "issue_user_id" field.
func (u *CDKInfoUpsertBulk) SetIssueUserID(v int64) *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.SetIssueUserID(v)
	})
}

// UpdateIssueUserID sets the "issue_user_id" field to the value that was provided on create.
func (u *CDKInfoUpsertBulk) UpdateIssueUserID() *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.UpdateIssueUserID()
	})
}

// SetCdkNumber sets the "cdk_number" field.
func (u *CDKInfoUpsertBulk) SetCdkNumber(v string) *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.SetCdkNumber(v)
	})
}

// UpdateCdkNumber sets the "cdk_number" field to the value that was provided on create.
func (u *CDKInfoUpsertBulk) UpdateCdkNumber() *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.UpdateCdkNumber()
	})
}

// SetType sets the "type" field.
func (u *CDKInfoUpsertBulk) SetType(v enums.CDKType) *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CDKInfoUpsertBulk) UpdateType() *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.UpdateType()
	})
}

// SetGetCep sets the "get_cep" field.
func (u *CDKInfoUpsertBulk) SetGetCep(v int64) *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.SetGetCep(v)
	})
}

// AddGetCep adds v to the "get_cep" field.
func (u *CDKInfoUpsertBulk) AddGetCep(v int64) *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.AddGetCep(v)
	})
}

// UpdateGetCep sets the "get_cep" field to the value that was provided on create.
func (u *CDKInfoUpsertBulk) UpdateGetCep() *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.UpdateGetCep()
	})
}

// SetGetTime sets the "get_time" field.
func (u *CDKInfoUpsertBulk) SetGetTime(v int64) *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.SetGetTime(v)
	})
}

// AddGetTime adds v to the "get_time" field.
func (u *CDKInfoUpsertBulk) AddGetTime(v int64) *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.AddGetTime(v)
	})
}

// UpdateGetTime sets the "get_time" field to the value that was provided on create.
func (u *CDKInfoUpsertBulk) UpdateGetTime() *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.UpdateGetTime()
	})
}

// SetBillingType sets the "billing_type" field.
func (u *CDKInfoUpsertBulk) SetBillingType(v enums.MissionBillingType) *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.SetBillingType(v)
	})
}

// UpdateBillingType sets the "billing_type" field to the value that was provided on create.
func (u *CDKInfoUpsertBulk) UpdateBillingType() *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.UpdateBillingType()
	})
}

// SetExpiredAt sets the "expired_at" field.
func (u *CDKInfoUpsertBulk) SetExpiredAt(v time.Time) *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.SetExpiredAt(v)
	})
}

// UpdateExpiredAt sets the "expired_at" field to the value that was provided on create.
func (u *CDKInfoUpsertBulk) UpdateExpiredAt() *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.UpdateExpiredAt()
	})
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (u *CDKInfoUpsertBulk) ClearExpiredAt() *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.ClearExpiredAt()
	})
}

// SetUseTimes sets the "use_times" field.
func (u *CDKInfoUpsertBulk) SetUseTimes(v int64) *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.SetUseTimes(v)
	})
}

// AddUseTimes adds v to the "use_times" field.
func (u *CDKInfoUpsertBulk) AddUseTimes(v int64) *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.AddUseTimes(v)
	})
}

// UpdateUseTimes sets the "use_times" field to the value that was provided on create.
func (u *CDKInfoUpsertBulk) UpdateUseTimes() *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.UpdateUseTimes()
	})
}

// SetStatus sets the "status" field.
func (u *CDKInfoUpsertBulk) SetStatus(v enums.CDKStatus) *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CDKInfoUpsertBulk) UpdateStatus() *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.UpdateStatus()
	})
}

// SetUseUserID sets the "use_user_id" field.
func (u *CDKInfoUpsertBulk) SetUseUserID(v int64) *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.SetUseUserID(v)
	})
}

// UpdateUseUserID sets the "use_user_id" field to the value that was provided on create.
func (u *CDKInfoUpsertBulk) UpdateUseUserID() *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.UpdateUseUserID()
	})
}

// SetUsedAt sets the "used_at" field.
func (u *CDKInfoUpsertBulk) SetUsedAt(v time.Time) *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.SetUsedAt(v)
	})
}

// UpdateUsedAt sets the "used_at" field to the value that was provided on create.
func (u *CDKInfoUpsertBulk) UpdateUsedAt() *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.UpdateUsedAt()
	})
}

// ClearUsedAt clears the value of the "used_at" field.
func (u *CDKInfoUpsertBulk) ClearUsedAt() *CDKInfoUpsertBulk {
	return u.Update(func(s *CDKInfoUpsert) {
		s.ClearUsedAt()
	})
}

// Exec executes the query.
func (u *CDKInfoUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the CDKInfoCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for CDKInfoCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CDKInfoUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
