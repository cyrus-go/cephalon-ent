// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/artwork"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
)

// 艺术作品，参与投票等逻辑；Artwork
type Artwork struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建者 ID
	CreatedBy int64 `json:"created_by,string"`
	// 更新者 ID
	UpdatedBy int64 `json:"updated_by,string"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// 作品名称
	Name string `json:"name"`
	// 作品链接
	URL string `json:"url"`
	// 作者的用户 id
	AuthorID int64 `json:"author_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ArtworkQuery when eager-loading is set.
	Edges        ArtworkEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ArtworkEdges holds the relations/edges for other nodes in the graph.
type ArtworkEdges struct {
	// Author holds the value of the author edge.
	Author *User `json:"author,omitempty"`
	// ArtworkLikes holds the value of the artwork_likes edge.
	ArtworkLikes []*ArtworkLike `json:"artwork_likes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AuthorOrErr returns the Author value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ArtworkEdges) AuthorOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Author == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Author, nil
	}
	return nil, &NotLoadedError{edge: "author"}
}

// ArtworkLikesOrErr returns the ArtworkLikes value or an error if the edge
// was not loaded in eager-loading.
func (e ArtworkEdges) ArtworkLikesOrErr() ([]*ArtworkLike, error) {
	if e.loadedTypes[1] {
		return e.ArtworkLikes, nil
	}
	return nil, &NotLoadedError{edge: "artwork_likes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Artwork) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case artwork.FieldID, artwork.FieldCreatedBy, artwork.FieldUpdatedBy, artwork.FieldAuthorID:
			values[i] = new(sql.NullInt64)
		case artwork.FieldName, artwork.FieldURL:
			values[i] = new(sql.NullString)
		case artwork.FieldCreatedAt, artwork.FieldUpdatedAt, artwork.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Artwork fields.
func (a *Artwork) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case artwork.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int64(value.Int64)
		case artwork.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				a.CreatedBy = value.Int64
			}
		case artwork.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				a.UpdatedBy = value.Int64
			}
		case artwork.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case artwork.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case artwork.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				a.DeletedAt = value.Time
			}
		case artwork.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case artwork.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				a.URL = value.String
			}
		case artwork.FieldAuthorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field author_id", values[i])
			} else if value.Valid {
				a.AuthorID = value.Int64
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Artwork.
// This includes values selected through modifiers, order, etc.
func (a *Artwork) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryAuthor queries the "author" edge of the Artwork entity.
func (a *Artwork) QueryAuthor() *UserQuery {
	return NewArtworkClient(a.config).QueryAuthor(a)
}

// QueryArtworkLikes queries the "artwork_likes" edge of the Artwork entity.
func (a *Artwork) QueryArtworkLikes() *ArtworkLikeQuery {
	return NewArtworkClient(a.config).QueryArtworkLikes(a)
}

// Update returns a builder for updating this Artwork.
// Note that you need to call Artwork.Unwrap() before calling this method if this Artwork
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Artwork) Update() *ArtworkUpdateOne {
	return NewArtworkClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Artwork entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Artwork) Unwrap() *Artwork {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: Artwork is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Artwork) String() string {
	var builder strings.Builder
	builder.WriteString("Artwork(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", a.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", a.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(a.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(a.URL)
	builder.WriteString(", ")
	builder.WriteString("author_id=")
	builder.WriteString(fmt.Sprintf("%v", a.AuthorID))
	builder.WriteByte(')')
	return builder.String()
}

// Artworks is a parsable slice of Artwork.
type Artworks []*Artwork
