// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/campaign"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/campaignorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/costbill"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/rechargeorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
)

// CampaignOrderCreate is the builder for creating a CampaignOrder entity.
type CampaignOrderCreate struct {
	config
	mutation *CampaignOrderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (coc *CampaignOrderCreate) SetCreatedBy(i int64) *CampaignOrderCreate {
	coc.mutation.SetCreatedBy(i)
	return coc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (coc *CampaignOrderCreate) SetNillableCreatedBy(i *int64) *CampaignOrderCreate {
	if i != nil {
		coc.SetCreatedBy(*i)
	}
	return coc
}

// SetUpdatedBy sets the "updated_by" field.
func (coc *CampaignOrderCreate) SetUpdatedBy(i int64) *CampaignOrderCreate {
	coc.mutation.SetUpdatedBy(i)
	return coc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (coc *CampaignOrderCreate) SetNillableUpdatedBy(i *int64) *CampaignOrderCreate {
	if i != nil {
		coc.SetUpdatedBy(*i)
	}
	return coc
}

// SetCreatedAt sets the "created_at" field.
func (coc *CampaignOrderCreate) SetCreatedAt(t time.Time) *CampaignOrderCreate {
	coc.mutation.SetCreatedAt(t)
	return coc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (coc *CampaignOrderCreate) SetNillableCreatedAt(t *time.Time) *CampaignOrderCreate {
	if t != nil {
		coc.SetCreatedAt(*t)
	}
	return coc
}

// SetUpdatedAt sets the "updated_at" field.
func (coc *CampaignOrderCreate) SetUpdatedAt(t time.Time) *CampaignOrderCreate {
	coc.mutation.SetUpdatedAt(t)
	return coc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (coc *CampaignOrderCreate) SetNillableUpdatedAt(t *time.Time) *CampaignOrderCreate {
	if t != nil {
		coc.SetUpdatedAt(*t)
	}
	return coc
}

// SetDeletedAt sets the "deleted_at" field.
func (coc *CampaignOrderCreate) SetDeletedAt(t time.Time) *CampaignOrderCreate {
	coc.mutation.SetDeletedAt(t)
	return coc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (coc *CampaignOrderCreate) SetNillableDeletedAt(t *time.Time) *CampaignOrderCreate {
	if t != nil {
		coc.SetDeletedAt(*t)
	}
	return coc
}

// SetUserID sets the "user_id" field.
func (coc *CampaignOrderCreate) SetUserID(i int64) *CampaignOrderCreate {
	coc.mutation.SetUserID(i)
	return coc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (coc *CampaignOrderCreate) SetNillableUserID(i *int64) *CampaignOrderCreate {
	if i != nil {
		coc.SetUserID(*i)
	}
	return coc
}

// SetCampaignID sets the "campaign_id" field.
func (coc *CampaignOrderCreate) SetCampaignID(i int64) *CampaignOrderCreate {
	coc.mutation.SetCampaignID(i)
	return coc
}

// SetNillableCampaignID sets the "campaign_id" field if the given value is not nil.
func (coc *CampaignOrderCreate) SetNillableCampaignID(i *int64) *CampaignOrderCreate {
	if i != nil {
		coc.SetCampaignID(*i)
	}
	return coc
}

// SetID sets the "id" field.
func (coc *CampaignOrderCreate) SetID(i int64) *CampaignOrderCreate {
	coc.mutation.SetID(i)
	return coc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (coc *CampaignOrderCreate) SetNillableID(i *int64) *CampaignOrderCreate {
	if i != nil {
		coc.SetID(*i)
	}
	return coc
}

// SetUser sets the "user" edge to the User entity.
func (coc *CampaignOrderCreate) SetUser(u *User) *CampaignOrderCreate {
	return coc.SetUserID(u.ID)
}

// SetCampaign sets the "campaign" edge to the Campaign entity.
func (coc *CampaignOrderCreate) SetCampaign(c *Campaign) *CampaignOrderCreate {
	return coc.SetCampaignID(c.ID)
}

// AddCostBillIDs adds the "cost_bills" edge to the CostBill entity by IDs.
func (coc *CampaignOrderCreate) AddCostBillIDs(ids ...int64) *CampaignOrderCreate {
	coc.mutation.AddCostBillIDs(ids...)
	return coc
}

// AddCostBills adds the "cost_bills" edges to the CostBill entity.
func (coc *CampaignOrderCreate) AddCostBills(c ...*CostBill) *CampaignOrderCreate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return coc.AddCostBillIDs(ids...)
}

// SetRechargeOrderID sets the "recharge_order" edge to the RechargeOrder entity by ID.
func (coc *CampaignOrderCreate) SetRechargeOrderID(id int64) *CampaignOrderCreate {
	coc.mutation.SetRechargeOrderID(id)
	return coc
}

// SetNillableRechargeOrderID sets the "recharge_order" edge to the RechargeOrder entity by ID if the given value is not nil.
func (coc *CampaignOrderCreate) SetNillableRechargeOrderID(id *int64) *CampaignOrderCreate {
	if id != nil {
		coc = coc.SetRechargeOrderID(*id)
	}
	return coc
}

// SetRechargeOrder sets the "recharge_order" edge to the RechargeOrder entity.
func (coc *CampaignOrderCreate) SetRechargeOrder(r *RechargeOrder) *CampaignOrderCreate {
	return coc.SetRechargeOrderID(r.ID)
}

// Mutation returns the CampaignOrderMutation object of the builder.
func (coc *CampaignOrderCreate) Mutation() *CampaignOrderMutation {
	return coc.mutation
}

// Save creates the CampaignOrder in the database.
func (coc *CampaignOrderCreate) Save(ctx context.Context) (*CampaignOrder, error) {
	coc.defaults()
	return withHooks(ctx, coc.sqlSave, coc.mutation, coc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (coc *CampaignOrderCreate) SaveX(ctx context.Context) *CampaignOrder {
	v, err := coc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (coc *CampaignOrderCreate) Exec(ctx context.Context) error {
	_, err := coc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (coc *CampaignOrderCreate) ExecX(ctx context.Context) {
	if err := coc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (coc *CampaignOrderCreate) defaults() {
	if _, ok := coc.mutation.CreatedBy(); !ok {
		v := campaignorder.DefaultCreatedBy
		coc.mutation.SetCreatedBy(v)
	}
	if _, ok := coc.mutation.UpdatedBy(); !ok {
		v := campaignorder.DefaultUpdatedBy
		coc.mutation.SetUpdatedBy(v)
	}
	if _, ok := coc.mutation.CreatedAt(); !ok {
		v := campaignorder.DefaultCreatedAt()
		coc.mutation.SetCreatedAt(v)
	}
	if _, ok := coc.mutation.UpdatedAt(); !ok {
		v := campaignorder.DefaultUpdatedAt()
		coc.mutation.SetUpdatedAt(v)
	}
	if _, ok := coc.mutation.DeletedAt(); !ok {
		v := campaignorder.DefaultDeletedAt
		coc.mutation.SetDeletedAt(v)
	}
	if _, ok := coc.mutation.UserID(); !ok {
		v := campaignorder.DefaultUserID
		coc.mutation.SetUserID(v)
	}
	if _, ok := coc.mutation.CampaignID(); !ok {
		v := campaignorder.DefaultCampaignID
		coc.mutation.SetCampaignID(v)
	}
	if _, ok := coc.mutation.ID(); !ok {
		v := campaignorder.DefaultID()
		coc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (coc *CampaignOrderCreate) check() error {
	if _, ok := coc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "CampaignOrder.created_by"`)}
	}
	if _, ok := coc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "CampaignOrder.updated_by"`)}
	}
	if _, ok := coc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "CampaignOrder.created_at"`)}
	}
	if _, ok := coc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "CampaignOrder.updated_at"`)}
	}
	if _, ok := coc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "CampaignOrder.deleted_at"`)}
	}
	if _, ok := coc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "CampaignOrder.user_id"`)}
	}
	if _, ok := coc.mutation.CampaignID(); !ok {
		return &ValidationError{Name: "campaign_id", err: errors.New(`cep_ent: missing required field "CampaignOrder.campaign_id"`)}
	}
	if _, ok := coc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "CampaignOrder.user"`)}
	}
	if _, ok := coc.mutation.CampaignID(); !ok {
		return &ValidationError{Name: "campaign", err: errors.New(`cep_ent: missing required edge "CampaignOrder.campaign"`)}
	}
	return nil
}

func (coc *CampaignOrderCreate) sqlSave(ctx context.Context) (*CampaignOrder, error) {
	if err := coc.check(); err != nil {
		return nil, err
	}
	_node, _spec := coc.createSpec()
	if err := sqlgraph.CreateNode(ctx, coc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	coc.mutation.id = &_node.ID
	coc.mutation.done = true
	return _node, nil
}

func (coc *CampaignOrderCreate) createSpec() (*CampaignOrder, *sqlgraph.CreateSpec) {
	var (
		_node = &CampaignOrder{config: coc.config}
		_spec = sqlgraph.NewCreateSpec(campaignorder.Table, sqlgraph.NewFieldSpec(campaignorder.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = coc.conflict
	if id, ok := coc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := coc.mutation.CreatedBy(); ok {
		_spec.SetField(campaignorder.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := coc.mutation.UpdatedBy(); ok {
		_spec.SetField(campaignorder.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := coc.mutation.CreatedAt(); ok {
		_spec.SetField(campaignorder.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := coc.mutation.UpdatedAt(); ok {
		_spec.SetField(campaignorder.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := coc.mutation.DeletedAt(); ok {
		_spec.SetField(campaignorder.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if nodes := coc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   campaignorder.UserTable,
			Columns: []string{campaignorder.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := coc.mutation.CampaignIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   campaignorder.CampaignTable,
			Columns: []string{campaignorder.CampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CampaignID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := coc.mutation.CostBillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaignorder.CostBillsTable,
			Columns: []string{campaignorder.CostBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costbill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := coc.mutation.RechargeOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   campaignorder.RechargeOrderTable,
			Columns: []string{campaignorder.RechargeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rechargeorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CampaignOrder.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CampaignOrderUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (coc *CampaignOrderCreate) OnConflict(opts ...sql.ConflictOption) *CampaignOrderUpsertOne {
	coc.conflict = opts
	return &CampaignOrderUpsertOne{
		create: coc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CampaignOrder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (coc *CampaignOrderCreate) OnConflictColumns(columns ...string) *CampaignOrderUpsertOne {
	coc.conflict = append(coc.conflict, sql.ConflictColumns(columns...))
	return &CampaignOrderUpsertOne{
		create: coc,
	}
}

type (
	// CampaignOrderUpsertOne is the builder for "upsert"-ing
	//  one CampaignOrder node.
	CampaignOrderUpsertOne struct {
		create *CampaignOrderCreate
	}

	// CampaignOrderUpsert is the "OnConflict" setter.
	CampaignOrderUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *CampaignOrderUpsert) SetCreatedBy(v int64) *CampaignOrderUpsert {
	u.Set(campaignorder.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *CampaignOrderUpsert) UpdateCreatedBy() *CampaignOrderUpsert {
	u.SetExcluded(campaignorder.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *CampaignOrderUpsert) AddCreatedBy(v int64) *CampaignOrderUpsert {
	u.Add(campaignorder.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *CampaignOrderUpsert) SetUpdatedBy(v int64) *CampaignOrderUpsert {
	u.Set(campaignorder.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *CampaignOrderUpsert) UpdateUpdatedBy() *CampaignOrderUpsert {
	u.SetExcluded(campaignorder.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *CampaignOrderUpsert) AddUpdatedBy(v int64) *CampaignOrderUpsert {
	u.Add(campaignorder.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CampaignOrderUpsert) SetUpdatedAt(v time.Time) *CampaignOrderUpsert {
	u.Set(campaignorder.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CampaignOrderUpsert) UpdateUpdatedAt() *CampaignOrderUpsert {
	u.SetExcluded(campaignorder.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CampaignOrderUpsert) SetDeletedAt(v time.Time) *CampaignOrderUpsert {
	u.Set(campaignorder.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CampaignOrderUpsert) UpdateDeletedAt() *CampaignOrderUpsert {
	u.SetExcluded(campaignorder.FieldDeletedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *CampaignOrderUpsert) SetUserID(v int64) *CampaignOrderUpsert {
	u.Set(campaignorder.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CampaignOrderUpsert) UpdateUserID() *CampaignOrderUpsert {
	u.SetExcluded(campaignorder.FieldUserID)
	return u
}

// SetCampaignID sets the "campaign_id" field.
func (u *CampaignOrderUpsert) SetCampaignID(v int64) *CampaignOrderUpsert {
	u.Set(campaignorder.FieldCampaignID, v)
	return u
}

// UpdateCampaignID sets the "campaign_id" field to the value that was provided on create.
func (u *CampaignOrderUpsert) UpdateCampaignID() *CampaignOrderUpsert {
	u.SetExcluded(campaignorder.FieldCampaignID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CampaignOrder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(campaignorder.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CampaignOrderUpsertOne) UpdateNewValues() *CampaignOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(campaignorder.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(campaignorder.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CampaignOrder.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CampaignOrderUpsertOne) Ignore() *CampaignOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CampaignOrderUpsertOne) DoNothing() *CampaignOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CampaignOrderCreate.OnConflict
// documentation for more info.
func (u *CampaignOrderUpsertOne) Update(set func(*CampaignOrderUpsert)) *CampaignOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CampaignOrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *CampaignOrderUpsertOne) SetCreatedBy(v int64) *CampaignOrderUpsertOne {
	return u.Update(func(s *CampaignOrderUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *CampaignOrderUpsertOne) AddCreatedBy(v int64) *CampaignOrderUpsertOne {
	return u.Update(func(s *CampaignOrderUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *CampaignOrderUpsertOne) UpdateCreatedBy() *CampaignOrderUpsertOne {
	return u.Update(func(s *CampaignOrderUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *CampaignOrderUpsertOne) SetUpdatedBy(v int64) *CampaignOrderUpsertOne {
	return u.Update(func(s *CampaignOrderUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *CampaignOrderUpsertOne) AddUpdatedBy(v int64) *CampaignOrderUpsertOne {
	return u.Update(func(s *CampaignOrderUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *CampaignOrderUpsertOne) UpdateUpdatedBy() *CampaignOrderUpsertOne {
	return u.Update(func(s *CampaignOrderUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CampaignOrderUpsertOne) SetUpdatedAt(v time.Time) *CampaignOrderUpsertOne {
	return u.Update(func(s *CampaignOrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CampaignOrderUpsertOne) UpdateUpdatedAt() *CampaignOrderUpsertOne {
	return u.Update(func(s *CampaignOrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CampaignOrderUpsertOne) SetDeletedAt(v time.Time) *CampaignOrderUpsertOne {
	return u.Update(func(s *CampaignOrderUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CampaignOrderUpsertOne) UpdateDeletedAt() *CampaignOrderUpsertOne {
	return u.Update(func(s *CampaignOrderUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *CampaignOrderUpsertOne) SetUserID(v int64) *CampaignOrderUpsertOne {
	return u.Update(func(s *CampaignOrderUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CampaignOrderUpsertOne) UpdateUserID() *CampaignOrderUpsertOne {
	return u.Update(func(s *CampaignOrderUpsert) {
		s.UpdateUserID()
	})
}

// SetCampaignID sets the "campaign_id" field.
func (u *CampaignOrderUpsertOne) SetCampaignID(v int64) *CampaignOrderUpsertOne {
	return u.Update(func(s *CampaignOrderUpsert) {
		s.SetCampaignID(v)
	})
}

// UpdateCampaignID sets the "campaign_id" field to the value that was provided on create.
func (u *CampaignOrderUpsertOne) UpdateCampaignID() *CampaignOrderUpsertOne {
	return u.Update(func(s *CampaignOrderUpsert) {
		s.UpdateCampaignID()
	})
}

// Exec executes the query.
func (u *CampaignOrderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for CampaignOrderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CampaignOrderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CampaignOrderUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CampaignOrderUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CampaignOrderCreateBulk is the builder for creating many CampaignOrder entities in bulk.
type CampaignOrderCreateBulk struct {
	config
	err      error
	builders []*CampaignOrderCreate
	conflict []sql.ConflictOption
}

// Save creates the CampaignOrder entities in the database.
func (cocb *CampaignOrderCreateBulk) Save(ctx context.Context) ([]*CampaignOrder, error) {
	if cocb.err != nil {
		return nil, cocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cocb.builders))
	nodes := make([]*CampaignOrder, len(cocb.builders))
	mutators := make([]Mutator, len(cocb.builders))
	for i := range cocb.builders {
		func(i int, root context.Context) {
			builder := cocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CampaignOrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cocb *CampaignOrderCreateBulk) SaveX(ctx context.Context) []*CampaignOrder {
	v, err := cocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cocb *CampaignOrderCreateBulk) Exec(ctx context.Context) error {
	_, err := cocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cocb *CampaignOrderCreateBulk) ExecX(ctx context.Context) {
	if err := cocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CampaignOrder.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CampaignOrderUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (cocb *CampaignOrderCreateBulk) OnConflict(opts ...sql.ConflictOption) *CampaignOrderUpsertBulk {
	cocb.conflict = opts
	return &CampaignOrderUpsertBulk{
		create: cocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CampaignOrder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cocb *CampaignOrderCreateBulk) OnConflictColumns(columns ...string) *CampaignOrderUpsertBulk {
	cocb.conflict = append(cocb.conflict, sql.ConflictColumns(columns...))
	return &CampaignOrderUpsertBulk{
		create: cocb,
	}
}

// CampaignOrderUpsertBulk is the builder for "upsert"-ing
// a bulk of CampaignOrder nodes.
type CampaignOrderUpsertBulk struct {
	create *CampaignOrderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CampaignOrder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(campaignorder.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CampaignOrderUpsertBulk) UpdateNewValues() *CampaignOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(campaignorder.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(campaignorder.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CampaignOrder.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CampaignOrderUpsertBulk) Ignore() *CampaignOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CampaignOrderUpsertBulk) DoNothing() *CampaignOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CampaignOrderCreateBulk.OnConflict
// documentation for more info.
func (u *CampaignOrderUpsertBulk) Update(set func(*CampaignOrderUpsert)) *CampaignOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CampaignOrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *CampaignOrderUpsertBulk) SetCreatedBy(v int64) *CampaignOrderUpsertBulk {
	return u.Update(func(s *CampaignOrderUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *CampaignOrderUpsertBulk) AddCreatedBy(v int64) *CampaignOrderUpsertBulk {
	return u.Update(func(s *CampaignOrderUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *CampaignOrderUpsertBulk) UpdateCreatedBy() *CampaignOrderUpsertBulk {
	return u.Update(func(s *CampaignOrderUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *CampaignOrderUpsertBulk) SetUpdatedBy(v int64) *CampaignOrderUpsertBulk {
	return u.Update(func(s *CampaignOrderUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *CampaignOrderUpsertBulk) AddUpdatedBy(v int64) *CampaignOrderUpsertBulk {
	return u.Update(func(s *CampaignOrderUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *CampaignOrderUpsertBulk) UpdateUpdatedBy() *CampaignOrderUpsertBulk {
	return u.Update(func(s *CampaignOrderUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CampaignOrderUpsertBulk) SetUpdatedAt(v time.Time) *CampaignOrderUpsertBulk {
	return u.Update(func(s *CampaignOrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CampaignOrderUpsertBulk) UpdateUpdatedAt() *CampaignOrderUpsertBulk {
	return u.Update(func(s *CampaignOrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CampaignOrderUpsertBulk) SetDeletedAt(v time.Time) *CampaignOrderUpsertBulk {
	return u.Update(func(s *CampaignOrderUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CampaignOrderUpsertBulk) UpdateDeletedAt() *CampaignOrderUpsertBulk {
	return u.Update(func(s *CampaignOrderUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *CampaignOrderUpsertBulk) SetUserID(v int64) *CampaignOrderUpsertBulk {
	return u.Update(func(s *CampaignOrderUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CampaignOrderUpsertBulk) UpdateUserID() *CampaignOrderUpsertBulk {
	return u.Update(func(s *CampaignOrderUpsert) {
		s.UpdateUserID()
	})
}

// SetCampaignID sets the "campaign_id" field.
func (u *CampaignOrderUpsertBulk) SetCampaignID(v int64) *CampaignOrderUpsertBulk {
	return u.Update(func(s *CampaignOrderUpsert) {
		s.SetCampaignID(v)
	})
}

// UpdateCampaignID sets the "campaign_id" field to the value that was provided on create.
func (u *CampaignOrderUpsertBulk) UpdateCampaignID() *CampaignOrderUpsertBulk {
	return u.Update(func(s *CampaignOrderUpsert) {
		s.UpdateCampaignID()
	})
}

// Exec executes the query.
func (u *CampaignOrderUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the CampaignOrderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for CampaignOrderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CampaignOrderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
