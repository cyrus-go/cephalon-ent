// Code generated by ent, DO NOT EDIT.

package vxsocial

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the vxsocial type in the database.
	Label = "vx_social"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldAppID holds the string denoting the app_id field in the database.
	FieldAppID = "app_id"
	// FieldOpenID holds the string denoting the open_id field in the database.
	FieldOpenID = "open_id"
	// FieldUnionID holds the string denoting the union_id field in the database.
	FieldUnionID = "union_id"
	// FieldScope holds the string denoting the scope field in the database.
	FieldScope = "scope"
	// FieldSessionKey holds the string denoting the session_key field in the database.
	FieldSessionKey = "session_key"
	// FieldAccessToken holds the string denoting the access_token field in the database.
	FieldAccessToken = "access_token"
	// FieldRefreshToken holds the string denoting the refresh_token field in the database.
	FieldRefreshToken = "refresh_token"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeRechargeOrders holds the string denoting the recharge_orders edge name in mutations.
	EdgeRechargeOrders = "recharge_orders"
	// Table holds the table name of the vxsocial in the database.
	Table = "vx_socials"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "vx_socials"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// RechargeOrdersTable is the table that holds the recharge_orders relation/edge.
	RechargeOrdersTable = "recharge_orders"
	// RechargeOrdersInverseTable is the table name for the RechargeOrder entity.
	// It exists in this package in order to avoid circular dependency with the "rechargeorder" package.
	RechargeOrdersInverseTable = "recharge_orders"
	// RechargeOrdersColumn is the table column denoting the recharge_orders relation/edge.
	RechargeOrdersColumn = "social_id"
)

// Columns holds all SQL columns for vxsocial fields.
var Columns = []string{
	FieldID,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldAppID,
	FieldOpenID,
	FieldUnionID,
	FieldScope,
	FieldSessionKey,
	FieldAccessToken,
	FieldRefreshToken,
	FieldUserID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedBy holds the default value on creation for the "created_by" field.
	DefaultCreatedBy int64
	// DefaultUpdatedBy holds the default value on creation for the "updated_by" field.
	DefaultUpdatedBy int64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt time.Time
	// DefaultAppID holds the default value on creation for the "app_id" field.
	DefaultAppID string
	// DefaultOpenID holds the default value on creation for the "open_id" field.
	DefaultOpenID string
	// DefaultUnionID holds the default value on creation for the "union_id" field.
	DefaultUnionID string
	// DefaultSessionKey holds the default value on creation for the "session_key" field.
	DefaultSessionKey string
	// DefaultAccessToken holds the default value on creation for the "access_token" field.
	DefaultAccessToken string
	// DefaultRefreshToken holds the default value on creation for the "refresh_token" field.
	DefaultRefreshToken string
	// DefaultUserID holds the default value on creation for the "user_id" field.
	DefaultUserID int64
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
)

// Scope defines the type for the "scope" enum field.
type Scope string

// ScopeBase is the default value of the Scope enum.
const DefaultScope = ScopeBase

// Scope values.
const (
	ScopeBase Scope = "base"
)

func (s Scope) String() string {
	return string(s)
}

// ScopeValidator is a validator for the "scope" field enum values. It is called by the builders before save.
func ScopeValidator(s Scope) error {
	switch s {
	case ScopeBase:
		return nil
	default:
		return fmt.Errorf("vxsocial: invalid enum value for scope field: %q", s)
	}
}

// OrderOption defines the ordering options for the VXSocial queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByAppID orders the results by the app_id field.
func ByAppID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppID, opts...).ToFunc()
}

// ByOpenID orders the results by the open_id field.
func ByOpenID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOpenID, opts...).ToFunc()
}

// ByUnionID orders the results by the union_id field.
func ByUnionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnionID, opts...).ToFunc()
}

// ByScope orders the results by the scope field.
func ByScope(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScope, opts...).ToFunc()
}

// BySessionKey orders the results by the session_key field.
func BySessionKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSessionKey, opts...).ToFunc()
}

// ByAccessToken orders the results by the access_token field.
func ByAccessToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccessToken, opts...).ToFunc()
}

// ByRefreshToken orders the results by the refresh_token field.
func ByRefreshToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefreshToken, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByRechargeOrdersCount orders the results by recharge_orders count.
func ByRechargeOrdersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRechargeOrdersStep(), opts...)
	}
}

// ByRechargeOrders orders the results by recharge_orders terms.
func ByRechargeOrders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRechargeOrdersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newRechargeOrdersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RechargeOrdersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RechargeOrdersTable, RechargeOrdersColumn),
	)
}
