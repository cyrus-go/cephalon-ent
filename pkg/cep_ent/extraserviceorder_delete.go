// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/extraserviceorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// ExtraServiceOrderDelete is the builder for deleting a ExtraServiceOrder entity.
type ExtraServiceOrderDelete struct {
	config
	hooks    []Hook
	mutation *ExtraServiceOrderMutation
}

// Where appends a list predicates to the ExtraServiceOrderDelete builder.
func (esod *ExtraServiceOrderDelete) Where(ps ...predicate.ExtraServiceOrder) *ExtraServiceOrderDelete {
	esod.mutation.Where(ps...)
	return esod
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (esod *ExtraServiceOrderDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, esod.sqlExec, esod.mutation, esod.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (esod *ExtraServiceOrderDelete) ExecX(ctx context.Context) int {
	n, err := esod.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (esod *ExtraServiceOrderDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(extraserviceorder.Table, sqlgraph.NewFieldSpec(extraserviceorder.FieldID, field.TypeInt64))
	if ps := esod.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, esod.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	esod.mutation.done = true
	return affected, err
}

// ExtraServiceOrderDeleteOne is the builder for deleting a single ExtraServiceOrder entity.
type ExtraServiceOrderDeleteOne struct {
	esod *ExtraServiceOrderDelete
}

// Where appends a list predicates to the ExtraServiceOrderDelete builder.
func (esodo *ExtraServiceOrderDeleteOne) Where(ps ...predicate.ExtraServiceOrder) *ExtraServiceOrderDeleteOne {
	esodo.esod.mutation.Where(ps...)
	return esodo
}

// Exec executes the deletion query.
func (esodo *ExtraServiceOrderDeleteOne) Exec(ctx context.Context) error {
	n, err := esodo.esod.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{extraserviceorder.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (esodo *ExtraServiceOrderDeleteOne) ExecX(ctx context.Context) {
	if err := esodo.Exec(ctx); err != nil {
		panic(err)
	}
}
