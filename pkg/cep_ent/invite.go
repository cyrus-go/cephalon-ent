// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/campaign"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/invite"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
)

// 邀请码表，可横行拓展，为邀请码赋予额外功能；具备第一条数据，默认邀请码，id 为 1
type Invite struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int64 `json:"created_by"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int64 `json:"updated_by"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at"`
	// 邀请码
	InviteCode string `json:"invite_code"`
	// 通过此邀请码分享能获得的收益
	ShareCep int64 `json:"share_cep"`
	// 通过此邀请码注册能获得的收益
	RegCep int64 `json:"reg_cep"`
	// 通过此邀请码邀请用户注册并首次充值能获得的收益
	FirstRechargeCep int64 `json:"first_recharge_cep"`
	// 邀请码类型（可以用来区分不同的活动）
	Type string `json:"type"`
	// 外键用户 id
	UserID int64 `json:"user_id"`
	// 外键活动 id
	CampaignID int64 `json:"campaign_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InviteQuery when eager-loading is set.
	Edges        InviteEdges `json:"edges"`
	selectValues sql.SelectValues
}

// InviteEdges holds the relations/edges for other nodes in the graph.
type InviteEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Campaign holds the value of the campaign edge.
	Campaign *Campaign `json:"campaign,omitempty"`
	// Bills holds the value of the bills edge.
	Bills []*Bill `json:"bills,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InviteEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// CampaignOrErr returns the Campaign value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InviteEdges) CampaignOrErr() (*Campaign, error) {
	if e.loadedTypes[1] {
		if e.Campaign == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: campaign.Label}
		}
		return e.Campaign, nil
	}
	return nil, &NotLoadedError{edge: "campaign"}
}

// BillsOrErr returns the Bills value or an error if the edge
// was not loaded in eager-loading.
func (e InviteEdges) BillsOrErr() ([]*Bill, error) {
	if e.loadedTypes[2] {
		return e.Bills, nil
	}
	return nil, &NotLoadedError{edge: "bills"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Invite) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case invite.FieldID, invite.FieldCreatedBy, invite.FieldUpdatedBy, invite.FieldShareCep, invite.FieldRegCep, invite.FieldFirstRechargeCep, invite.FieldUserID, invite.FieldCampaignID:
			values[i] = new(sql.NullInt64)
		case invite.FieldInviteCode, invite.FieldType:
			values[i] = new(sql.NullString)
		case invite.FieldCreatedAt, invite.FieldUpdatedAt, invite.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Invite fields.
func (i *Invite) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case invite.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int64(value.Int64)
		case invite.FieldCreatedBy:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[j])
			} else if value.Valid {
				i.CreatedBy = value.Int64
			}
		case invite.FieldUpdatedBy:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[j])
			} else if value.Valid {
				i.UpdatedBy = value.Int64
			}
		case invite.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case invite.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[j])
			} else if value.Valid {
				i.UpdatedAt = value.Time
			}
		case invite.FieldDeletedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[j])
			} else if value.Valid {
				i.DeletedAt = value.Time
			}
		case invite.FieldInviteCode:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invite_code", values[j])
			} else if value.Valid {
				i.InviteCode = value.String
			}
		case invite.FieldShareCep:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field share_cep", values[j])
			} else if value.Valid {
				i.ShareCep = value.Int64
			}
		case invite.FieldRegCep:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reg_cep", values[j])
			} else if value.Valid {
				i.RegCep = value.Int64
			}
		case invite.FieldFirstRechargeCep:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field first_recharge_cep", values[j])
			} else if value.Valid {
				i.FirstRechargeCep = value.Int64
			}
		case invite.FieldType:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[j])
			} else if value.Valid {
				i.Type = value.String
			}
		case invite.FieldUserID:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[j])
			} else if value.Valid {
				i.UserID = value.Int64
			}
		case invite.FieldCampaignID:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field campaign_id", values[j])
			} else if value.Valid {
				i.CampaignID = value.Int64
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Invite.
// This includes values selected through modifiers, order, etc.
func (i *Invite) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Invite entity.
func (i *Invite) QueryUser() *UserQuery {
	return NewInviteClient(i.config).QueryUser(i)
}

// QueryCampaign queries the "campaign" edge of the Invite entity.
func (i *Invite) QueryCampaign() *CampaignQuery {
	return NewInviteClient(i.config).QueryCampaign(i)
}

// QueryBills queries the "bills" edge of the Invite entity.
func (i *Invite) QueryBills() *BillQuery {
	return NewInviteClient(i.config).QueryBills(i)
}

// Update returns a builder for updating this Invite.
// Note that you need to call Invite.Unwrap() before calling this method if this Invite
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Invite) Update() *InviteUpdateOne {
	return NewInviteClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Invite entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Invite) Unwrap() *Invite {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: Invite is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Invite) String() string {
	var builder strings.Builder
	builder.WriteString("Invite(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", i.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", i.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(i.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(i.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("invite_code=")
	builder.WriteString(i.InviteCode)
	builder.WriteString(", ")
	builder.WriteString("share_cep=")
	builder.WriteString(fmt.Sprintf("%v", i.ShareCep))
	builder.WriteString(", ")
	builder.WriteString("reg_cep=")
	builder.WriteString(fmt.Sprintf("%v", i.RegCep))
	builder.WriteString(", ")
	builder.WriteString("first_recharge_cep=")
	builder.WriteString(fmt.Sprintf("%v", i.FirstRechargeCep))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(i.Type)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", i.UserID))
	builder.WriteString(", ")
	builder.WriteString("campaign_id=")
	builder.WriteString(fmt.Sprintf("%v", i.CampaignID))
	builder.WriteByte(')')
	return builder.String()
}

// Invites is a parsable slice of Invite.
type Invites []*Invite
