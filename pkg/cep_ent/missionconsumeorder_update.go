// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/costbill"
	"cephalon-ent/pkg/cep_ent/missionbatch"
	"cephalon-ent/pkg/cep_ent/missionconsumeorder"
	"cephalon-ent/pkg/cep_ent/missionproduceorder"
	"cephalon-ent/pkg/cep_ent/predicate"
	"cephalon-ent/pkg/cep_ent/user"
	"cephalon-ent/pkg/enums"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MissionConsumeOrderUpdate is the builder for updating MissionConsumeOrder entities.
type MissionConsumeOrderUpdate struct {
	config
	hooks    []Hook
	mutation *MissionConsumeOrderMutation
}

// Where appends a list predicates to the MissionConsumeOrderUpdate builder.
func (mcou *MissionConsumeOrderUpdate) Where(ps ...predicate.MissionConsumeOrder) *MissionConsumeOrderUpdate {
	mcou.mutation.Where(ps...)
	return mcou
}

// SetCreatedBy sets the "created_by" field.
func (mcou *MissionConsumeOrderUpdate) SetCreatedBy(i int64) *MissionConsumeOrderUpdate {
	mcou.mutation.ResetCreatedBy()
	mcou.mutation.SetCreatedBy(i)
	return mcou
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mcou *MissionConsumeOrderUpdate) SetNillableCreatedBy(i *int64) *MissionConsumeOrderUpdate {
	if i != nil {
		mcou.SetCreatedBy(*i)
	}
	return mcou
}

// AddCreatedBy adds i to the "created_by" field.
func (mcou *MissionConsumeOrderUpdate) AddCreatedBy(i int64) *MissionConsumeOrderUpdate {
	mcou.mutation.AddCreatedBy(i)
	return mcou
}

// SetUpdatedBy sets the "updated_by" field.
func (mcou *MissionConsumeOrderUpdate) SetUpdatedBy(i int64) *MissionConsumeOrderUpdate {
	mcou.mutation.ResetUpdatedBy()
	mcou.mutation.SetUpdatedBy(i)
	return mcou
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mcou *MissionConsumeOrderUpdate) SetNillableUpdatedBy(i *int64) *MissionConsumeOrderUpdate {
	if i != nil {
		mcou.SetUpdatedBy(*i)
	}
	return mcou
}

// AddUpdatedBy adds i to the "updated_by" field.
func (mcou *MissionConsumeOrderUpdate) AddUpdatedBy(i int64) *MissionConsumeOrderUpdate {
	mcou.mutation.AddUpdatedBy(i)
	return mcou
}

// SetUpdatedAt sets the "updated_at" field.
func (mcou *MissionConsumeOrderUpdate) SetUpdatedAt(t time.Time) *MissionConsumeOrderUpdate {
	mcou.mutation.SetUpdatedAt(t)
	return mcou
}

// SetDeletedAt sets the "deleted_at" field.
func (mcou *MissionConsumeOrderUpdate) SetDeletedAt(t time.Time) *MissionConsumeOrderUpdate {
	mcou.mutation.SetDeletedAt(t)
	return mcou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mcou *MissionConsumeOrderUpdate) SetNillableDeletedAt(t *time.Time) *MissionConsumeOrderUpdate {
	if t != nil {
		mcou.SetDeletedAt(*t)
	}
	return mcou
}

// SetUserID sets the "user_id" field.
func (mcou *MissionConsumeOrderUpdate) SetUserID(i int64) *MissionConsumeOrderUpdate {
	mcou.mutation.SetUserID(i)
	return mcou
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (mcou *MissionConsumeOrderUpdate) SetNillableUserID(i *int64) *MissionConsumeOrderUpdate {
	if i != nil {
		mcou.SetUserID(*i)
	}
	return mcou
}

// SetMissionID sets the "mission_id" field.
func (mcou *MissionConsumeOrderUpdate) SetMissionID(i int64) *MissionConsumeOrderUpdate {
	mcou.mutation.ResetMissionID()
	mcou.mutation.SetMissionID(i)
	return mcou
}

// SetNillableMissionID sets the "mission_id" field if the given value is not nil.
func (mcou *MissionConsumeOrderUpdate) SetNillableMissionID(i *int64) *MissionConsumeOrderUpdate {
	if i != nil {
		mcou.SetMissionID(*i)
	}
	return mcou
}

// AddMissionID adds i to the "mission_id" field.
func (mcou *MissionConsumeOrderUpdate) AddMissionID(i int64) *MissionConsumeOrderUpdate {
	mcou.mutation.AddMissionID(i)
	return mcou
}

// SetStatus sets the "status" field.
func (mcou *MissionConsumeOrderUpdate) SetStatus(m missionconsumeorder.Status) *MissionConsumeOrderUpdate {
	mcou.mutation.SetStatus(m)
	return mcou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mcou *MissionConsumeOrderUpdate) SetNillableStatus(m *missionconsumeorder.Status) *MissionConsumeOrderUpdate {
	if m != nil {
		mcou.SetStatus(*m)
	}
	return mcou
}

// SetPureCep sets the "pure_cep" field.
func (mcou *MissionConsumeOrderUpdate) SetPureCep(i int64) *MissionConsumeOrderUpdate {
	mcou.mutation.ResetPureCep()
	mcou.mutation.SetPureCep(i)
	return mcou
}

// SetNillablePureCep sets the "pure_cep" field if the given value is not nil.
func (mcou *MissionConsumeOrderUpdate) SetNillablePureCep(i *int64) *MissionConsumeOrderUpdate {
	if i != nil {
		mcou.SetPureCep(*i)
	}
	return mcou
}

// AddPureCep adds i to the "pure_cep" field.
func (mcou *MissionConsumeOrderUpdate) AddPureCep(i int64) *MissionConsumeOrderUpdate {
	mcou.mutation.AddPureCep(i)
	return mcou
}

// SetGiftCep sets the "gift_cep" field.
func (mcou *MissionConsumeOrderUpdate) SetGiftCep(i int64) *MissionConsumeOrderUpdate {
	mcou.mutation.ResetGiftCep()
	mcou.mutation.SetGiftCep(i)
	return mcou
}

// SetNillableGiftCep sets the "gift_cep" field if the given value is not nil.
func (mcou *MissionConsumeOrderUpdate) SetNillableGiftCep(i *int64) *MissionConsumeOrderUpdate {
	if i != nil {
		mcou.SetGiftCep(*i)
	}
	return mcou
}

// AddGiftCep adds i to the "gift_cep" field.
func (mcou *MissionConsumeOrderUpdate) AddGiftCep(i int64) *MissionConsumeOrderUpdate {
	mcou.mutation.AddGiftCep(i)
	return mcou
}

// SetType sets the "type" field.
func (mcou *MissionConsumeOrderUpdate) SetType(et enums.MissionType) *MissionConsumeOrderUpdate {
	mcou.mutation.SetType(et)
	return mcou
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mcou *MissionConsumeOrderUpdate) SetNillableType(et *enums.MissionType) *MissionConsumeOrderUpdate {
	if et != nil {
		mcou.SetType(*et)
	}
	return mcou
}

// SetIsTime sets the "is_time" field.
func (mcou *MissionConsumeOrderUpdate) SetIsTime(b bool) *MissionConsumeOrderUpdate {
	mcou.mutation.SetIsTime(b)
	return mcou
}

// SetNillableIsTime sets the "is_time" field if the given value is not nil.
func (mcou *MissionConsumeOrderUpdate) SetNillableIsTime(b *bool) *MissionConsumeOrderUpdate {
	if b != nil {
		mcou.SetIsTime(*b)
	}
	return mcou
}

// SetCallWay sets the "call_way" field.
func (mcou *MissionConsumeOrderUpdate) SetCallWay(ecw enums.MissionCallWay) *MissionConsumeOrderUpdate {
	mcou.mutation.SetCallWay(ecw)
	return mcou
}

// SetNillableCallWay sets the "call_way" field if the given value is not nil.
func (mcou *MissionConsumeOrderUpdate) SetNillableCallWay(ecw *enums.MissionCallWay) *MissionConsumeOrderUpdate {
	if ecw != nil {
		mcou.SetCallWay(*ecw)
	}
	return mcou
}

// SetSerialNumber sets the "serial_number" field.
func (mcou *MissionConsumeOrderUpdate) SetSerialNumber(s string) *MissionConsumeOrderUpdate {
	mcou.mutation.SetSerialNumber(s)
	return mcou
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (mcou *MissionConsumeOrderUpdate) SetNillableSerialNumber(s *string) *MissionConsumeOrderUpdate {
	if s != nil {
		mcou.SetSerialNumber(*s)
	}
	return mcou
}

// SetStartedAt sets the "started_at" field.
func (mcou *MissionConsumeOrderUpdate) SetStartedAt(t time.Time) *MissionConsumeOrderUpdate {
	mcou.mutation.SetStartedAt(t)
	return mcou
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (mcou *MissionConsumeOrderUpdate) SetNillableStartedAt(t *time.Time) *MissionConsumeOrderUpdate {
	if t != nil {
		mcou.SetStartedAt(*t)
	}
	return mcou
}

// SetFinishedAt sets the "finished_at" field.
func (mcou *MissionConsumeOrderUpdate) SetFinishedAt(t time.Time) *MissionConsumeOrderUpdate {
	mcou.mutation.SetFinishedAt(t)
	return mcou
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (mcou *MissionConsumeOrderUpdate) SetNillableFinishedAt(t *time.Time) *MissionConsumeOrderUpdate {
	if t != nil {
		mcou.SetFinishedAt(*t)
	}
	return mcou
}

// SetMissionBatchID sets the "mission_batch_id" field.
func (mcou *MissionConsumeOrderUpdate) SetMissionBatchID(i int64) *MissionConsumeOrderUpdate {
	mcou.mutation.SetMissionBatchID(i)
	return mcou
}

// SetNillableMissionBatchID sets the "mission_batch_id" field if the given value is not nil.
func (mcou *MissionConsumeOrderUpdate) SetNillableMissionBatchID(i *int64) *MissionConsumeOrderUpdate {
	if i != nil {
		mcou.SetMissionBatchID(*i)
	}
	return mcou
}

// SetMissionBatchNumber sets the "mission_batch_number" field.
func (mcou *MissionConsumeOrderUpdate) SetMissionBatchNumber(s string) *MissionConsumeOrderUpdate {
	mcou.mutation.SetMissionBatchNumber(s)
	return mcou
}

// SetNillableMissionBatchNumber sets the "mission_batch_number" field if the given value is not nil.
func (mcou *MissionConsumeOrderUpdate) SetNillableMissionBatchNumber(s *string) *MissionConsumeOrderUpdate {
	if s != nil {
		mcou.SetMissionBatchNumber(*s)
	}
	return mcou
}

// SetUser sets the "user" edge to the User entity.
func (mcou *MissionConsumeOrderUpdate) SetUser(u *User) *MissionConsumeOrderUpdate {
	return mcou.SetUserID(u.ID)
}

// AddCostBillIDs adds the "cost_bills" edge to the CostBill entity by IDs.
func (mcou *MissionConsumeOrderUpdate) AddCostBillIDs(ids ...int64) *MissionConsumeOrderUpdate {
	mcou.mutation.AddCostBillIDs(ids...)
	return mcou
}

// AddCostBills adds the "cost_bills" edges to the CostBill entity.
func (mcou *MissionConsumeOrderUpdate) AddCostBills(c ...*CostBill) *MissionConsumeOrderUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mcou.AddCostBillIDs(ids...)
}

// AddMissionProduceOrderIDs adds the "mission_produce_orders" edge to the MissionProduceOrder entity by IDs.
func (mcou *MissionConsumeOrderUpdate) AddMissionProduceOrderIDs(ids ...int64) *MissionConsumeOrderUpdate {
	mcou.mutation.AddMissionProduceOrderIDs(ids...)
	return mcou
}

// AddMissionProduceOrders adds the "mission_produce_orders" edges to the MissionProduceOrder entity.
func (mcou *MissionConsumeOrderUpdate) AddMissionProduceOrders(m ...*MissionProduceOrder) *MissionConsumeOrderUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mcou.AddMissionProduceOrderIDs(ids...)
}

// SetMissionBatch sets the "mission_batch" edge to the MissionBatch entity.
func (mcou *MissionConsumeOrderUpdate) SetMissionBatch(m *MissionBatch) *MissionConsumeOrderUpdate {
	return mcou.SetMissionBatchID(m.ID)
}

// Mutation returns the MissionConsumeOrderMutation object of the builder.
func (mcou *MissionConsumeOrderUpdate) Mutation() *MissionConsumeOrderMutation {
	return mcou.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (mcou *MissionConsumeOrderUpdate) ClearUser() *MissionConsumeOrderUpdate {
	mcou.mutation.ClearUser()
	return mcou
}

// ClearCostBills clears all "cost_bills" edges to the CostBill entity.
func (mcou *MissionConsumeOrderUpdate) ClearCostBills() *MissionConsumeOrderUpdate {
	mcou.mutation.ClearCostBills()
	return mcou
}

// RemoveCostBillIDs removes the "cost_bills" edge to CostBill entities by IDs.
func (mcou *MissionConsumeOrderUpdate) RemoveCostBillIDs(ids ...int64) *MissionConsumeOrderUpdate {
	mcou.mutation.RemoveCostBillIDs(ids...)
	return mcou
}

// RemoveCostBills removes "cost_bills" edges to CostBill entities.
func (mcou *MissionConsumeOrderUpdate) RemoveCostBills(c ...*CostBill) *MissionConsumeOrderUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mcou.RemoveCostBillIDs(ids...)
}

// ClearMissionProduceOrders clears all "mission_produce_orders" edges to the MissionProduceOrder entity.
func (mcou *MissionConsumeOrderUpdate) ClearMissionProduceOrders() *MissionConsumeOrderUpdate {
	mcou.mutation.ClearMissionProduceOrders()
	return mcou
}

// RemoveMissionProduceOrderIDs removes the "mission_produce_orders" edge to MissionProduceOrder entities by IDs.
func (mcou *MissionConsumeOrderUpdate) RemoveMissionProduceOrderIDs(ids ...int64) *MissionConsumeOrderUpdate {
	mcou.mutation.RemoveMissionProduceOrderIDs(ids...)
	return mcou
}

// RemoveMissionProduceOrders removes "mission_produce_orders" edges to MissionProduceOrder entities.
func (mcou *MissionConsumeOrderUpdate) RemoveMissionProduceOrders(m ...*MissionProduceOrder) *MissionConsumeOrderUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mcou.RemoveMissionProduceOrderIDs(ids...)
}

// ClearMissionBatch clears the "mission_batch" edge to the MissionBatch entity.
func (mcou *MissionConsumeOrderUpdate) ClearMissionBatch() *MissionConsumeOrderUpdate {
	mcou.mutation.ClearMissionBatch()
	return mcou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mcou *MissionConsumeOrderUpdate) Save(ctx context.Context) (int, error) {
	mcou.defaults()
	return withHooks(ctx, mcou.sqlSave, mcou.mutation, mcou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mcou *MissionConsumeOrderUpdate) SaveX(ctx context.Context) int {
	affected, err := mcou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mcou *MissionConsumeOrderUpdate) Exec(ctx context.Context) error {
	_, err := mcou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcou *MissionConsumeOrderUpdate) ExecX(ctx context.Context) {
	if err := mcou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mcou *MissionConsumeOrderUpdate) defaults() {
	if _, ok := mcou.mutation.UpdatedAt(); !ok {
		v := missionconsumeorder.UpdateDefaultUpdatedAt()
		mcou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mcou *MissionConsumeOrderUpdate) check() error {
	if v, ok := mcou.mutation.Status(); ok {
		if err := missionconsumeorder.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "MissionConsumeOrder.status": %w`, err)}
		}
	}
	if v, ok := mcou.mutation.GetType(); ok {
		if err := missionconsumeorder.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "MissionConsumeOrder.type": %w`, err)}
		}
	}
	if v, ok := mcou.mutation.CallWay(); ok {
		if err := missionconsumeorder.CallWayValidator(v); err != nil {
			return &ValidationError{Name: "call_way", err: fmt.Errorf(`cep_ent: validator failed for field "MissionConsumeOrder.call_way": %w`, err)}
		}
	}
	if _, ok := mcou.mutation.UserID(); mcou.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionConsumeOrder.user"`)
	}
	if _, ok := mcou.mutation.MissionBatchID(); mcou.mutation.MissionBatchCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionConsumeOrder.mission_batch"`)
	}
	return nil
}

func (mcou *MissionConsumeOrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mcou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(missionconsumeorder.Table, missionconsumeorder.Columns, sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64))
	if ps := mcou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mcou.mutation.CreatedBy(); ok {
		_spec.SetField(missionconsumeorder.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mcou.mutation.AddedCreatedBy(); ok {
		_spec.AddField(missionconsumeorder.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mcou.mutation.UpdatedBy(); ok {
		_spec.SetField(missionconsumeorder.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mcou.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(missionconsumeorder.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mcou.mutation.UpdatedAt(); ok {
		_spec.SetField(missionconsumeorder.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mcou.mutation.DeletedAt(); ok {
		_spec.SetField(missionconsumeorder.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := mcou.mutation.MissionID(); ok {
		_spec.SetField(missionconsumeorder.FieldMissionID, field.TypeInt64, value)
	}
	if value, ok := mcou.mutation.AddedMissionID(); ok {
		_spec.AddField(missionconsumeorder.FieldMissionID, field.TypeInt64, value)
	}
	if value, ok := mcou.mutation.Status(); ok {
		_spec.SetField(missionconsumeorder.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := mcou.mutation.PureCep(); ok {
		_spec.SetField(missionconsumeorder.FieldPureCep, field.TypeInt64, value)
	}
	if value, ok := mcou.mutation.AddedPureCep(); ok {
		_spec.AddField(missionconsumeorder.FieldPureCep, field.TypeInt64, value)
	}
	if value, ok := mcou.mutation.GiftCep(); ok {
		_spec.SetField(missionconsumeorder.FieldGiftCep, field.TypeInt64, value)
	}
	if value, ok := mcou.mutation.AddedGiftCep(); ok {
		_spec.AddField(missionconsumeorder.FieldGiftCep, field.TypeInt64, value)
	}
	if value, ok := mcou.mutation.GetType(); ok {
		_spec.SetField(missionconsumeorder.FieldType, field.TypeEnum, value)
	}
	if value, ok := mcou.mutation.IsTime(); ok {
		_spec.SetField(missionconsumeorder.FieldIsTime, field.TypeBool, value)
	}
	if value, ok := mcou.mutation.CallWay(); ok {
		_spec.SetField(missionconsumeorder.FieldCallWay, field.TypeEnum, value)
	}
	if value, ok := mcou.mutation.SerialNumber(); ok {
		_spec.SetField(missionconsumeorder.FieldSerialNumber, field.TypeString, value)
	}
	if value, ok := mcou.mutation.StartedAt(); ok {
		_spec.SetField(missionconsumeorder.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := mcou.mutation.FinishedAt(); ok {
		_spec.SetField(missionconsumeorder.FieldFinishedAt, field.TypeTime, value)
	}
	if value, ok := mcou.mutation.MissionBatchNumber(); ok {
		_spec.SetField(missionconsumeorder.FieldMissionBatchNumber, field.TypeString, value)
	}
	if mcou.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionconsumeorder.UserTable,
			Columns: []string{missionconsumeorder.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mcou.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionconsumeorder.UserTable,
			Columns: []string{missionconsumeorder.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mcou.mutation.CostBillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionconsumeorder.CostBillsTable,
			Columns: []string{missionconsumeorder.CostBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costbill.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mcou.mutation.RemovedCostBillsIDs(); len(nodes) > 0 && !mcou.mutation.CostBillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionconsumeorder.CostBillsTable,
			Columns: []string{missionconsumeorder.CostBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costbill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mcou.mutation.CostBillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionconsumeorder.CostBillsTable,
			Columns: []string{missionconsumeorder.CostBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costbill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mcou.mutation.MissionProduceOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionconsumeorder.MissionProduceOrdersTable,
			Columns: []string{missionconsumeorder.MissionProduceOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mcou.mutation.RemovedMissionProduceOrdersIDs(); len(nodes) > 0 && !mcou.mutation.MissionProduceOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionconsumeorder.MissionProduceOrdersTable,
			Columns: []string{missionconsumeorder.MissionProduceOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mcou.mutation.MissionProduceOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionconsumeorder.MissionProduceOrdersTable,
			Columns: []string{missionconsumeorder.MissionProduceOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mcou.mutation.MissionBatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionconsumeorder.MissionBatchTable,
			Columns: []string{missionconsumeorder.MissionBatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionbatch.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mcou.mutation.MissionBatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionconsumeorder.MissionBatchTable,
			Columns: []string{missionconsumeorder.MissionBatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionbatch.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mcou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{missionconsumeorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mcou.mutation.done = true
	return n, nil
}

// MissionConsumeOrderUpdateOne is the builder for updating a single MissionConsumeOrder entity.
type MissionConsumeOrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MissionConsumeOrderMutation
}

// SetCreatedBy sets the "created_by" field.
func (mcouo *MissionConsumeOrderUpdateOne) SetCreatedBy(i int64) *MissionConsumeOrderUpdateOne {
	mcouo.mutation.ResetCreatedBy()
	mcouo.mutation.SetCreatedBy(i)
	return mcouo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mcouo *MissionConsumeOrderUpdateOne) SetNillableCreatedBy(i *int64) *MissionConsumeOrderUpdateOne {
	if i != nil {
		mcouo.SetCreatedBy(*i)
	}
	return mcouo
}

// AddCreatedBy adds i to the "created_by" field.
func (mcouo *MissionConsumeOrderUpdateOne) AddCreatedBy(i int64) *MissionConsumeOrderUpdateOne {
	mcouo.mutation.AddCreatedBy(i)
	return mcouo
}

// SetUpdatedBy sets the "updated_by" field.
func (mcouo *MissionConsumeOrderUpdateOne) SetUpdatedBy(i int64) *MissionConsumeOrderUpdateOne {
	mcouo.mutation.ResetUpdatedBy()
	mcouo.mutation.SetUpdatedBy(i)
	return mcouo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mcouo *MissionConsumeOrderUpdateOne) SetNillableUpdatedBy(i *int64) *MissionConsumeOrderUpdateOne {
	if i != nil {
		mcouo.SetUpdatedBy(*i)
	}
	return mcouo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (mcouo *MissionConsumeOrderUpdateOne) AddUpdatedBy(i int64) *MissionConsumeOrderUpdateOne {
	mcouo.mutation.AddUpdatedBy(i)
	return mcouo
}

// SetUpdatedAt sets the "updated_at" field.
func (mcouo *MissionConsumeOrderUpdateOne) SetUpdatedAt(t time.Time) *MissionConsumeOrderUpdateOne {
	mcouo.mutation.SetUpdatedAt(t)
	return mcouo
}

// SetDeletedAt sets the "deleted_at" field.
func (mcouo *MissionConsumeOrderUpdateOne) SetDeletedAt(t time.Time) *MissionConsumeOrderUpdateOne {
	mcouo.mutation.SetDeletedAt(t)
	return mcouo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mcouo *MissionConsumeOrderUpdateOne) SetNillableDeletedAt(t *time.Time) *MissionConsumeOrderUpdateOne {
	if t != nil {
		mcouo.SetDeletedAt(*t)
	}
	return mcouo
}

// SetUserID sets the "user_id" field.
func (mcouo *MissionConsumeOrderUpdateOne) SetUserID(i int64) *MissionConsumeOrderUpdateOne {
	mcouo.mutation.SetUserID(i)
	return mcouo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (mcouo *MissionConsumeOrderUpdateOne) SetNillableUserID(i *int64) *MissionConsumeOrderUpdateOne {
	if i != nil {
		mcouo.SetUserID(*i)
	}
	return mcouo
}

// SetMissionID sets the "mission_id" field.
func (mcouo *MissionConsumeOrderUpdateOne) SetMissionID(i int64) *MissionConsumeOrderUpdateOne {
	mcouo.mutation.ResetMissionID()
	mcouo.mutation.SetMissionID(i)
	return mcouo
}

// SetNillableMissionID sets the "mission_id" field if the given value is not nil.
func (mcouo *MissionConsumeOrderUpdateOne) SetNillableMissionID(i *int64) *MissionConsumeOrderUpdateOne {
	if i != nil {
		mcouo.SetMissionID(*i)
	}
	return mcouo
}

// AddMissionID adds i to the "mission_id" field.
func (mcouo *MissionConsumeOrderUpdateOne) AddMissionID(i int64) *MissionConsumeOrderUpdateOne {
	mcouo.mutation.AddMissionID(i)
	return mcouo
}

// SetStatus sets the "status" field.
func (mcouo *MissionConsumeOrderUpdateOne) SetStatus(m missionconsumeorder.Status) *MissionConsumeOrderUpdateOne {
	mcouo.mutation.SetStatus(m)
	return mcouo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mcouo *MissionConsumeOrderUpdateOne) SetNillableStatus(m *missionconsumeorder.Status) *MissionConsumeOrderUpdateOne {
	if m != nil {
		mcouo.SetStatus(*m)
	}
	return mcouo
}

// SetPureCep sets the "pure_cep" field.
func (mcouo *MissionConsumeOrderUpdateOne) SetPureCep(i int64) *MissionConsumeOrderUpdateOne {
	mcouo.mutation.ResetPureCep()
	mcouo.mutation.SetPureCep(i)
	return mcouo
}

// SetNillablePureCep sets the "pure_cep" field if the given value is not nil.
func (mcouo *MissionConsumeOrderUpdateOne) SetNillablePureCep(i *int64) *MissionConsumeOrderUpdateOne {
	if i != nil {
		mcouo.SetPureCep(*i)
	}
	return mcouo
}

// AddPureCep adds i to the "pure_cep" field.
func (mcouo *MissionConsumeOrderUpdateOne) AddPureCep(i int64) *MissionConsumeOrderUpdateOne {
	mcouo.mutation.AddPureCep(i)
	return mcouo
}

// SetGiftCep sets the "gift_cep" field.
func (mcouo *MissionConsumeOrderUpdateOne) SetGiftCep(i int64) *MissionConsumeOrderUpdateOne {
	mcouo.mutation.ResetGiftCep()
	mcouo.mutation.SetGiftCep(i)
	return mcouo
}

// SetNillableGiftCep sets the "gift_cep" field if the given value is not nil.
func (mcouo *MissionConsumeOrderUpdateOne) SetNillableGiftCep(i *int64) *MissionConsumeOrderUpdateOne {
	if i != nil {
		mcouo.SetGiftCep(*i)
	}
	return mcouo
}

// AddGiftCep adds i to the "gift_cep" field.
func (mcouo *MissionConsumeOrderUpdateOne) AddGiftCep(i int64) *MissionConsumeOrderUpdateOne {
	mcouo.mutation.AddGiftCep(i)
	return mcouo
}

// SetType sets the "type" field.
func (mcouo *MissionConsumeOrderUpdateOne) SetType(et enums.MissionType) *MissionConsumeOrderUpdateOne {
	mcouo.mutation.SetType(et)
	return mcouo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mcouo *MissionConsumeOrderUpdateOne) SetNillableType(et *enums.MissionType) *MissionConsumeOrderUpdateOne {
	if et != nil {
		mcouo.SetType(*et)
	}
	return mcouo
}

// SetIsTime sets the "is_time" field.
func (mcouo *MissionConsumeOrderUpdateOne) SetIsTime(b bool) *MissionConsumeOrderUpdateOne {
	mcouo.mutation.SetIsTime(b)
	return mcouo
}

// SetNillableIsTime sets the "is_time" field if the given value is not nil.
func (mcouo *MissionConsumeOrderUpdateOne) SetNillableIsTime(b *bool) *MissionConsumeOrderUpdateOne {
	if b != nil {
		mcouo.SetIsTime(*b)
	}
	return mcouo
}

// SetCallWay sets the "call_way" field.
func (mcouo *MissionConsumeOrderUpdateOne) SetCallWay(ecw enums.MissionCallWay) *MissionConsumeOrderUpdateOne {
	mcouo.mutation.SetCallWay(ecw)
	return mcouo
}

// SetNillableCallWay sets the "call_way" field if the given value is not nil.
func (mcouo *MissionConsumeOrderUpdateOne) SetNillableCallWay(ecw *enums.MissionCallWay) *MissionConsumeOrderUpdateOne {
	if ecw != nil {
		mcouo.SetCallWay(*ecw)
	}
	return mcouo
}

// SetSerialNumber sets the "serial_number" field.
func (mcouo *MissionConsumeOrderUpdateOne) SetSerialNumber(s string) *MissionConsumeOrderUpdateOne {
	mcouo.mutation.SetSerialNumber(s)
	return mcouo
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (mcouo *MissionConsumeOrderUpdateOne) SetNillableSerialNumber(s *string) *MissionConsumeOrderUpdateOne {
	if s != nil {
		mcouo.SetSerialNumber(*s)
	}
	return mcouo
}

// SetStartedAt sets the "started_at" field.
func (mcouo *MissionConsumeOrderUpdateOne) SetStartedAt(t time.Time) *MissionConsumeOrderUpdateOne {
	mcouo.mutation.SetStartedAt(t)
	return mcouo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (mcouo *MissionConsumeOrderUpdateOne) SetNillableStartedAt(t *time.Time) *MissionConsumeOrderUpdateOne {
	if t != nil {
		mcouo.SetStartedAt(*t)
	}
	return mcouo
}

// SetFinishedAt sets the "finished_at" field.
func (mcouo *MissionConsumeOrderUpdateOne) SetFinishedAt(t time.Time) *MissionConsumeOrderUpdateOne {
	mcouo.mutation.SetFinishedAt(t)
	return mcouo
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (mcouo *MissionConsumeOrderUpdateOne) SetNillableFinishedAt(t *time.Time) *MissionConsumeOrderUpdateOne {
	if t != nil {
		mcouo.SetFinishedAt(*t)
	}
	return mcouo
}

// SetMissionBatchID sets the "mission_batch_id" field.
func (mcouo *MissionConsumeOrderUpdateOne) SetMissionBatchID(i int64) *MissionConsumeOrderUpdateOne {
	mcouo.mutation.SetMissionBatchID(i)
	return mcouo
}

// SetNillableMissionBatchID sets the "mission_batch_id" field if the given value is not nil.
func (mcouo *MissionConsumeOrderUpdateOne) SetNillableMissionBatchID(i *int64) *MissionConsumeOrderUpdateOne {
	if i != nil {
		mcouo.SetMissionBatchID(*i)
	}
	return mcouo
}

// SetMissionBatchNumber sets the "mission_batch_number" field.
func (mcouo *MissionConsumeOrderUpdateOne) SetMissionBatchNumber(s string) *MissionConsumeOrderUpdateOne {
	mcouo.mutation.SetMissionBatchNumber(s)
	return mcouo
}

// SetNillableMissionBatchNumber sets the "mission_batch_number" field if the given value is not nil.
func (mcouo *MissionConsumeOrderUpdateOne) SetNillableMissionBatchNumber(s *string) *MissionConsumeOrderUpdateOne {
	if s != nil {
		mcouo.SetMissionBatchNumber(*s)
	}
	return mcouo
}

// SetUser sets the "user" edge to the User entity.
func (mcouo *MissionConsumeOrderUpdateOne) SetUser(u *User) *MissionConsumeOrderUpdateOne {
	return mcouo.SetUserID(u.ID)
}

// AddCostBillIDs adds the "cost_bills" edge to the CostBill entity by IDs.
func (mcouo *MissionConsumeOrderUpdateOne) AddCostBillIDs(ids ...int64) *MissionConsumeOrderUpdateOne {
	mcouo.mutation.AddCostBillIDs(ids...)
	return mcouo
}

// AddCostBills adds the "cost_bills" edges to the CostBill entity.
func (mcouo *MissionConsumeOrderUpdateOne) AddCostBills(c ...*CostBill) *MissionConsumeOrderUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mcouo.AddCostBillIDs(ids...)
}

// AddMissionProduceOrderIDs adds the "mission_produce_orders" edge to the MissionProduceOrder entity by IDs.
func (mcouo *MissionConsumeOrderUpdateOne) AddMissionProduceOrderIDs(ids ...int64) *MissionConsumeOrderUpdateOne {
	mcouo.mutation.AddMissionProduceOrderIDs(ids...)
	return mcouo
}

// AddMissionProduceOrders adds the "mission_produce_orders" edges to the MissionProduceOrder entity.
func (mcouo *MissionConsumeOrderUpdateOne) AddMissionProduceOrders(m ...*MissionProduceOrder) *MissionConsumeOrderUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mcouo.AddMissionProduceOrderIDs(ids...)
}

// SetMissionBatch sets the "mission_batch" edge to the MissionBatch entity.
func (mcouo *MissionConsumeOrderUpdateOne) SetMissionBatch(m *MissionBatch) *MissionConsumeOrderUpdateOne {
	return mcouo.SetMissionBatchID(m.ID)
}

// Mutation returns the MissionConsumeOrderMutation object of the builder.
func (mcouo *MissionConsumeOrderUpdateOne) Mutation() *MissionConsumeOrderMutation {
	return mcouo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (mcouo *MissionConsumeOrderUpdateOne) ClearUser() *MissionConsumeOrderUpdateOne {
	mcouo.mutation.ClearUser()
	return mcouo
}

// ClearCostBills clears all "cost_bills" edges to the CostBill entity.
func (mcouo *MissionConsumeOrderUpdateOne) ClearCostBills() *MissionConsumeOrderUpdateOne {
	mcouo.mutation.ClearCostBills()
	return mcouo
}

// RemoveCostBillIDs removes the "cost_bills" edge to CostBill entities by IDs.
func (mcouo *MissionConsumeOrderUpdateOne) RemoveCostBillIDs(ids ...int64) *MissionConsumeOrderUpdateOne {
	mcouo.mutation.RemoveCostBillIDs(ids...)
	return mcouo
}

// RemoveCostBills removes "cost_bills" edges to CostBill entities.
func (mcouo *MissionConsumeOrderUpdateOne) RemoveCostBills(c ...*CostBill) *MissionConsumeOrderUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mcouo.RemoveCostBillIDs(ids...)
}

// ClearMissionProduceOrders clears all "mission_produce_orders" edges to the MissionProduceOrder entity.
func (mcouo *MissionConsumeOrderUpdateOne) ClearMissionProduceOrders() *MissionConsumeOrderUpdateOne {
	mcouo.mutation.ClearMissionProduceOrders()
	return mcouo
}

// RemoveMissionProduceOrderIDs removes the "mission_produce_orders" edge to MissionProduceOrder entities by IDs.
func (mcouo *MissionConsumeOrderUpdateOne) RemoveMissionProduceOrderIDs(ids ...int64) *MissionConsumeOrderUpdateOne {
	mcouo.mutation.RemoveMissionProduceOrderIDs(ids...)
	return mcouo
}

// RemoveMissionProduceOrders removes "mission_produce_orders" edges to MissionProduceOrder entities.
func (mcouo *MissionConsumeOrderUpdateOne) RemoveMissionProduceOrders(m ...*MissionProduceOrder) *MissionConsumeOrderUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mcouo.RemoveMissionProduceOrderIDs(ids...)
}

// ClearMissionBatch clears the "mission_batch" edge to the MissionBatch entity.
func (mcouo *MissionConsumeOrderUpdateOne) ClearMissionBatch() *MissionConsumeOrderUpdateOne {
	mcouo.mutation.ClearMissionBatch()
	return mcouo
}

// Where appends a list predicates to the MissionConsumeOrderUpdate builder.
func (mcouo *MissionConsumeOrderUpdateOne) Where(ps ...predicate.MissionConsumeOrder) *MissionConsumeOrderUpdateOne {
	mcouo.mutation.Where(ps...)
	return mcouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mcouo *MissionConsumeOrderUpdateOne) Select(field string, fields ...string) *MissionConsumeOrderUpdateOne {
	mcouo.fields = append([]string{field}, fields...)
	return mcouo
}

// Save executes the query and returns the updated MissionConsumeOrder entity.
func (mcouo *MissionConsumeOrderUpdateOne) Save(ctx context.Context) (*MissionConsumeOrder, error) {
	mcouo.defaults()
	return withHooks(ctx, mcouo.sqlSave, mcouo.mutation, mcouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mcouo *MissionConsumeOrderUpdateOne) SaveX(ctx context.Context) *MissionConsumeOrder {
	node, err := mcouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mcouo *MissionConsumeOrderUpdateOne) Exec(ctx context.Context) error {
	_, err := mcouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcouo *MissionConsumeOrderUpdateOne) ExecX(ctx context.Context) {
	if err := mcouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mcouo *MissionConsumeOrderUpdateOne) defaults() {
	if _, ok := mcouo.mutation.UpdatedAt(); !ok {
		v := missionconsumeorder.UpdateDefaultUpdatedAt()
		mcouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mcouo *MissionConsumeOrderUpdateOne) check() error {
	if v, ok := mcouo.mutation.Status(); ok {
		if err := missionconsumeorder.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "MissionConsumeOrder.status": %w`, err)}
		}
	}
	if v, ok := mcouo.mutation.GetType(); ok {
		if err := missionconsumeorder.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "MissionConsumeOrder.type": %w`, err)}
		}
	}
	if v, ok := mcouo.mutation.CallWay(); ok {
		if err := missionconsumeorder.CallWayValidator(v); err != nil {
			return &ValidationError{Name: "call_way", err: fmt.Errorf(`cep_ent: validator failed for field "MissionConsumeOrder.call_way": %w`, err)}
		}
	}
	if _, ok := mcouo.mutation.UserID(); mcouo.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionConsumeOrder.user"`)
	}
	if _, ok := mcouo.mutation.MissionBatchID(); mcouo.mutation.MissionBatchCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionConsumeOrder.mission_batch"`)
	}
	return nil
}

func (mcouo *MissionConsumeOrderUpdateOne) sqlSave(ctx context.Context) (_node *MissionConsumeOrder, err error) {
	if err := mcouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(missionconsumeorder.Table, missionconsumeorder.Columns, sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64))
	id, ok := mcouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "MissionConsumeOrder.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mcouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, missionconsumeorder.FieldID)
		for _, f := range fields {
			if !missionconsumeorder.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != missionconsumeorder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mcouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mcouo.mutation.CreatedBy(); ok {
		_spec.SetField(missionconsumeorder.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mcouo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(missionconsumeorder.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mcouo.mutation.UpdatedBy(); ok {
		_spec.SetField(missionconsumeorder.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mcouo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(missionconsumeorder.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mcouo.mutation.UpdatedAt(); ok {
		_spec.SetField(missionconsumeorder.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mcouo.mutation.DeletedAt(); ok {
		_spec.SetField(missionconsumeorder.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := mcouo.mutation.MissionID(); ok {
		_spec.SetField(missionconsumeorder.FieldMissionID, field.TypeInt64, value)
	}
	if value, ok := mcouo.mutation.AddedMissionID(); ok {
		_spec.AddField(missionconsumeorder.FieldMissionID, field.TypeInt64, value)
	}
	if value, ok := mcouo.mutation.Status(); ok {
		_spec.SetField(missionconsumeorder.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := mcouo.mutation.PureCep(); ok {
		_spec.SetField(missionconsumeorder.FieldPureCep, field.TypeInt64, value)
	}
	if value, ok := mcouo.mutation.AddedPureCep(); ok {
		_spec.AddField(missionconsumeorder.FieldPureCep, field.TypeInt64, value)
	}
	if value, ok := mcouo.mutation.GiftCep(); ok {
		_spec.SetField(missionconsumeorder.FieldGiftCep, field.TypeInt64, value)
	}
	if value, ok := mcouo.mutation.AddedGiftCep(); ok {
		_spec.AddField(missionconsumeorder.FieldGiftCep, field.TypeInt64, value)
	}
	if value, ok := mcouo.mutation.GetType(); ok {
		_spec.SetField(missionconsumeorder.FieldType, field.TypeEnum, value)
	}
	if value, ok := mcouo.mutation.IsTime(); ok {
		_spec.SetField(missionconsumeorder.FieldIsTime, field.TypeBool, value)
	}
	if value, ok := mcouo.mutation.CallWay(); ok {
		_spec.SetField(missionconsumeorder.FieldCallWay, field.TypeEnum, value)
	}
	if value, ok := mcouo.mutation.SerialNumber(); ok {
		_spec.SetField(missionconsumeorder.FieldSerialNumber, field.TypeString, value)
	}
	if value, ok := mcouo.mutation.StartedAt(); ok {
		_spec.SetField(missionconsumeorder.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := mcouo.mutation.FinishedAt(); ok {
		_spec.SetField(missionconsumeorder.FieldFinishedAt, field.TypeTime, value)
	}
	if value, ok := mcouo.mutation.MissionBatchNumber(); ok {
		_spec.SetField(missionconsumeorder.FieldMissionBatchNumber, field.TypeString, value)
	}
	if mcouo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionconsumeorder.UserTable,
			Columns: []string{missionconsumeorder.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mcouo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionconsumeorder.UserTable,
			Columns: []string{missionconsumeorder.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mcouo.mutation.CostBillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionconsumeorder.CostBillsTable,
			Columns: []string{missionconsumeorder.CostBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costbill.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mcouo.mutation.RemovedCostBillsIDs(); len(nodes) > 0 && !mcouo.mutation.CostBillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionconsumeorder.CostBillsTable,
			Columns: []string{missionconsumeorder.CostBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costbill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mcouo.mutation.CostBillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionconsumeorder.CostBillsTable,
			Columns: []string{missionconsumeorder.CostBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costbill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mcouo.mutation.MissionProduceOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionconsumeorder.MissionProduceOrdersTable,
			Columns: []string{missionconsumeorder.MissionProduceOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mcouo.mutation.RemovedMissionProduceOrdersIDs(); len(nodes) > 0 && !mcouo.mutation.MissionProduceOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionconsumeorder.MissionProduceOrdersTable,
			Columns: []string{missionconsumeorder.MissionProduceOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mcouo.mutation.MissionProduceOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionconsumeorder.MissionProduceOrdersTable,
			Columns: []string{missionconsumeorder.MissionProduceOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mcouo.mutation.MissionBatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionconsumeorder.MissionBatchTable,
			Columns: []string{missionconsumeorder.MissionBatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionbatch.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mcouo.mutation.MissionBatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionconsumeorder.MissionBatchTable,
			Columns: []string{missionconsumeorder.MissionBatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionbatch.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MissionConsumeOrder{config: mcouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mcouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{missionconsumeorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mcouo.mutation.done = true
	return _node, nil
}
