// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/earnbill"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/platformaccount"
)

// PlatformAccountCreate is the builder for creating a PlatformAccount entity.
type PlatformAccountCreate struct {
	config
	mutation *PlatformAccountMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (pac *PlatformAccountCreate) SetCreatedBy(i int64) *PlatformAccountCreate {
	pac.mutation.SetCreatedBy(i)
	return pac
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pac *PlatformAccountCreate) SetNillableCreatedBy(i *int64) *PlatformAccountCreate {
	if i != nil {
		pac.SetCreatedBy(*i)
	}
	return pac
}

// SetUpdatedBy sets the "updated_by" field.
func (pac *PlatformAccountCreate) SetUpdatedBy(i int64) *PlatformAccountCreate {
	pac.mutation.SetUpdatedBy(i)
	return pac
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pac *PlatformAccountCreate) SetNillableUpdatedBy(i *int64) *PlatformAccountCreate {
	if i != nil {
		pac.SetUpdatedBy(*i)
	}
	return pac
}

// SetCreatedAt sets the "created_at" field.
func (pac *PlatformAccountCreate) SetCreatedAt(t time.Time) *PlatformAccountCreate {
	pac.mutation.SetCreatedAt(t)
	return pac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pac *PlatformAccountCreate) SetNillableCreatedAt(t *time.Time) *PlatformAccountCreate {
	if t != nil {
		pac.SetCreatedAt(*t)
	}
	return pac
}

// SetUpdatedAt sets the "updated_at" field.
func (pac *PlatformAccountCreate) SetUpdatedAt(t time.Time) *PlatformAccountCreate {
	pac.mutation.SetUpdatedAt(t)
	return pac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pac *PlatformAccountCreate) SetNillableUpdatedAt(t *time.Time) *PlatformAccountCreate {
	if t != nil {
		pac.SetUpdatedAt(*t)
	}
	return pac
}

// SetDeletedAt sets the "deleted_at" field.
func (pac *PlatformAccountCreate) SetDeletedAt(t time.Time) *PlatformAccountCreate {
	pac.mutation.SetDeletedAt(t)
	return pac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pac *PlatformAccountCreate) SetNillableDeletedAt(t *time.Time) *PlatformAccountCreate {
	if t != nil {
		pac.SetDeletedAt(*t)
	}
	return pac
}

// SetType sets the "type" field.
func (pac *PlatformAccountCreate) SetType(pl platformaccount.Type) *PlatformAccountCreate {
	pac.mutation.SetType(pl)
	return pac
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pac *PlatformAccountCreate) SetNillableType(pl *platformaccount.Type) *PlatformAccountCreate {
	if pl != nil {
		pac.SetType(*pl)
	}
	return pac
}

// SetSumTotalCep sets the "sum_total_cep" field.
func (pac *PlatformAccountCreate) SetSumTotalCep(i int64) *PlatformAccountCreate {
	pac.mutation.SetSumTotalCep(i)
	return pac
}

// SetNillableSumTotalCep sets the "sum_total_cep" field if the given value is not nil.
func (pac *PlatformAccountCreate) SetNillableSumTotalCep(i *int64) *PlatformAccountCreate {
	if i != nil {
		pac.SetSumTotalCep(*i)
	}
	return pac
}

// SetTotalCep sets the "total_cep" field.
func (pac *PlatformAccountCreate) SetTotalCep(i int64) *PlatformAccountCreate {
	pac.mutation.SetTotalCep(i)
	return pac
}

// SetNillableTotalCep sets the "total_cep" field if the given value is not nil.
func (pac *PlatformAccountCreate) SetNillableTotalCep(i *int64) *PlatformAccountCreate {
	if i != nil {
		pac.SetTotalCep(*i)
	}
	return pac
}

// SetSumPureCep sets the "sum_pure_cep" field.
func (pac *PlatformAccountCreate) SetSumPureCep(i int64) *PlatformAccountCreate {
	pac.mutation.SetSumPureCep(i)
	return pac
}

// SetNillableSumPureCep sets the "sum_pure_cep" field if the given value is not nil.
func (pac *PlatformAccountCreate) SetNillableSumPureCep(i *int64) *PlatformAccountCreate {
	if i != nil {
		pac.SetSumPureCep(*i)
	}
	return pac
}

// SetPureCep sets the "pure_cep" field.
func (pac *PlatformAccountCreate) SetPureCep(i int64) *PlatformAccountCreate {
	pac.mutation.SetPureCep(i)
	return pac
}

// SetNillablePureCep sets the "pure_cep" field if the given value is not nil.
func (pac *PlatformAccountCreate) SetNillablePureCep(i *int64) *PlatformAccountCreate {
	if i != nil {
		pac.SetPureCep(*i)
	}
	return pac
}

// SetSumGiftCep sets the "sum_gift_cep" field.
func (pac *PlatformAccountCreate) SetSumGiftCep(i int64) *PlatformAccountCreate {
	pac.mutation.SetSumGiftCep(i)
	return pac
}

// SetNillableSumGiftCep sets the "sum_gift_cep" field if the given value is not nil.
func (pac *PlatformAccountCreate) SetNillableSumGiftCep(i *int64) *PlatformAccountCreate {
	if i != nil {
		pac.SetSumGiftCep(*i)
	}
	return pac
}

// SetGiftCep sets the "gift_cep" field.
func (pac *PlatformAccountCreate) SetGiftCep(i int64) *PlatformAccountCreate {
	pac.mutation.SetGiftCep(i)
	return pac
}

// SetNillableGiftCep sets the "gift_cep" field if the given value is not nil.
func (pac *PlatformAccountCreate) SetNillableGiftCep(i *int64) *PlatformAccountCreate {
	if i != nil {
		pac.SetGiftCep(*i)
	}
	return pac
}

// SetID sets the "id" field.
func (pac *PlatformAccountCreate) SetID(i int64) *PlatformAccountCreate {
	pac.mutation.SetID(i)
	return pac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pac *PlatformAccountCreate) SetNillableID(i *int64) *PlatformAccountCreate {
	if i != nil {
		pac.SetID(*i)
	}
	return pac
}

// AddEarnBillIDs adds the "earn_bills" edge to the EarnBill entity by IDs.
func (pac *PlatformAccountCreate) AddEarnBillIDs(ids ...int64) *PlatformAccountCreate {
	pac.mutation.AddEarnBillIDs(ids...)
	return pac
}

// AddEarnBills adds the "earn_bills" edges to the EarnBill entity.
func (pac *PlatformAccountCreate) AddEarnBills(e ...*EarnBill) *PlatformAccountCreate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pac.AddEarnBillIDs(ids...)
}

// Mutation returns the PlatformAccountMutation object of the builder.
func (pac *PlatformAccountCreate) Mutation() *PlatformAccountMutation {
	return pac.mutation
}

// Save creates the PlatformAccount in the database.
func (pac *PlatformAccountCreate) Save(ctx context.Context) (*PlatformAccount, error) {
	pac.defaults()
	return withHooks(ctx, pac.sqlSave, pac.mutation, pac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pac *PlatformAccountCreate) SaveX(ctx context.Context) *PlatformAccount {
	v, err := pac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pac *PlatformAccountCreate) Exec(ctx context.Context) error {
	_, err := pac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pac *PlatformAccountCreate) ExecX(ctx context.Context) {
	if err := pac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pac *PlatformAccountCreate) defaults() {
	if _, ok := pac.mutation.CreatedBy(); !ok {
		v := platformaccount.DefaultCreatedBy
		pac.mutation.SetCreatedBy(v)
	}
	if _, ok := pac.mutation.UpdatedBy(); !ok {
		v := platformaccount.DefaultUpdatedBy
		pac.mutation.SetUpdatedBy(v)
	}
	if _, ok := pac.mutation.CreatedAt(); !ok {
		v := platformaccount.DefaultCreatedAt()
		pac.mutation.SetCreatedAt(v)
	}
	if _, ok := pac.mutation.UpdatedAt(); !ok {
		v := platformaccount.DefaultUpdatedAt()
		pac.mutation.SetUpdatedAt(v)
	}
	if _, ok := pac.mutation.DeletedAt(); !ok {
		v := platformaccount.DefaultDeletedAt
		pac.mutation.SetDeletedAt(v)
	}
	if _, ok := pac.mutation.GetType(); !ok {
		v := platformaccount.DefaultType
		pac.mutation.SetType(v)
	}
	if _, ok := pac.mutation.SumTotalCep(); !ok {
		v := platformaccount.DefaultSumTotalCep
		pac.mutation.SetSumTotalCep(v)
	}
	if _, ok := pac.mutation.TotalCep(); !ok {
		v := platformaccount.DefaultTotalCep
		pac.mutation.SetTotalCep(v)
	}
	if _, ok := pac.mutation.SumPureCep(); !ok {
		v := platformaccount.DefaultSumPureCep
		pac.mutation.SetSumPureCep(v)
	}
	if _, ok := pac.mutation.PureCep(); !ok {
		v := platformaccount.DefaultPureCep
		pac.mutation.SetPureCep(v)
	}
	if _, ok := pac.mutation.SumGiftCep(); !ok {
		v := platformaccount.DefaultSumGiftCep
		pac.mutation.SetSumGiftCep(v)
	}
	if _, ok := pac.mutation.GiftCep(); !ok {
		v := platformaccount.DefaultGiftCep
		pac.mutation.SetGiftCep(v)
	}
	if _, ok := pac.mutation.ID(); !ok {
		v := platformaccount.DefaultID()
		pac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pac *PlatformAccountCreate) check() error {
	if _, ok := pac.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "PlatformAccount.created_by"`)}
	}
	if _, ok := pac.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "PlatformAccount.updated_by"`)}
	}
	if _, ok := pac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "PlatformAccount.created_at"`)}
	}
	if _, ok := pac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "PlatformAccount.updated_at"`)}
	}
	if _, ok := pac.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "PlatformAccount.deleted_at"`)}
	}
	if _, ok := pac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`cep_ent: missing required field "PlatformAccount.type"`)}
	}
	if v, ok := pac.mutation.GetType(); ok {
		if err := platformaccount.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "PlatformAccount.type": %w`, err)}
		}
	}
	if _, ok := pac.mutation.SumTotalCep(); !ok {
		return &ValidationError{Name: "sum_total_cep", err: errors.New(`cep_ent: missing required field "PlatformAccount.sum_total_cep"`)}
	}
	if _, ok := pac.mutation.TotalCep(); !ok {
		return &ValidationError{Name: "total_cep", err: errors.New(`cep_ent: missing required field "PlatformAccount.total_cep"`)}
	}
	if _, ok := pac.mutation.SumPureCep(); !ok {
		return &ValidationError{Name: "sum_pure_cep", err: errors.New(`cep_ent: missing required field "PlatformAccount.sum_pure_cep"`)}
	}
	if _, ok := pac.mutation.PureCep(); !ok {
		return &ValidationError{Name: "pure_cep", err: errors.New(`cep_ent: missing required field "PlatformAccount.pure_cep"`)}
	}
	if _, ok := pac.mutation.SumGiftCep(); !ok {
		return &ValidationError{Name: "sum_gift_cep", err: errors.New(`cep_ent: missing required field "PlatformAccount.sum_gift_cep"`)}
	}
	if _, ok := pac.mutation.GiftCep(); !ok {
		return &ValidationError{Name: "gift_cep", err: errors.New(`cep_ent: missing required field "PlatformAccount.gift_cep"`)}
	}
	return nil
}

func (pac *PlatformAccountCreate) sqlSave(ctx context.Context) (*PlatformAccount, error) {
	if err := pac.check(); err != nil {
		return nil, err
	}
	_node, _spec := pac.createSpec()
	if err := sqlgraph.CreateNode(ctx, pac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	pac.mutation.id = &_node.ID
	pac.mutation.done = true
	return _node, nil
}

func (pac *PlatformAccountCreate) createSpec() (*PlatformAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &PlatformAccount{config: pac.config}
		_spec = sqlgraph.NewCreateSpec(platformaccount.Table, sqlgraph.NewFieldSpec(platformaccount.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = pac.conflict
	if id, ok := pac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pac.mutation.CreatedBy(); ok {
		_spec.SetField(platformaccount.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := pac.mutation.UpdatedBy(); ok {
		_spec.SetField(platformaccount.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := pac.mutation.CreatedAt(); ok {
		_spec.SetField(platformaccount.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pac.mutation.UpdatedAt(); ok {
		_spec.SetField(platformaccount.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pac.mutation.DeletedAt(); ok {
		_spec.SetField(platformaccount.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := pac.mutation.GetType(); ok {
		_spec.SetField(platformaccount.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := pac.mutation.SumTotalCep(); ok {
		_spec.SetField(platformaccount.FieldSumTotalCep, field.TypeInt64, value)
		_node.SumTotalCep = value
	}
	if value, ok := pac.mutation.TotalCep(); ok {
		_spec.SetField(platformaccount.FieldTotalCep, field.TypeInt64, value)
		_node.TotalCep = value
	}
	if value, ok := pac.mutation.SumPureCep(); ok {
		_spec.SetField(platformaccount.FieldSumPureCep, field.TypeInt64, value)
		_node.SumPureCep = value
	}
	if value, ok := pac.mutation.PureCep(); ok {
		_spec.SetField(platformaccount.FieldPureCep, field.TypeInt64, value)
		_node.PureCep = value
	}
	if value, ok := pac.mutation.SumGiftCep(); ok {
		_spec.SetField(platformaccount.FieldSumGiftCep, field.TypeInt64, value)
		_node.SumGiftCep = value
	}
	if value, ok := pac.mutation.GiftCep(); ok {
		_spec.SetField(platformaccount.FieldGiftCep, field.TypeInt64, value)
		_node.GiftCep = value
	}
	if nodes := pac.mutation.EarnBillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformaccount.EarnBillsTable,
			Columns: []string{platformaccount.EarnBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earnbill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PlatformAccount.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlatformAccountUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (pac *PlatformAccountCreate) OnConflict(opts ...sql.ConflictOption) *PlatformAccountUpsertOne {
	pac.conflict = opts
	return &PlatformAccountUpsertOne{
		create: pac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PlatformAccount.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pac *PlatformAccountCreate) OnConflictColumns(columns ...string) *PlatformAccountUpsertOne {
	pac.conflict = append(pac.conflict, sql.ConflictColumns(columns...))
	return &PlatformAccountUpsertOne{
		create: pac,
	}
}

type (
	// PlatformAccountUpsertOne is the builder for "upsert"-ing
	//  one PlatformAccount node.
	PlatformAccountUpsertOne struct {
		create *PlatformAccountCreate
	}

	// PlatformAccountUpsert is the "OnConflict" setter.
	PlatformAccountUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *PlatformAccountUpsert) SetCreatedBy(v int64) *PlatformAccountUpsert {
	u.Set(platformaccount.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PlatformAccountUpsert) UpdateCreatedBy() *PlatformAccountUpsert {
	u.SetExcluded(platformaccount.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *PlatformAccountUpsert) AddCreatedBy(v int64) *PlatformAccountUpsert {
	u.Add(platformaccount.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PlatformAccountUpsert) SetUpdatedBy(v int64) *PlatformAccountUpsert {
	u.Set(platformaccount.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PlatformAccountUpsert) UpdateUpdatedBy() *PlatformAccountUpsert {
	u.SetExcluded(platformaccount.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *PlatformAccountUpsert) AddUpdatedBy(v int64) *PlatformAccountUpsert {
	u.Add(platformaccount.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlatformAccountUpsert) SetUpdatedAt(v time.Time) *PlatformAccountUpsert {
	u.Set(platformaccount.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlatformAccountUpsert) UpdateUpdatedAt() *PlatformAccountUpsert {
	u.SetExcluded(platformaccount.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PlatformAccountUpsert) SetDeletedAt(v time.Time) *PlatformAccountUpsert {
	u.Set(platformaccount.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PlatformAccountUpsert) UpdateDeletedAt() *PlatformAccountUpsert {
	u.SetExcluded(platformaccount.FieldDeletedAt)
	return u
}

// SetType sets the "type" field.
func (u *PlatformAccountUpsert) SetType(v platformaccount.Type) *PlatformAccountUpsert {
	u.Set(platformaccount.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PlatformAccountUpsert) UpdateType() *PlatformAccountUpsert {
	u.SetExcluded(platformaccount.FieldType)
	return u
}

// SetSumTotalCep sets the "sum_total_cep" field.
func (u *PlatformAccountUpsert) SetSumTotalCep(v int64) *PlatformAccountUpsert {
	u.Set(platformaccount.FieldSumTotalCep, v)
	return u
}

// UpdateSumTotalCep sets the "sum_total_cep" field to the value that was provided on create.
func (u *PlatformAccountUpsert) UpdateSumTotalCep() *PlatformAccountUpsert {
	u.SetExcluded(platformaccount.FieldSumTotalCep)
	return u
}

// AddSumTotalCep adds v to the "sum_total_cep" field.
func (u *PlatformAccountUpsert) AddSumTotalCep(v int64) *PlatformAccountUpsert {
	u.Add(platformaccount.FieldSumTotalCep, v)
	return u
}

// SetTotalCep sets the "total_cep" field.
func (u *PlatformAccountUpsert) SetTotalCep(v int64) *PlatformAccountUpsert {
	u.Set(platformaccount.FieldTotalCep, v)
	return u
}

// UpdateTotalCep sets the "total_cep" field to the value that was provided on create.
func (u *PlatformAccountUpsert) UpdateTotalCep() *PlatformAccountUpsert {
	u.SetExcluded(platformaccount.FieldTotalCep)
	return u
}

// AddTotalCep adds v to the "total_cep" field.
func (u *PlatformAccountUpsert) AddTotalCep(v int64) *PlatformAccountUpsert {
	u.Add(platformaccount.FieldTotalCep, v)
	return u
}

// SetSumPureCep sets the "sum_pure_cep" field.
func (u *PlatformAccountUpsert) SetSumPureCep(v int64) *PlatformAccountUpsert {
	u.Set(platformaccount.FieldSumPureCep, v)
	return u
}

// UpdateSumPureCep sets the "sum_pure_cep" field to the value that was provided on create.
func (u *PlatformAccountUpsert) UpdateSumPureCep() *PlatformAccountUpsert {
	u.SetExcluded(platformaccount.FieldSumPureCep)
	return u
}

// AddSumPureCep adds v to the "sum_pure_cep" field.
func (u *PlatformAccountUpsert) AddSumPureCep(v int64) *PlatformAccountUpsert {
	u.Add(platformaccount.FieldSumPureCep, v)
	return u
}

// SetPureCep sets the "pure_cep" field.
func (u *PlatformAccountUpsert) SetPureCep(v int64) *PlatformAccountUpsert {
	u.Set(platformaccount.FieldPureCep, v)
	return u
}

// UpdatePureCep sets the "pure_cep" field to the value that was provided on create.
func (u *PlatformAccountUpsert) UpdatePureCep() *PlatformAccountUpsert {
	u.SetExcluded(platformaccount.FieldPureCep)
	return u
}

// AddPureCep adds v to the "pure_cep" field.
func (u *PlatformAccountUpsert) AddPureCep(v int64) *PlatformAccountUpsert {
	u.Add(platformaccount.FieldPureCep, v)
	return u
}

// SetSumGiftCep sets the "sum_gift_cep" field.
func (u *PlatformAccountUpsert) SetSumGiftCep(v int64) *PlatformAccountUpsert {
	u.Set(platformaccount.FieldSumGiftCep, v)
	return u
}

// UpdateSumGiftCep sets the "sum_gift_cep" field to the value that was provided on create.
func (u *PlatformAccountUpsert) UpdateSumGiftCep() *PlatformAccountUpsert {
	u.SetExcluded(platformaccount.FieldSumGiftCep)
	return u
}

// AddSumGiftCep adds v to the "sum_gift_cep" field.
func (u *PlatformAccountUpsert) AddSumGiftCep(v int64) *PlatformAccountUpsert {
	u.Add(platformaccount.FieldSumGiftCep, v)
	return u
}

// SetGiftCep sets the "gift_cep" field.
func (u *PlatformAccountUpsert) SetGiftCep(v int64) *PlatformAccountUpsert {
	u.Set(platformaccount.FieldGiftCep, v)
	return u
}

// UpdateGiftCep sets the "gift_cep" field to the value that was provided on create.
func (u *PlatformAccountUpsert) UpdateGiftCep() *PlatformAccountUpsert {
	u.SetExcluded(platformaccount.FieldGiftCep)
	return u
}

// AddGiftCep adds v to the "gift_cep" field.
func (u *PlatformAccountUpsert) AddGiftCep(v int64) *PlatformAccountUpsert {
	u.Add(platformaccount.FieldGiftCep, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PlatformAccount.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(platformaccount.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PlatformAccountUpsertOne) UpdateNewValues() *PlatformAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(platformaccount.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(platformaccount.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PlatformAccount.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PlatformAccountUpsertOne) Ignore() *PlatformAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlatformAccountUpsertOne) DoNothing() *PlatformAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlatformAccountCreate.OnConflict
// documentation for more info.
func (u *PlatformAccountUpsertOne) Update(set func(*PlatformAccountUpsert)) *PlatformAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlatformAccountUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *PlatformAccountUpsertOne) SetCreatedBy(v int64) *PlatformAccountUpsertOne {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *PlatformAccountUpsertOne) AddCreatedBy(v int64) *PlatformAccountUpsertOne {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PlatformAccountUpsertOne) UpdateCreatedBy() *PlatformAccountUpsertOne {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PlatformAccountUpsertOne) SetUpdatedBy(v int64) *PlatformAccountUpsertOne {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *PlatformAccountUpsertOne) AddUpdatedBy(v int64) *PlatformAccountUpsertOne {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PlatformAccountUpsertOne) UpdateUpdatedBy() *PlatformAccountUpsertOne {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlatformAccountUpsertOne) SetUpdatedAt(v time.Time) *PlatformAccountUpsertOne {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlatformAccountUpsertOne) UpdateUpdatedAt() *PlatformAccountUpsertOne {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PlatformAccountUpsertOne) SetDeletedAt(v time.Time) *PlatformAccountUpsertOne {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PlatformAccountUpsertOne) UpdateDeletedAt() *PlatformAccountUpsertOne {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetType sets the "type" field.
func (u *PlatformAccountUpsertOne) SetType(v platformaccount.Type) *PlatformAccountUpsertOne {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PlatformAccountUpsertOne) UpdateType() *PlatformAccountUpsertOne {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.UpdateType()
	})
}

// SetSumTotalCep sets the "sum_total_cep" field.
func (u *PlatformAccountUpsertOne) SetSumTotalCep(v int64) *PlatformAccountUpsertOne {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.SetSumTotalCep(v)
	})
}

// AddSumTotalCep adds v to the "sum_total_cep" field.
func (u *PlatformAccountUpsertOne) AddSumTotalCep(v int64) *PlatformAccountUpsertOne {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.AddSumTotalCep(v)
	})
}

// UpdateSumTotalCep sets the "sum_total_cep" field to the value that was provided on create.
func (u *PlatformAccountUpsertOne) UpdateSumTotalCep() *PlatformAccountUpsertOne {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.UpdateSumTotalCep()
	})
}

// SetTotalCep sets the "total_cep" field.
func (u *PlatformAccountUpsertOne) SetTotalCep(v int64) *PlatformAccountUpsertOne {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.SetTotalCep(v)
	})
}

// AddTotalCep adds v to the "total_cep" field.
func (u *PlatformAccountUpsertOne) AddTotalCep(v int64) *PlatformAccountUpsertOne {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.AddTotalCep(v)
	})
}

// UpdateTotalCep sets the "total_cep" field to the value that was provided on create.
func (u *PlatformAccountUpsertOne) UpdateTotalCep() *PlatformAccountUpsertOne {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.UpdateTotalCep()
	})
}

// SetSumPureCep sets the "sum_pure_cep" field.
func (u *PlatformAccountUpsertOne) SetSumPureCep(v int64) *PlatformAccountUpsertOne {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.SetSumPureCep(v)
	})
}

// AddSumPureCep adds v to the "sum_pure_cep" field.
func (u *PlatformAccountUpsertOne) AddSumPureCep(v int64) *PlatformAccountUpsertOne {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.AddSumPureCep(v)
	})
}

// UpdateSumPureCep sets the "sum_pure_cep" field to the value that was provided on create.
func (u *PlatformAccountUpsertOne) UpdateSumPureCep() *PlatformAccountUpsertOne {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.UpdateSumPureCep()
	})
}

// SetPureCep sets the "pure_cep" field.
func (u *PlatformAccountUpsertOne) SetPureCep(v int64) *PlatformAccountUpsertOne {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.SetPureCep(v)
	})
}

// AddPureCep adds v to the "pure_cep" field.
func (u *PlatformAccountUpsertOne) AddPureCep(v int64) *PlatformAccountUpsertOne {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.AddPureCep(v)
	})
}

// UpdatePureCep sets the "pure_cep" field to the value that was provided on create.
func (u *PlatformAccountUpsertOne) UpdatePureCep() *PlatformAccountUpsertOne {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.UpdatePureCep()
	})
}

// SetSumGiftCep sets the "sum_gift_cep" field.
func (u *PlatformAccountUpsertOne) SetSumGiftCep(v int64) *PlatformAccountUpsertOne {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.SetSumGiftCep(v)
	})
}

// AddSumGiftCep adds v to the "sum_gift_cep" field.
func (u *PlatformAccountUpsertOne) AddSumGiftCep(v int64) *PlatformAccountUpsertOne {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.AddSumGiftCep(v)
	})
}

// UpdateSumGiftCep sets the "sum_gift_cep" field to the value that was provided on create.
func (u *PlatformAccountUpsertOne) UpdateSumGiftCep() *PlatformAccountUpsertOne {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.UpdateSumGiftCep()
	})
}

// SetGiftCep sets the "gift_cep" field.
func (u *PlatformAccountUpsertOne) SetGiftCep(v int64) *PlatformAccountUpsertOne {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.SetGiftCep(v)
	})
}

// AddGiftCep adds v to the "gift_cep" field.
func (u *PlatformAccountUpsertOne) AddGiftCep(v int64) *PlatformAccountUpsertOne {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.AddGiftCep(v)
	})
}

// UpdateGiftCep sets the "gift_cep" field to the value that was provided on create.
func (u *PlatformAccountUpsertOne) UpdateGiftCep() *PlatformAccountUpsertOne {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.UpdateGiftCep()
	})
}

// Exec executes the query.
func (u *PlatformAccountUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for PlatformAccountCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlatformAccountUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PlatformAccountUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PlatformAccountUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PlatformAccountCreateBulk is the builder for creating many PlatformAccount entities in bulk.
type PlatformAccountCreateBulk struct {
	config
	err      error
	builders []*PlatformAccountCreate
	conflict []sql.ConflictOption
}

// Save creates the PlatformAccount entities in the database.
func (pacb *PlatformAccountCreateBulk) Save(ctx context.Context) ([]*PlatformAccount, error) {
	if pacb.err != nil {
		return nil, pacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pacb.builders))
	nodes := make([]*PlatformAccount, len(pacb.builders))
	mutators := make([]Mutator, len(pacb.builders))
	for i := range pacb.builders {
		func(i int, root context.Context) {
			builder := pacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlatformAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pacb *PlatformAccountCreateBulk) SaveX(ctx context.Context) []*PlatformAccount {
	v, err := pacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pacb *PlatformAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := pacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pacb *PlatformAccountCreateBulk) ExecX(ctx context.Context) {
	if err := pacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PlatformAccount.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlatformAccountUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (pacb *PlatformAccountCreateBulk) OnConflict(opts ...sql.ConflictOption) *PlatformAccountUpsertBulk {
	pacb.conflict = opts
	return &PlatformAccountUpsertBulk{
		create: pacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PlatformAccount.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pacb *PlatformAccountCreateBulk) OnConflictColumns(columns ...string) *PlatformAccountUpsertBulk {
	pacb.conflict = append(pacb.conflict, sql.ConflictColumns(columns...))
	return &PlatformAccountUpsertBulk{
		create: pacb,
	}
}

// PlatformAccountUpsertBulk is the builder for "upsert"-ing
// a bulk of PlatformAccount nodes.
type PlatformAccountUpsertBulk struct {
	create *PlatformAccountCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PlatformAccount.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(platformaccount.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PlatformAccountUpsertBulk) UpdateNewValues() *PlatformAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(platformaccount.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(platformaccount.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PlatformAccount.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PlatformAccountUpsertBulk) Ignore() *PlatformAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlatformAccountUpsertBulk) DoNothing() *PlatformAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlatformAccountCreateBulk.OnConflict
// documentation for more info.
func (u *PlatformAccountUpsertBulk) Update(set func(*PlatformAccountUpsert)) *PlatformAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlatformAccountUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *PlatformAccountUpsertBulk) SetCreatedBy(v int64) *PlatformAccountUpsertBulk {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *PlatformAccountUpsertBulk) AddCreatedBy(v int64) *PlatformAccountUpsertBulk {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PlatformAccountUpsertBulk) UpdateCreatedBy() *PlatformAccountUpsertBulk {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PlatformAccountUpsertBulk) SetUpdatedBy(v int64) *PlatformAccountUpsertBulk {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *PlatformAccountUpsertBulk) AddUpdatedBy(v int64) *PlatformAccountUpsertBulk {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PlatformAccountUpsertBulk) UpdateUpdatedBy() *PlatformAccountUpsertBulk {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlatformAccountUpsertBulk) SetUpdatedAt(v time.Time) *PlatformAccountUpsertBulk {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlatformAccountUpsertBulk) UpdateUpdatedAt() *PlatformAccountUpsertBulk {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PlatformAccountUpsertBulk) SetDeletedAt(v time.Time) *PlatformAccountUpsertBulk {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PlatformAccountUpsertBulk) UpdateDeletedAt() *PlatformAccountUpsertBulk {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetType sets the "type" field.
func (u *PlatformAccountUpsertBulk) SetType(v platformaccount.Type) *PlatformAccountUpsertBulk {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PlatformAccountUpsertBulk) UpdateType() *PlatformAccountUpsertBulk {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.UpdateType()
	})
}

// SetSumTotalCep sets the "sum_total_cep" field.
func (u *PlatformAccountUpsertBulk) SetSumTotalCep(v int64) *PlatformAccountUpsertBulk {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.SetSumTotalCep(v)
	})
}

// AddSumTotalCep adds v to the "sum_total_cep" field.
func (u *PlatformAccountUpsertBulk) AddSumTotalCep(v int64) *PlatformAccountUpsertBulk {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.AddSumTotalCep(v)
	})
}

// UpdateSumTotalCep sets the "sum_total_cep" field to the value that was provided on create.
func (u *PlatformAccountUpsertBulk) UpdateSumTotalCep() *PlatformAccountUpsertBulk {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.UpdateSumTotalCep()
	})
}

// SetTotalCep sets the "total_cep" field.
func (u *PlatformAccountUpsertBulk) SetTotalCep(v int64) *PlatformAccountUpsertBulk {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.SetTotalCep(v)
	})
}

// AddTotalCep adds v to the "total_cep" field.
func (u *PlatformAccountUpsertBulk) AddTotalCep(v int64) *PlatformAccountUpsertBulk {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.AddTotalCep(v)
	})
}

// UpdateTotalCep sets the "total_cep" field to the value that was provided on create.
func (u *PlatformAccountUpsertBulk) UpdateTotalCep() *PlatformAccountUpsertBulk {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.UpdateTotalCep()
	})
}

// SetSumPureCep sets the "sum_pure_cep" field.
func (u *PlatformAccountUpsertBulk) SetSumPureCep(v int64) *PlatformAccountUpsertBulk {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.SetSumPureCep(v)
	})
}

// AddSumPureCep adds v to the "sum_pure_cep" field.
func (u *PlatformAccountUpsertBulk) AddSumPureCep(v int64) *PlatformAccountUpsertBulk {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.AddSumPureCep(v)
	})
}

// UpdateSumPureCep sets the "sum_pure_cep" field to the value that was provided on create.
func (u *PlatformAccountUpsertBulk) UpdateSumPureCep() *PlatformAccountUpsertBulk {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.UpdateSumPureCep()
	})
}

// SetPureCep sets the "pure_cep" field.
func (u *PlatformAccountUpsertBulk) SetPureCep(v int64) *PlatformAccountUpsertBulk {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.SetPureCep(v)
	})
}

// AddPureCep adds v to the "pure_cep" field.
func (u *PlatformAccountUpsertBulk) AddPureCep(v int64) *PlatformAccountUpsertBulk {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.AddPureCep(v)
	})
}

// UpdatePureCep sets the "pure_cep" field to the value that was provided on create.
func (u *PlatformAccountUpsertBulk) UpdatePureCep() *PlatformAccountUpsertBulk {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.UpdatePureCep()
	})
}

// SetSumGiftCep sets the "sum_gift_cep" field.
func (u *PlatformAccountUpsertBulk) SetSumGiftCep(v int64) *PlatformAccountUpsertBulk {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.SetSumGiftCep(v)
	})
}

// AddSumGiftCep adds v to the "sum_gift_cep" field.
func (u *PlatformAccountUpsertBulk) AddSumGiftCep(v int64) *PlatformAccountUpsertBulk {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.AddSumGiftCep(v)
	})
}

// UpdateSumGiftCep sets the "sum_gift_cep" field to the value that was provided on create.
func (u *PlatformAccountUpsertBulk) UpdateSumGiftCep() *PlatformAccountUpsertBulk {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.UpdateSumGiftCep()
	})
}

// SetGiftCep sets the "gift_cep" field.
func (u *PlatformAccountUpsertBulk) SetGiftCep(v int64) *PlatformAccountUpsertBulk {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.SetGiftCep(v)
	})
}

// AddGiftCep adds v to the "gift_cep" field.
func (u *PlatformAccountUpsertBulk) AddGiftCep(v int64) *PlatformAccountUpsertBulk {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.AddGiftCep(v)
	})
}

// UpdateGiftCep sets the "gift_cep" field to the value that was provided on create.
func (u *PlatformAccountUpsertBulk) UpdateGiftCep() *PlatformAccountUpsertBulk {
	return u.Update(func(s *PlatformAccountUpsert) {
		s.UpdateGiftCep()
	})
}

// Exec executes the query.
func (u *PlatformAccountUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the PlatformAccountCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for PlatformAccountCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlatformAccountUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
