// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/device"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/troublededuct"
)

// TroubleDeductCreate is the builder for creating a TroubleDeduct entity.
type TroubleDeductCreate struct {
	config
	mutation *TroubleDeductMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (tdc *TroubleDeductCreate) SetCreatedBy(i int64) *TroubleDeductCreate {
	tdc.mutation.SetCreatedBy(i)
	return tdc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tdc *TroubleDeductCreate) SetNillableCreatedBy(i *int64) *TroubleDeductCreate {
	if i != nil {
		tdc.SetCreatedBy(*i)
	}
	return tdc
}

// SetUpdatedBy sets the "updated_by" field.
func (tdc *TroubleDeductCreate) SetUpdatedBy(i int64) *TroubleDeductCreate {
	tdc.mutation.SetUpdatedBy(i)
	return tdc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tdc *TroubleDeductCreate) SetNillableUpdatedBy(i *int64) *TroubleDeductCreate {
	if i != nil {
		tdc.SetUpdatedBy(*i)
	}
	return tdc
}

// SetCreatedAt sets the "created_at" field.
func (tdc *TroubleDeductCreate) SetCreatedAt(t time.Time) *TroubleDeductCreate {
	tdc.mutation.SetCreatedAt(t)
	return tdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tdc *TroubleDeductCreate) SetNillableCreatedAt(t *time.Time) *TroubleDeductCreate {
	if t != nil {
		tdc.SetCreatedAt(*t)
	}
	return tdc
}

// SetUpdatedAt sets the "updated_at" field.
func (tdc *TroubleDeductCreate) SetUpdatedAt(t time.Time) *TroubleDeductCreate {
	tdc.mutation.SetUpdatedAt(t)
	return tdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tdc *TroubleDeductCreate) SetNillableUpdatedAt(t *time.Time) *TroubleDeductCreate {
	if t != nil {
		tdc.SetUpdatedAt(*t)
	}
	return tdc
}

// SetDeletedAt sets the "deleted_at" field.
func (tdc *TroubleDeductCreate) SetDeletedAt(t time.Time) *TroubleDeductCreate {
	tdc.mutation.SetDeletedAt(t)
	return tdc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tdc *TroubleDeductCreate) SetNillableDeletedAt(t *time.Time) *TroubleDeductCreate {
	if t != nil {
		tdc.SetDeletedAt(*t)
	}
	return tdc
}

// SetDeviceID sets the "device_id" field.
func (tdc *TroubleDeductCreate) SetDeviceID(i int64) *TroubleDeductCreate {
	tdc.mutation.SetDeviceID(i)
	return tdc
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (tdc *TroubleDeductCreate) SetNillableDeviceID(i *int64) *TroubleDeductCreate {
	if i != nil {
		tdc.SetDeviceID(*i)
	}
	return tdc
}

// SetStartedAt sets the "started_at" field.
func (tdc *TroubleDeductCreate) SetStartedAt(t time.Time) *TroubleDeductCreate {
	tdc.mutation.SetStartedAt(t)
	return tdc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (tdc *TroubleDeductCreate) SetNillableStartedAt(t *time.Time) *TroubleDeductCreate {
	if t != nil {
		tdc.SetStartedAt(*t)
	}
	return tdc
}

// SetFinishedAt sets the "finished_at" field.
func (tdc *TroubleDeductCreate) SetFinishedAt(t time.Time) *TroubleDeductCreate {
	tdc.mutation.SetFinishedAt(t)
	return tdc
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (tdc *TroubleDeductCreate) SetNillableFinishedAt(t *time.Time) *TroubleDeductCreate {
	if t != nil {
		tdc.SetFinishedAt(*t)
	}
	return tdc
}

// SetTimeOfDuration sets the "time_of_duration" field.
func (tdc *TroubleDeductCreate) SetTimeOfDuration(f float64) *TroubleDeductCreate {
	tdc.mutation.SetTimeOfDuration(f)
	return tdc
}

// SetNillableTimeOfDuration sets the "time_of_duration" field if the given value is not nil.
func (tdc *TroubleDeductCreate) SetNillableTimeOfDuration(f *float64) *TroubleDeductCreate {
	if f != nil {
		tdc.SetTimeOfDuration(*f)
	}
	return tdc
}

// SetAmount sets the "amount" field.
func (tdc *TroubleDeductCreate) SetAmount(i int64) *TroubleDeductCreate {
	tdc.mutation.SetAmount(i)
	return tdc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tdc *TroubleDeductCreate) SetNillableAmount(i *int64) *TroubleDeductCreate {
	if i != nil {
		tdc.SetAmount(*i)
	}
	return tdc
}

// SetStatus sets the "status" field.
func (tdc *TroubleDeductCreate) SetStatus(t troublededuct.Status) *TroubleDeductCreate {
	tdc.mutation.SetStatus(t)
	return tdc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tdc *TroubleDeductCreate) SetNillableStatus(t *troublededuct.Status) *TroubleDeductCreate {
	if t != nil {
		tdc.SetStatus(*t)
	}
	return tdc
}

// SetID sets the "id" field.
func (tdc *TroubleDeductCreate) SetID(i int64) *TroubleDeductCreate {
	tdc.mutation.SetID(i)
	return tdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tdc *TroubleDeductCreate) SetNillableID(i *int64) *TroubleDeductCreate {
	if i != nil {
		tdc.SetID(*i)
	}
	return tdc
}

// SetDevice sets the "device" edge to the Device entity.
func (tdc *TroubleDeductCreate) SetDevice(d *Device) *TroubleDeductCreate {
	return tdc.SetDeviceID(d.ID)
}

// Mutation returns the TroubleDeductMutation object of the builder.
func (tdc *TroubleDeductCreate) Mutation() *TroubleDeductMutation {
	return tdc.mutation
}

// Save creates the TroubleDeduct in the database.
func (tdc *TroubleDeductCreate) Save(ctx context.Context) (*TroubleDeduct, error) {
	tdc.defaults()
	return withHooks(ctx, tdc.sqlSave, tdc.mutation, tdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tdc *TroubleDeductCreate) SaveX(ctx context.Context) *TroubleDeduct {
	v, err := tdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tdc *TroubleDeductCreate) Exec(ctx context.Context) error {
	_, err := tdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdc *TroubleDeductCreate) ExecX(ctx context.Context) {
	if err := tdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tdc *TroubleDeductCreate) defaults() {
	if _, ok := tdc.mutation.CreatedBy(); !ok {
		v := troublededuct.DefaultCreatedBy
		tdc.mutation.SetCreatedBy(v)
	}
	if _, ok := tdc.mutation.UpdatedBy(); !ok {
		v := troublededuct.DefaultUpdatedBy
		tdc.mutation.SetUpdatedBy(v)
	}
	if _, ok := tdc.mutation.CreatedAt(); !ok {
		v := troublededuct.DefaultCreatedAt()
		tdc.mutation.SetCreatedAt(v)
	}
	if _, ok := tdc.mutation.UpdatedAt(); !ok {
		v := troublededuct.DefaultUpdatedAt()
		tdc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tdc.mutation.DeletedAt(); !ok {
		v := troublededuct.DefaultDeletedAt
		tdc.mutation.SetDeletedAt(v)
	}
	if _, ok := tdc.mutation.DeviceID(); !ok {
		v := troublededuct.DefaultDeviceID
		tdc.mutation.SetDeviceID(v)
	}
	if _, ok := tdc.mutation.StartedAt(); !ok {
		v := troublededuct.DefaultStartedAt
		tdc.mutation.SetStartedAt(v)
	}
	if _, ok := tdc.mutation.FinishedAt(); !ok {
		v := troublededuct.DefaultFinishedAt
		tdc.mutation.SetFinishedAt(v)
	}
	if _, ok := tdc.mutation.TimeOfDuration(); !ok {
		v := troublededuct.DefaultTimeOfDuration
		tdc.mutation.SetTimeOfDuration(v)
	}
	if _, ok := tdc.mutation.Amount(); !ok {
		v := troublededuct.DefaultAmount
		tdc.mutation.SetAmount(v)
	}
	if _, ok := tdc.mutation.Status(); !ok {
		v := troublededuct.DefaultStatus
		tdc.mutation.SetStatus(v)
	}
	if _, ok := tdc.mutation.ID(); !ok {
		v := troublededuct.DefaultID()
		tdc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tdc *TroubleDeductCreate) check() error {
	if _, ok := tdc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "TroubleDeduct.created_by"`)}
	}
	if _, ok := tdc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "TroubleDeduct.updated_by"`)}
	}
	if _, ok := tdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "TroubleDeduct.created_at"`)}
	}
	if _, ok := tdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "TroubleDeduct.updated_at"`)}
	}
	if _, ok := tdc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "TroubleDeduct.deleted_at"`)}
	}
	if _, ok := tdc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`cep_ent: missing required field "TroubleDeduct.device_id"`)}
	}
	if _, ok := tdc.mutation.StartedAt(); !ok {
		return &ValidationError{Name: "started_at", err: errors.New(`cep_ent: missing required field "TroubleDeduct.started_at"`)}
	}
	if _, ok := tdc.mutation.FinishedAt(); !ok {
		return &ValidationError{Name: "finished_at", err: errors.New(`cep_ent: missing required field "TroubleDeduct.finished_at"`)}
	}
	if _, ok := tdc.mutation.TimeOfDuration(); !ok {
		return &ValidationError{Name: "time_of_duration", err: errors.New(`cep_ent: missing required field "TroubleDeduct.time_of_duration"`)}
	}
	if _, ok := tdc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`cep_ent: missing required field "TroubleDeduct.amount"`)}
	}
	if _, ok := tdc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`cep_ent: missing required field "TroubleDeduct.status"`)}
	}
	if v, ok := tdc.mutation.Status(); ok {
		if err := troublededuct.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "TroubleDeduct.status": %w`, err)}
		}
	}
	if _, ok := tdc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device", err: errors.New(`cep_ent: missing required edge "TroubleDeduct.device"`)}
	}
	return nil
}

func (tdc *TroubleDeductCreate) sqlSave(ctx context.Context) (*TroubleDeduct, error) {
	if err := tdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	tdc.mutation.id = &_node.ID
	tdc.mutation.done = true
	return _node, nil
}

func (tdc *TroubleDeductCreate) createSpec() (*TroubleDeduct, *sqlgraph.CreateSpec) {
	var (
		_node = &TroubleDeduct{config: tdc.config}
		_spec = sqlgraph.NewCreateSpec(troublededuct.Table, sqlgraph.NewFieldSpec(troublededuct.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = tdc.conflict
	if id, ok := tdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tdc.mutation.CreatedBy(); ok {
		_spec.SetField(troublededuct.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := tdc.mutation.UpdatedBy(); ok {
		_spec.SetField(troublededuct.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := tdc.mutation.CreatedAt(); ok {
		_spec.SetField(troublededuct.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tdc.mutation.UpdatedAt(); ok {
		_spec.SetField(troublededuct.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tdc.mutation.DeletedAt(); ok {
		_spec.SetField(troublededuct.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := tdc.mutation.StartedAt(); ok {
		_spec.SetField(troublededuct.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := tdc.mutation.FinishedAt(); ok {
		_spec.SetField(troublededuct.FieldFinishedAt, field.TypeTime, value)
		_node.FinishedAt = value
	}
	if value, ok := tdc.mutation.TimeOfDuration(); ok {
		_spec.SetField(troublededuct.FieldTimeOfDuration, field.TypeFloat64, value)
		_node.TimeOfDuration = value
	}
	if value, ok := tdc.mutation.Amount(); ok {
		_spec.SetField(troublededuct.FieldAmount, field.TypeInt64, value)
		_node.Amount = value
	}
	if value, ok := tdc.mutation.Status(); ok {
		_spec.SetField(troublededuct.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := tdc.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   troublededuct.DeviceTable,
			Columns: []string{troublededuct.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DeviceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TroubleDeduct.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TroubleDeductUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (tdc *TroubleDeductCreate) OnConflict(opts ...sql.ConflictOption) *TroubleDeductUpsertOne {
	tdc.conflict = opts
	return &TroubleDeductUpsertOne{
		create: tdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TroubleDeduct.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tdc *TroubleDeductCreate) OnConflictColumns(columns ...string) *TroubleDeductUpsertOne {
	tdc.conflict = append(tdc.conflict, sql.ConflictColumns(columns...))
	return &TroubleDeductUpsertOne{
		create: tdc,
	}
}

type (
	// TroubleDeductUpsertOne is the builder for "upsert"-ing
	//  one TroubleDeduct node.
	TroubleDeductUpsertOne struct {
		create *TroubleDeductCreate
	}

	// TroubleDeductUpsert is the "OnConflict" setter.
	TroubleDeductUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *TroubleDeductUpsert) SetCreatedBy(v int64) *TroubleDeductUpsert {
	u.Set(troublededuct.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *TroubleDeductUpsert) UpdateCreatedBy() *TroubleDeductUpsert {
	u.SetExcluded(troublededuct.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *TroubleDeductUpsert) AddCreatedBy(v int64) *TroubleDeductUpsert {
	u.Add(troublededuct.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *TroubleDeductUpsert) SetUpdatedBy(v int64) *TroubleDeductUpsert {
	u.Set(troublededuct.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *TroubleDeductUpsert) UpdateUpdatedBy() *TroubleDeductUpsert {
	u.SetExcluded(troublededuct.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *TroubleDeductUpsert) AddUpdatedBy(v int64) *TroubleDeductUpsert {
	u.Add(troublededuct.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TroubleDeductUpsert) SetUpdatedAt(v time.Time) *TroubleDeductUpsert {
	u.Set(troublededuct.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TroubleDeductUpsert) UpdateUpdatedAt() *TroubleDeductUpsert {
	u.SetExcluded(troublededuct.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TroubleDeductUpsert) SetDeletedAt(v time.Time) *TroubleDeductUpsert {
	u.Set(troublededuct.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TroubleDeductUpsert) UpdateDeletedAt() *TroubleDeductUpsert {
	u.SetExcluded(troublededuct.FieldDeletedAt)
	return u
}

// SetDeviceID sets the "device_id" field.
func (u *TroubleDeductUpsert) SetDeviceID(v int64) *TroubleDeductUpsert {
	u.Set(troublededuct.FieldDeviceID, v)
	return u
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *TroubleDeductUpsert) UpdateDeviceID() *TroubleDeductUpsert {
	u.SetExcluded(troublededuct.FieldDeviceID)
	return u
}

// SetStartedAt sets the "started_at" field.
func (u *TroubleDeductUpsert) SetStartedAt(v time.Time) *TroubleDeductUpsert {
	u.Set(troublededuct.FieldStartedAt, v)
	return u
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *TroubleDeductUpsert) UpdateStartedAt() *TroubleDeductUpsert {
	u.SetExcluded(troublededuct.FieldStartedAt)
	return u
}

// SetFinishedAt sets the "finished_at" field.
func (u *TroubleDeductUpsert) SetFinishedAt(v time.Time) *TroubleDeductUpsert {
	u.Set(troublededuct.FieldFinishedAt, v)
	return u
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *TroubleDeductUpsert) UpdateFinishedAt() *TroubleDeductUpsert {
	u.SetExcluded(troublededuct.FieldFinishedAt)
	return u
}

// SetTimeOfDuration sets the "time_of_duration" field.
func (u *TroubleDeductUpsert) SetTimeOfDuration(v float64) *TroubleDeductUpsert {
	u.Set(troublededuct.FieldTimeOfDuration, v)
	return u
}

// UpdateTimeOfDuration sets the "time_of_duration" field to the value that was provided on create.
func (u *TroubleDeductUpsert) UpdateTimeOfDuration() *TroubleDeductUpsert {
	u.SetExcluded(troublededuct.FieldTimeOfDuration)
	return u
}

// AddTimeOfDuration adds v to the "time_of_duration" field.
func (u *TroubleDeductUpsert) AddTimeOfDuration(v float64) *TroubleDeductUpsert {
	u.Add(troublededuct.FieldTimeOfDuration, v)
	return u
}

// SetAmount sets the "amount" field.
func (u *TroubleDeductUpsert) SetAmount(v int64) *TroubleDeductUpsert {
	u.Set(troublededuct.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *TroubleDeductUpsert) UpdateAmount() *TroubleDeductUpsert {
	u.SetExcluded(troublededuct.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *TroubleDeductUpsert) AddAmount(v int64) *TroubleDeductUpsert {
	u.Add(troublededuct.FieldAmount, v)
	return u
}

// SetStatus sets the "status" field.
func (u *TroubleDeductUpsert) SetStatus(v troublededuct.Status) *TroubleDeductUpsert {
	u.Set(troublededuct.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TroubleDeductUpsert) UpdateStatus() *TroubleDeductUpsert {
	u.SetExcluded(troublededuct.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TroubleDeduct.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(troublededuct.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TroubleDeductUpsertOne) UpdateNewValues() *TroubleDeductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(troublededuct.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(troublededuct.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TroubleDeduct.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TroubleDeductUpsertOne) Ignore() *TroubleDeductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TroubleDeductUpsertOne) DoNothing() *TroubleDeductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TroubleDeductCreate.OnConflict
// documentation for more info.
func (u *TroubleDeductUpsertOne) Update(set func(*TroubleDeductUpsert)) *TroubleDeductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TroubleDeductUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *TroubleDeductUpsertOne) SetCreatedBy(v int64) *TroubleDeductUpsertOne {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *TroubleDeductUpsertOne) AddCreatedBy(v int64) *TroubleDeductUpsertOne {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *TroubleDeductUpsertOne) UpdateCreatedBy() *TroubleDeductUpsertOne {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *TroubleDeductUpsertOne) SetUpdatedBy(v int64) *TroubleDeductUpsertOne {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *TroubleDeductUpsertOne) AddUpdatedBy(v int64) *TroubleDeductUpsertOne {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *TroubleDeductUpsertOne) UpdateUpdatedBy() *TroubleDeductUpsertOne {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TroubleDeductUpsertOne) SetUpdatedAt(v time.Time) *TroubleDeductUpsertOne {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TroubleDeductUpsertOne) UpdateUpdatedAt() *TroubleDeductUpsertOne {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TroubleDeductUpsertOne) SetDeletedAt(v time.Time) *TroubleDeductUpsertOne {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TroubleDeductUpsertOne) UpdateDeletedAt() *TroubleDeductUpsertOne {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeviceID sets the "device_id" field.
func (u *TroubleDeductUpsertOne) SetDeviceID(v int64) *TroubleDeductUpsertOne {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.SetDeviceID(v)
	})
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *TroubleDeductUpsertOne) UpdateDeviceID() *TroubleDeductUpsertOne {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.UpdateDeviceID()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *TroubleDeductUpsertOne) SetStartedAt(v time.Time) *TroubleDeductUpsertOne {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *TroubleDeductUpsertOne) UpdateStartedAt() *TroubleDeductUpsertOne {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.UpdateStartedAt()
	})
}

// SetFinishedAt sets the "finished_at" field.
func (u *TroubleDeductUpsertOne) SetFinishedAt(v time.Time) *TroubleDeductUpsertOne {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.SetFinishedAt(v)
	})
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *TroubleDeductUpsertOne) UpdateFinishedAt() *TroubleDeductUpsertOne {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.UpdateFinishedAt()
	})
}

// SetTimeOfDuration sets the "time_of_duration" field.
func (u *TroubleDeductUpsertOne) SetTimeOfDuration(v float64) *TroubleDeductUpsertOne {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.SetTimeOfDuration(v)
	})
}

// AddTimeOfDuration adds v to the "time_of_duration" field.
func (u *TroubleDeductUpsertOne) AddTimeOfDuration(v float64) *TroubleDeductUpsertOne {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.AddTimeOfDuration(v)
	})
}

// UpdateTimeOfDuration sets the "time_of_duration" field to the value that was provided on create.
func (u *TroubleDeductUpsertOne) UpdateTimeOfDuration() *TroubleDeductUpsertOne {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.UpdateTimeOfDuration()
	})
}

// SetAmount sets the "amount" field.
func (u *TroubleDeductUpsertOne) SetAmount(v int64) *TroubleDeductUpsertOne {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *TroubleDeductUpsertOne) AddAmount(v int64) *TroubleDeductUpsertOne {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *TroubleDeductUpsertOne) UpdateAmount() *TroubleDeductUpsertOne {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.UpdateAmount()
	})
}

// SetStatus sets the "status" field.
func (u *TroubleDeductUpsertOne) SetStatus(v troublededuct.Status) *TroubleDeductUpsertOne {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TroubleDeductUpsertOne) UpdateStatus() *TroubleDeductUpsertOne {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *TroubleDeductUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for TroubleDeductCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TroubleDeductUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TroubleDeductUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TroubleDeductUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TroubleDeductCreateBulk is the builder for creating many TroubleDeduct entities in bulk.
type TroubleDeductCreateBulk struct {
	config
	err      error
	builders []*TroubleDeductCreate
	conflict []sql.ConflictOption
}

// Save creates the TroubleDeduct entities in the database.
func (tdcb *TroubleDeductCreateBulk) Save(ctx context.Context) ([]*TroubleDeduct, error) {
	if tdcb.err != nil {
		return nil, tdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tdcb.builders))
	nodes := make([]*TroubleDeduct, len(tdcb.builders))
	mutators := make([]Mutator, len(tdcb.builders))
	for i := range tdcb.builders {
		func(i int, root context.Context) {
			builder := tdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TroubleDeductMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tdcb *TroubleDeductCreateBulk) SaveX(ctx context.Context) []*TroubleDeduct {
	v, err := tdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tdcb *TroubleDeductCreateBulk) Exec(ctx context.Context) error {
	_, err := tdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdcb *TroubleDeductCreateBulk) ExecX(ctx context.Context) {
	if err := tdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TroubleDeduct.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TroubleDeductUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (tdcb *TroubleDeductCreateBulk) OnConflict(opts ...sql.ConflictOption) *TroubleDeductUpsertBulk {
	tdcb.conflict = opts
	return &TroubleDeductUpsertBulk{
		create: tdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TroubleDeduct.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tdcb *TroubleDeductCreateBulk) OnConflictColumns(columns ...string) *TroubleDeductUpsertBulk {
	tdcb.conflict = append(tdcb.conflict, sql.ConflictColumns(columns...))
	return &TroubleDeductUpsertBulk{
		create: tdcb,
	}
}

// TroubleDeductUpsertBulk is the builder for "upsert"-ing
// a bulk of TroubleDeduct nodes.
type TroubleDeductUpsertBulk struct {
	create *TroubleDeductCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TroubleDeduct.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(troublededuct.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TroubleDeductUpsertBulk) UpdateNewValues() *TroubleDeductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(troublededuct.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(troublededuct.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TroubleDeduct.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TroubleDeductUpsertBulk) Ignore() *TroubleDeductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TroubleDeductUpsertBulk) DoNothing() *TroubleDeductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TroubleDeductCreateBulk.OnConflict
// documentation for more info.
func (u *TroubleDeductUpsertBulk) Update(set func(*TroubleDeductUpsert)) *TroubleDeductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TroubleDeductUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *TroubleDeductUpsertBulk) SetCreatedBy(v int64) *TroubleDeductUpsertBulk {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *TroubleDeductUpsertBulk) AddCreatedBy(v int64) *TroubleDeductUpsertBulk {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *TroubleDeductUpsertBulk) UpdateCreatedBy() *TroubleDeductUpsertBulk {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *TroubleDeductUpsertBulk) SetUpdatedBy(v int64) *TroubleDeductUpsertBulk {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *TroubleDeductUpsertBulk) AddUpdatedBy(v int64) *TroubleDeductUpsertBulk {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *TroubleDeductUpsertBulk) UpdateUpdatedBy() *TroubleDeductUpsertBulk {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TroubleDeductUpsertBulk) SetUpdatedAt(v time.Time) *TroubleDeductUpsertBulk {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TroubleDeductUpsertBulk) UpdateUpdatedAt() *TroubleDeductUpsertBulk {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TroubleDeductUpsertBulk) SetDeletedAt(v time.Time) *TroubleDeductUpsertBulk {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TroubleDeductUpsertBulk) UpdateDeletedAt() *TroubleDeductUpsertBulk {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeviceID sets the "device_id" field.
func (u *TroubleDeductUpsertBulk) SetDeviceID(v int64) *TroubleDeductUpsertBulk {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.SetDeviceID(v)
	})
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *TroubleDeductUpsertBulk) UpdateDeviceID() *TroubleDeductUpsertBulk {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.UpdateDeviceID()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *TroubleDeductUpsertBulk) SetStartedAt(v time.Time) *TroubleDeductUpsertBulk {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *TroubleDeductUpsertBulk) UpdateStartedAt() *TroubleDeductUpsertBulk {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.UpdateStartedAt()
	})
}

// SetFinishedAt sets the "finished_at" field.
func (u *TroubleDeductUpsertBulk) SetFinishedAt(v time.Time) *TroubleDeductUpsertBulk {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.SetFinishedAt(v)
	})
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *TroubleDeductUpsertBulk) UpdateFinishedAt() *TroubleDeductUpsertBulk {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.UpdateFinishedAt()
	})
}

// SetTimeOfDuration sets the "time_of_duration" field.
func (u *TroubleDeductUpsertBulk) SetTimeOfDuration(v float64) *TroubleDeductUpsertBulk {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.SetTimeOfDuration(v)
	})
}

// AddTimeOfDuration adds v to the "time_of_duration" field.
func (u *TroubleDeductUpsertBulk) AddTimeOfDuration(v float64) *TroubleDeductUpsertBulk {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.AddTimeOfDuration(v)
	})
}

// UpdateTimeOfDuration sets the "time_of_duration" field to the value that was provided on create.
func (u *TroubleDeductUpsertBulk) UpdateTimeOfDuration() *TroubleDeductUpsertBulk {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.UpdateTimeOfDuration()
	})
}

// SetAmount sets the "amount" field.
func (u *TroubleDeductUpsertBulk) SetAmount(v int64) *TroubleDeductUpsertBulk {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *TroubleDeductUpsertBulk) AddAmount(v int64) *TroubleDeductUpsertBulk {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *TroubleDeductUpsertBulk) UpdateAmount() *TroubleDeductUpsertBulk {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.UpdateAmount()
	})
}

// SetStatus sets the "status" field.
func (u *TroubleDeductUpsertBulk) SetStatus(v troublededuct.Status) *TroubleDeductUpsertBulk {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TroubleDeductUpsertBulk) UpdateStatus() *TroubleDeductUpsertBulk {
	return u.Update(func(s *TroubleDeductUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *TroubleDeductUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the TroubleDeductCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for TroubleDeductCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TroubleDeductUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
