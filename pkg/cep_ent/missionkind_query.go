// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/mission"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionkind"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// MissionKindQuery is the builder for querying MissionKind entities.
type MissionKindQuery struct {
	config
	ctx          *QueryContext
	order        []missionkind.OrderOption
	inters       []Interceptor
	predicates   []predicate.MissionKind
	withMissions *MissionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MissionKindQuery builder.
func (mkq *MissionKindQuery) Where(ps ...predicate.MissionKind) *MissionKindQuery {
	mkq.predicates = append(mkq.predicates, ps...)
	return mkq
}

// Limit the number of records to be returned by this query.
func (mkq *MissionKindQuery) Limit(limit int) *MissionKindQuery {
	mkq.ctx.Limit = &limit
	return mkq
}

// Offset to start from.
func (mkq *MissionKindQuery) Offset(offset int) *MissionKindQuery {
	mkq.ctx.Offset = &offset
	return mkq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mkq *MissionKindQuery) Unique(unique bool) *MissionKindQuery {
	mkq.ctx.Unique = &unique
	return mkq
}

// Order specifies how the records should be ordered.
func (mkq *MissionKindQuery) Order(o ...missionkind.OrderOption) *MissionKindQuery {
	mkq.order = append(mkq.order, o...)
	return mkq
}

// QueryMissions chains the current query on the "missions" edge.
func (mkq *MissionKindQuery) QueryMissions() *MissionQuery {
	query := (&MissionClient{config: mkq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mkq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mkq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(missionkind.Table, missionkind.FieldID, selector),
			sqlgraph.To(mission.Table, mission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, missionkind.MissionsTable, missionkind.MissionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(mkq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first MissionKind entity from the query.
// Returns a *NotFoundError when no MissionKind was found.
func (mkq *MissionKindQuery) First(ctx context.Context) (*MissionKind, error) {
	nodes, err := mkq.Limit(1).All(setContextOp(ctx, mkq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{missionkind.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mkq *MissionKindQuery) FirstX(ctx context.Context) *MissionKind {
	node, err := mkq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MissionKind ID from the query.
// Returns a *NotFoundError when no MissionKind ID was found.
func (mkq *MissionKindQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = mkq.Limit(1).IDs(setContextOp(ctx, mkq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{missionkind.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mkq *MissionKindQuery) FirstIDX(ctx context.Context) int64 {
	id, err := mkq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single MissionKind entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one MissionKind entity is found.
// Returns a *NotFoundError when no MissionKind entities are found.
func (mkq *MissionKindQuery) Only(ctx context.Context) (*MissionKind, error) {
	nodes, err := mkq.Limit(2).All(setContextOp(ctx, mkq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{missionkind.Label}
	default:
		return nil, &NotSingularError{missionkind.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mkq *MissionKindQuery) OnlyX(ctx context.Context) *MissionKind {
	node, err := mkq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only MissionKind ID in the query.
// Returns a *NotSingularError when more than one MissionKind ID is found.
// Returns a *NotFoundError when no entities are found.
func (mkq *MissionKindQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = mkq.Limit(2).IDs(setContextOp(ctx, mkq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{missionkind.Label}
	default:
		err = &NotSingularError{missionkind.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mkq *MissionKindQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := mkq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MissionKinds.
func (mkq *MissionKindQuery) All(ctx context.Context) ([]*MissionKind, error) {
	ctx = setContextOp(ctx, mkq.ctx, "All")
	if err := mkq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*MissionKind, *MissionKindQuery]()
	return withInterceptors[[]*MissionKind](ctx, mkq, qr, mkq.inters)
}

// AllX is like All, but panics if an error occurs.
func (mkq *MissionKindQuery) AllX(ctx context.Context) []*MissionKind {
	nodes, err := mkq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MissionKind IDs.
func (mkq *MissionKindQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if mkq.ctx.Unique == nil && mkq.path != nil {
		mkq.Unique(true)
	}
	ctx = setContextOp(ctx, mkq.ctx, "IDs")
	if err = mkq.Select(missionkind.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mkq *MissionKindQuery) IDsX(ctx context.Context) []int64 {
	ids, err := mkq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mkq *MissionKindQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, mkq.ctx, "Count")
	if err := mkq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, mkq, querierCount[*MissionKindQuery](), mkq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (mkq *MissionKindQuery) CountX(ctx context.Context) int {
	count, err := mkq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mkq *MissionKindQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, mkq.ctx, "Exist")
	switch _, err := mkq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("cep_ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (mkq *MissionKindQuery) ExistX(ctx context.Context) bool {
	exist, err := mkq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MissionKindQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mkq *MissionKindQuery) Clone() *MissionKindQuery {
	if mkq == nil {
		return nil
	}
	return &MissionKindQuery{
		config:       mkq.config,
		ctx:          mkq.ctx.Clone(),
		order:        append([]missionkind.OrderOption{}, mkq.order...),
		inters:       append([]Interceptor{}, mkq.inters...),
		predicates:   append([]predicate.MissionKind{}, mkq.predicates...),
		withMissions: mkq.withMissions.Clone(),
		// clone intermediate query.
		sql:  mkq.sql.Clone(),
		path: mkq.path,
	}
}

// WithMissions tells the query-builder to eager-load the nodes that are connected to
// the "missions" edge. The optional arguments are used to configure the query builder of the edge.
func (mkq *MissionKindQuery) WithMissions(opts ...func(*MissionQuery)) *MissionKindQuery {
	query := (&MissionClient{config: mkq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mkq.withMissions = query
	return mkq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MissionKind.Query().
//		GroupBy(missionkind.FieldCreatedBy).
//		Aggregate(cep_ent.Count()).
//		Scan(ctx, &v)
func (mkq *MissionKindQuery) GroupBy(field string, fields ...string) *MissionKindGroupBy {
	mkq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &MissionKindGroupBy{build: mkq}
	grbuild.flds = &mkq.ctx.Fields
	grbuild.label = missionkind.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by"`
//	}
//
//	client.MissionKind.Query().
//		Select(missionkind.FieldCreatedBy).
//		Scan(ctx, &v)
func (mkq *MissionKindQuery) Select(fields ...string) *MissionKindSelect {
	mkq.ctx.Fields = append(mkq.ctx.Fields, fields...)
	sbuild := &MissionKindSelect{MissionKindQuery: mkq}
	sbuild.label = missionkind.Label
	sbuild.flds, sbuild.scan = &mkq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a MissionKindSelect configured with the given aggregations.
func (mkq *MissionKindQuery) Aggregate(fns ...AggregateFunc) *MissionKindSelect {
	return mkq.Select().Aggregate(fns...)
}

func (mkq *MissionKindQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range mkq.inters {
		if inter == nil {
			return fmt.Errorf("cep_ent: uninitialized interceptor (forgotten import cep_ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, mkq); err != nil {
				return err
			}
		}
	}
	for _, f := range mkq.ctx.Fields {
		if !missionkind.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
		}
	}
	if mkq.path != nil {
		prev, err := mkq.path(ctx)
		if err != nil {
			return err
		}
		mkq.sql = prev
	}
	return nil
}

func (mkq *MissionKindQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*MissionKind, error) {
	var (
		nodes       = []*MissionKind{}
		_spec       = mkq.querySpec()
		loadedTypes = [1]bool{
			mkq.withMissions != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*MissionKind).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &MissionKind{config: mkq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, mkq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := mkq.withMissions; query != nil {
		if err := mkq.loadMissions(ctx, query, nodes,
			func(n *MissionKind) { n.Edges.Missions = []*Mission{} },
			func(n *MissionKind, e *Mission) { n.Edges.Missions = append(n.Edges.Missions, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (mkq *MissionKindQuery) loadMissions(ctx context.Context, query *MissionQuery, nodes []*MissionKind, init func(*MissionKind), assign func(*MissionKind, *Mission)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*MissionKind)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(mission.FieldMissionKindID)
	}
	query.Where(predicate.Mission(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(missionkind.MissionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.MissionKindID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "mission_kind_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (mkq *MissionKindQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mkq.querySpec()
	_spec.Node.Columns = mkq.ctx.Fields
	if len(mkq.ctx.Fields) > 0 {
		_spec.Unique = mkq.ctx.Unique != nil && *mkq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, mkq.driver, _spec)
}

func (mkq *MissionKindQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(missionkind.Table, missionkind.Columns, sqlgraph.NewFieldSpec(missionkind.FieldID, field.TypeInt64))
	_spec.From = mkq.sql
	if unique := mkq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if mkq.path != nil {
		_spec.Unique = true
	}
	if fields := mkq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, missionkind.FieldID)
		for i := range fields {
			if fields[i] != missionkind.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := mkq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mkq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mkq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mkq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mkq *MissionKindQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mkq.driver.Dialect())
	t1 := builder.Table(missionkind.Table)
	columns := mkq.ctx.Fields
	if len(columns) == 0 {
		columns = missionkind.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mkq.sql != nil {
		selector = mkq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if mkq.ctx.Unique != nil && *mkq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range mkq.predicates {
		p(selector)
	}
	for _, p := range mkq.order {
		p(selector)
	}
	if offset := mkq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mkq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MissionKindGroupBy is the group-by builder for MissionKind entities.
type MissionKindGroupBy struct {
	selector
	build *MissionKindQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mkgb *MissionKindGroupBy) Aggregate(fns ...AggregateFunc) *MissionKindGroupBy {
	mkgb.fns = append(mkgb.fns, fns...)
	return mkgb
}

// Scan applies the selector query and scans the result into the given value.
func (mkgb *MissionKindGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mkgb.build.ctx, "GroupBy")
	if err := mkgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MissionKindQuery, *MissionKindGroupBy](ctx, mkgb.build, mkgb, mkgb.build.inters, v)
}

func (mkgb *MissionKindGroupBy) sqlScan(ctx context.Context, root *MissionKindQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(mkgb.fns))
	for _, fn := range mkgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*mkgb.flds)+len(mkgb.fns))
		for _, f := range *mkgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*mkgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mkgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// MissionKindSelect is the builder for selecting fields of MissionKind entities.
type MissionKindSelect struct {
	*MissionKindQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (mks *MissionKindSelect) Aggregate(fns ...AggregateFunc) *MissionKindSelect {
	mks.fns = append(mks.fns, fns...)
	return mks
}

// Scan applies the selector query and scans the result into the given value.
func (mks *MissionKindSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mks.ctx, "Select")
	if err := mks.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MissionKindQuery, *MissionKindSelect](ctx, mks.MissionKindQuery, mks, mks.inters, v)
}

func (mks *MissionKindSelect) sqlScan(ctx context.Context, root *MissionKindQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(mks.fns))
	for _, fn := range mks.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*mks.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mks.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
