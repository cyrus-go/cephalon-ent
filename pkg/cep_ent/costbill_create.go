// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/campaignorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/costaccount"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/costbill"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionconsumeorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/platformaccount"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/rechargeorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// CostBillCreate is the builder for creating a CostBill entity.
type CostBillCreate struct {
	config
	mutation *CostBillMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (cbc *CostBillCreate) SetCreatedBy(i int64) *CostBillCreate {
	cbc.mutation.SetCreatedBy(i)
	return cbc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cbc *CostBillCreate) SetNillableCreatedBy(i *int64) *CostBillCreate {
	if i != nil {
		cbc.SetCreatedBy(*i)
	}
	return cbc
}

// SetUpdatedBy sets the "updated_by" field.
func (cbc *CostBillCreate) SetUpdatedBy(i int64) *CostBillCreate {
	cbc.mutation.SetUpdatedBy(i)
	return cbc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cbc *CostBillCreate) SetNillableUpdatedBy(i *int64) *CostBillCreate {
	if i != nil {
		cbc.SetUpdatedBy(*i)
	}
	return cbc
}

// SetCreatedAt sets the "created_at" field.
func (cbc *CostBillCreate) SetCreatedAt(t time.Time) *CostBillCreate {
	cbc.mutation.SetCreatedAt(t)
	return cbc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cbc *CostBillCreate) SetNillableCreatedAt(t *time.Time) *CostBillCreate {
	if t != nil {
		cbc.SetCreatedAt(*t)
	}
	return cbc
}

// SetUpdatedAt sets the "updated_at" field.
func (cbc *CostBillCreate) SetUpdatedAt(t time.Time) *CostBillCreate {
	cbc.mutation.SetUpdatedAt(t)
	return cbc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cbc *CostBillCreate) SetNillableUpdatedAt(t *time.Time) *CostBillCreate {
	if t != nil {
		cbc.SetUpdatedAt(*t)
	}
	return cbc
}

// SetDeletedAt sets the "deleted_at" field.
func (cbc *CostBillCreate) SetDeletedAt(t time.Time) *CostBillCreate {
	cbc.mutation.SetDeletedAt(t)
	return cbc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cbc *CostBillCreate) SetNillableDeletedAt(t *time.Time) *CostBillCreate {
	if t != nil {
		cbc.SetDeletedAt(*t)
	}
	return cbc
}

// SetType sets the "type" field.
func (cbc *CostBillCreate) SetType(c costbill.Type) *CostBillCreate {
	cbc.mutation.SetType(c)
	return cbc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cbc *CostBillCreate) SetNillableType(c *costbill.Type) *CostBillCreate {
	if c != nil {
		cbc.SetType(*c)
	}
	return cbc
}

// SetWay sets the "way" field.
func (cbc *CostBillCreate) SetWay(c costbill.Way) *CostBillCreate {
	cbc.mutation.SetWay(c)
	return cbc
}

// SetNillableWay sets the "way" field if the given value is not nil.
func (cbc *CostBillCreate) SetNillableWay(c *costbill.Way) *CostBillCreate {
	if c != nil {
		cbc.SetWay(*c)
	}
	return cbc
}

// SetIsAdd sets the "is_add" field.
func (cbc *CostBillCreate) SetIsAdd(b bool) *CostBillCreate {
	cbc.mutation.SetIsAdd(b)
	return cbc
}

// SetNillableIsAdd sets the "is_add" field if the given value is not nil.
func (cbc *CostBillCreate) SetNillableIsAdd(b *bool) *CostBillCreate {
	if b != nil {
		cbc.SetIsAdd(*b)
	}
	return cbc
}

// SetUserID sets the "user_id" field.
func (cbc *CostBillCreate) SetUserID(i int64) *CostBillCreate {
	cbc.mutation.SetUserID(i)
	return cbc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cbc *CostBillCreate) SetNillableUserID(i *int64) *CostBillCreate {
	if i != nil {
		cbc.SetUserID(*i)
	}
	return cbc
}

// SetSerialNumber sets the "serial_number" field.
func (cbc *CostBillCreate) SetSerialNumber(s string) *CostBillCreate {
	cbc.mutation.SetSerialNumber(s)
	return cbc
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (cbc *CostBillCreate) SetNillableSerialNumber(s *string) *CostBillCreate {
	if s != nil {
		cbc.SetSerialNumber(*s)
	}
	return cbc
}

// SetCostAccountID sets the "cost_account_id" field.
func (cbc *CostBillCreate) SetCostAccountID(i int64) *CostBillCreate {
	cbc.mutation.SetCostAccountID(i)
	return cbc
}

// SetNillableCostAccountID sets the "cost_account_id" field if the given value is not nil.
func (cbc *CostBillCreate) SetNillableCostAccountID(i *int64) *CostBillCreate {
	if i != nil {
		cbc.SetCostAccountID(*i)
	}
	return cbc
}

// SetPureCep sets the "pure_cep" field.
func (cbc *CostBillCreate) SetPureCep(i int64) *CostBillCreate {
	cbc.mutation.SetPureCep(i)
	return cbc
}

// SetNillablePureCep sets the "pure_cep" field if the given value is not nil.
func (cbc *CostBillCreate) SetNillablePureCep(i *int64) *CostBillCreate {
	if i != nil {
		cbc.SetPureCep(*i)
	}
	return cbc
}

// SetGiftCep sets the "gift_cep" field.
func (cbc *CostBillCreate) SetGiftCep(i int64) *CostBillCreate {
	cbc.mutation.SetGiftCep(i)
	return cbc
}

// SetNillableGiftCep sets the "gift_cep" field if the given value is not nil.
func (cbc *CostBillCreate) SetNillableGiftCep(i *int64) *CostBillCreate {
	if i != nil {
		cbc.SetGiftCep(*i)
	}
	return cbc
}

// SetReasonID sets the "reason_id" field.
func (cbc *CostBillCreate) SetReasonID(i int64) *CostBillCreate {
	cbc.mutation.SetReasonID(i)
	return cbc
}

// SetNillableReasonID sets the "reason_id" field if the given value is not nil.
func (cbc *CostBillCreate) SetNillableReasonID(i *int64) *CostBillCreate {
	if i != nil {
		cbc.SetReasonID(*i)
	}
	return cbc
}

// SetStatus sets the "status" field.
func (cbc *CostBillCreate) SetStatus(es enums.BillStatus) *CostBillCreate {
	cbc.mutation.SetStatus(es)
	return cbc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cbc *CostBillCreate) SetNillableStatus(es *enums.BillStatus) *CostBillCreate {
	if es != nil {
		cbc.SetStatus(*es)
	}
	return cbc
}

// SetMarketAccountID sets the "market_account_id" field.
func (cbc *CostBillCreate) SetMarketAccountID(i int64) *CostBillCreate {
	cbc.mutation.SetMarketAccountID(i)
	return cbc
}

// SetNillableMarketAccountID sets the "market_account_id" field if the given value is not nil.
func (cbc *CostBillCreate) SetNillableMarketAccountID(i *int64) *CostBillCreate {
	if i != nil {
		cbc.SetMarketAccountID(*i)
	}
	return cbc
}

// SetCampaignOrderID sets the "campaign_order_id" field.
func (cbc *CostBillCreate) SetCampaignOrderID(i int64) *CostBillCreate {
	cbc.mutation.SetCampaignOrderID(i)
	return cbc
}

// SetNillableCampaignOrderID sets the "campaign_order_id" field if the given value is not nil.
func (cbc *CostBillCreate) SetNillableCampaignOrderID(i *int64) *CostBillCreate {
	if i != nil {
		cbc.SetCampaignOrderID(*i)
	}
	return cbc
}

// SetID sets the "id" field.
func (cbc *CostBillCreate) SetID(i int64) *CostBillCreate {
	cbc.mutation.SetID(i)
	return cbc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cbc *CostBillCreate) SetNillableID(i *int64) *CostBillCreate {
	if i != nil {
		cbc.SetID(*i)
	}
	return cbc
}

// SetUser sets the "user" edge to the User entity.
func (cbc *CostBillCreate) SetUser(u *User) *CostBillCreate {
	return cbc.SetUserID(u.ID)
}

// SetCostAccount sets the "cost_account" edge to the CostAccount entity.
func (cbc *CostBillCreate) SetCostAccount(c *CostAccount) *CostBillCreate {
	return cbc.SetCostAccountID(c.ID)
}

// SetRechargeOrderID sets the "recharge_order" edge to the RechargeOrder entity by ID.
func (cbc *CostBillCreate) SetRechargeOrderID(id int64) *CostBillCreate {
	cbc.mutation.SetRechargeOrderID(id)
	return cbc
}

// SetNillableRechargeOrderID sets the "recharge_order" edge to the RechargeOrder entity by ID if the given value is not nil.
func (cbc *CostBillCreate) SetNillableRechargeOrderID(id *int64) *CostBillCreate {
	if id != nil {
		cbc = cbc.SetRechargeOrderID(*id)
	}
	return cbc
}

// SetRechargeOrder sets the "recharge_order" edge to the RechargeOrder entity.
func (cbc *CostBillCreate) SetRechargeOrder(r *RechargeOrder) *CostBillCreate {
	return cbc.SetRechargeOrderID(r.ID)
}

// SetMissionConsumeOrderID sets the "mission_consume_order" edge to the MissionConsumeOrder entity by ID.
func (cbc *CostBillCreate) SetMissionConsumeOrderID(id int64) *CostBillCreate {
	cbc.mutation.SetMissionConsumeOrderID(id)
	return cbc
}

// SetNillableMissionConsumeOrderID sets the "mission_consume_order" edge to the MissionConsumeOrder entity by ID if the given value is not nil.
func (cbc *CostBillCreate) SetNillableMissionConsumeOrderID(id *int64) *CostBillCreate {
	if id != nil {
		cbc = cbc.SetMissionConsumeOrderID(*id)
	}
	return cbc
}

// SetMissionConsumeOrder sets the "mission_consume_order" edge to the MissionConsumeOrder entity.
func (cbc *CostBillCreate) SetMissionConsumeOrder(m *MissionConsumeOrder) *CostBillCreate {
	return cbc.SetMissionConsumeOrderID(m.ID)
}

// SetPlatformAccountID sets the "platform_account" edge to the PlatformAccount entity by ID.
func (cbc *CostBillCreate) SetPlatformAccountID(id int64) *CostBillCreate {
	cbc.mutation.SetPlatformAccountID(id)
	return cbc
}

// SetPlatformAccount sets the "platform_account" edge to the PlatformAccount entity.
func (cbc *CostBillCreate) SetPlatformAccount(p *PlatformAccount) *CostBillCreate {
	return cbc.SetPlatformAccountID(p.ID)
}

// SetCampaignOrder sets the "campaign_order" edge to the CampaignOrder entity.
func (cbc *CostBillCreate) SetCampaignOrder(c *CampaignOrder) *CostBillCreate {
	return cbc.SetCampaignOrderID(c.ID)
}

// Mutation returns the CostBillMutation object of the builder.
func (cbc *CostBillCreate) Mutation() *CostBillMutation {
	return cbc.mutation
}

// Save creates the CostBill in the database.
func (cbc *CostBillCreate) Save(ctx context.Context) (*CostBill, error) {
	cbc.defaults()
	return withHooks(ctx, cbc.sqlSave, cbc.mutation, cbc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cbc *CostBillCreate) SaveX(ctx context.Context) *CostBill {
	v, err := cbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cbc *CostBillCreate) Exec(ctx context.Context) error {
	_, err := cbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cbc *CostBillCreate) ExecX(ctx context.Context) {
	if err := cbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cbc *CostBillCreate) defaults() {
	if _, ok := cbc.mutation.CreatedBy(); !ok {
		v := costbill.DefaultCreatedBy
		cbc.mutation.SetCreatedBy(v)
	}
	if _, ok := cbc.mutation.UpdatedBy(); !ok {
		v := costbill.DefaultUpdatedBy
		cbc.mutation.SetUpdatedBy(v)
	}
	if _, ok := cbc.mutation.CreatedAt(); !ok {
		v := costbill.DefaultCreatedAt()
		cbc.mutation.SetCreatedAt(v)
	}
	if _, ok := cbc.mutation.UpdatedAt(); !ok {
		v := costbill.DefaultUpdatedAt()
		cbc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cbc.mutation.DeletedAt(); !ok {
		v := costbill.DefaultDeletedAt
		cbc.mutation.SetDeletedAt(v)
	}
	if _, ok := cbc.mutation.GetType(); !ok {
		v := costbill.DefaultType
		cbc.mutation.SetType(v)
	}
	if _, ok := cbc.mutation.Way(); !ok {
		v := costbill.DefaultWay
		cbc.mutation.SetWay(v)
	}
	if _, ok := cbc.mutation.IsAdd(); !ok {
		v := costbill.DefaultIsAdd
		cbc.mutation.SetIsAdd(v)
	}
	if _, ok := cbc.mutation.UserID(); !ok {
		v := costbill.DefaultUserID
		cbc.mutation.SetUserID(v)
	}
	if _, ok := cbc.mutation.SerialNumber(); !ok {
		v := costbill.DefaultSerialNumber
		cbc.mutation.SetSerialNumber(v)
	}
	if _, ok := cbc.mutation.CostAccountID(); !ok {
		v := costbill.DefaultCostAccountID
		cbc.mutation.SetCostAccountID(v)
	}
	if _, ok := cbc.mutation.PureCep(); !ok {
		v := costbill.DefaultPureCep
		cbc.mutation.SetPureCep(v)
	}
	if _, ok := cbc.mutation.GiftCep(); !ok {
		v := costbill.DefaultGiftCep
		cbc.mutation.SetGiftCep(v)
	}
	if _, ok := cbc.mutation.ReasonID(); !ok {
		v := costbill.DefaultReasonID
		cbc.mutation.SetReasonID(v)
	}
	if _, ok := cbc.mutation.Status(); !ok {
		v := costbill.DefaultStatus
		cbc.mutation.SetStatus(v)
	}
	if _, ok := cbc.mutation.MarketAccountID(); !ok {
		v := costbill.DefaultMarketAccountID
		cbc.mutation.SetMarketAccountID(v)
	}
	if _, ok := cbc.mutation.CampaignOrderID(); !ok {
		v := costbill.DefaultCampaignOrderID
		cbc.mutation.SetCampaignOrderID(v)
	}
	if _, ok := cbc.mutation.ID(); !ok {
		v := costbill.DefaultID()
		cbc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cbc *CostBillCreate) check() error {
	if _, ok := cbc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "CostBill.created_by"`)}
	}
	if _, ok := cbc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "CostBill.updated_by"`)}
	}
	if _, ok := cbc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "CostBill.created_at"`)}
	}
	if _, ok := cbc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "CostBill.updated_at"`)}
	}
	if _, ok := cbc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "CostBill.deleted_at"`)}
	}
	if _, ok := cbc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`cep_ent: missing required field "CostBill.type"`)}
	}
	if v, ok := cbc.mutation.GetType(); ok {
		if err := costbill.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "CostBill.type": %w`, err)}
		}
	}
	if _, ok := cbc.mutation.Way(); !ok {
		return &ValidationError{Name: "way", err: errors.New(`cep_ent: missing required field "CostBill.way"`)}
	}
	if v, ok := cbc.mutation.Way(); ok {
		if err := costbill.WayValidator(v); err != nil {
			return &ValidationError{Name: "way", err: fmt.Errorf(`cep_ent: validator failed for field "CostBill.way": %w`, err)}
		}
	}
	if _, ok := cbc.mutation.IsAdd(); !ok {
		return &ValidationError{Name: "is_add", err: errors.New(`cep_ent: missing required field "CostBill.is_add"`)}
	}
	if _, ok := cbc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "CostBill.user_id"`)}
	}
	if _, ok := cbc.mutation.SerialNumber(); !ok {
		return &ValidationError{Name: "serial_number", err: errors.New(`cep_ent: missing required field "CostBill.serial_number"`)}
	}
	if _, ok := cbc.mutation.CostAccountID(); !ok {
		return &ValidationError{Name: "cost_account_id", err: errors.New(`cep_ent: missing required field "CostBill.cost_account_id"`)}
	}
	if _, ok := cbc.mutation.PureCep(); !ok {
		return &ValidationError{Name: "pure_cep", err: errors.New(`cep_ent: missing required field "CostBill.pure_cep"`)}
	}
	if _, ok := cbc.mutation.GiftCep(); !ok {
		return &ValidationError{Name: "gift_cep", err: errors.New(`cep_ent: missing required field "CostBill.gift_cep"`)}
	}
	if _, ok := cbc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`cep_ent: missing required field "CostBill.status"`)}
	}
	if v, ok := cbc.mutation.Status(); ok {
		if err := costbill.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "CostBill.status": %w`, err)}
		}
	}
	if _, ok := cbc.mutation.MarketAccountID(); !ok {
		return &ValidationError{Name: "market_account_id", err: errors.New(`cep_ent: missing required field "CostBill.market_account_id"`)}
	}
	if _, ok := cbc.mutation.CampaignOrderID(); !ok {
		return &ValidationError{Name: "campaign_order_id", err: errors.New(`cep_ent: missing required field "CostBill.campaign_order_id"`)}
	}
	if _, ok := cbc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "CostBill.user"`)}
	}
	if _, ok := cbc.mutation.CostAccountID(); !ok {
		return &ValidationError{Name: "cost_account", err: errors.New(`cep_ent: missing required edge "CostBill.cost_account"`)}
	}
	if _, ok := cbc.mutation.PlatformAccountID(); !ok {
		return &ValidationError{Name: "platform_account", err: errors.New(`cep_ent: missing required edge "CostBill.platform_account"`)}
	}
	if _, ok := cbc.mutation.CampaignOrderID(); !ok {
		return &ValidationError{Name: "campaign_order", err: errors.New(`cep_ent: missing required edge "CostBill.campaign_order"`)}
	}
	return nil
}

func (cbc *CostBillCreate) sqlSave(ctx context.Context) (*CostBill, error) {
	if err := cbc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	cbc.mutation.id = &_node.ID
	cbc.mutation.done = true
	return _node, nil
}

func (cbc *CostBillCreate) createSpec() (*CostBill, *sqlgraph.CreateSpec) {
	var (
		_node = &CostBill{config: cbc.config}
		_spec = sqlgraph.NewCreateSpec(costbill.Table, sqlgraph.NewFieldSpec(costbill.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = cbc.conflict
	if id, ok := cbc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cbc.mutation.CreatedBy(); ok {
		_spec.SetField(costbill.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := cbc.mutation.UpdatedBy(); ok {
		_spec.SetField(costbill.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := cbc.mutation.CreatedAt(); ok {
		_spec.SetField(costbill.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cbc.mutation.UpdatedAt(); ok {
		_spec.SetField(costbill.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cbc.mutation.DeletedAt(); ok {
		_spec.SetField(costbill.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := cbc.mutation.GetType(); ok {
		_spec.SetField(costbill.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := cbc.mutation.Way(); ok {
		_spec.SetField(costbill.FieldWay, field.TypeEnum, value)
		_node.Way = value
	}
	if value, ok := cbc.mutation.IsAdd(); ok {
		_spec.SetField(costbill.FieldIsAdd, field.TypeBool, value)
		_node.IsAdd = value
	}
	if value, ok := cbc.mutation.SerialNumber(); ok {
		_spec.SetField(costbill.FieldSerialNumber, field.TypeString, value)
		_node.SerialNumber = value
	}
	if value, ok := cbc.mutation.PureCep(); ok {
		_spec.SetField(costbill.FieldPureCep, field.TypeInt64, value)
		_node.PureCep = value
	}
	if value, ok := cbc.mutation.GiftCep(); ok {
		_spec.SetField(costbill.FieldGiftCep, field.TypeInt64, value)
		_node.GiftCep = value
	}
	if value, ok := cbc.mutation.Status(); ok {
		_spec.SetField(costbill.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := cbc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costbill.UserTable,
			Columns: []string{costbill.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cbc.mutation.CostAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costbill.CostAccountTable,
			Columns: []string{costbill.CostAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costaccount.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CostAccountID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cbc.mutation.RechargeOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costbill.RechargeOrderTable,
			Columns: []string{costbill.RechargeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rechargeorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ReasonID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cbc.mutation.MissionConsumeOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costbill.MissionConsumeOrderTable,
			Columns: []string{costbill.MissionConsumeOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ReasonID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cbc.mutation.PlatformAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costbill.PlatformAccountTable,
			Columns: []string{costbill.PlatformAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platformaccount.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MarketAccountID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cbc.mutation.CampaignOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costbill.CampaignOrderTable,
			Columns: []string{costbill.CampaignOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaignorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CampaignOrderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CostBill.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CostBillUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (cbc *CostBillCreate) OnConflict(opts ...sql.ConflictOption) *CostBillUpsertOne {
	cbc.conflict = opts
	return &CostBillUpsertOne{
		create: cbc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CostBill.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cbc *CostBillCreate) OnConflictColumns(columns ...string) *CostBillUpsertOne {
	cbc.conflict = append(cbc.conflict, sql.ConflictColumns(columns...))
	return &CostBillUpsertOne{
		create: cbc,
	}
}

type (
	// CostBillUpsertOne is the builder for "upsert"-ing
	//  one CostBill node.
	CostBillUpsertOne struct {
		create *CostBillCreate
	}

	// CostBillUpsert is the "OnConflict" setter.
	CostBillUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *CostBillUpsert) SetCreatedBy(v int64) *CostBillUpsert {
	u.Set(costbill.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *CostBillUpsert) UpdateCreatedBy() *CostBillUpsert {
	u.SetExcluded(costbill.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *CostBillUpsert) AddCreatedBy(v int64) *CostBillUpsert {
	u.Add(costbill.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *CostBillUpsert) SetUpdatedBy(v int64) *CostBillUpsert {
	u.Set(costbill.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *CostBillUpsert) UpdateUpdatedBy() *CostBillUpsert {
	u.SetExcluded(costbill.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *CostBillUpsert) AddUpdatedBy(v int64) *CostBillUpsert {
	u.Add(costbill.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CostBillUpsert) SetUpdatedAt(v time.Time) *CostBillUpsert {
	u.Set(costbill.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CostBillUpsert) UpdateUpdatedAt() *CostBillUpsert {
	u.SetExcluded(costbill.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CostBillUpsert) SetDeletedAt(v time.Time) *CostBillUpsert {
	u.Set(costbill.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CostBillUpsert) UpdateDeletedAt() *CostBillUpsert {
	u.SetExcluded(costbill.FieldDeletedAt)
	return u
}

// SetType sets the "type" field.
func (u *CostBillUpsert) SetType(v costbill.Type) *CostBillUpsert {
	u.Set(costbill.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CostBillUpsert) UpdateType() *CostBillUpsert {
	u.SetExcluded(costbill.FieldType)
	return u
}

// SetWay sets the "way" field.
func (u *CostBillUpsert) SetWay(v costbill.Way) *CostBillUpsert {
	u.Set(costbill.FieldWay, v)
	return u
}

// UpdateWay sets the "way" field to the value that was provided on create.
func (u *CostBillUpsert) UpdateWay() *CostBillUpsert {
	u.SetExcluded(costbill.FieldWay)
	return u
}

// SetIsAdd sets the "is_add" field.
func (u *CostBillUpsert) SetIsAdd(v bool) *CostBillUpsert {
	u.Set(costbill.FieldIsAdd, v)
	return u
}

// UpdateIsAdd sets the "is_add" field to the value that was provided on create.
func (u *CostBillUpsert) UpdateIsAdd() *CostBillUpsert {
	u.SetExcluded(costbill.FieldIsAdd)
	return u
}

// SetUserID sets the "user_id" field.
func (u *CostBillUpsert) SetUserID(v int64) *CostBillUpsert {
	u.Set(costbill.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CostBillUpsert) UpdateUserID() *CostBillUpsert {
	u.SetExcluded(costbill.FieldUserID)
	return u
}

// SetSerialNumber sets the "serial_number" field.
func (u *CostBillUpsert) SetSerialNumber(v string) *CostBillUpsert {
	u.Set(costbill.FieldSerialNumber, v)
	return u
}

// UpdateSerialNumber sets the "serial_number" field to the value that was provided on create.
func (u *CostBillUpsert) UpdateSerialNumber() *CostBillUpsert {
	u.SetExcluded(costbill.FieldSerialNumber)
	return u
}

// SetCostAccountID sets the "cost_account_id" field.
func (u *CostBillUpsert) SetCostAccountID(v int64) *CostBillUpsert {
	u.Set(costbill.FieldCostAccountID, v)
	return u
}

// UpdateCostAccountID sets the "cost_account_id" field to the value that was provided on create.
func (u *CostBillUpsert) UpdateCostAccountID() *CostBillUpsert {
	u.SetExcluded(costbill.FieldCostAccountID)
	return u
}

// SetPureCep sets the "pure_cep" field.
func (u *CostBillUpsert) SetPureCep(v int64) *CostBillUpsert {
	u.Set(costbill.FieldPureCep, v)
	return u
}

// UpdatePureCep sets the "pure_cep" field to the value that was provided on create.
func (u *CostBillUpsert) UpdatePureCep() *CostBillUpsert {
	u.SetExcluded(costbill.FieldPureCep)
	return u
}

// AddPureCep adds v to the "pure_cep" field.
func (u *CostBillUpsert) AddPureCep(v int64) *CostBillUpsert {
	u.Add(costbill.FieldPureCep, v)
	return u
}

// SetGiftCep sets the "gift_cep" field.
func (u *CostBillUpsert) SetGiftCep(v int64) *CostBillUpsert {
	u.Set(costbill.FieldGiftCep, v)
	return u
}

// UpdateGiftCep sets the "gift_cep" field to the value that was provided on create.
func (u *CostBillUpsert) UpdateGiftCep() *CostBillUpsert {
	u.SetExcluded(costbill.FieldGiftCep)
	return u
}

// AddGiftCep adds v to the "gift_cep" field.
func (u *CostBillUpsert) AddGiftCep(v int64) *CostBillUpsert {
	u.Add(costbill.FieldGiftCep, v)
	return u
}

// SetReasonID sets the "reason_id" field.
func (u *CostBillUpsert) SetReasonID(v int64) *CostBillUpsert {
	u.Set(costbill.FieldReasonID, v)
	return u
}

// UpdateReasonID sets the "reason_id" field to the value that was provided on create.
func (u *CostBillUpsert) UpdateReasonID() *CostBillUpsert {
	u.SetExcluded(costbill.FieldReasonID)
	return u
}

// ClearReasonID clears the value of the "reason_id" field.
func (u *CostBillUpsert) ClearReasonID() *CostBillUpsert {
	u.SetNull(costbill.FieldReasonID)
	return u
}

// SetStatus sets the "status" field.
func (u *CostBillUpsert) SetStatus(v enums.BillStatus) *CostBillUpsert {
	u.Set(costbill.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CostBillUpsert) UpdateStatus() *CostBillUpsert {
	u.SetExcluded(costbill.FieldStatus)
	return u
}

// SetMarketAccountID sets the "market_account_id" field.
func (u *CostBillUpsert) SetMarketAccountID(v int64) *CostBillUpsert {
	u.Set(costbill.FieldMarketAccountID, v)
	return u
}

// UpdateMarketAccountID sets the "market_account_id" field to the value that was provided on create.
func (u *CostBillUpsert) UpdateMarketAccountID() *CostBillUpsert {
	u.SetExcluded(costbill.FieldMarketAccountID)
	return u
}

// SetCampaignOrderID sets the "campaign_order_id" field.
func (u *CostBillUpsert) SetCampaignOrderID(v int64) *CostBillUpsert {
	u.Set(costbill.FieldCampaignOrderID, v)
	return u
}

// UpdateCampaignOrderID sets the "campaign_order_id" field to the value that was provided on create.
func (u *CostBillUpsert) UpdateCampaignOrderID() *CostBillUpsert {
	u.SetExcluded(costbill.FieldCampaignOrderID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CostBill.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(costbill.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CostBillUpsertOne) UpdateNewValues() *CostBillUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(costbill.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(costbill.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CostBill.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CostBillUpsertOne) Ignore() *CostBillUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CostBillUpsertOne) DoNothing() *CostBillUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CostBillCreate.OnConflict
// documentation for more info.
func (u *CostBillUpsertOne) Update(set func(*CostBillUpsert)) *CostBillUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CostBillUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *CostBillUpsertOne) SetCreatedBy(v int64) *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *CostBillUpsertOne) AddCreatedBy(v int64) *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *CostBillUpsertOne) UpdateCreatedBy() *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *CostBillUpsertOne) SetUpdatedBy(v int64) *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *CostBillUpsertOne) AddUpdatedBy(v int64) *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *CostBillUpsertOne) UpdateUpdatedBy() *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CostBillUpsertOne) SetUpdatedAt(v time.Time) *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CostBillUpsertOne) UpdateUpdatedAt() *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CostBillUpsertOne) SetDeletedAt(v time.Time) *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CostBillUpsertOne) UpdateDeletedAt() *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetType sets the "type" field.
func (u *CostBillUpsertOne) SetType(v costbill.Type) *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CostBillUpsertOne) UpdateType() *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.UpdateType()
	})
}

// SetWay sets the "way" field.
func (u *CostBillUpsertOne) SetWay(v costbill.Way) *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.SetWay(v)
	})
}

// UpdateWay sets the "way" field to the value that was provided on create.
func (u *CostBillUpsertOne) UpdateWay() *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.UpdateWay()
	})
}

// SetIsAdd sets the "is_add" field.
func (u *CostBillUpsertOne) SetIsAdd(v bool) *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.SetIsAdd(v)
	})
}

// UpdateIsAdd sets the "is_add" field to the value that was provided on create.
func (u *CostBillUpsertOne) UpdateIsAdd() *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.UpdateIsAdd()
	})
}

// SetUserID sets the "user_id" field.
func (u *CostBillUpsertOne) SetUserID(v int64) *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CostBillUpsertOne) UpdateUserID() *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.UpdateUserID()
	})
}

// SetSerialNumber sets the "serial_number" field.
func (u *CostBillUpsertOne) SetSerialNumber(v string) *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.SetSerialNumber(v)
	})
}

// UpdateSerialNumber sets the "serial_number" field to the value that was provided on create.
func (u *CostBillUpsertOne) UpdateSerialNumber() *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.UpdateSerialNumber()
	})
}

// SetCostAccountID sets the "cost_account_id" field.
func (u *CostBillUpsertOne) SetCostAccountID(v int64) *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.SetCostAccountID(v)
	})
}

// UpdateCostAccountID sets the "cost_account_id" field to the value that was provided on create.
func (u *CostBillUpsertOne) UpdateCostAccountID() *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.UpdateCostAccountID()
	})
}

// SetPureCep sets the "pure_cep" field.
func (u *CostBillUpsertOne) SetPureCep(v int64) *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.SetPureCep(v)
	})
}

// AddPureCep adds v to the "pure_cep" field.
func (u *CostBillUpsertOne) AddPureCep(v int64) *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.AddPureCep(v)
	})
}

// UpdatePureCep sets the "pure_cep" field to the value that was provided on create.
func (u *CostBillUpsertOne) UpdatePureCep() *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.UpdatePureCep()
	})
}

// SetGiftCep sets the "gift_cep" field.
func (u *CostBillUpsertOne) SetGiftCep(v int64) *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.SetGiftCep(v)
	})
}

// AddGiftCep adds v to the "gift_cep" field.
func (u *CostBillUpsertOne) AddGiftCep(v int64) *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.AddGiftCep(v)
	})
}

// UpdateGiftCep sets the "gift_cep" field to the value that was provided on create.
func (u *CostBillUpsertOne) UpdateGiftCep() *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.UpdateGiftCep()
	})
}

// SetReasonID sets the "reason_id" field.
func (u *CostBillUpsertOne) SetReasonID(v int64) *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.SetReasonID(v)
	})
}

// UpdateReasonID sets the "reason_id" field to the value that was provided on create.
func (u *CostBillUpsertOne) UpdateReasonID() *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.UpdateReasonID()
	})
}

// ClearReasonID clears the value of the "reason_id" field.
func (u *CostBillUpsertOne) ClearReasonID() *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.ClearReasonID()
	})
}

// SetStatus sets the "status" field.
func (u *CostBillUpsertOne) SetStatus(v enums.BillStatus) *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CostBillUpsertOne) UpdateStatus() *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.UpdateStatus()
	})
}

// SetMarketAccountID sets the "market_account_id" field.
func (u *CostBillUpsertOne) SetMarketAccountID(v int64) *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.SetMarketAccountID(v)
	})
}

// UpdateMarketAccountID sets the "market_account_id" field to the value that was provided on create.
func (u *CostBillUpsertOne) UpdateMarketAccountID() *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.UpdateMarketAccountID()
	})
}

// SetCampaignOrderID sets the "campaign_order_id" field.
func (u *CostBillUpsertOne) SetCampaignOrderID(v int64) *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.SetCampaignOrderID(v)
	})
}

// UpdateCampaignOrderID sets the "campaign_order_id" field to the value that was provided on create.
func (u *CostBillUpsertOne) UpdateCampaignOrderID() *CostBillUpsertOne {
	return u.Update(func(s *CostBillUpsert) {
		s.UpdateCampaignOrderID()
	})
}

// Exec executes the query.
func (u *CostBillUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for CostBillCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CostBillUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CostBillUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CostBillUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CostBillCreateBulk is the builder for creating many CostBill entities in bulk.
type CostBillCreateBulk struct {
	config
	err      error
	builders []*CostBillCreate
	conflict []sql.ConflictOption
}

// Save creates the CostBill entities in the database.
func (cbcb *CostBillCreateBulk) Save(ctx context.Context) ([]*CostBill, error) {
	if cbcb.err != nil {
		return nil, cbcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cbcb.builders))
	nodes := make([]*CostBill, len(cbcb.builders))
	mutators := make([]Mutator, len(cbcb.builders))
	for i := range cbcb.builders {
		func(i int, root context.Context) {
			builder := cbcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CostBillMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cbcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cbcb *CostBillCreateBulk) SaveX(ctx context.Context) []*CostBill {
	v, err := cbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cbcb *CostBillCreateBulk) Exec(ctx context.Context) error {
	_, err := cbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cbcb *CostBillCreateBulk) ExecX(ctx context.Context) {
	if err := cbcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CostBill.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CostBillUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (cbcb *CostBillCreateBulk) OnConflict(opts ...sql.ConflictOption) *CostBillUpsertBulk {
	cbcb.conflict = opts
	return &CostBillUpsertBulk{
		create: cbcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CostBill.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cbcb *CostBillCreateBulk) OnConflictColumns(columns ...string) *CostBillUpsertBulk {
	cbcb.conflict = append(cbcb.conflict, sql.ConflictColumns(columns...))
	return &CostBillUpsertBulk{
		create: cbcb,
	}
}

// CostBillUpsertBulk is the builder for "upsert"-ing
// a bulk of CostBill nodes.
type CostBillUpsertBulk struct {
	create *CostBillCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CostBill.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(costbill.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CostBillUpsertBulk) UpdateNewValues() *CostBillUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(costbill.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(costbill.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CostBill.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CostBillUpsertBulk) Ignore() *CostBillUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CostBillUpsertBulk) DoNothing() *CostBillUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CostBillCreateBulk.OnConflict
// documentation for more info.
func (u *CostBillUpsertBulk) Update(set func(*CostBillUpsert)) *CostBillUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CostBillUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *CostBillUpsertBulk) SetCreatedBy(v int64) *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *CostBillUpsertBulk) AddCreatedBy(v int64) *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *CostBillUpsertBulk) UpdateCreatedBy() *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *CostBillUpsertBulk) SetUpdatedBy(v int64) *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *CostBillUpsertBulk) AddUpdatedBy(v int64) *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *CostBillUpsertBulk) UpdateUpdatedBy() *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CostBillUpsertBulk) SetUpdatedAt(v time.Time) *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CostBillUpsertBulk) UpdateUpdatedAt() *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CostBillUpsertBulk) SetDeletedAt(v time.Time) *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CostBillUpsertBulk) UpdateDeletedAt() *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetType sets the "type" field.
func (u *CostBillUpsertBulk) SetType(v costbill.Type) *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CostBillUpsertBulk) UpdateType() *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.UpdateType()
	})
}

// SetWay sets the "way" field.
func (u *CostBillUpsertBulk) SetWay(v costbill.Way) *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.SetWay(v)
	})
}

// UpdateWay sets the "way" field to the value that was provided on create.
func (u *CostBillUpsertBulk) UpdateWay() *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.UpdateWay()
	})
}

// SetIsAdd sets the "is_add" field.
func (u *CostBillUpsertBulk) SetIsAdd(v bool) *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.SetIsAdd(v)
	})
}

// UpdateIsAdd sets the "is_add" field to the value that was provided on create.
func (u *CostBillUpsertBulk) UpdateIsAdd() *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.UpdateIsAdd()
	})
}

// SetUserID sets the "user_id" field.
func (u *CostBillUpsertBulk) SetUserID(v int64) *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CostBillUpsertBulk) UpdateUserID() *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.UpdateUserID()
	})
}

// SetSerialNumber sets the "serial_number" field.
func (u *CostBillUpsertBulk) SetSerialNumber(v string) *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.SetSerialNumber(v)
	})
}

// UpdateSerialNumber sets the "serial_number" field to the value that was provided on create.
func (u *CostBillUpsertBulk) UpdateSerialNumber() *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.UpdateSerialNumber()
	})
}

// SetCostAccountID sets the "cost_account_id" field.
func (u *CostBillUpsertBulk) SetCostAccountID(v int64) *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.SetCostAccountID(v)
	})
}

// UpdateCostAccountID sets the "cost_account_id" field to the value that was provided on create.
func (u *CostBillUpsertBulk) UpdateCostAccountID() *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.UpdateCostAccountID()
	})
}

// SetPureCep sets the "pure_cep" field.
func (u *CostBillUpsertBulk) SetPureCep(v int64) *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.SetPureCep(v)
	})
}

// AddPureCep adds v to the "pure_cep" field.
func (u *CostBillUpsertBulk) AddPureCep(v int64) *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.AddPureCep(v)
	})
}

// UpdatePureCep sets the "pure_cep" field to the value that was provided on create.
func (u *CostBillUpsertBulk) UpdatePureCep() *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.UpdatePureCep()
	})
}

// SetGiftCep sets the "gift_cep" field.
func (u *CostBillUpsertBulk) SetGiftCep(v int64) *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.SetGiftCep(v)
	})
}

// AddGiftCep adds v to the "gift_cep" field.
func (u *CostBillUpsertBulk) AddGiftCep(v int64) *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.AddGiftCep(v)
	})
}

// UpdateGiftCep sets the "gift_cep" field to the value that was provided on create.
func (u *CostBillUpsertBulk) UpdateGiftCep() *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.UpdateGiftCep()
	})
}

// SetReasonID sets the "reason_id" field.
func (u *CostBillUpsertBulk) SetReasonID(v int64) *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.SetReasonID(v)
	})
}

// UpdateReasonID sets the "reason_id" field to the value that was provided on create.
func (u *CostBillUpsertBulk) UpdateReasonID() *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.UpdateReasonID()
	})
}

// ClearReasonID clears the value of the "reason_id" field.
func (u *CostBillUpsertBulk) ClearReasonID() *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.ClearReasonID()
	})
}

// SetStatus sets the "status" field.
func (u *CostBillUpsertBulk) SetStatus(v enums.BillStatus) *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CostBillUpsertBulk) UpdateStatus() *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.UpdateStatus()
	})
}

// SetMarketAccountID sets the "market_account_id" field.
func (u *CostBillUpsertBulk) SetMarketAccountID(v int64) *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.SetMarketAccountID(v)
	})
}

// UpdateMarketAccountID sets the "market_account_id" field to the value that was provided on create.
func (u *CostBillUpsertBulk) UpdateMarketAccountID() *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.UpdateMarketAccountID()
	})
}

// SetCampaignOrderID sets the "campaign_order_id" field.
func (u *CostBillUpsertBulk) SetCampaignOrderID(v int64) *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.SetCampaignOrderID(v)
	})
}

// UpdateCampaignOrderID sets the "campaign_order_id" field to the value that was provided on create.
func (u *CostBillUpsertBulk) UpdateCampaignOrderID() *CostBillUpsertBulk {
	return u.Update(func(s *CostBillUpsert) {
		s.UpdateCampaignOrderID()
	})
}

// Exec executes the query.
func (u *CostBillUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the CostBillCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for CostBillCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CostBillUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
