// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottorecord"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// LottoRecordDelete is the builder for deleting a LottoRecord entity.
type LottoRecordDelete struct {
	config
	hooks    []Hook
	mutation *LottoRecordMutation
}

// Where appends a list predicates to the LottoRecordDelete builder.
func (lrd *LottoRecordDelete) Where(ps ...predicate.LottoRecord) *LottoRecordDelete {
	lrd.mutation.Where(ps...)
	return lrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (lrd *LottoRecordDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, lrd.sqlExec, lrd.mutation, lrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (lrd *LottoRecordDelete) ExecX(ctx context.Context) int {
	n, err := lrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (lrd *LottoRecordDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(lottorecord.Table, sqlgraph.NewFieldSpec(lottorecord.FieldID, field.TypeInt64))
	if ps := lrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, lrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	lrd.mutation.done = true
	return affected, err
}

// LottoRecordDeleteOne is the builder for deleting a single LottoRecord entity.
type LottoRecordDeleteOne struct {
	lrd *LottoRecordDelete
}

// Where appends a list predicates to the LottoRecordDelete builder.
func (lrdo *LottoRecordDeleteOne) Where(ps ...predicate.LottoRecord) *LottoRecordDeleteOne {
	lrdo.lrd.mutation.Where(ps...)
	return lrdo
}

// Exec executes the deletion query.
func (lrdo *LottoRecordDeleteOne) Exec(ctx context.Context) error {
	n, err := lrdo.lrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{lottorecord.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (lrdo *LottoRecordDeleteOne) ExecX(ctx context.Context) {
	if err := lrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
