// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/campaign"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/invite"
)

// CampaignCreate is the builder for creating a Campaign entity.
type CampaignCreate struct {
	config
	mutation *CampaignMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (cc *CampaignCreate) SetCreatedBy(i int64) *CampaignCreate {
	cc.mutation.SetCreatedBy(i)
	return cc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cc *CampaignCreate) SetNillableCreatedBy(i *int64) *CampaignCreate {
	if i != nil {
		cc.SetCreatedBy(*i)
	}
	return cc
}

// SetUpdatedBy sets the "updated_by" field.
func (cc *CampaignCreate) SetUpdatedBy(i int64) *CampaignCreate {
	cc.mutation.SetUpdatedBy(i)
	return cc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cc *CampaignCreate) SetNillableUpdatedBy(i *int64) *CampaignCreate {
	if i != nil {
		cc.SetUpdatedBy(*i)
	}
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *CampaignCreate) SetCreatedAt(t time.Time) *CampaignCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CampaignCreate) SetNillableCreatedAt(t *time.Time) *CampaignCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CampaignCreate) SetUpdatedAt(t time.Time) *CampaignCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CampaignCreate) SetNillableUpdatedAt(t *time.Time) *CampaignCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetDeletedAt sets the "deleted_at" field.
func (cc *CampaignCreate) SetDeletedAt(t time.Time) *CampaignCreate {
	cc.mutation.SetDeletedAt(t)
	return cc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cc *CampaignCreate) SetNillableDeletedAt(t *time.Time) *CampaignCreate {
	if t != nil {
		cc.SetDeletedAt(*t)
	}
	return cc
}

// SetName sets the "name" field.
func (cc *CampaignCreate) SetName(s string) *CampaignCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cc *CampaignCreate) SetNillableName(s *string) *CampaignCreate {
	if s != nil {
		cc.SetName(*s)
	}
	return cc
}

// SetType sets the "type" field.
func (cc *CampaignCreate) SetType(s string) *CampaignCreate {
	cc.mutation.SetType(s)
	return cc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cc *CampaignCreate) SetNillableType(s *string) *CampaignCreate {
	if s != nil {
		cc.SetType(*s)
	}
	return cc
}

// SetStartedAt sets the "started_at" field.
func (cc *CampaignCreate) SetStartedAt(t time.Time) *CampaignCreate {
	cc.mutation.SetStartedAt(t)
	return cc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (cc *CampaignCreate) SetNillableStartedAt(t *time.Time) *CampaignCreate {
	if t != nil {
		cc.SetStartedAt(*t)
	}
	return cc
}

// SetEndedAt sets the "ended_at" field.
func (cc *CampaignCreate) SetEndedAt(t time.Time) *CampaignCreate {
	cc.mutation.SetEndedAt(t)
	return cc
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (cc *CampaignCreate) SetNillableEndedAt(t *time.Time) *CampaignCreate {
	if t != nil {
		cc.SetEndedAt(*t)
	}
	return cc
}

// SetStatus sets the "status" field.
func (cc *CampaignCreate) SetStatus(i int) *CampaignCreate {
	cc.mutation.SetStatus(i)
	return cc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cc *CampaignCreate) SetNillableStatus(i *int) *CampaignCreate {
	if i != nil {
		cc.SetStatus(*i)
	}
	return cc
}

// SetInviteID sets the "invite_id" field.
func (cc *CampaignCreate) SetInviteID(s string) *CampaignCreate {
	cc.mutation.SetInviteID(s)
	return cc
}

// SetNillableInviteID sets the "invite_id" field if the given value is not nil.
func (cc *CampaignCreate) SetNillableInviteID(s *string) *CampaignCreate {
	if s != nil {
		cc.SetInviteID(*s)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CampaignCreate) SetID(i int64) *CampaignCreate {
	cc.mutation.SetID(i)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CampaignCreate) SetNillableID(i *int64) *CampaignCreate {
	if i != nil {
		cc.SetID(*i)
	}
	return cc
}

// AddInviteIDs adds the "invites" edge to the Invite entity by IDs.
func (cc *CampaignCreate) AddInviteIDs(ids ...int64) *CampaignCreate {
	cc.mutation.AddInviteIDs(ids...)
	return cc
}

// AddInvites adds the "invites" edges to the Invite entity.
func (cc *CampaignCreate) AddInvites(i ...*Invite) *CampaignCreate {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cc.AddInviteIDs(ids...)
}

// Mutation returns the CampaignMutation object of the builder.
func (cc *CampaignCreate) Mutation() *CampaignMutation {
	return cc.mutation
}

// Save creates the Campaign in the database.
func (cc *CampaignCreate) Save(ctx context.Context) (*Campaign, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CampaignCreate) SaveX(ctx context.Context) *Campaign {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CampaignCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CampaignCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CampaignCreate) defaults() {
	if _, ok := cc.mutation.CreatedBy(); !ok {
		v := campaign.DefaultCreatedBy
		cc.mutation.SetCreatedBy(v)
	}
	if _, ok := cc.mutation.UpdatedBy(); !ok {
		v := campaign.DefaultUpdatedBy
		cc.mutation.SetUpdatedBy(v)
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := campaign.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := campaign.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.DeletedAt(); !ok {
		v := campaign.DefaultDeletedAt
		cc.mutation.SetDeletedAt(v)
	}
	if _, ok := cc.mutation.Name(); !ok {
		v := campaign.DefaultName
		cc.mutation.SetName(v)
	}
	if _, ok := cc.mutation.GetType(); !ok {
		v := campaign.DefaultType
		cc.mutation.SetType(v)
	}
	if _, ok := cc.mutation.StartedAt(); !ok {
		v := campaign.DefaultStartedAt
		cc.mutation.SetStartedAt(v)
	}
	if _, ok := cc.mutation.EndedAt(); !ok {
		v := campaign.DefaultEndedAt
		cc.mutation.SetEndedAt(v)
	}
	if _, ok := cc.mutation.Status(); !ok {
		v := campaign.DefaultStatus
		cc.mutation.SetStatus(v)
	}
	if _, ok := cc.mutation.InviteID(); !ok {
		v := campaign.DefaultInviteID
		cc.mutation.SetInviteID(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		v := campaign.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CampaignCreate) check() error {
	if _, ok := cc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "Campaign.created_by"`)}
	}
	if _, ok := cc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "Campaign.updated_by"`)}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "Campaign.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "Campaign.updated_at"`)}
	}
	if _, ok := cc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "Campaign.deleted_at"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`cep_ent: missing required field "Campaign.name"`)}
	}
	if _, ok := cc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`cep_ent: missing required field "Campaign.type"`)}
	}
	if _, ok := cc.mutation.StartedAt(); !ok {
		return &ValidationError{Name: "started_at", err: errors.New(`cep_ent: missing required field "Campaign.started_at"`)}
	}
	if _, ok := cc.mutation.EndedAt(); !ok {
		return &ValidationError{Name: "ended_at", err: errors.New(`cep_ent: missing required field "Campaign.ended_at"`)}
	}
	if _, ok := cc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`cep_ent: missing required field "Campaign.status"`)}
	}
	if _, ok := cc.mutation.InviteID(); !ok {
		return &ValidationError{Name: "invite_id", err: errors.New(`cep_ent: missing required field "Campaign.invite_id"`)}
	}
	return nil
}

func (cc *CampaignCreate) sqlSave(ctx context.Context) (*Campaign, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CampaignCreate) createSpec() (*Campaign, *sqlgraph.CreateSpec) {
	var (
		_node = &Campaign{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(campaign.Table, sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.CreatedBy(); ok {
		_spec.SetField(campaign.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := cc.mutation.UpdatedBy(); ok {
		_spec.SetField(campaign.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(campaign.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(campaign.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.DeletedAt(); ok {
		_spec.SetField(campaign.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(campaign.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.GetType(); ok {
		_spec.SetField(campaign.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := cc.mutation.StartedAt(); ok {
		_spec.SetField(campaign.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := cc.mutation.EndedAt(); ok {
		_spec.SetField(campaign.FieldEndedAt, field.TypeTime, value)
		_node.EndedAt = value
	}
	if value, ok := cc.mutation.Status(); ok {
		_spec.SetField(campaign.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := cc.mutation.InviteID(); ok {
		_spec.SetField(campaign.FieldInviteID, field.TypeString, value)
		_node.InviteID = value
	}
	if nodes := cc.mutation.InvitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaign.InvitesTable,
			Columns: []string{campaign.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Campaign.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CampaignUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (cc *CampaignCreate) OnConflict(opts ...sql.ConflictOption) *CampaignUpsertOne {
	cc.conflict = opts
	return &CampaignUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Campaign.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CampaignCreate) OnConflictColumns(columns ...string) *CampaignUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CampaignUpsertOne{
		create: cc,
	}
}

type (
	// CampaignUpsertOne is the builder for "upsert"-ing
	//  one Campaign node.
	CampaignUpsertOne struct {
		create *CampaignCreate
	}

	// CampaignUpsert is the "OnConflict" setter.
	CampaignUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *CampaignUpsert) SetCreatedBy(v int64) *CampaignUpsert {
	u.Set(campaign.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *CampaignUpsert) UpdateCreatedBy() *CampaignUpsert {
	u.SetExcluded(campaign.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *CampaignUpsert) AddCreatedBy(v int64) *CampaignUpsert {
	u.Add(campaign.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *CampaignUpsert) SetUpdatedBy(v int64) *CampaignUpsert {
	u.Set(campaign.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *CampaignUpsert) UpdateUpdatedBy() *CampaignUpsert {
	u.SetExcluded(campaign.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *CampaignUpsert) AddUpdatedBy(v int64) *CampaignUpsert {
	u.Add(campaign.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CampaignUpsert) SetUpdatedAt(v time.Time) *CampaignUpsert {
	u.Set(campaign.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CampaignUpsert) UpdateUpdatedAt() *CampaignUpsert {
	u.SetExcluded(campaign.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CampaignUpsert) SetDeletedAt(v time.Time) *CampaignUpsert {
	u.Set(campaign.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CampaignUpsert) UpdateDeletedAt() *CampaignUpsert {
	u.SetExcluded(campaign.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *CampaignUpsert) SetName(v string) *CampaignUpsert {
	u.Set(campaign.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CampaignUpsert) UpdateName() *CampaignUpsert {
	u.SetExcluded(campaign.FieldName)
	return u
}

// SetType sets the "type" field.
func (u *CampaignUpsert) SetType(v string) *CampaignUpsert {
	u.Set(campaign.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CampaignUpsert) UpdateType() *CampaignUpsert {
	u.SetExcluded(campaign.FieldType)
	return u
}

// SetStartedAt sets the "started_at" field.
func (u *CampaignUpsert) SetStartedAt(v time.Time) *CampaignUpsert {
	u.Set(campaign.FieldStartedAt, v)
	return u
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *CampaignUpsert) UpdateStartedAt() *CampaignUpsert {
	u.SetExcluded(campaign.FieldStartedAt)
	return u
}

// SetEndedAt sets the "ended_at" field.
func (u *CampaignUpsert) SetEndedAt(v time.Time) *CampaignUpsert {
	u.Set(campaign.FieldEndedAt, v)
	return u
}

// UpdateEndedAt sets the "ended_at" field to the value that was provided on create.
func (u *CampaignUpsert) UpdateEndedAt() *CampaignUpsert {
	u.SetExcluded(campaign.FieldEndedAt)
	return u
}

// SetStatus sets the "status" field.
func (u *CampaignUpsert) SetStatus(v int) *CampaignUpsert {
	u.Set(campaign.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CampaignUpsert) UpdateStatus() *CampaignUpsert {
	u.SetExcluded(campaign.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *CampaignUpsert) AddStatus(v int) *CampaignUpsert {
	u.Add(campaign.FieldStatus, v)
	return u
}

// SetInviteID sets the "invite_id" field.
func (u *CampaignUpsert) SetInviteID(v string) *CampaignUpsert {
	u.Set(campaign.FieldInviteID, v)
	return u
}

// UpdateInviteID sets the "invite_id" field to the value that was provided on create.
func (u *CampaignUpsert) UpdateInviteID() *CampaignUpsert {
	u.SetExcluded(campaign.FieldInviteID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Campaign.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(campaign.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CampaignUpsertOne) UpdateNewValues() *CampaignUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(campaign.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(campaign.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Campaign.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CampaignUpsertOne) Ignore() *CampaignUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CampaignUpsertOne) DoNothing() *CampaignUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CampaignCreate.OnConflict
// documentation for more info.
func (u *CampaignUpsertOne) Update(set func(*CampaignUpsert)) *CampaignUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CampaignUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *CampaignUpsertOne) SetCreatedBy(v int64) *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *CampaignUpsertOne) AddCreatedBy(v int64) *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *CampaignUpsertOne) UpdateCreatedBy() *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *CampaignUpsertOne) SetUpdatedBy(v int64) *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *CampaignUpsertOne) AddUpdatedBy(v int64) *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *CampaignUpsertOne) UpdateUpdatedBy() *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CampaignUpsertOne) SetUpdatedAt(v time.Time) *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CampaignUpsertOne) UpdateUpdatedAt() *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CampaignUpsertOne) SetDeletedAt(v time.Time) *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CampaignUpsertOne) UpdateDeletedAt() *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *CampaignUpsertOne) SetName(v string) *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CampaignUpsertOne) UpdateName() *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *CampaignUpsertOne) SetType(v string) *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CampaignUpsertOne) UpdateType() *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateType()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *CampaignUpsertOne) SetStartedAt(v time.Time) *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *CampaignUpsertOne) UpdateStartedAt() *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateStartedAt()
	})
}

// SetEndedAt sets the "ended_at" field.
func (u *CampaignUpsertOne) SetEndedAt(v time.Time) *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.SetEndedAt(v)
	})
}

// UpdateEndedAt sets the "ended_at" field to the value that was provided on create.
func (u *CampaignUpsertOne) UpdateEndedAt() *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateEndedAt()
	})
}

// SetStatus sets the "status" field.
func (u *CampaignUpsertOne) SetStatus(v int) *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *CampaignUpsertOne) AddStatus(v int) *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CampaignUpsertOne) UpdateStatus() *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateStatus()
	})
}

// SetInviteID sets the "invite_id" field.
func (u *CampaignUpsertOne) SetInviteID(v string) *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.SetInviteID(v)
	})
}

// UpdateInviteID sets the "invite_id" field to the value that was provided on create.
func (u *CampaignUpsertOne) UpdateInviteID() *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateInviteID()
	})
}

// Exec executes the query.
func (u *CampaignUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for CampaignCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CampaignUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CampaignUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CampaignUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CampaignCreateBulk is the builder for creating many Campaign entities in bulk.
type CampaignCreateBulk struct {
	config
	err      error
	builders []*CampaignCreate
	conflict []sql.ConflictOption
}

// Save creates the Campaign entities in the database.
func (ccb *CampaignCreateBulk) Save(ctx context.Context) ([]*Campaign, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Campaign, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CampaignMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CampaignCreateBulk) SaveX(ctx context.Context) []*Campaign {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CampaignCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CampaignCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Campaign.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CampaignUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (ccb *CampaignCreateBulk) OnConflict(opts ...sql.ConflictOption) *CampaignUpsertBulk {
	ccb.conflict = opts
	return &CampaignUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Campaign.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CampaignCreateBulk) OnConflictColumns(columns ...string) *CampaignUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CampaignUpsertBulk{
		create: ccb,
	}
}

// CampaignUpsertBulk is the builder for "upsert"-ing
// a bulk of Campaign nodes.
type CampaignUpsertBulk struct {
	create *CampaignCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Campaign.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(campaign.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CampaignUpsertBulk) UpdateNewValues() *CampaignUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(campaign.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(campaign.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Campaign.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CampaignUpsertBulk) Ignore() *CampaignUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CampaignUpsertBulk) DoNothing() *CampaignUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CampaignCreateBulk.OnConflict
// documentation for more info.
func (u *CampaignUpsertBulk) Update(set func(*CampaignUpsert)) *CampaignUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CampaignUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *CampaignUpsertBulk) SetCreatedBy(v int64) *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *CampaignUpsertBulk) AddCreatedBy(v int64) *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *CampaignUpsertBulk) UpdateCreatedBy() *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *CampaignUpsertBulk) SetUpdatedBy(v int64) *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *CampaignUpsertBulk) AddUpdatedBy(v int64) *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *CampaignUpsertBulk) UpdateUpdatedBy() *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CampaignUpsertBulk) SetUpdatedAt(v time.Time) *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CampaignUpsertBulk) UpdateUpdatedAt() *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CampaignUpsertBulk) SetDeletedAt(v time.Time) *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CampaignUpsertBulk) UpdateDeletedAt() *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *CampaignUpsertBulk) SetName(v string) *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CampaignUpsertBulk) UpdateName() *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *CampaignUpsertBulk) SetType(v string) *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CampaignUpsertBulk) UpdateType() *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateType()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *CampaignUpsertBulk) SetStartedAt(v time.Time) *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *CampaignUpsertBulk) UpdateStartedAt() *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateStartedAt()
	})
}

// SetEndedAt sets the "ended_at" field.
func (u *CampaignUpsertBulk) SetEndedAt(v time.Time) *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.SetEndedAt(v)
	})
}

// UpdateEndedAt sets the "ended_at" field to the value that was provided on create.
func (u *CampaignUpsertBulk) UpdateEndedAt() *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateEndedAt()
	})
}

// SetStatus sets the "status" field.
func (u *CampaignUpsertBulk) SetStatus(v int) *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *CampaignUpsertBulk) AddStatus(v int) *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CampaignUpsertBulk) UpdateStatus() *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateStatus()
	})
}

// SetInviteID sets the "invite_id" field.
func (u *CampaignUpsertBulk) SetInviteID(v string) *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.SetInviteID(v)
	})
}

// UpdateInviteID sets the "invite_id" field to the value that was provided on create.
func (u *CampaignUpsertBulk) UpdateInviteID() *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateInviteID()
	})
}

// Exec executes the query.
func (u *CampaignUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the CampaignCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for CampaignCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CampaignUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
