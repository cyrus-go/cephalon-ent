// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/device"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/deviceofflinerecord"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// DeviceOfflineRecordUpdate is the builder for updating DeviceOfflineRecord entities.
type DeviceOfflineRecordUpdate struct {
	config
	hooks     []Hook
	mutation  *DeviceOfflineRecordMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DeviceOfflineRecordUpdate builder.
func (doru *DeviceOfflineRecordUpdate) Where(ps ...predicate.DeviceOfflineRecord) *DeviceOfflineRecordUpdate {
	doru.mutation.Where(ps...)
	return doru
}

// SetCreatedBy sets the "created_by" field.
func (doru *DeviceOfflineRecordUpdate) SetCreatedBy(i int64) *DeviceOfflineRecordUpdate {
	doru.mutation.ResetCreatedBy()
	doru.mutation.SetCreatedBy(i)
	return doru
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (doru *DeviceOfflineRecordUpdate) SetNillableCreatedBy(i *int64) *DeviceOfflineRecordUpdate {
	if i != nil {
		doru.SetCreatedBy(*i)
	}
	return doru
}

// AddCreatedBy adds i to the "created_by" field.
func (doru *DeviceOfflineRecordUpdate) AddCreatedBy(i int64) *DeviceOfflineRecordUpdate {
	doru.mutation.AddCreatedBy(i)
	return doru
}

// SetUpdatedBy sets the "updated_by" field.
func (doru *DeviceOfflineRecordUpdate) SetUpdatedBy(i int64) *DeviceOfflineRecordUpdate {
	doru.mutation.ResetUpdatedBy()
	doru.mutation.SetUpdatedBy(i)
	return doru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (doru *DeviceOfflineRecordUpdate) SetNillableUpdatedBy(i *int64) *DeviceOfflineRecordUpdate {
	if i != nil {
		doru.SetUpdatedBy(*i)
	}
	return doru
}

// AddUpdatedBy adds i to the "updated_by" field.
func (doru *DeviceOfflineRecordUpdate) AddUpdatedBy(i int64) *DeviceOfflineRecordUpdate {
	doru.mutation.AddUpdatedBy(i)
	return doru
}

// SetUpdatedAt sets the "updated_at" field.
func (doru *DeviceOfflineRecordUpdate) SetUpdatedAt(t time.Time) *DeviceOfflineRecordUpdate {
	doru.mutation.SetUpdatedAt(t)
	return doru
}

// SetDeletedAt sets the "deleted_at" field.
func (doru *DeviceOfflineRecordUpdate) SetDeletedAt(t time.Time) *DeviceOfflineRecordUpdate {
	doru.mutation.SetDeletedAt(t)
	return doru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (doru *DeviceOfflineRecordUpdate) SetNillableDeletedAt(t *time.Time) *DeviceOfflineRecordUpdate {
	if t != nil {
		doru.SetDeletedAt(*t)
	}
	return doru
}

// SetDeviceID sets the "device_id" field.
func (doru *DeviceOfflineRecordUpdate) SetDeviceID(i int64) *DeviceOfflineRecordUpdate {
	doru.mutation.SetDeviceID(i)
	return doru
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (doru *DeviceOfflineRecordUpdate) SetNillableDeviceID(i *int64) *DeviceOfflineRecordUpdate {
	if i != nil {
		doru.SetDeviceID(*i)
	}
	return doru
}

// SetDevice sets the "device" edge to the Device entity.
func (doru *DeviceOfflineRecordUpdate) SetDevice(d *Device) *DeviceOfflineRecordUpdate {
	return doru.SetDeviceID(d.ID)
}

// Mutation returns the DeviceOfflineRecordMutation object of the builder.
func (doru *DeviceOfflineRecordUpdate) Mutation() *DeviceOfflineRecordMutation {
	return doru.mutation
}

// ClearDevice clears the "device" edge to the Device entity.
func (doru *DeviceOfflineRecordUpdate) ClearDevice() *DeviceOfflineRecordUpdate {
	doru.mutation.ClearDevice()
	return doru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (doru *DeviceOfflineRecordUpdate) Save(ctx context.Context) (int, error) {
	doru.defaults()
	return withHooks(ctx, doru.sqlSave, doru.mutation, doru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (doru *DeviceOfflineRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := doru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (doru *DeviceOfflineRecordUpdate) Exec(ctx context.Context) error {
	_, err := doru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (doru *DeviceOfflineRecordUpdate) ExecX(ctx context.Context) {
	if err := doru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (doru *DeviceOfflineRecordUpdate) defaults() {
	if _, ok := doru.mutation.UpdatedAt(); !ok {
		v := deviceofflinerecord.UpdateDefaultUpdatedAt()
		doru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (doru *DeviceOfflineRecordUpdate) check() error {
	if _, ok := doru.mutation.DeviceID(); doru.mutation.DeviceCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "DeviceOfflineRecord.device"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (doru *DeviceOfflineRecordUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DeviceOfflineRecordUpdate {
	doru.modifiers = append(doru.modifiers, modifiers...)
	return doru
}

func (doru *DeviceOfflineRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := doru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(deviceofflinerecord.Table, deviceofflinerecord.Columns, sqlgraph.NewFieldSpec(deviceofflinerecord.FieldID, field.TypeInt64))
	if ps := doru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := doru.mutation.CreatedBy(); ok {
		_spec.SetField(deviceofflinerecord.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := doru.mutation.AddedCreatedBy(); ok {
		_spec.AddField(deviceofflinerecord.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := doru.mutation.UpdatedBy(); ok {
		_spec.SetField(deviceofflinerecord.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := doru.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(deviceofflinerecord.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := doru.mutation.UpdatedAt(); ok {
		_spec.SetField(deviceofflinerecord.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := doru.mutation.DeletedAt(); ok {
		_spec.SetField(deviceofflinerecord.FieldDeletedAt, field.TypeTime, value)
	}
	if doru.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deviceofflinerecord.DeviceTable,
			Columns: []string{deviceofflinerecord.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := doru.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deviceofflinerecord.DeviceTable,
			Columns: []string{deviceofflinerecord.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(doru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, doru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deviceofflinerecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	doru.mutation.done = true
	return n, nil
}

// DeviceOfflineRecordUpdateOne is the builder for updating a single DeviceOfflineRecord entity.
type DeviceOfflineRecordUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DeviceOfflineRecordMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedBy sets the "created_by" field.
func (doruo *DeviceOfflineRecordUpdateOne) SetCreatedBy(i int64) *DeviceOfflineRecordUpdateOne {
	doruo.mutation.ResetCreatedBy()
	doruo.mutation.SetCreatedBy(i)
	return doruo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (doruo *DeviceOfflineRecordUpdateOne) SetNillableCreatedBy(i *int64) *DeviceOfflineRecordUpdateOne {
	if i != nil {
		doruo.SetCreatedBy(*i)
	}
	return doruo
}

// AddCreatedBy adds i to the "created_by" field.
func (doruo *DeviceOfflineRecordUpdateOne) AddCreatedBy(i int64) *DeviceOfflineRecordUpdateOne {
	doruo.mutation.AddCreatedBy(i)
	return doruo
}

// SetUpdatedBy sets the "updated_by" field.
func (doruo *DeviceOfflineRecordUpdateOne) SetUpdatedBy(i int64) *DeviceOfflineRecordUpdateOne {
	doruo.mutation.ResetUpdatedBy()
	doruo.mutation.SetUpdatedBy(i)
	return doruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (doruo *DeviceOfflineRecordUpdateOne) SetNillableUpdatedBy(i *int64) *DeviceOfflineRecordUpdateOne {
	if i != nil {
		doruo.SetUpdatedBy(*i)
	}
	return doruo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (doruo *DeviceOfflineRecordUpdateOne) AddUpdatedBy(i int64) *DeviceOfflineRecordUpdateOne {
	doruo.mutation.AddUpdatedBy(i)
	return doruo
}

// SetUpdatedAt sets the "updated_at" field.
func (doruo *DeviceOfflineRecordUpdateOne) SetUpdatedAt(t time.Time) *DeviceOfflineRecordUpdateOne {
	doruo.mutation.SetUpdatedAt(t)
	return doruo
}

// SetDeletedAt sets the "deleted_at" field.
func (doruo *DeviceOfflineRecordUpdateOne) SetDeletedAt(t time.Time) *DeviceOfflineRecordUpdateOne {
	doruo.mutation.SetDeletedAt(t)
	return doruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (doruo *DeviceOfflineRecordUpdateOne) SetNillableDeletedAt(t *time.Time) *DeviceOfflineRecordUpdateOne {
	if t != nil {
		doruo.SetDeletedAt(*t)
	}
	return doruo
}

// SetDeviceID sets the "device_id" field.
func (doruo *DeviceOfflineRecordUpdateOne) SetDeviceID(i int64) *DeviceOfflineRecordUpdateOne {
	doruo.mutation.SetDeviceID(i)
	return doruo
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (doruo *DeviceOfflineRecordUpdateOne) SetNillableDeviceID(i *int64) *DeviceOfflineRecordUpdateOne {
	if i != nil {
		doruo.SetDeviceID(*i)
	}
	return doruo
}

// SetDevice sets the "device" edge to the Device entity.
func (doruo *DeviceOfflineRecordUpdateOne) SetDevice(d *Device) *DeviceOfflineRecordUpdateOne {
	return doruo.SetDeviceID(d.ID)
}

// Mutation returns the DeviceOfflineRecordMutation object of the builder.
func (doruo *DeviceOfflineRecordUpdateOne) Mutation() *DeviceOfflineRecordMutation {
	return doruo.mutation
}

// ClearDevice clears the "device" edge to the Device entity.
func (doruo *DeviceOfflineRecordUpdateOne) ClearDevice() *DeviceOfflineRecordUpdateOne {
	doruo.mutation.ClearDevice()
	return doruo
}

// Where appends a list predicates to the DeviceOfflineRecordUpdate builder.
func (doruo *DeviceOfflineRecordUpdateOne) Where(ps ...predicate.DeviceOfflineRecord) *DeviceOfflineRecordUpdateOne {
	doruo.mutation.Where(ps...)
	return doruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (doruo *DeviceOfflineRecordUpdateOne) Select(field string, fields ...string) *DeviceOfflineRecordUpdateOne {
	doruo.fields = append([]string{field}, fields...)
	return doruo
}

// Save executes the query and returns the updated DeviceOfflineRecord entity.
func (doruo *DeviceOfflineRecordUpdateOne) Save(ctx context.Context) (*DeviceOfflineRecord, error) {
	doruo.defaults()
	return withHooks(ctx, doruo.sqlSave, doruo.mutation, doruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (doruo *DeviceOfflineRecordUpdateOne) SaveX(ctx context.Context) *DeviceOfflineRecord {
	node, err := doruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (doruo *DeviceOfflineRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := doruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (doruo *DeviceOfflineRecordUpdateOne) ExecX(ctx context.Context) {
	if err := doruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (doruo *DeviceOfflineRecordUpdateOne) defaults() {
	if _, ok := doruo.mutation.UpdatedAt(); !ok {
		v := deviceofflinerecord.UpdateDefaultUpdatedAt()
		doruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (doruo *DeviceOfflineRecordUpdateOne) check() error {
	if _, ok := doruo.mutation.DeviceID(); doruo.mutation.DeviceCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "DeviceOfflineRecord.device"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (doruo *DeviceOfflineRecordUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DeviceOfflineRecordUpdateOne {
	doruo.modifiers = append(doruo.modifiers, modifiers...)
	return doruo
}

func (doruo *DeviceOfflineRecordUpdateOne) sqlSave(ctx context.Context) (_node *DeviceOfflineRecord, err error) {
	if err := doruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(deviceofflinerecord.Table, deviceofflinerecord.Columns, sqlgraph.NewFieldSpec(deviceofflinerecord.FieldID, field.TypeInt64))
	id, ok := doruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "DeviceOfflineRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := doruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deviceofflinerecord.FieldID)
		for _, f := range fields {
			if !deviceofflinerecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != deviceofflinerecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := doruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := doruo.mutation.CreatedBy(); ok {
		_spec.SetField(deviceofflinerecord.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := doruo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(deviceofflinerecord.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := doruo.mutation.UpdatedBy(); ok {
		_spec.SetField(deviceofflinerecord.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := doruo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(deviceofflinerecord.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := doruo.mutation.UpdatedAt(); ok {
		_spec.SetField(deviceofflinerecord.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := doruo.mutation.DeletedAt(); ok {
		_spec.SetField(deviceofflinerecord.FieldDeletedAt, field.TypeTime, value)
	}
	if doruo.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deviceofflinerecord.DeviceTable,
			Columns: []string{deviceofflinerecord.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := doruo.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deviceofflinerecord.DeviceTable,
			Columns: []string{deviceofflinerecord.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(doruo.modifiers...)
	_node = &DeviceOfflineRecord{config: doruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, doruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deviceofflinerecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	doruo.mutation.done = true
	return _node, nil
}
