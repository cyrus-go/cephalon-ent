// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/hmackeypair"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// HmacKeyPairDelete is the builder for deleting a HmacKeyPair entity.
type HmacKeyPairDelete struct {
	config
	hooks    []Hook
	mutation *HmacKeyPairMutation
}

// Where appends a list predicates to the HmacKeyPairDelete builder.
func (hkpd *HmacKeyPairDelete) Where(ps ...predicate.HmacKeyPair) *HmacKeyPairDelete {
	hkpd.mutation.Where(ps...)
	return hkpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (hkpd *HmacKeyPairDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, hkpd.sqlExec, hkpd.mutation, hkpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (hkpd *HmacKeyPairDelete) ExecX(ctx context.Context) int {
	n, err := hkpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (hkpd *HmacKeyPairDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(hmackeypair.Table, sqlgraph.NewFieldSpec(hmackeypair.FieldID, field.TypeInt64))
	if ps := hkpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, hkpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	hkpd.mutation.done = true
	return affected, err
}

// HmacKeyPairDeleteOne is the builder for deleting a single HmacKeyPair entity.
type HmacKeyPairDeleteOne struct {
	hkpd *HmacKeyPairDelete
}

// Where appends a list predicates to the HmacKeyPairDelete builder.
func (hkpdo *HmacKeyPairDeleteOne) Where(ps ...predicate.HmacKeyPair) *HmacKeyPairDeleteOne {
	hkpdo.hkpd.mutation.Where(ps...)
	return hkpdo
}

// Exec executes the deletion query.
func (hkpdo *HmacKeyPairDeleteOne) Exec(ctx context.Context) error {
	n, err := hkpdo.hkpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{hmackeypair.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (hkpdo *HmacKeyPairDeleteOne) ExecX(ctx context.Context) {
	if err := hkpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
