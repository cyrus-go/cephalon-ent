// Code generated by ent, DO NOT EDIT.

package inputlog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldLTE(FieldID, id))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.InputLog {
	return predicate.InputLog(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.InputLog {
	return predicate.InputLog(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.InputLog {
	return predicate.InputLog(sql.FieldEQ(FieldDeletedAt, v))
}

// TraceID applies equality check predicate on the "trace_id" field. It's identical to TraceIDEQ.
func TraceID(v int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldEQ(FieldTraceID, v))
}

// Headers applies equality check predicate on the "headers" field. It's identical to HeadersEQ.
func Headers(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldEQ(FieldHeaders, v))
}

// Body applies equality check predicate on the "body" field. It's identical to BodyEQ.
func Body(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldEQ(FieldBody, v))
}

// Query applies equality check predicate on the "query" field. It's identical to QueryEQ.
func Query(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldEQ(FieldQuery, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldEQ(FieldURL, v))
}

// IP applies equality check predicate on the "ip" field. It's identical to IPEQ.
func IP(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldEQ(FieldIP, v))
}

// Caller applies equality check predicate on the "caller" field. It's identical to CallerEQ.
func Caller(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldEQ(FieldCaller, v))
}

// HmacKey applies equality check predicate on the "hmac_key" field. It's identical to HmacKeyEQ.
func HmacKey(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldEQ(FieldHmacKey, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldLTE(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldLTE(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.InputLog {
	return predicate.InputLog(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.InputLog {
	return predicate.InputLog(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.InputLog {
	return predicate.InputLog(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.InputLog {
	return predicate.InputLog(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.InputLog {
	return predicate.InputLog(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.InputLog {
	return predicate.InputLog(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.InputLog {
	return predicate.InputLog(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.InputLog {
	return predicate.InputLog(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.InputLog {
	return predicate.InputLog(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.InputLog {
	return predicate.InputLog(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.InputLog {
	return predicate.InputLog(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.InputLog {
	return predicate.InputLog(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.InputLog {
	return predicate.InputLog(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.InputLog {
	return predicate.InputLog(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.InputLog {
	return predicate.InputLog(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.InputLog {
	return predicate.InputLog(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.InputLog {
	return predicate.InputLog(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.InputLog {
	return predicate.InputLog(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.InputLog {
	return predicate.InputLog(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.InputLog {
	return predicate.InputLog(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.InputLog {
	return predicate.InputLog(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.InputLog {
	return predicate.InputLog(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.InputLog {
	return predicate.InputLog(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.InputLog {
	return predicate.InputLog(sql.FieldLTE(FieldDeletedAt, v))
}

// TraceIDEQ applies the EQ predicate on the "trace_id" field.
func TraceIDEQ(v int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldEQ(FieldTraceID, v))
}

// TraceIDNEQ applies the NEQ predicate on the "trace_id" field.
func TraceIDNEQ(v int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldNEQ(FieldTraceID, v))
}

// TraceIDIn applies the In predicate on the "trace_id" field.
func TraceIDIn(vs ...int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldIn(FieldTraceID, vs...))
}

// TraceIDNotIn applies the NotIn predicate on the "trace_id" field.
func TraceIDNotIn(vs ...int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldNotIn(FieldTraceID, vs...))
}

// TraceIDGT applies the GT predicate on the "trace_id" field.
func TraceIDGT(v int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldGT(FieldTraceID, v))
}

// TraceIDGTE applies the GTE predicate on the "trace_id" field.
func TraceIDGTE(v int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldGTE(FieldTraceID, v))
}

// TraceIDLT applies the LT predicate on the "trace_id" field.
func TraceIDLT(v int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldLT(FieldTraceID, v))
}

// TraceIDLTE applies the LTE predicate on the "trace_id" field.
func TraceIDLTE(v int64) predicate.InputLog {
	return predicate.InputLog(sql.FieldLTE(FieldTraceID, v))
}

// HeadersEQ applies the EQ predicate on the "headers" field.
func HeadersEQ(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldEQ(FieldHeaders, v))
}

// HeadersNEQ applies the NEQ predicate on the "headers" field.
func HeadersNEQ(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldNEQ(FieldHeaders, v))
}

// HeadersIn applies the In predicate on the "headers" field.
func HeadersIn(vs ...string) predicate.InputLog {
	return predicate.InputLog(sql.FieldIn(FieldHeaders, vs...))
}

// HeadersNotIn applies the NotIn predicate on the "headers" field.
func HeadersNotIn(vs ...string) predicate.InputLog {
	return predicate.InputLog(sql.FieldNotIn(FieldHeaders, vs...))
}

// HeadersGT applies the GT predicate on the "headers" field.
func HeadersGT(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldGT(FieldHeaders, v))
}

// HeadersGTE applies the GTE predicate on the "headers" field.
func HeadersGTE(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldGTE(FieldHeaders, v))
}

// HeadersLT applies the LT predicate on the "headers" field.
func HeadersLT(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldLT(FieldHeaders, v))
}

// HeadersLTE applies the LTE predicate on the "headers" field.
func HeadersLTE(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldLTE(FieldHeaders, v))
}

// HeadersContains applies the Contains predicate on the "headers" field.
func HeadersContains(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldContains(FieldHeaders, v))
}

// HeadersHasPrefix applies the HasPrefix predicate on the "headers" field.
func HeadersHasPrefix(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldHasPrefix(FieldHeaders, v))
}

// HeadersHasSuffix applies the HasSuffix predicate on the "headers" field.
func HeadersHasSuffix(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldHasSuffix(FieldHeaders, v))
}

// HeadersEqualFold applies the EqualFold predicate on the "headers" field.
func HeadersEqualFold(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldEqualFold(FieldHeaders, v))
}

// HeadersContainsFold applies the ContainsFold predicate on the "headers" field.
func HeadersContainsFold(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldContainsFold(FieldHeaders, v))
}

// BodyEQ applies the EQ predicate on the "body" field.
func BodyEQ(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldEQ(FieldBody, v))
}

// BodyNEQ applies the NEQ predicate on the "body" field.
func BodyNEQ(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldNEQ(FieldBody, v))
}

// BodyIn applies the In predicate on the "body" field.
func BodyIn(vs ...string) predicate.InputLog {
	return predicate.InputLog(sql.FieldIn(FieldBody, vs...))
}

// BodyNotIn applies the NotIn predicate on the "body" field.
func BodyNotIn(vs ...string) predicate.InputLog {
	return predicate.InputLog(sql.FieldNotIn(FieldBody, vs...))
}

// BodyGT applies the GT predicate on the "body" field.
func BodyGT(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldGT(FieldBody, v))
}

// BodyGTE applies the GTE predicate on the "body" field.
func BodyGTE(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldGTE(FieldBody, v))
}

// BodyLT applies the LT predicate on the "body" field.
func BodyLT(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldLT(FieldBody, v))
}

// BodyLTE applies the LTE predicate on the "body" field.
func BodyLTE(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldLTE(FieldBody, v))
}

// BodyContains applies the Contains predicate on the "body" field.
func BodyContains(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldContains(FieldBody, v))
}

// BodyHasPrefix applies the HasPrefix predicate on the "body" field.
func BodyHasPrefix(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldHasPrefix(FieldBody, v))
}

// BodyHasSuffix applies the HasSuffix predicate on the "body" field.
func BodyHasSuffix(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldHasSuffix(FieldBody, v))
}

// BodyIsNil applies the IsNil predicate on the "body" field.
func BodyIsNil() predicate.InputLog {
	return predicate.InputLog(sql.FieldIsNull(FieldBody))
}

// BodyNotNil applies the NotNil predicate on the "body" field.
func BodyNotNil() predicate.InputLog {
	return predicate.InputLog(sql.FieldNotNull(FieldBody))
}

// BodyEqualFold applies the EqualFold predicate on the "body" field.
func BodyEqualFold(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldEqualFold(FieldBody, v))
}

// BodyContainsFold applies the ContainsFold predicate on the "body" field.
func BodyContainsFold(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldContainsFold(FieldBody, v))
}

// QueryEQ applies the EQ predicate on the "query" field.
func QueryEQ(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldEQ(FieldQuery, v))
}

// QueryNEQ applies the NEQ predicate on the "query" field.
func QueryNEQ(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldNEQ(FieldQuery, v))
}

// QueryIn applies the In predicate on the "query" field.
func QueryIn(vs ...string) predicate.InputLog {
	return predicate.InputLog(sql.FieldIn(FieldQuery, vs...))
}

// QueryNotIn applies the NotIn predicate on the "query" field.
func QueryNotIn(vs ...string) predicate.InputLog {
	return predicate.InputLog(sql.FieldNotIn(FieldQuery, vs...))
}

// QueryGT applies the GT predicate on the "query" field.
func QueryGT(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldGT(FieldQuery, v))
}

// QueryGTE applies the GTE predicate on the "query" field.
func QueryGTE(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldGTE(FieldQuery, v))
}

// QueryLT applies the LT predicate on the "query" field.
func QueryLT(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldLT(FieldQuery, v))
}

// QueryLTE applies the LTE predicate on the "query" field.
func QueryLTE(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldLTE(FieldQuery, v))
}

// QueryContains applies the Contains predicate on the "query" field.
func QueryContains(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldContains(FieldQuery, v))
}

// QueryHasPrefix applies the HasPrefix predicate on the "query" field.
func QueryHasPrefix(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldHasPrefix(FieldQuery, v))
}

// QueryHasSuffix applies the HasSuffix predicate on the "query" field.
func QueryHasSuffix(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldHasSuffix(FieldQuery, v))
}

// QueryIsNil applies the IsNil predicate on the "query" field.
func QueryIsNil() predicate.InputLog {
	return predicate.InputLog(sql.FieldIsNull(FieldQuery))
}

// QueryNotNil applies the NotNil predicate on the "query" field.
func QueryNotNil() predicate.InputLog {
	return predicate.InputLog(sql.FieldNotNull(FieldQuery))
}

// QueryEqualFold applies the EqualFold predicate on the "query" field.
func QueryEqualFold(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldEqualFold(FieldQuery, v))
}

// QueryContainsFold applies the ContainsFold predicate on the "query" field.
func QueryContainsFold(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldContainsFold(FieldQuery, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.InputLog {
	return predicate.InputLog(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.InputLog {
	return predicate.InputLog(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldContainsFold(FieldURL, v))
}

// IPEQ applies the EQ predicate on the "ip" field.
func IPEQ(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldEQ(FieldIP, v))
}

// IPNEQ applies the NEQ predicate on the "ip" field.
func IPNEQ(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldNEQ(FieldIP, v))
}

// IPIn applies the In predicate on the "ip" field.
func IPIn(vs ...string) predicate.InputLog {
	return predicate.InputLog(sql.FieldIn(FieldIP, vs...))
}

// IPNotIn applies the NotIn predicate on the "ip" field.
func IPNotIn(vs ...string) predicate.InputLog {
	return predicate.InputLog(sql.FieldNotIn(FieldIP, vs...))
}

// IPGT applies the GT predicate on the "ip" field.
func IPGT(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldGT(FieldIP, v))
}

// IPGTE applies the GTE predicate on the "ip" field.
func IPGTE(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldGTE(FieldIP, v))
}

// IPLT applies the LT predicate on the "ip" field.
func IPLT(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldLT(FieldIP, v))
}

// IPLTE applies the LTE predicate on the "ip" field.
func IPLTE(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldLTE(FieldIP, v))
}

// IPContains applies the Contains predicate on the "ip" field.
func IPContains(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldContains(FieldIP, v))
}

// IPHasPrefix applies the HasPrefix predicate on the "ip" field.
func IPHasPrefix(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldHasPrefix(FieldIP, v))
}

// IPHasSuffix applies the HasSuffix predicate on the "ip" field.
func IPHasSuffix(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldHasSuffix(FieldIP, v))
}

// IPIsNil applies the IsNil predicate on the "ip" field.
func IPIsNil() predicate.InputLog {
	return predicate.InputLog(sql.FieldIsNull(FieldIP))
}

// IPNotNil applies the NotNil predicate on the "ip" field.
func IPNotNil() predicate.InputLog {
	return predicate.InputLog(sql.FieldNotNull(FieldIP))
}

// IPEqualFold applies the EqualFold predicate on the "ip" field.
func IPEqualFold(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldEqualFold(FieldIP, v))
}

// IPContainsFold applies the ContainsFold predicate on the "ip" field.
func IPContainsFold(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldContainsFold(FieldIP, v))
}

// CallerEQ applies the EQ predicate on the "caller" field.
func CallerEQ(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldEQ(FieldCaller, v))
}

// CallerNEQ applies the NEQ predicate on the "caller" field.
func CallerNEQ(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldNEQ(FieldCaller, v))
}

// CallerIn applies the In predicate on the "caller" field.
func CallerIn(vs ...string) predicate.InputLog {
	return predicate.InputLog(sql.FieldIn(FieldCaller, vs...))
}

// CallerNotIn applies the NotIn predicate on the "caller" field.
func CallerNotIn(vs ...string) predicate.InputLog {
	return predicate.InputLog(sql.FieldNotIn(FieldCaller, vs...))
}

// CallerGT applies the GT predicate on the "caller" field.
func CallerGT(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldGT(FieldCaller, v))
}

// CallerGTE applies the GTE predicate on the "caller" field.
func CallerGTE(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldGTE(FieldCaller, v))
}

// CallerLT applies the LT predicate on the "caller" field.
func CallerLT(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldLT(FieldCaller, v))
}

// CallerLTE applies the LTE predicate on the "caller" field.
func CallerLTE(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldLTE(FieldCaller, v))
}

// CallerContains applies the Contains predicate on the "caller" field.
func CallerContains(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldContains(FieldCaller, v))
}

// CallerHasPrefix applies the HasPrefix predicate on the "caller" field.
func CallerHasPrefix(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldHasPrefix(FieldCaller, v))
}

// CallerHasSuffix applies the HasSuffix predicate on the "caller" field.
func CallerHasSuffix(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldHasSuffix(FieldCaller, v))
}

// CallerEqualFold applies the EqualFold predicate on the "caller" field.
func CallerEqualFold(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldEqualFold(FieldCaller, v))
}

// CallerContainsFold applies the ContainsFold predicate on the "caller" field.
func CallerContainsFold(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldContainsFold(FieldCaller, v))
}

// MethodEQ applies the EQ predicate on the "method" field.
func MethodEQ(v Method) predicate.InputLog {
	return predicate.InputLog(sql.FieldEQ(FieldMethod, v))
}

// MethodNEQ applies the NEQ predicate on the "method" field.
func MethodNEQ(v Method) predicate.InputLog {
	return predicate.InputLog(sql.FieldNEQ(FieldMethod, v))
}

// MethodIn applies the In predicate on the "method" field.
func MethodIn(vs ...Method) predicate.InputLog {
	return predicate.InputLog(sql.FieldIn(FieldMethod, vs...))
}

// MethodNotIn applies the NotIn predicate on the "method" field.
func MethodNotIn(vs ...Method) predicate.InputLog {
	return predicate.InputLog(sql.FieldNotIn(FieldMethod, vs...))
}

// HmacKeyEQ applies the EQ predicate on the "hmac_key" field.
func HmacKeyEQ(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldEQ(FieldHmacKey, v))
}

// HmacKeyNEQ applies the NEQ predicate on the "hmac_key" field.
func HmacKeyNEQ(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldNEQ(FieldHmacKey, v))
}

// HmacKeyIn applies the In predicate on the "hmac_key" field.
func HmacKeyIn(vs ...string) predicate.InputLog {
	return predicate.InputLog(sql.FieldIn(FieldHmacKey, vs...))
}

// HmacKeyNotIn applies the NotIn predicate on the "hmac_key" field.
func HmacKeyNotIn(vs ...string) predicate.InputLog {
	return predicate.InputLog(sql.FieldNotIn(FieldHmacKey, vs...))
}

// HmacKeyGT applies the GT predicate on the "hmac_key" field.
func HmacKeyGT(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldGT(FieldHmacKey, v))
}

// HmacKeyGTE applies the GTE predicate on the "hmac_key" field.
func HmacKeyGTE(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldGTE(FieldHmacKey, v))
}

// HmacKeyLT applies the LT predicate on the "hmac_key" field.
func HmacKeyLT(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldLT(FieldHmacKey, v))
}

// HmacKeyLTE applies the LTE predicate on the "hmac_key" field.
func HmacKeyLTE(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldLTE(FieldHmacKey, v))
}

// HmacKeyContains applies the Contains predicate on the "hmac_key" field.
func HmacKeyContains(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldContains(FieldHmacKey, v))
}

// HmacKeyHasPrefix applies the HasPrefix predicate on the "hmac_key" field.
func HmacKeyHasPrefix(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldHasPrefix(FieldHmacKey, v))
}

// HmacKeyHasSuffix applies the HasSuffix predicate on the "hmac_key" field.
func HmacKeyHasSuffix(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldHasSuffix(FieldHmacKey, v))
}

// HmacKeyEqualFold applies the EqualFold predicate on the "hmac_key" field.
func HmacKeyEqualFold(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldEqualFold(FieldHmacKey, v))
}

// HmacKeyContainsFold applies the ContainsFold predicate on the "hmac_key" field.
func HmacKeyContainsFold(v string) predicate.InputLog {
	return predicate.InputLog(sql.FieldContainsFold(FieldHmacKey, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.InputLog) predicate.InputLog {
	return predicate.InputLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.InputLog) predicate.InputLog {
	return predicate.InputLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.InputLog) predicate.InputLog {
	return predicate.InputLog(func(s *sql.Selector) {
		p(s.Not())
	})
}
