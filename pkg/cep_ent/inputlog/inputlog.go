// Code generated by ent, DO NOT EDIT.

package inputlog

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the inputlog type in the database.
	Label = "input_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldTraceID holds the string denoting the trace_id field in the database.
	FieldTraceID = "trace_id"
	// FieldHeaders holds the string denoting the headers field in the database.
	FieldHeaders = "headers"
	// FieldBody holds the string denoting the body field in the database.
	FieldBody = "body"
	// FieldQuery holds the string denoting the query field in the database.
	FieldQuery = "query"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldIP holds the string denoting the ip field in the database.
	FieldIP = "ip"
	// FieldCaller holds the string denoting the caller field in the database.
	FieldCaller = "caller"
	// FieldMethod holds the string denoting the method field in the database.
	FieldMethod = "method"
	// FieldHmacKey holds the string denoting the hmac_key field in the database.
	FieldHmacKey = "hmac_key"
	// Table holds the table name of the inputlog in the database.
	Table = "input_logs"
)

// Columns holds all SQL columns for inputlog fields.
var Columns = []string{
	FieldID,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldTraceID,
	FieldHeaders,
	FieldBody,
	FieldQuery,
	FieldURL,
	FieldIP,
	FieldCaller,
	FieldMethod,
	FieldHmacKey,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedBy holds the default value on creation for the "created_by" field.
	DefaultCreatedBy int64
	// DefaultUpdatedBy holds the default value on creation for the "updated_by" field.
	DefaultUpdatedBy int64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt time.Time
	// DefaultTraceID holds the default value on creation for the "trace_id" field.
	DefaultTraceID int64
	// DefaultHeaders holds the default value on creation for the "headers" field.
	DefaultHeaders string
	// DefaultBody holds the default value on creation for the "body" field.
	DefaultBody string
	// DefaultQuery holds the default value on creation for the "query" field.
	DefaultQuery string
	// DefaultURL holds the default value on creation for the "url" field.
	DefaultURL string
	// DefaultIP holds the default value on creation for the "ip" field.
	DefaultIP string
	// DefaultCaller holds the default value on creation for the "caller" field.
	DefaultCaller string
	// DefaultHmacKey holds the default value on creation for the "hmac_key" field.
	DefaultHmacKey string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
)

// Method defines the type for the "method" enum field.
type Method string

// MethodGET is the default value of the Method enum.
const DefaultMethod = MethodGET

// Method values.
const (
	MethodGET    Method = "GET"
	MethodPOST   Method = "POST"
	MethodPUT    Method = "PUT"
	MethodDELETE Method = "DELETE"
	MethodPATCH  Method = "PATCH"
)

func (m Method) String() string {
	return string(m)
}

// MethodValidator is a validator for the "method" field enum values. It is called by the builders before save.
func MethodValidator(m Method) error {
	switch m {
	case MethodGET, MethodPOST, MethodPUT, MethodDELETE, MethodPATCH:
		return nil
	default:
		return fmt.Errorf("inputlog: invalid enum value for method field: %q", m)
	}
}

// OrderOption defines the ordering options for the InputLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByTraceID orders the results by the trace_id field.
func ByTraceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTraceID, opts...).ToFunc()
}

// ByHeaders orders the results by the headers field.
func ByHeaders(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHeaders, opts...).ToFunc()
}

// ByBody orders the results by the body field.
func ByBody(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBody, opts...).ToFunc()
}

// ByQuery orders the results by the query field.
func ByQuery(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuery, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByIP orders the results by the ip field.
func ByIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIP, opts...).ToFunc()
}

// ByCaller orders the results by the caller field.
func ByCaller(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCaller, opts...).ToFunc()
}

// ByMethod orders the results by the method field.
func ByMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMethod, opts...).ToFunc()
}

// ByHmacKey orders the results by the hmac_key field.
func ByHmacKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHmacKey, opts...).ToFunc()
}
