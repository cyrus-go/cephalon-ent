// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/campaign"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/campaignorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/costbill"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
)

// CampaignOrderUpdate is the builder for updating CampaignOrder entities.
type CampaignOrderUpdate struct {
	config
	hooks    []Hook
	mutation *CampaignOrderMutation
}

// Where appends a list predicates to the CampaignOrderUpdate builder.
func (cou *CampaignOrderUpdate) Where(ps ...predicate.CampaignOrder) *CampaignOrderUpdate {
	cou.mutation.Where(ps...)
	return cou
}

// SetCreatedBy sets the "created_by" field.
func (cou *CampaignOrderUpdate) SetCreatedBy(i int64) *CampaignOrderUpdate {
	cou.mutation.ResetCreatedBy()
	cou.mutation.SetCreatedBy(i)
	return cou
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cou *CampaignOrderUpdate) SetNillableCreatedBy(i *int64) *CampaignOrderUpdate {
	if i != nil {
		cou.SetCreatedBy(*i)
	}
	return cou
}

// AddCreatedBy adds i to the "created_by" field.
func (cou *CampaignOrderUpdate) AddCreatedBy(i int64) *CampaignOrderUpdate {
	cou.mutation.AddCreatedBy(i)
	return cou
}

// SetUpdatedBy sets the "updated_by" field.
func (cou *CampaignOrderUpdate) SetUpdatedBy(i int64) *CampaignOrderUpdate {
	cou.mutation.ResetUpdatedBy()
	cou.mutation.SetUpdatedBy(i)
	return cou
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cou *CampaignOrderUpdate) SetNillableUpdatedBy(i *int64) *CampaignOrderUpdate {
	if i != nil {
		cou.SetUpdatedBy(*i)
	}
	return cou
}

// AddUpdatedBy adds i to the "updated_by" field.
func (cou *CampaignOrderUpdate) AddUpdatedBy(i int64) *CampaignOrderUpdate {
	cou.mutation.AddUpdatedBy(i)
	return cou
}

// SetUpdatedAt sets the "updated_at" field.
func (cou *CampaignOrderUpdate) SetUpdatedAt(t time.Time) *CampaignOrderUpdate {
	cou.mutation.SetUpdatedAt(t)
	return cou
}

// SetDeletedAt sets the "deleted_at" field.
func (cou *CampaignOrderUpdate) SetDeletedAt(t time.Time) *CampaignOrderUpdate {
	cou.mutation.SetDeletedAt(t)
	return cou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cou *CampaignOrderUpdate) SetNillableDeletedAt(t *time.Time) *CampaignOrderUpdate {
	if t != nil {
		cou.SetDeletedAt(*t)
	}
	return cou
}

// SetUserID sets the "user_id" field.
func (cou *CampaignOrderUpdate) SetUserID(i int64) *CampaignOrderUpdate {
	cou.mutation.SetUserID(i)
	return cou
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cou *CampaignOrderUpdate) SetNillableUserID(i *int64) *CampaignOrderUpdate {
	if i != nil {
		cou.SetUserID(*i)
	}
	return cou
}

// SetCampaignID sets the "campaign_id" field.
func (cou *CampaignOrderUpdate) SetCampaignID(i int64) *CampaignOrderUpdate {
	cou.mutation.SetCampaignID(i)
	return cou
}

// SetNillableCampaignID sets the "campaign_id" field if the given value is not nil.
func (cou *CampaignOrderUpdate) SetNillableCampaignID(i *int64) *CampaignOrderUpdate {
	if i != nil {
		cou.SetCampaignID(*i)
	}
	return cou
}

// SetUser sets the "user" edge to the User entity.
func (cou *CampaignOrderUpdate) SetUser(u *User) *CampaignOrderUpdate {
	return cou.SetUserID(u.ID)
}

// SetCampaign sets the "campaign" edge to the Campaign entity.
func (cou *CampaignOrderUpdate) SetCampaign(c *Campaign) *CampaignOrderUpdate {
	return cou.SetCampaignID(c.ID)
}

// AddCostBillIDs adds the "cost_bills" edge to the CostBill entity by IDs.
func (cou *CampaignOrderUpdate) AddCostBillIDs(ids ...int64) *CampaignOrderUpdate {
	cou.mutation.AddCostBillIDs(ids...)
	return cou
}

// AddCostBills adds the "cost_bills" edges to the CostBill entity.
func (cou *CampaignOrderUpdate) AddCostBills(c ...*CostBill) *CampaignOrderUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cou.AddCostBillIDs(ids...)
}

// Mutation returns the CampaignOrderMutation object of the builder.
func (cou *CampaignOrderUpdate) Mutation() *CampaignOrderMutation {
	return cou.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cou *CampaignOrderUpdate) ClearUser() *CampaignOrderUpdate {
	cou.mutation.ClearUser()
	return cou
}

// ClearCampaign clears the "campaign" edge to the Campaign entity.
func (cou *CampaignOrderUpdate) ClearCampaign() *CampaignOrderUpdate {
	cou.mutation.ClearCampaign()
	return cou
}

// ClearCostBills clears all "cost_bills" edges to the CostBill entity.
func (cou *CampaignOrderUpdate) ClearCostBills() *CampaignOrderUpdate {
	cou.mutation.ClearCostBills()
	return cou
}

// RemoveCostBillIDs removes the "cost_bills" edge to CostBill entities by IDs.
func (cou *CampaignOrderUpdate) RemoveCostBillIDs(ids ...int64) *CampaignOrderUpdate {
	cou.mutation.RemoveCostBillIDs(ids...)
	return cou
}

// RemoveCostBills removes "cost_bills" edges to CostBill entities.
func (cou *CampaignOrderUpdate) RemoveCostBills(c ...*CostBill) *CampaignOrderUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cou.RemoveCostBillIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cou *CampaignOrderUpdate) Save(ctx context.Context) (int, error) {
	cou.defaults()
	return withHooks(ctx, cou.sqlSave, cou.mutation, cou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cou *CampaignOrderUpdate) SaveX(ctx context.Context) int {
	affected, err := cou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cou *CampaignOrderUpdate) Exec(ctx context.Context) error {
	_, err := cou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cou *CampaignOrderUpdate) ExecX(ctx context.Context) {
	if err := cou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cou *CampaignOrderUpdate) defaults() {
	if _, ok := cou.mutation.UpdatedAt(); !ok {
		v := campaignorder.UpdateDefaultUpdatedAt()
		cou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cou *CampaignOrderUpdate) check() error {
	if _, ok := cou.mutation.UserID(); cou.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "CampaignOrder.user"`)
	}
	if _, ok := cou.mutation.CampaignID(); cou.mutation.CampaignCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "CampaignOrder.campaign"`)
	}
	return nil
}

func (cou *CampaignOrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(campaignorder.Table, campaignorder.Columns, sqlgraph.NewFieldSpec(campaignorder.FieldID, field.TypeInt64))
	if ps := cou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cou.mutation.CreatedBy(); ok {
		_spec.SetField(campaignorder.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := cou.mutation.AddedCreatedBy(); ok {
		_spec.AddField(campaignorder.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := cou.mutation.UpdatedBy(); ok {
		_spec.SetField(campaignorder.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := cou.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(campaignorder.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := cou.mutation.UpdatedAt(); ok {
		_spec.SetField(campaignorder.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cou.mutation.DeletedAt(); ok {
		_spec.SetField(campaignorder.FieldDeletedAt, field.TypeTime, value)
	}
	if cou.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   campaignorder.UserTable,
			Columns: []string{campaignorder.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cou.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   campaignorder.UserTable,
			Columns: []string{campaignorder.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cou.mutation.CampaignCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   campaignorder.CampaignTable,
			Columns: []string{campaignorder.CampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cou.mutation.CampaignIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   campaignorder.CampaignTable,
			Columns: []string{campaignorder.CampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cou.mutation.CostBillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaignorder.CostBillsTable,
			Columns: []string{campaignorder.CostBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costbill.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cou.mutation.RemovedCostBillsIDs(); len(nodes) > 0 && !cou.mutation.CostBillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaignorder.CostBillsTable,
			Columns: []string{campaignorder.CostBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costbill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cou.mutation.CostBillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaignorder.CostBillsTable,
			Columns: []string{campaignorder.CostBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costbill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{campaignorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cou.mutation.done = true
	return n, nil
}

// CampaignOrderUpdateOne is the builder for updating a single CampaignOrder entity.
type CampaignOrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CampaignOrderMutation
}

// SetCreatedBy sets the "created_by" field.
func (couo *CampaignOrderUpdateOne) SetCreatedBy(i int64) *CampaignOrderUpdateOne {
	couo.mutation.ResetCreatedBy()
	couo.mutation.SetCreatedBy(i)
	return couo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (couo *CampaignOrderUpdateOne) SetNillableCreatedBy(i *int64) *CampaignOrderUpdateOne {
	if i != nil {
		couo.SetCreatedBy(*i)
	}
	return couo
}

// AddCreatedBy adds i to the "created_by" field.
func (couo *CampaignOrderUpdateOne) AddCreatedBy(i int64) *CampaignOrderUpdateOne {
	couo.mutation.AddCreatedBy(i)
	return couo
}

// SetUpdatedBy sets the "updated_by" field.
func (couo *CampaignOrderUpdateOne) SetUpdatedBy(i int64) *CampaignOrderUpdateOne {
	couo.mutation.ResetUpdatedBy()
	couo.mutation.SetUpdatedBy(i)
	return couo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (couo *CampaignOrderUpdateOne) SetNillableUpdatedBy(i *int64) *CampaignOrderUpdateOne {
	if i != nil {
		couo.SetUpdatedBy(*i)
	}
	return couo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (couo *CampaignOrderUpdateOne) AddUpdatedBy(i int64) *CampaignOrderUpdateOne {
	couo.mutation.AddUpdatedBy(i)
	return couo
}

// SetUpdatedAt sets the "updated_at" field.
func (couo *CampaignOrderUpdateOne) SetUpdatedAt(t time.Time) *CampaignOrderUpdateOne {
	couo.mutation.SetUpdatedAt(t)
	return couo
}

// SetDeletedAt sets the "deleted_at" field.
func (couo *CampaignOrderUpdateOne) SetDeletedAt(t time.Time) *CampaignOrderUpdateOne {
	couo.mutation.SetDeletedAt(t)
	return couo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (couo *CampaignOrderUpdateOne) SetNillableDeletedAt(t *time.Time) *CampaignOrderUpdateOne {
	if t != nil {
		couo.SetDeletedAt(*t)
	}
	return couo
}

// SetUserID sets the "user_id" field.
func (couo *CampaignOrderUpdateOne) SetUserID(i int64) *CampaignOrderUpdateOne {
	couo.mutation.SetUserID(i)
	return couo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (couo *CampaignOrderUpdateOne) SetNillableUserID(i *int64) *CampaignOrderUpdateOne {
	if i != nil {
		couo.SetUserID(*i)
	}
	return couo
}

// SetCampaignID sets the "campaign_id" field.
func (couo *CampaignOrderUpdateOne) SetCampaignID(i int64) *CampaignOrderUpdateOne {
	couo.mutation.SetCampaignID(i)
	return couo
}

// SetNillableCampaignID sets the "campaign_id" field if the given value is not nil.
func (couo *CampaignOrderUpdateOne) SetNillableCampaignID(i *int64) *CampaignOrderUpdateOne {
	if i != nil {
		couo.SetCampaignID(*i)
	}
	return couo
}

// SetUser sets the "user" edge to the User entity.
func (couo *CampaignOrderUpdateOne) SetUser(u *User) *CampaignOrderUpdateOne {
	return couo.SetUserID(u.ID)
}

// SetCampaign sets the "campaign" edge to the Campaign entity.
func (couo *CampaignOrderUpdateOne) SetCampaign(c *Campaign) *CampaignOrderUpdateOne {
	return couo.SetCampaignID(c.ID)
}

// AddCostBillIDs adds the "cost_bills" edge to the CostBill entity by IDs.
func (couo *CampaignOrderUpdateOne) AddCostBillIDs(ids ...int64) *CampaignOrderUpdateOne {
	couo.mutation.AddCostBillIDs(ids...)
	return couo
}

// AddCostBills adds the "cost_bills" edges to the CostBill entity.
func (couo *CampaignOrderUpdateOne) AddCostBills(c ...*CostBill) *CampaignOrderUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return couo.AddCostBillIDs(ids...)
}

// Mutation returns the CampaignOrderMutation object of the builder.
func (couo *CampaignOrderUpdateOne) Mutation() *CampaignOrderMutation {
	return couo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (couo *CampaignOrderUpdateOne) ClearUser() *CampaignOrderUpdateOne {
	couo.mutation.ClearUser()
	return couo
}

// ClearCampaign clears the "campaign" edge to the Campaign entity.
func (couo *CampaignOrderUpdateOne) ClearCampaign() *CampaignOrderUpdateOne {
	couo.mutation.ClearCampaign()
	return couo
}

// ClearCostBills clears all "cost_bills" edges to the CostBill entity.
func (couo *CampaignOrderUpdateOne) ClearCostBills() *CampaignOrderUpdateOne {
	couo.mutation.ClearCostBills()
	return couo
}

// RemoveCostBillIDs removes the "cost_bills" edge to CostBill entities by IDs.
func (couo *CampaignOrderUpdateOne) RemoveCostBillIDs(ids ...int64) *CampaignOrderUpdateOne {
	couo.mutation.RemoveCostBillIDs(ids...)
	return couo
}

// RemoveCostBills removes "cost_bills" edges to CostBill entities.
func (couo *CampaignOrderUpdateOne) RemoveCostBills(c ...*CostBill) *CampaignOrderUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return couo.RemoveCostBillIDs(ids...)
}

// Where appends a list predicates to the CampaignOrderUpdate builder.
func (couo *CampaignOrderUpdateOne) Where(ps ...predicate.CampaignOrder) *CampaignOrderUpdateOne {
	couo.mutation.Where(ps...)
	return couo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (couo *CampaignOrderUpdateOne) Select(field string, fields ...string) *CampaignOrderUpdateOne {
	couo.fields = append([]string{field}, fields...)
	return couo
}

// Save executes the query and returns the updated CampaignOrder entity.
func (couo *CampaignOrderUpdateOne) Save(ctx context.Context) (*CampaignOrder, error) {
	couo.defaults()
	return withHooks(ctx, couo.sqlSave, couo.mutation, couo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (couo *CampaignOrderUpdateOne) SaveX(ctx context.Context) *CampaignOrder {
	node, err := couo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (couo *CampaignOrderUpdateOne) Exec(ctx context.Context) error {
	_, err := couo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (couo *CampaignOrderUpdateOne) ExecX(ctx context.Context) {
	if err := couo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (couo *CampaignOrderUpdateOne) defaults() {
	if _, ok := couo.mutation.UpdatedAt(); !ok {
		v := campaignorder.UpdateDefaultUpdatedAt()
		couo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (couo *CampaignOrderUpdateOne) check() error {
	if _, ok := couo.mutation.UserID(); couo.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "CampaignOrder.user"`)
	}
	if _, ok := couo.mutation.CampaignID(); couo.mutation.CampaignCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "CampaignOrder.campaign"`)
	}
	return nil
}

func (couo *CampaignOrderUpdateOne) sqlSave(ctx context.Context) (_node *CampaignOrder, err error) {
	if err := couo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(campaignorder.Table, campaignorder.Columns, sqlgraph.NewFieldSpec(campaignorder.FieldID, field.TypeInt64))
	id, ok := couo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "CampaignOrder.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := couo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, campaignorder.FieldID)
		for _, f := range fields {
			if !campaignorder.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != campaignorder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := couo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := couo.mutation.CreatedBy(); ok {
		_spec.SetField(campaignorder.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := couo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(campaignorder.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := couo.mutation.UpdatedBy(); ok {
		_spec.SetField(campaignorder.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := couo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(campaignorder.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := couo.mutation.UpdatedAt(); ok {
		_spec.SetField(campaignorder.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := couo.mutation.DeletedAt(); ok {
		_spec.SetField(campaignorder.FieldDeletedAt, field.TypeTime, value)
	}
	if couo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   campaignorder.UserTable,
			Columns: []string{campaignorder.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := couo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   campaignorder.UserTable,
			Columns: []string{campaignorder.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if couo.mutation.CampaignCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   campaignorder.CampaignTable,
			Columns: []string{campaignorder.CampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := couo.mutation.CampaignIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   campaignorder.CampaignTable,
			Columns: []string{campaignorder.CampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if couo.mutation.CostBillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaignorder.CostBillsTable,
			Columns: []string{campaignorder.CostBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costbill.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := couo.mutation.RemovedCostBillsIDs(); len(nodes) > 0 && !couo.mutation.CostBillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaignorder.CostBillsTable,
			Columns: []string{campaignorder.CostBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costbill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := couo.mutation.CostBillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaignorder.CostBillsTable,
			Columns: []string{campaignorder.CostBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costbill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CampaignOrder{config: couo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, couo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{campaignorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	couo.mutation.done = true
	return _node, nil
}
