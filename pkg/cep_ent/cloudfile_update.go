// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/cloudfile"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
)

// CloudFileUpdate is the builder for updating CloudFile entities.
type CloudFileUpdate struct {
	config
	hooks     []Hook
	mutation  *CloudFileMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CloudFileUpdate builder.
func (cfu *CloudFileUpdate) Where(ps ...predicate.CloudFile) *CloudFileUpdate {
	cfu.mutation.Where(ps...)
	return cfu
}

// SetCreatedBy sets the "created_by" field.
func (cfu *CloudFileUpdate) SetCreatedBy(i int64) *CloudFileUpdate {
	cfu.mutation.ResetCreatedBy()
	cfu.mutation.SetCreatedBy(i)
	return cfu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cfu *CloudFileUpdate) SetNillableCreatedBy(i *int64) *CloudFileUpdate {
	if i != nil {
		cfu.SetCreatedBy(*i)
	}
	return cfu
}

// AddCreatedBy adds i to the "created_by" field.
func (cfu *CloudFileUpdate) AddCreatedBy(i int64) *CloudFileUpdate {
	cfu.mutation.AddCreatedBy(i)
	return cfu
}

// SetUpdatedBy sets the "updated_by" field.
func (cfu *CloudFileUpdate) SetUpdatedBy(i int64) *CloudFileUpdate {
	cfu.mutation.ResetUpdatedBy()
	cfu.mutation.SetUpdatedBy(i)
	return cfu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cfu *CloudFileUpdate) SetNillableUpdatedBy(i *int64) *CloudFileUpdate {
	if i != nil {
		cfu.SetUpdatedBy(*i)
	}
	return cfu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (cfu *CloudFileUpdate) AddUpdatedBy(i int64) *CloudFileUpdate {
	cfu.mutation.AddUpdatedBy(i)
	return cfu
}

// SetUpdatedAt sets the "updated_at" field.
func (cfu *CloudFileUpdate) SetUpdatedAt(t time.Time) *CloudFileUpdate {
	cfu.mutation.SetUpdatedAt(t)
	return cfu
}

// SetDeletedAt sets the "deleted_at" field.
func (cfu *CloudFileUpdate) SetDeletedAt(t time.Time) *CloudFileUpdate {
	cfu.mutation.SetDeletedAt(t)
	return cfu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cfu *CloudFileUpdate) SetNillableDeletedAt(t *time.Time) *CloudFileUpdate {
	if t != nil {
		cfu.SetDeletedAt(*t)
	}
	return cfu
}

// SetUserID sets the "user_id" field.
func (cfu *CloudFileUpdate) SetUserID(i int64) *CloudFileUpdate {
	cfu.mutation.SetUserID(i)
	return cfu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cfu *CloudFileUpdate) SetNillableUserID(i *int64) *CloudFileUpdate {
	if i != nil {
		cfu.SetUserID(*i)
	}
	return cfu
}

// SetName sets the "name" field.
func (cfu *CloudFileUpdate) SetName(s string) *CloudFileUpdate {
	cfu.mutation.SetName(s)
	return cfu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cfu *CloudFileUpdate) SetNillableName(s *string) *CloudFileUpdate {
	if s != nil {
		cfu.SetName(*s)
	}
	return cfu
}

// SetIcon sets the "icon" field.
func (cfu *CloudFileUpdate) SetIcon(s string) *CloudFileUpdate {
	cfu.mutation.SetIcon(s)
	return cfu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (cfu *CloudFileUpdate) SetNillableIcon(s *string) *CloudFileUpdate {
	if s != nil {
		cfu.SetIcon(*s)
	}
	return cfu
}

// SetSize sets the "size" field.
func (cfu *CloudFileUpdate) SetSize(i int64) *CloudFileUpdate {
	cfu.mutation.ResetSize()
	cfu.mutation.SetSize(i)
	return cfu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (cfu *CloudFileUpdate) SetNillableSize(i *int64) *CloudFileUpdate {
	if i != nil {
		cfu.SetSize(*i)
	}
	return cfu
}

// AddSize adds i to the "size" field.
func (cfu *CloudFileUpdate) AddSize(i int64) *CloudFileUpdate {
	cfu.mutation.AddSize(i)
	return cfu
}

// SetMd5 sets the "md5" field.
func (cfu *CloudFileUpdate) SetMd5(s string) *CloudFileUpdate {
	cfu.mutation.SetMd5(s)
	return cfu
}

// SetNillableMd5 sets the "md5" field if the given value is not nil.
func (cfu *CloudFileUpdate) SetNillableMd5(s *string) *CloudFileUpdate {
	if s != nil {
		cfu.SetMd5(*s)
	}
	return cfu
}

// SetUser sets the "user" edge to the User entity.
func (cfu *CloudFileUpdate) SetUser(u *User) *CloudFileUpdate {
	return cfu.SetUserID(u.ID)
}

// Mutation returns the CloudFileMutation object of the builder.
func (cfu *CloudFileUpdate) Mutation() *CloudFileMutation {
	return cfu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cfu *CloudFileUpdate) ClearUser() *CloudFileUpdate {
	cfu.mutation.ClearUser()
	return cfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cfu *CloudFileUpdate) Save(ctx context.Context) (int, error) {
	cfu.defaults()
	return withHooks(ctx, cfu.sqlSave, cfu.mutation, cfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cfu *CloudFileUpdate) SaveX(ctx context.Context) int {
	affected, err := cfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cfu *CloudFileUpdate) Exec(ctx context.Context) error {
	_, err := cfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfu *CloudFileUpdate) ExecX(ctx context.Context) {
	if err := cfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cfu *CloudFileUpdate) defaults() {
	if _, ok := cfu.mutation.UpdatedAt(); !ok {
		v := cloudfile.UpdateDefaultUpdatedAt()
		cfu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cfu *CloudFileUpdate) check() error {
	if _, ok := cfu.mutation.UserID(); cfu.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "CloudFile.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cfu *CloudFileUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CloudFileUpdate {
	cfu.modifiers = append(cfu.modifiers, modifiers...)
	return cfu
}

func (cfu *CloudFileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cfu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(cloudfile.Table, cloudfile.Columns, sqlgraph.NewFieldSpec(cloudfile.FieldID, field.TypeInt64))
	if ps := cfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cfu.mutation.CreatedBy(); ok {
		_spec.SetField(cloudfile.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := cfu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(cloudfile.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := cfu.mutation.UpdatedBy(); ok {
		_spec.SetField(cloudfile.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := cfu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(cloudfile.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := cfu.mutation.UpdatedAt(); ok {
		_spec.SetField(cloudfile.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cfu.mutation.DeletedAt(); ok {
		_spec.SetField(cloudfile.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := cfu.mutation.Name(); ok {
		_spec.SetField(cloudfile.FieldName, field.TypeString, value)
	}
	if value, ok := cfu.mutation.Icon(); ok {
		_spec.SetField(cloudfile.FieldIcon, field.TypeString, value)
	}
	if value, ok := cfu.mutation.Size(); ok {
		_spec.SetField(cloudfile.FieldSize, field.TypeInt64, value)
	}
	if value, ok := cfu.mutation.AddedSize(); ok {
		_spec.AddField(cloudfile.FieldSize, field.TypeInt64, value)
	}
	if value, ok := cfu.mutation.Md5(); ok {
		_spec.SetField(cloudfile.FieldMd5, field.TypeString, value)
	}
	if cfu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cloudfile.UserTable,
			Columns: []string{cloudfile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cfu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cloudfile.UserTable,
			Columns: []string{cloudfile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cfu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cloudfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cfu.mutation.done = true
	return n, nil
}

// CloudFileUpdateOne is the builder for updating a single CloudFile entity.
type CloudFileUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CloudFileMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedBy sets the "created_by" field.
func (cfuo *CloudFileUpdateOne) SetCreatedBy(i int64) *CloudFileUpdateOne {
	cfuo.mutation.ResetCreatedBy()
	cfuo.mutation.SetCreatedBy(i)
	return cfuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cfuo *CloudFileUpdateOne) SetNillableCreatedBy(i *int64) *CloudFileUpdateOne {
	if i != nil {
		cfuo.SetCreatedBy(*i)
	}
	return cfuo
}

// AddCreatedBy adds i to the "created_by" field.
func (cfuo *CloudFileUpdateOne) AddCreatedBy(i int64) *CloudFileUpdateOne {
	cfuo.mutation.AddCreatedBy(i)
	return cfuo
}

// SetUpdatedBy sets the "updated_by" field.
func (cfuo *CloudFileUpdateOne) SetUpdatedBy(i int64) *CloudFileUpdateOne {
	cfuo.mutation.ResetUpdatedBy()
	cfuo.mutation.SetUpdatedBy(i)
	return cfuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cfuo *CloudFileUpdateOne) SetNillableUpdatedBy(i *int64) *CloudFileUpdateOne {
	if i != nil {
		cfuo.SetUpdatedBy(*i)
	}
	return cfuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (cfuo *CloudFileUpdateOne) AddUpdatedBy(i int64) *CloudFileUpdateOne {
	cfuo.mutation.AddUpdatedBy(i)
	return cfuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cfuo *CloudFileUpdateOne) SetUpdatedAt(t time.Time) *CloudFileUpdateOne {
	cfuo.mutation.SetUpdatedAt(t)
	return cfuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cfuo *CloudFileUpdateOne) SetDeletedAt(t time.Time) *CloudFileUpdateOne {
	cfuo.mutation.SetDeletedAt(t)
	return cfuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cfuo *CloudFileUpdateOne) SetNillableDeletedAt(t *time.Time) *CloudFileUpdateOne {
	if t != nil {
		cfuo.SetDeletedAt(*t)
	}
	return cfuo
}

// SetUserID sets the "user_id" field.
func (cfuo *CloudFileUpdateOne) SetUserID(i int64) *CloudFileUpdateOne {
	cfuo.mutation.SetUserID(i)
	return cfuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cfuo *CloudFileUpdateOne) SetNillableUserID(i *int64) *CloudFileUpdateOne {
	if i != nil {
		cfuo.SetUserID(*i)
	}
	return cfuo
}

// SetName sets the "name" field.
func (cfuo *CloudFileUpdateOne) SetName(s string) *CloudFileUpdateOne {
	cfuo.mutation.SetName(s)
	return cfuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cfuo *CloudFileUpdateOne) SetNillableName(s *string) *CloudFileUpdateOne {
	if s != nil {
		cfuo.SetName(*s)
	}
	return cfuo
}

// SetIcon sets the "icon" field.
func (cfuo *CloudFileUpdateOne) SetIcon(s string) *CloudFileUpdateOne {
	cfuo.mutation.SetIcon(s)
	return cfuo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (cfuo *CloudFileUpdateOne) SetNillableIcon(s *string) *CloudFileUpdateOne {
	if s != nil {
		cfuo.SetIcon(*s)
	}
	return cfuo
}

// SetSize sets the "size" field.
func (cfuo *CloudFileUpdateOne) SetSize(i int64) *CloudFileUpdateOne {
	cfuo.mutation.ResetSize()
	cfuo.mutation.SetSize(i)
	return cfuo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (cfuo *CloudFileUpdateOne) SetNillableSize(i *int64) *CloudFileUpdateOne {
	if i != nil {
		cfuo.SetSize(*i)
	}
	return cfuo
}

// AddSize adds i to the "size" field.
func (cfuo *CloudFileUpdateOne) AddSize(i int64) *CloudFileUpdateOne {
	cfuo.mutation.AddSize(i)
	return cfuo
}

// SetMd5 sets the "md5" field.
func (cfuo *CloudFileUpdateOne) SetMd5(s string) *CloudFileUpdateOne {
	cfuo.mutation.SetMd5(s)
	return cfuo
}

// SetNillableMd5 sets the "md5" field if the given value is not nil.
func (cfuo *CloudFileUpdateOne) SetNillableMd5(s *string) *CloudFileUpdateOne {
	if s != nil {
		cfuo.SetMd5(*s)
	}
	return cfuo
}

// SetUser sets the "user" edge to the User entity.
func (cfuo *CloudFileUpdateOne) SetUser(u *User) *CloudFileUpdateOne {
	return cfuo.SetUserID(u.ID)
}

// Mutation returns the CloudFileMutation object of the builder.
func (cfuo *CloudFileUpdateOne) Mutation() *CloudFileMutation {
	return cfuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cfuo *CloudFileUpdateOne) ClearUser() *CloudFileUpdateOne {
	cfuo.mutation.ClearUser()
	return cfuo
}

// Where appends a list predicates to the CloudFileUpdate builder.
func (cfuo *CloudFileUpdateOne) Where(ps ...predicate.CloudFile) *CloudFileUpdateOne {
	cfuo.mutation.Where(ps...)
	return cfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cfuo *CloudFileUpdateOne) Select(field string, fields ...string) *CloudFileUpdateOne {
	cfuo.fields = append([]string{field}, fields...)
	return cfuo
}

// Save executes the query and returns the updated CloudFile entity.
func (cfuo *CloudFileUpdateOne) Save(ctx context.Context) (*CloudFile, error) {
	cfuo.defaults()
	return withHooks(ctx, cfuo.sqlSave, cfuo.mutation, cfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cfuo *CloudFileUpdateOne) SaveX(ctx context.Context) *CloudFile {
	node, err := cfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cfuo *CloudFileUpdateOne) Exec(ctx context.Context) error {
	_, err := cfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfuo *CloudFileUpdateOne) ExecX(ctx context.Context) {
	if err := cfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cfuo *CloudFileUpdateOne) defaults() {
	if _, ok := cfuo.mutation.UpdatedAt(); !ok {
		v := cloudfile.UpdateDefaultUpdatedAt()
		cfuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cfuo *CloudFileUpdateOne) check() error {
	if _, ok := cfuo.mutation.UserID(); cfuo.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "CloudFile.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cfuo *CloudFileUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CloudFileUpdateOne {
	cfuo.modifiers = append(cfuo.modifiers, modifiers...)
	return cfuo
}

func (cfuo *CloudFileUpdateOne) sqlSave(ctx context.Context) (_node *CloudFile, err error) {
	if err := cfuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(cloudfile.Table, cloudfile.Columns, sqlgraph.NewFieldSpec(cloudfile.FieldID, field.TypeInt64))
	id, ok := cfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "CloudFile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cloudfile.FieldID)
		for _, f := range fields {
			if !cloudfile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != cloudfile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cfuo.mutation.CreatedBy(); ok {
		_spec.SetField(cloudfile.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := cfuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(cloudfile.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := cfuo.mutation.UpdatedBy(); ok {
		_spec.SetField(cloudfile.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := cfuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(cloudfile.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := cfuo.mutation.UpdatedAt(); ok {
		_spec.SetField(cloudfile.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cfuo.mutation.DeletedAt(); ok {
		_spec.SetField(cloudfile.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := cfuo.mutation.Name(); ok {
		_spec.SetField(cloudfile.FieldName, field.TypeString, value)
	}
	if value, ok := cfuo.mutation.Icon(); ok {
		_spec.SetField(cloudfile.FieldIcon, field.TypeString, value)
	}
	if value, ok := cfuo.mutation.Size(); ok {
		_spec.SetField(cloudfile.FieldSize, field.TypeInt64, value)
	}
	if value, ok := cfuo.mutation.AddedSize(); ok {
		_spec.AddField(cloudfile.FieldSize, field.TypeInt64, value)
	}
	if value, ok := cfuo.mutation.Md5(); ok {
		_spec.SetField(cloudfile.FieldMd5, field.TypeString, value)
	}
	if cfuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cloudfile.UserTable,
			Columns: []string{cloudfile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cfuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cloudfile.UserTable,
			Columns: []string{cloudfile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cfuo.modifiers...)
	_node = &CloudFile{config: cfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cloudfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cfuo.mutation.done = true
	return _node, nil
}
