// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/clientversion"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// ClientVersionCreate is the builder for creating a ClientVersion entity.
type ClientVersionCreate struct {
	config
	mutation *ClientVersionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (cvc *ClientVersionCreate) SetCreatedBy(i int64) *ClientVersionCreate {
	cvc.mutation.SetCreatedBy(i)
	return cvc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cvc *ClientVersionCreate) SetNillableCreatedBy(i *int64) *ClientVersionCreate {
	if i != nil {
		cvc.SetCreatedBy(*i)
	}
	return cvc
}

// SetUpdatedBy sets the "updated_by" field.
func (cvc *ClientVersionCreate) SetUpdatedBy(i int64) *ClientVersionCreate {
	cvc.mutation.SetUpdatedBy(i)
	return cvc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cvc *ClientVersionCreate) SetNillableUpdatedBy(i *int64) *ClientVersionCreate {
	if i != nil {
		cvc.SetUpdatedBy(*i)
	}
	return cvc
}

// SetCreatedAt sets the "created_at" field.
func (cvc *ClientVersionCreate) SetCreatedAt(t time.Time) *ClientVersionCreate {
	cvc.mutation.SetCreatedAt(t)
	return cvc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cvc *ClientVersionCreate) SetNillableCreatedAt(t *time.Time) *ClientVersionCreate {
	if t != nil {
		cvc.SetCreatedAt(*t)
	}
	return cvc
}

// SetUpdatedAt sets the "updated_at" field.
func (cvc *ClientVersionCreate) SetUpdatedAt(t time.Time) *ClientVersionCreate {
	cvc.mutation.SetUpdatedAt(t)
	return cvc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cvc *ClientVersionCreate) SetNillableUpdatedAt(t *time.Time) *ClientVersionCreate {
	if t != nil {
		cvc.SetUpdatedAt(*t)
	}
	return cvc
}

// SetDeletedAt sets the "deleted_at" field.
func (cvc *ClientVersionCreate) SetDeletedAt(t time.Time) *ClientVersionCreate {
	cvc.mutation.SetDeletedAt(t)
	return cvc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cvc *ClientVersionCreate) SetNillableDeletedAt(t *time.Time) *ClientVersionCreate {
	if t != nil {
		cvc.SetDeletedAt(*t)
	}
	return cvc
}

// SetClientURL sets the "client_url" field.
func (cvc *ClientVersionCreate) SetClientURL(s string) *ClientVersionCreate {
	cvc.mutation.SetClientURL(s)
	return cvc
}

// SetNillableClientURL sets the "client_url" field if the given value is not nil.
func (cvc *ClientVersionCreate) SetNillableClientURL(s *string) *ClientVersionCreate {
	if s != nil {
		cvc.SetClientURL(*s)
	}
	return cvc
}

// SetConfigURL sets the "config_url" field.
func (cvc *ClientVersionCreate) SetConfigURL(s string) *ClientVersionCreate {
	cvc.mutation.SetConfigURL(s)
	return cvc
}

// SetNillableConfigURL sets the "config_url" field if the given value is not nil.
func (cvc *ClientVersionCreate) SetNillableConfigURL(s *string) *ClientVersionCreate {
	if s != nil {
		cvc.SetConfigURL(*s)
	}
	return cvc
}

// SetVersion sets the "version" field.
func (cvc *ClientVersionCreate) SetVersion(s string) *ClientVersionCreate {
	cvc.mutation.SetVersion(s)
	return cvc
}

// SetStatus sets the "status" field.
func (cvc *ClientVersionCreate) SetStatus(es enums.ClientStatus) *ClientVersionCreate {
	cvc.mutation.SetStatus(es)
	return cvc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cvc *ClientVersionCreate) SetNillableStatus(es *enums.ClientStatus) *ClientVersionCreate {
	if es != nil {
		cvc.SetStatus(*es)
	}
	return cvc
}

// SetID sets the "id" field.
func (cvc *ClientVersionCreate) SetID(i int64) *ClientVersionCreate {
	cvc.mutation.SetID(i)
	return cvc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cvc *ClientVersionCreate) SetNillableID(i *int64) *ClientVersionCreate {
	if i != nil {
		cvc.SetID(*i)
	}
	return cvc
}

// Mutation returns the ClientVersionMutation object of the builder.
func (cvc *ClientVersionCreate) Mutation() *ClientVersionMutation {
	return cvc.mutation
}

// Save creates the ClientVersion in the database.
func (cvc *ClientVersionCreate) Save(ctx context.Context) (*ClientVersion, error) {
	cvc.defaults()
	return withHooks(ctx, cvc.sqlSave, cvc.mutation, cvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cvc *ClientVersionCreate) SaveX(ctx context.Context) *ClientVersion {
	v, err := cvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cvc *ClientVersionCreate) Exec(ctx context.Context) error {
	_, err := cvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cvc *ClientVersionCreate) ExecX(ctx context.Context) {
	if err := cvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cvc *ClientVersionCreate) defaults() {
	if _, ok := cvc.mutation.CreatedBy(); !ok {
		v := clientversion.DefaultCreatedBy
		cvc.mutation.SetCreatedBy(v)
	}
	if _, ok := cvc.mutation.UpdatedBy(); !ok {
		v := clientversion.DefaultUpdatedBy
		cvc.mutation.SetUpdatedBy(v)
	}
	if _, ok := cvc.mutation.CreatedAt(); !ok {
		v := clientversion.DefaultCreatedAt()
		cvc.mutation.SetCreatedAt(v)
	}
	if _, ok := cvc.mutation.UpdatedAt(); !ok {
		v := clientversion.DefaultUpdatedAt()
		cvc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cvc.mutation.DeletedAt(); !ok {
		v := clientversion.DefaultDeletedAt
		cvc.mutation.SetDeletedAt(v)
	}
	if _, ok := cvc.mutation.ClientURL(); !ok {
		v := clientversion.DefaultClientURL
		cvc.mutation.SetClientURL(v)
	}
	if _, ok := cvc.mutation.ConfigURL(); !ok {
		v := clientversion.DefaultConfigURL
		cvc.mutation.SetConfigURL(v)
	}
	if _, ok := cvc.mutation.Status(); !ok {
		v := clientversion.DefaultStatus
		cvc.mutation.SetStatus(v)
	}
	if _, ok := cvc.mutation.ID(); !ok {
		v := clientversion.DefaultID()
		cvc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cvc *ClientVersionCreate) check() error {
	if _, ok := cvc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "ClientVersion.created_by"`)}
	}
	if _, ok := cvc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "ClientVersion.updated_by"`)}
	}
	if _, ok := cvc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "ClientVersion.created_at"`)}
	}
	if _, ok := cvc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "ClientVersion.updated_at"`)}
	}
	if _, ok := cvc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "ClientVersion.deleted_at"`)}
	}
	if _, ok := cvc.mutation.ClientURL(); !ok {
		return &ValidationError{Name: "client_url", err: errors.New(`cep_ent: missing required field "ClientVersion.client_url"`)}
	}
	if _, ok := cvc.mutation.ConfigURL(); !ok {
		return &ValidationError{Name: "config_url", err: errors.New(`cep_ent: missing required field "ClientVersion.config_url"`)}
	}
	if _, ok := cvc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`cep_ent: missing required field "ClientVersion.version"`)}
	}
	if _, ok := cvc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`cep_ent: missing required field "ClientVersion.status"`)}
	}
	if v, ok := cvc.mutation.Status(); ok {
		if err := clientversion.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "ClientVersion.status": %w`, err)}
		}
	}
	return nil
}

func (cvc *ClientVersionCreate) sqlSave(ctx context.Context) (*ClientVersion, error) {
	if err := cvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	cvc.mutation.id = &_node.ID
	cvc.mutation.done = true
	return _node, nil
}

func (cvc *ClientVersionCreate) createSpec() (*ClientVersion, *sqlgraph.CreateSpec) {
	var (
		_node = &ClientVersion{config: cvc.config}
		_spec = sqlgraph.NewCreateSpec(clientversion.Table, sqlgraph.NewFieldSpec(clientversion.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = cvc.conflict
	if id, ok := cvc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cvc.mutation.CreatedBy(); ok {
		_spec.SetField(clientversion.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := cvc.mutation.UpdatedBy(); ok {
		_spec.SetField(clientversion.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := cvc.mutation.CreatedAt(); ok {
		_spec.SetField(clientversion.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cvc.mutation.UpdatedAt(); ok {
		_spec.SetField(clientversion.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cvc.mutation.DeletedAt(); ok {
		_spec.SetField(clientversion.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := cvc.mutation.ClientURL(); ok {
		_spec.SetField(clientversion.FieldClientURL, field.TypeString, value)
		_node.ClientURL = value
	}
	if value, ok := cvc.mutation.ConfigURL(); ok {
		_spec.SetField(clientversion.FieldConfigURL, field.TypeString, value)
		_node.ConfigURL = value
	}
	if value, ok := cvc.mutation.Version(); ok {
		_spec.SetField(clientversion.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := cvc.mutation.Status(); ok {
		_spec.SetField(clientversion.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ClientVersion.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ClientVersionUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (cvc *ClientVersionCreate) OnConflict(opts ...sql.ConflictOption) *ClientVersionUpsertOne {
	cvc.conflict = opts
	return &ClientVersionUpsertOne{
		create: cvc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ClientVersion.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cvc *ClientVersionCreate) OnConflictColumns(columns ...string) *ClientVersionUpsertOne {
	cvc.conflict = append(cvc.conflict, sql.ConflictColumns(columns...))
	return &ClientVersionUpsertOne{
		create: cvc,
	}
}

type (
	// ClientVersionUpsertOne is the builder for "upsert"-ing
	//  one ClientVersion node.
	ClientVersionUpsertOne struct {
		create *ClientVersionCreate
	}

	// ClientVersionUpsert is the "OnConflict" setter.
	ClientVersionUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *ClientVersionUpsert) SetCreatedBy(v int64) *ClientVersionUpsert {
	u.Set(clientversion.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ClientVersionUpsert) UpdateCreatedBy() *ClientVersionUpsert {
	u.SetExcluded(clientversion.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *ClientVersionUpsert) AddCreatedBy(v int64) *ClientVersionUpsert {
	u.Add(clientversion.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ClientVersionUpsert) SetUpdatedBy(v int64) *ClientVersionUpsert {
	u.Set(clientversion.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ClientVersionUpsert) UpdateUpdatedBy() *ClientVersionUpsert {
	u.SetExcluded(clientversion.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ClientVersionUpsert) AddUpdatedBy(v int64) *ClientVersionUpsert {
	u.Add(clientversion.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ClientVersionUpsert) SetUpdatedAt(v time.Time) *ClientVersionUpsert {
	u.Set(clientversion.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ClientVersionUpsert) UpdateUpdatedAt() *ClientVersionUpsert {
	u.SetExcluded(clientversion.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ClientVersionUpsert) SetDeletedAt(v time.Time) *ClientVersionUpsert {
	u.Set(clientversion.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ClientVersionUpsert) UpdateDeletedAt() *ClientVersionUpsert {
	u.SetExcluded(clientversion.FieldDeletedAt)
	return u
}

// SetClientURL sets the "client_url" field.
func (u *ClientVersionUpsert) SetClientURL(v string) *ClientVersionUpsert {
	u.Set(clientversion.FieldClientURL, v)
	return u
}

// UpdateClientURL sets the "client_url" field to the value that was provided on create.
func (u *ClientVersionUpsert) UpdateClientURL() *ClientVersionUpsert {
	u.SetExcluded(clientversion.FieldClientURL)
	return u
}

// SetConfigURL sets the "config_url" field.
func (u *ClientVersionUpsert) SetConfigURL(v string) *ClientVersionUpsert {
	u.Set(clientversion.FieldConfigURL, v)
	return u
}

// UpdateConfigURL sets the "config_url" field to the value that was provided on create.
func (u *ClientVersionUpsert) UpdateConfigURL() *ClientVersionUpsert {
	u.SetExcluded(clientversion.FieldConfigURL)
	return u
}

// SetVersion sets the "version" field.
func (u *ClientVersionUpsert) SetVersion(v string) *ClientVersionUpsert {
	u.Set(clientversion.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *ClientVersionUpsert) UpdateVersion() *ClientVersionUpsert {
	u.SetExcluded(clientversion.FieldVersion)
	return u
}

// SetStatus sets the "status" field.
func (u *ClientVersionUpsert) SetStatus(v enums.ClientStatus) *ClientVersionUpsert {
	u.Set(clientversion.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ClientVersionUpsert) UpdateStatus() *ClientVersionUpsert {
	u.SetExcluded(clientversion.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ClientVersion.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(clientversion.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ClientVersionUpsertOne) UpdateNewValues() *ClientVersionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(clientversion.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(clientversion.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ClientVersion.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ClientVersionUpsertOne) Ignore() *ClientVersionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ClientVersionUpsertOne) DoNothing() *ClientVersionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ClientVersionCreate.OnConflict
// documentation for more info.
func (u *ClientVersionUpsertOne) Update(set func(*ClientVersionUpsert)) *ClientVersionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ClientVersionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *ClientVersionUpsertOne) SetCreatedBy(v int64) *ClientVersionUpsertOne {
	return u.Update(func(s *ClientVersionUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *ClientVersionUpsertOne) AddCreatedBy(v int64) *ClientVersionUpsertOne {
	return u.Update(func(s *ClientVersionUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ClientVersionUpsertOne) UpdateCreatedBy() *ClientVersionUpsertOne {
	return u.Update(func(s *ClientVersionUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ClientVersionUpsertOne) SetUpdatedBy(v int64) *ClientVersionUpsertOne {
	return u.Update(func(s *ClientVersionUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ClientVersionUpsertOne) AddUpdatedBy(v int64) *ClientVersionUpsertOne {
	return u.Update(func(s *ClientVersionUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ClientVersionUpsertOne) UpdateUpdatedBy() *ClientVersionUpsertOne {
	return u.Update(func(s *ClientVersionUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ClientVersionUpsertOne) SetUpdatedAt(v time.Time) *ClientVersionUpsertOne {
	return u.Update(func(s *ClientVersionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ClientVersionUpsertOne) UpdateUpdatedAt() *ClientVersionUpsertOne {
	return u.Update(func(s *ClientVersionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ClientVersionUpsertOne) SetDeletedAt(v time.Time) *ClientVersionUpsertOne {
	return u.Update(func(s *ClientVersionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ClientVersionUpsertOne) UpdateDeletedAt() *ClientVersionUpsertOne {
	return u.Update(func(s *ClientVersionUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetClientURL sets the "client_url" field.
func (u *ClientVersionUpsertOne) SetClientURL(v string) *ClientVersionUpsertOne {
	return u.Update(func(s *ClientVersionUpsert) {
		s.SetClientURL(v)
	})
}

// UpdateClientURL sets the "client_url" field to the value that was provided on create.
func (u *ClientVersionUpsertOne) UpdateClientURL() *ClientVersionUpsertOne {
	return u.Update(func(s *ClientVersionUpsert) {
		s.UpdateClientURL()
	})
}

// SetConfigURL sets the "config_url" field.
func (u *ClientVersionUpsertOne) SetConfigURL(v string) *ClientVersionUpsertOne {
	return u.Update(func(s *ClientVersionUpsert) {
		s.SetConfigURL(v)
	})
}

// UpdateConfigURL sets the "config_url" field to the value that was provided on create.
func (u *ClientVersionUpsertOne) UpdateConfigURL() *ClientVersionUpsertOne {
	return u.Update(func(s *ClientVersionUpsert) {
		s.UpdateConfigURL()
	})
}

// SetVersion sets the "version" field.
func (u *ClientVersionUpsertOne) SetVersion(v string) *ClientVersionUpsertOne {
	return u.Update(func(s *ClientVersionUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *ClientVersionUpsertOne) UpdateVersion() *ClientVersionUpsertOne {
	return u.Update(func(s *ClientVersionUpsert) {
		s.UpdateVersion()
	})
}

// SetStatus sets the "status" field.
func (u *ClientVersionUpsertOne) SetStatus(v enums.ClientStatus) *ClientVersionUpsertOne {
	return u.Update(func(s *ClientVersionUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ClientVersionUpsertOne) UpdateStatus() *ClientVersionUpsertOne {
	return u.Update(func(s *ClientVersionUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *ClientVersionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for ClientVersionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ClientVersionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ClientVersionUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ClientVersionUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ClientVersionCreateBulk is the builder for creating many ClientVersion entities in bulk.
type ClientVersionCreateBulk struct {
	config
	err      error
	builders []*ClientVersionCreate
	conflict []sql.ConflictOption
}

// Save creates the ClientVersion entities in the database.
func (cvcb *ClientVersionCreateBulk) Save(ctx context.Context) ([]*ClientVersion, error) {
	if cvcb.err != nil {
		return nil, cvcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cvcb.builders))
	nodes := make([]*ClientVersion, len(cvcb.builders))
	mutators := make([]Mutator, len(cvcb.builders))
	for i := range cvcb.builders {
		func(i int, root context.Context) {
			builder := cvcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ClientVersionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cvcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cvcb *ClientVersionCreateBulk) SaveX(ctx context.Context) []*ClientVersion {
	v, err := cvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cvcb *ClientVersionCreateBulk) Exec(ctx context.Context) error {
	_, err := cvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cvcb *ClientVersionCreateBulk) ExecX(ctx context.Context) {
	if err := cvcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ClientVersion.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ClientVersionUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (cvcb *ClientVersionCreateBulk) OnConflict(opts ...sql.ConflictOption) *ClientVersionUpsertBulk {
	cvcb.conflict = opts
	return &ClientVersionUpsertBulk{
		create: cvcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ClientVersion.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cvcb *ClientVersionCreateBulk) OnConflictColumns(columns ...string) *ClientVersionUpsertBulk {
	cvcb.conflict = append(cvcb.conflict, sql.ConflictColumns(columns...))
	return &ClientVersionUpsertBulk{
		create: cvcb,
	}
}

// ClientVersionUpsertBulk is the builder for "upsert"-ing
// a bulk of ClientVersion nodes.
type ClientVersionUpsertBulk struct {
	create *ClientVersionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ClientVersion.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(clientversion.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ClientVersionUpsertBulk) UpdateNewValues() *ClientVersionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(clientversion.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(clientversion.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ClientVersion.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ClientVersionUpsertBulk) Ignore() *ClientVersionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ClientVersionUpsertBulk) DoNothing() *ClientVersionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ClientVersionCreateBulk.OnConflict
// documentation for more info.
func (u *ClientVersionUpsertBulk) Update(set func(*ClientVersionUpsert)) *ClientVersionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ClientVersionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *ClientVersionUpsertBulk) SetCreatedBy(v int64) *ClientVersionUpsertBulk {
	return u.Update(func(s *ClientVersionUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *ClientVersionUpsertBulk) AddCreatedBy(v int64) *ClientVersionUpsertBulk {
	return u.Update(func(s *ClientVersionUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ClientVersionUpsertBulk) UpdateCreatedBy() *ClientVersionUpsertBulk {
	return u.Update(func(s *ClientVersionUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ClientVersionUpsertBulk) SetUpdatedBy(v int64) *ClientVersionUpsertBulk {
	return u.Update(func(s *ClientVersionUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ClientVersionUpsertBulk) AddUpdatedBy(v int64) *ClientVersionUpsertBulk {
	return u.Update(func(s *ClientVersionUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ClientVersionUpsertBulk) UpdateUpdatedBy() *ClientVersionUpsertBulk {
	return u.Update(func(s *ClientVersionUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ClientVersionUpsertBulk) SetUpdatedAt(v time.Time) *ClientVersionUpsertBulk {
	return u.Update(func(s *ClientVersionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ClientVersionUpsertBulk) UpdateUpdatedAt() *ClientVersionUpsertBulk {
	return u.Update(func(s *ClientVersionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ClientVersionUpsertBulk) SetDeletedAt(v time.Time) *ClientVersionUpsertBulk {
	return u.Update(func(s *ClientVersionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ClientVersionUpsertBulk) UpdateDeletedAt() *ClientVersionUpsertBulk {
	return u.Update(func(s *ClientVersionUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetClientURL sets the "client_url" field.
func (u *ClientVersionUpsertBulk) SetClientURL(v string) *ClientVersionUpsertBulk {
	return u.Update(func(s *ClientVersionUpsert) {
		s.SetClientURL(v)
	})
}

// UpdateClientURL sets the "client_url" field to the value that was provided on create.
func (u *ClientVersionUpsertBulk) UpdateClientURL() *ClientVersionUpsertBulk {
	return u.Update(func(s *ClientVersionUpsert) {
		s.UpdateClientURL()
	})
}

// SetConfigURL sets the "config_url" field.
func (u *ClientVersionUpsertBulk) SetConfigURL(v string) *ClientVersionUpsertBulk {
	return u.Update(func(s *ClientVersionUpsert) {
		s.SetConfigURL(v)
	})
}

// UpdateConfigURL sets the "config_url" field to the value that was provided on create.
func (u *ClientVersionUpsertBulk) UpdateConfigURL() *ClientVersionUpsertBulk {
	return u.Update(func(s *ClientVersionUpsert) {
		s.UpdateConfigURL()
	})
}

// SetVersion sets the "version" field.
func (u *ClientVersionUpsertBulk) SetVersion(v string) *ClientVersionUpsertBulk {
	return u.Update(func(s *ClientVersionUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *ClientVersionUpsertBulk) UpdateVersion() *ClientVersionUpsertBulk {
	return u.Update(func(s *ClientVersionUpsert) {
		s.UpdateVersion()
	})
}

// SetStatus sets the "status" field.
func (u *ClientVersionUpsertBulk) SetStatus(v enums.ClientStatus) *ClientVersionUpsertBulk {
	return u.Update(func(s *ClientVersionUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ClientVersionUpsertBulk) UpdateStatus() *ClientVersionUpsertBulk {
	return u.Update(func(s *ClientVersionUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *ClientVersionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the ClientVersionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for ClientVersionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ClientVersionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
