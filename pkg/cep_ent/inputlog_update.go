// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/inputlog"
	"cephalon-ent/pkg/cep_ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InputLogUpdate is the builder for updating InputLog entities.
type InputLogUpdate struct {
	config
	hooks    []Hook
	mutation *InputLogMutation
}

// Where appends a list predicates to the InputLogUpdate builder.
func (ilu *InputLogUpdate) Where(ps ...predicate.InputLog) *InputLogUpdate {
	ilu.mutation.Where(ps...)
	return ilu
}

// SetCreatedBy sets the "created_by" field.
func (ilu *InputLogUpdate) SetCreatedBy(i int64) *InputLogUpdate {
	ilu.mutation.ResetCreatedBy()
	ilu.mutation.SetCreatedBy(i)
	return ilu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ilu *InputLogUpdate) SetNillableCreatedBy(i *int64) *InputLogUpdate {
	if i != nil {
		ilu.SetCreatedBy(*i)
	}
	return ilu
}

// AddCreatedBy adds i to the "created_by" field.
func (ilu *InputLogUpdate) AddCreatedBy(i int64) *InputLogUpdate {
	ilu.mutation.AddCreatedBy(i)
	return ilu
}

// SetUpdatedBy sets the "updated_by" field.
func (ilu *InputLogUpdate) SetUpdatedBy(i int64) *InputLogUpdate {
	ilu.mutation.ResetUpdatedBy()
	ilu.mutation.SetUpdatedBy(i)
	return ilu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ilu *InputLogUpdate) SetNillableUpdatedBy(i *int64) *InputLogUpdate {
	if i != nil {
		ilu.SetUpdatedBy(*i)
	}
	return ilu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (ilu *InputLogUpdate) AddUpdatedBy(i int64) *InputLogUpdate {
	ilu.mutation.AddUpdatedBy(i)
	return ilu
}

// SetUpdatedAt sets the "updated_at" field.
func (ilu *InputLogUpdate) SetUpdatedAt(t time.Time) *InputLogUpdate {
	ilu.mutation.SetUpdatedAt(t)
	return ilu
}

// SetDeletedAt sets the "deleted_at" field.
func (ilu *InputLogUpdate) SetDeletedAt(t time.Time) *InputLogUpdate {
	ilu.mutation.SetDeletedAt(t)
	return ilu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ilu *InputLogUpdate) SetNillableDeletedAt(t *time.Time) *InputLogUpdate {
	if t != nil {
		ilu.SetDeletedAt(*t)
	}
	return ilu
}

// SetHeaders sets the "headers" field.
func (ilu *InputLogUpdate) SetHeaders(s string) *InputLogUpdate {
	ilu.mutation.SetHeaders(s)
	return ilu
}

// SetBody sets the "body" field.
func (ilu *InputLogUpdate) SetBody(s string) *InputLogUpdate {
	ilu.mutation.SetBody(s)
	return ilu
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (ilu *InputLogUpdate) SetNillableBody(s *string) *InputLogUpdate {
	if s != nil {
		ilu.SetBody(*s)
	}
	return ilu
}

// ClearBody clears the value of the "body" field.
func (ilu *InputLogUpdate) ClearBody() *InputLogUpdate {
	ilu.mutation.ClearBody()
	return ilu
}

// SetQuery sets the "query" field.
func (ilu *InputLogUpdate) SetQuery(s string) *InputLogUpdate {
	ilu.mutation.SetQuery(s)
	return ilu
}

// SetNillableQuery sets the "query" field if the given value is not nil.
func (ilu *InputLogUpdate) SetNillableQuery(s *string) *InputLogUpdate {
	if s != nil {
		ilu.SetQuery(*s)
	}
	return ilu
}

// ClearQuery clears the value of the "query" field.
func (ilu *InputLogUpdate) ClearQuery() *InputLogUpdate {
	ilu.mutation.ClearQuery()
	return ilu
}

// SetURL sets the "url" field.
func (ilu *InputLogUpdate) SetURL(s string) *InputLogUpdate {
	ilu.mutation.SetURL(s)
	return ilu
}

// SetIP sets the "ip" field.
func (ilu *InputLogUpdate) SetIP(s string) *InputLogUpdate {
	ilu.mutation.SetIP(s)
	return ilu
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (ilu *InputLogUpdate) SetNillableIP(s *string) *InputLogUpdate {
	if s != nil {
		ilu.SetIP(*s)
	}
	return ilu
}

// ClearIP clears the value of the "ip" field.
func (ilu *InputLogUpdate) ClearIP() *InputLogUpdate {
	ilu.mutation.ClearIP()
	return ilu
}

// SetCaller sets the "caller" field.
func (ilu *InputLogUpdate) SetCaller(s string) *InputLogUpdate {
	ilu.mutation.SetCaller(s)
	return ilu
}

// SetNillableCaller sets the "caller" field if the given value is not nil.
func (ilu *InputLogUpdate) SetNillableCaller(s *string) *InputLogUpdate {
	if s != nil {
		ilu.SetCaller(*s)
	}
	return ilu
}

// SetMethod sets the "method" field.
func (ilu *InputLogUpdate) SetMethod(i inputlog.Method) *InputLogUpdate {
	ilu.mutation.SetMethod(i)
	return ilu
}

// SetHmacKey sets the "hmac_key" field.
func (ilu *InputLogUpdate) SetHmacKey(s string) *InputLogUpdate {
	ilu.mutation.SetHmacKey(s)
	return ilu
}

// SetNillableHmacKey sets the "hmac_key" field if the given value is not nil.
func (ilu *InputLogUpdate) SetNillableHmacKey(s *string) *InputLogUpdate {
	if s != nil {
		ilu.SetHmacKey(*s)
	}
	return ilu
}

// Mutation returns the InputLogMutation object of the builder.
func (ilu *InputLogUpdate) Mutation() *InputLogMutation {
	return ilu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ilu *InputLogUpdate) Save(ctx context.Context) (int, error) {
	ilu.defaults()
	return withHooks(ctx, ilu.sqlSave, ilu.mutation, ilu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ilu *InputLogUpdate) SaveX(ctx context.Context) int {
	affected, err := ilu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ilu *InputLogUpdate) Exec(ctx context.Context) error {
	_, err := ilu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ilu *InputLogUpdate) ExecX(ctx context.Context) {
	if err := ilu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ilu *InputLogUpdate) defaults() {
	if _, ok := ilu.mutation.UpdatedAt(); !ok {
		v := inputlog.UpdateDefaultUpdatedAt()
		ilu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ilu *InputLogUpdate) check() error {
	if v, ok := ilu.mutation.Method(); ok {
		if err := inputlog.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`cep_ent: validator failed for field "InputLog.method": %w`, err)}
		}
	}
	return nil
}

func (ilu *InputLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ilu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(inputlog.Table, inputlog.Columns, sqlgraph.NewFieldSpec(inputlog.FieldID, field.TypeInt64))
	if ps := ilu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ilu.mutation.CreatedBy(); ok {
		_spec.SetField(inputlog.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := ilu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(inputlog.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := ilu.mutation.UpdatedBy(); ok {
		_spec.SetField(inputlog.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := ilu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(inputlog.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := ilu.mutation.UpdatedAt(); ok {
		_spec.SetField(inputlog.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ilu.mutation.DeletedAt(); ok {
		_spec.SetField(inputlog.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := ilu.mutation.Headers(); ok {
		_spec.SetField(inputlog.FieldHeaders, field.TypeString, value)
	}
	if value, ok := ilu.mutation.Body(); ok {
		_spec.SetField(inputlog.FieldBody, field.TypeString, value)
	}
	if ilu.mutation.BodyCleared() {
		_spec.ClearField(inputlog.FieldBody, field.TypeString)
	}
	if value, ok := ilu.mutation.Query(); ok {
		_spec.SetField(inputlog.FieldQuery, field.TypeString, value)
	}
	if ilu.mutation.QueryCleared() {
		_spec.ClearField(inputlog.FieldQuery, field.TypeString)
	}
	if value, ok := ilu.mutation.URL(); ok {
		_spec.SetField(inputlog.FieldURL, field.TypeString, value)
	}
	if value, ok := ilu.mutation.IP(); ok {
		_spec.SetField(inputlog.FieldIP, field.TypeString, value)
	}
	if ilu.mutation.IPCleared() {
		_spec.ClearField(inputlog.FieldIP, field.TypeString)
	}
	if value, ok := ilu.mutation.Caller(); ok {
		_spec.SetField(inputlog.FieldCaller, field.TypeString, value)
	}
	if value, ok := ilu.mutation.Method(); ok {
		_spec.SetField(inputlog.FieldMethod, field.TypeEnum, value)
	}
	if value, ok := ilu.mutation.HmacKey(); ok {
		_spec.SetField(inputlog.FieldHmacKey, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ilu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inputlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ilu.mutation.done = true
	return n, nil
}

// InputLogUpdateOne is the builder for updating a single InputLog entity.
type InputLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InputLogMutation
}

// SetCreatedBy sets the "created_by" field.
func (iluo *InputLogUpdateOne) SetCreatedBy(i int64) *InputLogUpdateOne {
	iluo.mutation.ResetCreatedBy()
	iluo.mutation.SetCreatedBy(i)
	return iluo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (iluo *InputLogUpdateOne) SetNillableCreatedBy(i *int64) *InputLogUpdateOne {
	if i != nil {
		iluo.SetCreatedBy(*i)
	}
	return iluo
}

// AddCreatedBy adds i to the "created_by" field.
func (iluo *InputLogUpdateOne) AddCreatedBy(i int64) *InputLogUpdateOne {
	iluo.mutation.AddCreatedBy(i)
	return iluo
}

// SetUpdatedBy sets the "updated_by" field.
func (iluo *InputLogUpdateOne) SetUpdatedBy(i int64) *InputLogUpdateOne {
	iluo.mutation.ResetUpdatedBy()
	iluo.mutation.SetUpdatedBy(i)
	return iluo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (iluo *InputLogUpdateOne) SetNillableUpdatedBy(i *int64) *InputLogUpdateOne {
	if i != nil {
		iluo.SetUpdatedBy(*i)
	}
	return iluo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (iluo *InputLogUpdateOne) AddUpdatedBy(i int64) *InputLogUpdateOne {
	iluo.mutation.AddUpdatedBy(i)
	return iluo
}

// SetUpdatedAt sets the "updated_at" field.
func (iluo *InputLogUpdateOne) SetUpdatedAt(t time.Time) *InputLogUpdateOne {
	iluo.mutation.SetUpdatedAt(t)
	return iluo
}

// SetDeletedAt sets the "deleted_at" field.
func (iluo *InputLogUpdateOne) SetDeletedAt(t time.Time) *InputLogUpdateOne {
	iluo.mutation.SetDeletedAt(t)
	return iluo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iluo *InputLogUpdateOne) SetNillableDeletedAt(t *time.Time) *InputLogUpdateOne {
	if t != nil {
		iluo.SetDeletedAt(*t)
	}
	return iluo
}

// SetHeaders sets the "headers" field.
func (iluo *InputLogUpdateOne) SetHeaders(s string) *InputLogUpdateOne {
	iluo.mutation.SetHeaders(s)
	return iluo
}

// SetBody sets the "body" field.
func (iluo *InputLogUpdateOne) SetBody(s string) *InputLogUpdateOne {
	iluo.mutation.SetBody(s)
	return iluo
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (iluo *InputLogUpdateOne) SetNillableBody(s *string) *InputLogUpdateOne {
	if s != nil {
		iluo.SetBody(*s)
	}
	return iluo
}

// ClearBody clears the value of the "body" field.
func (iluo *InputLogUpdateOne) ClearBody() *InputLogUpdateOne {
	iluo.mutation.ClearBody()
	return iluo
}

// SetQuery sets the "query" field.
func (iluo *InputLogUpdateOne) SetQuery(s string) *InputLogUpdateOne {
	iluo.mutation.SetQuery(s)
	return iluo
}

// SetNillableQuery sets the "query" field if the given value is not nil.
func (iluo *InputLogUpdateOne) SetNillableQuery(s *string) *InputLogUpdateOne {
	if s != nil {
		iluo.SetQuery(*s)
	}
	return iluo
}

// ClearQuery clears the value of the "query" field.
func (iluo *InputLogUpdateOne) ClearQuery() *InputLogUpdateOne {
	iluo.mutation.ClearQuery()
	return iluo
}

// SetURL sets the "url" field.
func (iluo *InputLogUpdateOne) SetURL(s string) *InputLogUpdateOne {
	iluo.mutation.SetURL(s)
	return iluo
}

// SetIP sets the "ip" field.
func (iluo *InputLogUpdateOne) SetIP(s string) *InputLogUpdateOne {
	iluo.mutation.SetIP(s)
	return iluo
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (iluo *InputLogUpdateOne) SetNillableIP(s *string) *InputLogUpdateOne {
	if s != nil {
		iluo.SetIP(*s)
	}
	return iluo
}

// ClearIP clears the value of the "ip" field.
func (iluo *InputLogUpdateOne) ClearIP() *InputLogUpdateOne {
	iluo.mutation.ClearIP()
	return iluo
}

// SetCaller sets the "caller" field.
func (iluo *InputLogUpdateOne) SetCaller(s string) *InputLogUpdateOne {
	iluo.mutation.SetCaller(s)
	return iluo
}

// SetNillableCaller sets the "caller" field if the given value is not nil.
func (iluo *InputLogUpdateOne) SetNillableCaller(s *string) *InputLogUpdateOne {
	if s != nil {
		iluo.SetCaller(*s)
	}
	return iluo
}

// SetMethod sets the "method" field.
func (iluo *InputLogUpdateOne) SetMethod(i inputlog.Method) *InputLogUpdateOne {
	iluo.mutation.SetMethod(i)
	return iluo
}

// SetHmacKey sets the "hmac_key" field.
func (iluo *InputLogUpdateOne) SetHmacKey(s string) *InputLogUpdateOne {
	iluo.mutation.SetHmacKey(s)
	return iluo
}

// SetNillableHmacKey sets the "hmac_key" field if the given value is not nil.
func (iluo *InputLogUpdateOne) SetNillableHmacKey(s *string) *InputLogUpdateOne {
	if s != nil {
		iluo.SetHmacKey(*s)
	}
	return iluo
}

// Mutation returns the InputLogMutation object of the builder.
func (iluo *InputLogUpdateOne) Mutation() *InputLogMutation {
	return iluo.mutation
}

// Where appends a list predicates to the InputLogUpdate builder.
func (iluo *InputLogUpdateOne) Where(ps ...predicate.InputLog) *InputLogUpdateOne {
	iluo.mutation.Where(ps...)
	return iluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iluo *InputLogUpdateOne) Select(field string, fields ...string) *InputLogUpdateOne {
	iluo.fields = append([]string{field}, fields...)
	return iluo
}

// Save executes the query and returns the updated InputLog entity.
func (iluo *InputLogUpdateOne) Save(ctx context.Context) (*InputLog, error) {
	iluo.defaults()
	return withHooks(ctx, iluo.sqlSave, iluo.mutation, iluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iluo *InputLogUpdateOne) SaveX(ctx context.Context) *InputLog {
	node, err := iluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iluo *InputLogUpdateOne) Exec(ctx context.Context) error {
	_, err := iluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iluo *InputLogUpdateOne) ExecX(ctx context.Context) {
	if err := iluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iluo *InputLogUpdateOne) defaults() {
	if _, ok := iluo.mutation.UpdatedAt(); !ok {
		v := inputlog.UpdateDefaultUpdatedAt()
		iluo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iluo *InputLogUpdateOne) check() error {
	if v, ok := iluo.mutation.Method(); ok {
		if err := inputlog.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`cep_ent: validator failed for field "InputLog.method": %w`, err)}
		}
	}
	return nil
}

func (iluo *InputLogUpdateOne) sqlSave(ctx context.Context) (_node *InputLog, err error) {
	if err := iluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(inputlog.Table, inputlog.Columns, sqlgraph.NewFieldSpec(inputlog.FieldID, field.TypeInt64))
	id, ok := iluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "InputLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, inputlog.FieldID)
		for _, f := range fields {
			if !inputlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != inputlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iluo.mutation.CreatedBy(); ok {
		_spec.SetField(inputlog.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := iluo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(inputlog.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := iluo.mutation.UpdatedBy(); ok {
		_spec.SetField(inputlog.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := iluo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(inputlog.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := iluo.mutation.UpdatedAt(); ok {
		_spec.SetField(inputlog.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iluo.mutation.DeletedAt(); ok {
		_spec.SetField(inputlog.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := iluo.mutation.Headers(); ok {
		_spec.SetField(inputlog.FieldHeaders, field.TypeString, value)
	}
	if value, ok := iluo.mutation.Body(); ok {
		_spec.SetField(inputlog.FieldBody, field.TypeString, value)
	}
	if iluo.mutation.BodyCleared() {
		_spec.ClearField(inputlog.FieldBody, field.TypeString)
	}
	if value, ok := iluo.mutation.Query(); ok {
		_spec.SetField(inputlog.FieldQuery, field.TypeString, value)
	}
	if iluo.mutation.QueryCleared() {
		_spec.ClearField(inputlog.FieldQuery, field.TypeString)
	}
	if value, ok := iluo.mutation.URL(); ok {
		_spec.SetField(inputlog.FieldURL, field.TypeString, value)
	}
	if value, ok := iluo.mutation.IP(); ok {
		_spec.SetField(inputlog.FieldIP, field.TypeString, value)
	}
	if iluo.mutation.IPCleared() {
		_spec.ClearField(inputlog.FieldIP, field.TypeString)
	}
	if value, ok := iluo.mutation.Caller(); ok {
		_spec.SetField(inputlog.FieldCaller, field.TypeString, value)
	}
	if value, ok := iluo.mutation.Method(); ok {
		_spec.SetField(inputlog.FieldMethod, field.TypeEnum, value)
	}
	if value, ok := iluo.mutation.HmacKey(); ok {
		_spec.SetField(inputlog.FieldHmacKey, field.TypeString, value)
	}
	_node = &InputLog{config: iluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inputlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iluo.mutation.done = true
	return _node, nil
}
