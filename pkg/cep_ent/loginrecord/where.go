// Code generated by ent, DO NOT EDIT.

package loginrecord

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLTE(FieldID, id))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldDeletedAt, v))
}

// Ua applies equality check predicate on the "ua" field. It's identical to UaEQ.
func Ua(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldUa, v))
}

// IP applies equality check predicate on the "ip" field. It's identical to IPEQ.
func IP(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldIP, v))
}

// Way applies equality check predicate on the "way" field. It's identical to WayEQ.
func Way(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldWay, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldUserID, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLTE(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLTE(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLTE(FieldDeletedAt, v))
}

// UaEQ applies the EQ predicate on the "ua" field.
func UaEQ(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldUa, v))
}

// UaNEQ applies the NEQ predicate on the "ua" field.
func UaNEQ(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNEQ(FieldUa, v))
}

// UaIn applies the In predicate on the "ua" field.
func UaIn(vs ...string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIn(FieldUa, vs...))
}

// UaNotIn applies the NotIn predicate on the "ua" field.
func UaNotIn(vs ...string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotIn(FieldUa, vs...))
}

// UaGT applies the GT predicate on the "ua" field.
func UaGT(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGT(FieldUa, v))
}

// UaGTE applies the GTE predicate on the "ua" field.
func UaGTE(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGTE(FieldUa, v))
}

// UaLT applies the LT predicate on the "ua" field.
func UaLT(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLT(FieldUa, v))
}

// UaLTE applies the LTE predicate on the "ua" field.
func UaLTE(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLTE(FieldUa, v))
}

// UaContains applies the Contains predicate on the "ua" field.
func UaContains(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldContains(FieldUa, v))
}

// UaHasPrefix applies the HasPrefix predicate on the "ua" field.
func UaHasPrefix(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldHasPrefix(FieldUa, v))
}

// UaHasSuffix applies the HasSuffix predicate on the "ua" field.
func UaHasSuffix(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldHasSuffix(FieldUa, v))
}

// UaEqualFold applies the EqualFold predicate on the "ua" field.
func UaEqualFold(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEqualFold(FieldUa, v))
}

// UaContainsFold applies the ContainsFold predicate on the "ua" field.
func UaContainsFold(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldContainsFold(FieldUa, v))
}

// IPEQ applies the EQ predicate on the "ip" field.
func IPEQ(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldIP, v))
}

// IPNEQ applies the NEQ predicate on the "ip" field.
func IPNEQ(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNEQ(FieldIP, v))
}

// IPIn applies the In predicate on the "ip" field.
func IPIn(vs ...string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIn(FieldIP, vs...))
}

// IPNotIn applies the NotIn predicate on the "ip" field.
func IPNotIn(vs ...string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotIn(FieldIP, vs...))
}

// IPGT applies the GT predicate on the "ip" field.
func IPGT(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGT(FieldIP, v))
}

// IPGTE applies the GTE predicate on the "ip" field.
func IPGTE(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGTE(FieldIP, v))
}

// IPLT applies the LT predicate on the "ip" field.
func IPLT(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLT(FieldIP, v))
}

// IPLTE applies the LTE predicate on the "ip" field.
func IPLTE(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLTE(FieldIP, v))
}

// IPContains applies the Contains predicate on the "ip" field.
func IPContains(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldContains(FieldIP, v))
}

// IPHasPrefix applies the HasPrefix predicate on the "ip" field.
func IPHasPrefix(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldHasPrefix(FieldIP, v))
}

// IPHasSuffix applies the HasSuffix predicate on the "ip" field.
func IPHasSuffix(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldHasSuffix(FieldIP, v))
}

// IPEqualFold applies the EqualFold predicate on the "ip" field.
func IPEqualFold(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEqualFold(FieldIP, v))
}

// IPContainsFold applies the ContainsFold predicate on the "ip" field.
func IPContainsFold(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldContainsFold(FieldIP, v))
}

// WayEQ applies the EQ predicate on the "way" field.
func WayEQ(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldWay, v))
}

// WayNEQ applies the NEQ predicate on the "way" field.
func WayNEQ(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNEQ(FieldWay, v))
}

// WayIn applies the In predicate on the "way" field.
func WayIn(vs ...string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIn(FieldWay, vs...))
}

// WayNotIn applies the NotIn predicate on the "way" field.
func WayNotIn(vs ...string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotIn(FieldWay, vs...))
}

// WayGT applies the GT predicate on the "way" field.
func WayGT(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGT(FieldWay, v))
}

// WayGTE applies the GTE predicate on the "way" field.
func WayGTE(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldGTE(FieldWay, v))
}

// WayLT applies the LT predicate on the "way" field.
func WayLT(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLT(FieldWay, v))
}

// WayLTE applies the LTE predicate on the "way" field.
func WayLTE(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldLTE(FieldWay, v))
}

// WayContains applies the Contains predicate on the "way" field.
func WayContains(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldContains(FieldWay, v))
}

// WayHasPrefix applies the HasPrefix predicate on the "way" field.
func WayHasPrefix(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldHasPrefix(FieldWay, v))
}

// WayHasSuffix applies the HasSuffix predicate on the "way" field.
func WayHasSuffix(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldHasSuffix(FieldWay, v))
}

// WayEqualFold applies the EqualFold predicate on the "way" field.
func WayEqualFold(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEqualFold(FieldWay, v))
}

// WayContainsFold applies the ContainsFold predicate on the "way" field.
func WayContainsFold(v string) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldContainsFold(FieldWay, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.LoginRecord {
	return predicate.LoginRecord(sql.FieldNotIn(FieldUserID, vs...))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.LoginRecord {
	return predicate.LoginRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.LoginRecord {
	return predicate.LoginRecord(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LoginRecord) predicate.LoginRecord {
	return predicate.LoginRecord(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LoginRecord) predicate.LoginRecord {
	return predicate.LoginRecord(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LoginRecord) predicate.LoginRecord {
	return predicate.LoginRecord(sql.NotPredicates(p))
}
