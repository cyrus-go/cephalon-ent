// Code generated by ent, DO NOT EDIT.

package frpsinfo

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the frpsinfo type in the database.
	Label = "frps_info"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldTag holds the string denoting the tag field in the database.
	FieldTag = "tag"
	// FieldServerAddr holds the string denoting the server_addr field in the database.
	FieldServerAddr = "server_addr"
	// FieldServerPort holds the string denoting the server_port field in the database.
	FieldServerPort = "server_port"
	// FieldAuthenticationMethod holds the string denoting the authentication_method field in the database.
	FieldAuthenticationMethod = "authentication_method"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeFrpcInfos holds the string denoting the frpc_infos edge name in mutations.
	EdgeFrpcInfos = "frpc_infos"
	// Table holds the table name of the frpsinfo in the database.
	Table = "frps_infos"
	// FrpcInfosTable is the table that holds the frpc_infos relation/edge.
	FrpcInfosTable = "frpc_infos"
	// FrpcInfosInverseTable is the table name for the FrpcInfo entity.
	// It exists in this package in order to avoid circular dependency with the "frpcinfo" package.
	FrpcInfosInverseTable = "frpc_infos"
	// FrpcInfosColumn is the table column denoting the frpc_infos relation/edge.
	FrpcInfosColumn = "frps_id"
)

// Columns holds all SQL columns for frpsinfo fields.
var Columns = []string{
	FieldID,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldTag,
	FieldServerAddr,
	FieldServerPort,
	FieldAuthenticationMethod,
	FieldToken,
	FieldType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedBy holds the default value on creation for the "created_by" field.
	DefaultCreatedBy int64
	// DefaultUpdatedBy holds the default value on creation for the "updated_by" field.
	DefaultUpdatedBy int64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt time.Time
	// DefaultTag holds the default value on creation for the "tag" field.
	DefaultTag string
	// DefaultServerAddr holds the default value on creation for the "server_addr" field.
	DefaultServerAddr string
	// DefaultServerPort holds the default value on creation for the "server_port" field.
	DefaultServerPort int
	// DefaultAuthenticationMethod holds the default value on creation for the "authentication_method" field.
	DefaultAuthenticationMethod string
	// DefaultToken holds the default value on creation for the "token" field.
	DefaultToken string
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
)

// OrderOption defines the ordering options for the FrpsInfo queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByTag orders the results by the tag field.
func ByTag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTag, opts...).ToFunc()
}

// ByServerAddr orders the results by the server_addr field.
func ByServerAddr(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServerAddr, opts...).ToFunc()
}

// ByServerPort orders the results by the server_port field.
func ByServerPort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServerPort, opts...).ToFunc()
}

// ByAuthenticationMethod orders the results by the authentication_method field.
func ByAuthenticationMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthenticationMethod, opts...).ToFunc()
}

// ByToken orders the results by the token field.
func ByToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToken, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByFrpcInfosCount orders the results by frpc_infos count.
func ByFrpcInfosCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFrpcInfosStep(), opts...)
	}
}

// ByFrpcInfos orders the results by frpc_infos terms.
func ByFrpcInfos(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFrpcInfosStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newFrpcInfosStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FrpcInfosInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FrpcInfosTable, FrpcInfosColumn),
	)
}
