// Code generated by ent, DO NOT EDIT.

package frpsinfo

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldLTE(FieldID, id))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int64) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int64) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldEQ(FieldDeletedAt, v))
}

// Tag applies equality check predicate on the "tag" field. It's identical to TagEQ.
func Tag(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldEQ(FieldTag, v))
}

// Domain applies equality check predicate on the "domain" field. It's identical to DomainEQ.
func Domain(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldEQ(FieldDomain, v))
}

// ServerAddr applies equality check predicate on the "server_addr" field. It's identical to ServerAddrEQ.
func ServerAddr(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldEQ(FieldServerAddr, v))
}

// ServerPort applies equality check predicate on the "server_port" field. It's identical to ServerPortEQ.
func ServerPort(v int) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldEQ(FieldServerPort, v))
}

// AuthenticationMethod applies equality check predicate on the "authentication_method" field. It's identical to AuthenticationMethodEQ.
func AuthenticationMethod(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldEQ(FieldAuthenticationMethod, v))
}

// Token applies equality check predicate on the "token" field. It's identical to TokenEQ.
func Token(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldEQ(FieldToken, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldEQ(FieldType, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int64) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int64) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int64) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int64) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int64) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int64) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int64) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int64) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldLTE(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int64) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int64) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int64) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int64) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int64) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int64) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int64) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int64) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldLTE(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldLTE(FieldDeletedAt, v))
}

// TagEQ applies the EQ predicate on the "tag" field.
func TagEQ(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldEQ(FieldTag, v))
}

// TagNEQ applies the NEQ predicate on the "tag" field.
func TagNEQ(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldNEQ(FieldTag, v))
}

// TagIn applies the In predicate on the "tag" field.
func TagIn(vs ...string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldIn(FieldTag, vs...))
}

// TagNotIn applies the NotIn predicate on the "tag" field.
func TagNotIn(vs ...string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldNotIn(FieldTag, vs...))
}

// TagGT applies the GT predicate on the "tag" field.
func TagGT(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldGT(FieldTag, v))
}

// TagGTE applies the GTE predicate on the "tag" field.
func TagGTE(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldGTE(FieldTag, v))
}

// TagLT applies the LT predicate on the "tag" field.
func TagLT(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldLT(FieldTag, v))
}

// TagLTE applies the LTE predicate on the "tag" field.
func TagLTE(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldLTE(FieldTag, v))
}

// TagContains applies the Contains predicate on the "tag" field.
func TagContains(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldContains(FieldTag, v))
}

// TagHasPrefix applies the HasPrefix predicate on the "tag" field.
func TagHasPrefix(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldHasPrefix(FieldTag, v))
}

// TagHasSuffix applies the HasSuffix predicate on the "tag" field.
func TagHasSuffix(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldHasSuffix(FieldTag, v))
}

// TagEqualFold applies the EqualFold predicate on the "tag" field.
func TagEqualFold(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldEqualFold(FieldTag, v))
}

// TagContainsFold applies the ContainsFold predicate on the "tag" field.
func TagContainsFold(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldContainsFold(FieldTag, v))
}

// DomainEQ applies the EQ predicate on the "domain" field.
func DomainEQ(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldEQ(FieldDomain, v))
}

// DomainNEQ applies the NEQ predicate on the "domain" field.
func DomainNEQ(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldNEQ(FieldDomain, v))
}

// DomainIn applies the In predicate on the "domain" field.
func DomainIn(vs ...string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldIn(FieldDomain, vs...))
}

// DomainNotIn applies the NotIn predicate on the "domain" field.
func DomainNotIn(vs ...string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldNotIn(FieldDomain, vs...))
}

// DomainGT applies the GT predicate on the "domain" field.
func DomainGT(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldGT(FieldDomain, v))
}

// DomainGTE applies the GTE predicate on the "domain" field.
func DomainGTE(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldGTE(FieldDomain, v))
}

// DomainLT applies the LT predicate on the "domain" field.
func DomainLT(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldLT(FieldDomain, v))
}

// DomainLTE applies the LTE predicate on the "domain" field.
func DomainLTE(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldLTE(FieldDomain, v))
}

// DomainContains applies the Contains predicate on the "domain" field.
func DomainContains(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldContains(FieldDomain, v))
}

// DomainHasPrefix applies the HasPrefix predicate on the "domain" field.
func DomainHasPrefix(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldHasPrefix(FieldDomain, v))
}

// DomainHasSuffix applies the HasSuffix predicate on the "domain" field.
func DomainHasSuffix(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldHasSuffix(FieldDomain, v))
}

// DomainEqualFold applies the EqualFold predicate on the "domain" field.
func DomainEqualFold(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldEqualFold(FieldDomain, v))
}

// DomainContainsFold applies the ContainsFold predicate on the "domain" field.
func DomainContainsFold(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldContainsFold(FieldDomain, v))
}

// ServerAddrEQ applies the EQ predicate on the "server_addr" field.
func ServerAddrEQ(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldEQ(FieldServerAddr, v))
}

// ServerAddrNEQ applies the NEQ predicate on the "server_addr" field.
func ServerAddrNEQ(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldNEQ(FieldServerAddr, v))
}

// ServerAddrIn applies the In predicate on the "server_addr" field.
func ServerAddrIn(vs ...string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldIn(FieldServerAddr, vs...))
}

// ServerAddrNotIn applies the NotIn predicate on the "server_addr" field.
func ServerAddrNotIn(vs ...string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldNotIn(FieldServerAddr, vs...))
}

// ServerAddrGT applies the GT predicate on the "server_addr" field.
func ServerAddrGT(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldGT(FieldServerAddr, v))
}

// ServerAddrGTE applies the GTE predicate on the "server_addr" field.
func ServerAddrGTE(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldGTE(FieldServerAddr, v))
}

// ServerAddrLT applies the LT predicate on the "server_addr" field.
func ServerAddrLT(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldLT(FieldServerAddr, v))
}

// ServerAddrLTE applies the LTE predicate on the "server_addr" field.
func ServerAddrLTE(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldLTE(FieldServerAddr, v))
}

// ServerAddrContains applies the Contains predicate on the "server_addr" field.
func ServerAddrContains(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldContains(FieldServerAddr, v))
}

// ServerAddrHasPrefix applies the HasPrefix predicate on the "server_addr" field.
func ServerAddrHasPrefix(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldHasPrefix(FieldServerAddr, v))
}

// ServerAddrHasSuffix applies the HasSuffix predicate on the "server_addr" field.
func ServerAddrHasSuffix(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldHasSuffix(FieldServerAddr, v))
}

// ServerAddrEqualFold applies the EqualFold predicate on the "server_addr" field.
func ServerAddrEqualFold(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldEqualFold(FieldServerAddr, v))
}

// ServerAddrContainsFold applies the ContainsFold predicate on the "server_addr" field.
func ServerAddrContainsFold(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldContainsFold(FieldServerAddr, v))
}

// ServerPortEQ applies the EQ predicate on the "server_port" field.
func ServerPortEQ(v int) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldEQ(FieldServerPort, v))
}

// ServerPortNEQ applies the NEQ predicate on the "server_port" field.
func ServerPortNEQ(v int) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldNEQ(FieldServerPort, v))
}

// ServerPortIn applies the In predicate on the "server_port" field.
func ServerPortIn(vs ...int) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldIn(FieldServerPort, vs...))
}

// ServerPortNotIn applies the NotIn predicate on the "server_port" field.
func ServerPortNotIn(vs ...int) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldNotIn(FieldServerPort, vs...))
}

// ServerPortGT applies the GT predicate on the "server_port" field.
func ServerPortGT(v int) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldGT(FieldServerPort, v))
}

// ServerPortGTE applies the GTE predicate on the "server_port" field.
func ServerPortGTE(v int) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldGTE(FieldServerPort, v))
}

// ServerPortLT applies the LT predicate on the "server_port" field.
func ServerPortLT(v int) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldLT(FieldServerPort, v))
}

// ServerPortLTE applies the LTE predicate on the "server_port" field.
func ServerPortLTE(v int) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldLTE(FieldServerPort, v))
}

// AuthenticationMethodEQ applies the EQ predicate on the "authentication_method" field.
func AuthenticationMethodEQ(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldEQ(FieldAuthenticationMethod, v))
}

// AuthenticationMethodNEQ applies the NEQ predicate on the "authentication_method" field.
func AuthenticationMethodNEQ(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldNEQ(FieldAuthenticationMethod, v))
}

// AuthenticationMethodIn applies the In predicate on the "authentication_method" field.
func AuthenticationMethodIn(vs ...string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldIn(FieldAuthenticationMethod, vs...))
}

// AuthenticationMethodNotIn applies the NotIn predicate on the "authentication_method" field.
func AuthenticationMethodNotIn(vs ...string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldNotIn(FieldAuthenticationMethod, vs...))
}

// AuthenticationMethodGT applies the GT predicate on the "authentication_method" field.
func AuthenticationMethodGT(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldGT(FieldAuthenticationMethod, v))
}

// AuthenticationMethodGTE applies the GTE predicate on the "authentication_method" field.
func AuthenticationMethodGTE(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldGTE(FieldAuthenticationMethod, v))
}

// AuthenticationMethodLT applies the LT predicate on the "authentication_method" field.
func AuthenticationMethodLT(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldLT(FieldAuthenticationMethod, v))
}

// AuthenticationMethodLTE applies the LTE predicate on the "authentication_method" field.
func AuthenticationMethodLTE(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldLTE(FieldAuthenticationMethod, v))
}

// AuthenticationMethodContains applies the Contains predicate on the "authentication_method" field.
func AuthenticationMethodContains(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldContains(FieldAuthenticationMethod, v))
}

// AuthenticationMethodHasPrefix applies the HasPrefix predicate on the "authentication_method" field.
func AuthenticationMethodHasPrefix(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldHasPrefix(FieldAuthenticationMethod, v))
}

// AuthenticationMethodHasSuffix applies the HasSuffix predicate on the "authentication_method" field.
func AuthenticationMethodHasSuffix(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldHasSuffix(FieldAuthenticationMethod, v))
}

// AuthenticationMethodEqualFold applies the EqualFold predicate on the "authentication_method" field.
func AuthenticationMethodEqualFold(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldEqualFold(FieldAuthenticationMethod, v))
}

// AuthenticationMethodContainsFold applies the ContainsFold predicate on the "authentication_method" field.
func AuthenticationMethodContainsFold(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldContainsFold(FieldAuthenticationMethod, v))
}

// TokenEQ applies the EQ predicate on the "token" field.
func TokenEQ(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldEQ(FieldToken, v))
}

// TokenNEQ applies the NEQ predicate on the "token" field.
func TokenNEQ(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldNEQ(FieldToken, v))
}

// TokenIn applies the In predicate on the "token" field.
func TokenIn(vs ...string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldIn(FieldToken, vs...))
}

// TokenNotIn applies the NotIn predicate on the "token" field.
func TokenNotIn(vs ...string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldNotIn(FieldToken, vs...))
}

// TokenGT applies the GT predicate on the "token" field.
func TokenGT(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldGT(FieldToken, v))
}

// TokenGTE applies the GTE predicate on the "token" field.
func TokenGTE(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldGTE(FieldToken, v))
}

// TokenLT applies the LT predicate on the "token" field.
func TokenLT(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldLT(FieldToken, v))
}

// TokenLTE applies the LTE predicate on the "token" field.
func TokenLTE(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldLTE(FieldToken, v))
}

// TokenContains applies the Contains predicate on the "token" field.
func TokenContains(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldContains(FieldToken, v))
}

// TokenHasPrefix applies the HasPrefix predicate on the "token" field.
func TokenHasPrefix(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldHasPrefix(FieldToken, v))
}

// TokenHasSuffix applies the HasSuffix predicate on the "token" field.
func TokenHasSuffix(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldHasSuffix(FieldToken, v))
}

// TokenEqualFold applies the EqualFold predicate on the "token" field.
func TokenEqualFold(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldEqualFold(FieldToken, v))
}

// TokenContainsFold applies the ContainsFold predicate on the "token" field.
func TokenContainsFold(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldContainsFold(FieldToken, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.FieldContainsFold(FieldType, v))
}

// HasFrpcInfos applies the HasEdge predicate on the "frpc_infos" edge.
func HasFrpcInfos() predicate.FrpsInfo {
	return predicate.FrpsInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FrpcInfosTable, FrpcInfosColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFrpcInfosWith applies the HasEdge predicate on the "frpc_infos" edge with a given conditions (other predicates).
func HasFrpcInfosWith(preds ...predicate.FrpcInfo) predicate.FrpsInfo {
	return predicate.FrpsInfo(func(s *sql.Selector) {
		step := newFrpcInfosStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FrpsInfo) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FrpsInfo) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FrpsInfo) predicate.FrpsInfo {
	return predicate.FrpsInfo(sql.NotPredicates(p))
}
