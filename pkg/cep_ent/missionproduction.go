// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/device"
	"cephalon-ent/pkg/cep_ent/hmackeypair"
	"cephalon-ent/pkg/cep_ent/mission"
	"cephalon-ent/pkg/cep_ent/missionproduceorder"
	"cephalon-ent/pkg/cep_ent/missionproduction"
	"cephalon-ent/pkg/enums"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 任务生产记录，任务被人接了就会产生一条记录，这一次任务完成情况就在这，同一个任务可以被多次接
type MissionProduction struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int64 `json:"created_by"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int64 `json:"updated_by"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at"`
	// 任务 ID
	MissionID int64 `json:"mission_id"`
	// 密钥对 ID
	HmacKeyPairID int64 `json:"hmac_key_pair_id"`
	// 任务开始时刻
	StartedAt time.Time `json:"started_at"`
	// 任务完成时刻
	FinishedAt time.Time `json:"finished_at"`
	// 任务结果
	Status enums.MissionStatus `json:"result"`
	// 领到任务的设备 ID
	DeviceID int64 `json:"device_id"`
	// 任务结果资源位置列表序列化
	ResultUrls string `json:"-"`
	// 额外需要返回的结果数据，格式不定
	AdditionalResult string `json:"-"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MissionProductionQuery when eager-loading is set.
	Edges        MissionProductionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MissionProductionEdges holds the relations/edges for other nodes in the graph.
type MissionProductionEdges struct {
	// MissionProduceOrder holds the value of the mission_produce_order edge.
	MissionProduceOrder *MissionProduceOrder `json:"mission_produce_order,omitempty"`
	// Mission holds the value of the mission edge.
	Mission *Mission `json:"mission,omitempty"`
	// HmacKeyPair holds the value of the hmac_key_pair edge.
	HmacKeyPair *HmacKeyPair `json:"hmac_key_pair,omitempty"`
	// Device holds the value of the device edge.
	Device *Device `json:"device,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// MissionProduceOrderOrErr returns the MissionProduceOrder value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MissionProductionEdges) MissionProduceOrderOrErr() (*MissionProduceOrder, error) {
	if e.loadedTypes[0] {
		if e.MissionProduceOrder == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: missionproduceorder.Label}
		}
		return e.MissionProduceOrder, nil
	}
	return nil, &NotLoadedError{edge: "mission_produce_order"}
}

// MissionOrErr returns the Mission value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MissionProductionEdges) MissionOrErr() (*Mission, error) {
	if e.loadedTypes[1] {
		if e.Mission == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: mission.Label}
		}
		return e.Mission, nil
	}
	return nil, &NotLoadedError{edge: "mission"}
}

// HmacKeyPairOrErr returns the HmacKeyPair value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MissionProductionEdges) HmacKeyPairOrErr() (*HmacKeyPair, error) {
	if e.loadedTypes[2] {
		if e.HmacKeyPair == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: hmackeypair.Label}
		}
		return e.HmacKeyPair, nil
	}
	return nil, &NotLoadedError{edge: "hmac_key_pair"}
}

// DeviceOrErr returns the Device value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MissionProductionEdges) DeviceOrErr() (*Device, error) {
	if e.loadedTypes[3] {
		if e.Device == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: device.Label}
		}
		return e.Device, nil
	}
	return nil, &NotLoadedError{edge: "device"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MissionProduction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case missionproduction.FieldID, missionproduction.FieldCreatedBy, missionproduction.FieldUpdatedBy, missionproduction.FieldMissionID, missionproduction.FieldHmacKeyPairID, missionproduction.FieldDeviceID:
			values[i] = new(sql.NullInt64)
		case missionproduction.FieldStatus, missionproduction.FieldResultUrls, missionproduction.FieldAdditionalResult:
			values[i] = new(sql.NullString)
		case missionproduction.FieldCreatedAt, missionproduction.FieldUpdatedAt, missionproduction.FieldDeletedAt, missionproduction.FieldStartedAt, missionproduction.FieldFinishedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MissionProduction fields.
func (mp *MissionProduction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case missionproduction.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mp.ID = int64(value.Int64)
		case missionproduction.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				mp.CreatedBy = value.Int64
			}
		case missionproduction.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				mp.UpdatedBy = value.Int64
			}
		case missionproduction.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mp.CreatedAt = value.Time
			}
		case missionproduction.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mp.UpdatedAt = value.Time
			}
		case missionproduction.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				mp.DeletedAt = value.Time
			}
		case missionproduction.FieldMissionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mission_id", values[i])
			} else if value.Valid {
				mp.MissionID = value.Int64
			}
		case missionproduction.FieldHmacKeyPairID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field hmac_key_pair_id", values[i])
			} else if value.Valid {
				mp.HmacKeyPairID = value.Int64
			}
		case missionproduction.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				mp.StartedAt = value.Time
			}
		case missionproduction.FieldFinishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field finished_at", values[i])
			} else if value.Valid {
				mp.FinishedAt = value.Time
			}
		case missionproduction.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				mp.Status = enums.MissionStatus(value.String)
			}
		case missionproduction.FieldDeviceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field device_id", values[i])
			} else if value.Valid {
				mp.DeviceID = value.Int64
			}
		case missionproduction.FieldResultUrls:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field result_urls", values[i])
			} else if value.Valid {
				mp.ResultUrls = value.String
			}
		case missionproduction.FieldAdditionalResult:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field additional_result", values[i])
			} else if value.Valid {
				mp.AdditionalResult = value.String
			}
		default:
			mp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MissionProduction.
// This includes values selected through modifiers, order, etc.
func (mp *MissionProduction) Value(name string) (ent.Value, error) {
	return mp.selectValues.Get(name)
}

// QueryMissionProduceOrder queries the "mission_produce_order" edge of the MissionProduction entity.
func (mp *MissionProduction) QueryMissionProduceOrder() *MissionProduceOrderQuery {
	return NewMissionProductionClient(mp.config).QueryMissionProduceOrder(mp)
}

// QueryMission queries the "mission" edge of the MissionProduction entity.
func (mp *MissionProduction) QueryMission() *MissionQuery {
	return NewMissionProductionClient(mp.config).QueryMission(mp)
}

// QueryHmacKeyPair queries the "hmac_key_pair" edge of the MissionProduction entity.
func (mp *MissionProduction) QueryHmacKeyPair() *HmacKeyPairQuery {
	return NewMissionProductionClient(mp.config).QueryHmacKeyPair(mp)
}

// QueryDevice queries the "device" edge of the MissionProduction entity.
func (mp *MissionProduction) QueryDevice() *DeviceQuery {
	return NewMissionProductionClient(mp.config).QueryDevice(mp)
}

// Update returns a builder for updating this MissionProduction.
// Note that you need to call MissionProduction.Unwrap() before calling this method if this MissionProduction
// was returned from a transaction, and the transaction was committed or rolled back.
func (mp *MissionProduction) Update() *MissionProductionUpdateOne {
	return NewMissionProductionClient(mp.config).UpdateOne(mp)
}

// Unwrap unwraps the MissionProduction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mp *MissionProduction) Unwrap() *MissionProduction {
	_tx, ok := mp.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: MissionProduction is not a transactional entity")
	}
	mp.config.driver = _tx.drv
	return mp
}

// String implements the fmt.Stringer.
func (mp *MissionProduction) String() string {
	var builder strings.Builder
	builder.WriteString("MissionProduction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mp.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", mp.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", mp.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(mp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(mp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(mp.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("mission_id=")
	builder.WriteString(fmt.Sprintf("%v", mp.MissionID))
	builder.WriteString(", ")
	builder.WriteString("hmac_key_pair_id=")
	builder.WriteString(fmt.Sprintf("%v", mp.HmacKeyPairID))
	builder.WriteString(", ")
	builder.WriteString("started_at=")
	builder.WriteString(mp.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("finished_at=")
	builder.WriteString(mp.FinishedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", mp.Status))
	builder.WriteString(", ")
	builder.WriteString("device_id=")
	builder.WriteString(fmt.Sprintf("%v", mp.DeviceID))
	builder.WriteString(", ")
	builder.WriteString("result_urls=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("additional_result=<sensitive>")
	builder.WriteByte(')')
	return builder.String()
}

// MissionProductions is a parsable slice of MissionProduction.
type MissionProductions []*MissionProduction
