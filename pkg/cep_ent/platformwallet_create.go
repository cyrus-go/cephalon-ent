// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/bill"
	"cephalon-ent/pkg/cep_ent/platformwallet"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlatformWalletCreate is the builder for creating a PlatformWallet entity.
type PlatformWalletCreate struct {
	config
	mutation *PlatformWalletMutation
	hooks    []Hook
}

// SetCreatedBy sets the "created_by" field.
func (pwc *PlatformWalletCreate) SetCreatedBy(i int64) *PlatformWalletCreate {
	pwc.mutation.SetCreatedBy(i)
	return pwc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pwc *PlatformWalletCreate) SetNillableCreatedBy(i *int64) *PlatformWalletCreate {
	if i != nil {
		pwc.SetCreatedBy(*i)
	}
	return pwc
}

// SetUpdatedBy sets the "updated_by" field.
func (pwc *PlatformWalletCreate) SetUpdatedBy(i int64) *PlatformWalletCreate {
	pwc.mutation.SetUpdatedBy(i)
	return pwc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pwc *PlatformWalletCreate) SetNillableUpdatedBy(i *int64) *PlatformWalletCreate {
	if i != nil {
		pwc.SetUpdatedBy(*i)
	}
	return pwc
}

// SetCreatedAt sets the "created_at" field.
func (pwc *PlatformWalletCreate) SetCreatedAt(t time.Time) *PlatformWalletCreate {
	pwc.mutation.SetCreatedAt(t)
	return pwc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pwc *PlatformWalletCreate) SetNillableCreatedAt(t *time.Time) *PlatformWalletCreate {
	if t != nil {
		pwc.SetCreatedAt(*t)
	}
	return pwc
}

// SetUpdatedAt sets the "updated_at" field.
func (pwc *PlatformWalletCreate) SetUpdatedAt(t time.Time) *PlatformWalletCreate {
	pwc.mutation.SetUpdatedAt(t)
	return pwc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pwc *PlatformWalletCreate) SetNillableUpdatedAt(t *time.Time) *PlatformWalletCreate {
	if t != nil {
		pwc.SetUpdatedAt(*t)
	}
	return pwc
}

// SetDeletedAt sets the "deleted_at" field.
func (pwc *PlatformWalletCreate) SetDeletedAt(t time.Time) *PlatformWalletCreate {
	pwc.mutation.SetDeletedAt(t)
	return pwc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pwc *PlatformWalletCreate) SetNillableDeletedAt(t *time.Time) *PlatformWalletCreate {
	if t != nil {
		pwc.SetDeletedAt(*t)
	}
	return pwc
}

// SetType sets the "type" field.
func (pwc *PlatformWalletCreate) SetType(pl platformwallet.Type) *PlatformWalletCreate {
	pwc.mutation.SetType(pl)
	return pwc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pwc *PlatformWalletCreate) SetNillableType(pl *platformwallet.Type) *PlatformWalletCreate {
	if pl != nil {
		pwc.SetType(*pl)
	}
	return pwc
}

// SetSumCep sets the "sum_cep" field.
func (pwc *PlatformWalletCreate) SetSumCep(i int64) *PlatformWalletCreate {
	pwc.mutation.SetSumCep(i)
	return pwc
}

// SetNillableSumCep sets the "sum_cep" field if the given value is not nil.
func (pwc *PlatformWalletCreate) SetNillableSumCep(i *int64) *PlatformWalletCreate {
	if i != nil {
		pwc.SetSumCep(*i)
	}
	return pwc
}

// SetCep sets the "cep" field.
func (pwc *PlatformWalletCreate) SetCep(i int64) *PlatformWalletCreate {
	pwc.mutation.SetCep(i)
	return pwc
}

// SetNillableCep sets the "cep" field if the given value is not nil.
func (pwc *PlatformWalletCreate) SetNillableCep(i *int64) *PlatformWalletCreate {
	if i != nil {
		pwc.SetCep(*i)
	}
	return pwc
}

// SetID sets the "id" field.
func (pwc *PlatformWalletCreate) SetID(i int64) *PlatformWalletCreate {
	pwc.mutation.SetID(i)
	return pwc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pwc *PlatformWalletCreate) SetNillableID(i *int64) *PlatformWalletCreate {
	if i != nil {
		pwc.SetID(*i)
	}
	return pwc
}

// AddBillIDs adds the "bills" edge to the Bill entity by IDs.
func (pwc *PlatformWalletCreate) AddBillIDs(ids ...int64) *PlatformWalletCreate {
	pwc.mutation.AddBillIDs(ids...)
	return pwc
}

// AddBills adds the "bills" edges to the Bill entity.
func (pwc *PlatformWalletCreate) AddBills(b ...*Bill) *PlatformWalletCreate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pwc.AddBillIDs(ids...)
}

// Mutation returns the PlatformWalletMutation object of the builder.
func (pwc *PlatformWalletCreate) Mutation() *PlatformWalletMutation {
	return pwc.mutation
}

// Save creates the PlatformWallet in the database.
func (pwc *PlatformWalletCreate) Save(ctx context.Context) (*PlatformWallet, error) {
	pwc.defaults()
	return withHooks(ctx, pwc.sqlSave, pwc.mutation, pwc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pwc *PlatformWalletCreate) SaveX(ctx context.Context) *PlatformWallet {
	v, err := pwc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pwc *PlatformWalletCreate) Exec(ctx context.Context) error {
	_, err := pwc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pwc *PlatformWalletCreate) ExecX(ctx context.Context) {
	if err := pwc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pwc *PlatformWalletCreate) defaults() {
	if _, ok := pwc.mutation.CreatedBy(); !ok {
		v := platformwallet.DefaultCreatedBy
		pwc.mutation.SetCreatedBy(v)
	}
	if _, ok := pwc.mutation.UpdatedBy(); !ok {
		v := platformwallet.DefaultUpdatedBy
		pwc.mutation.SetUpdatedBy(v)
	}
	if _, ok := pwc.mutation.CreatedAt(); !ok {
		v := platformwallet.DefaultCreatedAt()
		pwc.mutation.SetCreatedAt(v)
	}
	if _, ok := pwc.mutation.UpdatedAt(); !ok {
		v := platformwallet.DefaultUpdatedAt()
		pwc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pwc.mutation.DeletedAt(); !ok {
		v := platformwallet.DefaultDeletedAt
		pwc.mutation.SetDeletedAt(v)
	}
	if _, ok := pwc.mutation.GetType(); !ok {
		v := platformwallet.DefaultType
		pwc.mutation.SetType(v)
	}
	if _, ok := pwc.mutation.SumCep(); !ok {
		v := platformwallet.DefaultSumCep
		pwc.mutation.SetSumCep(v)
	}
	if _, ok := pwc.mutation.Cep(); !ok {
		v := platformwallet.DefaultCep
		pwc.mutation.SetCep(v)
	}
	if _, ok := pwc.mutation.ID(); !ok {
		v := platformwallet.DefaultID()
		pwc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pwc *PlatformWalletCreate) check() error {
	if _, ok := pwc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "PlatformWallet.created_by"`)}
	}
	if _, ok := pwc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "PlatformWallet.updated_by"`)}
	}
	if _, ok := pwc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "PlatformWallet.created_at"`)}
	}
	if _, ok := pwc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "PlatformWallet.updated_at"`)}
	}
	if _, ok := pwc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "PlatformWallet.deleted_at"`)}
	}
	if _, ok := pwc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`cep_ent: missing required field "PlatformWallet.type"`)}
	}
	if v, ok := pwc.mutation.GetType(); ok {
		if err := platformwallet.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "PlatformWallet.type": %w`, err)}
		}
	}
	if _, ok := pwc.mutation.SumCep(); !ok {
		return &ValidationError{Name: "sum_cep", err: errors.New(`cep_ent: missing required field "PlatformWallet.sum_cep"`)}
	}
	if _, ok := pwc.mutation.Cep(); !ok {
		return &ValidationError{Name: "cep", err: errors.New(`cep_ent: missing required field "PlatformWallet.cep"`)}
	}
	return nil
}

func (pwc *PlatformWalletCreate) sqlSave(ctx context.Context) (*PlatformWallet, error) {
	if err := pwc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pwc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pwc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	pwc.mutation.id = &_node.ID
	pwc.mutation.done = true
	return _node, nil
}

func (pwc *PlatformWalletCreate) createSpec() (*PlatformWallet, *sqlgraph.CreateSpec) {
	var (
		_node = &PlatformWallet{config: pwc.config}
		_spec = sqlgraph.NewCreateSpec(platformwallet.Table, sqlgraph.NewFieldSpec(platformwallet.FieldID, field.TypeInt64))
	)
	if id, ok := pwc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pwc.mutation.CreatedBy(); ok {
		_spec.SetField(platformwallet.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := pwc.mutation.UpdatedBy(); ok {
		_spec.SetField(platformwallet.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := pwc.mutation.CreatedAt(); ok {
		_spec.SetField(platformwallet.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pwc.mutation.UpdatedAt(); ok {
		_spec.SetField(platformwallet.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pwc.mutation.DeletedAt(); ok {
		_spec.SetField(platformwallet.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := pwc.mutation.GetType(); ok {
		_spec.SetField(platformwallet.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := pwc.mutation.SumCep(); ok {
		_spec.SetField(platformwallet.FieldSumCep, field.TypeInt64, value)
		_node.SumCep = value
	}
	if value, ok := pwc.mutation.Cep(); ok {
		_spec.SetField(platformwallet.FieldCep, field.TypeInt64, value)
		_node.Cep = value
	}
	if nodes := pwc.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformwallet.BillsTable,
			Columns: []string{platformwallet.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PlatformWalletCreateBulk is the builder for creating many PlatformWallet entities in bulk.
type PlatformWalletCreateBulk struct {
	config
	builders []*PlatformWalletCreate
}

// Save creates the PlatformWallet entities in the database.
func (pwcb *PlatformWalletCreateBulk) Save(ctx context.Context) ([]*PlatformWallet, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pwcb.builders))
	nodes := make([]*PlatformWallet, len(pwcb.builders))
	mutators := make([]Mutator, len(pwcb.builders))
	for i := range pwcb.builders {
		func(i int, root context.Context) {
			builder := pwcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlatformWalletMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pwcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pwcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pwcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pwcb *PlatformWalletCreateBulk) SaveX(ctx context.Context) []*PlatformWallet {
	v, err := pwcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pwcb *PlatformWalletCreateBulk) Exec(ctx context.Context) error {
	_, err := pwcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pwcb *PlatformWalletCreateBulk) ExecX(ctx context.Context) {
	if err := pwcb.Exec(ctx); err != nil {
		panic(err)
	}
}
