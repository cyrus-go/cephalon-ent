// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/usercloserecord"
)

// UserCloseRecordDelete is the builder for deleting a UserCloseRecord entity.
type UserCloseRecordDelete struct {
	config
	hooks    []Hook
	mutation *UserCloseRecordMutation
}

// Where appends a list predicates to the UserCloseRecordDelete builder.
func (ucrd *UserCloseRecordDelete) Where(ps ...predicate.UserCloseRecord) *UserCloseRecordDelete {
	ucrd.mutation.Where(ps...)
	return ucrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ucrd *UserCloseRecordDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ucrd.sqlExec, ucrd.mutation, ucrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ucrd *UserCloseRecordDelete) ExecX(ctx context.Context) int {
	n, err := ucrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ucrd *UserCloseRecordDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(usercloserecord.Table, sqlgraph.NewFieldSpec(usercloserecord.FieldID, field.TypeInt64))
	if ps := ucrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ucrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ucrd.mutation.done = true
	return affected, err
}

// UserCloseRecordDeleteOne is the builder for deleting a single UserCloseRecord entity.
type UserCloseRecordDeleteOne struct {
	ucrd *UserCloseRecordDelete
}

// Where appends a list predicates to the UserCloseRecordDelete builder.
func (ucrdo *UserCloseRecordDeleteOne) Where(ps ...predicate.UserCloseRecord) *UserCloseRecordDeleteOne {
	ucrdo.ucrd.mutation.Where(ps...)
	return ucrdo
}

// Exec executes the deletion query.
func (ucrdo *UserCloseRecordDeleteOne) Exec(ctx context.Context) error {
	n, err := ucrdo.ucrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{usercloserecord.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ucrdo *UserCloseRecordDeleteOne) ExecX(ctx context.Context) {
	if err := ucrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
