// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/survey"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/surveyanswer"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/surveyquestion"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// SurveyQuestionCreate is the builder for creating a SurveyQuestion entity.
type SurveyQuestionCreate struct {
	config
	mutation *SurveyQuestionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (sqc *SurveyQuestionCreate) SetCreatedBy(i int64) *SurveyQuestionCreate {
	sqc.mutation.SetCreatedBy(i)
	return sqc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sqc *SurveyQuestionCreate) SetNillableCreatedBy(i *int64) *SurveyQuestionCreate {
	if i != nil {
		sqc.SetCreatedBy(*i)
	}
	return sqc
}

// SetUpdatedBy sets the "updated_by" field.
func (sqc *SurveyQuestionCreate) SetUpdatedBy(i int64) *SurveyQuestionCreate {
	sqc.mutation.SetUpdatedBy(i)
	return sqc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sqc *SurveyQuestionCreate) SetNillableUpdatedBy(i *int64) *SurveyQuestionCreate {
	if i != nil {
		sqc.SetUpdatedBy(*i)
	}
	return sqc
}

// SetCreatedAt sets the "created_at" field.
func (sqc *SurveyQuestionCreate) SetCreatedAt(t time.Time) *SurveyQuestionCreate {
	sqc.mutation.SetCreatedAt(t)
	return sqc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sqc *SurveyQuestionCreate) SetNillableCreatedAt(t *time.Time) *SurveyQuestionCreate {
	if t != nil {
		sqc.SetCreatedAt(*t)
	}
	return sqc
}

// SetUpdatedAt sets the "updated_at" field.
func (sqc *SurveyQuestionCreate) SetUpdatedAt(t time.Time) *SurveyQuestionCreate {
	sqc.mutation.SetUpdatedAt(t)
	return sqc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sqc *SurveyQuestionCreate) SetNillableUpdatedAt(t *time.Time) *SurveyQuestionCreate {
	if t != nil {
		sqc.SetUpdatedAt(*t)
	}
	return sqc
}

// SetDeletedAt sets the "deleted_at" field.
func (sqc *SurveyQuestionCreate) SetDeletedAt(t time.Time) *SurveyQuestionCreate {
	sqc.mutation.SetDeletedAt(t)
	return sqc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sqc *SurveyQuestionCreate) SetNillableDeletedAt(t *time.Time) *SurveyQuestionCreate {
	if t != nil {
		sqc.SetDeletedAt(*t)
	}
	return sqc
}

// SetSurveyID sets the "survey_id" field.
func (sqc *SurveyQuestionCreate) SetSurveyID(i int64) *SurveyQuestionCreate {
	sqc.mutation.SetSurveyID(i)
	return sqc
}

// SetNillableSurveyID sets the "survey_id" field if the given value is not nil.
func (sqc *SurveyQuestionCreate) SetNillableSurveyID(i *int64) *SurveyQuestionCreate {
	if i != nil {
		sqc.SetSurveyID(*i)
	}
	return sqc
}

// SetText sets the "text" field.
func (sqc *SurveyQuestionCreate) SetText(s string) *SurveyQuestionCreate {
	sqc.mutation.SetText(s)
	return sqc
}

// SetNillableText sets the "text" field if the given value is not nil.
func (sqc *SurveyQuestionCreate) SetNillableText(s *string) *SurveyQuestionCreate {
	if s != nil {
		sqc.SetText(*s)
	}
	return sqc
}

// SetType sets the "type" field.
func (sqc *SurveyQuestionCreate) SetType(eqt enums.SurveyQuestionType) *SurveyQuestionCreate {
	sqc.mutation.SetType(eqt)
	return sqc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (sqc *SurveyQuestionCreate) SetNillableType(eqt *enums.SurveyQuestionType) *SurveyQuestionCreate {
	if eqt != nil {
		sqc.SetType(*eqt)
	}
	return sqc
}

// SetOptions sets the "options" field.
func (sqc *SurveyQuestionCreate) SetOptions(s []string) *SurveyQuestionCreate {
	sqc.mutation.SetOptions(s)
	return sqc
}

// SetID sets the "id" field.
func (sqc *SurveyQuestionCreate) SetID(i int64) *SurveyQuestionCreate {
	sqc.mutation.SetID(i)
	return sqc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sqc *SurveyQuestionCreate) SetNillableID(i *int64) *SurveyQuestionCreate {
	if i != nil {
		sqc.SetID(*i)
	}
	return sqc
}

// SetSurvey sets the "survey" edge to the Survey entity.
func (sqc *SurveyQuestionCreate) SetSurvey(s *Survey) *SurveyQuestionCreate {
	return sqc.SetSurveyID(s.ID)
}

// AddSurveyAnswerIDs adds the "survey_answers" edge to the SurveyAnswer entity by IDs.
func (sqc *SurveyQuestionCreate) AddSurveyAnswerIDs(ids ...int64) *SurveyQuestionCreate {
	sqc.mutation.AddSurveyAnswerIDs(ids...)
	return sqc
}

// AddSurveyAnswers adds the "survey_answers" edges to the SurveyAnswer entity.
func (sqc *SurveyQuestionCreate) AddSurveyAnswers(s ...*SurveyAnswer) *SurveyQuestionCreate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sqc.AddSurveyAnswerIDs(ids...)
}

// Mutation returns the SurveyQuestionMutation object of the builder.
func (sqc *SurveyQuestionCreate) Mutation() *SurveyQuestionMutation {
	return sqc.mutation
}

// Save creates the SurveyQuestion in the database.
func (sqc *SurveyQuestionCreate) Save(ctx context.Context) (*SurveyQuestion, error) {
	sqc.defaults()
	return withHooks(ctx, sqc.sqlSave, sqc.mutation, sqc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sqc *SurveyQuestionCreate) SaveX(ctx context.Context) *SurveyQuestion {
	v, err := sqc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sqc *SurveyQuestionCreate) Exec(ctx context.Context) error {
	_, err := sqc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sqc *SurveyQuestionCreate) ExecX(ctx context.Context) {
	if err := sqc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sqc *SurveyQuestionCreate) defaults() {
	if _, ok := sqc.mutation.CreatedBy(); !ok {
		v := surveyquestion.DefaultCreatedBy
		sqc.mutation.SetCreatedBy(v)
	}
	if _, ok := sqc.mutation.UpdatedBy(); !ok {
		v := surveyquestion.DefaultUpdatedBy
		sqc.mutation.SetUpdatedBy(v)
	}
	if _, ok := sqc.mutation.CreatedAt(); !ok {
		v := surveyquestion.DefaultCreatedAt()
		sqc.mutation.SetCreatedAt(v)
	}
	if _, ok := sqc.mutation.UpdatedAt(); !ok {
		v := surveyquestion.DefaultUpdatedAt()
		sqc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sqc.mutation.DeletedAt(); !ok {
		v := surveyquestion.DefaultDeletedAt
		sqc.mutation.SetDeletedAt(v)
	}
	if _, ok := sqc.mutation.SurveyID(); !ok {
		v := surveyquestion.DefaultSurveyID
		sqc.mutation.SetSurveyID(v)
	}
	if _, ok := sqc.mutation.Text(); !ok {
		v := surveyquestion.DefaultText
		sqc.mutation.SetText(v)
	}
	if _, ok := sqc.mutation.GetType(); !ok {
		v := surveyquestion.DefaultType
		sqc.mutation.SetType(v)
	}
	if _, ok := sqc.mutation.ID(); !ok {
		v := surveyquestion.DefaultID()
		sqc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sqc *SurveyQuestionCreate) check() error {
	if _, ok := sqc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "SurveyQuestion.created_by"`)}
	}
	if _, ok := sqc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "SurveyQuestion.updated_by"`)}
	}
	if _, ok := sqc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "SurveyQuestion.created_at"`)}
	}
	if _, ok := sqc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "SurveyQuestion.updated_at"`)}
	}
	if _, ok := sqc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "SurveyQuestion.deleted_at"`)}
	}
	if _, ok := sqc.mutation.SurveyID(); !ok {
		return &ValidationError{Name: "survey_id", err: errors.New(`cep_ent: missing required field "SurveyQuestion.survey_id"`)}
	}
	if _, ok := sqc.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`cep_ent: missing required field "SurveyQuestion.text"`)}
	}
	if _, ok := sqc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`cep_ent: missing required field "SurveyQuestion.type"`)}
	}
	if v, ok := sqc.mutation.GetType(); ok {
		if err := surveyquestion.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "SurveyQuestion.type": %w`, err)}
		}
	}
	if _, ok := sqc.mutation.SurveyID(); !ok {
		return &ValidationError{Name: "survey", err: errors.New(`cep_ent: missing required edge "SurveyQuestion.survey"`)}
	}
	return nil
}

func (sqc *SurveyQuestionCreate) sqlSave(ctx context.Context) (*SurveyQuestion, error) {
	if err := sqc.check(); err != nil {
		return nil, err
	}
	_node, _spec, err := sqc.createSpec()
	if err != nil {
		return nil, err
	}
	if err := sqlgraph.CreateNode(ctx, sqc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	sqc.mutation.id = &_node.ID
	sqc.mutation.done = true
	return _node, nil
}

func (sqc *SurveyQuestionCreate) createSpec() (*SurveyQuestion, *sqlgraph.CreateSpec, error) {
	var (
		_node = &SurveyQuestion{config: sqc.config}
		_spec = sqlgraph.NewCreateSpec(surveyquestion.Table, sqlgraph.NewFieldSpec(surveyquestion.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = sqc.conflict
	if id, ok := sqc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sqc.mutation.CreatedBy(); ok {
		_spec.SetField(surveyquestion.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := sqc.mutation.UpdatedBy(); ok {
		_spec.SetField(surveyquestion.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := sqc.mutation.CreatedAt(); ok {
		_spec.SetField(surveyquestion.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sqc.mutation.UpdatedAt(); ok {
		_spec.SetField(surveyquestion.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sqc.mutation.DeletedAt(); ok {
		_spec.SetField(surveyquestion.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := sqc.mutation.Text(); ok {
		_spec.SetField(surveyquestion.FieldText, field.TypeString, value)
		_node.Text = value
	}
	if value, ok := sqc.mutation.GetType(); ok {
		_spec.SetField(surveyquestion.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := sqc.mutation.Options(); ok {
		vv, err := surveyquestion.ValueScanner.Options.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(surveyquestion.FieldOptions, field.TypeString, vv)
		_node.Options = value
	}
	if nodes := sqc.mutation.SurveyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   surveyquestion.SurveyTable,
			Columns: []string{surveyquestion.SurveyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survey.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SurveyID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sqc.mutation.SurveyAnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   surveyquestion.SurveyAnswersTable,
			Columns: []string{surveyquestion.SurveyAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyanswer.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec, nil
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SurveyQuestion.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SurveyQuestionUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (sqc *SurveyQuestionCreate) OnConflict(opts ...sql.ConflictOption) *SurveyQuestionUpsertOne {
	sqc.conflict = opts
	return &SurveyQuestionUpsertOne{
		create: sqc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SurveyQuestion.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sqc *SurveyQuestionCreate) OnConflictColumns(columns ...string) *SurveyQuestionUpsertOne {
	sqc.conflict = append(sqc.conflict, sql.ConflictColumns(columns...))
	return &SurveyQuestionUpsertOne{
		create: sqc,
	}
}

type (
	// SurveyQuestionUpsertOne is the builder for "upsert"-ing
	//  one SurveyQuestion node.
	SurveyQuestionUpsertOne struct {
		create *SurveyQuestionCreate
	}

	// SurveyQuestionUpsert is the "OnConflict" setter.
	SurveyQuestionUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *SurveyQuestionUpsert) SetCreatedBy(v int64) *SurveyQuestionUpsert {
	u.Set(surveyquestion.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *SurveyQuestionUpsert) UpdateCreatedBy() *SurveyQuestionUpsert {
	u.SetExcluded(surveyquestion.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *SurveyQuestionUpsert) AddCreatedBy(v int64) *SurveyQuestionUpsert {
	u.Add(surveyquestion.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *SurveyQuestionUpsert) SetUpdatedBy(v int64) *SurveyQuestionUpsert {
	u.Set(surveyquestion.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *SurveyQuestionUpsert) UpdateUpdatedBy() *SurveyQuestionUpsert {
	u.SetExcluded(surveyquestion.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *SurveyQuestionUpsert) AddUpdatedBy(v int64) *SurveyQuestionUpsert {
	u.Add(surveyquestion.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SurveyQuestionUpsert) SetUpdatedAt(v time.Time) *SurveyQuestionUpsert {
	u.Set(surveyquestion.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SurveyQuestionUpsert) UpdateUpdatedAt() *SurveyQuestionUpsert {
	u.SetExcluded(surveyquestion.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SurveyQuestionUpsert) SetDeletedAt(v time.Time) *SurveyQuestionUpsert {
	u.Set(surveyquestion.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SurveyQuestionUpsert) UpdateDeletedAt() *SurveyQuestionUpsert {
	u.SetExcluded(surveyquestion.FieldDeletedAt)
	return u
}

// SetSurveyID sets the "survey_id" field.
func (u *SurveyQuestionUpsert) SetSurveyID(v int64) *SurveyQuestionUpsert {
	u.Set(surveyquestion.FieldSurveyID, v)
	return u
}

// UpdateSurveyID sets the "survey_id" field to the value that was provided on create.
func (u *SurveyQuestionUpsert) UpdateSurveyID() *SurveyQuestionUpsert {
	u.SetExcluded(surveyquestion.FieldSurveyID)
	return u
}

// SetText sets the "text" field.
func (u *SurveyQuestionUpsert) SetText(v string) *SurveyQuestionUpsert {
	u.Set(surveyquestion.FieldText, v)
	return u
}

// UpdateText sets the "text" field to the value that was provided on create.
func (u *SurveyQuestionUpsert) UpdateText() *SurveyQuestionUpsert {
	u.SetExcluded(surveyquestion.FieldText)
	return u
}

// SetType sets the "type" field.
func (u *SurveyQuestionUpsert) SetType(v enums.SurveyQuestionType) *SurveyQuestionUpsert {
	u.Set(surveyquestion.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SurveyQuestionUpsert) UpdateType() *SurveyQuestionUpsert {
	u.SetExcluded(surveyquestion.FieldType)
	return u
}

// SetOptions sets the "options" field.
func (u *SurveyQuestionUpsert) SetOptions(v []string) *SurveyQuestionUpsert {
	u.Set(surveyquestion.FieldOptions, v)
	return u
}

// UpdateOptions sets the "options" field to the value that was provided on create.
func (u *SurveyQuestionUpsert) UpdateOptions() *SurveyQuestionUpsert {
	u.SetExcluded(surveyquestion.FieldOptions)
	return u
}

// ClearOptions clears the value of the "options" field.
func (u *SurveyQuestionUpsert) ClearOptions() *SurveyQuestionUpsert {
	u.SetNull(surveyquestion.FieldOptions)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SurveyQuestion.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(surveyquestion.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SurveyQuestionUpsertOne) UpdateNewValues() *SurveyQuestionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(surveyquestion.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(surveyquestion.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SurveyQuestion.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SurveyQuestionUpsertOne) Ignore() *SurveyQuestionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SurveyQuestionUpsertOne) DoNothing() *SurveyQuestionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SurveyQuestionCreate.OnConflict
// documentation for more info.
func (u *SurveyQuestionUpsertOne) Update(set func(*SurveyQuestionUpsert)) *SurveyQuestionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SurveyQuestionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *SurveyQuestionUpsertOne) SetCreatedBy(v int64) *SurveyQuestionUpsertOne {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *SurveyQuestionUpsertOne) AddCreatedBy(v int64) *SurveyQuestionUpsertOne {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *SurveyQuestionUpsertOne) UpdateCreatedBy() *SurveyQuestionUpsertOne {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *SurveyQuestionUpsertOne) SetUpdatedBy(v int64) *SurveyQuestionUpsertOne {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *SurveyQuestionUpsertOne) AddUpdatedBy(v int64) *SurveyQuestionUpsertOne {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *SurveyQuestionUpsertOne) UpdateUpdatedBy() *SurveyQuestionUpsertOne {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SurveyQuestionUpsertOne) SetUpdatedAt(v time.Time) *SurveyQuestionUpsertOne {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SurveyQuestionUpsertOne) UpdateUpdatedAt() *SurveyQuestionUpsertOne {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SurveyQuestionUpsertOne) SetDeletedAt(v time.Time) *SurveyQuestionUpsertOne {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SurveyQuestionUpsertOne) UpdateDeletedAt() *SurveyQuestionUpsertOne {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetSurveyID sets the "survey_id" field.
func (u *SurveyQuestionUpsertOne) SetSurveyID(v int64) *SurveyQuestionUpsertOne {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.SetSurveyID(v)
	})
}

// UpdateSurveyID sets the "survey_id" field to the value that was provided on create.
func (u *SurveyQuestionUpsertOne) UpdateSurveyID() *SurveyQuestionUpsertOne {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.UpdateSurveyID()
	})
}

// SetText sets the "text" field.
func (u *SurveyQuestionUpsertOne) SetText(v string) *SurveyQuestionUpsertOne {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.SetText(v)
	})
}

// UpdateText sets the "text" field to the value that was provided on create.
func (u *SurveyQuestionUpsertOne) UpdateText() *SurveyQuestionUpsertOne {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.UpdateText()
	})
}

// SetType sets the "type" field.
func (u *SurveyQuestionUpsertOne) SetType(v enums.SurveyQuestionType) *SurveyQuestionUpsertOne {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SurveyQuestionUpsertOne) UpdateType() *SurveyQuestionUpsertOne {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.UpdateType()
	})
}

// SetOptions sets the "options" field.
func (u *SurveyQuestionUpsertOne) SetOptions(v []string) *SurveyQuestionUpsertOne {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.SetOptions(v)
	})
}

// UpdateOptions sets the "options" field to the value that was provided on create.
func (u *SurveyQuestionUpsertOne) UpdateOptions() *SurveyQuestionUpsertOne {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.UpdateOptions()
	})
}

// ClearOptions clears the value of the "options" field.
func (u *SurveyQuestionUpsertOne) ClearOptions() *SurveyQuestionUpsertOne {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.ClearOptions()
	})
}

// Exec executes the query.
func (u *SurveyQuestionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for SurveyQuestionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SurveyQuestionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SurveyQuestionUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SurveyQuestionUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SurveyQuestionCreateBulk is the builder for creating many SurveyQuestion entities in bulk.
type SurveyQuestionCreateBulk struct {
	config
	err      error
	builders []*SurveyQuestionCreate
	conflict []sql.ConflictOption
}

// Save creates the SurveyQuestion entities in the database.
func (sqcb *SurveyQuestionCreateBulk) Save(ctx context.Context) ([]*SurveyQuestion, error) {
	if sqcb.err != nil {
		return nil, sqcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sqcb.builders))
	nodes := make([]*SurveyQuestion, len(sqcb.builders))
	mutators := make([]Mutator, len(sqcb.builders))
	for i := range sqcb.builders {
		func(i int, root context.Context) {
			builder := sqcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SurveyQuestionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i], err = builder.createSpec()
				if err != nil {
					return nil, err
				}
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sqcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sqcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sqcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sqcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sqcb *SurveyQuestionCreateBulk) SaveX(ctx context.Context) []*SurveyQuestion {
	v, err := sqcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sqcb *SurveyQuestionCreateBulk) Exec(ctx context.Context) error {
	_, err := sqcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sqcb *SurveyQuestionCreateBulk) ExecX(ctx context.Context) {
	if err := sqcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SurveyQuestion.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SurveyQuestionUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (sqcb *SurveyQuestionCreateBulk) OnConflict(opts ...sql.ConflictOption) *SurveyQuestionUpsertBulk {
	sqcb.conflict = opts
	return &SurveyQuestionUpsertBulk{
		create: sqcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SurveyQuestion.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sqcb *SurveyQuestionCreateBulk) OnConflictColumns(columns ...string) *SurveyQuestionUpsertBulk {
	sqcb.conflict = append(sqcb.conflict, sql.ConflictColumns(columns...))
	return &SurveyQuestionUpsertBulk{
		create: sqcb,
	}
}

// SurveyQuestionUpsertBulk is the builder for "upsert"-ing
// a bulk of SurveyQuestion nodes.
type SurveyQuestionUpsertBulk struct {
	create *SurveyQuestionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SurveyQuestion.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(surveyquestion.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SurveyQuestionUpsertBulk) UpdateNewValues() *SurveyQuestionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(surveyquestion.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(surveyquestion.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SurveyQuestion.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SurveyQuestionUpsertBulk) Ignore() *SurveyQuestionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SurveyQuestionUpsertBulk) DoNothing() *SurveyQuestionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SurveyQuestionCreateBulk.OnConflict
// documentation for more info.
func (u *SurveyQuestionUpsertBulk) Update(set func(*SurveyQuestionUpsert)) *SurveyQuestionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SurveyQuestionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *SurveyQuestionUpsertBulk) SetCreatedBy(v int64) *SurveyQuestionUpsertBulk {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *SurveyQuestionUpsertBulk) AddCreatedBy(v int64) *SurveyQuestionUpsertBulk {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *SurveyQuestionUpsertBulk) UpdateCreatedBy() *SurveyQuestionUpsertBulk {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *SurveyQuestionUpsertBulk) SetUpdatedBy(v int64) *SurveyQuestionUpsertBulk {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *SurveyQuestionUpsertBulk) AddUpdatedBy(v int64) *SurveyQuestionUpsertBulk {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *SurveyQuestionUpsertBulk) UpdateUpdatedBy() *SurveyQuestionUpsertBulk {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SurveyQuestionUpsertBulk) SetUpdatedAt(v time.Time) *SurveyQuestionUpsertBulk {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SurveyQuestionUpsertBulk) UpdateUpdatedAt() *SurveyQuestionUpsertBulk {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SurveyQuestionUpsertBulk) SetDeletedAt(v time.Time) *SurveyQuestionUpsertBulk {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SurveyQuestionUpsertBulk) UpdateDeletedAt() *SurveyQuestionUpsertBulk {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetSurveyID sets the "survey_id" field.
func (u *SurveyQuestionUpsertBulk) SetSurveyID(v int64) *SurveyQuestionUpsertBulk {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.SetSurveyID(v)
	})
}

// UpdateSurveyID sets the "survey_id" field to the value that was provided on create.
func (u *SurveyQuestionUpsertBulk) UpdateSurveyID() *SurveyQuestionUpsertBulk {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.UpdateSurveyID()
	})
}

// SetText sets the "text" field.
func (u *SurveyQuestionUpsertBulk) SetText(v string) *SurveyQuestionUpsertBulk {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.SetText(v)
	})
}

// UpdateText sets the "text" field to the value that was provided on create.
func (u *SurveyQuestionUpsertBulk) UpdateText() *SurveyQuestionUpsertBulk {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.UpdateText()
	})
}

// SetType sets the "type" field.
func (u *SurveyQuestionUpsertBulk) SetType(v enums.SurveyQuestionType) *SurveyQuestionUpsertBulk {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SurveyQuestionUpsertBulk) UpdateType() *SurveyQuestionUpsertBulk {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.UpdateType()
	})
}

// SetOptions sets the "options" field.
func (u *SurveyQuestionUpsertBulk) SetOptions(v []string) *SurveyQuestionUpsertBulk {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.SetOptions(v)
	})
}

// UpdateOptions sets the "options" field to the value that was provided on create.
func (u *SurveyQuestionUpsertBulk) UpdateOptions() *SurveyQuestionUpsertBulk {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.UpdateOptions()
	})
}

// ClearOptions clears the value of the "options" field.
func (u *SurveyQuestionUpsertBulk) ClearOptions() *SurveyQuestionUpsertBulk {
	return u.Update(func(s *SurveyQuestionUpsert) {
		s.ClearOptions()
	})
}

// Exec executes the query.
func (u *SurveyQuestionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the SurveyQuestionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for SurveyQuestionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SurveyQuestionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
