// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/artwork"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/artworklike"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/bill"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/campaignorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/cdkinfo"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/cloudfile"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/collect"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/costaccount"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/costbill"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/device"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/earnbill"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/incomemanage"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/invite"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/loginrecord"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottogetcountrecord"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottorecord"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottousercount"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/mission"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionbatch"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionconsumeorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionfailedfeedback"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionproduceorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionproduction"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/profitaccount"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/profitsetting"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/rechargeorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/renewalagreement"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/surveyresponse"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/transferorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/troublededuct"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/userdevice"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/vxaccount"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/vxsocial"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/wallet"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/withdrawaccount"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/withdrawrecord"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (uc *UserCreate) SetCreatedBy(i int64) *UserCreate {
	uc.mutation.SetCreatedBy(i)
	return uc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreatedBy(i *int64) *UserCreate {
	if i != nil {
		uc.SetCreatedBy(*i)
	}
	return uc
}

// SetUpdatedBy sets the "updated_by" field.
func (uc *UserCreate) SetUpdatedBy(i int64) *UserCreate {
	uc.mutation.SetUpdatedBy(i)
	return uc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uc *UserCreate) SetNillableUpdatedBy(i *int64) *UserCreate {
	if i != nil {
		uc.SetUpdatedBy(*i)
	}
	return uc
}

// SetCreatedAt sets the "created_at" field.
func (uc *UserCreate) SetCreatedAt(t time.Time) *UserCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetUpdatedAt sets the "updated_at" field.
func (uc *UserCreate) SetUpdatedAt(t time.Time) *UserCreate {
	uc.mutation.SetUpdatedAt(t)
	return uc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableUpdatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetUpdatedAt(*t)
	}
	return uc
}

// SetDeletedAt sets the "deleted_at" field.
func (uc *UserCreate) SetDeletedAt(t time.Time) *UserCreate {
	uc.mutation.SetDeletedAt(t)
	return uc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableDeletedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetDeletedAt(*t)
	}
	return uc
}

// SetName sets the "name" field.
func (uc *UserCreate) SetName(s string) *UserCreate {
	uc.mutation.SetName(s)
	return uc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uc *UserCreate) SetNillableName(s *string) *UserCreate {
	if s != nil {
		uc.SetName(*s)
	}
	return uc
}

// SetNickName sets the "nick_name" field.
func (uc *UserCreate) SetNickName(s string) *UserCreate {
	uc.mutation.SetNickName(s)
	return uc
}

// SetNillableNickName sets the "nick_name" field if the given value is not nil.
func (uc *UserCreate) SetNillableNickName(s *string) *UserCreate {
	if s != nil {
		uc.SetNickName(*s)
	}
	return uc
}

// SetJpgURL sets the "jpg_url" field.
func (uc *UserCreate) SetJpgURL(s string) *UserCreate {
	uc.mutation.SetJpgURL(s)
	return uc
}

// SetNillableJpgURL sets the "jpg_url" field if the given value is not nil.
func (uc *UserCreate) SetNillableJpgURL(s *string) *UserCreate {
	if s != nil {
		uc.SetJpgURL(*s)
	}
	return uc
}

// SetKey sets the "key" field.
func (uc *UserCreate) SetKey(s string) *UserCreate {
	uc.mutation.SetKey(s)
	return uc
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (uc *UserCreate) SetNillableKey(s *string) *UserCreate {
	if s != nil {
		uc.SetKey(*s)
	}
	return uc
}

// SetSecret sets the "secret" field.
func (uc *UserCreate) SetSecret(s string) *UserCreate {
	uc.mutation.SetSecret(s)
	return uc
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (uc *UserCreate) SetNillableSecret(s *string) *UserCreate {
	if s != nil {
		uc.SetSecret(*s)
	}
	return uc
}

// SetPhone sets the "phone" field.
func (uc *UserCreate) SetPhone(s string) *UserCreate {
	uc.mutation.SetPhone(s)
	return uc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uc *UserCreate) SetNillablePhone(s *string) *UserCreate {
	if s != nil {
		uc.SetPhone(*s)
	}
	return uc
}

// SetPassword sets the "password" field.
func (uc *UserCreate) SetPassword(s string) *UserCreate {
	uc.mutation.SetPassword(s)
	return uc
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uc *UserCreate) SetNillablePassword(s *string) *UserCreate {
	if s != nil {
		uc.SetPassword(*s)
	}
	return uc
}

// SetIsFrozen sets the "is_frozen" field.
func (uc *UserCreate) SetIsFrozen(b bool) *UserCreate {
	uc.mutation.SetIsFrozen(b)
	return uc
}

// SetNillableIsFrozen sets the "is_frozen" field if the given value is not nil.
func (uc *UserCreate) SetNillableIsFrozen(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsFrozen(*b)
	}
	return uc
}

// SetIsRecharge sets the "is_recharge" field.
func (uc *UserCreate) SetIsRecharge(b bool) *UserCreate {
	uc.mutation.SetIsRecharge(b)
	return uc
}

// SetNillableIsRecharge sets the "is_recharge" field if the given value is not nil.
func (uc *UserCreate) SetNillableIsRecharge(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsRecharge(*b)
	}
	return uc
}

// SetUserType sets the "user_type" field.
func (uc *UserCreate) SetUserType(et enums.UserType) *UserCreate {
	uc.mutation.SetUserType(et)
	return uc
}

// SetNillableUserType sets the "user_type" field if the given value is not nil.
func (uc *UserCreate) SetNillableUserType(et *enums.UserType) *UserCreate {
	if et != nil {
		uc.SetUserType(*et)
	}
	return uc
}

// SetParentID sets the "parent_id" field.
func (uc *UserCreate) SetParentID(i int64) *UserCreate {
	uc.mutation.SetParentID(i)
	return uc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableParentID(i *int64) *UserCreate {
	if i != nil {
		uc.SetParentID(*i)
	}
	return uc
}

// SetAppletParentID sets the "applet_parent_id" field.
func (uc *UserCreate) SetAppletParentID(i int64) *UserCreate {
	uc.mutation.SetAppletParentID(i)
	return uc
}

// SetNillableAppletParentID sets the "applet_parent_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableAppletParentID(i *int64) *UserCreate {
	if i != nil {
		uc.SetAppletParentID(*i)
	}
	return uc
}

// SetPopVersion sets the "pop_version" field.
func (uc *UserCreate) SetPopVersion(s string) *UserCreate {
	uc.mutation.SetPopVersion(s)
	return uc
}

// SetNillablePopVersion sets the "pop_version" field if the given value is not nil.
func (uc *UserCreate) SetNillablePopVersion(s *string) *UserCreate {
	if s != nil {
		uc.SetPopVersion(*s)
	}
	return uc
}

// SetAreaCode sets the "area_code" field.
func (uc *UserCreate) SetAreaCode(s string) *UserCreate {
	uc.mutation.SetAreaCode(s)
	return uc
}

// SetNillableAreaCode sets the "area_code" field if the given value is not nil.
func (uc *UserCreate) SetNillableAreaCode(s *string) *UserCreate {
	if s != nil {
		uc.SetAreaCode(*s)
	}
	return uc
}

// SetEmail sets the "email" field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uc *UserCreate) SetNillableEmail(s *string) *UserCreate {
	if s != nil {
		uc.SetEmail(*s)
	}
	return uc
}

// SetCloudSpace sets the "cloud_space" field.
func (uc *UserCreate) SetCloudSpace(i int64) *UserCreate {
	uc.mutation.SetCloudSpace(i)
	return uc
}

// SetNillableCloudSpace sets the "cloud_space" field if the given value is not nil.
func (uc *UserCreate) SetNillableCloudSpace(i *int64) *UserCreate {
	if i != nil {
		uc.SetCloudSpace(*i)
	}
	return uc
}

// SetBaiduAccessToken sets the "baidu_access_token" field.
func (uc *UserCreate) SetBaiduAccessToken(s string) *UserCreate {
	uc.mutation.SetBaiduAccessToken(s)
	return uc
}

// SetNillableBaiduAccessToken sets the "baidu_access_token" field if the given value is not nil.
func (uc *UserCreate) SetNillableBaiduAccessToken(s *string) *UserCreate {
	if s != nil {
		uc.SetBaiduAccessToken(*s)
	}
	return uc
}

// SetBaiduRefreshToken sets the "baidu_refresh_token" field.
func (uc *UserCreate) SetBaiduRefreshToken(s string) *UserCreate {
	uc.mutation.SetBaiduRefreshToken(s)
	return uc
}

// SetNillableBaiduRefreshToken sets the "baidu_refresh_token" field if the given value is not nil.
func (uc *UserCreate) SetNillableBaiduRefreshToken(s *string) *UserCreate {
	if s != nil {
		uc.SetBaiduRefreshToken(*s)
	}
	return uc
}

// SetBoundAt sets the "bound_at" field.
func (uc *UserCreate) SetBoundAt(t time.Time) *UserCreate {
	uc.mutation.SetBoundAt(t)
	return uc
}

// SetNillableBoundAt sets the "bound_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableBoundAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetBoundAt(*t)
	}
	return uc
}

// SetUserStatus sets the "user_status" field.
func (uc *UserCreate) SetUserStatus(es enums.UserStatus) *UserCreate {
	uc.mutation.SetUserStatus(es)
	return uc
}

// SetNillableUserStatus sets the "user_status" field if the given value is not nil.
func (uc *UserCreate) SetNillableUserStatus(es *enums.UserStatus) *UserCreate {
	if es != nil {
		uc.SetUserStatus(*es)
	}
	return uc
}

// SetID sets the "id" field.
func (uc *UserCreate) SetID(i int64) *UserCreate {
	uc.mutation.SetID(i)
	return uc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (uc *UserCreate) SetNillableID(i *int64) *UserCreate {
	if i != nil {
		uc.SetID(*i)
	}
	return uc
}

// AddVxAccountIDs adds the "vx_accounts" edge to the VXAccount entity by IDs.
func (uc *UserCreate) AddVxAccountIDs(ids ...int64) *UserCreate {
	uc.mutation.AddVxAccountIDs(ids...)
	return uc
}

// AddVxAccounts adds the "vx_accounts" edges to the VXAccount entity.
func (uc *UserCreate) AddVxAccounts(v ...*VXAccount) *UserCreate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uc.AddVxAccountIDs(ids...)
}

// AddCollectIDs adds the "collects" edge to the Collect entity by IDs.
func (uc *UserCreate) AddCollectIDs(ids ...int64) *UserCreate {
	uc.mutation.AddCollectIDs(ids...)
	return uc
}

// AddCollects adds the "collects" edges to the Collect entity.
func (uc *UserCreate) AddCollects(c ...*Collect) *UserCreate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uc.AddCollectIDs(ids...)
}

// AddDeviceIDs adds the "devices" edge to the Device entity by IDs.
func (uc *UserCreate) AddDeviceIDs(ids ...int64) *UserCreate {
	uc.mutation.AddDeviceIDs(ids...)
	return uc
}

// AddDevices adds the "devices" edges to the Device entity.
func (uc *UserCreate) AddDevices(d ...*Device) *UserCreate {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uc.AddDeviceIDs(ids...)
}

// AddProfitSettingIDs adds the "profit_settings" edge to the ProfitSetting entity by IDs.
func (uc *UserCreate) AddProfitSettingIDs(ids ...int64) *UserCreate {
	uc.mutation.AddProfitSettingIDs(ids...)
	return uc
}

// AddProfitSettings adds the "profit_settings" edges to the ProfitSetting entity.
func (uc *UserCreate) AddProfitSettings(p ...*ProfitSetting) *UserCreate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uc.AddProfitSettingIDs(ids...)
}

// SetCostAccountID sets the "cost_account" edge to the CostAccount entity by ID.
func (uc *UserCreate) SetCostAccountID(id int64) *UserCreate {
	uc.mutation.SetCostAccountID(id)
	return uc
}

// SetNillableCostAccountID sets the "cost_account" edge to the CostAccount entity by ID if the given value is not nil.
func (uc *UserCreate) SetNillableCostAccountID(id *int64) *UserCreate {
	if id != nil {
		uc = uc.SetCostAccountID(*id)
	}
	return uc
}

// SetCostAccount sets the "cost_account" edge to the CostAccount entity.
func (uc *UserCreate) SetCostAccount(c *CostAccount) *UserCreate {
	return uc.SetCostAccountID(c.ID)
}

// SetProfitAccountID sets the "profit_account" edge to the ProfitAccount entity by ID.
func (uc *UserCreate) SetProfitAccountID(id int64) *UserCreate {
	uc.mutation.SetProfitAccountID(id)
	return uc
}

// SetNillableProfitAccountID sets the "profit_account" edge to the ProfitAccount entity by ID if the given value is not nil.
func (uc *UserCreate) SetNillableProfitAccountID(id *int64) *UserCreate {
	if id != nil {
		uc = uc.SetProfitAccountID(*id)
	}
	return uc
}

// SetProfitAccount sets the "profit_account" edge to the ProfitAccount entity.
func (uc *UserCreate) SetProfitAccount(p *ProfitAccount) *UserCreate {
	return uc.SetProfitAccountID(p.ID)
}

// AddCostBillIDs adds the "cost_bills" edge to the CostBill entity by IDs.
func (uc *UserCreate) AddCostBillIDs(ids ...int64) *UserCreate {
	uc.mutation.AddCostBillIDs(ids...)
	return uc
}

// AddCostBills adds the "cost_bills" edges to the CostBill entity.
func (uc *UserCreate) AddCostBills(c ...*CostBill) *UserCreate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uc.AddCostBillIDs(ids...)
}

// AddEarnBillIDs adds the "earn_bills" edge to the EarnBill entity by IDs.
func (uc *UserCreate) AddEarnBillIDs(ids ...int64) *UserCreate {
	uc.mutation.AddEarnBillIDs(ids...)
	return uc
}

// AddEarnBills adds the "earn_bills" edges to the EarnBill entity.
func (uc *UserCreate) AddEarnBills(e ...*EarnBill) *UserCreate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uc.AddEarnBillIDs(ids...)
}

// AddMissionConsumeOrderIDs adds the "mission_consume_orders" edge to the MissionConsumeOrder entity by IDs.
func (uc *UserCreate) AddMissionConsumeOrderIDs(ids ...int64) *UserCreate {
	uc.mutation.AddMissionConsumeOrderIDs(ids...)
	return uc
}

// AddMissionConsumeOrders adds the "mission_consume_orders" edges to the MissionConsumeOrder entity.
func (uc *UserCreate) AddMissionConsumeOrders(m ...*MissionConsumeOrder) *UserCreate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uc.AddMissionConsumeOrderIDs(ids...)
}

// AddMissionProduceOrderIDs adds the "mission_produce_orders" edge to the MissionProduceOrder entity by IDs.
func (uc *UserCreate) AddMissionProduceOrderIDs(ids ...int64) *UserCreate {
	uc.mutation.AddMissionProduceOrderIDs(ids...)
	return uc
}

// AddMissionProduceOrders adds the "mission_produce_orders" edges to the MissionProduceOrder entity.
func (uc *UserCreate) AddMissionProduceOrders(m ...*MissionProduceOrder) *UserCreate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uc.AddMissionProduceOrderIDs(ids...)
}

// AddRechargeOrderIDs adds the "recharge_orders" edge to the RechargeOrder entity by IDs.
func (uc *UserCreate) AddRechargeOrderIDs(ids ...int64) *UserCreate {
	uc.mutation.AddRechargeOrderIDs(ids...)
	return uc
}

// AddRechargeOrders adds the "recharge_orders" edges to the RechargeOrder entity.
func (uc *UserCreate) AddRechargeOrders(r ...*RechargeOrder) *UserCreate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uc.AddRechargeOrderIDs(ids...)
}

// AddVxSocialIDs adds the "vx_socials" edge to the VXSocial entity by IDs.
func (uc *UserCreate) AddVxSocialIDs(ids ...int64) *UserCreate {
	uc.mutation.AddVxSocialIDs(ids...)
	return uc
}

// AddVxSocials adds the "vx_socials" edges to the VXSocial entity.
func (uc *UserCreate) AddVxSocials(v ...*VXSocial) *UserCreate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uc.AddVxSocialIDs(ids...)
}

// AddMissionBatchIDs adds the "mission_batches" edge to the MissionBatch entity by IDs.
func (uc *UserCreate) AddMissionBatchIDs(ids ...int64) *UserCreate {
	uc.mutation.AddMissionBatchIDs(ids...)
	return uc
}

// AddMissionBatches adds the "mission_batches" edges to the MissionBatch entity.
func (uc *UserCreate) AddMissionBatches(m ...*MissionBatch) *UserCreate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uc.AddMissionBatchIDs(ids...)
}

// AddUserDeviceIDs adds the "user_devices" edge to the UserDevice entity by IDs.
func (uc *UserCreate) AddUserDeviceIDs(ids ...int64) *UserCreate {
	uc.mutation.AddUserDeviceIDs(ids...)
	return uc
}

// AddUserDevices adds the "user_devices" edges to the UserDevice entity.
func (uc *UserCreate) AddUserDevices(u ...*UserDevice) *UserCreate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddUserDeviceIDs(ids...)
}

// SetParent sets the "parent" edge to the User entity.
func (uc *UserCreate) SetParent(u *User) *UserCreate {
	return uc.SetParentID(u.ID)
}

// AddChildIDs adds the "children" edge to the User entity by IDs.
func (uc *UserCreate) AddChildIDs(ids ...int64) *UserCreate {
	uc.mutation.AddChildIDs(ids...)
	return uc
}

// AddChildren adds the "children" edges to the User entity.
func (uc *UserCreate) AddChildren(u ...*User) *UserCreate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddChildIDs(ids...)
}

// SetAppletParent sets the "applet_parent" edge to the User entity.
func (uc *UserCreate) SetAppletParent(u *User) *UserCreate {
	return uc.SetAppletParentID(u.ID)
}

// AddAppletChildIDs adds the "applet_children" edge to the User entity by IDs.
func (uc *UserCreate) AddAppletChildIDs(ids ...int64) *UserCreate {
	uc.mutation.AddAppletChildIDs(ids...)
	return uc
}

// AddAppletChildren adds the "applet_children" edges to the User entity.
func (uc *UserCreate) AddAppletChildren(u ...*User) *UserCreate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddAppletChildIDs(ids...)
}

// AddInviteIDs adds the "invites" edge to the Invite entity by IDs.
func (uc *UserCreate) AddInviteIDs(ids ...int64) *UserCreate {
	uc.mutation.AddInviteIDs(ids...)
	return uc
}

// AddInvites adds the "invites" edges to the Invite entity.
func (uc *UserCreate) AddInvites(i ...*Invite) *UserCreate {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uc.AddInviteIDs(ids...)
}

// AddCampaignOrderIDs adds the "campaign_orders" edge to the CampaignOrder entity by IDs.
func (uc *UserCreate) AddCampaignOrderIDs(ids ...int64) *UserCreate {
	uc.mutation.AddCampaignOrderIDs(ids...)
	return uc
}

// AddCampaignOrders adds the "campaign_orders" edges to the CampaignOrder entity.
func (uc *UserCreate) AddCampaignOrders(c ...*CampaignOrder) *UserCreate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uc.AddCampaignOrderIDs(ids...)
}

// AddWalletIDs adds the "wallets" edge to the Wallet entity by IDs.
func (uc *UserCreate) AddWalletIDs(ids ...int64) *UserCreate {
	uc.mutation.AddWalletIDs(ids...)
	return uc
}

// AddWallets adds the "wallets" edges to the Wallet entity.
func (uc *UserCreate) AddWallets(w ...*Wallet) *UserCreate {
	ids := make([]int64, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uc.AddWalletIDs(ids...)
}

// SetWithdrawAccountID sets the "withdraw_account" edge to the WithdrawAccount entity by ID.
func (uc *UserCreate) SetWithdrawAccountID(id int64) *UserCreate {
	uc.mutation.SetWithdrawAccountID(id)
	return uc
}

// SetNillableWithdrawAccountID sets the "withdraw_account" edge to the WithdrawAccount entity by ID if the given value is not nil.
func (uc *UserCreate) SetNillableWithdrawAccountID(id *int64) *UserCreate {
	if id != nil {
		uc = uc.SetWithdrawAccountID(*id)
	}
	return uc
}

// SetWithdrawAccount sets the "withdraw_account" edge to the WithdrawAccount entity.
func (uc *UserCreate) SetWithdrawAccount(w *WithdrawAccount) *UserCreate {
	return uc.SetWithdrawAccountID(w.ID)
}

// AddIncomeBillIDs adds the "income_bills" edge to the Bill entity by IDs.
func (uc *UserCreate) AddIncomeBillIDs(ids ...int64) *UserCreate {
	uc.mutation.AddIncomeBillIDs(ids...)
	return uc
}

// AddIncomeBills adds the "income_bills" edges to the Bill entity.
func (uc *UserCreate) AddIncomeBills(b ...*Bill) *UserCreate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uc.AddIncomeBillIDs(ids...)
}

// AddOutcomeBillIDs adds the "outcome_bills" edge to the Bill entity by IDs.
func (uc *UserCreate) AddOutcomeBillIDs(ids ...int64) *UserCreate {
	uc.mutation.AddOutcomeBillIDs(ids...)
	return uc
}

// AddOutcomeBills adds the "outcome_bills" edges to the Bill entity.
func (uc *UserCreate) AddOutcomeBills(b ...*Bill) *UserCreate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uc.AddOutcomeBillIDs(ids...)
}

// AddMissionProductionIDs adds the "mission_productions" edge to the MissionProduction entity by IDs.
func (uc *UserCreate) AddMissionProductionIDs(ids ...int64) *UserCreate {
	uc.mutation.AddMissionProductionIDs(ids...)
	return uc
}

// AddMissionProductions adds the "mission_productions" edges to the MissionProduction entity.
func (uc *UserCreate) AddMissionProductions(m ...*MissionProduction) *UserCreate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uc.AddMissionProductionIDs(ids...)
}

// AddMissionIDs adds the "missions" edge to the Mission entity by IDs.
func (uc *UserCreate) AddMissionIDs(ids ...int64) *UserCreate {
	uc.mutation.AddMissionIDs(ids...)
	return uc
}

// AddMissions adds the "missions" edges to the Mission entity.
func (uc *UserCreate) AddMissions(m ...*Mission) *UserCreate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uc.AddMissionIDs(ids...)
}

// AddIncomeTransferOrderIDs adds the "income_transfer_orders" edge to the TransferOrder entity by IDs.
func (uc *UserCreate) AddIncomeTransferOrderIDs(ids ...int64) *UserCreate {
	uc.mutation.AddIncomeTransferOrderIDs(ids...)
	return uc
}

// AddIncomeTransferOrders adds the "income_transfer_orders" edges to the TransferOrder entity.
func (uc *UserCreate) AddIncomeTransferOrders(t ...*TransferOrder) *UserCreate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uc.AddIncomeTransferOrderIDs(ids...)
}

// AddOutcomeTransferOrderIDs adds the "outcome_transfer_orders" edge to the TransferOrder entity by IDs.
func (uc *UserCreate) AddOutcomeTransferOrderIDs(ids ...int64) *UserCreate {
	uc.mutation.AddOutcomeTransferOrderIDs(ids...)
	return uc
}

// AddOutcomeTransferOrders adds the "outcome_transfer_orders" edges to the TransferOrder entity.
func (uc *UserCreate) AddOutcomeTransferOrders(t ...*TransferOrder) *UserCreate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uc.AddOutcomeTransferOrderIDs(ids...)
}

// AddConsumeMissionOrderIDs adds the "consume_mission_orders" edge to the MissionOrder entity by IDs.
func (uc *UserCreate) AddConsumeMissionOrderIDs(ids ...int64) *UserCreate {
	uc.mutation.AddConsumeMissionOrderIDs(ids...)
	return uc
}

// AddConsumeMissionOrders adds the "consume_mission_orders" edges to the MissionOrder entity.
func (uc *UserCreate) AddConsumeMissionOrders(m ...*MissionOrder) *UserCreate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uc.AddConsumeMissionOrderIDs(ids...)
}

// AddProduceMissionOrderIDs adds the "produce_mission_orders" edge to the MissionOrder entity by IDs.
func (uc *UserCreate) AddProduceMissionOrderIDs(ids ...int64) *UserCreate {
	uc.mutation.AddProduceMissionOrderIDs(ids...)
	return uc
}

// AddProduceMissionOrders adds the "produce_mission_orders" edges to the MissionOrder entity.
func (uc *UserCreate) AddProduceMissionOrders(m ...*MissionOrder) *UserCreate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uc.AddProduceMissionOrderIDs(ids...)
}

// AddLoginRecordIDs adds the "login_records" edge to the LoginRecord entity by IDs.
func (uc *UserCreate) AddLoginRecordIDs(ids ...int64) *UserCreate {
	uc.mutation.AddLoginRecordIDs(ids...)
	return uc
}

// AddLoginRecords adds the "login_records" edges to the LoginRecord entity.
func (uc *UserCreate) AddLoginRecords(l ...*LoginRecord) *UserCreate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uc.AddLoginRecordIDs(ids...)
}

// AddRenewalAgreementIDs adds the "renewal_agreements" edge to the RenewalAgreement entity by IDs.
func (uc *UserCreate) AddRenewalAgreementIDs(ids ...int64) *UserCreate {
	uc.mutation.AddRenewalAgreementIDs(ids...)
	return uc
}

// AddRenewalAgreements adds the "renewal_agreements" edges to the RenewalAgreement entity.
func (uc *UserCreate) AddRenewalAgreements(r ...*RenewalAgreement) *UserCreate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uc.AddRenewalAgreementIDs(ids...)
}

// AddArtworkIDs adds the "artworks" edge to the Artwork entity by IDs.
func (uc *UserCreate) AddArtworkIDs(ids ...int64) *UserCreate {
	uc.mutation.AddArtworkIDs(ids...)
	return uc
}

// AddArtworks adds the "artworks" edges to the Artwork entity.
func (uc *UserCreate) AddArtworks(a ...*Artwork) *UserCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uc.AddArtworkIDs(ids...)
}

// AddArtworkLikeIDs adds the "artwork_likes" edge to the ArtworkLike entity by IDs.
func (uc *UserCreate) AddArtworkLikeIDs(ids ...int64) *UserCreate {
	uc.mutation.AddArtworkLikeIDs(ids...)
	return uc
}

// AddArtworkLikes adds the "artwork_likes" edges to the ArtworkLike entity.
func (uc *UserCreate) AddArtworkLikes(a ...*ArtworkLike) *UserCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uc.AddArtworkLikeIDs(ids...)
}

// AddCdkInfoIDs adds the "cdk_infos" edge to the CDKInfo entity by IDs.
func (uc *UserCreate) AddCdkInfoIDs(ids ...int64) *UserCreate {
	uc.mutation.AddCdkInfoIDs(ids...)
	return uc
}

// AddCdkInfos adds the "cdk_infos" edges to the CDKInfo entity.
func (uc *UserCreate) AddCdkInfos(c ...*CDKInfo) *UserCreate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uc.AddCdkInfoIDs(ids...)
}

// AddUseCdkInfoIDs adds the "use_cdk_infos" edge to the CDKInfo entity by IDs.
func (uc *UserCreate) AddUseCdkInfoIDs(ids ...int64) *UserCreate {
	uc.mutation.AddUseCdkInfoIDs(ids...)
	return uc
}

// AddUseCdkInfos adds the "use_cdk_infos" edges to the CDKInfo entity.
func (uc *UserCreate) AddUseCdkInfos(c ...*CDKInfo) *UserCreate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uc.AddUseCdkInfoIDs(ids...)
}

// AddLottoRecordIDs adds the "lotto_records" edge to the LottoRecord entity by IDs.
func (uc *UserCreate) AddLottoRecordIDs(ids ...int64) *UserCreate {
	uc.mutation.AddLottoRecordIDs(ids...)
	return uc
}

// AddLottoRecords adds the "lotto_records" edges to the LottoRecord entity.
func (uc *UserCreate) AddLottoRecords(l ...*LottoRecord) *UserCreate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uc.AddLottoRecordIDs(ids...)
}

// AddLottoUserCountIDs adds the "lotto_user_counts" edge to the LottoUserCount entity by IDs.
func (uc *UserCreate) AddLottoUserCountIDs(ids ...int64) *UserCreate {
	uc.mutation.AddLottoUserCountIDs(ids...)
	return uc
}

// AddLottoUserCounts adds the "lotto_user_counts" edges to the LottoUserCount entity.
func (uc *UserCreate) AddLottoUserCounts(l ...*LottoUserCount) *UserCreate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uc.AddLottoUserCountIDs(ids...)
}

// AddLottoGetCountRecordIDs adds the "lotto_get_count_records" edge to the LottoGetCountRecord entity by IDs.
func (uc *UserCreate) AddLottoGetCountRecordIDs(ids ...int64) *UserCreate {
	uc.mutation.AddLottoGetCountRecordIDs(ids...)
	return uc
}

// AddLottoGetCountRecords adds the "lotto_get_count_records" edges to the LottoGetCountRecord entity.
func (uc *UserCreate) AddLottoGetCountRecords(l ...*LottoGetCountRecord) *UserCreate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uc.AddLottoGetCountRecordIDs(ids...)
}

// AddCloudFileIDs adds the "cloud_files" edge to the CloudFile entity by IDs.
func (uc *UserCreate) AddCloudFileIDs(ids ...int64) *UserCreate {
	uc.mutation.AddCloudFileIDs(ids...)
	return uc
}

// AddCloudFiles adds the "cloud_files" edges to the CloudFile entity.
func (uc *UserCreate) AddCloudFiles(c ...*CloudFile) *UserCreate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uc.AddCloudFileIDs(ids...)
}

// AddWithdrawRecordIDs adds the "withdraw_records" edge to the WithdrawRecord entity by IDs.
func (uc *UserCreate) AddWithdrawRecordIDs(ids ...int64) *UserCreate {
	uc.mutation.AddWithdrawRecordIDs(ids...)
	return uc
}

// AddWithdrawRecords adds the "withdraw_records" edges to the WithdrawRecord entity.
func (uc *UserCreate) AddWithdrawRecords(w ...*WithdrawRecord) *UserCreate {
	ids := make([]int64, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uc.AddWithdrawRecordIDs(ids...)
}

// AddOperateWithdrawRecordIDs adds the "operate_withdraw_records" edge to the WithdrawRecord entity by IDs.
func (uc *UserCreate) AddOperateWithdrawRecordIDs(ids ...int64) *UserCreate {
	uc.mutation.AddOperateWithdrawRecordIDs(ids...)
	return uc
}

// AddOperateWithdrawRecords adds the "operate_withdraw_records" edges to the WithdrawRecord entity.
func (uc *UserCreate) AddOperateWithdrawRecords(w ...*WithdrawRecord) *UserCreate {
	ids := make([]int64, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uc.AddOperateWithdrawRecordIDs(ids...)
}

// AddTroubleDeductIDs adds the "trouble_deducts" edge to the TroubleDeduct entity by IDs.
func (uc *UserCreate) AddTroubleDeductIDs(ids ...int64) *UserCreate {
	uc.mutation.AddTroubleDeductIDs(ids...)
	return uc
}

// AddTroubleDeducts adds the "trouble_deducts" edges to the TroubleDeduct entity.
func (uc *UserCreate) AddTroubleDeducts(t ...*TroubleDeduct) *UserCreate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uc.AddTroubleDeductIDs(ids...)
}

// AddIncomeManageIDs adds the "income_manages" edge to the IncomeManage entity by IDs.
func (uc *UserCreate) AddIncomeManageIDs(ids ...int64) *UserCreate {
	uc.mutation.AddIncomeManageIDs(ids...)
	return uc
}

// AddIncomeManages adds the "income_manages" edges to the IncomeManage entity.
func (uc *UserCreate) AddIncomeManages(i ...*IncomeManage) *UserCreate {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uc.AddIncomeManageIDs(ids...)
}

// AddApproveIncomeManageIDs adds the "approve_income_manages" edge to the IncomeManage entity by IDs.
func (uc *UserCreate) AddApproveIncomeManageIDs(ids ...int64) *UserCreate {
	uc.mutation.AddApproveIncomeManageIDs(ids...)
	return uc
}

// AddApproveIncomeManages adds the "approve_income_manages" edges to the IncomeManage entity.
func (uc *UserCreate) AddApproveIncomeManages(i ...*IncomeManage) *UserCreate {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uc.AddApproveIncomeManageIDs(ids...)
}

// AddSurveyResponseIDs adds the "survey_responses" edge to the SurveyResponse entity by IDs.
func (uc *UserCreate) AddSurveyResponseIDs(ids ...int64) *UserCreate {
	uc.mutation.AddSurveyResponseIDs(ids...)
	return uc
}

// AddSurveyResponses adds the "survey_responses" edges to the SurveyResponse entity.
func (uc *UserCreate) AddSurveyResponses(s ...*SurveyResponse) *UserCreate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uc.AddSurveyResponseIDs(ids...)
}

// AddApproveSurveyResponseIDs adds the "approve_survey_responses" edge to the SurveyResponse entity by IDs.
func (uc *UserCreate) AddApproveSurveyResponseIDs(ids ...int64) *UserCreate {
	uc.mutation.AddApproveSurveyResponseIDs(ids...)
	return uc
}

// AddApproveSurveyResponses adds the "approve_survey_responses" edges to the SurveyResponse entity.
func (uc *UserCreate) AddApproveSurveyResponses(s ...*SurveyResponse) *UserCreate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uc.AddApproveSurveyResponseIDs(ids...)
}

// AddMissionFailedFeedbackIDs adds the "mission_failed_feedbacks" edge to the MissionFailedFeedback entity by IDs.
func (uc *UserCreate) AddMissionFailedFeedbackIDs(ids ...int64) *UserCreate {
	uc.mutation.AddMissionFailedFeedbackIDs(ids...)
	return uc
}

// AddMissionFailedFeedbacks adds the "mission_failed_feedbacks" edges to the MissionFailedFeedback entity.
func (uc *UserCreate) AddMissionFailedFeedbacks(m ...*MissionFailedFeedback) *UserCreate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uc.AddMissionFailedFeedbackIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	uc.defaults()
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.CreatedBy(); !ok {
		v := user.DefaultCreatedBy
		uc.mutation.SetCreatedBy(v)
	}
	if _, ok := uc.mutation.UpdatedBy(); !ok {
		v := user.DefaultUpdatedBy
		uc.mutation.SetUpdatedBy(v)
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		v := user.DefaultCreatedAt()
		uc.mutation.SetCreatedAt(v)
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		v := user.DefaultUpdatedAt()
		uc.mutation.SetUpdatedAt(v)
	}
	if _, ok := uc.mutation.DeletedAt(); !ok {
		v := user.DefaultDeletedAt
		uc.mutation.SetDeletedAt(v)
	}
	if _, ok := uc.mutation.Name(); !ok {
		v := user.DefaultName
		uc.mutation.SetName(v)
	}
	if _, ok := uc.mutation.NickName(); !ok {
		v := user.DefaultNickName
		uc.mutation.SetNickName(v)
	}
	if _, ok := uc.mutation.JpgURL(); !ok {
		v := user.DefaultJpgURL
		uc.mutation.SetJpgURL(v)
	}
	if _, ok := uc.mutation.Key(); !ok {
		v := user.DefaultKey
		uc.mutation.SetKey(v)
	}
	if _, ok := uc.mutation.Secret(); !ok {
		v := user.DefaultSecret
		uc.mutation.SetSecret(v)
	}
	if _, ok := uc.mutation.Phone(); !ok {
		v := user.DefaultPhone
		uc.mutation.SetPhone(v)
	}
	if _, ok := uc.mutation.Password(); !ok {
		v := user.DefaultPassword
		uc.mutation.SetPassword(v)
	}
	if _, ok := uc.mutation.IsFrozen(); !ok {
		v := user.DefaultIsFrozen
		uc.mutation.SetIsFrozen(v)
	}
	if _, ok := uc.mutation.IsRecharge(); !ok {
		v := user.DefaultIsRecharge
		uc.mutation.SetIsRecharge(v)
	}
	if _, ok := uc.mutation.UserType(); !ok {
		v := user.DefaultUserType
		uc.mutation.SetUserType(v)
	}
	if _, ok := uc.mutation.ParentID(); !ok {
		v := user.DefaultParentID
		uc.mutation.SetParentID(v)
	}
	if _, ok := uc.mutation.AppletParentID(); !ok {
		v := user.DefaultAppletParentID
		uc.mutation.SetAppletParentID(v)
	}
	if _, ok := uc.mutation.PopVersion(); !ok {
		v := user.DefaultPopVersion
		uc.mutation.SetPopVersion(v)
	}
	if _, ok := uc.mutation.AreaCode(); !ok {
		v := user.DefaultAreaCode
		uc.mutation.SetAreaCode(v)
	}
	if _, ok := uc.mutation.Email(); !ok {
		v := user.DefaultEmail
		uc.mutation.SetEmail(v)
	}
	if _, ok := uc.mutation.CloudSpace(); !ok {
		v := user.DefaultCloudSpace
		uc.mutation.SetCloudSpace(v)
	}
	if _, ok := uc.mutation.BaiduAccessToken(); !ok {
		v := user.DefaultBaiduAccessToken
		uc.mutation.SetBaiduAccessToken(v)
	}
	if _, ok := uc.mutation.BaiduRefreshToken(); !ok {
		v := user.DefaultBaiduRefreshToken
		uc.mutation.SetBaiduRefreshToken(v)
	}
	if _, ok := uc.mutation.BoundAt(); !ok {
		v := user.DefaultBoundAt
		uc.mutation.SetBoundAt(v)
	}
	if _, ok := uc.mutation.UserStatus(); !ok {
		v := user.DefaultUserStatus
		uc.mutation.SetUserStatus(v)
	}
	if _, ok := uc.mutation.ID(); !ok {
		v := user.DefaultID()
		uc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "User.created_by"`)}
	}
	if _, ok := uc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "User.updated_by"`)}
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "User.created_at"`)}
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "User.updated_at"`)}
	}
	if _, ok := uc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "User.deleted_at"`)}
	}
	if _, ok := uc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`cep_ent: missing required field "User.name"`)}
	}
	if _, ok := uc.mutation.NickName(); !ok {
		return &ValidationError{Name: "nick_name", err: errors.New(`cep_ent: missing required field "User.nick_name"`)}
	}
	if _, ok := uc.mutation.JpgURL(); !ok {
		return &ValidationError{Name: "jpg_url", err: errors.New(`cep_ent: missing required field "User.jpg_url"`)}
	}
	if _, ok := uc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`cep_ent: missing required field "User.key"`)}
	}
	if _, ok := uc.mutation.Secret(); !ok {
		return &ValidationError{Name: "secret", err: errors.New(`cep_ent: missing required field "User.secret"`)}
	}
	if _, ok := uc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`cep_ent: missing required field "User.phone"`)}
	}
	if _, ok := uc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`cep_ent: missing required field "User.password"`)}
	}
	if _, ok := uc.mutation.IsFrozen(); !ok {
		return &ValidationError{Name: "is_frozen", err: errors.New(`cep_ent: missing required field "User.is_frozen"`)}
	}
	if _, ok := uc.mutation.IsRecharge(); !ok {
		return &ValidationError{Name: "is_recharge", err: errors.New(`cep_ent: missing required field "User.is_recharge"`)}
	}
	if _, ok := uc.mutation.UserType(); !ok {
		return &ValidationError{Name: "user_type", err: errors.New(`cep_ent: missing required field "User.user_type"`)}
	}
	if v, ok := uc.mutation.UserType(); ok {
		if err := user.UserTypeValidator(v); err != nil {
			return &ValidationError{Name: "user_type", err: fmt.Errorf(`cep_ent: validator failed for field "User.user_type": %w`, err)}
		}
	}
	if _, ok := uc.mutation.ParentID(); !ok {
		return &ValidationError{Name: "parent_id", err: errors.New(`cep_ent: missing required field "User.parent_id"`)}
	}
	if _, ok := uc.mutation.AppletParentID(); !ok {
		return &ValidationError{Name: "applet_parent_id", err: errors.New(`cep_ent: missing required field "User.applet_parent_id"`)}
	}
	if _, ok := uc.mutation.PopVersion(); !ok {
		return &ValidationError{Name: "pop_version", err: errors.New(`cep_ent: missing required field "User.pop_version"`)}
	}
	if _, ok := uc.mutation.AreaCode(); !ok {
		return &ValidationError{Name: "area_code", err: errors.New(`cep_ent: missing required field "User.area_code"`)}
	}
	if _, ok := uc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`cep_ent: missing required field "User.email"`)}
	}
	if _, ok := uc.mutation.CloudSpace(); !ok {
		return &ValidationError{Name: "cloud_space", err: errors.New(`cep_ent: missing required field "User.cloud_space"`)}
	}
	if _, ok := uc.mutation.BaiduAccessToken(); !ok {
		return &ValidationError{Name: "baidu_access_token", err: errors.New(`cep_ent: missing required field "User.baidu_access_token"`)}
	}
	if _, ok := uc.mutation.BaiduRefreshToken(); !ok {
		return &ValidationError{Name: "baidu_refresh_token", err: errors.New(`cep_ent: missing required field "User.baidu_refresh_token"`)}
	}
	if _, ok := uc.mutation.UserStatus(); !ok {
		return &ValidationError{Name: "user_status", err: errors.New(`cep_ent: missing required field "User.user_status"`)}
	}
	if v, ok := uc.mutation.UserStatus(); ok {
		if err := user.UserStatusValidator(v); err != nil {
			return &ValidationError{Name: "user_status", err: fmt.Errorf(`cep_ent: validator failed for field "User.user_status": %w`, err)}
		}
	}
	if _, ok := uc.mutation.ParentID(); !ok {
		return &ValidationError{Name: "parent", err: errors.New(`cep_ent: missing required edge "User.parent"`)}
	}
	if _, ok := uc.mutation.AppletParentID(); !ok {
		return &ValidationError{Name: "applet_parent", err: errors.New(`cep_ent: missing required edge "User.applet_parent"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = uc.conflict
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uc.mutation.CreatedBy(); ok {
		_spec.SetField(user.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := uc.mutation.UpdatedBy(); ok {
		_spec.SetField(user.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := uc.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := uc.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := uc.mutation.NickName(); ok {
		_spec.SetField(user.FieldNickName, field.TypeString, value)
		_node.NickName = value
	}
	if value, ok := uc.mutation.JpgURL(); ok {
		_spec.SetField(user.FieldJpgURL, field.TypeString, value)
		_node.JpgURL = value
	}
	if value, ok := uc.mutation.Key(); ok {
		_spec.SetField(user.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := uc.mutation.Secret(); ok {
		_spec.SetField(user.FieldSecret, field.TypeString, value)
		_node.Secret = value
	}
	if value, ok := uc.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := uc.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := uc.mutation.IsFrozen(); ok {
		_spec.SetField(user.FieldIsFrozen, field.TypeBool, value)
		_node.IsFrozen = value
	}
	if value, ok := uc.mutation.IsRecharge(); ok {
		_spec.SetField(user.FieldIsRecharge, field.TypeBool, value)
		_node.IsRecharge = value
	}
	if value, ok := uc.mutation.UserType(); ok {
		_spec.SetField(user.FieldUserType, field.TypeEnum, value)
		_node.UserType = value
	}
	if value, ok := uc.mutation.PopVersion(); ok {
		_spec.SetField(user.FieldPopVersion, field.TypeString, value)
		_node.PopVersion = value
	}
	if value, ok := uc.mutation.AreaCode(); ok {
		_spec.SetField(user.FieldAreaCode, field.TypeString, value)
		_node.AreaCode = value
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := uc.mutation.CloudSpace(); ok {
		_spec.SetField(user.FieldCloudSpace, field.TypeInt64, value)
		_node.CloudSpace = value
	}
	if value, ok := uc.mutation.BaiduAccessToken(); ok {
		_spec.SetField(user.FieldBaiduAccessToken, field.TypeString, value)
		_node.BaiduAccessToken = value
	}
	if value, ok := uc.mutation.BaiduRefreshToken(); ok {
		_spec.SetField(user.FieldBaiduRefreshToken, field.TypeString, value)
		_node.BaiduRefreshToken = value
	}
	if value, ok := uc.mutation.BoundAt(); ok {
		_spec.SetField(user.FieldBoundAt, field.TypeTime, value)
		_node.BoundAt = &value
	}
	if value, ok := uc.mutation.UserStatus(); ok {
		_spec.SetField(user.FieldUserStatus, field.TypeEnum, value)
		_node.UserStatus = value
	}
	if nodes := uc.mutation.VxAccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VxAccountsTable,
			Columns: []string{user.VxAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vxaccount.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.CollectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CollectsTable,
			Columns: []string{user.CollectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collect.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.DevicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DevicesTable,
			Columns: []string{user.DevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ProfitSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProfitSettingsTable,
			Columns: []string{user.ProfitSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profitsetting.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.CostAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.CostAccountTable,
			Columns: []string{user.CostAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costaccount.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ProfitAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.ProfitAccountTable,
			Columns: []string{user.ProfitAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profitaccount.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.CostBillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CostBillsTable,
			Columns: []string{user.CostBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costbill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.EarnBillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EarnBillsTable,
			Columns: []string{user.EarnBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earnbill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.MissionConsumeOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MissionConsumeOrdersTable,
			Columns: []string{user.MissionConsumeOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.MissionProduceOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MissionProduceOrdersTable,
			Columns: []string{user.MissionProduceOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.RechargeOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RechargeOrdersTable,
			Columns: []string{user.RechargeOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rechargeorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.VxSocialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VxSocialsTable,
			Columns: []string{user.VxSocialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vxsocial.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.MissionBatchesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MissionBatchesTable,
			Columns: []string{user.MissionBatchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionbatch.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UserDevicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserDevicesTable,
			Columns: []string{user.UserDevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdevice.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.ParentTable,
			Columns: []string{user.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ChildrenTable,
			Columns: []string{user.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.AppletParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.AppletParentTable,
			Columns: []string{user.AppletParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AppletParentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.AppletChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AppletChildrenTable,
			Columns: []string{user.AppletChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.InvitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InvitesTable,
			Columns: []string{user.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.CampaignOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CampaignOrdersTable,
			Columns: []string{user.CampaignOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaignorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.WalletsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WalletsTable,
			Columns: []string{user.WalletsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.WithdrawAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.WithdrawAccountTable,
			Columns: []string{user.WithdrawAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(withdrawaccount.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.IncomeBillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IncomeBillsTable,
			Columns: []string{user.IncomeBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.OutcomeBillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OutcomeBillsTable,
			Columns: []string{user.OutcomeBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.MissionProductionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MissionProductionsTable,
			Columns: []string{user.MissionProductionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduction.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.MissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MissionsTable,
			Columns: []string{user.MissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.IncomeTransferOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IncomeTransferOrdersTable,
			Columns: []string{user.IncomeTransferOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transferorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.OutcomeTransferOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OutcomeTransferOrdersTable,
			Columns: []string{user.OutcomeTransferOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transferorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ConsumeMissionOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ConsumeMissionOrdersTable,
			Columns: []string{user.ConsumeMissionOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ProduceMissionOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProduceMissionOrdersTable,
			Columns: []string{user.ProduceMissionOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.LoginRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LoginRecordsTable,
			Columns: []string{user.LoginRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(loginrecord.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.RenewalAgreementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RenewalAgreementsTable,
			Columns: []string{user.RenewalAgreementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(renewalagreement.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ArtworksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ArtworksTable,
			Columns: []string{user.ArtworksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artwork.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ArtworkLikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ArtworkLikesTable,
			Columns: []string{user.ArtworkLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artworklike.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.CdkInfosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CdkInfosTable,
			Columns: []string{user.CdkInfosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cdkinfo.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UseCdkInfosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UseCdkInfosTable,
			Columns: []string{user.UseCdkInfosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cdkinfo.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.LottoRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LottoRecordsTable,
			Columns: []string{user.LottoRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottorecord.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.LottoUserCountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LottoUserCountsTable,
			Columns: []string{user.LottoUserCountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottousercount.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.LottoGetCountRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LottoGetCountRecordsTable,
			Columns: []string{user.LottoGetCountRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottogetcountrecord.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.CloudFilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CloudFilesTable,
			Columns: []string{user.CloudFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudfile.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.WithdrawRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WithdrawRecordsTable,
			Columns: []string{user.WithdrawRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(withdrawrecord.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.OperateWithdrawRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OperateWithdrawRecordsTable,
			Columns: []string{user.OperateWithdrawRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(withdrawrecord.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.TroubleDeductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TroubleDeductsTable,
			Columns: []string{user.TroubleDeductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(troublededuct.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.IncomeManagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IncomeManagesTable,
			Columns: []string{user.IncomeManagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incomemanage.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ApproveIncomeManagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApproveIncomeManagesTable,
			Columns: []string{user.ApproveIncomeManagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incomemanage.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.SurveyResponsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SurveyResponsesTable,
			Columns: []string{user.SurveyResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyresponse.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ApproveSurveyResponsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApproveSurveyResponsesTable,
			Columns: []string{user.ApproveSurveyResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyresponse.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.MissionFailedFeedbacksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MissionFailedFeedbacksTable,
			Columns: []string{user.MissionFailedFeedbacksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionfailedfeedback.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (uc *UserCreate) OnConflict(opts ...sql.ConflictOption) *UserUpsertOne {
	uc.conflict = opts
	return &UserUpsertOne{
		create: uc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uc *UserCreate) OnConflictColumns(columns ...string) *UserUpsertOne {
	uc.conflict = append(uc.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertOne{
		create: uc,
	}
}

type (
	// UserUpsertOne is the builder for "upsert"-ing
	//  one User node.
	UserUpsertOne struct {
		create *UserCreate
	}

	// UserUpsert is the "OnConflict" setter.
	UserUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *UserUpsert) SetCreatedBy(v int64) *UserUpsert {
	u.Set(user.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *UserUpsert) UpdateCreatedBy() *UserUpsert {
	u.SetExcluded(user.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *UserUpsert) AddCreatedBy(v int64) *UserUpsert {
	u.Add(user.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *UserUpsert) SetUpdatedBy(v int64) *UserUpsert {
	u.Set(user.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *UserUpsert) UpdateUpdatedBy() *UserUpsert {
	u.SetExcluded(user.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *UserUpsert) AddUpdatedBy(v int64) *UserUpsert {
	u.Add(user.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsert) SetUpdatedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateUpdatedAt() *UserUpsert {
	u.SetExcluded(user.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserUpsert) SetDeletedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateDeletedAt() *UserUpsert {
	u.SetExcluded(user.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *UserUpsert) SetName(v string) *UserUpsert {
	u.Set(user.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsert) UpdateName() *UserUpsert {
	u.SetExcluded(user.FieldName)
	return u
}

// SetNickName sets the "nick_name" field.
func (u *UserUpsert) SetNickName(v string) *UserUpsert {
	u.Set(user.FieldNickName, v)
	return u
}

// UpdateNickName sets the "nick_name" field to the value that was provided on create.
func (u *UserUpsert) UpdateNickName() *UserUpsert {
	u.SetExcluded(user.FieldNickName)
	return u
}

// SetJpgURL sets the "jpg_url" field.
func (u *UserUpsert) SetJpgURL(v string) *UserUpsert {
	u.Set(user.FieldJpgURL, v)
	return u
}

// UpdateJpgURL sets the "jpg_url" field to the value that was provided on create.
func (u *UserUpsert) UpdateJpgURL() *UserUpsert {
	u.SetExcluded(user.FieldJpgURL)
	return u
}

// SetKey sets the "key" field.
func (u *UserUpsert) SetKey(v string) *UserUpsert {
	u.Set(user.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *UserUpsert) UpdateKey() *UserUpsert {
	u.SetExcluded(user.FieldKey)
	return u
}

// SetSecret sets the "secret" field.
func (u *UserUpsert) SetSecret(v string) *UserUpsert {
	u.Set(user.FieldSecret, v)
	return u
}

// UpdateSecret sets the "secret" field to the value that was provided on create.
func (u *UserUpsert) UpdateSecret() *UserUpsert {
	u.SetExcluded(user.FieldSecret)
	return u
}

// SetPhone sets the "phone" field.
func (u *UserUpsert) SetPhone(v string) *UserUpsert {
	u.Set(user.FieldPhone, v)
	return u
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *UserUpsert) UpdatePhone() *UserUpsert {
	u.SetExcluded(user.FieldPhone)
	return u
}

// SetPassword sets the "password" field.
func (u *UserUpsert) SetPassword(v string) *UserUpsert {
	u.Set(user.FieldPassword, v)
	return u
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UserUpsert) UpdatePassword() *UserUpsert {
	u.SetExcluded(user.FieldPassword)
	return u
}

// SetIsFrozen sets the "is_frozen" field.
func (u *UserUpsert) SetIsFrozen(v bool) *UserUpsert {
	u.Set(user.FieldIsFrozen, v)
	return u
}

// UpdateIsFrozen sets the "is_frozen" field to the value that was provided on create.
func (u *UserUpsert) UpdateIsFrozen() *UserUpsert {
	u.SetExcluded(user.FieldIsFrozen)
	return u
}

// SetIsRecharge sets the "is_recharge" field.
func (u *UserUpsert) SetIsRecharge(v bool) *UserUpsert {
	u.Set(user.FieldIsRecharge, v)
	return u
}

// UpdateIsRecharge sets the "is_recharge" field to the value that was provided on create.
func (u *UserUpsert) UpdateIsRecharge() *UserUpsert {
	u.SetExcluded(user.FieldIsRecharge)
	return u
}

// SetUserType sets the "user_type" field.
func (u *UserUpsert) SetUserType(v enums.UserType) *UserUpsert {
	u.Set(user.FieldUserType, v)
	return u
}

// UpdateUserType sets the "user_type" field to the value that was provided on create.
func (u *UserUpsert) UpdateUserType() *UserUpsert {
	u.SetExcluded(user.FieldUserType)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *UserUpsert) SetParentID(v int64) *UserUpsert {
	u.Set(user.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateParentID() *UserUpsert {
	u.SetExcluded(user.FieldParentID)
	return u
}

// SetAppletParentID sets the "applet_parent_id" field.
func (u *UserUpsert) SetAppletParentID(v int64) *UserUpsert {
	u.Set(user.FieldAppletParentID, v)
	return u
}

// UpdateAppletParentID sets the "applet_parent_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateAppletParentID() *UserUpsert {
	u.SetExcluded(user.FieldAppletParentID)
	return u
}

// SetPopVersion sets the "pop_version" field.
func (u *UserUpsert) SetPopVersion(v string) *UserUpsert {
	u.Set(user.FieldPopVersion, v)
	return u
}

// UpdatePopVersion sets the "pop_version" field to the value that was provided on create.
func (u *UserUpsert) UpdatePopVersion() *UserUpsert {
	u.SetExcluded(user.FieldPopVersion)
	return u
}

// SetAreaCode sets the "area_code" field.
func (u *UserUpsert) SetAreaCode(v string) *UserUpsert {
	u.Set(user.FieldAreaCode, v)
	return u
}

// UpdateAreaCode sets the "area_code" field to the value that was provided on create.
func (u *UserUpsert) UpdateAreaCode() *UserUpsert {
	u.SetExcluded(user.FieldAreaCode)
	return u
}

// SetEmail sets the "email" field.
func (u *UserUpsert) SetEmail(v string) *UserUpsert {
	u.Set(user.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsert) UpdateEmail() *UserUpsert {
	u.SetExcluded(user.FieldEmail)
	return u
}

// SetCloudSpace sets the "cloud_space" field.
func (u *UserUpsert) SetCloudSpace(v int64) *UserUpsert {
	u.Set(user.FieldCloudSpace, v)
	return u
}

// UpdateCloudSpace sets the "cloud_space" field to the value that was provided on create.
func (u *UserUpsert) UpdateCloudSpace() *UserUpsert {
	u.SetExcluded(user.FieldCloudSpace)
	return u
}

// AddCloudSpace adds v to the "cloud_space" field.
func (u *UserUpsert) AddCloudSpace(v int64) *UserUpsert {
	u.Add(user.FieldCloudSpace, v)
	return u
}

// SetBaiduAccessToken sets the "baidu_access_token" field.
func (u *UserUpsert) SetBaiduAccessToken(v string) *UserUpsert {
	u.Set(user.FieldBaiduAccessToken, v)
	return u
}

// UpdateBaiduAccessToken sets the "baidu_access_token" field to the value that was provided on create.
func (u *UserUpsert) UpdateBaiduAccessToken() *UserUpsert {
	u.SetExcluded(user.FieldBaiduAccessToken)
	return u
}

// SetBaiduRefreshToken sets the "baidu_refresh_token" field.
func (u *UserUpsert) SetBaiduRefreshToken(v string) *UserUpsert {
	u.Set(user.FieldBaiduRefreshToken, v)
	return u
}

// UpdateBaiduRefreshToken sets the "baidu_refresh_token" field to the value that was provided on create.
func (u *UserUpsert) UpdateBaiduRefreshToken() *UserUpsert {
	u.SetExcluded(user.FieldBaiduRefreshToken)
	return u
}

// SetBoundAt sets the "bound_at" field.
func (u *UserUpsert) SetBoundAt(v time.Time) *UserUpsert {
	u.Set(user.FieldBoundAt, v)
	return u
}

// UpdateBoundAt sets the "bound_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateBoundAt() *UserUpsert {
	u.SetExcluded(user.FieldBoundAt)
	return u
}

// ClearBoundAt clears the value of the "bound_at" field.
func (u *UserUpsert) ClearBoundAt() *UserUpsert {
	u.SetNull(user.FieldBoundAt)
	return u
}

// SetUserStatus sets the "user_status" field.
func (u *UserUpsert) SetUserStatus(v enums.UserStatus) *UserUpsert {
	u.Set(user.FieldUserStatus, v)
	return u
}

// UpdateUserStatus sets the "user_status" field to the value that was provided on create.
func (u *UserUpsert) UpdateUserStatus() *UserUpsert {
	u.SetExcluded(user.FieldUserStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(user.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserUpsertOne) UpdateNewValues() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(user.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(user.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserUpsertOne) Ignore() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertOne) DoNothing() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreate.OnConflict
// documentation for more info.
func (u *UserUpsertOne) Update(set func(*UserUpsert)) *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *UserUpsertOne) SetCreatedBy(v int64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *UserUpsertOne) AddCreatedBy(v int64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateCreatedBy() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *UserUpsertOne) SetUpdatedBy(v int64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *UserUpsertOne) AddUpdatedBy(v int64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUpdatedBy() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsertOne) SetUpdatedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUpdatedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserUpsertOne) SetDeletedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateDeletedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *UserUpsertOne) SetName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateName()
	})
}

// SetNickName sets the "nick_name" field.
func (u *UserUpsertOne) SetNickName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetNickName(v)
	})
}

// UpdateNickName sets the "nick_name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateNickName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateNickName()
	})
}

// SetJpgURL sets the "jpg_url" field.
func (u *UserUpsertOne) SetJpgURL(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetJpgURL(v)
	})
}

// UpdateJpgURL sets the "jpg_url" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateJpgURL() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateJpgURL()
	})
}

// SetKey sets the "key" field.
func (u *UserUpsertOne) SetKey(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateKey() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateKey()
	})
}

// SetSecret sets the "secret" field.
func (u *UserUpsertOne) SetSecret(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetSecret(v)
	})
}

// UpdateSecret sets the "secret" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateSecret() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateSecret()
	})
}

// SetPhone sets the "phone" field.
func (u *UserUpsertOne) SetPhone(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePhone() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePhone()
	})
}

// SetPassword sets the "password" field.
func (u *UserUpsertOne) SetPassword(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePassword() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePassword()
	})
}

// SetIsFrozen sets the "is_frozen" field.
func (u *UserUpsertOne) SetIsFrozen(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetIsFrozen(v)
	})
}

// UpdateIsFrozen sets the "is_frozen" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateIsFrozen() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsFrozen()
	})
}

// SetIsRecharge sets the "is_recharge" field.
func (u *UserUpsertOne) SetIsRecharge(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetIsRecharge(v)
	})
}

// UpdateIsRecharge sets the "is_recharge" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateIsRecharge() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsRecharge()
	})
}

// SetUserType sets the "user_type" field.
func (u *UserUpsertOne) SetUserType(v enums.UserType) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUserType(v)
	})
}

// UpdateUserType sets the "user_type" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUserType() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUserType()
	})
}

// SetParentID sets the "parent_id" field.
func (u *UserUpsertOne) SetParentID(v int64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateParentID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateParentID()
	})
}

// SetAppletParentID sets the "applet_parent_id" field.
func (u *UserUpsertOne) SetAppletParentID(v int64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetAppletParentID(v)
	})
}

// UpdateAppletParentID sets the "applet_parent_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateAppletParentID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAppletParentID()
	})
}

// SetPopVersion sets the "pop_version" field.
func (u *UserUpsertOne) SetPopVersion(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPopVersion(v)
	})
}

// UpdatePopVersion sets the "pop_version" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePopVersion() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePopVersion()
	})
}

// SetAreaCode sets the "area_code" field.
func (u *UserUpsertOne) SetAreaCode(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetAreaCode(v)
	})
}

// UpdateAreaCode sets the "area_code" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateAreaCode() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAreaCode()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertOne) SetEmail(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// SetCloudSpace sets the "cloud_space" field.
func (u *UserUpsertOne) SetCloudSpace(v int64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetCloudSpace(v)
	})
}

// AddCloudSpace adds v to the "cloud_space" field.
func (u *UserUpsertOne) AddCloudSpace(v int64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddCloudSpace(v)
	})
}

// UpdateCloudSpace sets the "cloud_space" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateCloudSpace() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCloudSpace()
	})
}

// SetBaiduAccessToken sets the "baidu_access_token" field.
func (u *UserUpsertOne) SetBaiduAccessToken(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetBaiduAccessToken(v)
	})
}

// UpdateBaiduAccessToken sets the "baidu_access_token" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateBaiduAccessToken() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBaiduAccessToken()
	})
}

// SetBaiduRefreshToken sets the "baidu_refresh_token" field.
func (u *UserUpsertOne) SetBaiduRefreshToken(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetBaiduRefreshToken(v)
	})
}

// UpdateBaiduRefreshToken sets the "baidu_refresh_token" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateBaiduRefreshToken() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBaiduRefreshToken()
	})
}

// SetBoundAt sets the "bound_at" field.
func (u *UserUpsertOne) SetBoundAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetBoundAt(v)
	})
}

// UpdateBoundAt sets the "bound_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateBoundAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBoundAt()
	})
}

// ClearBoundAt clears the value of the "bound_at" field.
func (u *UserUpsertOne) ClearBoundAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearBoundAt()
	})
}

// SetUserStatus sets the "user_status" field.
func (u *UserUpsertOne) SetUserStatus(v enums.UserStatus) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUserStatus(v)
	})
}

// UpdateUserStatus sets the "user_status" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUserStatus() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUserStatus()
	})
}

// Exec executes the query.
func (u *UserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for UserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
	conflict []sql.ConflictOption
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserUpsertBulk {
	ucb.conflict = opts
	return &UserUpsertBulk{
		create: ucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflictColumns(columns ...string) *UserUpsertBulk {
	ucb.conflict = append(ucb.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertBulk{
		create: ucb,
	}
}

// UserUpsertBulk is the builder for "upsert"-ing
// a bulk of User nodes.
type UserUpsertBulk struct {
	create *UserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(user.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserUpsertBulk) UpdateNewValues() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(user.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(user.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserUpsertBulk) Ignore() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertBulk) DoNothing() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreateBulk.OnConflict
// documentation for more info.
func (u *UserUpsertBulk) Update(set func(*UserUpsert)) *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *UserUpsertBulk) SetCreatedBy(v int64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *UserUpsertBulk) AddCreatedBy(v int64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateCreatedBy() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *UserUpsertBulk) SetUpdatedBy(v int64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *UserUpsertBulk) AddUpdatedBy(v int64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUpdatedBy() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsertBulk) SetUpdatedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUpdatedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserUpsertBulk) SetDeletedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateDeletedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *UserUpsertBulk) SetName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateName()
	})
}

// SetNickName sets the "nick_name" field.
func (u *UserUpsertBulk) SetNickName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetNickName(v)
	})
}

// UpdateNickName sets the "nick_name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateNickName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateNickName()
	})
}

// SetJpgURL sets the "jpg_url" field.
func (u *UserUpsertBulk) SetJpgURL(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetJpgURL(v)
	})
}

// UpdateJpgURL sets the "jpg_url" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateJpgURL() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateJpgURL()
	})
}

// SetKey sets the "key" field.
func (u *UserUpsertBulk) SetKey(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateKey() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateKey()
	})
}

// SetSecret sets the "secret" field.
func (u *UserUpsertBulk) SetSecret(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetSecret(v)
	})
}

// UpdateSecret sets the "secret" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateSecret() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateSecret()
	})
}

// SetPhone sets the "phone" field.
func (u *UserUpsertBulk) SetPhone(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePhone() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePhone()
	})
}

// SetPassword sets the "password" field.
func (u *UserUpsertBulk) SetPassword(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePassword() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePassword()
	})
}

// SetIsFrozen sets the "is_frozen" field.
func (u *UserUpsertBulk) SetIsFrozen(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetIsFrozen(v)
	})
}

// UpdateIsFrozen sets the "is_frozen" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateIsFrozen() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsFrozen()
	})
}

// SetIsRecharge sets the "is_recharge" field.
func (u *UserUpsertBulk) SetIsRecharge(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetIsRecharge(v)
	})
}

// UpdateIsRecharge sets the "is_recharge" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateIsRecharge() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsRecharge()
	})
}

// SetUserType sets the "user_type" field.
func (u *UserUpsertBulk) SetUserType(v enums.UserType) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUserType(v)
	})
}

// UpdateUserType sets the "user_type" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUserType() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUserType()
	})
}

// SetParentID sets the "parent_id" field.
func (u *UserUpsertBulk) SetParentID(v int64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateParentID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateParentID()
	})
}

// SetAppletParentID sets the "applet_parent_id" field.
func (u *UserUpsertBulk) SetAppletParentID(v int64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetAppletParentID(v)
	})
}

// UpdateAppletParentID sets the "applet_parent_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateAppletParentID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAppletParentID()
	})
}

// SetPopVersion sets the "pop_version" field.
func (u *UserUpsertBulk) SetPopVersion(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPopVersion(v)
	})
}

// UpdatePopVersion sets the "pop_version" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePopVersion() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePopVersion()
	})
}

// SetAreaCode sets the "area_code" field.
func (u *UserUpsertBulk) SetAreaCode(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetAreaCode(v)
	})
}

// UpdateAreaCode sets the "area_code" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateAreaCode() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAreaCode()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertBulk) SetEmail(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// SetCloudSpace sets the "cloud_space" field.
func (u *UserUpsertBulk) SetCloudSpace(v int64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetCloudSpace(v)
	})
}

// AddCloudSpace adds v to the "cloud_space" field.
func (u *UserUpsertBulk) AddCloudSpace(v int64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddCloudSpace(v)
	})
}

// UpdateCloudSpace sets the "cloud_space" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateCloudSpace() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCloudSpace()
	})
}

// SetBaiduAccessToken sets the "baidu_access_token" field.
func (u *UserUpsertBulk) SetBaiduAccessToken(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetBaiduAccessToken(v)
	})
}

// UpdateBaiduAccessToken sets the "baidu_access_token" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateBaiduAccessToken() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBaiduAccessToken()
	})
}

// SetBaiduRefreshToken sets the "baidu_refresh_token" field.
func (u *UserUpsertBulk) SetBaiduRefreshToken(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetBaiduRefreshToken(v)
	})
}

// UpdateBaiduRefreshToken sets the "baidu_refresh_token" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateBaiduRefreshToken() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBaiduRefreshToken()
	})
}

// SetBoundAt sets the "bound_at" field.
func (u *UserUpsertBulk) SetBoundAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetBoundAt(v)
	})
}

// UpdateBoundAt sets the "bound_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateBoundAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBoundAt()
	})
}

// ClearBoundAt clears the value of the "bound_at" field.
func (u *UserUpsertBulk) ClearBoundAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearBoundAt()
	})
}

// SetUserStatus sets the "user_status" field.
func (u *UserUpsertBulk) SetUserStatus(v enums.UserStatus) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUserStatus(v)
	})
}

// UpdateUserStatus sets the "user_status" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUserStatus() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUserStatus()
	})
}

// Exec executes the query.
func (u *UserUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the UserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for UserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
