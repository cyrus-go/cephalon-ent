// Code generated by ent, DO NOT EDIT.

package invokemodelorder

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldLTE(FieldID, id))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldEQ(FieldDeletedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldEQ(FieldUserID, v))
}

// ModelID applies equality check predicate on the "model_id" field. It's identical to ModelIDEQ.
func ModelID(v int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldEQ(FieldModelID, v))
}

// APITokenID applies equality check predicate on the "api_token_id" field. It's identical to APITokenIDEQ.
func APITokenID(v int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldEQ(FieldAPITokenID, v))
}

// InvokeTimes applies equality check predicate on the "invoke_times" field. It's identical to InvokeTimesEQ.
func InvokeTimes(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldEQ(FieldInvokeTimes, v))
}

// InputTokenCost applies equality check predicate on the "input_token_cost" field. It's identical to InputTokenCostEQ.
func InputTokenCost(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldEQ(FieldInputTokenCost, v))
}

// OutputTokenCost applies equality check predicate on the "output_token_cost" field. It's identical to OutputTokenCostEQ.
func OutputTokenCost(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldEQ(FieldOutputTokenCost, v))
}

// InputCepCost applies equality check predicate on the "input_cep_cost" field. It's identical to InputCepCostEQ.
func InputCepCost(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldEQ(FieldInputCepCost, v))
}

// OutputCepCost applies equality check predicate on the "output_cep_cost" field. It's identical to OutputCepCostEQ.
func OutputCepCost(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldEQ(FieldOutputCepCost, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldLTE(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldLTE(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldLTE(FieldDeletedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldNotIn(FieldUserID, vs...))
}

// ModelIDEQ applies the EQ predicate on the "model_id" field.
func ModelIDEQ(v int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldEQ(FieldModelID, v))
}

// ModelIDNEQ applies the NEQ predicate on the "model_id" field.
func ModelIDNEQ(v int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldNEQ(FieldModelID, v))
}

// ModelIDIn applies the In predicate on the "model_id" field.
func ModelIDIn(vs ...int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldIn(FieldModelID, vs...))
}

// ModelIDNotIn applies the NotIn predicate on the "model_id" field.
func ModelIDNotIn(vs ...int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldNotIn(FieldModelID, vs...))
}

// APITokenIDEQ applies the EQ predicate on the "api_token_id" field.
func APITokenIDEQ(v int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldEQ(FieldAPITokenID, v))
}

// APITokenIDNEQ applies the NEQ predicate on the "api_token_id" field.
func APITokenIDNEQ(v int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldNEQ(FieldAPITokenID, v))
}

// APITokenIDIn applies the In predicate on the "api_token_id" field.
func APITokenIDIn(vs ...int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldIn(FieldAPITokenID, vs...))
}

// APITokenIDNotIn applies the NotIn predicate on the "api_token_id" field.
func APITokenIDNotIn(vs ...int64) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldNotIn(FieldAPITokenID, vs...))
}

// InvokeTypeEQ applies the EQ predicate on the "invoke_type" field.
func InvokeTypeEQ(v enums.InvokeType) predicate.InvokeModelOrder {
	vc := v
	return predicate.InvokeModelOrder(sql.FieldEQ(FieldInvokeType, vc))
}

// InvokeTypeNEQ applies the NEQ predicate on the "invoke_type" field.
func InvokeTypeNEQ(v enums.InvokeType) predicate.InvokeModelOrder {
	vc := v
	return predicate.InvokeModelOrder(sql.FieldNEQ(FieldInvokeType, vc))
}

// InvokeTypeIn applies the In predicate on the "invoke_type" field.
func InvokeTypeIn(vs ...enums.InvokeType) predicate.InvokeModelOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InvokeModelOrder(sql.FieldIn(FieldInvokeType, v...))
}

// InvokeTypeNotIn applies the NotIn predicate on the "invoke_type" field.
func InvokeTypeNotIn(vs ...enums.InvokeType) predicate.InvokeModelOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InvokeModelOrder(sql.FieldNotIn(FieldInvokeType, v...))
}

// InvokeTimesEQ applies the EQ predicate on the "invoke_times" field.
func InvokeTimesEQ(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldEQ(FieldInvokeTimes, v))
}

// InvokeTimesNEQ applies the NEQ predicate on the "invoke_times" field.
func InvokeTimesNEQ(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldNEQ(FieldInvokeTimes, v))
}

// InvokeTimesIn applies the In predicate on the "invoke_times" field.
func InvokeTimesIn(vs ...int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldIn(FieldInvokeTimes, vs...))
}

// InvokeTimesNotIn applies the NotIn predicate on the "invoke_times" field.
func InvokeTimesNotIn(vs ...int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldNotIn(FieldInvokeTimes, vs...))
}

// InvokeTimesGT applies the GT predicate on the "invoke_times" field.
func InvokeTimesGT(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldGT(FieldInvokeTimes, v))
}

// InvokeTimesGTE applies the GTE predicate on the "invoke_times" field.
func InvokeTimesGTE(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldGTE(FieldInvokeTimes, v))
}

// InvokeTimesLT applies the LT predicate on the "invoke_times" field.
func InvokeTimesLT(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldLT(FieldInvokeTimes, v))
}

// InvokeTimesLTE applies the LTE predicate on the "invoke_times" field.
func InvokeTimesLTE(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldLTE(FieldInvokeTimes, v))
}

// InputTokenCostEQ applies the EQ predicate on the "input_token_cost" field.
func InputTokenCostEQ(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldEQ(FieldInputTokenCost, v))
}

// InputTokenCostNEQ applies the NEQ predicate on the "input_token_cost" field.
func InputTokenCostNEQ(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldNEQ(FieldInputTokenCost, v))
}

// InputTokenCostIn applies the In predicate on the "input_token_cost" field.
func InputTokenCostIn(vs ...int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldIn(FieldInputTokenCost, vs...))
}

// InputTokenCostNotIn applies the NotIn predicate on the "input_token_cost" field.
func InputTokenCostNotIn(vs ...int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldNotIn(FieldInputTokenCost, vs...))
}

// InputTokenCostGT applies the GT predicate on the "input_token_cost" field.
func InputTokenCostGT(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldGT(FieldInputTokenCost, v))
}

// InputTokenCostGTE applies the GTE predicate on the "input_token_cost" field.
func InputTokenCostGTE(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldGTE(FieldInputTokenCost, v))
}

// InputTokenCostLT applies the LT predicate on the "input_token_cost" field.
func InputTokenCostLT(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldLT(FieldInputTokenCost, v))
}

// InputTokenCostLTE applies the LTE predicate on the "input_token_cost" field.
func InputTokenCostLTE(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldLTE(FieldInputTokenCost, v))
}

// OutputTokenCostEQ applies the EQ predicate on the "output_token_cost" field.
func OutputTokenCostEQ(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldEQ(FieldOutputTokenCost, v))
}

// OutputTokenCostNEQ applies the NEQ predicate on the "output_token_cost" field.
func OutputTokenCostNEQ(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldNEQ(FieldOutputTokenCost, v))
}

// OutputTokenCostIn applies the In predicate on the "output_token_cost" field.
func OutputTokenCostIn(vs ...int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldIn(FieldOutputTokenCost, vs...))
}

// OutputTokenCostNotIn applies the NotIn predicate on the "output_token_cost" field.
func OutputTokenCostNotIn(vs ...int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldNotIn(FieldOutputTokenCost, vs...))
}

// OutputTokenCostGT applies the GT predicate on the "output_token_cost" field.
func OutputTokenCostGT(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldGT(FieldOutputTokenCost, v))
}

// OutputTokenCostGTE applies the GTE predicate on the "output_token_cost" field.
func OutputTokenCostGTE(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldGTE(FieldOutputTokenCost, v))
}

// OutputTokenCostLT applies the LT predicate on the "output_token_cost" field.
func OutputTokenCostLT(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldLT(FieldOutputTokenCost, v))
}

// OutputTokenCostLTE applies the LTE predicate on the "output_token_cost" field.
func OutputTokenCostLTE(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldLTE(FieldOutputTokenCost, v))
}

// InputCepCostEQ applies the EQ predicate on the "input_cep_cost" field.
func InputCepCostEQ(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldEQ(FieldInputCepCost, v))
}

// InputCepCostNEQ applies the NEQ predicate on the "input_cep_cost" field.
func InputCepCostNEQ(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldNEQ(FieldInputCepCost, v))
}

// InputCepCostIn applies the In predicate on the "input_cep_cost" field.
func InputCepCostIn(vs ...int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldIn(FieldInputCepCost, vs...))
}

// InputCepCostNotIn applies the NotIn predicate on the "input_cep_cost" field.
func InputCepCostNotIn(vs ...int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldNotIn(FieldInputCepCost, vs...))
}

// InputCepCostGT applies the GT predicate on the "input_cep_cost" field.
func InputCepCostGT(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldGT(FieldInputCepCost, v))
}

// InputCepCostGTE applies the GTE predicate on the "input_cep_cost" field.
func InputCepCostGTE(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldGTE(FieldInputCepCost, v))
}

// InputCepCostLT applies the LT predicate on the "input_cep_cost" field.
func InputCepCostLT(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldLT(FieldInputCepCost, v))
}

// InputCepCostLTE applies the LTE predicate on the "input_cep_cost" field.
func InputCepCostLTE(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldLTE(FieldInputCepCost, v))
}

// OutputCepCostEQ applies the EQ predicate on the "output_cep_cost" field.
func OutputCepCostEQ(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldEQ(FieldOutputCepCost, v))
}

// OutputCepCostNEQ applies the NEQ predicate on the "output_cep_cost" field.
func OutputCepCostNEQ(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldNEQ(FieldOutputCepCost, v))
}

// OutputCepCostIn applies the In predicate on the "output_cep_cost" field.
func OutputCepCostIn(vs ...int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldIn(FieldOutputCepCost, vs...))
}

// OutputCepCostNotIn applies the NotIn predicate on the "output_cep_cost" field.
func OutputCepCostNotIn(vs ...int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldNotIn(FieldOutputCepCost, vs...))
}

// OutputCepCostGT applies the GT predicate on the "output_cep_cost" field.
func OutputCepCostGT(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldGT(FieldOutputCepCost, v))
}

// OutputCepCostGTE applies the GTE predicate on the "output_cep_cost" field.
func OutputCepCostGTE(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldGTE(FieldOutputCepCost, v))
}

// OutputCepCostLT applies the LT predicate on the "output_cep_cost" field.
func OutputCepCostLT(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldLT(FieldOutputCepCost, v))
}

// OutputCepCostLTE applies the LTE predicate on the "output_cep_cost" field.
func OutputCepCostLTE(v int) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.FieldLTE(FieldOutputCepCost, v))
}

// HasBills applies the HasEdge predicate on the "bills" edge.
func HasBills() predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BillsTable, BillsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBillsWith applies the HasEdge predicate on the "bills" edge with a given conditions (other predicates).
func HasBillsWith(preds ...predicate.Bill) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(func(s *sql.Selector) {
		step := newBillsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasModel applies the HasEdge predicate on the "model" edge.
func HasModel() predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ModelTable, ModelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasModelWith applies the HasEdge predicate on the "model" edge with a given conditions (other predicates).
func HasModelWith(preds ...predicate.Model) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(func(s *sql.Selector) {
		step := newModelStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAPIToken applies the HasEdge predicate on the "api_token" edge.
func HasAPIToken() predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, APITokenTable, APITokenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAPITokenWith applies the HasEdge predicate on the "api_token" edge with a given conditions (other predicates).
func HasAPITokenWith(preds ...predicate.ApiToken) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(func(s *sql.Selector) {
		step := newAPITokenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.InvokeModelOrder) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.InvokeModelOrder) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.InvokeModelOrder) predicate.InvokeModelOrder {
	return predicate.InvokeModelOrder(sql.NotPredicates(p))
}
