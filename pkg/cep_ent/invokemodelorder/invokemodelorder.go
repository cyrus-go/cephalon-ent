// Code generated by ent, DO NOT EDIT.

package invokemodelorder

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

const (
	// Label holds the string label denoting the invokemodelorder type in the database.
	Label = "invoke_model_order"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldModelID holds the string denoting the model_id field in the database.
	FieldModelID = "model_id"
	// FieldAPITokenID holds the string denoting the api_token_id field in the database.
	FieldAPITokenID = "api_token_id"
	// FieldInvokeType holds the string denoting the invoke_type field in the database.
	FieldInvokeType = "invoke_type"
	// FieldInvokeTimes holds the string denoting the invoke_times field in the database.
	FieldInvokeTimes = "invoke_times"
	// FieldInputTokenCost holds the string denoting the input_token_cost field in the database.
	FieldInputTokenCost = "input_token_cost"
	// FieldOutputTokenCost holds the string denoting the output_token_cost field in the database.
	FieldOutputTokenCost = "output_token_cost"
	// FieldInputCepCost holds the string denoting the input_cep_cost field in the database.
	FieldInputCepCost = "input_cep_cost"
	// FieldOutputCepCost holds the string denoting the output_cep_cost field in the database.
	FieldOutputCepCost = "output_cep_cost"
	// EdgeBills holds the string denoting the bills edge name in mutations.
	EdgeBills = "bills"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeModel holds the string denoting the model edge name in mutations.
	EdgeModel = "model"
	// EdgeAPIToken holds the string denoting the api_token edge name in mutations.
	EdgeAPIToken = "api_token"
	// Table holds the table name of the invokemodelorder in the database.
	Table = "invoke_model_orders"
	// BillsTable is the table that holds the bills relation/edge.
	BillsTable = "bills"
	// BillsInverseTable is the table name for the Bill entity.
	// It exists in this package in order to avoid circular dependency with the "bill" package.
	BillsInverseTable = "bills"
	// BillsColumn is the table column denoting the bills relation/edge.
	BillsColumn = "order_id"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "invoke_model_orders"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// ModelTable is the table that holds the model relation/edge.
	ModelTable = "invoke_model_orders"
	// ModelInverseTable is the table name for the Model entity.
	// It exists in this package in order to avoid circular dependency with the "model" package.
	ModelInverseTable = "models"
	// ModelColumn is the table column denoting the model relation/edge.
	ModelColumn = "model_id"
	// APITokenTable is the table that holds the api_token relation/edge.
	APITokenTable = "invoke_model_orders"
	// APITokenInverseTable is the table name for the ApiToken entity.
	// It exists in this package in order to avoid circular dependency with the "apitoken" package.
	APITokenInverseTable = "api_tokens"
	// APITokenColumn is the table column denoting the api_token relation/edge.
	APITokenColumn = "api_token_id"
)

// Columns holds all SQL columns for invokemodelorder fields.
var Columns = []string{
	FieldID,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldUserID,
	FieldModelID,
	FieldAPITokenID,
	FieldInvokeType,
	FieldInvokeTimes,
	FieldInputTokenCost,
	FieldOutputTokenCost,
	FieldInputCepCost,
	FieldOutputCepCost,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedBy holds the default value on creation for the "created_by" field.
	DefaultCreatedBy int64
	// DefaultUpdatedBy holds the default value on creation for the "updated_by" field.
	DefaultUpdatedBy int64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt time.Time
	// DefaultInvokeTimes holds the default value on creation for the "invoke_times" field.
	DefaultInvokeTimes int
	// DefaultInputTokenCost holds the default value on creation for the "input_token_cost" field.
	DefaultInputTokenCost int64
	// DefaultOutputTokenCost holds the default value on creation for the "output_token_cost" field.
	DefaultOutputTokenCost int64
	// DefaultInputCepCost holds the default value on creation for the "input_cep_cost" field.
	DefaultInputCepCost int64
	// DefaultOutputCepCost holds the default value on creation for the "output_cep_cost" field.
	DefaultOutputCepCost int64
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
)

const DefaultInvokeType enums.InvokeType = "unknown"

// InvokeTypeValidator is a validator for the "invoke_type" field enum values. It is called by the builders before save.
func InvokeTypeValidator(it enums.InvokeType) error {
	switch it {
	case "unknown", "api", "web":
		return nil
	default:
		return fmt.Errorf("invokemodelorder: invalid enum value for invoke_type field: %q", it)
	}
}

// OrderOption defines the ordering options for the InvokeModelOrder queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByModelID orders the results by the model_id field.
func ByModelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModelID, opts...).ToFunc()
}

// ByAPITokenID orders the results by the api_token_id field.
func ByAPITokenID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPITokenID, opts...).ToFunc()
}

// ByInvokeType orders the results by the invoke_type field.
func ByInvokeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvokeType, opts...).ToFunc()
}

// ByInvokeTimes orders the results by the invoke_times field.
func ByInvokeTimes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvokeTimes, opts...).ToFunc()
}

// ByInputTokenCost orders the results by the input_token_cost field.
func ByInputTokenCost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInputTokenCost, opts...).ToFunc()
}

// ByOutputTokenCost orders the results by the output_token_cost field.
func ByOutputTokenCost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutputTokenCost, opts...).ToFunc()
}

// ByInputCepCost orders the results by the input_cep_cost field.
func ByInputCepCost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInputCepCost, opts...).ToFunc()
}

// ByOutputCepCost orders the results by the output_cep_cost field.
func ByOutputCepCost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutputCepCost, opts...).ToFunc()
}

// ByBillsCount orders the results by bills count.
func ByBillsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBillsStep(), opts...)
	}
}

// ByBills orders the results by bills terms.
func ByBills(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBillsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByModelField orders the results by model field.
func ByModelField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newModelStep(), sql.OrderByField(field, opts...))
	}
}

// ByAPITokenField orders the results by api_token field.
func ByAPITokenField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAPITokenStep(), sql.OrderByField(field, opts...))
	}
}
func newBillsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BillsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BillsTable, BillsColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newModelStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ModelInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ModelTable, ModelColumn),
	)
}
func newAPITokenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(APITokenInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, APITokenTable, APITokenColumn),
	)
}
