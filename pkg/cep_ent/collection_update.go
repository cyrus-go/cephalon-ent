// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/collection"
	"cephalon-ent/pkg/cep_ent/predicate"
	"cephalon-ent/pkg/cep_ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CollectionUpdate is the builder for updating Collection entities.
type CollectionUpdate struct {
	config
	hooks    []Hook
	mutation *CollectionMutation
}

// Where appends a list predicates to the CollectionUpdate builder.
func (cu *CollectionUpdate) Where(ps ...predicate.Collection) *CollectionUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCreatedBy sets the "created_by" field.
func (cu *CollectionUpdate) SetCreatedBy(i int64) *CollectionUpdate {
	cu.mutation.ResetCreatedBy()
	cu.mutation.SetCreatedBy(i)
	return cu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableCreatedBy(i *int64) *CollectionUpdate {
	if i != nil {
		cu.SetCreatedBy(*i)
	}
	return cu
}

// AddCreatedBy adds i to the "created_by" field.
func (cu *CollectionUpdate) AddCreatedBy(i int64) *CollectionUpdate {
	cu.mutation.AddCreatedBy(i)
	return cu
}

// SetUpdatedBy sets the "updated_by" field.
func (cu *CollectionUpdate) SetUpdatedBy(i int64) *CollectionUpdate {
	cu.mutation.ResetUpdatedBy()
	cu.mutation.SetUpdatedBy(i)
	return cu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableUpdatedBy(i *int64) *CollectionUpdate {
	if i != nil {
		cu.SetUpdatedBy(*i)
	}
	return cu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (cu *CollectionUpdate) AddUpdatedBy(i int64) *CollectionUpdate {
	cu.mutation.AddUpdatedBy(i)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CollectionUpdate) SetUpdatedAt(t time.Time) *CollectionUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *CollectionUpdate) SetDeletedAt(t time.Time) *CollectionUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableDeletedAt(t *time.Time) *CollectionUpdate {
	if t != nil {
		cu.SetDeletedAt(*t)
	}
	return cu
}

// SetURL sets the "url" field.
func (cu *CollectionUpdate) SetURL(s string) *CollectionUpdate {
	cu.mutation.SetURL(s)
	return cu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableURL(s *string) *CollectionUpdate {
	if s != nil {
		cu.SetURL(*s)
	}
	return cu
}

// SetUserID sets the "user_id" field.
func (cu *CollectionUpdate) SetUserID(i int64) *CollectionUpdate {
	cu.mutation.SetUserID(i)
	return cu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableUserID(i *int64) *CollectionUpdate {
	if i != nil {
		cu.SetUserID(*i)
	}
	return cu
}

// SetPictureName sets the "picture_name" field.
func (cu *CollectionUpdate) SetPictureName(s string) *CollectionUpdate {
	cu.mutation.SetPictureName(s)
	return cu
}

// SetNillablePictureName sets the "picture_name" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillablePictureName(s *string) *CollectionUpdate {
	if s != nil {
		cu.SetPictureName(*s)
	}
	return cu
}

// SetUser sets the "user" edge to the User entity.
func (cu *CollectionUpdate) SetUser(u *User) *CollectionUpdate {
	return cu.SetUserID(u.ID)
}

// Mutation returns the CollectionMutation object of the builder.
func (cu *CollectionUpdate) Mutation() *CollectionMutation {
	return cu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cu *CollectionUpdate) ClearUser() *CollectionUpdate {
	cu.mutation.ClearUser()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CollectionUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CollectionUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CollectionUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CollectionUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CollectionUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := collection.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CollectionUpdate) check() error {
	if _, ok := cu.mutation.UserID(); cu.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "Collection.user"`)
	}
	return nil
}

func (cu *CollectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(collection.Table, collection.Columns, sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt64))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CreatedBy(); ok {
		_spec.SetField(collection.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(collection.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.UpdatedBy(); ok {
		_spec.SetField(collection.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(collection.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(collection.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.SetField(collection.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.URL(); ok {
		_spec.SetField(collection.FieldURL, field.TypeString, value)
	}
	if value, ok := cu.mutation.PictureName(); ok {
		_spec.SetField(collection.FieldPictureName, field.TypeString, value)
	}
	if cu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collection.UserTable,
			Columns: []string{collection.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collection.UserTable,
			Columns: []string{collection.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{collection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CollectionUpdateOne is the builder for updating a single Collection entity.
type CollectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CollectionMutation
}

// SetCreatedBy sets the "created_by" field.
func (cuo *CollectionUpdateOne) SetCreatedBy(i int64) *CollectionUpdateOne {
	cuo.mutation.ResetCreatedBy()
	cuo.mutation.SetCreatedBy(i)
	return cuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableCreatedBy(i *int64) *CollectionUpdateOne {
	if i != nil {
		cuo.SetCreatedBy(*i)
	}
	return cuo
}

// AddCreatedBy adds i to the "created_by" field.
func (cuo *CollectionUpdateOne) AddCreatedBy(i int64) *CollectionUpdateOne {
	cuo.mutation.AddCreatedBy(i)
	return cuo
}

// SetUpdatedBy sets the "updated_by" field.
func (cuo *CollectionUpdateOne) SetUpdatedBy(i int64) *CollectionUpdateOne {
	cuo.mutation.ResetUpdatedBy()
	cuo.mutation.SetUpdatedBy(i)
	return cuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableUpdatedBy(i *int64) *CollectionUpdateOne {
	if i != nil {
		cuo.SetUpdatedBy(*i)
	}
	return cuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (cuo *CollectionUpdateOne) AddUpdatedBy(i int64) *CollectionUpdateOne {
	cuo.mutation.AddUpdatedBy(i)
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CollectionUpdateOne) SetUpdatedAt(t time.Time) *CollectionUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *CollectionUpdateOne) SetDeletedAt(t time.Time) *CollectionUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableDeletedAt(t *time.Time) *CollectionUpdateOne {
	if t != nil {
		cuo.SetDeletedAt(*t)
	}
	return cuo
}

// SetURL sets the "url" field.
func (cuo *CollectionUpdateOne) SetURL(s string) *CollectionUpdateOne {
	cuo.mutation.SetURL(s)
	return cuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableURL(s *string) *CollectionUpdateOne {
	if s != nil {
		cuo.SetURL(*s)
	}
	return cuo
}

// SetUserID sets the "user_id" field.
func (cuo *CollectionUpdateOne) SetUserID(i int64) *CollectionUpdateOne {
	cuo.mutation.SetUserID(i)
	return cuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableUserID(i *int64) *CollectionUpdateOne {
	if i != nil {
		cuo.SetUserID(*i)
	}
	return cuo
}

// SetPictureName sets the "picture_name" field.
func (cuo *CollectionUpdateOne) SetPictureName(s string) *CollectionUpdateOne {
	cuo.mutation.SetPictureName(s)
	return cuo
}

// SetNillablePictureName sets the "picture_name" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillablePictureName(s *string) *CollectionUpdateOne {
	if s != nil {
		cuo.SetPictureName(*s)
	}
	return cuo
}

// SetUser sets the "user" edge to the User entity.
func (cuo *CollectionUpdateOne) SetUser(u *User) *CollectionUpdateOne {
	return cuo.SetUserID(u.ID)
}

// Mutation returns the CollectionMutation object of the builder.
func (cuo *CollectionUpdateOne) Mutation() *CollectionMutation {
	return cuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cuo *CollectionUpdateOne) ClearUser() *CollectionUpdateOne {
	cuo.mutation.ClearUser()
	return cuo
}

// Where appends a list predicates to the CollectionUpdate builder.
func (cuo *CollectionUpdateOne) Where(ps ...predicate.Collection) *CollectionUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CollectionUpdateOne) Select(field string, fields ...string) *CollectionUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Collection entity.
func (cuo *CollectionUpdateOne) Save(ctx context.Context) (*Collection, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CollectionUpdateOne) SaveX(ctx context.Context) *Collection {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CollectionUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CollectionUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CollectionUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := collection.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CollectionUpdateOne) check() error {
	if _, ok := cuo.mutation.UserID(); cuo.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "Collection.user"`)
	}
	return nil
}

func (cuo *CollectionUpdateOne) sqlSave(ctx context.Context) (_node *Collection, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(collection.Table, collection.Columns, sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt64))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "Collection.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, collection.FieldID)
		for _, f := range fields {
			if !collection.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != collection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.CreatedBy(); ok {
		_spec.SetField(collection.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(collection.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.UpdatedBy(); ok {
		_spec.SetField(collection.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(collection.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(collection.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.SetField(collection.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.URL(); ok {
		_spec.SetField(collection.FieldURL, field.TypeString, value)
	}
	if value, ok := cuo.mutation.PictureName(); ok {
		_spec.SetField(collection.FieldPictureName, field.TypeString, value)
	}
	if cuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collection.UserTable,
			Columns: []string{collection.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collection.UserTable,
			Columns: []string{collection.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Collection{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{collection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
