// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/extraservice"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/extraserviceprice"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/mission"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionextraservice"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// ExtraServiceUpdate is the builder for updating ExtraService entities.
type ExtraServiceUpdate struct {
	config
	hooks     []Hook
	mutation  *ExtraServiceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ExtraServiceUpdate builder.
func (esu *ExtraServiceUpdate) Where(ps ...predicate.ExtraService) *ExtraServiceUpdate {
	esu.mutation.Where(ps...)
	return esu
}

// SetCreatedBy sets the "created_by" field.
func (esu *ExtraServiceUpdate) SetCreatedBy(i int64) *ExtraServiceUpdate {
	esu.mutation.ResetCreatedBy()
	esu.mutation.SetCreatedBy(i)
	return esu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (esu *ExtraServiceUpdate) SetNillableCreatedBy(i *int64) *ExtraServiceUpdate {
	if i != nil {
		esu.SetCreatedBy(*i)
	}
	return esu
}

// AddCreatedBy adds i to the "created_by" field.
func (esu *ExtraServiceUpdate) AddCreatedBy(i int64) *ExtraServiceUpdate {
	esu.mutation.AddCreatedBy(i)
	return esu
}

// SetUpdatedBy sets the "updated_by" field.
func (esu *ExtraServiceUpdate) SetUpdatedBy(i int64) *ExtraServiceUpdate {
	esu.mutation.ResetUpdatedBy()
	esu.mutation.SetUpdatedBy(i)
	return esu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (esu *ExtraServiceUpdate) SetNillableUpdatedBy(i *int64) *ExtraServiceUpdate {
	if i != nil {
		esu.SetUpdatedBy(*i)
	}
	return esu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (esu *ExtraServiceUpdate) AddUpdatedBy(i int64) *ExtraServiceUpdate {
	esu.mutation.AddUpdatedBy(i)
	return esu
}

// SetUpdatedAt sets the "updated_at" field.
func (esu *ExtraServiceUpdate) SetUpdatedAt(t time.Time) *ExtraServiceUpdate {
	esu.mutation.SetUpdatedAt(t)
	return esu
}

// SetDeletedAt sets the "deleted_at" field.
func (esu *ExtraServiceUpdate) SetDeletedAt(t time.Time) *ExtraServiceUpdate {
	esu.mutation.SetDeletedAt(t)
	return esu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (esu *ExtraServiceUpdate) SetNillableDeletedAt(t *time.Time) *ExtraServiceUpdate {
	if t != nil {
		esu.SetDeletedAt(*t)
	}
	return esu
}

// SetName sets the "name" field.
func (esu *ExtraServiceUpdate) SetName(s string) *ExtraServiceUpdate {
	esu.mutation.SetName(s)
	return esu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (esu *ExtraServiceUpdate) SetNillableName(s *string) *ExtraServiceUpdate {
	if s != nil {
		esu.SetName(*s)
	}
	return esu
}

// SetExtraServiceType sets the "extra_service_type" field.
func (esu *ExtraServiceUpdate) SetExtraServiceType(est enums.ExtraServiceType) *ExtraServiceUpdate {
	esu.mutation.SetExtraServiceType(est)
	return esu
}

// SetNillableExtraServiceType sets the "extra_service_type" field if the given value is not nil.
func (esu *ExtraServiceUpdate) SetNillableExtraServiceType(est *enums.ExtraServiceType) *ExtraServiceUpdate {
	if est != nil {
		esu.SetExtraServiceType(*est)
	}
	return esu
}

// SetStartedAt sets the "started_at" field.
func (esu *ExtraServiceUpdate) SetStartedAt(t time.Time) *ExtraServiceUpdate {
	esu.mutation.SetStartedAt(t)
	return esu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (esu *ExtraServiceUpdate) SetNillableStartedAt(t *time.Time) *ExtraServiceUpdate {
	if t != nil {
		esu.SetStartedAt(*t)
	}
	return esu
}

// ClearStartedAt clears the value of the "started_at" field.
func (esu *ExtraServiceUpdate) ClearStartedAt() *ExtraServiceUpdate {
	esu.mutation.ClearStartedAt()
	return esu
}

// SetFinishedAt sets the "finished_at" field.
func (esu *ExtraServiceUpdate) SetFinishedAt(t time.Time) *ExtraServiceUpdate {
	esu.mutation.SetFinishedAt(t)
	return esu
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (esu *ExtraServiceUpdate) SetNillableFinishedAt(t *time.Time) *ExtraServiceUpdate {
	if t != nil {
		esu.SetFinishedAt(*t)
	}
	return esu
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (esu *ExtraServiceUpdate) ClearFinishedAt() *ExtraServiceUpdate {
	esu.mutation.ClearFinishedAt()
	return esu
}

// AddMissionIDs adds the "missions" edge to the Mission entity by IDs.
func (esu *ExtraServiceUpdate) AddMissionIDs(ids ...int64) *ExtraServiceUpdate {
	esu.mutation.AddMissionIDs(ids...)
	return esu
}

// AddMissions adds the "missions" edges to the Mission entity.
func (esu *ExtraServiceUpdate) AddMissions(m ...*Mission) *ExtraServiceUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return esu.AddMissionIDs(ids...)
}

// AddMissionExtraServiceIDs adds the "mission_extra_services" edge to the MissionExtraService entity by IDs.
func (esu *ExtraServiceUpdate) AddMissionExtraServiceIDs(ids ...int64) *ExtraServiceUpdate {
	esu.mutation.AddMissionExtraServiceIDs(ids...)
	return esu
}

// AddMissionExtraServices adds the "mission_extra_services" edges to the MissionExtraService entity.
func (esu *ExtraServiceUpdate) AddMissionExtraServices(m ...*MissionExtraService) *ExtraServiceUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return esu.AddMissionExtraServiceIDs(ids...)
}

// AddExtraServicePriceIDs adds the "extra_service_prices" edge to the ExtraServicePrice entity by IDs.
func (esu *ExtraServiceUpdate) AddExtraServicePriceIDs(ids ...int64) *ExtraServiceUpdate {
	esu.mutation.AddExtraServicePriceIDs(ids...)
	return esu
}

// AddExtraServicePrices adds the "extra_service_prices" edges to the ExtraServicePrice entity.
func (esu *ExtraServiceUpdate) AddExtraServicePrices(e ...*ExtraServicePrice) *ExtraServiceUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return esu.AddExtraServicePriceIDs(ids...)
}

// Mutation returns the ExtraServiceMutation object of the builder.
func (esu *ExtraServiceUpdate) Mutation() *ExtraServiceMutation {
	return esu.mutation
}

// ClearMissions clears all "missions" edges to the Mission entity.
func (esu *ExtraServiceUpdate) ClearMissions() *ExtraServiceUpdate {
	esu.mutation.ClearMissions()
	return esu
}

// RemoveMissionIDs removes the "missions" edge to Mission entities by IDs.
func (esu *ExtraServiceUpdate) RemoveMissionIDs(ids ...int64) *ExtraServiceUpdate {
	esu.mutation.RemoveMissionIDs(ids...)
	return esu
}

// RemoveMissions removes "missions" edges to Mission entities.
func (esu *ExtraServiceUpdate) RemoveMissions(m ...*Mission) *ExtraServiceUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return esu.RemoveMissionIDs(ids...)
}

// ClearMissionExtraServices clears all "mission_extra_services" edges to the MissionExtraService entity.
func (esu *ExtraServiceUpdate) ClearMissionExtraServices() *ExtraServiceUpdate {
	esu.mutation.ClearMissionExtraServices()
	return esu
}

// RemoveMissionExtraServiceIDs removes the "mission_extra_services" edge to MissionExtraService entities by IDs.
func (esu *ExtraServiceUpdate) RemoveMissionExtraServiceIDs(ids ...int64) *ExtraServiceUpdate {
	esu.mutation.RemoveMissionExtraServiceIDs(ids...)
	return esu
}

// RemoveMissionExtraServices removes "mission_extra_services" edges to MissionExtraService entities.
func (esu *ExtraServiceUpdate) RemoveMissionExtraServices(m ...*MissionExtraService) *ExtraServiceUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return esu.RemoveMissionExtraServiceIDs(ids...)
}

// ClearExtraServicePrices clears all "extra_service_prices" edges to the ExtraServicePrice entity.
func (esu *ExtraServiceUpdate) ClearExtraServicePrices() *ExtraServiceUpdate {
	esu.mutation.ClearExtraServicePrices()
	return esu
}

// RemoveExtraServicePriceIDs removes the "extra_service_prices" edge to ExtraServicePrice entities by IDs.
func (esu *ExtraServiceUpdate) RemoveExtraServicePriceIDs(ids ...int64) *ExtraServiceUpdate {
	esu.mutation.RemoveExtraServicePriceIDs(ids...)
	return esu
}

// RemoveExtraServicePrices removes "extra_service_prices" edges to ExtraServicePrice entities.
func (esu *ExtraServiceUpdate) RemoveExtraServicePrices(e ...*ExtraServicePrice) *ExtraServiceUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return esu.RemoveExtraServicePriceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (esu *ExtraServiceUpdate) Save(ctx context.Context) (int, error) {
	esu.defaults()
	return withHooks(ctx, esu.sqlSave, esu.mutation, esu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (esu *ExtraServiceUpdate) SaveX(ctx context.Context) int {
	affected, err := esu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (esu *ExtraServiceUpdate) Exec(ctx context.Context) error {
	_, err := esu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esu *ExtraServiceUpdate) ExecX(ctx context.Context) {
	if err := esu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (esu *ExtraServiceUpdate) defaults() {
	if _, ok := esu.mutation.UpdatedAt(); !ok {
		v := extraservice.UpdateDefaultUpdatedAt()
		esu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (esu *ExtraServiceUpdate) check() error {
	if v, ok := esu.mutation.ExtraServiceType(); ok {
		if err := extraservice.ExtraServiceTypeValidator(v); err != nil {
			return &ValidationError{Name: "extra_service_type", err: fmt.Errorf(`cep_ent: validator failed for field "ExtraService.extra_service_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (esu *ExtraServiceUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ExtraServiceUpdate {
	esu.modifiers = append(esu.modifiers, modifiers...)
	return esu
}

func (esu *ExtraServiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := esu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(extraservice.Table, extraservice.Columns, sqlgraph.NewFieldSpec(extraservice.FieldID, field.TypeInt64))
	if ps := esu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := esu.mutation.CreatedBy(); ok {
		_spec.SetField(extraservice.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := esu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(extraservice.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := esu.mutation.UpdatedBy(); ok {
		_spec.SetField(extraservice.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := esu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(extraservice.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := esu.mutation.UpdatedAt(); ok {
		_spec.SetField(extraservice.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := esu.mutation.DeletedAt(); ok {
		_spec.SetField(extraservice.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := esu.mutation.Name(); ok {
		_spec.SetField(extraservice.FieldName, field.TypeString, value)
	}
	if value, ok := esu.mutation.ExtraServiceType(); ok {
		_spec.SetField(extraservice.FieldExtraServiceType, field.TypeEnum, value)
	}
	if value, ok := esu.mutation.StartedAt(); ok {
		_spec.SetField(extraservice.FieldStartedAt, field.TypeTime, value)
	}
	if esu.mutation.StartedAtCleared() {
		_spec.ClearField(extraservice.FieldStartedAt, field.TypeTime)
	}
	if value, ok := esu.mutation.FinishedAt(); ok {
		_spec.SetField(extraservice.FieldFinishedAt, field.TypeTime, value)
	}
	if esu.mutation.FinishedAtCleared() {
		_spec.ClearField(extraservice.FieldFinishedAt, field.TypeTime)
	}
	if esu.mutation.MissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   extraservice.MissionsTable,
			Columns: []string{extraservice.MissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esu.mutation.RemovedMissionsIDs(); len(nodes) > 0 && !esu.mutation.MissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   extraservice.MissionsTable,
			Columns: []string{extraservice.MissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esu.mutation.MissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   extraservice.MissionsTable,
			Columns: []string{extraservice.MissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if esu.mutation.MissionExtraServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   extraservice.MissionExtraServicesTable,
			Columns: []string{extraservice.MissionExtraServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionextraservice.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esu.mutation.RemovedMissionExtraServicesIDs(); len(nodes) > 0 && !esu.mutation.MissionExtraServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   extraservice.MissionExtraServicesTable,
			Columns: []string{extraservice.MissionExtraServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionextraservice.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esu.mutation.MissionExtraServicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   extraservice.MissionExtraServicesTable,
			Columns: []string{extraservice.MissionExtraServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionextraservice.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if esu.mutation.ExtraServicePricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   extraservice.ExtraServicePricesTable,
			Columns: []string{extraservice.ExtraServicePricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extraserviceprice.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esu.mutation.RemovedExtraServicePricesIDs(); len(nodes) > 0 && !esu.mutation.ExtraServicePricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   extraservice.ExtraServicePricesTable,
			Columns: []string{extraservice.ExtraServicePricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extraserviceprice.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esu.mutation.ExtraServicePricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   extraservice.ExtraServicePricesTable,
			Columns: []string{extraservice.ExtraServicePricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extraserviceprice.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(esu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, esu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{extraservice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	esu.mutation.done = true
	return n, nil
}

// ExtraServiceUpdateOne is the builder for updating a single ExtraService entity.
type ExtraServiceUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ExtraServiceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedBy sets the "created_by" field.
func (esuo *ExtraServiceUpdateOne) SetCreatedBy(i int64) *ExtraServiceUpdateOne {
	esuo.mutation.ResetCreatedBy()
	esuo.mutation.SetCreatedBy(i)
	return esuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (esuo *ExtraServiceUpdateOne) SetNillableCreatedBy(i *int64) *ExtraServiceUpdateOne {
	if i != nil {
		esuo.SetCreatedBy(*i)
	}
	return esuo
}

// AddCreatedBy adds i to the "created_by" field.
func (esuo *ExtraServiceUpdateOne) AddCreatedBy(i int64) *ExtraServiceUpdateOne {
	esuo.mutation.AddCreatedBy(i)
	return esuo
}

// SetUpdatedBy sets the "updated_by" field.
func (esuo *ExtraServiceUpdateOne) SetUpdatedBy(i int64) *ExtraServiceUpdateOne {
	esuo.mutation.ResetUpdatedBy()
	esuo.mutation.SetUpdatedBy(i)
	return esuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (esuo *ExtraServiceUpdateOne) SetNillableUpdatedBy(i *int64) *ExtraServiceUpdateOne {
	if i != nil {
		esuo.SetUpdatedBy(*i)
	}
	return esuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (esuo *ExtraServiceUpdateOne) AddUpdatedBy(i int64) *ExtraServiceUpdateOne {
	esuo.mutation.AddUpdatedBy(i)
	return esuo
}

// SetUpdatedAt sets the "updated_at" field.
func (esuo *ExtraServiceUpdateOne) SetUpdatedAt(t time.Time) *ExtraServiceUpdateOne {
	esuo.mutation.SetUpdatedAt(t)
	return esuo
}

// SetDeletedAt sets the "deleted_at" field.
func (esuo *ExtraServiceUpdateOne) SetDeletedAt(t time.Time) *ExtraServiceUpdateOne {
	esuo.mutation.SetDeletedAt(t)
	return esuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (esuo *ExtraServiceUpdateOne) SetNillableDeletedAt(t *time.Time) *ExtraServiceUpdateOne {
	if t != nil {
		esuo.SetDeletedAt(*t)
	}
	return esuo
}

// SetName sets the "name" field.
func (esuo *ExtraServiceUpdateOne) SetName(s string) *ExtraServiceUpdateOne {
	esuo.mutation.SetName(s)
	return esuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (esuo *ExtraServiceUpdateOne) SetNillableName(s *string) *ExtraServiceUpdateOne {
	if s != nil {
		esuo.SetName(*s)
	}
	return esuo
}

// SetExtraServiceType sets the "extra_service_type" field.
func (esuo *ExtraServiceUpdateOne) SetExtraServiceType(est enums.ExtraServiceType) *ExtraServiceUpdateOne {
	esuo.mutation.SetExtraServiceType(est)
	return esuo
}

// SetNillableExtraServiceType sets the "extra_service_type" field if the given value is not nil.
func (esuo *ExtraServiceUpdateOne) SetNillableExtraServiceType(est *enums.ExtraServiceType) *ExtraServiceUpdateOne {
	if est != nil {
		esuo.SetExtraServiceType(*est)
	}
	return esuo
}

// SetStartedAt sets the "started_at" field.
func (esuo *ExtraServiceUpdateOne) SetStartedAt(t time.Time) *ExtraServiceUpdateOne {
	esuo.mutation.SetStartedAt(t)
	return esuo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (esuo *ExtraServiceUpdateOne) SetNillableStartedAt(t *time.Time) *ExtraServiceUpdateOne {
	if t != nil {
		esuo.SetStartedAt(*t)
	}
	return esuo
}

// ClearStartedAt clears the value of the "started_at" field.
func (esuo *ExtraServiceUpdateOne) ClearStartedAt() *ExtraServiceUpdateOne {
	esuo.mutation.ClearStartedAt()
	return esuo
}

// SetFinishedAt sets the "finished_at" field.
func (esuo *ExtraServiceUpdateOne) SetFinishedAt(t time.Time) *ExtraServiceUpdateOne {
	esuo.mutation.SetFinishedAt(t)
	return esuo
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (esuo *ExtraServiceUpdateOne) SetNillableFinishedAt(t *time.Time) *ExtraServiceUpdateOne {
	if t != nil {
		esuo.SetFinishedAt(*t)
	}
	return esuo
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (esuo *ExtraServiceUpdateOne) ClearFinishedAt() *ExtraServiceUpdateOne {
	esuo.mutation.ClearFinishedAt()
	return esuo
}

// AddMissionIDs adds the "missions" edge to the Mission entity by IDs.
func (esuo *ExtraServiceUpdateOne) AddMissionIDs(ids ...int64) *ExtraServiceUpdateOne {
	esuo.mutation.AddMissionIDs(ids...)
	return esuo
}

// AddMissions adds the "missions" edges to the Mission entity.
func (esuo *ExtraServiceUpdateOne) AddMissions(m ...*Mission) *ExtraServiceUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return esuo.AddMissionIDs(ids...)
}

// AddMissionExtraServiceIDs adds the "mission_extra_services" edge to the MissionExtraService entity by IDs.
func (esuo *ExtraServiceUpdateOne) AddMissionExtraServiceIDs(ids ...int64) *ExtraServiceUpdateOne {
	esuo.mutation.AddMissionExtraServiceIDs(ids...)
	return esuo
}

// AddMissionExtraServices adds the "mission_extra_services" edges to the MissionExtraService entity.
func (esuo *ExtraServiceUpdateOne) AddMissionExtraServices(m ...*MissionExtraService) *ExtraServiceUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return esuo.AddMissionExtraServiceIDs(ids...)
}

// AddExtraServicePriceIDs adds the "extra_service_prices" edge to the ExtraServicePrice entity by IDs.
func (esuo *ExtraServiceUpdateOne) AddExtraServicePriceIDs(ids ...int64) *ExtraServiceUpdateOne {
	esuo.mutation.AddExtraServicePriceIDs(ids...)
	return esuo
}

// AddExtraServicePrices adds the "extra_service_prices" edges to the ExtraServicePrice entity.
func (esuo *ExtraServiceUpdateOne) AddExtraServicePrices(e ...*ExtraServicePrice) *ExtraServiceUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return esuo.AddExtraServicePriceIDs(ids...)
}

// Mutation returns the ExtraServiceMutation object of the builder.
func (esuo *ExtraServiceUpdateOne) Mutation() *ExtraServiceMutation {
	return esuo.mutation
}

// ClearMissions clears all "missions" edges to the Mission entity.
func (esuo *ExtraServiceUpdateOne) ClearMissions() *ExtraServiceUpdateOne {
	esuo.mutation.ClearMissions()
	return esuo
}

// RemoveMissionIDs removes the "missions" edge to Mission entities by IDs.
func (esuo *ExtraServiceUpdateOne) RemoveMissionIDs(ids ...int64) *ExtraServiceUpdateOne {
	esuo.mutation.RemoveMissionIDs(ids...)
	return esuo
}

// RemoveMissions removes "missions" edges to Mission entities.
func (esuo *ExtraServiceUpdateOne) RemoveMissions(m ...*Mission) *ExtraServiceUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return esuo.RemoveMissionIDs(ids...)
}

// ClearMissionExtraServices clears all "mission_extra_services" edges to the MissionExtraService entity.
func (esuo *ExtraServiceUpdateOne) ClearMissionExtraServices() *ExtraServiceUpdateOne {
	esuo.mutation.ClearMissionExtraServices()
	return esuo
}

// RemoveMissionExtraServiceIDs removes the "mission_extra_services" edge to MissionExtraService entities by IDs.
func (esuo *ExtraServiceUpdateOne) RemoveMissionExtraServiceIDs(ids ...int64) *ExtraServiceUpdateOne {
	esuo.mutation.RemoveMissionExtraServiceIDs(ids...)
	return esuo
}

// RemoveMissionExtraServices removes "mission_extra_services" edges to MissionExtraService entities.
func (esuo *ExtraServiceUpdateOne) RemoveMissionExtraServices(m ...*MissionExtraService) *ExtraServiceUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return esuo.RemoveMissionExtraServiceIDs(ids...)
}

// ClearExtraServicePrices clears all "extra_service_prices" edges to the ExtraServicePrice entity.
func (esuo *ExtraServiceUpdateOne) ClearExtraServicePrices() *ExtraServiceUpdateOne {
	esuo.mutation.ClearExtraServicePrices()
	return esuo
}

// RemoveExtraServicePriceIDs removes the "extra_service_prices" edge to ExtraServicePrice entities by IDs.
func (esuo *ExtraServiceUpdateOne) RemoveExtraServicePriceIDs(ids ...int64) *ExtraServiceUpdateOne {
	esuo.mutation.RemoveExtraServicePriceIDs(ids...)
	return esuo
}

// RemoveExtraServicePrices removes "extra_service_prices" edges to ExtraServicePrice entities.
func (esuo *ExtraServiceUpdateOne) RemoveExtraServicePrices(e ...*ExtraServicePrice) *ExtraServiceUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return esuo.RemoveExtraServicePriceIDs(ids...)
}

// Where appends a list predicates to the ExtraServiceUpdate builder.
func (esuo *ExtraServiceUpdateOne) Where(ps ...predicate.ExtraService) *ExtraServiceUpdateOne {
	esuo.mutation.Where(ps...)
	return esuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (esuo *ExtraServiceUpdateOne) Select(field string, fields ...string) *ExtraServiceUpdateOne {
	esuo.fields = append([]string{field}, fields...)
	return esuo
}

// Save executes the query and returns the updated ExtraService entity.
func (esuo *ExtraServiceUpdateOne) Save(ctx context.Context) (*ExtraService, error) {
	esuo.defaults()
	return withHooks(ctx, esuo.sqlSave, esuo.mutation, esuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (esuo *ExtraServiceUpdateOne) SaveX(ctx context.Context) *ExtraService {
	node, err := esuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (esuo *ExtraServiceUpdateOne) Exec(ctx context.Context) error {
	_, err := esuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esuo *ExtraServiceUpdateOne) ExecX(ctx context.Context) {
	if err := esuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (esuo *ExtraServiceUpdateOne) defaults() {
	if _, ok := esuo.mutation.UpdatedAt(); !ok {
		v := extraservice.UpdateDefaultUpdatedAt()
		esuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (esuo *ExtraServiceUpdateOne) check() error {
	if v, ok := esuo.mutation.ExtraServiceType(); ok {
		if err := extraservice.ExtraServiceTypeValidator(v); err != nil {
			return &ValidationError{Name: "extra_service_type", err: fmt.Errorf(`cep_ent: validator failed for field "ExtraService.extra_service_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (esuo *ExtraServiceUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ExtraServiceUpdateOne {
	esuo.modifiers = append(esuo.modifiers, modifiers...)
	return esuo
}

func (esuo *ExtraServiceUpdateOne) sqlSave(ctx context.Context) (_node *ExtraService, err error) {
	if err := esuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(extraservice.Table, extraservice.Columns, sqlgraph.NewFieldSpec(extraservice.FieldID, field.TypeInt64))
	id, ok := esuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "ExtraService.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := esuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, extraservice.FieldID)
		for _, f := range fields {
			if !extraservice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != extraservice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := esuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := esuo.mutation.CreatedBy(); ok {
		_spec.SetField(extraservice.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := esuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(extraservice.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := esuo.mutation.UpdatedBy(); ok {
		_spec.SetField(extraservice.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := esuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(extraservice.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := esuo.mutation.UpdatedAt(); ok {
		_spec.SetField(extraservice.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := esuo.mutation.DeletedAt(); ok {
		_spec.SetField(extraservice.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := esuo.mutation.Name(); ok {
		_spec.SetField(extraservice.FieldName, field.TypeString, value)
	}
	if value, ok := esuo.mutation.ExtraServiceType(); ok {
		_spec.SetField(extraservice.FieldExtraServiceType, field.TypeEnum, value)
	}
	if value, ok := esuo.mutation.StartedAt(); ok {
		_spec.SetField(extraservice.FieldStartedAt, field.TypeTime, value)
	}
	if esuo.mutation.StartedAtCleared() {
		_spec.ClearField(extraservice.FieldStartedAt, field.TypeTime)
	}
	if value, ok := esuo.mutation.FinishedAt(); ok {
		_spec.SetField(extraservice.FieldFinishedAt, field.TypeTime, value)
	}
	if esuo.mutation.FinishedAtCleared() {
		_spec.ClearField(extraservice.FieldFinishedAt, field.TypeTime)
	}
	if esuo.mutation.MissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   extraservice.MissionsTable,
			Columns: []string{extraservice.MissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esuo.mutation.RemovedMissionsIDs(); len(nodes) > 0 && !esuo.mutation.MissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   extraservice.MissionsTable,
			Columns: []string{extraservice.MissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esuo.mutation.MissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   extraservice.MissionsTable,
			Columns: []string{extraservice.MissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if esuo.mutation.MissionExtraServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   extraservice.MissionExtraServicesTable,
			Columns: []string{extraservice.MissionExtraServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionextraservice.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esuo.mutation.RemovedMissionExtraServicesIDs(); len(nodes) > 0 && !esuo.mutation.MissionExtraServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   extraservice.MissionExtraServicesTable,
			Columns: []string{extraservice.MissionExtraServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionextraservice.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esuo.mutation.MissionExtraServicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   extraservice.MissionExtraServicesTable,
			Columns: []string{extraservice.MissionExtraServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionextraservice.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if esuo.mutation.ExtraServicePricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   extraservice.ExtraServicePricesTable,
			Columns: []string{extraservice.ExtraServicePricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extraserviceprice.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esuo.mutation.RemovedExtraServicePricesIDs(); len(nodes) > 0 && !esuo.mutation.ExtraServicePricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   extraservice.ExtraServicePricesTable,
			Columns: []string{extraservice.ExtraServicePricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extraserviceprice.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esuo.mutation.ExtraServicePricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   extraservice.ExtraServicePricesTable,
			Columns: []string{extraservice.ExtraServicePricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extraserviceprice.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(esuo.modifiers...)
	_node = &ExtraService{config: esuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, esuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{extraservice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	esuo.mutation.done = true
	return _node, nil
}
