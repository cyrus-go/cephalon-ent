// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionbatch"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionconsumeorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// MissionConsumeOrder is the model entity for the MissionConsumeOrder schema.
type MissionConsumeOrder struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int64 `json:"created_by"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int64 `json:"updated_by"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at"`
	// 外键关联用户 id
	UserID int64 `json:"user_id"`
	// 任务 id，关联任务中枢的任务
	MissionID int64 `json:"mission_id"`
	// 任务订单的状态，注意不强关联任务的状态
	Status enums.MissionOrderStatus `json:"status"`
	// 任务消耗的本金 cep 量
	PureCep int64 `json:"pure_cep"`
	// 任务消耗的赠送 cep 量
	GiftCep int64 `json:"gift_cep"`
	// 任务类型，等于任务表的类型字段
	Type enums.MissionType `json:"type"`
	// 是否为计时类型任务
	IsTime bool `json:"is_time"`
	// 调用方式，API 调用或者微信小程序调用
	CallWay enums.MissionCallWay `json:"call_way"`
	// 订单序列号
	SerialNumber string `json:"serial_number"`
	// 任务开始执行时刻
	StartedAt time.Time `json:"started_at"`
	// 任务结束执行时刻
	FinishedAt time.Time `json:"finished_at"`
	// 任务批次外键
	MissionBatchID int64 `json:"mission_batch_id"`
	// 任务批次号，用于方便检索
	MissionBatchNumber string `json:"mission_batch_number"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MissionConsumeOrderQuery when eager-loading is set.
	Edges        MissionConsumeOrderEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MissionConsumeOrderEdges holds the relations/edges for other nodes in the graph.
type MissionConsumeOrderEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// CostBills holds the value of the cost_bills edge.
	CostBills []*CostBill `json:"cost_bills,omitempty"`
	// MissionProduceOrders holds the value of the mission_produce_orders edge.
	MissionProduceOrders []*MissionProduceOrder `json:"mission_produce_orders,omitempty"`
	// MissionBatch holds the value of the mission_batch edge.
	MissionBatch *MissionBatch `json:"mission_batch,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MissionConsumeOrderEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// CostBillsOrErr returns the CostBills value or an error if the edge
// was not loaded in eager-loading.
func (e MissionConsumeOrderEdges) CostBillsOrErr() ([]*CostBill, error) {
	if e.loadedTypes[1] {
		return e.CostBills, nil
	}
	return nil, &NotLoadedError{edge: "cost_bills"}
}

// MissionProduceOrdersOrErr returns the MissionProduceOrders value or an error if the edge
// was not loaded in eager-loading.
func (e MissionConsumeOrderEdges) MissionProduceOrdersOrErr() ([]*MissionProduceOrder, error) {
	if e.loadedTypes[2] {
		return e.MissionProduceOrders, nil
	}
	return nil, &NotLoadedError{edge: "mission_produce_orders"}
}

// MissionBatchOrErr returns the MissionBatch value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MissionConsumeOrderEdges) MissionBatchOrErr() (*MissionBatch, error) {
	if e.loadedTypes[3] {
		if e.MissionBatch == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: missionbatch.Label}
		}
		return e.MissionBatch, nil
	}
	return nil, &NotLoadedError{edge: "mission_batch"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MissionConsumeOrder) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case missionconsumeorder.FieldIsTime:
			values[i] = new(sql.NullBool)
		case missionconsumeorder.FieldID, missionconsumeorder.FieldCreatedBy, missionconsumeorder.FieldUpdatedBy, missionconsumeorder.FieldUserID, missionconsumeorder.FieldMissionID, missionconsumeorder.FieldPureCep, missionconsumeorder.FieldGiftCep, missionconsumeorder.FieldMissionBatchID:
			values[i] = new(sql.NullInt64)
		case missionconsumeorder.FieldStatus, missionconsumeorder.FieldType, missionconsumeorder.FieldCallWay, missionconsumeorder.FieldSerialNumber, missionconsumeorder.FieldMissionBatchNumber:
			values[i] = new(sql.NullString)
		case missionconsumeorder.FieldCreatedAt, missionconsumeorder.FieldUpdatedAt, missionconsumeorder.FieldDeletedAt, missionconsumeorder.FieldStartedAt, missionconsumeorder.FieldFinishedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MissionConsumeOrder fields.
func (mco *MissionConsumeOrder) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case missionconsumeorder.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mco.ID = int64(value.Int64)
		case missionconsumeorder.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				mco.CreatedBy = value.Int64
			}
		case missionconsumeorder.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				mco.UpdatedBy = value.Int64
			}
		case missionconsumeorder.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mco.CreatedAt = value.Time
			}
		case missionconsumeorder.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mco.UpdatedAt = value.Time
			}
		case missionconsumeorder.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				mco.DeletedAt = value.Time
			}
		case missionconsumeorder.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				mco.UserID = value.Int64
			}
		case missionconsumeorder.FieldMissionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mission_id", values[i])
			} else if value.Valid {
				mco.MissionID = value.Int64
			}
		case missionconsumeorder.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				mco.Status = enums.MissionOrderStatus(value.String)
			}
		case missionconsumeorder.FieldPureCep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pure_cep", values[i])
			} else if value.Valid {
				mco.PureCep = value.Int64
			}
		case missionconsumeorder.FieldGiftCep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gift_cep", values[i])
			} else if value.Valid {
				mco.GiftCep = value.Int64
			}
		case missionconsumeorder.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				mco.Type = enums.MissionType(value.String)
			}
		case missionconsumeorder.FieldIsTime:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_time", values[i])
			} else if value.Valid {
				mco.IsTime = value.Bool
			}
		case missionconsumeorder.FieldCallWay:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field call_way", values[i])
			} else if value.Valid {
				mco.CallWay = enums.MissionCallWay(value.String)
			}
		case missionconsumeorder.FieldSerialNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field serial_number", values[i])
			} else if value.Valid {
				mco.SerialNumber = value.String
			}
		case missionconsumeorder.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				mco.StartedAt = value.Time
			}
		case missionconsumeorder.FieldFinishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field finished_at", values[i])
			} else if value.Valid {
				mco.FinishedAt = value.Time
			}
		case missionconsumeorder.FieldMissionBatchID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mission_batch_id", values[i])
			} else if value.Valid {
				mco.MissionBatchID = value.Int64
			}
		case missionconsumeorder.FieldMissionBatchNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mission_batch_number", values[i])
			} else if value.Valid {
				mco.MissionBatchNumber = value.String
			}
		default:
			mco.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MissionConsumeOrder.
// This includes values selected through modifiers, order, etc.
func (mco *MissionConsumeOrder) Value(name string) (ent.Value, error) {
	return mco.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the MissionConsumeOrder entity.
func (mco *MissionConsumeOrder) QueryUser() *UserQuery {
	return NewMissionConsumeOrderClient(mco.config).QueryUser(mco)
}

// QueryCostBills queries the "cost_bills" edge of the MissionConsumeOrder entity.
func (mco *MissionConsumeOrder) QueryCostBills() *CostBillQuery {
	return NewMissionConsumeOrderClient(mco.config).QueryCostBills(mco)
}

// QueryMissionProduceOrders queries the "mission_produce_orders" edge of the MissionConsumeOrder entity.
func (mco *MissionConsumeOrder) QueryMissionProduceOrders() *MissionProduceOrderQuery {
	return NewMissionConsumeOrderClient(mco.config).QueryMissionProduceOrders(mco)
}

// QueryMissionBatch queries the "mission_batch" edge of the MissionConsumeOrder entity.
func (mco *MissionConsumeOrder) QueryMissionBatch() *MissionBatchQuery {
	return NewMissionConsumeOrderClient(mco.config).QueryMissionBatch(mco)
}

// Update returns a builder for updating this MissionConsumeOrder.
// Note that you need to call MissionConsumeOrder.Unwrap() before calling this method if this MissionConsumeOrder
// was returned from a transaction, and the transaction was committed or rolled back.
func (mco *MissionConsumeOrder) Update() *MissionConsumeOrderUpdateOne {
	return NewMissionConsumeOrderClient(mco.config).UpdateOne(mco)
}

// Unwrap unwraps the MissionConsumeOrder entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mco *MissionConsumeOrder) Unwrap() *MissionConsumeOrder {
	_tx, ok := mco.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: MissionConsumeOrder is not a transactional entity")
	}
	mco.config.driver = _tx.drv
	return mco
}

// String implements the fmt.Stringer.
func (mco *MissionConsumeOrder) String() string {
	var builder strings.Builder
	builder.WriteString("MissionConsumeOrder(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mco.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", mco.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", mco.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(mco.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(mco.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(mco.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", mco.UserID))
	builder.WriteString(", ")
	builder.WriteString("mission_id=")
	builder.WriteString(fmt.Sprintf("%v", mco.MissionID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", mco.Status))
	builder.WriteString(", ")
	builder.WriteString("pure_cep=")
	builder.WriteString(fmt.Sprintf("%v", mco.PureCep))
	builder.WriteString(", ")
	builder.WriteString("gift_cep=")
	builder.WriteString(fmt.Sprintf("%v", mco.GiftCep))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", mco.Type))
	builder.WriteString(", ")
	builder.WriteString("is_time=")
	builder.WriteString(fmt.Sprintf("%v", mco.IsTime))
	builder.WriteString(", ")
	builder.WriteString("call_way=")
	builder.WriteString(fmt.Sprintf("%v", mco.CallWay))
	builder.WriteString(", ")
	builder.WriteString("serial_number=")
	builder.WriteString(mco.SerialNumber)
	builder.WriteString(", ")
	builder.WriteString("started_at=")
	builder.WriteString(mco.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("finished_at=")
	builder.WriteString(mco.FinishedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("mission_batch_id=")
	builder.WriteString(fmt.Sprintf("%v", mco.MissionBatchID))
	builder.WriteString(", ")
	builder.WriteString("mission_batch_number=")
	builder.WriteString(mco.MissionBatchNumber)
	builder.WriteByte(')')
	return builder.String()
}

// MissionConsumeOrders is a parsable slice of MissionConsumeOrder.
type MissionConsumeOrders []*MissionConsumeOrder
