// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/vxaccount"
)

// VXAccount is the model entity for the VXAccount schema.
type VXAccount struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int64 `json:"created_by"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int64 `json:"updated_by"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at"`
	// 微信账户的 open_id
	OpenID string `json:"open_id"`
	// 微信账户的 union_id
	UnionID string `json:"union_id"`
	// 账户的权限级别，一般为 base
	Scope string `json:"scope"`
	// 会话密钥
	SessionKey string `json:"session_key"`
	// 外键用户 id
	UserID int64 `json:"user_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VXAccountQuery when eager-loading is set.
	Edges        VXAccountEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VXAccountEdges holds the relations/edges for other nodes in the graph.
type VXAccountEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VXAccountEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VXAccount) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vxaccount.FieldID, vxaccount.FieldCreatedBy, vxaccount.FieldUpdatedBy, vxaccount.FieldUserID:
			values[i] = new(sql.NullInt64)
		case vxaccount.FieldOpenID, vxaccount.FieldUnionID, vxaccount.FieldScope, vxaccount.FieldSessionKey:
			values[i] = new(sql.NullString)
		case vxaccount.FieldCreatedAt, vxaccount.FieldUpdatedAt, vxaccount.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VXAccount fields.
func (va *VXAccount) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vxaccount.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			va.ID = int64(value.Int64)
		case vxaccount.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				va.CreatedBy = value.Int64
			}
		case vxaccount.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				va.UpdatedBy = value.Int64
			}
		case vxaccount.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				va.CreatedAt = value.Time
			}
		case vxaccount.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				va.UpdatedAt = value.Time
			}
		case vxaccount.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				va.DeletedAt = value.Time
			}
		case vxaccount.FieldOpenID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field open_id", values[i])
			} else if value.Valid {
				va.OpenID = value.String
			}
		case vxaccount.FieldUnionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field union_id", values[i])
			} else if value.Valid {
				va.UnionID = value.String
			}
		case vxaccount.FieldScope:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scope", values[i])
			} else if value.Valid {
				va.Scope = value.String
			}
		case vxaccount.FieldSessionKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field session_key", values[i])
			} else if value.Valid {
				va.SessionKey = value.String
			}
		case vxaccount.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				va.UserID = value.Int64
			}
		default:
			va.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VXAccount.
// This includes values selected through modifiers, order, etc.
func (va *VXAccount) Value(name string) (ent.Value, error) {
	return va.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the VXAccount entity.
func (va *VXAccount) QueryUser() *UserQuery {
	return NewVXAccountClient(va.config).QueryUser(va)
}

// Update returns a builder for updating this VXAccount.
// Note that you need to call VXAccount.Unwrap() before calling this method if this VXAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (va *VXAccount) Update() *VXAccountUpdateOne {
	return NewVXAccountClient(va.config).UpdateOne(va)
}

// Unwrap unwraps the VXAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (va *VXAccount) Unwrap() *VXAccount {
	_tx, ok := va.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: VXAccount is not a transactional entity")
	}
	va.config.driver = _tx.drv
	return va
}

// String implements the fmt.Stringer.
func (va *VXAccount) String() string {
	var builder strings.Builder
	builder.WriteString("VXAccount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", va.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", va.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", va.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(va.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(va.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(va.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("open_id=")
	builder.WriteString(va.OpenID)
	builder.WriteString(", ")
	builder.WriteString("union_id=")
	builder.WriteString(va.UnionID)
	builder.WriteString(", ")
	builder.WriteString("scope=")
	builder.WriteString(va.Scope)
	builder.WriteString(", ")
	builder.WriteString("session_key=")
	builder.WriteString(va.SessionKey)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", va.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// VXAccounts is a parsable slice of VXAccount.
type VXAccounts []*VXAccount
