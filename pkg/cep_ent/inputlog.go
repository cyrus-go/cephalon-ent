// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/inputlog"
)

// 输入日志，初期风变专用
type InputLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int64 `json:"created_by"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int64 `json:"updated_by"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at"`
	// 请求追踪 id
	TraceID int64 `json:"trace_id"`
	// 请求头
	Headers string `json:"headers"`
	// 请求体
	Body string `json:"body"`
	// Query 参数
	Query string `json:"query"`
	// 请求地址
	URL string `json:"url"`
	// 客户端 IP
	IP string `json:"ip"`
	// 调用方
	Caller string `json:"caller"`
	// 请求方式
	Method inputlog.Method `json:"method"`
	// 记录调用者的密钥对
	HmacKey      string `json:"hmac_key"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InputLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case inputlog.FieldID, inputlog.FieldCreatedBy, inputlog.FieldUpdatedBy, inputlog.FieldTraceID:
			values[i] = new(sql.NullInt64)
		case inputlog.FieldHeaders, inputlog.FieldBody, inputlog.FieldQuery, inputlog.FieldURL, inputlog.FieldIP, inputlog.FieldCaller, inputlog.FieldMethod, inputlog.FieldHmacKey:
			values[i] = new(sql.NullString)
		case inputlog.FieldCreatedAt, inputlog.FieldUpdatedAt, inputlog.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InputLog fields.
func (il *InputLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case inputlog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			il.ID = int64(value.Int64)
		case inputlog.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				il.CreatedBy = value.Int64
			}
		case inputlog.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				il.UpdatedBy = value.Int64
			}
		case inputlog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				il.CreatedAt = value.Time
			}
		case inputlog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				il.UpdatedAt = value.Time
			}
		case inputlog.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				il.DeletedAt = value.Time
			}
		case inputlog.FieldTraceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field trace_id", values[i])
			} else if value.Valid {
				il.TraceID = value.Int64
			}
		case inputlog.FieldHeaders:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field headers", values[i])
			} else if value.Valid {
				il.Headers = value.String
			}
		case inputlog.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				il.Body = value.String
			}
		case inputlog.FieldQuery:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field query", values[i])
			} else if value.Valid {
				il.Query = value.String
			}
		case inputlog.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				il.URL = value.String
			}
		case inputlog.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				il.IP = value.String
			}
		case inputlog.FieldCaller:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field caller", values[i])
			} else if value.Valid {
				il.Caller = value.String
			}
		case inputlog.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				il.Method = inputlog.Method(value.String)
			}
		case inputlog.FieldHmacKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hmac_key", values[i])
			} else if value.Valid {
				il.HmacKey = value.String
			}
		default:
			il.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the InputLog.
// This includes values selected through modifiers, order, etc.
func (il *InputLog) Value(name string) (ent.Value, error) {
	return il.selectValues.Get(name)
}

// Update returns a builder for updating this InputLog.
// Note that you need to call InputLog.Unwrap() before calling this method if this InputLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (il *InputLog) Update() *InputLogUpdateOne {
	return NewInputLogClient(il.config).UpdateOne(il)
}

// Unwrap unwraps the InputLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (il *InputLog) Unwrap() *InputLog {
	_tx, ok := il.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: InputLog is not a transactional entity")
	}
	il.config.driver = _tx.drv
	return il
}

// String implements the fmt.Stringer.
func (il *InputLog) String() string {
	var builder strings.Builder
	builder.WriteString("InputLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", il.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", il.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", il.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(il.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(il.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(il.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("trace_id=")
	builder.WriteString(fmt.Sprintf("%v", il.TraceID))
	builder.WriteString(", ")
	builder.WriteString("headers=")
	builder.WriteString(il.Headers)
	builder.WriteString(", ")
	builder.WriteString("body=")
	builder.WriteString(il.Body)
	builder.WriteString(", ")
	builder.WriteString("query=")
	builder.WriteString(il.Query)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(il.URL)
	builder.WriteString(", ")
	builder.WriteString("ip=")
	builder.WriteString(il.IP)
	builder.WriteString(", ")
	builder.WriteString("caller=")
	builder.WriteString(il.Caller)
	builder.WriteString(", ")
	builder.WriteString("method=")
	builder.WriteString(fmt.Sprintf("%v", il.Method))
	builder.WriteString(", ")
	builder.WriteString("hmac_key=")
	builder.WriteString(il.HmacKey)
	builder.WriteByte(')')
	return builder.String()
}

// InputLogs is a parsable slice of InputLog.
type InputLogs []*InputLog
