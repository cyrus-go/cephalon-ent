// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/rechargecampaignruleoversea"
)

// RechargeCampaignRuleOverseaCreate is the builder for creating a RechargeCampaignRuleOversea entity.
type RechargeCampaignRuleOverseaCreate struct {
	config
	mutation *RechargeCampaignRuleOverseaMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (rcroc *RechargeCampaignRuleOverseaCreate) SetCreatedBy(i int64) *RechargeCampaignRuleOverseaCreate {
	rcroc.mutation.SetCreatedBy(i)
	return rcroc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (rcroc *RechargeCampaignRuleOverseaCreate) SetNillableCreatedBy(i *int64) *RechargeCampaignRuleOverseaCreate {
	if i != nil {
		rcroc.SetCreatedBy(*i)
	}
	return rcroc
}

// SetUpdatedBy sets the "updated_by" field.
func (rcroc *RechargeCampaignRuleOverseaCreate) SetUpdatedBy(i int64) *RechargeCampaignRuleOverseaCreate {
	rcroc.mutation.SetUpdatedBy(i)
	return rcroc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (rcroc *RechargeCampaignRuleOverseaCreate) SetNillableUpdatedBy(i *int64) *RechargeCampaignRuleOverseaCreate {
	if i != nil {
		rcroc.SetUpdatedBy(*i)
	}
	return rcroc
}

// SetCreatedAt sets the "created_at" field.
func (rcroc *RechargeCampaignRuleOverseaCreate) SetCreatedAt(t time.Time) *RechargeCampaignRuleOverseaCreate {
	rcroc.mutation.SetCreatedAt(t)
	return rcroc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rcroc *RechargeCampaignRuleOverseaCreate) SetNillableCreatedAt(t *time.Time) *RechargeCampaignRuleOverseaCreate {
	if t != nil {
		rcroc.SetCreatedAt(*t)
	}
	return rcroc
}

// SetUpdatedAt sets the "updated_at" field.
func (rcroc *RechargeCampaignRuleOverseaCreate) SetUpdatedAt(t time.Time) *RechargeCampaignRuleOverseaCreate {
	rcroc.mutation.SetUpdatedAt(t)
	return rcroc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rcroc *RechargeCampaignRuleOverseaCreate) SetNillableUpdatedAt(t *time.Time) *RechargeCampaignRuleOverseaCreate {
	if t != nil {
		rcroc.SetUpdatedAt(*t)
	}
	return rcroc
}

// SetDeletedAt sets the "deleted_at" field.
func (rcroc *RechargeCampaignRuleOverseaCreate) SetDeletedAt(t time.Time) *RechargeCampaignRuleOverseaCreate {
	rcroc.mutation.SetDeletedAt(t)
	return rcroc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rcroc *RechargeCampaignRuleOverseaCreate) SetNillableDeletedAt(t *time.Time) *RechargeCampaignRuleOverseaCreate {
	if t != nil {
		rcroc.SetDeletedAt(*t)
	}
	return rcroc
}

// SetDollarPrice sets the "dollar_price" field.
func (rcroc *RechargeCampaignRuleOverseaCreate) SetDollarPrice(f float64) *RechargeCampaignRuleOverseaCreate {
	rcroc.mutation.SetDollarPrice(f)
	return rcroc
}

// SetNillableDollarPrice sets the "dollar_price" field if the given value is not nil.
func (rcroc *RechargeCampaignRuleOverseaCreate) SetNillableDollarPrice(f *float64) *RechargeCampaignRuleOverseaCreate {
	if f != nil {
		rcroc.SetDollarPrice(*f)
	}
	return rcroc
}

// SetRmbPrice sets the "rmb_price" field.
func (rcroc *RechargeCampaignRuleOverseaCreate) SetRmbPrice(f float64) *RechargeCampaignRuleOverseaCreate {
	rcroc.mutation.SetRmbPrice(f)
	return rcroc
}

// SetNillableRmbPrice sets the "rmb_price" field if the given value is not nil.
func (rcroc *RechargeCampaignRuleOverseaCreate) SetNillableRmbPrice(f *float64) *RechargeCampaignRuleOverseaCreate {
	if f != nil {
		rcroc.SetRmbPrice(*f)
	}
	return rcroc
}

// SetOriginalRmbPrice sets the "original_rmb_price" field.
func (rcroc *RechargeCampaignRuleOverseaCreate) SetOriginalRmbPrice(f float64) *RechargeCampaignRuleOverseaCreate {
	rcroc.mutation.SetOriginalRmbPrice(f)
	return rcroc
}

// SetNillableOriginalRmbPrice sets the "original_rmb_price" field if the given value is not nil.
func (rcroc *RechargeCampaignRuleOverseaCreate) SetNillableOriginalRmbPrice(f *float64) *RechargeCampaignRuleOverseaCreate {
	if f != nil {
		rcroc.SetOriginalRmbPrice(*f)
	}
	return rcroc
}

// SetTotalCep sets the "total_cep" field.
func (rcroc *RechargeCampaignRuleOverseaCreate) SetTotalCep(i int64) *RechargeCampaignRuleOverseaCreate {
	rcroc.mutation.SetTotalCep(i)
	return rcroc
}

// SetNillableTotalCep sets the "total_cep" field if the given value is not nil.
func (rcroc *RechargeCampaignRuleOverseaCreate) SetNillableTotalCep(i *int64) *RechargeCampaignRuleOverseaCreate {
	if i != nil {
		rcroc.SetTotalCep(*i)
	}
	return rcroc
}

// SetBeforeDiscountCep sets the "before_discount_cep" field.
func (rcroc *RechargeCampaignRuleOverseaCreate) SetBeforeDiscountCep(i int64) *RechargeCampaignRuleOverseaCreate {
	rcroc.mutation.SetBeforeDiscountCep(i)
	return rcroc
}

// SetNillableBeforeDiscountCep sets the "before_discount_cep" field if the given value is not nil.
func (rcroc *RechargeCampaignRuleOverseaCreate) SetNillableBeforeDiscountCep(i *int64) *RechargeCampaignRuleOverseaCreate {
	if i != nil {
		rcroc.SetBeforeDiscountCep(*i)
	}
	return rcroc
}

// SetDiscountRatio sets the "discount_ratio" field.
func (rcroc *RechargeCampaignRuleOverseaCreate) SetDiscountRatio(i int64) *RechargeCampaignRuleOverseaCreate {
	rcroc.mutation.SetDiscountRatio(i)
	return rcroc
}

// SetNillableDiscountRatio sets the "discount_ratio" field if the given value is not nil.
func (rcroc *RechargeCampaignRuleOverseaCreate) SetNillableDiscountRatio(i *int64) *RechargeCampaignRuleOverseaCreate {
	if i != nil {
		rcroc.SetDiscountRatio(*i)
	}
	return rcroc
}

// SetID sets the "id" field.
func (rcroc *RechargeCampaignRuleOverseaCreate) SetID(i int64) *RechargeCampaignRuleOverseaCreate {
	rcroc.mutation.SetID(i)
	return rcroc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rcroc *RechargeCampaignRuleOverseaCreate) SetNillableID(i *int64) *RechargeCampaignRuleOverseaCreate {
	if i != nil {
		rcroc.SetID(*i)
	}
	return rcroc
}

// Mutation returns the RechargeCampaignRuleOverseaMutation object of the builder.
func (rcroc *RechargeCampaignRuleOverseaCreate) Mutation() *RechargeCampaignRuleOverseaMutation {
	return rcroc.mutation
}

// Save creates the RechargeCampaignRuleOversea in the database.
func (rcroc *RechargeCampaignRuleOverseaCreate) Save(ctx context.Context) (*RechargeCampaignRuleOversea, error) {
	rcroc.defaults()
	return withHooks(ctx, rcroc.sqlSave, rcroc.mutation, rcroc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rcroc *RechargeCampaignRuleOverseaCreate) SaveX(ctx context.Context) *RechargeCampaignRuleOversea {
	v, err := rcroc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcroc *RechargeCampaignRuleOverseaCreate) Exec(ctx context.Context) error {
	_, err := rcroc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcroc *RechargeCampaignRuleOverseaCreate) ExecX(ctx context.Context) {
	if err := rcroc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rcroc *RechargeCampaignRuleOverseaCreate) defaults() {
	if _, ok := rcroc.mutation.CreatedBy(); !ok {
		v := rechargecampaignruleoversea.DefaultCreatedBy
		rcroc.mutation.SetCreatedBy(v)
	}
	if _, ok := rcroc.mutation.UpdatedBy(); !ok {
		v := rechargecampaignruleoversea.DefaultUpdatedBy
		rcroc.mutation.SetUpdatedBy(v)
	}
	if _, ok := rcroc.mutation.CreatedAt(); !ok {
		v := rechargecampaignruleoversea.DefaultCreatedAt()
		rcroc.mutation.SetCreatedAt(v)
	}
	if _, ok := rcroc.mutation.UpdatedAt(); !ok {
		v := rechargecampaignruleoversea.DefaultUpdatedAt()
		rcroc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rcroc.mutation.DeletedAt(); !ok {
		v := rechargecampaignruleoversea.DefaultDeletedAt
		rcroc.mutation.SetDeletedAt(v)
	}
	if _, ok := rcroc.mutation.DollarPrice(); !ok {
		v := rechargecampaignruleoversea.DefaultDollarPrice
		rcroc.mutation.SetDollarPrice(v)
	}
	if _, ok := rcroc.mutation.RmbPrice(); !ok {
		v := rechargecampaignruleoversea.DefaultRmbPrice
		rcroc.mutation.SetRmbPrice(v)
	}
	if _, ok := rcroc.mutation.OriginalRmbPrice(); !ok {
		v := rechargecampaignruleoversea.DefaultOriginalRmbPrice
		rcroc.mutation.SetOriginalRmbPrice(v)
	}
	if _, ok := rcroc.mutation.TotalCep(); !ok {
		v := rechargecampaignruleoversea.DefaultTotalCep
		rcroc.mutation.SetTotalCep(v)
	}
	if _, ok := rcroc.mutation.BeforeDiscountCep(); !ok {
		v := rechargecampaignruleoversea.DefaultBeforeDiscountCep
		rcroc.mutation.SetBeforeDiscountCep(v)
	}
	if _, ok := rcroc.mutation.DiscountRatio(); !ok {
		v := rechargecampaignruleoversea.DefaultDiscountRatio
		rcroc.mutation.SetDiscountRatio(v)
	}
	if _, ok := rcroc.mutation.ID(); !ok {
		v := rechargecampaignruleoversea.DefaultID()
		rcroc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rcroc *RechargeCampaignRuleOverseaCreate) check() error {
	if _, ok := rcroc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "RechargeCampaignRuleOversea.created_by"`)}
	}
	if _, ok := rcroc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "RechargeCampaignRuleOversea.updated_by"`)}
	}
	if _, ok := rcroc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "RechargeCampaignRuleOversea.created_at"`)}
	}
	if _, ok := rcroc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "RechargeCampaignRuleOversea.updated_at"`)}
	}
	if _, ok := rcroc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "RechargeCampaignRuleOversea.deleted_at"`)}
	}
	if _, ok := rcroc.mutation.DollarPrice(); !ok {
		return &ValidationError{Name: "dollar_price", err: errors.New(`cep_ent: missing required field "RechargeCampaignRuleOversea.dollar_price"`)}
	}
	if _, ok := rcroc.mutation.RmbPrice(); !ok {
		return &ValidationError{Name: "rmb_price", err: errors.New(`cep_ent: missing required field "RechargeCampaignRuleOversea.rmb_price"`)}
	}
	if _, ok := rcroc.mutation.OriginalRmbPrice(); !ok {
		return &ValidationError{Name: "original_rmb_price", err: errors.New(`cep_ent: missing required field "RechargeCampaignRuleOversea.original_rmb_price"`)}
	}
	if _, ok := rcroc.mutation.TotalCep(); !ok {
		return &ValidationError{Name: "total_cep", err: errors.New(`cep_ent: missing required field "RechargeCampaignRuleOversea.total_cep"`)}
	}
	if _, ok := rcroc.mutation.BeforeDiscountCep(); !ok {
		return &ValidationError{Name: "before_discount_cep", err: errors.New(`cep_ent: missing required field "RechargeCampaignRuleOversea.before_discount_cep"`)}
	}
	if _, ok := rcroc.mutation.DiscountRatio(); !ok {
		return &ValidationError{Name: "discount_ratio", err: errors.New(`cep_ent: missing required field "RechargeCampaignRuleOversea.discount_ratio"`)}
	}
	return nil
}

func (rcroc *RechargeCampaignRuleOverseaCreate) sqlSave(ctx context.Context) (*RechargeCampaignRuleOversea, error) {
	if err := rcroc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rcroc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rcroc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	rcroc.mutation.id = &_node.ID
	rcroc.mutation.done = true
	return _node, nil
}

func (rcroc *RechargeCampaignRuleOverseaCreate) createSpec() (*RechargeCampaignRuleOversea, *sqlgraph.CreateSpec) {
	var (
		_node = &RechargeCampaignRuleOversea{config: rcroc.config}
		_spec = sqlgraph.NewCreateSpec(rechargecampaignruleoversea.Table, sqlgraph.NewFieldSpec(rechargecampaignruleoversea.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = rcroc.conflict
	if id, ok := rcroc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rcroc.mutation.CreatedBy(); ok {
		_spec.SetField(rechargecampaignruleoversea.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := rcroc.mutation.UpdatedBy(); ok {
		_spec.SetField(rechargecampaignruleoversea.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := rcroc.mutation.CreatedAt(); ok {
		_spec.SetField(rechargecampaignruleoversea.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rcroc.mutation.UpdatedAt(); ok {
		_spec.SetField(rechargecampaignruleoversea.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rcroc.mutation.DeletedAt(); ok {
		_spec.SetField(rechargecampaignruleoversea.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := rcroc.mutation.DollarPrice(); ok {
		_spec.SetField(rechargecampaignruleoversea.FieldDollarPrice, field.TypeFloat64, value)
		_node.DollarPrice = value
	}
	if value, ok := rcroc.mutation.RmbPrice(); ok {
		_spec.SetField(rechargecampaignruleoversea.FieldRmbPrice, field.TypeFloat64, value)
		_node.RmbPrice = value
	}
	if value, ok := rcroc.mutation.OriginalRmbPrice(); ok {
		_spec.SetField(rechargecampaignruleoversea.FieldOriginalRmbPrice, field.TypeFloat64, value)
		_node.OriginalRmbPrice = value
	}
	if value, ok := rcroc.mutation.TotalCep(); ok {
		_spec.SetField(rechargecampaignruleoversea.FieldTotalCep, field.TypeInt64, value)
		_node.TotalCep = value
	}
	if value, ok := rcroc.mutation.BeforeDiscountCep(); ok {
		_spec.SetField(rechargecampaignruleoversea.FieldBeforeDiscountCep, field.TypeInt64, value)
		_node.BeforeDiscountCep = value
	}
	if value, ok := rcroc.mutation.DiscountRatio(); ok {
		_spec.SetField(rechargecampaignruleoversea.FieldDiscountRatio, field.TypeInt64, value)
		_node.DiscountRatio = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RechargeCampaignRuleOversea.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RechargeCampaignRuleOverseaUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (rcroc *RechargeCampaignRuleOverseaCreate) OnConflict(opts ...sql.ConflictOption) *RechargeCampaignRuleOverseaUpsertOne {
	rcroc.conflict = opts
	return &RechargeCampaignRuleOverseaUpsertOne{
		create: rcroc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RechargeCampaignRuleOversea.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcroc *RechargeCampaignRuleOverseaCreate) OnConflictColumns(columns ...string) *RechargeCampaignRuleOverseaUpsertOne {
	rcroc.conflict = append(rcroc.conflict, sql.ConflictColumns(columns...))
	return &RechargeCampaignRuleOverseaUpsertOne{
		create: rcroc,
	}
}

type (
	// RechargeCampaignRuleOverseaUpsertOne is the builder for "upsert"-ing
	//  one RechargeCampaignRuleOversea node.
	RechargeCampaignRuleOverseaUpsertOne struct {
		create *RechargeCampaignRuleOverseaCreate
	}

	// RechargeCampaignRuleOverseaUpsert is the "OnConflict" setter.
	RechargeCampaignRuleOverseaUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *RechargeCampaignRuleOverseaUpsert) SetCreatedBy(v int64) *RechargeCampaignRuleOverseaUpsert {
	u.Set(rechargecampaignruleoversea.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *RechargeCampaignRuleOverseaUpsert) UpdateCreatedBy() *RechargeCampaignRuleOverseaUpsert {
	u.SetExcluded(rechargecampaignruleoversea.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *RechargeCampaignRuleOverseaUpsert) AddCreatedBy(v int64) *RechargeCampaignRuleOverseaUpsert {
	u.Add(rechargecampaignruleoversea.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *RechargeCampaignRuleOverseaUpsert) SetUpdatedBy(v int64) *RechargeCampaignRuleOverseaUpsert {
	u.Set(rechargecampaignruleoversea.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *RechargeCampaignRuleOverseaUpsert) UpdateUpdatedBy() *RechargeCampaignRuleOverseaUpsert {
	u.SetExcluded(rechargecampaignruleoversea.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *RechargeCampaignRuleOverseaUpsert) AddUpdatedBy(v int64) *RechargeCampaignRuleOverseaUpsert {
	u.Add(rechargecampaignruleoversea.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RechargeCampaignRuleOverseaUpsert) SetUpdatedAt(v time.Time) *RechargeCampaignRuleOverseaUpsert {
	u.Set(rechargecampaignruleoversea.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RechargeCampaignRuleOverseaUpsert) UpdateUpdatedAt() *RechargeCampaignRuleOverseaUpsert {
	u.SetExcluded(rechargecampaignruleoversea.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RechargeCampaignRuleOverseaUpsert) SetDeletedAt(v time.Time) *RechargeCampaignRuleOverseaUpsert {
	u.Set(rechargecampaignruleoversea.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RechargeCampaignRuleOverseaUpsert) UpdateDeletedAt() *RechargeCampaignRuleOverseaUpsert {
	u.SetExcluded(rechargecampaignruleoversea.FieldDeletedAt)
	return u
}

// SetDollarPrice sets the "dollar_price" field.
func (u *RechargeCampaignRuleOverseaUpsert) SetDollarPrice(v float64) *RechargeCampaignRuleOverseaUpsert {
	u.Set(rechargecampaignruleoversea.FieldDollarPrice, v)
	return u
}

// UpdateDollarPrice sets the "dollar_price" field to the value that was provided on create.
func (u *RechargeCampaignRuleOverseaUpsert) UpdateDollarPrice() *RechargeCampaignRuleOverseaUpsert {
	u.SetExcluded(rechargecampaignruleoversea.FieldDollarPrice)
	return u
}

// AddDollarPrice adds v to the "dollar_price" field.
func (u *RechargeCampaignRuleOverseaUpsert) AddDollarPrice(v float64) *RechargeCampaignRuleOverseaUpsert {
	u.Add(rechargecampaignruleoversea.FieldDollarPrice, v)
	return u
}

// SetRmbPrice sets the "rmb_price" field.
func (u *RechargeCampaignRuleOverseaUpsert) SetRmbPrice(v float64) *RechargeCampaignRuleOverseaUpsert {
	u.Set(rechargecampaignruleoversea.FieldRmbPrice, v)
	return u
}

// UpdateRmbPrice sets the "rmb_price" field to the value that was provided on create.
func (u *RechargeCampaignRuleOverseaUpsert) UpdateRmbPrice() *RechargeCampaignRuleOverseaUpsert {
	u.SetExcluded(rechargecampaignruleoversea.FieldRmbPrice)
	return u
}

// AddRmbPrice adds v to the "rmb_price" field.
func (u *RechargeCampaignRuleOverseaUpsert) AddRmbPrice(v float64) *RechargeCampaignRuleOverseaUpsert {
	u.Add(rechargecampaignruleoversea.FieldRmbPrice, v)
	return u
}

// SetOriginalRmbPrice sets the "original_rmb_price" field.
func (u *RechargeCampaignRuleOverseaUpsert) SetOriginalRmbPrice(v float64) *RechargeCampaignRuleOverseaUpsert {
	u.Set(rechargecampaignruleoversea.FieldOriginalRmbPrice, v)
	return u
}

// UpdateOriginalRmbPrice sets the "original_rmb_price" field to the value that was provided on create.
func (u *RechargeCampaignRuleOverseaUpsert) UpdateOriginalRmbPrice() *RechargeCampaignRuleOverseaUpsert {
	u.SetExcluded(rechargecampaignruleoversea.FieldOriginalRmbPrice)
	return u
}

// AddOriginalRmbPrice adds v to the "original_rmb_price" field.
func (u *RechargeCampaignRuleOverseaUpsert) AddOriginalRmbPrice(v float64) *RechargeCampaignRuleOverseaUpsert {
	u.Add(rechargecampaignruleoversea.FieldOriginalRmbPrice, v)
	return u
}

// SetTotalCep sets the "total_cep" field.
func (u *RechargeCampaignRuleOverseaUpsert) SetTotalCep(v int64) *RechargeCampaignRuleOverseaUpsert {
	u.Set(rechargecampaignruleoversea.FieldTotalCep, v)
	return u
}

// UpdateTotalCep sets the "total_cep" field to the value that was provided on create.
func (u *RechargeCampaignRuleOverseaUpsert) UpdateTotalCep() *RechargeCampaignRuleOverseaUpsert {
	u.SetExcluded(rechargecampaignruleoversea.FieldTotalCep)
	return u
}

// AddTotalCep adds v to the "total_cep" field.
func (u *RechargeCampaignRuleOverseaUpsert) AddTotalCep(v int64) *RechargeCampaignRuleOverseaUpsert {
	u.Add(rechargecampaignruleoversea.FieldTotalCep, v)
	return u
}

// SetBeforeDiscountCep sets the "before_discount_cep" field.
func (u *RechargeCampaignRuleOverseaUpsert) SetBeforeDiscountCep(v int64) *RechargeCampaignRuleOverseaUpsert {
	u.Set(rechargecampaignruleoversea.FieldBeforeDiscountCep, v)
	return u
}

// UpdateBeforeDiscountCep sets the "before_discount_cep" field to the value that was provided on create.
func (u *RechargeCampaignRuleOverseaUpsert) UpdateBeforeDiscountCep() *RechargeCampaignRuleOverseaUpsert {
	u.SetExcluded(rechargecampaignruleoversea.FieldBeforeDiscountCep)
	return u
}

// AddBeforeDiscountCep adds v to the "before_discount_cep" field.
func (u *RechargeCampaignRuleOverseaUpsert) AddBeforeDiscountCep(v int64) *RechargeCampaignRuleOverseaUpsert {
	u.Add(rechargecampaignruleoversea.FieldBeforeDiscountCep, v)
	return u
}

// SetDiscountRatio sets the "discount_ratio" field.
func (u *RechargeCampaignRuleOverseaUpsert) SetDiscountRatio(v int64) *RechargeCampaignRuleOverseaUpsert {
	u.Set(rechargecampaignruleoversea.FieldDiscountRatio, v)
	return u
}

// UpdateDiscountRatio sets the "discount_ratio" field to the value that was provided on create.
func (u *RechargeCampaignRuleOverseaUpsert) UpdateDiscountRatio() *RechargeCampaignRuleOverseaUpsert {
	u.SetExcluded(rechargecampaignruleoversea.FieldDiscountRatio)
	return u
}

// AddDiscountRatio adds v to the "discount_ratio" field.
func (u *RechargeCampaignRuleOverseaUpsert) AddDiscountRatio(v int64) *RechargeCampaignRuleOverseaUpsert {
	u.Add(rechargecampaignruleoversea.FieldDiscountRatio, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.RechargeCampaignRuleOversea.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(rechargecampaignruleoversea.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RechargeCampaignRuleOverseaUpsertOne) UpdateNewValues() *RechargeCampaignRuleOverseaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(rechargecampaignruleoversea.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(rechargecampaignruleoversea.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RechargeCampaignRuleOversea.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RechargeCampaignRuleOverseaUpsertOne) Ignore() *RechargeCampaignRuleOverseaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RechargeCampaignRuleOverseaUpsertOne) DoNothing() *RechargeCampaignRuleOverseaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RechargeCampaignRuleOverseaCreate.OnConflict
// documentation for more info.
func (u *RechargeCampaignRuleOverseaUpsertOne) Update(set func(*RechargeCampaignRuleOverseaUpsert)) *RechargeCampaignRuleOverseaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RechargeCampaignRuleOverseaUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *RechargeCampaignRuleOverseaUpsertOne) SetCreatedBy(v int64) *RechargeCampaignRuleOverseaUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *RechargeCampaignRuleOverseaUpsertOne) AddCreatedBy(v int64) *RechargeCampaignRuleOverseaUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *RechargeCampaignRuleOverseaUpsertOne) UpdateCreatedBy() *RechargeCampaignRuleOverseaUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *RechargeCampaignRuleOverseaUpsertOne) SetUpdatedBy(v int64) *RechargeCampaignRuleOverseaUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *RechargeCampaignRuleOverseaUpsertOne) AddUpdatedBy(v int64) *RechargeCampaignRuleOverseaUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *RechargeCampaignRuleOverseaUpsertOne) UpdateUpdatedBy() *RechargeCampaignRuleOverseaUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RechargeCampaignRuleOverseaUpsertOne) SetUpdatedAt(v time.Time) *RechargeCampaignRuleOverseaUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RechargeCampaignRuleOverseaUpsertOne) UpdateUpdatedAt() *RechargeCampaignRuleOverseaUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RechargeCampaignRuleOverseaUpsertOne) SetDeletedAt(v time.Time) *RechargeCampaignRuleOverseaUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RechargeCampaignRuleOverseaUpsertOne) UpdateDeletedAt() *RechargeCampaignRuleOverseaUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDollarPrice sets the "dollar_price" field.
func (u *RechargeCampaignRuleOverseaUpsertOne) SetDollarPrice(v float64) *RechargeCampaignRuleOverseaUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.SetDollarPrice(v)
	})
}

// AddDollarPrice adds v to the "dollar_price" field.
func (u *RechargeCampaignRuleOverseaUpsertOne) AddDollarPrice(v float64) *RechargeCampaignRuleOverseaUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.AddDollarPrice(v)
	})
}

// UpdateDollarPrice sets the "dollar_price" field to the value that was provided on create.
func (u *RechargeCampaignRuleOverseaUpsertOne) UpdateDollarPrice() *RechargeCampaignRuleOverseaUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.UpdateDollarPrice()
	})
}

// SetRmbPrice sets the "rmb_price" field.
func (u *RechargeCampaignRuleOverseaUpsertOne) SetRmbPrice(v float64) *RechargeCampaignRuleOverseaUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.SetRmbPrice(v)
	})
}

// AddRmbPrice adds v to the "rmb_price" field.
func (u *RechargeCampaignRuleOverseaUpsertOne) AddRmbPrice(v float64) *RechargeCampaignRuleOverseaUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.AddRmbPrice(v)
	})
}

// UpdateRmbPrice sets the "rmb_price" field to the value that was provided on create.
func (u *RechargeCampaignRuleOverseaUpsertOne) UpdateRmbPrice() *RechargeCampaignRuleOverseaUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.UpdateRmbPrice()
	})
}

// SetOriginalRmbPrice sets the "original_rmb_price" field.
func (u *RechargeCampaignRuleOverseaUpsertOne) SetOriginalRmbPrice(v float64) *RechargeCampaignRuleOverseaUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.SetOriginalRmbPrice(v)
	})
}

// AddOriginalRmbPrice adds v to the "original_rmb_price" field.
func (u *RechargeCampaignRuleOverseaUpsertOne) AddOriginalRmbPrice(v float64) *RechargeCampaignRuleOverseaUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.AddOriginalRmbPrice(v)
	})
}

// UpdateOriginalRmbPrice sets the "original_rmb_price" field to the value that was provided on create.
func (u *RechargeCampaignRuleOverseaUpsertOne) UpdateOriginalRmbPrice() *RechargeCampaignRuleOverseaUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.UpdateOriginalRmbPrice()
	})
}

// SetTotalCep sets the "total_cep" field.
func (u *RechargeCampaignRuleOverseaUpsertOne) SetTotalCep(v int64) *RechargeCampaignRuleOverseaUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.SetTotalCep(v)
	})
}

// AddTotalCep adds v to the "total_cep" field.
func (u *RechargeCampaignRuleOverseaUpsertOne) AddTotalCep(v int64) *RechargeCampaignRuleOverseaUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.AddTotalCep(v)
	})
}

// UpdateTotalCep sets the "total_cep" field to the value that was provided on create.
func (u *RechargeCampaignRuleOverseaUpsertOne) UpdateTotalCep() *RechargeCampaignRuleOverseaUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.UpdateTotalCep()
	})
}

// SetBeforeDiscountCep sets the "before_discount_cep" field.
func (u *RechargeCampaignRuleOverseaUpsertOne) SetBeforeDiscountCep(v int64) *RechargeCampaignRuleOverseaUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.SetBeforeDiscountCep(v)
	})
}

// AddBeforeDiscountCep adds v to the "before_discount_cep" field.
func (u *RechargeCampaignRuleOverseaUpsertOne) AddBeforeDiscountCep(v int64) *RechargeCampaignRuleOverseaUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.AddBeforeDiscountCep(v)
	})
}

// UpdateBeforeDiscountCep sets the "before_discount_cep" field to the value that was provided on create.
func (u *RechargeCampaignRuleOverseaUpsertOne) UpdateBeforeDiscountCep() *RechargeCampaignRuleOverseaUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.UpdateBeforeDiscountCep()
	})
}

// SetDiscountRatio sets the "discount_ratio" field.
func (u *RechargeCampaignRuleOverseaUpsertOne) SetDiscountRatio(v int64) *RechargeCampaignRuleOverseaUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.SetDiscountRatio(v)
	})
}

// AddDiscountRatio adds v to the "discount_ratio" field.
func (u *RechargeCampaignRuleOverseaUpsertOne) AddDiscountRatio(v int64) *RechargeCampaignRuleOverseaUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.AddDiscountRatio(v)
	})
}

// UpdateDiscountRatio sets the "discount_ratio" field to the value that was provided on create.
func (u *RechargeCampaignRuleOverseaUpsertOne) UpdateDiscountRatio() *RechargeCampaignRuleOverseaUpsertOne {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.UpdateDiscountRatio()
	})
}

// Exec executes the query.
func (u *RechargeCampaignRuleOverseaUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for RechargeCampaignRuleOverseaCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RechargeCampaignRuleOverseaUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RechargeCampaignRuleOverseaUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RechargeCampaignRuleOverseaUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RechargeCampaignRuleOverseaCreateBulk is the builder for creating many RechargeCampaignRuleOversea entities in bulk.
type RechargeCampaignRuleOverseaCreateBulk struct {
	config
	err      error
	builders []*RechargeCampaignRuleOverseaCreate
	conflict []sql.ConflictOption
}

// Save creates the RechargeCampaignRuleOversea entities in the database.
func (rcrocb *RechargeCampaignRuleOverseaCreateBulk) Save(ctx context.Context) ([]*RechargeCampaignRuleOversea, error) {
	if rcrocb.err != nil {
		return nil, rcrocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcrocb.builders))
	nodes := make([]*RechargeCampaignRuleOversea, len(rcrocb.builders))
	mutators := make([]Mutator, len(rcrocb.builders))
	for i := range rcrocb.builders {
		func(i int, root context.Context) {
			builder := rcrocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RechargeCampaignRuleOverseaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcrocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcrocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcrocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcrocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcrocb *RechargeCampaignRuleOverseaCreateBulk) SaveX(ctx context.Context) []*RechargeCampaignRuleOversea {
	v, err := rcrocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcrocb *RechargeCampaignRuleOverseaCreateBulk) Exec(ctx context.Context) error {
	_, err := rcrocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcrocb *RechargeCampaignRuleOverseaCreateBulk) ExecX(ctx context.Context) {
	if err := rcrocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RechargeCampaignRuleOversea.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RechargeCampaignRuleOverseaUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (rcrocb *RechargeCampaignRuleOverseaCreateBulk) OnConflict(opts ...sql.ConflictOption) *RechargeCampaignRuleOverseaUpsertBulk {
	rcrocb.conflict = opts
	return &RechargeCampaignRuleOverseaUpsertBulk{
		create: rcrocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RechargeCampaignRuleOversea.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcrocb *RechargeCampaignRuleOverseaCreateBulk) OnConflictColumns(columns ...string) *RechargeCampaignRuleOverseaUpsertBulk {
	rcrocb.conflict = append(rcrocb.conflict, sql.ConflictColumns(columns...))
	return &RechargeCampaignRuleOverseaUpsertBulk{
		create: rcrocb,
	}
}

// RechargeCampaignRuleOverseaUpsertBulk is the builder for "upsert"-ing
// a bulk of RechargeCampaignRuleOversea nodes.
type RechargeCampaignRuleOverseaUpsertBulk struct {
	create *RechargeCampaignRuleOverseaCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RechargeCampaignRuleOversea.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(rechargecampaignruleoversea.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RechargeCampaignRuleOverseaUpsertBulk) UpdateNewValues() *RechargeCampaignRuleOverseaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(rechargecampaignruleoversea.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(rechargecampaignruleoversea.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RechargeCampaignRuleOversea.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RechargeCampaignRuleOverseaUpsertBulk) Ignore() *RechargeCampaignRuleOverseaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RechargeCampaignRuleOverseaUpsertBulk) DoNothing() *RechargeCampaignRuleOverseaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RechargeCampaignRuleOverseaCreateBulk.OnConflict
// documentation for more info.
func (u *RechargeCampaignRuleOverseaUpsertBulk) Update(set func(*RechargeCampaignRuleOverseaUpsert)) *RechargeCampaignRuleOverseaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RechargeCampaignRuleOverseaUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *RechargeCampaignRuleOverseaUpsertBulk) SetCreatedBy(v int64) *RechargeCampaignRuleOverseaUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *RechargeCampaignRuleOverseaUpsertBulk) AddCreatedBy(v int64) *RechargeCampaignRuleOverseaUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *RechargeCampaignRuleOverseaUpsertBulk) UpdateCreatedBy() *RechargeCampaignRuleOverseaUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *RechargeCampaignRuleOverseaUpsertBulk) SetUpdatedBy(v int64) *RechargeCampaignRuleOverseaUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *RechargeCampaignRuleOverseaUpsertBulk) AddUpdatedBy(v int64) *RechargeCampaignRuleOverseaUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *RechargeCampaignRuleOverseaUpsertBulk) UpdateUpdatedBy() *RechargeCampaignRuleOverseaUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RechargeCampaignRuleOverseaUpsertBulk) SetUpdatedAt(v time.Time) *RechargeCampaignRuleOverseaUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RechargeCampaignRuleOverseaUpsertBulk) UpdateUpdatedAt() *RechargeCampaignRuleOverseaUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RechargeCampaignRuleOverseaUpsertBulk) SetDeletedAt(v time.Time) *RechargeCampaignRuleOverseaUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RechargeCampaignRuleOverseaUpsertBulk) UpdateDeletedAt() *RechargeCampaignRuleOverseaUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDollarPrice sets the "dollar_price" field.
func (u *RechargeCampaignRuleOverseaUpsertBulk) SetDollarPrice(v float64) *RechargeCampaignRuleOverseaUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.SetDollarPrice(v)
	})
}

// AddDollarPrice adds v to the "dollar_price" field.
func (u *RechargeCampaignRuleOverseaUpsertBulk) AddDollarPrice(v float64) *RechargeCampaignRuleOverseaUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.AddDollarPrice(v)
	})
}

// UpdateDollarPrice sets the "dollar_price" field to the value that was provided on create.
func (u *RechargeCampaignRuleOverseaUpsertBulk) UpdateDollarPrice() *RechargeCampaignRuleOverseaUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.UpdateDollarPrice()
	})
}

// SetRmbPrice sets the "rmb_price" field.
func (u *RechargeCampaignRuleOverseaUpsertBulk) SetRmbPrice(v float64) *RechargeCampaignRuleOverseaUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.SetRmbPrice(v)
	})
}

// AddRmbPrice adds v to the "rmb_price" field.
func (u *RechargeCampaignRuleOverseaUpsertBulk) AddRmbPrice(v float64) *RechargeCampaignRuleOverseaUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.AddRmbPrice(v)
	})
}

// UpdateRmbPrice sets the "rmb_price" field to the value that was provided on create.
func (u *RechargeCampaignRuleOverseaUpsertBulk) UpdateRmbPrice() *RechargeCampaignRuleOverseaUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.UpdateRmbPrice()
	})
}

// SetOriginalRmbPrice sets the "original_rmb_price" field.
func (u *RechargeCampaignRuleOverseaUpsertBulk) SetOriginalRmbPrice(v float64) *RechargeCampaignRuleOverseaUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.SetOriginalRmbPrice(v)
	})
}

// AddOriginalRmbPrice adds v to the "original_rmb_price" field.
func (u *RechargeCampaignRuleOverseaUpsertBulk) AddOriginalRmbPrice(v float64) *RechargeCampaignRuleOverseaUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.AddOriginalRmbPrice(v)
	})
}

// UpdateOriginalRmbPrice sets the "original_rmb_price" field to the value that was provided on create.
func (u *RechargeCampaignRuleOverseaUpsertBulk) UpdateOriginalRmbPrice() *RechargeCampaignRuleOverseaUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.UpdateOriginalRmbPrice()
	})
}

// SetTotalCep sets the "total_cep" field.
func (u *RechargeCampaignRuleOverseaUpsertBulk) SetTotalCep(v int64) *RechargeCampaignRuleOverseaUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.SetTotalCep(v)
	})
}

// AddTotalCep adds v to the "total_cep" field.
func (u *RechargeCampaignRuleOverseaUpsertBulk) AddTotalCep(v int64) *RechargeCampaignRuleOverseaUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.AddTotalCep(v)
	})
}

// UpdateTotalCep sets the "total_cep" field to the value that was provided on create.
func (u *RechargeCampaignRuleOverseaUpsertBulk) UpdateTotalCep() *RechargeCampaignRuleOverseaUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.UpdateTotalCep()
	})
}

// SetBeforeDiscountCep sets the "before_discount_cep" field.
func (u *RechargeCampaignRuleOverseaUpsertBulk) SetBeforeDiscountCep(v int64) *RechargeCampaignRuleOverseaUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.SetBeforeDiscountCep(v)
	})
}

// AddBeforeDiscountCep adds v to the "before_discount_cep" field.
func (u *RechargeCampaignRuleOverseaUpsertBulk) AddBeforeDiscountCep(v int64) *RechargeCampaignRuleOverseaUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.AddBeforeDiscountCep(v)
	})
}

// UpdateBeforeDiscountCep sets the "before_discount_cep" field to the value that was provided on create.
func (u *RechargeCampaignRuleOverseaUpsertBulk) UpdateBeforeDiscountCep() *RechargeCampaignRuleOverseaUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.UpdateBeforeDiscountCep()
	})
}

// SetDiscountRatio sets the "discount_ratio" field.
func (u *RechargeCampaignRuleOverseaUpsertBulk) SetDiscountRatio(v int64) *RechargeCampaignRuleOverseaUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.SetDiscountRatio(v)
	})
}

// AddDiscountRatio adds v to the "discount_ratio" field.
func (u *RechargeCampaignRuleOverseaUpsertBulk) AddDiscountRatio(v int64) *RechargeCampaignRuleOverseaUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.AddDiscountRatio(v)
	})
}

// UpdateDiscountRatio sets the "discount_ratio" field to the value that was provided on create.
func (u *RechargeCampaignRuleOverseaUpsertBulk) UpdateDiscountRatio() *RechargeCampaignRuleOverseaUpsertBulk {
	return u.Update(func(s *RechargeCampaignRuleOverseaUpsert) {
		s.UpdateDiscountRatio()
	})
}

// Exec executes the query.
func (u *RechargeCampaignRuleOverseaUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the RechargeCampaignRuleOverseaCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for RechargeCampaignRuleOverseaCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RechargeCampaignRuleOverseaUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
