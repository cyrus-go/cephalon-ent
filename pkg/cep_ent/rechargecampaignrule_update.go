// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/rechargecampaignrule"
)

// RechargeCampaignRuleUpdate is the builder for updating RechargeCampaignRule entities.
type RechargeCampaignRuleUpdate struct {
	config
	hooks    []Hook
	mutation *RechargeCampaignRuleMutation
}

// Where appends a list predicates to the RechargeCampaignRuleUpdate builder.
func (rcru *RechargeCampaignRuleUpdate) Where(ps ...predicate.RechargeCampaignRule) *RechargeCampaignRuleUpdate {
	rcru.mutation.Where(ps...)
	return rcru
}

// SetCreatedBy sets the "created_by" field.
func (rcru *RechargeCampaignRuleUpdate) SetCreatedBy(i int64) *RechargeCampaignRuleUpdate {
	rcru.mutation.ResetCreatedBy()
	rcru.mutation.SetCreatedBy(i)
	return rcru
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (rcru *RechargeCampaignRuleUpdate) SetNillableCreatedBy(i *int64) *RechargeCampaignRuleUpdate {
	if i != nil {
		rcru.SetCreatedBy(*i)
	}
	return rcru
}

// AddCreatedBy adds i to the "created_by" field.
func (rcru *RechargeCampaignRuleUpdate) AddCreatedBy(i int64) *RechargeCampaignRuleUpdate {
	rcru.mutation.AddCreatedBy(i)
	return rcru
}

// SetUpdatedBy sets the "updated_by" field.
func (rcru *RechargeCampaignRuleUpdate) SetUpdatedBy(i int64) *RechargeCampaignRuleUpdate {
	rcru.mutation.ResetUpdatedBy()
	rcru.mutation.SetUpdatedBy(i)
	return rcru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (rcru *RechargeCampaignRuleUpdate) SetNillableUpdatedBy(i *int64) *RechargeCampaignRuleUpdate {
	if i != nil {
		rcru.SetUpdatedBy(*i)
	}
	return rcru
}

// AddUpdatedBy adds i to the "updated_by" field.
func (rcru *RechargeCampaignRuleUpdate) AddUpdatedBy(i int64) *RechargeCampaignRuleUpdate {
	rcru.mutation.AddUpdatedBy(i)
	return rcru
}

// SetUpdatedAt sets the "updated_at" field.
func (rcru *RechargeCampaignRuleUpdate) SetUpdatedAt(t time.Time) *RechargeCampaignRuleUpdate {
	rcru.mutation.SetUpdatedAt(t)
	return rcru
}

// SetDeletedAt sets the "deleted_at" field.
func (rcru *RechargeCampaignRuleUpdate) SetDeletedAt(t time.Time) *RechargeCampaignRuleUpdate {
	rcru.mutation.SetDeletedAt(t)
	return rcru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rcru *RechargeCampaignRuleUpdate) SetNillableDeletedAt(t *time.Time) *RechargeCampaignRuleUpdate {
	if t != nil {
		rcru.SetDeletedAt(*t)
	}
	return rcru
}

// SetLittleValue sets the "little_value" field.
func (rcru *RechargeCampaignRuleUpdate) SetLittleValue(i int64) *RechargeCampaignRuleUpdate {
	rcru.mutation.ResetLittleValue()
	rcru.mutation.SetLittleValue(i)
	return rcru
}

// SetNillableLittleValue sets the "little_value" field if the given value is not nil.
func (rcru *RechargeCampaignRuleUpdate) SetNillableLittleValue(i *int64) *RechargeCampaignRuleUpdate {
	if i != nil {
		rcru.SetLittleValue(*i)
	}
	return rcru
}

// AddLittleValue adds i to the "little_value" field.
func (rcru *RechargeCampaignRuleUpdate) AddLittleValue(i int64) *RechargeCampaignRuleUpdate {
	rcru.mutation.AddLittleValue(i)
	return rcru
}

// SetLargeValue sets the "large_value" field.
func (rcru *RechargeCampaignRuleUpdate) SetLargeValue(i int64) *RechargeCampaignRuleUpdate {
	rcru.mutation.ResetLargeValue()
	rcru.mutation.SetLargeValue(i)
	return rcru
}

// SetNillableLargeValue sets the "large_value" field if the given value is not nil.
func (rcru *RechargeCampaignRuleUpdate) SetNillableLargeValue(i *int64) *RechargeCampaignRuleUpdate {
	if i != nil {
		rcru.SetLargeValue(*i)
	}
	return rcru
}

// AddLargeValue adds i to the "large_value" field.
func (rcru *RechargeCampaignRuleUpdate) AddLargeValue(i int64) *RechargeCampaignRuleUpdate {
	rcru.mutation.AddLargeValue(i)
	return rcru
}

// SetGiftPercent sets the "gift_percent" field.
func (rcru *RechargeCampaignRuleUpdate) SetGiftPercent(i int64) *RechargeCampaignRuleUpdate {
	rcru.mutation.ResetGiftPercent()
	rcru.mutation.SetGiftPercent(i)
	return rcru
}

// SetNillableGiftPercent sets the "gift_percent" field if the given value is not nil.
func (rcru *RechargeCampaignRuleUpdate) SetNillableGiftPercent(i *int64) *RechargeCampaignRuleUpdate {
	if i != nil {
		rcru.SetGiftPercent(*i)
	}
	return rcru
}

// AddGiftPercent adds i to the "gift_percent" field.
func (rcru *RechargeCampaignRuleUpdate) AddGiftPercent(i int64) *RechargeCampaignRuleUpdate {
	rcru.mutation.AddGiftPercent(i)
	return rcru
}

// Mutation returns the RechargeCampaignRuleMutation object of the builder.
func (rcru *RechargeCampaignRuleUpdate) Mutation() *RechargeCampaignRuleMutation {
	return rcru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rcru *RechargeCampaignRuleUpdate) Save(ctx context.Context) (int, error) {
	rcru.defaults()
	return withHooks(ctx, rcru.sqlSave, rcru.mutation, rcru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcru *RechargeCampaignRuleUpdate) SaveX(ctx context.Context) int {
	affected, err := rcru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rcru *RechargeCampaignRuleUpdate) Exec(ctx context.Context) error {
	_, err := rcru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcru *RechargeCampaignRuleUpdate) ExecX(ctx context.Context) {
	if err := rcru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rcru *RechargeCampaignRuleUpdate) defaults() {
	if _, ok := rcru.mutation.UpdatedAt(); !ok {
		v := rechargecampaignrule.UpdateDefaultUpdatedAt()
		rcru.mutation.SetUpdatedAt(v)
	}
}

func (rcru *RechargeCampaignRuleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(rechargecampaignrule.Table, rechargecampaignrule.Columns, sqlgraph.NewFieldSpec(rechargecampaignrule.FieldID, field.TypeInt64))
	if ps := rcru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcru.mutation.CreatedBy(); ok {
		_spec.SetField(rechargecampaignrule.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := rcru.mutation.AddedCreatedBy(); ok {
		_spec.AddField(rechargecampaignrule.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := rcru.mutation.UpdatedBy(); ok {
		_spec.SetField(rechargecampaignrule.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := rcru.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(rechargecampaignrule.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := rcru.mutation.UpdatedAt(); ok {
		_spec.SetField(rechargecampaignrule.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := rcru.mutation.DeletedAt(); ok {
		_spec.SetField(rechargecampaignrule.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := rcru.mutation.LittleValue(); ok {
		_spec.SetField(rechargecampaignrule.FieldLittleValue, field.TypeInt64, value)
	}
	if value, ok := rcru.mutation.AddedLittleValue(); ok {
		_spec.AddField(rechargecampaignrule.FieldLittleValue, field.TypeInt64, value)
	}
	if value, ok := rcru.mutation.LargeValue(); ok {
		_spec.SetField(rechargecampaignrule.FieldLargeValue, field.TypeInt64, value)
	}
	if value, ok := rcru.mutation.AddedLargeValue(); ok {
		_spec.AddField(rechargecampaignrule.FieldLargeValue, field.TypeInt64, value)
	}
	if value, ok := rcru.mutation.GiftPercent(); ok {
		_spec.SetField(rechargecampaignrule.FieldGiftPercent, field.TypeInt64, value)
	}
	if value, ok := rcru.mutation.AddedGiftPercent(); ok {
		_spec.AddField(rechargecampaignrule.FieldGiftPercent, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rcru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rechargecampaignrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rcru.mutation.done = true
	return n, nil
}

// RechargeCampaignRuleUpdateOne is the builder for updating a single RechargeCampaignRule entity.
type RechargeCampaignRuleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RechargeCampaignRuleMutation
}

// SetCreatedBy sets the "created_by" field.
func (rcruo *RechargeCampaignRuleUpdateOne) SetCreatedBy(i int64) *RechargeCampaignRuleUpdateOne {
	rcruo.mutation.ResetCreatedBy()
	rcruo.mutation.SetCreatedBy(i)
	return rcruo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (rcruo *RechargeCampaignRuleUpdateOne) SetNillableCreatedBy(i *int64) *RechargeCampaignRuleUpdateOne {
	if i != nil {
		rcruo.SetCreatedBy(*i)
	}
	return rcruo
}

// AddCreatedBy adds i to the "created_by" field.
func (rcruo *RechargeCampaignRuleUpdateOne) AddCreatedBy(i int64) *RechargeCampaignRuleUpdateOne {
	rcruo.mutation.AddCreatedBy(i)
	return rcruo
}

// SetUpdatedBy sets the "updated_by" field.
func (rcruo *RechargeCampaignRuleUpdateOne) SetUpdatedBy(i int64) *RechargeCampaignRuleUpdateOne {
	rcruo.mutation.ResetUpdatedBy()
	rcruo.mutation.SetUpdatedBy(i)
	return rcruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (rcruo *RechargeCampaignRuleUpdateOne) SetNillableUpdatedBy(i *int64) *RechargeCampaignRuleUpdateOne {
	if i != nil {
		rcruo.SetUpdatedBy(*i)
	}
	return rcruo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (rcruo *RechargeCampaignRuleUpdateOne) AddUpdatedBy(i int64) *RechargeCampaignRuleUpdateOne {
	rcruo.mutation.AddUpdatedBy(i)
	return rcruo
}

// SetUpdatedAt sets the "updated_at" field.
func (rcruo *RechargeCampaignRuleUpdateOne) SetUpdatedAt(t time.Time) *RechargeCampaignRuleUpdateOne {
	rcruo.mutation.SetUpdatedAt(t)
	return rcruo
}

// SetDeletedAt sets the "deleted_at" field.
func (rcruo *RechargeCampaignRuleUpdateOne) SetDeletedAt(t time.Time) *RechargeCampaignRuleUpdateOne {
	rcruo.mutation.SetDeletedAt(t)
	return rcruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rcruo *RechargeCampaignRuleUpdateOne) SetNillableDeletedAt(t *time.Time) *RechargeCampaignRuleUpdateOne {
	if t != nil {
		rcruo.SetDeletedAt(*t)
	}
	return rcruo
}

// SetLittleValue sets the "little_value" field.
func (rcruo *RechargeCampaignRuleUpdateOne) SetLittleValue(i int64) *RechargeCampaignRuleUpdateOne {
	rcruo.mutation.ResetLittleValue()
	rcruo.mutation.SetLittleValue(i)
	return rcruo
}

// SetNillableLittleValue sets the "little_value" field if the given value is not nil.
func (rcruo *RechargeCampaignRuleUpdateOne) SetNillableLittleValue(i *int64) *RechargeCampaignRuleUpdateOne {
	if i != nil {
		rcruo.SetLittleValue(*i)
	}
	return rcruo
}

// AddLittleValue adds i to the "little_value" field.
func (rcruo *RechargeCampaignRuleUpdateOne) AddLittleValue(i int64) *RechargeCampaignRuleUpdateOne {
	rcruo.mutation.AddLittleValue(i)
	return rcruo
}

// SetLargeValue sets the "large_value" field.
func (rcruo *RechargeCampaignRuleUpdateOne) SetLargeValue(i int64) *RechargeCampaignRuleUpdateOne {
	rcruo.mutation.ResetLargeValue()
	rcruo.mutation.SetLargeValue(i)
	return rcruo
}

// SetNillableLargeValue sets the "large_value" field if the given value is not nil.
func (rcruo *RechargeCampaignRuleUpdateOne) SetNillableLargeValue(i *int64) *RechargeCampaignRuleUpdateOne {
	if i != nil {
		rcruo.SetLargeValue(*i)
	}
	return rcruo
}

// AddLargeValue adds i to the "large_value" field.
func (rcruo *RechargeCampaignRuleUpdateOne) AddLargeValue(i int64) *RechargeCampaignRuleUpdateOne {
	rcruo.mutation.AddLargeValue(i)
	return rcruo
}

// SetGiftPercent sets the "gift_percent" field.
func (rcruo *RechargeCampaignRuleUpdateOne) SetGiftPercent(i int64) *RechargeCampaignRuleUpdateOne {
	rcruo.mutation.ResetGiftPercent()
	rcruo.mutation.SetGiftPercent(i)
	return rcruo
}

// SetNillableGiftPercent sets the "gift_percent" field if the given value is not nil.
func (rcruo *RechargeCampaignRuleUpdateOne) SetNillableGiftPercent(i *int64) *RechargeCampaignRuleUpdateOne {
	if i != nil {
		rcruo.SetGiftPercent(*i)
	}
	return rcruo
}

// AddGiftPercent adds i to the "gift_percent" field.
func (rcruo *RechargeCampaignRuleUpdateOne) AddGiftPercent(i int64) *RechargeCampaignRuleUpdateOne {
	rcruo.mutation.AddGiftPercent(i)
	return rcruo
}

// Mutation returns the RechargeCampaignRuleMutation object of the builder.
func (rcruo *RechargeCampaignRuleUpdateOne) Mutation() *RechargeCampaignRuleMutation {
	return rcruo.mutation
}

// Where appends a list predicates to the RechargeCampaignRuleUpdate builder.
func (rcruo *RechargeCampaignRuleUpdateOne) Where(ps ...predicate.RechargeCampaignRule) *RechargeCampaignRuleUpdateOne {
	rcruo.mutation.Where(ps...)
	return rcruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rcruo *RechargeCampaignRuleUpdateOne) Select(field string, fields ...string) *RechargeCampaignRuleUpdateOne {
	rcruo.fields = append([]string{field}, fields...)
	return rcruo
}

// Save executes the query and returns the updated RechargeCampaignRule entity.
func (rcruo *RechargeCampaignRuleUpdateOne) Save(ctx context.Context) (*RechargeCampaignRule, error) {
	rcruo.defaults()
	return withHooks(ctx, rcruo.sqlSave, rcruo.mutation, rcruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcruo *RechargeCampaignRuleUpdateOne) SaveX(ctx context.Context) *RechargeCampaignRule {
	node, err := rcruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rcruo *RechargeCampaignRuleUpdateOne) Exec(ctx context.Context) error {
	_, err := rcruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcruo *RechargeCampaignRuleUpdateOne) ExecX(ctx context.Context) {
	if err := rcruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rcruo *RechargeCampaignRuleUpdateOne) defaults() {
	if _, ok := rcruo.mutation.UpdatedAt(); !ok {
		v := rechargecampaignrule.UpdateDefaultUpdatedAt()
		rcruo.mutation.SetUpdatedAt(v)
	}
}

func (rcruo *RechargeCampaignRuleUpdateOne) sqlSave(ctx context.Context) (_node *RechargeCampaignRule, err error) {
	_spec := sqlgraph.NewUpdateSpec(rechargecampaignrule.Table, rechargecampaignrule.Columns, sqlgraph.NewFieldSpec(rechargecampaignrule.FieldID, field.TypeInt64))
	id, ok := rcruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "RechargeCampaignRule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rcruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rechargecampaignrule.FieldID)
		for _, f := range fields {
			if !rechargecampaignrule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != rechargecampaignrule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rcruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcruo.mutation.CreatedBy(); ok {
		_spec.SetField(rechargecampaignrule.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := rcruo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(rechargecampaignrule.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := rcruo.mutation.UpdatedBy(); ok {
		_spec.SetField(rechargecampaignrule.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := rcruo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(rechargecampaignrule.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := rcruo.mutation.UpdatedAt(); ok {
		_spec.SetField(rechargecampaignrule.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := rcruo.mutation.DeletedAt(); ok {
		_spec.SetField(rechargecampaignrule.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := rcruo.mutation.LittleValue(); ok {
		_spec.SetField(rechargecampaignrule.FieldLittleValue, field.TypeInt64, value)
	}
	if value, ok := rcruo.mutation.AddedLittleValue(); ok {
		_spec.AddField(rechargecampaignrule.FieldLittleValue, field.TypeInt64, value)
	}
	if value, ok := rcruo.mutation.LargeValue(); ok {
		_spec.SetField(rechargecampaignrule.FieldLargeValue, field.TypeInt64, value)
	}
	if value, ok := rcruo.mutation.AddedLargeValue(); ok {
		_spec.AddField(rechargecampaignrule.FieldLargeValue, field.TypeInt64, value)
	}
	if value, ok := rcruo.mutation.GiftPercent(); ok {
		_spec.SetField(rechargecampaignrule.FieldGiftPercent, field.TypeInt64, value)
	}
	if value, ok := rcruo.mutation.AddedGiftPercent(); ok {
		_spec.AddField(rechargecampaignrule.FieldGiftPercent, field.TypeInt64, value)
	}
	_node = &RechargeCampaignRule{config: rcruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rcruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rechargecampaignrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rcruo.mutation.done = true
	return _node, nil
}
