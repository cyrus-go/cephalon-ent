// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/devicegpumission"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/mission"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionkind"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// MissionKindUpdate is the builder for updating MissionKind entities.
type MissionKindUpdate struct {
	config
	hooks    []Hook
	mutation *MissionKindMutation
}

// Where appends a list predicates to the MissionKindUpdate builder.
func (mku *MissionKindUpdate) Where(ps ...predicate.MissionKind) *MissionKindUpdate {
	mku.mutation.Where(ps...)
	return mku
}

// SetCreatedBy sets the "created_by" field.
func (mku *MissionKindUpdate) SetCreatedBy(i int64) *MissionKindUpdate {
	mku.mutation.ResetCreatedBy()
	mku.mutation.SetCreatedBy(i)
	return mku
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mku *MissionKindUpdate) SetNillableCreatedBy(i *int64) *MissionKindUpdate {
	if i != nil {
		mku.SetCreatedBy(*i)
	}
	return mku
}

// AddCreatedBy adds i to the "created_by" field.
func (mku *MissionKindUpdate) AddCreatedBy(i int64) *MissionKindUpdate {
	mku.mutation.AddCreatedBy(i)
	return mku
}

// SetUpdatedBy sets the "updated_by" field.
func (mku *MissionKindUpdate) SetUpdatedBy(i int64) *MissionKindUpdate {
	mku.mutation.ResetUpdatedBy()
	mku.mutation.SetUpdatedBy(i)
	return mku
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mku *MissionKindUpdate) SetNillableUpdatedBy(i *int64) *MissionKindUpdate {
	if i != nil {
		mku.SetUpdatedBy(*i)
	}
	return mku
}

// AddUpdatedBy adds i to the "updated_by" field.
func (mku *MissionKindUpdate) AddUpdatedBy(i int64) *MissionKindUpdate {
	mku.mutation.AddUpdatedBy(i)
	return mku
}

// SetUpdatedAt sets the "updated_at" field.
func (mku *MissionKindUpdate) SetUpdatedAt(t time.Time) *MissionKindUpdate {
	mku.mutation.SetUpdatedAt(t)
	return mku
}

// SetDeletedAt sets the "deleted_at" field.
func (mku *MissionKindUpdate) SetDeletedAt(t time.Time) *MissionKindUpdate {
	mku.mutation.SetDeletedAt(t)
	return mku
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mku *MissionKindUpdate) SetNillableDeletedAt(t *time.Time) *MissionKindUpdate {
	if t != nil {
		mku.SetDeletedAt(*t)
	}
	return mku
}

// SetType sets the "type" field.
func (mku *MissionKindUpdate) SetType(et enums.MissionType) *MissionKindUpdate {
	mku.mutation.SetType(et)
	return mku
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mku *MissionKindUpdate) SetNillableType(et *enums.MissionType) *MissionKindUpdate {
	if et != nil {
		mku.SetType(*et)
	}
	return mku
}

// SetCategory sets the "category" field.
func (mku *MissionKindUpdate) SetCategory(ec enums.MissionCategory) *MissionKindUpdate {
	mku.mutation.SetCategory(ec)
	return mku
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (mku *MissionKindUpdate) SetNillableCategory(ec *enums.MissionCategory) *MissionKindUpdate {
	if ec != nil {
		mku.SetCategory(*ec)
	}
	return mku
}

// SetBillingType sets the "billing_type" field.
func (mku *MissionKindUpdate) SetBillingType(ebt enums.MissionBillingType) *MissionKindUpdate {
	mku.mutation.SetBillingType(ebt)
	return mku
}

// SetNillableBillingType sets the "billing_type" field if the given value is not nil.
func (mku *MissionKindUpdate) SetNillableBillingType(ebt *enums.MissionBillingType) *MissionKindUpdate {
	if ebt != nil {
		mku.SetBillingType(*ebt)
	}
	return mku
}

// AddDeviceGpuMissionIDs adds the "device_gpu_missions" edge to the DeviceGpuMission entity by IDs.
func (mku *MissionKindUpdate) AddDeviceGpuMissionIDs(ids ...int64) *MissionKindUpdate {
	mku.mutation.AddDeviceGpuMissionIDs(ids...)
	return mku
}

// AddDeviceGpuMissions adds the "device_gpu_missions" edges to the DeviceGpuMission entity.
func (mku *MissionKindUpdate) AddDeviceGpuMissions(d ...*DeviceGpuMission) *MissionKindUpdate {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return mku.AddDeviceGpuMissionIDs(ids...)
}

// AddMissionIDs adds the "missions" edge to the Mission entity by IDs.
func (mku *MissionKindUpdate) AddMissionIDs(ids ...int64) *MissionKindUpdate {
	mku.mutation.AddMissionIDs(ids...)
	return mku
}

// AddMissions adds the "missions" edges to the Mission entity.
func (mku *MissionKindUpdate) AddMissions(m ...*Mission) *MissionKindUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mku.AddMissionIDs(ids...)
}

// Mutation returns the MissionKindMutation object of the builder.
func (mku *MissionKindUpdate) Mutation() *MissionKindMutation {
	return mku.mutation
}

// ClearDeviceGpuMissions clears all "device_gpu_missions" edges to the DeviceGpuMission entity.
func (mku *MissionKindUpdate) ClearDeviceGpuMissions() *MissionKindUpdate {
	mku.mutation.ClearDeviceGpuMissions()
	return mku
}

// RemoveDeviceGpuMissionIDs removes the "device_gpu_missions" edge to DeviceGpuMission entities by IDs.
func (mku *MissionKindUpdate) RemoveDeviceGpuMissionIDs(ids ...int64) *MissionKindUpdate {
	mku.mutation.RemoveDeviceGpuMissionIDs(ids...)
	return mku
}

// RemoveDeviceGpuMissions removes "device_gpu_missions" edges to DeviceGpuMission entities.
func (mku *MissionKindUpdate) RemoveDeviceGpuMissions(d ...*DeviceGpuMission) *MissionKindUpdate {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return mku.RemoveDeviceGpuMissionIDs(ids...)
}

// ClearMissions clears all "missions" edges to the Mission entity.
func (mku *MissionKindUpdate) ClearMissions() *MissionKindUpdate {
	mku.mutation.ClearMissions()
	return mku
}

// RemoveMissionIDs removes the "missions" edge to Mission entities by IDs.
func (mku *MissionKindUpdate) RemoveMissionIDs(ids ...int64) *MissionKindUpdate {
	mku.mutation.RemoveMissionIDs(ids...)
	return mku
}

// RemoveMissions removes "missions" edges to Mission entities.
func (mku *MissionKindUpdate) RemoveMissions(m ...*Mission) *MissionKindUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mku.RemoveMissionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mku *MissionKindUpdate) Save(ctx context.Context) (int, error) {
	mku.defaults()
	return withHooks(ctx, mku.sqlSave, mku.mutation, mku.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mku *MissionKindUpdate) SaveX(ctx context.Context) int {
	affected, err := mku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mku *MissionKindUpdate) Exec(ctx context.Context) error {
	_, err := mku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mku *MissionKindUpdate) ExecX(ctx context.Context) {
	if err := mku.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mku *MissionKindUpdate) defaults() {
	if _, ok := mku.mutation.UpdatedAt(); !ok {
		v := missionkind.UpdateDefaultUpdatedAt()
		mku.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mku *MissionKindUpdate) check() error {
	if v, ok := mku.mutation.GetType(); ok {
		if err := missionkind.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "MissionKind.type": %w`, err)}
		}
	}
	if v, ok := mku.mutation.Category(); ok {
		if err := missionkind.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`cep_ent: validator failed for field "MissionKind.category": %w`, err)}
		}
	}
	if v, ok := mku.mutation.BillingType(); ok {
		if err := missionkind.BillingTypeValidator(v); err != nil {
			return &ValidationError{Name: "billing_type", err: fmt.Errorf(`cep_ent: validator failed for field "MissionKind.billing_type": %w`, err)}
		}
	}
	return nil
}

func (mku *MissionKindUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mku.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(missionkind.Table, missionkind.Columns, sqlgraph.NewFieldSpec(missionkind.FieldID, field.TypeInt64))
	if ps := mku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mku.mutation.CreatedBy(); ok {
		_spec.SetField(missionkind.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mku.mutation.AddedCreatedBy(); ok {
		_spec.AddField(missionkind.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mku.mutation.UpdatedBy(); ok {
		_spec.SetField(missionkind.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mku.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(missionkind.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mku.mutation.UpdatedAt(); ok {
		_spec.SetField(missionkind.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mku.mutation.DeletedAt(); ok {
		_spec.SetField(missionkind.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := mku.mutation.GetType(); ok {
		_spec.SetField(missionkind.FieldType, field.TypeEnum, value)
	}
	if value, ok := mku.mutation.Category(); ok {
		_spec.SetField(missionkind.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := mku.mutation.BillingType(); ok {
		_spec.SetField(missionkind.FieldBillingType, field.TypeEnum, value)
	}
	if mku.mutation.DeviceGpuMissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionkind.DeviceGpuMissionsTable,
			Columns: []string{missionkind.DeviceGpuMissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(devicegpumission.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mku.mutation.RemovedDeviceGpuMissionsIDs(); len(nodes) > 0 && !mku.mutation.DeviceGpuMissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionkind.DeviceGpuMissionsTable,
			Columns: []string{missionkind.DeviceGpuMissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(devicegpumission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mku.mutation.DeviceGpuMissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionkind.DeviceGpuMissionsTable,
			Columns: []string{missionkind.DeviceGpuMissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(devicegpumission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mku.mutation.MissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionkind.MissionsTable,
			Columns: []string{missionkind.MissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mku.mutation.RemovedMissionsIDs(); len(nodes) > 0 && !mku.mutation.MissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionkind.MissionsTable,
			Columns: []string{missionkind.MissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mku.mutation.MissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionkind.MissionsTable,
			Columns: []string{missionkind.MissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{missionkind.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mku.mutation.done = true
	return n, nil
}

// MissionKindUpdateOne is the builder for updating a single MissionKind entity.
type MissionKindUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MissionKindMutation
}

// SetCreatedBy sets the "created_by" field.
func (mkuo *MissionKindUpdateOne) SetCreatedBy(i int64) *MissionKindUpdateOne {
	mkuo.mutation.ResetCreatedBy()
	mkuo.mutation.SetCreatedBy(i)
	return mkuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mkuo *MissionKindUpdateOne) SetNillableCreatedBy(i *int64) *MissionKindUpdateOne {
	if i != nil {
		mkuo.SetCreatedBy(*i)
	}
	return mkuo
}

// AddCreatedBy adds i to the "created_by" field.
func (mkuo *MissionKindUpdateOne) AddCreatedBy(i int64) *MissionKindUpdateOne {
	mkuo.mutation.AddCreatedBy(i)
	return mkuo
}

// SetUpdatedBy sets the "updated_by" field.
func (mkuo *MissionKindUpdateOne) SetUpdatedBy(i int64) *MissionKindUpdateOne {
	mkuo.mutation.ResetUpdatedBy()
	mkuo.mutation.SetUpdatedBy(i)
	return mkuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mkuo *MissionKindUpdateOne) SetNillableUpdatedBy(i *int64) *MissionKindUpdateOne {
	if i != nil {
		mkuo.SetUpdatedBy(*i)
	}
	return mkuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (mkuo *MissionKindUpdateOne) AddUpdatedBy(i int64) *MissionKindUpdateOne {
	mkuo.mutation.AddUpdatedBy(i)
	return mkuo
}

// SetUpdatedAt sets the "updated_at" field.
func (mkuo *MissionKindUpdateOne) SetUpdatedAt(t time.Time) *MissionKindUpdateOne {
	mkuo.mutation.SetUpdatedAt(t)
	return mkuo
}

// SetDeletedAt sets the "deleted_at" field.
func (mkuo *MissionKindUpdateOne) SetDeletedAt(t time.Time) *MissionKindUpdateOne {
	mkuo.mutation.SetDeletedAt(t)
	return mkuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mkuo *MissionKindUpdateOne) SetNillableDeletedAt(t *time.Time) *MissionKindUpdateOne {
	if t != nil {
		mkuo.SetDeletedAt(*t)
	}
	return mkuo
}

// SetType sets the "type" field.
func (mkuo *MissionKindUpdateOne) SetType(et enums.MissionType) *MissionKindUpdateOne {
	mkuo.mutation.SetType(et)
	return mkuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mkuo *MissionKindUpdateOne) SetNillableType(et *enums.MissionType) *MissionKindUpdateOne {
	if et != nil {
		mkuo.SetType(*et)
	}
	return mkuo
}

// SetCategory sets the "category" field.
func (mkuo *MissionKindUpdateOne) SetCategory(ec enums.MissionCategory) *MissionKindUpdateOne {
	mkuo.mutation.SetCategory(ec)
	return mkuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (mkuo *MissionKindUpdateOne) SetNillableCategory(ec *enums.MissionCategory) *MissionKindUpdateOne {
	if ec != nil {
		mkuo.SetCategory(*ec)
	}
	return mkuo
}

// SetBillingType sets the "billing_type" field.
func (mkuo *MissionKindUpdateOne) SetBillingType(ebt enums.MissionBillingType) *MissionKindUpdateOne {
	mkuo.mutation.SetBillingType(ebt)
	return mkuo
}

// SetNillableBillingType sets the "billing_type" field if the given value is not nil.
func (mkuo *MissionKindUpdateOne) SetNillableBillingType(ebt *enums.MissionBillingType) *MissionKindUpdateOne {
	if ebt != nil {
		mkuo.SetBillingType(*ebt)
	}
	return mkuo
}

// AddDeviceGpuMissionIDs adds the "device_gpu_missions" edge to the DeviceGpuMission entity by IDs.
func (mkuo *MissionKindUpdateOne) AddDeviceGpuMissionIDs(ids ...int64) *MissionKindUpdateOne {
	mkuo.mutation.AddDeviceGpuMissionIDs(ids...)
	return mkuo
}

// AddDeviceGpuMissions adds the "device_gpu_missions" edges to the DeviceGpuMission entity.
func (mkuo *MissionKindUpdateOne) AddDeviceGpuMissions(d ...*DeviceGpuMission) *MissionKindUpdateOne {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return mkuo.AddDeviceGpuMissionIDs(ids...)
}

// AddMissionIDs adds the "missions" edge to the Mission entity by IDs.
func (mkuo *MissionKindUpdateOne) AddMissionIDs(ids ...int64) *MissionKindUpdateOne {
	mkuo.mutation.AddMissionIDs(ids...)
	return mkuo
}

// AddMissions adds the "missions" edges to the Mission entity.
func (mkuo *MissionKindUpdateOne) AddMissions(m ...*Mission) *MissionKindUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mkuo.AddMissionIDs(ids...)
}

// Mutation returns the MissionKindMutation object of the builder.
func (mkuo *MissionKindUpdateOne) Mutation() *MissionKindMutation {
	return mkuo.mutation
}

// ClearDeviceGpuMissions clears all "device_gpu_missions" edges to the DeviceGpuMission entity.
func (mkuo *MissionKindUpdateOne) ClearDeviceGpuMissions() *MissionKindUpdateOne {
	mkuo.mutation.ClearDeviceGpuMissions()
	return mkuo
}

// RemoveDeviceGpuMissionIDs removes the "device_gpu_missions" edge to DeviceGpuMission entities by IDs.
func (mkuo *MissionKindUpdateOne) RemoveDeviceGpuMissionIDs(ids ...int64) *MissionKindUpdateOne {
	mkuo.mutation.RemoveDeviceGpuMissionIDs(ids...)
	return mkuo
}

// RemoveDeviceGpuMissions removes "device_gpu_missions" edges to DeviceGpuMission entities.
func (mkuo *MissionKindUpdateOne) RemoveDeviceGpuMissions(d ...*DeviceGpuMission) *MissionKindUpdateOne {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return mkuo.RemoveDeviceGpuMissionIDs(ids...)
}

// ClearMissions clears all "missions" edges to the Mission entity.
func (mkuo *MissionKindUpdateOne) ClearMissions() *MissionKindUpdateOne {
	mkuo.mutation.ClearMissions()
	return mkuo
}

// RemoveMissionIDs removes the "missions" edge to Mission entities by IDs.
func (mkuo *MissionKindUpdateOne) RemoveMissionIDs(ids ...int64) *MissionKindUpdateOne {
	mkuo.mutation.RemoveMissionIDs(ids...)
	return mkuo
}

// RemoveMissions removes "missions" edges to Mission entities.
func (mkuo *MissionKindUpdateOne) RemoveMissions(m ...*Mission) *MissionKindUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mkuo.RemoveMissionIDs(ids...)
}

// Where appends a list predicates to the MissionKindUpdate builder.
func (mkuo *MissionKindUpdateOne) Where(ps ...predicate.MissionKind) *MissionKindUpdateOne {
	mkuo.mutation.Where(ps...)
	return mkuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mkuo *MissionKindUpdateOne) Select(field string, fields ...string) *MissionKindUpdateOne {
	mkuo.fields = append([]string{field}, fields...)
	return mkuo
}

// Save executes the query and returns the updated MissionKind entity.
func (mkuo *MissionKindUpdateOne) Save(ctx context.Context) (*MissionKind, error) {
	mkuo.defaults()
	return withHooks(ctx, mkuo.sqlSave, mkuo.mutation, mkuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mkuo *MissionKindUpdateOne) SaveX(ctx context.Context) *MissionKind {
	node, err := mkuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mkuo *MissionKindUpdateOne) Exec(ctx context.Context) error {
	_, err := mkuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mkuo *MissionKindUpdateOne) ExecX(ctx context.Context) {
	if err := mkuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mkuo *MissionKindUpdateOne) defaults() {
	if _, ok := mkuo.mutation.UpdatedAt(); !ok {
		v := missionkind.UpdateDefaultUpdatedAt()
		mkuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mkuo *MissionKindUpdateOne) check() error {
	if v, ok := mkuo.mutation.GetType(); ok {
		if err := missionkind.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "MissionKind.type": %w`, err)}
		}
	}
	if v, ok := mkuo.mutation.Category(); ok {
		if err := missionkind.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`cep_ent: validator failed for field "MissionKind.category": %w`, err)}
		}
	}
	if v, ok := mkuo.mutation.BillingType(); ok {
		if err := missionkind.BillingTypeValidator(v); err != nil {
			return &ValidationError{Name: "billing_type", err: fmt.Errorf(`cep_ent: validator failed for field "MissionKind.billing_type": %w`, err)}
		}
	}
	return nil
}

func (mkuo *MissionKindUpdateOne) sqlSave(ctx context.Context) (_node *MissionKind, err error) {
	if err := mkuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(missionkind.Table, missionkind.Columns, sqlgraph.NewFieldSpec(missionkind.FieldID, field.TypeInt64))
	id, ok := mkuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "MissionKind.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mkuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, missionkind.FieldID)
		for _, f := range fields {
			if !missionkind.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != missionkind.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mkuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mkuo.mutation.CreatedBy(); ok {
		_spec.SetField(missionkind.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mkuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(missionkind.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mkuo.mutation.UpdatedBy(); ok {
		_spec.SetField(missionkind.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mkuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(missionkind.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mkuo.mutation.UpdatedAt(); ok {
		_spec.SetField(missionkind.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mkuo.mutation.DeletedAt(); ok {
		_spec.SetField(missionkind.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := mkuo.mutation.GetType(); ok {
		_spec.SetField(missionkind.FieldType, field.TypeEnum, value)
	}
	if value, ok := mkuo.mutation.Category(); ok {
		_spec.SetField(missionkind.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := mkuo.mutation.BillingType(); ok {
		_spec.SetField(missionkind.FieldBillingType, field.TypeEnum, value)
	}
	if mkuo.mutation.DeviceGpuMissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionkind.DeviceGpuMissionsTable,
			Columns: []string{missionkind.DeviceGpuMissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(devicegpumission.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mkuo.mutation.RemovedDeviceGpuMissionsIDs(); len(nodes) > 0 && !mkuo.mutation.DeviceGpuMissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionkind.DeviceGpuMissionsTable,
			Columns: []string{missionkind.DeviceGpuMissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(devicegpumission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mkuo.mutation.DeviceGpuMissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionkind.DeviceGpuMissionsTable,
			Columns: []string{missionkind.DeviceGpuMissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(devicegpumission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mkuo.mutation.MissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionkind.MissionsTable,
			Columns: []string{missionkind.MissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mkuo.mutation.RemovedMissionsIDs(); len(nodes) > 0 && !mkuo.mutation.MissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionkind.MissionsTable,
			Columns: []string{missionkind.MissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mkuo.mutation.MissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionkind.MissionsTable,
			Columns: []string{missionkind.MissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MissionKind{config: mkuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mkuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{missionkind.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mkuo.mutation.done = true
	return _node, nil
}
