// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/gpu"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/price"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// PriceCreate is the builder for creating a Price entity.
type PriceCreate struct {
	config
	mutation *PriceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (pc *PriceCreate) SetCreatedBy(i int64) *PriceCreate {
	pc.mutation.SetCreatedBy(i)
	return pc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pc *PriceCreate) SetNillableCreatedBy(i *int64) *PriceCreate {
	if i != nil {
		pc.SetCreatedBy(*i)
	}
	return pc
}

// SetUpdatedBy sets the "updated_by" field.
func (pc *PriceCreate) SetUpdatedBy(i int64) *PriceCreate {
	pc.mutation.SetUpdatedBy(i)
	return pc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pc *PriceCreate) SetNillableUpdatedBy(i *int64) *PriceCreate {
	if i != nil {
		pc.SetUpdatedBy(*i)
	}
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *PriceCreate) SetCreatedAt(t time.Time) *PriceCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PriceCreate) SetNillableCreatedAt(t *time.Time) *PriceCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PriceCreate) SetUpdatedAt(t time.Time) *PriceCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PriceCreate) SetNillableUpdatedAt(t *time.Time) *PriceCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *PriceCreate) SetDeletedAt(t time.Time) *PriceCreate {
	pc.mutation.SetDeletedAt(t)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *PriceCreate) SetNillableDeletedAt(t *time.Time) *PriceCreate {
	if t != nil {
		pc.SetDeletedAt(*t)
	}
	return pc
}

// SetGpuID sets the "gpu_id" field.
func (pc *PriceCreate) SetGpuID(i int64) *PriceCreate {
	pc.mutation.SetGpuID(i)
	return pc
}

// SetNillableGpuID sets the "gpu_id" field if the given value is not nil.
func (pc *PriceCreate) SetNillableGpuID(i *int64) *PriceCreate {
	if i != nil {
		pc.SetGpuID(*i)
	}
	return pc
}

// SetGpuVersion sets the "gpu_version" field.
func (pc *PriceCreate) SetGpuVersion(ev enums.GpuVersion) *PriceCreate {
	pc.mutation.SetGpuVersion(ev)
	return pc
}

// SetNillableGpuVersion sets the "gpu_version" field if the given value is not nil.
func (pc *PriceCreate) SetNillableGpuVersion(ev *enums.GpuVersion) *PriceCreate {
	if ev != nil {
		pc.SetGpuVersion(*ev)
	}
	return pc
}

// SetMissionType sets the "mission_type" field.
func (pc *PriceCreate) SetMissionType(et enums.MissionType) *PriceCreate {
	pc.mutation.SetMissionType(et)
	return pc
}

// SetNillableMissionType sets the "mission_type" field if the given value is not nil.
func (pc *PriceCreate) SetNillableMissionType(et *enums.MissionType) *PriceCreate {
	if et != nil {
		pc.SetMissionType(*et)
	}
	return pc
}

// SetMissionCategory sets the "mission_category" field.
func (pc *PriceCreate) SetMissionCategory(ec enums.MissionCategory) *PriceCreate {
	pc.mutation.SetMissionCategory(ec)
	return pc
}

// SetNillableMissionCategory sets the "mission_category" field if the given value is not nil.
func (pc *PriceCreate) SetNillableMissionCategory(ec *enums.MissionCategory) *PriceCreate {
	if ec != nil {
		pc.SetMissionCategory(*ec)
	}
	return pc
}

// SetMissionBillingType sets the "mission_billing_type" field.
func (pc *PriceCreate) SetMissionBillingType(ebt enums.MissionBillingType) *PriceCreate {
	pc.mutation.SetMissionBillingType(ebt)
	return pc
}

// SetNillableMissionBillingType sets the "mission_billing_type" field if the given value is not nil.
func (pc *PriceCreate) SetNillableMissionBillingType(ebt *enums.MissionBillingType) *PriceCreate {
	if ebt != nil {
		pc.SetMissionBillingType(*ebt)
	}
	return pc
}

// SetCep sets the "cep" field.
func (pc *PriceCreate) SetCep(i int64) *PriceCreate {
	pc.mutation.SetCep(i)
	return pc
}

// SetNillableCep sets the "cep" field if the given value is not nil.
func (pc *PriceCreate) SetNillableCep(i *int64) *PriceCreate {
	if i != nil {
		pc.SetCep(*i)
	}
	return pc
}

// SetStartedAt sets the "started_at" field.
func (pc *PriceCreate) SetStartedAt(t time.Time) *PriceCreate {
	pc.mutation.SetStartedAt(t)
	return pc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (pc *PriceCreate) SetNillableStartedAt(t *time.Time) *PriceCreate {
	if t != nil {
		pc.SetStartedAt(*t)
	}
	return pc
}

// SetFinishedAt sets the "finished_at" field.
func (pc *PriceCreate) SetFinishedAt(t time.Time) *PriceCreate {
	pc.mutation.SetFinishedAt(t)
	return pc
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (pc *PriceCreate) SetNillableFinishedAt(t *time.Time) *PriceCreate {
	if t != nil {
		pc.SetFinishedAt(*t)
	}
	return pc
}

// SetIsDeprecated sets the "is_deprecated" field.
func (pc *PriceCreate) SetIsDeprecated(b bool) *PriceCreate {
	pc.mutation.SetIsDeprecated(b)
	return pc
}

// SetNillableIsDeprecated sets the "is_deprecated" field if the given value is not nil.
func (pc *PriceCreate) SetNillableIsDeprecated(b *bool) *PriceCreate {
	if b != nil {
		pc.SetIsDeprecated(*b)
	}
	return pc
}

// SetIsSensitive sets the "is_sensitive" field.
func (pc *PriceCreate) SetIsSensitive(b bool) *PriceCreate {
	pc.mutation.SetIsSensitive(b)
	return pc
}

// SetNillableIsSensitive sets the "is_sensitive" field if the given value is not nil.
func (pc *PriceCreate) SetNillableIsSensitive(b *bool) *PriceCreate {
	if b != nil {
		pc.SetIsSensitive(*b)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PriceCreate) SetID(i int64) *PriceCreate {
	pc.mutation.SetID(i)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PriceCreate) SetNillableID(i *int64) *PriceCreate {
	if i != nil {
		pc.SetID(*i)
	}
	return pc
}

// SetGpu sets the "gpu" edge to the Gpu entity.
func (pc *PriceCreate) SetGpu(g *Gpu) *PriceCreate {
	return pc.SetGpuID(g.ID)
}

// Mutation returns the PriceMutation object of the builder.
func (pc *PriceCreate) Mutation() *PriceMutation {
	return pc.mutation
}

// Save creates the Price in the database.
func (pc *PriceCreate) Save(ctx context.Context) (*Price, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PriceCreate) SaveX(ctx context.Context) *Price {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PriceCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PriceCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PriceCreate) defaults() {
	if _, ok := pc.mutation.CreatedBy(); !ok {
		v := price.DefaultCreatedBy
		pc.mutation.SetCreatedBy(v)
	}
	if _, ok := pc.mutation.UpdatedBy(); !ok {
		v := price.DefaultUpdatedBy
		pc.mutation.SetUpdatedBy(v)
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := price.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := price.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.DeletedAt(); !ok {
		v := price.DefaultDeletedAt
		pc.mutation.SetDeletedAt(v)
	}
	if _, ok := pc.mutation.GpuID(); !ok {
		v := price.DefaultGpuID
		pc.mutation.SetGpuID(v)
	}
	if _, ok := pc.mutation.GpuVersion(); !ok {
		v := price.DefaultGpuVersion
		pc.mutation.SetGpuVersion(v)
	}
	if _, ok := pc.mutation.MissionType(); !ok {
		v := price.DefaultMissionType
		pc.mutation.SetMissionType(v)
	}
	if _, ok := pc.mutation.MissionCategory(); !ok {
		v := price.DefaultMissionCategory
		pc.mutation.SetMissionCategory(v)
	}
	if _, ok := pc.mutation.MissionBillingType(); !ok {
		v := price.DefaultMissionBillingType
		pc.mutation.SetMissionBillingType(v)
	}
	if _, ok := pc.mutation.Cep(); !ok {
		v := price.DefaultCep
		pc.mutation.SetCep(v)
	}
	if _, ok := pc.mutation.IsDeprecated(); !ok {
		v := price.DefaultIsDeprecated
		pc.mutation.SetIsDeprecated(v)
	}
	if _, ok := pc.mutation.IsSensitive(); !ok {
		v := price.DefaultIsSensitive
		pc.mutation.SetIsSensitive(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := price.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PriceCreate) check() error {
	if _, ok := pc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "Price.created_by"`)}
	}
	if _, ok := pc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "Price.updated_by"`)}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "Price.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "Price.updated_at"`)}
	}
	if _, ok := pc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "Price.deleted_at"`)}
	}
	if _, ok := pc.mutation.GpuID(); !ok {
		return &ValidationError{Name: "gpu_id", err: errors.New(`cep_ent: missing required field "Price.gpu_id"`)}
	}
	if _, ok := pc.mutation.GpuVersion(); !ok {
		return &ValidationError{Name: "gpu_version", err: errors.New(`cep_ent: missing required field "Price.gpu_version"`)}
	}
	if v, ok := pc.mutation.GpuVersion(); ok {
		if err := price.GpuVersionValidator(v); err != nil {
			return &ValidationError{Name: "gpu_version", err: fmt.Errorf(`cep_ent: validator failed for field "Price.gpu_version": %w`, err)}
		}
	}
	if _, ok := pc.mutation.MissionType(); !ok {
		return &ValidationError{Name: "mission_type", err: errors.New(`cep_ent: missing required field "Price.mission_type"`)}
	}
	if v, ok := pc.mutation.MissionType(); ok {
		if err := price.MissionTypeValidator(v); err != nil {
			return &ValidationError{Name: "mission_type", err: fmt.Errorf(`cep_ent: validator failed for field "Price.mission_type": %w`, err)}
		}
	}
	if _, ok := pc.mutation.MissionCategory(); !ok {
		return &ValidationError{Name: "mission_category", err: errors.New(`cep_ent: missing required field "Price.mission_category"`)}
	}
	if v, ok := pc.mutation.MissionCategory(); ok {
		if err := price.MissionCategoryValidator(v); err != nil {
			return &ValidationError{Name: "mission_category", err: fmt.Errorf(`cep_ent: validator failed for field "Price.mission_category": %w`, err)}
		}
	}
	if _, ok := pc.mutation.MissionBillingType(); !ok {
		return &ValidationError{Name: "mission_billing_type", err: errors.New(`cep_ent: missing required field "Price.mission_billing_type"`)}
	}
	if v, ok := pc.mutation.MissionBillingType(); ok {
		if err := price.MissionBillingTypeValidator(v); err != nil {
			return &ValidationError{Name: "mission_billing_type", err: fmt.Errorf(`cep_ent: validator failed for field "Price.mission_billing_type": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Cep(); !ok {
		return &ValidationError{Name: "cep", err: errors.New(`cep_ent: missing required field "Price.cep"`)}
	}
	if _, ok := pc.mutation.IsDeprecated(); !ok {
		return &ValidationError{Name: "is_deprecated", err: errors.New(`cep_ent: missing required field "Price.is_deprecated"`)}
	}
	if _, ok := pc.mutation.IsSensitive(); !ok {
		return &ValidationError{Name: "is_sensitive", err: errors.New(`cep_ent: missing required field "Price.is_sensitive"`)}
	}
	if _, ok := pc.mutation.GpuID(); !ok {
		return &ValidationError{Name: "gpu", err: errors.New(`cep_ent: missing required edge "Price.gpu"`)}
	}
	return nil
}

func (pc *PriceCreate) sqlSave(ctx context.Context) (*Price, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PriceCreate) createSpec() (*Price, *sqlgraph.CreateSpec) {
	var (
		_node = &Price{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(price.Table, sqlgraph.NewFieldSpec(price.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.CreatedBy(); ok {
		_spec.SetField(price.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := pc.mutation.UpdatedBy(); ok {
		_spec.SetField(price.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(price.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(price.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.SetField(price.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := pc.mutation.GpuVersion(); ok {
		_spec.SetField(price.FieldGpuVersion, field.TypeEnum, value)
		_node.GpuVersion = value
	}
	if value, ok := pc.mutation.MissionType(); ok {
		_spec.SetField(price.FieldMissionType, field.TypeEnum, value)
		_node.MissionType = value
	}
	if value, ok := pc.mutation.MissionCategory(); ok {
		_spec.SetField(price.FieldMissionCategory, field.TypeEnum, value)
		_node.MissionCategory = value
	}
	if value, ok := pc.mutation.MissionBillingType(); ok {
		_spec.SetField(price.FieldMissionBillingType, field.TypeEnum, value)
		_node.MissionBillingType = value
	}
	if value, ok := pc.mutation.Cep(); ok {
		_spec.SetField(price.FieldCep, field.TypeInt64, value)
		_node.Cep = value
	}
	if value, ok := pc.mutation.StartedAt(); ok {
		_spec.SetField(price.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = &value
	}
	if value, ok := pc.mutation.FinishedAt(); ok {
		_spec.SetField(price.FieldFinishedAt, field.TypeTime, value)
		_node.FinishedAt = &value
	}
	if value, ok := pc.mutation.IsDeprecated(); ok {
		_spec.SetField(price.FieldIsDeprecated, field.TypeBool, value)
		_node.IsDeprecated = value
	}
	if value, ok := pc.mutation.IsSensitive(); ok {
		_spec.SetField(price.FieldIsSensitive, field.TypeBool, value)
		_node.IsSensitive = value
	}
	if nodes := pc.mutation.GpuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   price.GpuTable,
			Columns: []string{price.GpuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gpu.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.GpuID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Price.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PriceUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (pc *PriceCreate) OnConflict(opts ...sql.ConflictOption) *PriceUpsertOne {
	pc.conflict = opts
	return &PriceUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Price.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PriceCreate) OnConflictColumns(columns ...string) *PriceUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PriceUpsertOne{
		create: pc,
	}
}

type (
	// PriceUpsertOne is the builder for "upsert"-ing
	//  one Price node.
	PriceUpsertOne struct {
		create *PriceCreate
	}

	// PriceUpsert is the "OnConflict" setter.
	PriceUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *PriceUpsert) SetCreatedBy(v int64) *PriceUpsert {
	u.Set(price.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PriceUpsert) UpdateCreatedBy() *PriceUpsert {
	u.SetExcluded(price.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *PriceUpsert) AddCreatedBy(v int64) *PriceUpsert {
	u.Add(price.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PriceUpsert) SetUpdatedBy(v int64) *PriceUpsert {
	u.Set(price.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PriceUpsert) UpdateUpdatedBy() *PriceUpsert {
	u.SetExcluded(price.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *PriceUpsert) AddUpdatedBy(v int64) *PriceUpsert {
	u.Add(price.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PriceUpsert) SetUpdatedAt(v time.Time) *PriceUpsert {
	u.Set(price.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PriceUpsert) UpdateUpdatedAt() *PriceUpsert {
	u.SetExcluded(price.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PriceUpsert) SetDeletedAt(v time.Time) *PriceUpsert {
	u.Set(price.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PriceUpsert) UpdateDeletedAt() *PriceUpsert {
	u.SetExcluded(price.FieldDeletedAt)
	return u
}

// SetGpuID sets the "gpu_id" field.
func (u *PriceUpsert) SetGpuID(v int64) *PriceUpsert {
	u.Set(price.FieldGpuID, v)
	return u
}

// UpdateGpuID sets the "gpu_id" field to the value that was provided on create.
func (u *PriceUpsert) UpdateGpuID() *PriceUpsert {
	u.SetExcluded(price.FieldGpuID)
	return u
}

// SetGpuVersion sets the "gpu_version" field.
func (u *PriceUpsert) SetGpuVersion(v enums.GpuVersion) *PriceUpsert {
	u.Set(price.FieldGpuVersion, v)
	return u
}

// UpdateGpuVersion sets the "gpu_version" field to the value that was provided on create.
func (u *PriceUpsert) UpdateGpuVersion() *PriceUpsert {
	u.SetExcluded(price.FieldGpuVersion)
	return u
}

// SetMissionType sets the "mission_type" field.
func (u *PriceUpsert) SetMissionType(v enums.MissionType) *PriceUpsert {
	u.Set(price.FieldMissionType, v)
	return u
}

// UpdateMissionType sets the "mission_type" field to the value that was provided on create.
func (u *PriceUpsert) UpdateMissionType() *PriceUpsert {
	u.SetExcluded(price.FieldMissionType)
	return u
}

// SetMissionCategory sets the "mission_category" field.
func (u *PriceUpsert) SetMissionCategory(v enums.MissionCategory) *PriceUpsert {
	u.Set(price.FieldMissionCategory, v)
	return u
}

// UpdateMissionCategory sets the "mission_category" field to the value that was provided on create.
func (u *PriceUpsert) UpdateMissionCategory() *PriceUpsert {
	u.SetExcluded(price.FieldMissionCategory)
	return u
}

// SetMissionBillingType sets the "mission_billing_type" field.
func (u *PriceUpsert) SetMissionBillingType(v enums.MissionBillingType) *PriceUpsert {
	u.Set(price.FieldMissionBillingType, v)
	return u
}

// UpdateMissionBillingType sets the "mission_billing_type" field to the value that was provided on create.
func (u *PriceUpsert) UpdateMissionBillingType() *PriceUpsert {
	u.SetExcluded(price.FieldMissionBillingType)
	return u
}

// SetCep sets the "cep" field.
func (u *PriceUpsert) SetCep(v int64) *PriceUpsert {
	u.Set(price.FieldCep, v)
	return u
}

// UpdateCep sets the "cep" field to the value that was provided on create.
func (u *PriceUpsert) UpdateCep() *PriceUpsert {
	u.SetExcluded(price.FieldCep)
	return u
}

// AddCep adds v to the "cep" field.
func (u *PriceUpsert) AddCep(v int64) *PriceUpsert {
	u.Add(price.FieldCep, v)
	return u
}

// SetStartedAt sets the "started_at" field.
func (u *PriceUpsert) SetStartedAt(v time.Time) *PriceUpsert {
	u.Set(price.FieldStartedAt, v)
	return u
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *PriceUpsert) UpdateStartedAt() *PriceUpsert {
	u.SetExcluded(price.FieldStartedAt)
	return u
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *PriceUpsert) ClearStartedAt() *PriceUpsert {
	u.SetNull(price.FieldStartedAt)
	return u
}

// SetFinishedAt sets the "finished_at" field.
func (u *PriceUpsert) SetFinishedAt(v time.Time) *PriceUpsert {
	u.Set(price.FieldFinishedAt, v)
	return u
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *PriceUpsert) UpdateFinishedAt() *PriceUpsert {
	u.SetExcluded(price.FieldFinishedAt)
	return u
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (u *PriceUpsert) ClearFinishedAt() *PriceUpsert {
	u.SetNull(price.FieldFinishedAt)
	return u
}

// SetIsDeprecated sets the "is_deprecated" field.
func (u *PriceUpsert) SetIsDeprecated(v bool) *PriceUpsert {
	u.Set(price.FieldIsDeprecated, v)
	return u
}

// UpdateIsDeprecated sets the "is_deprecated" field to the value that was provided on create.
func (u *PriceUpsert) UpdateIsDeprecated() *PriceUpsert {
	u.SetExcluded(price.FieldIsDeprecated)
	return u
}

// SetIsSensitive sets the "is_sensitive" field.
func (u *PriceUpsert) SetIsSensitive(v bool) *PriceUpsert {
	u.Set(price.FieldIsSensitive, v)
	return u
}

// UpdateIsSensitive sets the "is_sensitive" field to the value that was provided on create.
func (u *PriceUpsert) UpdateIsSensitive() *PriceUpsert {
	u.SetExcluded(price.FieldIsSensitive)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Price.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(price.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PriceUpsertOne) UpdateNewValues() *PriceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(price.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(price.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Price.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PriceUpsertOne) Ignore() *PriceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PriceUpsertOne) DoNothing() *PriceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PriceCreate.OnConflict
// documentation for more info.
func (u *PriceUpsertOne) Update(set func(*PriceUpsert)) *PriceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PriceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *PriceUpsertOne) SetCreatedBy(v int64) *PriceUpsertOne {
	return u.Update(func(s *PriceUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *PriceUpsertOne) AddCreatedBy(v int64) *PriceUpsertOne {
	return u.Update(func(s *PriceUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PriceUpsertOne) UpdateCreatedBy() *PriceUpsertOne {
	return u.Update(func(s *PriceUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PriceUpsertOne) SetUpdatedBy(v int64) *PriceUpsertOne {
	return u.Update(func(s *PriceUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *PriceUpsertOne) AddUpdatedBy(v int64) *PriceUpsertOne {
	return u.Update(func(s *PriceUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PriceUpsertOne) UpdateUpdatedBy() *PriceUpsertOne {
	return u.Update(func(s *PriceUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PriceUpsertOne) SetUpdatedAt(v time.Time) *PriceUpsertOne {
	return u.Update(func(s *PriceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PriceUpsertOne) UpdateUpdatedAt() *PriceUpsertOne {
	return u.Update(func(s *PriceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PriceUpsertOne) SetDeletedAt(v time.Time) *PriceUpsertOne {
	return u.Update(func(s *PriceUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PriceUpsertOne) UpdateDeletedAt() *PriceUpsertOne {
	return u.Update(func(s *PriceUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetGpuID sets the "gpu_id" field.
func (u *PriceUpsertOne) SetGpuID(v int64) *PriceUpsertOne {
	return u.Update(func(s *PriceUpsert) {
		s.SetGpuID(v)
	})
}

// UpdateGpuID sets the "gpu_id" field to the value that was provided on create.
func (u *PriceUpsertOne) UpdateGpuID() *PriceUpsertOne {
	return u.Update(func(s *PriceUpsert) {
		s.UpdateGpuID()
	})
}

// SetGpuVersion sets the "gpu_version" field.
func (u *PriceUpsertOne) SetGpuVersion(v enums.GpuVersion) *PriceUpsertOne {
	return u.Update(func(s *PriceUpsert) {
		s.SetGpuVersion(v)
	})
}

// UpdateGpuVersion sets the "gpu_version" field to the value that was provided on create.
func (u *PriceUpsertOne) UpdateGpuVersion() *PriceUpsertOne {
	return u.Update(func(s *PriceUpsert) {
		s.UpdateGpuVersion()
	})
}

// SetMissionType sets the "mission_type" field.
func (u *PriceUpsertOne) SetMissionType(v enums.MissionType) *PriceUpsertOne {
	return u.Update(func(s *PriceUpsert) {
		s.SetMissionType(v)
	})
}

// UpdateMissionType sets the "mission_type" field to the value that was provided on create.
func (u *PriceUpsertOne) UpdateMissionType() *PriceUpsertOne {
	return u.Update(func(s *PriceUpsert) {
		s.UpdateMissionType()
	})
}

// SetMissionCategory sets the "mission_category" field.
func (u *PriceUpsertOne) SetMissionCategory(v enums.MissionCategory) *PriceUpsertOne {
	return u.Update(func(s *PriceUpsert) {
		s.SetMissionCategory(v)
	})
}

// UpdateMissionCategory sets the "mission_category" field to the value that was provided on create.
func (u *PriceUpsertOne) UpdateMissionCategory() *PriceUpsertOne {
	return u.Update(func(s *PriceUpsert) {
		s.UpdateMissionCategory()
	})
}

// SetMissionBillingType sets the "mission_billing_type" field.
func (u *PriceUpsertOne) SetMissionBillingType(v enums.MissionBillingType) *PriceUpsertOne {
	return u.Update(func(s *PriceUpsert) {
		s.SetMissionBillingType(v)
	})
}

// UpdateMissionBillingType sets the "mission_billing_type" field to the value that was provided on create.
func (u *PriceUpsertOne) UpdateMissionBillingType() *PriceUpsertOne {
	return u.Update(func(s *PriceUpsert) {
		s.UpdateMissionBillingType()
	})
}

// SetCep sets the "cep" field.
func (u *PriceUpsertOne) SetCep(v int64) *PriceUpsertOne {
	return u.Update(func(s *PriceUpsert) {
		s.SetCep(v)
	})
}

// AddCep adds v to the "cep" field.
func (u *PriceUpsertOne) AddCep(v int64) *PriceUpsertOne {
	return u.Update(func(s *PriceUpsert) {
		s.AddCep(v)
	})
}

// UpdateCep sets the "cep" field to the value that was provided on create.
func (u *PriceUpsertOne) UpdateCep() *PriceUpsertOne {
	return u.Update(func(s *PriceUpsert) {
		s.UpdateCep()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *PriceUpsertOne) SetStartedAt(v time.Time) *PriceUpsertOne {
	return u.Update(func(s *PriceUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *PriceUpsertOne) UpdateStartedAt() *PriceUpsertOne {
	return u.Update(func(s *PriceUpsert) {
		s.UpdateStartedAt()
	})
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *PriceUpsertOne) ClearStartedAt() *PriceUpsertOne {
	return u.Update(func(s *PriceUpsert) {
		s.ClearStartedAt()
	})
}

// SetFinishedAt sets the "finished_at" field.
func (u *PriceUpsertOne) SetFinishedAt(v time.Time) *PriceUpsertOne {
	return u.Update(func(s *PriceUpsert) {
		s.SetFinishedAt(v)
	})
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *PriceUpsertOne) UpdateFinishedAt() *PriceUpsertOne {
	return u.Update(func(s *PriceUpsert) {
		s.UpdateFinishedAt()
	})
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (u *PriceUpsertOne) ClearFinishedAt() *PriceUpsertOne {
	return u.Update(func(s *PriceUpsert) {
		s.ClearFinishedAt()
	})
}

// SetIsDeprecated sets the "is_deprecated" field.
func (u *PriceUpsertOne) SetIsDeprecated(v bool) *PriceUpsertOne {
	return u.Update(func(s *PriceUpsert) {
		s.SetIsDeprecated(v)
	})
}

// UpdateIsDeprecated sets the "is_deprecated" field to the value that was provided on create.
func (u *PriceUpsertOne) UpdateIsDeprecated() *PriceUpsertOne {
	return u.Update(func(s *PriceUpsert) {
		s.UpdateIsDeprecated()
	})
}

// SetIsSensitive sets the "is_sensitive" field.
func (u *PriceUpsertOne) SetIsSensitive(v bool) *PriceUpsertOne {
	return u.Update(func(s *PriceUpsert) {
		s.SetIsSensitive(v)
	})
}

// UpdateIsSensitive sets the "is_sensitive" field to the value that was provided on create.
func (u *PriceUpsertOne) UpdateIsSensitive() *PriceUpsertOne {
	return u.Update(func(s *PriceUpsert) {
		s.UpdateIsSensitive()
	})
}

// Exec executes the query.
func (u *PriceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for PriceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PriceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PriceUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PriceUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PriceCreateBulk is the builder for creating many Price entities in bulk.
type PriceCreateBulk struct {
	config
	err      error
	builders []*PriceCreate
	conflict []sql.ConflictOption
}

// Save creates the Price entities in the database.
func (pcb *PriceCreateBulk) Save(ctx context.Context) ([]*Price, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Price, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PriceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PriceCreateBulk) SaveX(ctx context.Context) []*Price {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PriceCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PriceCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Price.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PriceUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (pcb *PriceCreateBulk) OnConflict(opts ...sql.ConflictOption) *PriceUpsertBulk {
	pcb.conflict = opts
	return &PriceUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Price.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PriceCreateBulk) OnConflictColumns(columns ...string) *PriceUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PriceUpsertBulk{
		create: pcb,
	}
}

// PriceUpsertBulk is the builder for "upsert"-ing
// a bulk of Price nodes.
type PriceUpsertBulk struct {
	create *PriceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Price.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(price.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PriceUpsertBulk) UpdateNewValues() *PriceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(price.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(price.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Price.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PriceUpsertBulk) Ignore() *PriceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PriceUpsertBulk) DoNothing() *PriceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PriceCreateBulk.OnConflict
// documentation for more info.
func (u *PriceUpsertBulk) Update(set func(*PriceUpsert)) *PriceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PriceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *PriceUpsertBulk) SetCreatedBy(v int64) *PriceUpsertBulk {
	return u.Update(func(s *PriceUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *PriceUpsertBulk) AddCreatedBy(v int64) *PriceUpsertBulk {
	return u.Update(func(s *PriceUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PriceUpsertBulk) UpdateCreatedBy() *PriceUpsertBulk {
	return u.Update(func(s *PriceUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PriceUpsertBulk) SetUpdatedBy(v int64) *PriceUpsertBulk {
	return u.Update(func(s *PriceUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *PriceUpsertBulk) AddUpdatedBy(v int64) *PriceUpsertBulk {
	return u.Update(func(s *PriceUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PriceUpsertBulk) UpdateUpdatedBy() *PriceUpsertBulk {
	return u.Update(func(s *PriceUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PriceUpsertBulk) SetUpdatedAt(v time.Time) *PriceUpsertBulk {
	return u.Update(func(s *PriceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PriceUpsertBulk) UpdateUpdatedAt() *PriceUpsertBulk {
	return u.Update(func(s *PriceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PriceUpsertBulk) SetDeletedAt(v time.Time) *PriceUpsertBulk {
	return u.Update(func(s *PriceUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PriceUpsertBulk) UpdateDeletedAt() *PriceUpsertBulk {
	return u.Update(func(s *PriceUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetGpuID sets the "gpu_id" field.
func (u *PriceUpsertBulk) SetGpuID(v int64) *PriceUpsertBulk {
	return u.Update(func(s *PriceUpsert) {
		s.SetGpuID(v)
	})
}

// UpdateGpuID sets the "gpu_id" field to the value that was provided on create.
func (u *PriceUpsertBulk) UpdateGpuID() *PriceUpsertBulk {
	return u.Update(func(s *PriceUpsert) {
		s.UpdateGpuID()
	})
}

// SetGpuVersion sets the "gpu_version" field.
func (u *PriceUpsertBulk) SetGpuVersion(v enums.GpuVersion) *PriceUpsertBulk {
	return u.Update(func(s *PriceUpsert) {
		s.SetGpuVersion(v)
	})
}

// UpdateGpuVersion sets the "gpu_version" field to the value that was provided on create.
func (u *PriceUpsertBulk) UpdateGpuVersion() *PriceUpsertBulk {
	return u.Update(func(s *PriceUpsert) {
		s.UpdateGpuVersion()
	})
}

// SetMissionType sets the "mission_type" field.
func (u *PriceUpsertBulk) SetMissionType(v enums.MissionType) *PriceUpsertBulk {
	return u.Update(func(s *PriceUpsert) {
		s.SetMissionType(v)
	})
}

// UpdateMissionType sets the "mission_type" field to the value that was provided on create.
func (u *PriceUpsertBulk) UpdateMissionType() *PriceUpsertBulk {
	return u.Update(func(s *PriceUpsert) {
		s.UpdateMissionType()
	})
}

// SetMissionCategory sets the "mission_category" field.
func (u *PriceUpsertBulk) SetMissionCategory(v enums.MissionCategory) *PriceUpsertBulk {
	return u.Update(func(s *PriceUpsert) {
		s.SetMissionCategory(v)
	})
}

// UpdateMissionCategory sets the "mission_category" field to the value that was provided on create.
func (u *PriceUpsertBulk) UpdateMissionCategory() *PriceUpsertBulk {
	return u.Update(func(s *PriceUpsert) {
		s.UpdateMissionCategory()
	})
}

// SetMissionBillingType sets the "mission_billing_type" field.
func (u *PriceUpsertBulk) SetMissionBillingType(v enums.MissionBillingType) *PriceUpsertBulk {
	return u.Update(func(s *PriceUpsert) {
		s.SetMissionBillingType(v)
	})
}

// UpdateMissionBillingType sets the "mission_billing_type" field to the value that was provided on create.
func (u *PriceUpsertBulk) UpdateMissionBillingType() *PriceUpsertBulk {
	return u.Update(func(s *PriceUpsert) {
		s.UpdateMissionBillingType()
	})
}

// SetCep sets the "cep" field.
func (u *PriceUpsertBulk) SetCep(v int64) *PriceUpsertBulk {
	return u.Update(func(s *PriceUpsert) {
		s.SetCep(v)
	})
}

// AddCep adds v to the "cep" field.
func (u *PriceUpsertBulk) AddCep(v int64) *PriceUpsertBulk {
	return u.Update(func(s *PriceUpsert) {
		s.AddCep(v)
	})
}

// UpdateCep sets the "cep" field to the value that was provided on create.
func (u *PriceUpsertBulk) UpdateCep() *PriceUpsertBulk {
	return u.Update(func(s *PriceUpsert) {
		s.UpdateCep()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *PriceUpsertBulk) SetStartedAt(v time.Time) *PriceUpsertBulk {
	return u.Update(func(s *PriceUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *PriceUpsertBulk) UpdateStartedAt() *PriceUpsertBulk {
	return u.Update(func(s *PriceUpsert) {
		s.UpdateStartedAt()
	})
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *PriceUpsertBulk) ClearStartedAt() *PriceUpsertBulk {
	return u.Update(func(s *PriceUpsert) {
		s.ClearStartedAt()
	})
}

// SetFinishedAt sets the "finished_at" field.
func (u *PriceUpsertBulk) SetFinishedAt(v time.Time) *PriceUpsertBulk {
	return u.Update(func(s *PriceUpsert) {
		s.SetFinishedAt(v)
	})
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *PriceUpsertBulk) UpdateFinishedAt() *PriceUpsertBulk {
	return u.Update(func(s *PriceUpsert) {
		s.UpdateFinishedAt()
	})
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (u *PriceUpsertBulk) ClearFinishedAt() *PriceUpsertBulk {
	return u.Update(func(s *PriceUpsert) {
		s.ClearFinishedAt()
	})
}

// SetIsDeprecated sets the "is_deprecated" field.
func (u *PriceUpsertBulk) SetIsDeprecated(v bool) *PriceUpsertBulk {
	return u.Update(func(s *PriceUpsert) {
		s.SetIsDeprecated(v)
	})
}

// UpdateIsDeprecated sets the "is_deprecated" field to the value that was provided on create.
func (u *PriceUpsertBulk) UpdateIsDeprecated() *PriceUpsertBulk {
	return u.Update(func(s *PriceUpsert) {
		s.UpdateIsDeprecated()
	})
}

// SetIsSensitive sets the "is_sensitive" field.
func (u *PriceUpsertBulk) SetIsSensitive(v bool) *PriceUpsertBulk {
	return u.Update(func(s *PriceUpsert) {
		s.SetIsSensitive(v)
	})
}

// UpdateIsSensitive sets the "is_sensitive" field to the value that was provided on create.
func (u *PriceUpsertBulk) UpdateIsSensitive() *PriceUpsertBulk {
	return u.Update(func(s *PriceUpsert) {
		s.UpdateIsSensitive()
	})
}

// Exec executes the query.
func (u *PriceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the PriceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for PriceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PriceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
