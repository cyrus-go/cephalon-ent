// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/enummissionstatus"
	"cephalon-ent/pkg/cep_ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EnumMissionStatusUpdate is the builder for updating EnumMissionStatus entities.
type EnumMissionStatusUpdate struct {
	config
	hooks    []Hook
	mutation *EnumMissionStatusMutation
}

// Where appends a list predicates to the EnumMissionStatusUpdate builder.
func (emsu *EnumMissionStatusUpdate) Where(ps ...predicate.EnumMissionStatus) *EnumMissionStatusUpdate {
	emsu.mutation.Where(ps...)
	return emsu
}

// SetCreatedBy sets the "created_by" field.
func (emsu *EnumMissionStatusUpdate) SetCreatedBy(i int64) *EnumMissionStatusUpdate {
	emsu.mutation.ResetCreatedBy()
	emsu.mutation.SetCreatedBy(i)
	return emsu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (emsu *EnumMissionStatusUpdate) SetNillableCreatedBy(i *int64) *EnumMissionStatusUpdate {
	if i != nil {
		emsu.SetCreatedBy(*i)
	}
	return emsu
}

// AddCreatedBy adds i to the "created_by" field.
func (emsu *EnumMissionStatusUpdate) AddCreatedBy(i int64) *EnumMissionStatusUpdate {
	emsu.mutation.AddCreatedBy(i)
	return emsu
}

// SetUpdatedBy sets the "updated_by" field.
func (emsu *EnumMissionStatusUpdate) SetUpdatedBy(i int64) *EnumMissionStatusUpdate {
	emsu.mutation.ResetUpdatedBy()
	emsu.mutation.SetUpdatedBy(i)
	return emsu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (emsu *EnumMissionStatusUpdate) SetNillableUpdatedBy(i *int64) *EnumMissionStatusUpdate {
	if i != nil {
		emsu.SetUpdatedBy(*i)
	}
	return emsu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (emsu *EnumMissionStatusUpdate) AddUpdatedBy(i int64) *EnumMissionStatusUpdate {
	emsu.mutation.AddUpdatedBy(i)
	return emsu
}

// SetUpdatedAt sets the "updated_at" field.
func (emsu *EnumMissionStatusUpdate) SetUpdatedAt(t time.Time) *EnumMissionStatusUpdate {
	emsu.mutation.SetUpdatedAt(t)
	return emsu
}

// SetDeletedAt sets the "deleted_at" field.
func (emsu *EnumMissionStatusUpdate) SetDeletedAt(t time.Time) *EnumMissionStatusUpdate {
	emsu.mutation.SetDeletedAt(t)
	return emsu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (emsu *EnumMissionStatusUpdate) SetNillableDeletedAt(t *time.Time) *EnumMissionStatusUpdate {
	if t != nil {
		emsu.SetDeletedAt(*t)
	}
	return emsu
}

// SetFrontStatus sets the "front_status" field.
func (emsu *EnumMissionStatusUpdate) SetFrontStatus(s string) *EnumMissionStatusUpdate {
	emsu.mutation.SetFrontStatus(s)
	return emsu
}

// SetNillableFrontStatus sets the "front_status" field if the given value is not nil.
func (emsu *EnumMissionStatusUpdate) SetNillableFrontStatus(s *string) *EnumMissionStatusUpdate {
	if s != nil {
		emsu.SetFrontStatus(*s)
	}
	return emsu
}

// SetMissionType sets the "mission_type" field.
func (emsu *EnumMissionStatusUpdate) SetMissionType(s string) *EnumMissionStatusUpdate {
	emsu.mutation.SetMissionType(s)
	return emsu
}

// SetNillableMissionType sets the "mission_type" field if the given value is not nil.
func (emsu *EnumMissionStatusUpdate) SetNillableMissionType(s *string) *EnumMissionStatusUpdate {
	if s != nil {
		emsu.SetMissionType(*s)
	}
	return emsu
}

// SetMissionStatus sets the "mission_status" field.
func (emsu *EnumMissionStatusUpdate) SetMissionStatus(s string) *EnumMissionStatusUpdate {
	emsu.mutation.SetMissionStatus(s)
	return emsu
}

// SetNillableMissionStatus sets the "mission_status" field if the given value is not nil.
func (emsu *EnumMissionStatusUpdate) SetNillableMissionStatus(s *string) *EnumMissionStatusUpdate {
	if s != nil {
		emsu.SetMissionStatus(*s)
	}
	return emsu
}

// Mutation returns the EnumMissionStatusMutation object of the builder.
func (emsu *EnumMissionStatusUpdate) Mutation() *EnumMissionStatusMutation {
	return emsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (emsu *EnumMissionStatusUpdate) Save(ctx context.Context) (int, error) {
	emsu.defaults()
	return withHooks(ctx, emsu.sqlSave, emsu.mutation, emsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (emsu *EnumMissionStatusUpdate) SaveX(ctx context.Context) int {
	affected, err := emsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (emsu *EnumMissionStatusUpdate) Exec(ctx context.Context) error {
	_, err := emsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (emsu *EnumMissionStatusUpdate) ExecX(ctx context.Context) {
	if err := emsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (emsu *EnumMissionStatusUpdate) defaults() {
	if _, ok := emsu.mutation.UpdatedAt(); !ok {
		v := enummissionstatus.UpdateDefaultUpdatedAt()
		emsu.mutation.SetUpdatedAt(v)
	}
}

func (emsu *EnumMissionStatusUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(enummissionstatus.Table, enummissionstatus.Columns, sqlgraph.NewFieldSpec(enummissionstatus.FieldID, field.TypeInt64))
	if ps := emsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := emsu.mutation.CreatedBy(); ok {
		_spec.SetField(enummissionstatus.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := emsu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(enummissionstatus.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := emsu.mutation.UpdatedBy(); ok {
		_spec.SetField(enummissionstatus.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := emsu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(enummissionstatus.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := emsu.mutation.UpdatedAt(); ok {
		_spec.SetField(enummissionstatus.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := emsu.mutation.DeletedAt(); ok {
		_spec.SetField(enummissionstatus.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := emsu.mutation.FrontStatus(); ok {
		_spec.SetField(enummissionstatus.FieldFrontStatus, field.TypeString, value)
	}
	if value, ok := emsu.mutation.MissionType(); ok {
		_spec.SetField(enummissionstatus.FieldMissionType, field.TypeString, value)
	}
	if value, ok := emsu.mutation.MissionStatus(); ok {
		_spec.SetField(enummissionstatus.FieldMissionStatus, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, emsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enummissionstatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	emsu.mutation.done = true
	return n, nil
}

// EnumMissionStatusUpdateOne is the builder for updating a single EnumMissionStatus entity.
type EnumMissionStatusUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EnumMissionStatusMutation
}

// SetCreatedBy sets the "created_by" field.
func (emsuo *EnumMissionStatusUpdateOne) SetCreatedBy(i int64) *EnumMissionStatusUpdateOne {
	emsuo.mutation.ResetCreatedBy()
	emsuo.mutation.SetCreatedBy(i)
	return emsuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (emsuo *EnumMissionStatusUpdateOne) SetNillableCreatedBy(i *int64) *EnumMissionStatusUpdateOne {
	if i != nil {
		emsuo.SetCreatedBy(*i)
	}
	return emsuo
}

// AddCreatedBy adds i to the "created_by" field.
func (emsuo *EnumMissionStatusUpdateOne) AddCreatedBy(i int64) *EnumMissionStatusUpdateOne {
	emsuo.mutation.AddCreatedBy(i)
	return emsuo
}

// SetUpdatedBy sets the "updated_by" field.
func (emsuo *EnumMissionStatusUpdateOne) SetUpdatedBy(i int64) *EnumMissionStatusUpdateOne {
	emsuo.mutation.ResetUpdatedBy()
	emsuo.mutation.SetUpdatedBy(i)
	return emsuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (emsuo *EnumMissionStatusUpdateOne) SetNillableUpdatedBy(i *int64) *EnumMissionStatusUpdateOne {
	if i != nil {
		emsuo.SetUpdatedBy(*i)
	}
	return emsuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (emsuo *EnumMissionStatusUpdateOne) AddUpdatedBy(i int64) *EnumMissionStatusUpdateOne {
	emsuo.mutation.AddUpdatedBy(i)
	return emsuo
}

// SetUpdatedAt sets the "updated_at" field.
func (emsuo *EnumMissionStatusUpdateOne) SetUpdatedAt(t time.Time) *EnumMissionStatusUpdateOne {
	emsuo.mutation.SetUpdatedAt(t)
	return emsuo
}

// SetDeletedAt sets the "deleted_at" field.
func (emsuo *EnumMissionStatusUpdateOne) SetDeletedAt(t time.Time) *EnumMissionStatusUpdateOne {
	emsuo.mutation.SetDeletedAt(t)
	return emsuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (emsuo *EnumMissionStatusUpdateOne) SetNillableDeletedAt(t *time.Time) *EnumMissionStatusUpdateOne {
	if t != nil {
		emsuo.SetDeletedAt(*t)
	}
	return emsuo
}

// SetFrontStatus sets the "front_status" field.
func (emsuo *EnumMissionStatusUpdateOne) SetFrontStatus(s string) *EnumMissionStatusUpdateOne {
	emsuo.mutation.SetFrontStatus(s)
	return emsuo
}

// SetNillableFrontStatus sets the "front_status" field if the given value is not nil.
func (emsuo *EnumMissionStatusUpdateOne) SetNillableFrontStatus(s *string) *EnumMissionStatusUpdateOne {
	if s != nil {
		emsuo.SetFrontStatus(*s)
	}
	return emsuo
}

// SetMissionType sets the "mission_type" field.
func (emsuo *EnumMissionStatusUpdateOne) SetMissionType(s string) *EnumMissionStatusUpdateOne {
	emsuo.mutation.SetMissionType(s)
	return emsuo
}

// SetNillableMissionType sets the "mission_type" field if the given value is not nil.
func (emsuo *EnumMissionStatusUpdateOne) SetNillableMissionType(s *string) *EnumMissionStatusUpdateOne {
	if s != nil {
		emsuo.SetMissionType(*s)
	}
	return emsuo
}

// SetMissionStatus sets the "mission_status" field.
func (emsuo *EnumMissionStatusUpdateOne) SetMissionStatus(s string) *EnumMissionStatusUpdateOne {
	emsuo.mutation.SetMissionStatus(s)
	return emsuo
}

// SetNillableMissionStatus sets the "mission_status" field if the given value is not nil.
func (emsuo *EnumMissionStatusUpdateOne) SetNillableMissionStatus(s *string) *EnumMissionStatusUpdateOne {
	if s != nil {
		emsuo.SetMissionStatus(*s)
	}
	return emsuo
}

// Mutation returns the EnumMissionStatusMutation object of the builder.
func (emsuo *EnumMissionStatusUpdateOne) Mutation() *EnumMissionStatusMutation {
	return emsuo.mutation
}

// Where appends a list predicates to the EnumMissionStatusUpdate builder.
func (emsuo *EnumMissionStatusUpdateOne) Where(ps ...predicate.EnumMissionStatus) *EnumMissionStatusUpdateOne {
	emsuo.mutation.Where(ps...)
	return emsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (emsuo *EnumMissionStatusUpdateOne) Select(field string, fields ...string) *EnumMissionStatusUpdateOne {
	emsuo.fields = append([]string{field}, fields...)
	return emsuo
}

// Save executes the query and returns the updated EnumMissionStatus entity.
func (emsuo *EnumMissionStatusUpdateOne) Save(ctx context.Context) (*EnumMissionStatus, error) {
	emsuo.defaults()
	return withHooks(ctx, emsuo.sqlSave, emsuo.mutation, emsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (emsuo *EnumMissionStatusUpdateOne) SaveX(ctx context.Context) *EnumMissionStatus {
	node, err := emsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (emsuo *EnumMissionStatusUpdateOne) Exec(ctx context.Context) error {
	_, err := emsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (emsuo *EnumMissionStatusUpdateOne) ExecX(ctx context.Context) {
	if err := emsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (emsuo *EnumMissionStatusUpdateOne) defaults() {
	if _, ok := emsuo.mutation.UpdatedAt(); !ok {
		v := enummissionstatus.UpdateDefaultUpdatedAt()
		emsuo.mutation.SetUpdatedAt(v)
	}
}

func (emsuo *EnumMissionStatusUpdateOne) sqlSave(ctx context.Context) (_node *EnumMissionStatus, err error) {
	_spec := sqlgraph.NewUpdateSpec(enummissionstatus.Table, enummissionstatus.Columns, sqlgraph.NewFieldSpec(enummissionstatus.FieldID, field.TypeInt64))
	id, ok := emsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "EnumMissionStatus.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := emsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enummissionstatus.FieldID)
		for _, f := range fields {
			if !enummissionstatus.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != enummissionstatus.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := emsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := emsuo.mutation.CreatedBy(); ok {
		_spec.SetField(enummissionstatus.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := emsuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(enummissionstatus.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := emsuo.mutation.UpdatedBy(); ok {
		_spec.SetField(enummissionstatus.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := emsuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(enummissionstatus.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := emsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(enummissionstatus.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := emsuo.mutation.DeletedAt(); ok {
		_spec.SetField(enummissionstatus.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := emsuo.mutation.FrontStatus(); ok {
		_spec.SetField(enummissionstatus.FieldFrontStatus, field.TypeString, value)
	}
	if value, ok := emsuo.mutation.MissionType(); ok {
		_spec.SetField(enummissionstatus.FieldMissionType, field.TypeString, value)
	}
	if value, ok := emsuo.mutation.MissionStatus(); ok {
		_spec.SetField(enummissionstatus.FieldMissionStatus, field.TypeString, value)
	}
	_node = &EnumMissionStatus{config: emsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, emsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enummissionstatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	emsuo.mutation.done = true
	return _node, nil
}
