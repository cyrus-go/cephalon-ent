// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/device"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/devicegpumission"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/devicereboottime"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/frpcinfo"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionproduceorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionproduction"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/userdevice"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// DeviceCreate is the builder for creating a Device entity.
type DeviceCreate struct {
	config
	mutation *DeviceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (dc *DeviceCreate) SetCreatedBy(i int64) *DeviceCreate {
	dc.mutation.SetCreatedBy(i)
	return dc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableCreatedBy(i *int64) *DeviceCreate {
	if i != nil {
		dc.SetCreatedBy(*i)
	}
	return dc
}

// SetUpdatedBy sets the "updated_by" field.
func (dc *DeviceCreate) SetUpdatedBy(i int64) *DeviceCreate {
	dc.mutation.SetUpdatedBy(i)
	return dc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableUpdatedBy(i *int64) *DeviceCreate {
	if i != nil {
		dc.SetUpdatedBy(*i)
	}
	return dc
}

// SetCreatedAt sets the "created_at" field.
func (dc *DeviceCreate) SetCreatedAt(t time.Time) *DeviceCreate {
	dc.mutation.SetCreatedAt(t)
	return dc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableCreatedAt(t *time.Time) *DeviceCreate {
	if t != nil {
		dc.SetCreatedAt(*t)
	}
	return dc
}

// SetUpdatedAt sets the "updated_at" field.
func (dc *DeviceCreate) SetUpdatedAt(t time.Time) *DeviceCreate {
	dc.mutation.SetUpdatedAt(t)
	return dc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableUpdatedAt(t *time.Time) *DeviceCreate {
	if t != nil {
		dc.SetUpdatedAt(*t)
	}
	return dc
}

// SetDeletedAt sets the "deleted_at" field.
func (dc *DeviceCreate) SetDeletedAt(t time.Time) *DeviceCreate {
	dc.mutation.SetDeletedAt(t)
	return dc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableDeletedAt(t *time.Time) *DeviceCreate {
	if t != nil {
		dc.SetDeletedAt(*t)
	}
	return dc
}

// SetUserID sets the "user_id" field.
func (dc *DeviceCreate) SetUserID(i int64) *DeviceCreate {
	dc.mutation.SetUserID(i)
	return dc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableUserID(i *int64) *DeviceCreate {
	if i != nil {
		dc.SetUserID(*i)
	}
	return dc
}

// SetSerialNumber sets the "serial_number" field.
func (dc *DeviceCreate) SetSerialNumber(s string) *DeviceCreate {
	dc.mutation.SetSerialNumber(s)
	return dc
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableSerialNumber(s *string) *DeviceCreate {
	if s != nil {
		dc.SetSerialNumber(*s)
	}
	return dc
}

// SetState sets the "state" field.
func (dc *DeviceCreate) SetState(d device.State) *DeviceCreate {
	dc.mutation.SetState(d)
	return dc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableState(d *device.State) *DeviceCreate {
	if d != nil {
		dc.SetState(*d)
	}
	return dc
}

// SetSumCep sets the "sum_cep" field.
func (dc *DeviceCreate) SetSumCep(i int64) *DeviceCreate {
	dc.mutation.SetSumCep(i)
	return dc
}

// SetNillableSumCep sets the "sum_cep" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableSumCep(i *int64) *DeviceCreate {
	if i != nil {
		dc.SetSumCep(*i)
	}
	return dc
}

// SetLinking sets the "linking" field.
func (dc *DeviceCreate) SetLinking(b bool) *DeviceCreate {
	dc.mutation.SetLinking(b)
	return dc
}

// SetNillableLinking sets the "linking" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableLinking(b *bool) *DeviceCreate {
	if b != nil {
		dc.SetLinking(*b)
	}
	return dc
}

// SetBindingStatus sets the "binding_status" field.
func (dc *DeviceCreate) SetBindingStatus(ebs enums.DeviceBindingStatus) *DeviceCreate {
	dc.mutation.SetBindingStatus(ebs)
	return dc
}

// SetNillableBindingStatus sets the "binding_status" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableBindingStatus(ebs *enums.DeviceBindingStatus) *DeviceCreate {
	if ebs != nil {
		dc.SetBindingStatus(*ebs)
	}
	return dc
}

// SetStatus sets the "status" field.
func (dc *DeviceCreate) SetStatus(d device.Status) *DeviceCreate {
	dc.mutation.SetStatus(d)
	return dc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableStatus(d *device.Status) *DeviceCreate {
	if d != nil {
		dc.SetStatus(*d)
	}
	return dc
}

// SetName sets the "name" field.
func (dc *DeviceCreate) SetName(s string) *DeviceCreate {
	dc.mutation.SetName(s)
	return dc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableName(s *string) *DeviceCreate {
	if s != nil {
		dc.SetName(*s)
	}
	return dc
}

// SetType sets the "type" field.
func (dc *DeviceCreate) SetType(et enums.DeviceType) *DeviceCreate {
	dc.mutation.SetType(et)
	return dc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableType(et *enums.DeviceType) *DeviceCreate {
	if et != nil {
		dc.SetType(*et)
	}
	return dc
}

// SetCoresNumber sets the "cores_number" field.
func (dc *DeviceCreate) SetCoresNumber(i int64) *DeviceCreate {
	dc.mutation.SetCoresNumber(i)
	return dc
}

// SetNillableCoresNumber sets the "cores_number" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableCoresNumber(i *int64) *DeviceCreate {
	if i != nil {
		dc.SetCoresNumber(*i)
	}
	return dc
}

// SetCPU sets the "cpu" field.
func (dc *DeviceCreate) SetCPU(s string) *DeviceCreate {
	dc.mutation.SetCPU(s)
	return dc
}

// SetNillableCPU sets the "cpu" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableCPU(s *string) *DeviceCreate {
	if s != nil {
		dc.SetCPU(*s)
	}
	return dc
}

// SetCpus sets the "cpus" field.
func (dc *DeviceCreate) SetCpus(s []string) *DeviceCreate {
	dc.mutation.SetCpus(s)
	return dc
}

// SetMemory sets the "memory" field.
func (dc *DeviceCreate) SetMemory(i int64) *DeviceCreate {
	dc.mutation.SetMemory(i)
	return dc
}

// SetNillableMemory sets the "memory" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableMemory(i *int64) *DeviceCreate {
	if i != nil {
		dc.SetMemory(*i)
	}
	return dc
}

// SetDisk sets the "disk" field.
func (dc *DeviceCreate) SetDisk(f float32) *DeviceCreate {
	dc.mutation.SetDisk(f)
	return dc
}

// SetNillableDisk sets the "disk" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableDisk(f *float32) *DeviceCreate {
	if f != nil {
		dc.SetDisk(*f)
	}
	return dc
}

// SetID sets the "id" field.
func (dc *DeviceCreate) SetID(i int64) *DeviceCreate {
	dc.mutation.SetID(i)
	return dc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableID(i *int64) *DeviceCreate {
	if i != nil {
		dc.SetID(*i)
	}
	return dc
}

// SetUser sets the "user" edge to the User entity.
func (dc *DeviceCreate) SetUser(u *User) *DeviceCreate {
	return dc.SetUserID(u.ID)
}

// AddMissionProduceOrderIDs adds the "mission_produce_orders" edge to the MissionProduceOrder entity by IDs.
func (dc *DeviceCreate) AddMissionProduceOrderIDs(ids ...int64) *DeviceCreate {
	dc.mutation.AddMissionProduceOrderIDs(ids...)
	return dc
}

// AddMissionProduceOrders adds the "mission_produce_orders" edges to the MissionProduceOrder entity.
func (dc *DeviceCreate) AddMissionProduceOrders(m ...*MissionProduceOrder) *DeviceCreate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return dc.AddMissionProduceOrderIDs(ids...)
}

// AddUserDeviceIDs adds the "user_devices" edge to the UserDevice entity by IDs.
func (dc *DeviceCreate) AddUserDeviceIDs(ids ...int64) *DeviceCreate {
	dc.mutation.AddUserDeviceIDs(ids...)
	return dc
}

// AddUserDevices adds the "user_devices" edges to the UserDevice entity.
func (dc *DeviceCreate) AddUserDevices(u ...*UserDevice) *DeviceCreate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return dc.AddUserDeviceIDs(ids...)
}

// AddDeviceGpuMissionIDs adds the "device_gpu_missions" edge to the DeviceGpuMission entity by IDs.
func (dc *DeviceCreate) AddDeviceGpuMissionIDs(ids ...int64) *DeviceCreate {
	dc.mutation.AddDeviceGpuMissionIDs(ids...)
	return dc
}

// AddDeviceGpuMissions adds the "device_gpu_missions" edges to the DeviceGpuMission entity.
func (dc *DeviceCreate) AddDeviceGpuMissions(d ...*DeviceGpuMission) *DeviceCreate {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dc.AddDeviceGpuMissionIDs(ids...)
}

// AddFrpcInfoIDs adds the "frpc_infos" edge to the FrpcInfo entity by IDs.
func (dc *DeviceCreate) AddFrpcInfoIDs(ids ...int64) *DeviceCreate {
	dc.mutation.AddFrpcInfoIDs(ids...)
	return dc
}

// AddFrpcInfos adds the "frpc_infos" edges to the FrpcInfo entity.
func (dc *DeviceCreate) AddFrpcInfos(f ...*FrpcInfo) *DeviceCreate {
	ids := make([]int64, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return dc.AddFrpcInfoIDs(ids...)
}

// AddMissionOrderIDs adds the "mission_orders" edge to the MissionOrder entity by IDs.
func (dc *DeviceCreate) AddMissionOrderIDs(ids ...int64) *DeviceCreate {
	dc.mutation.AddMissionOrderIDs(ids...)
	return dc
}

// AddMissionOrders adds the "mission_orders" edges to the MissionOrder entity.
func (dc *DeviceCreate) AddMissionOrders(m ...*MissionOrder) *DeviceCreate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return dc.AddMissionOrderIDs(ids...)
}

// AddMissionProductionIDs adds the "mission_productions" edge to the MissionProduction entity by IDs.
func (dc *DeviceCreate) AddMissionProductionIDs(ids ...int64) *DeviceCreate {
	dc.mutation.AddMissionProductionIDs(ids...)
	return dc
}

// AddMissionProductions adds the "mission_productions" edges to the MissionProduction entity.
func (dc *DeviceCreate) AddMissionProductions(m ...*MissionProduction) *DeviceCreate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return dc.AddMissionProductionIDs(ids...)
}

// AddDeviceRebootTimeIDs adds the "device_reboot_times" edge to the DeviceRebootTime entity by IDs.
func (dc *DeviceCreate) AddDeviceRebootTimeIDs(ids ...int64) *DeviceCreate {
	dc.mutation.AddDeviceRebootTimeIDs(ids...)
	return dc
}

// AddDeviceRebootTimes adds the "device_reboot_times" edges to the DeviceRebootTime entity.
func (dc *DeviceCreate) AddDeviceRebootTimes(d ...*DeviceRebootTime) *DeviceCreate {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dc.AddDeviceRebootTimeIDs(ids...)
}

// Mutation returns the DeviceMutation object of the builder.
func (dc *DeviceCreate) Mutation() *DeviceMutation {
	return dc.mutation
}

// Save creates the Device in the database.
func (dc *DeviceCreate) Save(ctx context.Context) (*Device, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DeviceCreate) SaveX(ctx context.Context) *Device {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DeviceCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DeviceCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DeviceCreate) defaults() {
	if _, ok := dc.mutation.CreatedBy(); !ok {
		v := device.DefaultCreatedBy
		dc.mutation.SetCreatedBy(v)
	}
	if _, ok := dc.mutation.UpdatedBy(); !ok {
		v := device.DefaultUpdatedBy
		dc.mutation.SetUpdatedBy(v)
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		v := device.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		v := device.DefaultUpdatedAt()
		dc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dc.mutation.DeletedAt(); !ok {
		v := device.DefaultDeletedAt
		dc.mutation.SetDeletedAt(v)
	}
	if _, ok := dc.mutation.UserID(); !ok {
		v := device.DefaultUserID
		dc.mutation.SetUserID(v)
	}
	if _, ok := dc.mutation.SerialNumber(); !ok {
		v := device.DefaultSerialNumber
		dc.mutation.SetSerialNumber(v)
	}
	if _, ok := dc.mutation.State(); !ok {
		v := device.DefaultState
		dc.mutation.SetState(v)
	}
	if _, ok := dc.mutation.SumCep(); !ok {
		v := device.DefaultSumCep
		dc.mutation.SetSumCep(v)
	}
	if _, ok := dc.mutation.Linking(); !ok {
		v := device.DefaultLinking
		dc.mutation.SetLinking(v)
	}
	if _, ok := dc.mutation.BindingStatus(); !ok {
		v := device.DefaultBindingStatus
		dc.mutation.SetBindingStatus(v)
	}
	if _, ok := dc.mutation.Status(); !ok {
		v := device.DefaultStatus
		dc.mutation.SetStatus(v)
	}
	if _, ok := dc.mutation.Name(); !ok {
		v := device.DefaultName
		dc.mutation.SetName(v)
	}
	if _, ok := dc.mutation.GetType(); !ok {
		v := device.DefaultType
		dc.mutation.SetType(v)
	}
	if _, ok := dc.mutation.CoresNumber(); !ok {
		v := device.DefaultCoresNumber
		dc.mutation.SetCoresNumber(v)
	}
	if _, ok := dc.mutation.CPU(); !ok {
		v := device.DefaultCPU
		dc.mutation.SetCPU(v)
	}
	if _, ok := dc.mutation.Memory(); !ok {
		v := device.DefaultMemory
		dc.mutation.SetMemory(v)
	}
	if _, ok := dc.mutation.Disk(); !ok {
		v := device.DefaultDisk
		dc.mutation.SetDisk(v)
	}
	if _, ok := dc.mutation.ID(); !ok {
		v := device.DefaultID()
		dc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DeviceCreate) check() error {
	if _, ok := dc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "Device.created_by"`)}
	}
	if _, ok := dc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "Device.updated_by"`)}
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "Device.created_at"`)}
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "Device.updated_at"`)}
	}
	if _, ok := dc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "Device.deleted_at"`)}
	}
	if _, ok := dc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "Device.user_id"`)}
	}
	if _, ok := dc.mutation.SerialNumber(); !ok {
		return &ValidationError{Name: "serial_number", err: errors.New(`cep_ent: missing required field "Device.serial_number"`)}
	}
	if _, ok := dc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`cep_ent: missing required field "Device.state"`)}
	}
	if v, ok := dc.mutation.State(); ok {
		if err := device.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`cep_ent: validator failed for field "Device.state": %w`, err)}
		}
	}
	if _, ok := dc.mutation.SumCep(); !ok {
		return &ValidationError{Name: "sum_cep", err: errors.New(`cep_ent: missing required field "Device.sum_cep"`)}
	}
	if _, ok := dc.mutation.Linking(); !ok {
		return &ValidationError{Name: "linking", err: errors.New(`cep_ent: missing required field "Device.linking"`)}
	}
	if _, ok := dc.mutation.BindingStatus(); !ok {
		return &ValidationError{Name: "binding_status", err: errors.New(`cep_ent: missing required field "Device.binding_status"`)}
	}
	if v, ok := dc.mutation.BindingStatus(); ok {
		if err := device.BindingStatusValidator(v); err != nil {
			return &ValidationError{Name: "binding_status", err: fmt.Errorf(`cep_ent: validator failed for field "Device.binding_status": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`cep_ent: missing required field "Device.status"`)}
	}
	if v, ok := dc.mutation.Status(); ok {
		if err := device.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "Device.status": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`cep_ent: missing required field "Device.name"`)}
	}
	if _, ok := dc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`cep_ent: missing required field "Device.type"`)}
	}
	if v, ok := dc.mutation.GetType(); ok {
		if err := device.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "Device.type": %w`, err)}
		}
	}
	if _, ok := dc.mutation.CoresNumber(); !ok {
		return &ValidationError{Name: "cores_number", err: errors.New(`cep_ent: missing required field "Device.cores_number"`)}
	}
	if _, ok := dc.mutation.CPU(); !ok {
		return &ValidationError{Name: "cpu", err: errors.New(`cep_ent: missing required field "Device.cpu"`)}
	}
	if _, ok := dc.mutation.Memory(); !ok {
		return &ValidationError{Name: "memory", err: errors.New(`cep_ent: missing required field "Device.memory"`)}
	}
	if _, ok := dc.mutation.Disk(); !ok {
		return &ValidationError{Name: "disk", err: errors.New(`cep_ent: missing required field "Device.disk"`)}
	}
	if _, ok := dc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "Device.user"`)}
	}
	return nil
}

func (dc *DeviceCreate) sqlSave(ctx context.Context) (*Device, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec, err := dc.createSpec()
	if err != nil {
		return nil, err
	}
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DeviceCreate) createSpec() (*Device, *sqlgraph.CreateSpec, error) {
	var (
		_node = &Device{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(device.Table, sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = dc.conflict
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.CreatedBy(); ok {
		_spec.SetField(device.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := dc.mutation.UpdatedBy(); ok {
		_spec.SetField(device.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.SetField(device.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.SetField(device.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := dc.mutation.DeletedAt(); ok {
		_spec.SetField(device.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := dc.mutation.SerialNumber(); ok {
		_spec.SetField(device.FieldSerialNumber, field.TypeString, value)
		_node.SerialNumber = value
	}
	if value, ok := dc.mutation.State(); ok {
		_spec.SetField(device.FieldState, field.TypeEnum, value)
		_node.State = value
	}
	if value, ok := dc.mutation.SumCep(); ok {
		_spec.SetField(device.FieldSumCep, field.TypeInt64, value)
		_node.SumCep = value
	}
	if value, ok := dc.mutation.Linking(); ok {
		_spec.SetField(device.FieldLinking, field.TypeBool, value)
		_node.Linking = value
	}
	if value, ok := dc.mutation.BindingStatus(); ok {
		_spec.SetField(device.FieldBindingStatus, field.TypeEnum, value)
		_node.BindingStatus = value
	}
	if value, ok := dc.mutation.Status(); ok {
		_spec.SetField(device.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := dc.mutation.Name(); ok {
		_spec.SetField(device.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := dc.mutation.GetType(); ok {
		_spec.SetField(device.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := dc.mutation.CoresNumber(); ok {
		_spec.SetField(device.FieldCoresNumber, field.TypeInt64, value)
		_node.CoresNumber = value
	}
	if value, ok := dc.mutation.CPU(); ok {
		_spec.SetField(device.FieldCPU, field.TypeString, value)
		_node.CPU = value
	}
	if value, ok := dc.mutation.Cpus(); ok {
		vv, err := device.ValueScanner.Cpus.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(device.FieldCpus, field.TypeString, vv)
		_node.Cpus = value
	}
	if value, ok := dc.mutation.Memory(); ok {
		_spec.SetField(device.FieldMemory, field.TypeInt64, value)
		_node.Memory = value
	}
	if value, ok := dc.mutation.Disk(); ok {
		_spec.SetField(device.FieldDisk, field.TypeFloat32, value)
		_node.Disk = value
	}
	if nodes := dc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.UserTable,
			Columns: []string{device.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.MissionProduceOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.MissionProduceOrdersTable,
			Columns: []string{device.MissionProduceOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.UserDevicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.UserDevicesTable,
			Columns: []string{device.UserDevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdevice.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.DeviceGpuMissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.DeviceGpuMissionsTable,
			Columns: []string{device.DeviceGpuMissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(devicegpumission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.FrpcInfosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.FrpcInfosTable,
			Columns: []string{device.FrpcInfosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(frpcinfo.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.MissionOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.MissionOrdersTable,
			Columns: []string{device.MissionOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.MissionProductionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.MissionProductionsTable,
			Columns: []string{device.MissionProductionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduction.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.DeviceRebootTimesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.DeviceRebootTimesTable,
			Columns: []string{device.DeviceRebootTimesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(devicereboottime.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec, nil
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Device.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeviceUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (dc *DeviceCreate) OnConflict(opts ...sql.ConflictOption) *DeviceUpsertOne {
	dc.conflict = opts
	return &DeviceUpsertOne{
		create: dc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Device.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dc *DeviceCreate) OnConflictColumns(columns ...string) *DeviceUpsertOne {
	dc.conflict = append(dc.conflict, sql.ConflictColumns(columns...))
	return &DeviceUpsertOne{
		create: dc,
	}
}

type (
	// DeviceUpsertOne is the builder for "upsert"-ing
	//  one Device node.
	DeviceUpsertOne struct {
		create *DeviceCreate
	}

	// DeviceUpsert is the "OnConflict" setter.
	DeviceUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *DeviceUpsert) SetCreatedBy(v int64) *DeviceUpsert {
	u.Set(device.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateCreatedBy() *DeviceUpsert {
	u.SetExcluded(device.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *DeviceUpsert) AddCreatedBy(v int64) *DeviceUpsert {
	u.Add(device.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *DeviceUpsert) SetUpdatedBy(v int64) *DeviceUpsert {
	u.Set(device.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateUpdatedBy() *DeviceUpsert {
	u.SetExcluded(device.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *DeviceUpsert) AddUpdatedBy(v int64) *DeviceUpsert {
	u.Add(device.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeviceUpsert) SetUpdatedAt(v time.Time) *DeviceUpsert {
	u.Set(device.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateUpdatedAt() *DeviceUpsert {
	u.SetExcluded(device.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DeviceUpsert) SetDeletedAt(v time.Time) *DeviceUpsert {
	u.Set(device.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateDeletedAt() *DeviceUpsert {
	u.SetExcluded(device.FieldDeletedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *DeviceUpsert) SetUserID(v int64) *DeviceUpsert {
	u.Set(device.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateUserID() *DeviceUpsert {
	u.SetExcluded(device.FieldUserID)
	return u
}

// SetSerialNumber sets the "serial_number" field.
func (u *DeviceUpsert) SetSerialNumber(v string) *DeviceUpsert {
	u.Set(device.FieldSerialNumber, v)
	return u
}

// UpdateSerialNumber sets the "serial_number" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateSerialNumber() *DeviceUpsert {
	u.SetExcluded(device.FieldSerialNumber)
	return u
}

// SetState sets the "state" field.
func (u *DeviceUpsert) SetState(v device.State) *DeviceUpsert {
	u.Set(device.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateState() *DeviceUpsert {
	u.SetExcluded(device.FieldState)
	return u
}

// SetSumCep sets the "sum_cep" field.
func (u *DeviceUpsert) SetSumCep(v int64) *DeviceUpsert {
	u.Set(device.FieldSumCep, v)
	return u
}

// UpdateSumCep sets the "sum_cep" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateSumCep() *DeviceUpsert {
	u.SetExcluded(device.FieldSumCep)
	return u
}

// AddSumCep adds v to the "sum_cep" field.
func (u *DeviceUpsert) AddSumCep(v int64) *DeviceUpsert {
	u.Add(device.FieldSumCep, v)
	return u
}

// SetLinking sets the "linking" field.
func (u *DeviceUpsert) SetLinking(v bool) *DeviceUpsert {
	u.Set(device.FieldLinking, v)
	return u
}

// UpdateLinking sets the "linking" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateLinking() *DeviceUpsert {
	u.SetExcluded(device.FieldLinking)
	return u
}

// SetBindingStatus sets the "binding_status" field.
func (u *DeviceUpsert) SetBindingStatus(v enums.DeviceBindingStatus) *DeviceUpsert {
	u.Set(device.FieldBindingStatus, v)
	return u
}

// UpdateBindingStatus sets the "binding_status" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateBindingStatus() *DeviceUpsert {
	u.SetExcluded(device.FieldBindingStatus)
	return u
}

// SetStatus sets the "status" field.
func (u *DeviceUpsert) SetStatus(v device.Status) *DeviceUpsert {
	u.Set(device.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateStatus() *DeviceUpsert {
	u.SetExcluded(device.FieldStatus)
	return u
}

// SetName sets the "name" field.
func (u *DeviceUpsert) SetName(v string) *DeviceUpsert {
	u.Set(device.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateName() *DeviceUpsert {
	u.SetExcluded(device.FieldName)
	return u
}

// SetType sets the "type" field.
func (u *DeviceUpsert) SetType(v enums.DeviceType) *DeviceUpsert {
	u.Set(device.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateType() *DeviceUpsert {
	u.SetExcluded(device.FieldType)
	return u
}

// SetCoresNumber sets the "cores_number" field.
func (u *DeviceUpsert) SetCoresNumber(v int64) *DeviceUpsert {
	u.Set(device.FieldCoresNumber, v)
	return u
}

// UpdateCoresNumber sets the "cores_number" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateCoresNumber() *DeviceUpsert {
	u.SetExcluded(device.FieldCoresNumber)
	return u
}

// AddCoresNumber adds v to the "cores_number" field.
func (u *DeviceUpsert) AddCoresNumber(v int64) *DeviceUpsert {
	u.Add(device.FieldCoresNumber, v)
	return u
}

// SetCPU sets the "cpu" field.
func (u *DeviceUpsert) SetCPU(v string) *DeviceUpsert {
	u.Set(device.FieldCPU, v)
	return u
}

// UpdateCPU sets the "cpu" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateCPU() *DeviceUpsert {
	u.SetExcluded(device.FieldCPU)
	return u
}

// SetCpus sets the "cpus" field.
func (u *DeviceUpsert) SetCpus(v []string) *DeviceUpsert {
	u.Set(device.FieldCpus, v)
	return u
}

// UpdateCpus sets the "cpus" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateCpus() *DeviceUpsert {
	u.SetExcluded(device.FieldCpus)
	return u
}

// ClearCpus clears the value of the "cpus" field.
func (u *DeviceUpsert) ClearCpus() *DeviceUpsert {
	u.SetNull(device.FieldCpus)
	return u
}

// SetMemory sets the "memory" field.
func (u *DeviceUpsert) SetMemory(v int64) *DeviceUpsert {
	u.Set(device.FieldMemory, v)
	return u
}

// UpdateMemory sets the "memory" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateMemory() *DeviceUpsert {
	u.SetExcluded(device.FieldMemory)
	return u
}

// AddMemory adds v to the "memory" field.
func (u *DeviceUpsert) AddMemory(v int64) *DeviceUpsert {
	u.Add(device.FieldMemory, v)
	return u
}

// SetDisk sets the "disk" field.
func (u *DeviceUpsert) SetDisk(v float32) *DeviceUpsert {
	u.Set(device.FieldDisk, v)
	return u
}

// UpdateDisk sets the "disk" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateDisk() *DeviceUpsert {
	u.SetExcluded(device.FieldDisk)
	return u
}

// AddDisk adds v to the "disk" field.
func (u *DeviceUpsert) AddDisk(v float32) *DeviceUpsert {
	u.Add(device.FieldDisk, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Device.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(device.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DeviceUpsertOne) UpdateNewValues() *DeviceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(device.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(device.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Device.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DeviceUpsertOne) Ignore() *DeviceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeviceUpsertOne) DoNothing() *DeviceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeviceCreate.OnConflict
// documentation for more info.
func (u *DeviceUpsertOne) Update(set func(*DeviceUpsert)) *DeviceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeviceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *DeviceUpsertOne) SetCreatedBy(v int64) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *DeviceUpsertOne) AddCreatedBy(v int64) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateCreatedBy() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *DeviceUpsertOne) SetUpdatedBy(v int64) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *DeviceUpsertOne) AddUpdatedBy(v int64) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateUpdatedBy() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeviceUpsertOne) SetUpdatedAt(v time.Time) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateUpdatedAt() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DeviceUpsertOne) SetDeletedAt(v time.Time) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateDeletedAt() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *DeviceUpsertOne) SetUserID(v int64) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateUserID() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateUserID()
	})
}

// SetSerialNumber sets the "serial_number" field.
func (u *DeviceUpsertOne) SetSerialNumber(v string) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetSerialNumber(v)
	})
}

// UpdateSerialNumber sets the "serial_number" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateSerialNumber() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateSerialNumber()
	})
}

// SetState sets the "state" field.
func (u *DeviceUpsertOne) SetState(v device.State) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateState() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateState()
	})
}

// SetSumCep sets the "sum_cep" field.
func (u *DeviceUpsertOne) SetSumCep(v int64) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetSumCep(v)
	})
}

// AddSumCep adds v to the "sum_cep" field.
func (u *DeviceUpsertOne) AddSumCep(v int64) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.AddSumCep(v)
	})
}

// UpdateSumCep sets the "sum_cep" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateSumCep() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateSumCep()
	})
}

// SetLinking sets the "linking" field.
func (u *DeviceUpsertOne) SetLinking(v bool) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetLinking(v)
	})
}

// UpdateLinking sets the "linking" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateLinking() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateLinking()
	})
}

// SetBindingStatus sets the "binding_status" field.
func (u *DeviceUpsertOne) SetBindingStatus(v enums.DeviceBindingStatus) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetBindingStatus(v)
	})
}

// UpdateBindingStatus sets the "binding_status" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateBindingStatus() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateBindingStatus()
	})
}

// SetStatus sets the "status" field.
func (u *DeviceUpsertOne) SetStatus(v device.Status) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateStatus() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateStatus()
	})
}

// SetName sets the "name" field.
func (u *DeviceUpsertOne) SetName(v string) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateName() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *DeviceUpsertOne) SetType(v enums.DeviceType) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateType() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateType()
	})
}

// SetCoresNumber sets the "cores_number" field.
func (u *DeviceUpsertOne) SetCoresNumber(v int64) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetCoresNumber(v)
	})
}

// AddCoresNumber adds v to the "cores_number" field.
func (u *DeviceUpsertOne) AddCoresNumber(v int64) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.AddCoresNumber(v)
	})
}

// UpdateCoresNumber sets the "cores_number" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateCoresNumber() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateCoresNumber()
	})
}

// SetCPU sets the "cpu" field.
func (u *DeviceUpsertOne) SetCPU(v string) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetCPU(v)
	})
}

// UpdateCPU sets the "cpu" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateCPU() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateCPU()
	})
}

// SetCpus sets the "cpus" field.
func (u *DeviceUpsertOne) SetCpus(v []string) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetCpus(v)
	})
}

// UpdateCpus sets the "cpus" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateCpus() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateCpus()
	})
}

// ClearCpus clears the value of the "cpus" field.
func (u *DeviceUpsertOne) ClearCpus() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.ClearCpus()
	})
}

// SetMemory sets the "memory" field.
func (u *DeviceUpsertOne) SetMemory(v int64) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetMemory(v)
	})
}

// AddMemory adds v to the "memory" field.
func (u *DeviceUpsertOne) AddMemory(v int64) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.AddMemory(v)
	})
}

// UpdateMemory sets the "memory" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateMemory() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateMemory()
	})
}

// SetDisk sets the "disk" field.
func (u *DeviceUpsertOne) SetDisk(v float32) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetDisk(v)
	})
}

// AddDisk adds v to the "disk" field.
func (u *DeviceUpsertOne) AddDisk(v float32) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.AddDisk(v)
	})
}

// UpdateDisk sets the "disk" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateDisk() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateDisk()
	})
}

// Exec executes the query.
func (u *DeviceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for DeviceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeviceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DeviceUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DeviceUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DeviceCreateBulk is the builder for creating many Device entities in bulk.
type DeviceCreateBulk struct {
	config
	err      error
	builders []*DeviceCreate
	conflict []sql.ConflictOption
}

// Save creates the Device entities in the database.
func (dcb *DeviceCreateBulk) Save(ctx context.Context) ([]*Device, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Device, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeviceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i], err = builder.createSpec()
				if err != nil {
					return nil, err
				}
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DeviceCreateBulk) SaveX(ctx context.Context) []*Device {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DeviceCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DeviceCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Device.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeviceUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (dcb *DeviceCreateBulk) OnConflict(opts ...sql.ConflictOption) *DeviceUpsertBulk {
	dcb.conflict = opts
	return &DeviceUpsertBulk{
		create: dcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Device.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dcb *DeviceCreateBulk) OnConflictColumns(columns ...string) *DeviceUpsertBulk {
	dcb.conflict = append(dcb.conflict, sql.ConflictColumns(columns...))
	return &DeviceUpsertBulk{
		create: dcb,
	}
}

// DeviceUpsertBulk is the builder for "upsert"-ing
// a bulk of Device nodes.
type DeviceUpsertBulk struct {
	create *DeviceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Device.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(device.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DeviceUpsertBulk) UpdateNewValues() *DeviceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(device.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(device.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Device.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DeviceUpsertBulk) Ignore() *DeviceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeviceUpsertBulk) DoNothing() *DeviceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeviceCreateBulk.OnConflict
// documentation for more info.
func (u *DeviceUpsertBulk) Update(set func(*DeviceUpsert)) *DeviceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeviceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *DeviceUpsertBulk) SetCreatedBy(v int64) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *DeviceUpsertBulk) AddCreatedBy(v int64) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateCreatedBy() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *DeviceUpsertBulk) SetUpdatedBy(v int64) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *DeviceUpsertBulk) AddUpdatedBy(v int64) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateUpdatedBy() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeviceUpsertBulk) SetUpdatedAt(v time.Time) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateUpdatedAt() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DeviceUpsertBulk) SetDeletedAt(v time.Time) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateDeletedAt() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *DeviceUpsertBulk) SetUserID(v int64) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateUserID() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateUserID()
	})
}

// SetSerialNumber sets the "serial_number" field.
func (u *DeviceUpsertBulk) SetSerialNumber(v string) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetSerialNumber(v)
	})
}

// UpdateSerialNumber sets the "serial_number" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateSerialNumber() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateSerialNumber()
	})
}

// SetState sets the "state" field.
func (u *DeviceUpsertBulk) SetState(v device.State) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateState() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateState()
	})
}

// SetSumCep sets the "sum_cep" field.
func (u *DeviceUpsertBulk) SetSumCep(v int64) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetSumCep(v)
	})
}

// AddSumCep adds v to the "sum_cep" field.
func (u *DeviceUpsertBulk) AddSumCep(v int64) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.AddSumCep(v)
	})
}

// UpdateSumCep sets the "sum_cep" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateSumCep() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateSumCep()
	})
}

// SetLinking sets the "linking" field.
func (u *DeviceUpsertBulk) SetLinking(v bool) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetLinking(v)
	})
}

// UpdateLinking sets the "linking" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateLinking() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateLinking()
	})
}

// SetBindingStatus sets the "binding_status" field.
func (u *DeviceUpsertBulk) SetBindingStatus(v enums.DeviceBindingStatus) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetBindingStatus(v)
	})
}

// UpdateBindingStatus sets the "binding_status" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateBindingStatus() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateBindingStatus()
	})
}

// SetStatus sets the "status" field.
func (u *DeviceUpsertBulk) SetStatus(v device.Status) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateStatus() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateStatus()
	})
}

// SetName sets the "name" field.
func (u *DeviceUpsertBulk) SetName(v string) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateName() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *DeviceUpsertBulk) SetType(v enums.DeviceType) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateType() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateType()
	})
}

// SetCoresNumber sets the "cores_number" field.
func (u *DeviceUpsertBulk) SetCoresNumber(v int64) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetCoresNumber(v)
	})
}

// AddCoresNumber adds v to the "cores_number" field.
func (u *DeviceUpsertBulk) AddCoresNumber(v int64) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.AddCoresNumber(v)
	})
}

// UpdateCoresNumber sets the "cores_number" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateCoresNumber() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateCoresNumber()
	})
}

// SetCPU sets the "cpu" field.
func (u *DeviceUpsertBulk) SetCPU(v string) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetCPU(v)
	})
}

// UpdateCPU sets the "cpu" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateCPU() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateCPU()
	})
}

// SetCpus sets the "cpus" field.
func (u *DeviceUpsertBulk) SetCpus(v []string) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetCpus(v)
	})
}

// UpdateCpus sets the "cpus" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateCpus() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateCpus()
	})
}

// ClearCpus clears the value of the "cpus" field.
func (u *DeviceUpsertBulk) ClearCpus() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.ClearCpus()
	})
}

// SetMemory sets the "memory" field.
func (u *DeviceUpsertBulk) SetMemory(v int64) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetMemory(v)
	})
}

// AddMemory adds v to the "memory" field.
func (u *DeviceUpsertBulk) AddMemory(v int64) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.AddMemory(v)
	})
}

// UpdateMemory sets the "memory" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateMemory() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateMemory()
	})
}

// SetDisk sets the "disk" field.
func (u *DeviceUpsertBulk) SetDisk(v float32) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetDisk(v)
	})
}

// AddDisk adds v to the "disk" field.
func (u *DeviceUpsertBulk) AddDisk(v float32) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.AddDisk(v)
	})
}

// UpdateDisk sets the "disk" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateDisk() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateDisk()
	})
}

// Exec executes the query.
func (u *DeviceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the DeviceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for DeviceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeviceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
