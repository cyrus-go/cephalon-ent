// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/survey"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/surveyanswer"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/surveyresponse"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// SurveyResponseCreate is the builder for creating a SurveyResponse entity.
type SurveyResponseCreate struct {
	config
	mutation *SurveyResponseMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (src *SurveyResponseCreate) SetCreatedBy(i int64) *SurveyResponseCreate {
	src.mutation.SetCreatedBy(i)
	return src
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (src *SurveyResponseCreate) SetNillableCreatedBy(i *int64) *SurveyResponseCreate {
	if i != nil {
		src.SetCreatedBy(*i)
	}
	return src
}

// SetUpdatedBy sets the "updated_by" field.
func (src *SurveyResponseCreate) SetUpdatedBy(i int64) *SurveyResponseCreate {
	src.mutation.SetUpdatedBy(i)
	return src
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (src *SurveyResponseCreate) SetNillableUpdatedBy(i *int64) *SurveyResponseCreate {
	if i != nil {
		src.SetUpdatedBy(*i)
	}
	return src
}

// SetCreatedAt sets the "created_at" field.
func (src *SurveyResponseCreate) SetCreatedAt(t time.Time) *SurveyResponseCreate {
	src.mutation.SetCreatedAt(t)
	return src
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (src *SurveyResponseCreate) SetNillableCreatedAt(t *time.Time) *SurveyResponseCreate {
	if t != nil {
		src.SetCreatedAt(*t)
	}
	return src
}

// SetUpdatedAt sets the "updated_at" field.
func (src *SurveyResponseCreate) SetUpdatedAt(t time.Time) *SurveyResponseCreate {
	src.mutation.SetUpdatedAt(t)
	return src
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (src *SurveyResponseCreate) SetNillableUpdatedAt(t *time.Time) *SurveyResponseCreate {
	if t != nil {
		src.SetUpdatedAt(*t)
	}
	return src
}

// SetDeletedAt sets the "deleted_at" field.
func (src *SurveyResponseCreate) SetDeletedAt(t time.Time) *SurveyResponseCreate {
	src.mutation.SetDeletedAt(t)
	return src
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (src *SurveyResponseCreate) SetNillableDeletedAt(t *time.Time) *SurveyResponseCreate {
	if t != nil {
		src.SetDeletedAt(*t)
	}
	return src
}

// SetUserID sets the "user_id" field.
func (src *SurveyResponseCreate) SetUserID(i int64) *SurveyResponseCreate {
	src.mutation.SetUserID(i)
	return src
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (src *SurveyResponseCreate) SetNillableUserID(i *int64) *SurveyResponseCreate {
	if i != nil {
		src.SetUserID(*i)
	}
	return src
}

// SetSurveyID sets the "survey_id" field.
func (src *SurveyResponseCreate) SetSurveyID(i int64) *SurveyResponseCreate {
	src.mutation.SetSurveyID(i)
	return src
}

// SetNillableSurveyID sets the "survey_id" field if the given value is not nil.
func (src *SurveyResponseCreate) SetNillableSurveyID(i *int64) *SurveyResponseCreate {
	if i != nil {
		src.SetSurveyID(*i)
	}
	return src
}

// SetStatus sets the "status" field.
func (src *SurveyResponseCreate) SetStatus(ers enums.SurveyResponseStatus) *SurveyResponseCreate {
	src.mutation.SetStatus(ers)
	return src
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (src *SurveyResponseCreate) SetNillableStatus(ers *enums.SurveyResponseStatus) *SurveyResponseCreate {
	if ers != nil {
		src.SetStatus(*ers)
	}
	return src
}

// SetApprovedBy sets the "approved_by" field.
func (src *SurveyResponseCreate) SetApprovedBy(i int64) *SurveyResponseCreate {
	src.mutation.SetApprovedBy(i)
	return src
}

// SetNillableApprovedBy sets the "approved_by" field if the given value is not nil.
func (src *SurveyResponseCreate) SetNillableApprovedBy(i *int64) *SurveyResponseCreate {
	if i != nil {
		src.SetApprovedBy(*i)
	}
	return src
}

// SetID sets the "id" field.
func (src *SurveyResponseCreate) SetID(i int64) *SurveyResponseCreate {
	src.mutation.SetID(i)
	return src
}

// SetNillableID sets the "id" field if the given value is not nil.
func (src *SurveyResponseCreate) SetNillableID(i *int64) *SurveyResponseCreate {
	if i != nil {
		src.SetID(*i)
	}
	return src
}

// SetUser sets the "user" edge to the User entity.
func (src *SurveyResponseCreate) SetUser(u *User) *SurveyResponseCreate {
	return src.SetUserID(u.ID)
}

// SetSurvey sets the "survey" edge to the Survey entity.
func (src *SurveyResponseCreate) SetSurvey(s *Survey) *SurveyResponseCreate {
	return src.SetSurveyID(s.ID)
}

// SetApprovedUserID sets the "approved_user" edge to the User entity by ID.
func (src *SurveyResponseCreate) SetApprovedUserID(id int64) *SurveyResponseCreate {
	src.mutation.SetApprovedUserID(id)
	return src
}

// SetApprovedUser sets the "approved_user" edge to the User entity.
func (src *SurveyResponseCreate) SetApprovedUser(u *User) *SurveyResponseCreate {
	return src.SetApprovedUserID(u.ID)
}

// AddSurveyAnswerIDs adds the "survey_answers" edge to the SurveyAnswer entity by IDs.
func (src *SurveyResponseCreate) AddSurveyAnswerIDs(ids ...int64) *SurveyResponseCreate {
	src.mutation.AddSurveyAnswerIDs(ids...)
	return src
}

// AddSurveyAnswers adds the "survey_answers" edges to the SurveyAnswer entity.
func (src *SurveyResponseCreate) AddSurveyAnswers(s ...*SurveyAnswer) *SurveyResponseCreate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return src.AddSurveyAnswerIDs(ids...)
}

// Mutation returns the SurveyResponseMutation object of the builder.
func (src *SurveyResponseCreate) Mutation() *SurveyResponseMutation {
	return src.mutation
}

// Save creates the SurveyResponse in the database.
func (src *SurveyResponseCreate) Save(ctx context.Context) (*SurveyResponse, error) {
	src.defaults()
	return withHooks(ctx, src.sqlSave, src.mutation, src.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (src *SurveyResponseCreate) SaveX(ctx context.Context) *SurveyResponse {
	v, err := src.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (src *SurveyResponseCreate) Exec(ctx context.Context) error {
	_, err := src.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (src *SurveyResponseCreate) ExecX(ctx context.Context) {
	if err := src.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (src *SurveyResponseCreate) defaults() {
	if _, ok := src.mutation.CreatedBy(); !ok {
		v := surveyresponse.DefaultCreatedBy
		src.mutation.SetCreatedBy(v)
	}
	if _, ok := src.mutation.UpdatedBy(); !ok {
		v := surveyresponse.DefaultUpdatedBy
		src.mutation.SetUpdatedBy(v)
	}
	if _, ok := src.mutation.CreatedAt(); !ok {
		v := surveyresponse.DefaultCreatedAt()
		src.mutation.SetCreatedAt(v)
	}
	if _, ok := src.mutation.UpdatedAt(); !ok {
		v := surveyresponse.DefaultUpdatedAt()
		src.mutation.SetUpdatedAt(v)
	}
	if _, ok := src.mutation.DeletedAt(); !ok {
		v := surveyresponse.DefaultDeletedAt
		src.mutation.SetDeletedAt(v)
	}
	if _, ok := src.mutation.UserID(); !ok {
		v := surveyresponse.DefaultUserID
		src.mutation.SetUserID(v)
	}
	if _, ok := src.mutation.SurveyID(); !ok {
		v := surveyresponse.DefaultSurveyID
		src.mutation.SetSurveyID(v)
	}
	if _, ok := src.mutation.Status(); !ok {
		v := surveyresponse.DefaultStatus
		src.mutation.SetStatus(v)
	}
	if _, ok := src.mutation.ApprovedBy(); !ok {
		v := surveyresponse.DefaultApprovedBy
		src.mutation.SetApprovedBy(v)
	}
	if _, ok := src.mutation.ID(); !ok {
		v := surveyresponse.DefaultID()
		src.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (src *SurveyResponseCreate) check() error {
	if _, ok := src.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "SurveyResponse.created_by"`)}
	}
	if _, ok := src.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "SurveyResponse.updated_by"`)}
	}
	if _, ok := src.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "SurveyResponse.created_at"`)}
	}
	if _, ok := src.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "SurveyResponse.updated_at"`)}
	}
	if _, ok := src.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "SurveyResponse.deleted_at"`)}
	}
	if _, ok := src.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "SurveyResponse.user_id"`)}
	}
	if _, ok := src.mutation.SurveyID(); !ok {
		return &ValidationError{Name: "survey_id", err: errors.New(`cep_ent: missing required field "SurveyResponse.survey_id"`)}
	}
	if _, ok := src.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`cep_ent: missing required field "SurveyResponse.status"`)}
	}
	if v, ok := src.mutation.Status(); ok {
		if err := surveyresponse.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "SurveyResponse.status": %w`, err)}
		}
	}
	if _, ok := src.mutation.ApprovedBy(); !ok {
		return &ValidationError{Name: "approved_by", err: errors.New(`cep_ent: missing required field "SurveyResponse.approved_by"`)}
	}
	if _, ok := src.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "SurveyResponse.user"`)}
	}
	if _, ok := src.mutation.SurveyID(); !ok {
		return &ValidationError{Name: "survey", err: errors.New(`cep_ent: missing required edge "SurveyResponse.survey"`)}
	}
	if _, ok := src.mutation.ApprovedUserID(); !ok {
		return &ValidationError{Name: "approved_user", err: errors.New(`cep_ent: missing required edge "SurveyResponse.approved_user"`)}
	}
	return nil
}

func (src *SurveyResponseCreate) sqlSave(ctx context.Context) (*SurveyResponse, error) {
	if err := src.check(); err != nil {
		return nil, err
	}
	_node, _spec := src.createSpec()
	if err := sqlgraph.CreateNode(ctx, src.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	src.mutation.id = &_node.ID
	src.mutation.done = true
	return _node, nil
}

func (src *SurveyResponseCreate) createSpec() (*SurveyResponse, *sqlgraph.CreateSpec) {
	var (
		_node = &SurveyResponse{config: src.config}
		_spec = sqlgraph.NewCreateSpec(surveyresponse.Table, sqlgraph.NewFieldSpec(surveyresponse.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = src.conflict
	if id, ok := src.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := src.mutation.CreatedBy(); ok {
		_spec.SetField(surveyresponse.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := src.mutation.UpdatedBy(); ok {
		_spec.SetField(surveyresponse.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := src.mutation.CreatedAt(); ok {
		_spec.SetField(surveyresponse.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := src.mutation.UpdatedAt(); ok {
		_spec.SetField(surveyresponse.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := src.mutation.DeletedAt(); ok {
		_spec.SetField(surveyresponse.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := src.mutation.Status(); ok {
		_spec.SetField(surveyresponse.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := src.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   surveyresponse.UserTable,
			Columns: []string{surveyresponse.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := src.mutation.SurveyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   surveyresponse.SurveyTable,
			Columns: []string{surveyresponse.SurveyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survey.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SurveyID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := src.mutation.ApprovedUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   surveyresponse.ApprovedUserTable,
			Columns: []string{surveyresponse.ApprovedUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ApprovedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := src.mutation.SurveyAnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   surveyresponse.SurveyAnswersTable,
			Columns: []string{surveyresponse.SurveyAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyanswer.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SurveyResponse.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SurveyResponseUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (src *SurveyResponseCreate) OnConflict(opts ...sql.ConflictOption) *SurveyResponseUpsertOne {
	src.conflict = opts
	return &SurveyResponseUpsertOne{
		create: src,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SurveyResponse.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (src *SurveyResponseCreate) OnConflictColumns(columns ...string) *SurveyResponseUpsertOne {
	src.conflict = append(src.conflict, sql.ConflictColumns(columns...))
	return &SurveyResponseUpsertOne{
		create: src,
	}
}

type (
	// SurveyResponseUpsertOne is the builder for "upsert"-ing
	//  one SurveyResponse node.
	SurveyResponseUpsertOne struct {
		create *SurveyResponseCreate
	}

	// SurveyResponseUpsert is the "OnConflict" setter.
	SurveyResponseUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *SurveyResponseUpsert) SetCreatedBy(v int64) *SurveyResponseUpsert {
	u.Set(surveyresponse.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *SurveyResponseUpsert) UpdateCreatedBy() *SurveyResponseUpsert {
	u.SetExcluded(surveyresponse.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *SurveyResponseUpsert) AddCreatedBy(v int64) *SurveyResponseUpsert {
	u.Add(surveyresponse.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *SurveyResponseUpsert) SetUpdatedBy(v int64) *SurveyResponseUpsert {
	u.Set(surveyresponse.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *SurveyResponseUpsert) UpdateUpdatedBy() *SurveyResponseUpsert {
	u.SetExcluded(surveyresponse.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *SurveyResponseUpsert) AddUpdatedBy(v int64) *SurveyResponseUpsert {
	u.Add(surveyresponse.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SurveyResponseUpsert) SetUpdatedAt(v time.Time) *SurveyResponseUpsert {
	u.Set(surveyresponse.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SurveyResponseUpsert) UpdateUpdatedAt() *SurveyResponseUpsert {
	u.SetExcluded(surveyresponse.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SurveyResponseUpsert) SetDeletedAt(v time.Time) *SurveyResponseUpsert {
	u.Set(surveyresponse.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SurveyResponseUpsert) UpdateDeletedAt() *SurveyResponseUpsert {
	u.SetExcluded(surveyresponse.FieldDeletedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *SurveyResponseUpsert) SetUserID(v int64) *SurveyResponseUpsert {
	u.Set(surveyresponse.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SurveyResponseUpsert) UpdateUserID() *SurveyResponseUpsert {
	u.SetExcluded(surveyresponse.FieldUserID)
	return u
}

// SetSurveyID sets the "survey_id" field.
func (u *SurveyResponseUpsert) SetSurveyID(v int64) *SurveyResponseUpsert {
	u.Set(surveyresponse.FieldSurveyID, v)
	return u
}

// UpdateSurveyID sets the "survey_id" field to the value that was provided on create.
func (u *SurveyResponseUpsert) UpdateSurveyID() *SurveyResponseUpsert {
	u.SetExcluded(surveyresponse.FieldSurveyID)
	return u
}

// SetStatus sets the "status" field.
func (u *SurveyResponseUpsert) SetStatus(v enums.SurveyResponseStatus) *SurveyResponseUpsert {
	u.Set(surveyresponse.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SurveyResponseUpsert) UpdateStatus() *SurveyResponseUpsert {
	u.SetExcluded(surveyresponse.FieldStatus)
	return u
}

// SetApprovedBy sets the "approved_by" field.
func (u *SurveyResponseUpsert) SetApprovedBy(v int64) *SurveyResponseUpsert {
	u.Set(surveyresponse.FieldApprovedBy, v)
	return u
}

// UpdateApprovedBy sets the "approved_by" field to the value that was provided on create.
func (u *SurveyResponseUpsert) UpdateApprovedBy() *SurveyResponseUpsert {
	u.SetExcluded(surveyresponse.FieldApprovedBy)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SurveyResponse.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(surveyresponse.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SurveyResponseUpsertOne) UpdateNewValues() *SurveyResponseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(surveyresponse.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(surveyresponse.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SurveyResponse.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SurveyResponseUpsertOne) Ignore() *SurveyResponseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SurveyResponseUpsertOne) DoNothing() *SurveyResponseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SurveyResponseCreate.OnConflict
// documentation for more info.
func (u *SurveyResponseUpsertOne) Update(set func(*SurveyResponseUpsert)) *SurveyResponseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SurveyResponseUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *SurveyResponseUpsertOne) SetCreatedBy(v int64) *SurveyResponseUpsertOne {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *SurveyResponseUpsertOne) AddCreatedBy(v int64) *SurveyResponseUpsertOne {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *SurveyResponseUpsertOne) UpdateCreatedBy() *SurveyResponseUpsertOne {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *SurveyResponseUpsertOne) SetUpdatedBy(v int64) *SurveyResponseUpsertOne {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *SurveyResponseUpsertOne) AddUpdatedBy(v int64) *SurveyResponseUpsertOne {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *SurveyResponseUpsertOne) UpdateUpdatedBy() *SurveyResponseUpsertOne {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SurveyResponseUpsertOne) SetUpdatedAt(v time.Time) *SurveyResponseUpsertOne {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SurveyResponseUpsertOne) UpdateUpdatedAt() *SurveyResponseUpsertOne {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SurveyResponseUpsertOne) SetDeletedAt(v time.Time) *SurveyResponseUpsertOne {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SurveyResponseUpsertOne) UpdateDeletedAt() *SurveyResponseUpsertOne {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *SurveyResponseUpsertOne) SetUserID(v int64) *SurveyResponseUpsertOne {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SurveyResponseUpsertOne) UpdateUserID() *SurveyResponseUpsertOne {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.UpdateUserID()
	})
}

// SetSurveyID sets the "survey_id" field.
func (u *SurveyResponseUpsertOne) SetSurveyID(v int64) *SurveyResponseUpsertOne {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.SetSurveyID(v)
	})
}

// UpdateSurveyID sets the "survey_id" field to the value that was provided on create.
func (u *SurveyResponseUpsertOne) UpdateSurveyID() *SurveyResponseUpsertOne {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.UpdateSurveyID()
	})
}

// SetStatus sets the "status" field.
func (u *SurveyResponseUpsertOne) SetStatus(v enums.SurveyResponseStatus) *SurveyResponseUpsertOne {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SurveyResponseUpsertOne) UpdateStatus() *SurveyResponseUpsertOne {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.UpdateStatus()
	})
}

// SetApprovedBy sets the "approved_by" field.
func (u *SurveyResponseUpsertOne) SetApprovedBy(v int64) *SurveyResponseUpsertOne {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.SetApprovedBy(v)
	})
}

// UpdateApprovedBy sets the "approved_by" field to the value that was provided on create.
func (u *SurveyResponseUpsertOne) UpdateApprovedBy() *SurveyResponseUpsertOne {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.UpdateApprovedBy()
	})
}

// Exec executes the query.
func (u *SurveyResponseUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for SurveyResponseCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SurveyResponseUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SurveyResponseUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SurveyResponseUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SurveyResponseCreateBulk is the builder for creating many SurveyResponse entities in bulk.
type SurveyResponseCreateBulk struct {
	config
	err      error
	builders []*SurveyResponseCreate
	conflict []sql.ConflictOption
}

// Save creates the SurveyResponse entities in the database.
func (srcb *SurveyResponseCreateBulk) Save(ctx context.Context) ([]*SurveyResponse, error) {
	if srcb.err != nil {
		return nil, srcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(srcb.builders))
	nodes := make([]*SurveyResponse, len(srcb.builders))
	mutators := make([]Mutator, len(srcb.builders))
	for i := range srcb.builders {
		func(i int, root context.Context) {
			builder := srcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SurveyResponseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, srcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = srcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, srcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, srcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (srcb *SurveyResponseCreateBulk) SaveX(ctx context.Context) []*SurveyResponse {
	v, err := srcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srcb *SurveyResponseCreateBulk) Exec(ctx context.Context) error {
	_, err := srcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srcb *SurveyResponseCreateBulk) ExecX(ctx context.Context) {
	if err := srcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SurveyResponse.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SurveyResponseUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (srcb *SurveyResponseCreateBulk) OnConflict(opts ...sql.ConflictOption) *SurveyResponseUpsertBulk {
	srcb.conflict = opts
	return &SurveyResponseUpsertBulk{
		create: srcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SurveyResponse.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (srcb *SurveyResponseCreateBulk) OnConflictColumns(columns ...string) *SurveyResponseUpsertBulk {
	srcb.conflict = append(srcb.conflict, sql.ConflictColumns(columns...))
	return &SurveyResponseUpsertBulk{
		create: srcb,
	}
}

// SurveyResponseUpsertBulk is the builder for "upsert"-ing
// a bulk of SurveyResponse nodes.
type SurveyResponseUpsertBulk struct {
	create *SurveyResponseCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SurveyResponse.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(surveyresponse.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SurveyResponseUpsertBulk) UpdateNewValues() *SurveyResponseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(surveyresponse.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(surveyresponse.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SurveyResponse.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SurveyResponseUpsertBulk) Ignore() *SurveyResponseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SurveyResponseUpsertBulk) DoNothing() *SurveyResponseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SurveyResponseCreateBulk.OnConflict
// documentation for more info.
func (u *SurveyResponseUpsertBulk) Update(set func(*SurveyResponseUpsert)) *SurveyResponseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SurveyResponseUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *SurveyResponseUpsertBulk) SetCreatedBy(v int64) *SurveyResponseUpsertBulk {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *SurveyResponseUpsertBulk) AddCreatedBy(v int64) *SurveyResponseUpsertBulk {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *SurveyResponseUpsertBulk) UpdateCreatedBy() *SurveyResponseUpsertBulk {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *SurveyResponseUpsertBulk) SetUpdatedBy(v int64) *SurveyResponseUpsertBulk {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *SurveyResponseUpsertBulk) AddUpdatedBy(v int64) *SurveyResponseUpsertBulk {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *SurveyResponseUpsertBulk) UpdateUpdatedBy() *SurveyResponseUpsertBulk {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SurveyResponseUpsertBulk) SetUpdatedAt(v time.Time) *SurveyResponseUpsertBulk {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SurveyResponseUpsertBulk) UpdateUpdatedAt() *SurveyResponseUpsertBulk {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SurveyResponseUpsertBulk) SetDeletedAt(v time.Time) *SurveyResponseUpsertBulk {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SurveyResponseUpsertBulk) UpdateDeletedAt() *SurveyResponseUpsertBulk {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *SurveyResponseUpsertBulk) SetUserID(v int64) *SurveyResponseUpsertBulk {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SurveyResponseUpsertBulk) UpdateUserID() *SurveyResponseUpsertBulk {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.UpdateUserID()
	})
}

// SetSurveyID sets the "survey_id" field.
func (u *SurveyResponseUpsertBulk) SetSurveyID(v int64) *SurveyResponseUpsertBulk {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.SetSurveyID(v)
	})
}

// UpdateSurveyID sets the "survey_id" field to the value that was provided on create.
func (u *SurveyResponseUpsertBulk) UpdateSurveyID() *SurveyResponseUpsertBulk {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.UpdateSurveyID()
	})
}

// SetStatus sets the "status" field.
func (u *SurveyResponseUpsertBulk) SetStatus(v enums.SurveyResponseStatus) *SurveyResponseUpsertBulk {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SurveyResponseUpsertBulk) UpdateStatus() *SurveyResponseUpsertBulk {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.UpdateStatus()
	})
}

// SetApprovedBy sets the "approved_by" field.
func (u *SurveyResponseUpsertBulk) SetApprovedBy(v int64) *SurveyResponseUpsertBulk {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.SetApprovedBy(v)
	})
}

// UpdateApprovedBy sets the "approved_by" field to the value that was provided on create.
func (u *SurveyResponseUpsertBulk) UpdateApprovedBy() *SurveyResponseUpsertBulk {
	return u.Update(func(s *SurveyResponseUpsert) {
		s.UpdateApprovedBy()
	})
}

// Exec executes the query.
func (u *SurveyResponseUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the SurveyResponseCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for SurveyResponseCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SurveyResponseUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
