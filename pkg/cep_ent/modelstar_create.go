// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/model"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/modelstar"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// ModelStarCreate is the builder for creating a ModelStar entity.
type ModelStarCreate struct {
	config
	mutation *ModelStarMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (msc *ModelStarCreate) SetCreatedBy(i int64) *ModelStarCreate {
	msc.mutation.SetCreatedBy(i)
	return msc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (msc *ModelStarCreate) SetNillableCreatedBy(i *int64) *ModelStarCreate {
	if i != nil {
		msc.SetCreatedBy(*i)
	}
	return msc
}

// SetUpdatedBy sets the "updated_by" field.
func (msc *ModelStarCreate) SetUpdatedBy(i int64) *ModelStarCreate {
	msc.mutation.SetUpdatedBy(i)
	return msc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (msc *ModelStarCreate) SetNillableUpdatedBy(i *int64) *ModelStarCreate {
	if i != nil {
		msc.SetUpdatedBy(*i)
	}
	return msc
}

// SetCreatedAt sets the "created_at" field.
func (msc *ModelStarCreate) SetCreatedAt(t time.Time) *ModelStarCreate {
	msc.mutation.SetCreatedAt(t)
	return msc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (msc *ModelStarCreate) SetNillableCreatedAt(t *time.Time) *ModelStarCreate {
	if t != nil {
		msc.SetCreatedAt(*t)
	}
	return msc
}

// SetUpdatedAt sets the "updated_at" field.
func (msc *ModelStarCreate) SetUpdatedAt(t time.Time) *ModelStarCreate {
	msc.mutation.SetUpdatedAt(t)
	return msc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (msc *ModelStarCreate) SetNillableUpdatedAt(t *time.Time) *ModelStarCreate {
	if t != nil {
		msc.SetUpdatedAt(*t)
	}
	return msc
}

// SetDeletedAt sets the "deleted_at" field.
func (msc *ModelStarCreate) SetDeletedAt(t time.Time) *ModelStarCreate {
	msc.mutation.SetDeletedAt(t)
	return msc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (msc *ModelStarCreate) SetNillableDeletedAt(t *time.Time) *ModelStarCreate {
	if t != nil {
		msc.SetDeletedAt(*t)
	}
	return msc
}

// SetUserID sets the "user_id" field.
func (msc *ModelStarCreate) SetUserID(i int64) *ModelStarCreate {
	msc.mutation.SetUserID(i)
	return msc
}

// SetModelID sets the "model_id" field.
func (msc *ModelStarCreate) SetModelID(i int64) *ModelStarCreate {
	msc.mutation.SetModelID(i)
	return msc
}

// SetStatus sets the "status" field.
func (msc *ModelStarCreate) SetStatus(es enums.StarStatus) *ModelStarCreate {
	msc.mutation.SetStatus(es)
	return msc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (msc *ModelStarCreate) SetNillableStatus(es *enums.StarStatus) *ModelStarCreate {
	if es != nil {
		msc.SetStatus(*es)
	}
	return msc
}

// SetID sets the "id" field.
func (msc *ModelStarCreate) SetID(i int64) *ModelStarCreate {
	msc.mutation.SetID(i)
	return msc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (msc *ModelStarCreate) SetNillableID(i *int64) *ModelStarCreate {
	if i != nil {
		msc.SetID(*i)
	}
	return msc
}

// SetUser sets the "user" edge to the User entity.
func (msc *ModelStarCreate) SetUser(u *User) *ModelStarCreate {
	return msc.SetUserID(u.ID)
}

// SetModel sets the "model" edge to the Model entity.
func (msc *ModelStarCreate) SetModel(m *Model) *ModelStarCreate {
	return msc.SetModelID(m.ID)
}

// Mutation returns the ModelStarMutation object of the builder.
func (msc *ModelStarCreate) Mutation() *ModelStarMutation {
	return msc.mutation
}

// Save creates the ModelStar in the database.
func (msc *ModelStarCreate) Save(ctx context.Context) (*ModelStar, error) {
	msc.defaults()
	return withHooks(ctx, msc.sqlSave, msc.mutation, msc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (msc *ModelStarCreate) SaveX(ctx context.Context) *ModelStar {
	v, err := msc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (msc *ModelStarCreate) Exec(ctx context.Context) error {
	_, err := msc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msc *ModelStarCreate) ExecX(ctx context.Context) {
	if err := msc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (msc *ModelStarCreate) defaults() {
	if _, ok := msc.mutation.CreatedBy(); !ok {
		v := modelstar.DefaultCreatedBy
		msc.mutation.SetCreatedBy(v)
	}
	if _, ok := msc.mutation.UpdatedBy(); !ok {
		v := modelstar.DefaultUpdatedBy
		msc.mutation.SetUpdatedBy(v)
	}
	if _, ok := msc.mutation.CreatedAt(); !ok {
		v := modelstar.DefaultCreatedAt()
		msc.mutation.SetCreatedAt(v)
	}
	if _, ok := msc.mutation.UpdatedAt(); !ok {
		v := modelstar.DefaultUpdatedAt()
		msc.mutation.SetUpdatedAt(v)
	}
	if _, ok := msc.mutation.DeletedAt(); !ok {
		v := modelstar.DefaultDeletedAt
		msc.mutation.SetDeletedAt(v)
	}
	if _, ok := msc.mutation.Status(); !ok {
		v := modelstar.DefaultStatus
		msc.mutation.SetStatus(v)
	}
	if _, ok := msc.mutation.ID(); !ok {
		v := modelstar.DefaultID()
		msc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (msc *ModelStarCreate) check() error {
	if _, ok := msc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "ModelStar.created_by"`)}
	}
	if _, ok := msc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "ModelStar.updated_by"`)}
	}
	if _, ok := msc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "ModelStar.created_at"`)}
	}
	if _, ok := msc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "ModelStar.updated_at"`)}
	}
	if _, ok := msc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "ModelStar.deleted_at"`)}
	}
	if _, ok := msc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "ModelStar.user_id"`)}
	}
	if _, ok := msc.mutation.ModelID(); !ok {
		return &ValidationError{Name: "model_id", err: errors.New(`cep_ent: missing required field "ModelStar.model_id"`)}
	}
	if _, ok := msc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`cep_ent: missing required field "ModelStar.status"`)}
	}
	if v, ok := msc.mutation.Status(); ok {
		if err := modelstar.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "ModelStar.status": %w`, err)}
		}
	}
	if _, ok := msc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "ModelStar.user"`)}
	}
	if _, ok := msc.mutation.ModelID(); !ok {
		return &ValidationError{Name: "model", err: errors.New(`cep_ent: missing required edge "ModelStar.model"`)}
	}
	return nil
}

func (msc *ModelStarCreate) sqlSave(ctx context.Context) (*ModelStar, error) {
	if err := msc.check(); err != nil {
		return nil, err
	}
	_node, _spec := msc.createSpec()
	if err := sqlgraph.CreateNode(ctx, msc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	msc.mutation.id = &_node.ID
	msc.mutation.done = true
	return _node, nil
}

func (msc *ModelStarCreate) createSpec() (*ModelStar, *sqlgraph.CreateSpec) {
	var (
		_node = &ModelStar{config: msc.config}
		_spec = sqlgraph.NewCreateSpec(modelstar.Table, sqlgraph.NewFieldSpec(modelstar.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = msc.conflict
	if id, ok := msc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := msc.mutation.CreatedBy(); ok {
		_spec.SetField(modelstar.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := msc.mutation.UpdatedBy(); ok {
		_spec.SetField(modelstar.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := msc.mutation.CreatedAt(); ok {
		_spec.SetField(modelstar.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := msc.mutation.UpdatedAt(); ok {
		_spec.SetField(modelstar.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := msc.mutation.DeletedAt(); ok {
		_spec.SetField(modelstar.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := msc.mutation.Status(); ok {
		_spec.SetField(modelstar.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := msc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   modelstar.UserTable,
			Columns: []string{modelstar.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := msc.mutation.ModelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   modelstar.ModelTable,
			Columns: []string{modelstar.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(model.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ModelID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ModelStar.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ModelStarUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (msc *ModelStarCreate) OnConflict(opts ...sql.ConflictOption) *ModelStarUpsertOne {
	msc.conflict = opts
	return &ModelStarUpsertOne{
		create: msc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ModelStar.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (msc *ModelStarCreate) OnConflictColumns(columns ...string) *ModelStarUpsertOne {
	msc.conflict = append(msc.conflict, sql.ConflictColumns(columns...))
	return &ModelStarUpsertOne{
		create: msc,
	}
}

type (
	// ModelStarUpsertOne is the builder for "upsert"-ing
	//  one ModelStar node.
	ModelStarUpsertOne struct {
		create *ModelStarCreate
	}

	// ModelStarUpsert is the "OnConflict" setter.
	ModelStarUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *ModelStarUpsert) SetCreatedBy(v int64) *ModelStarUpsert {
	u.Set(modelstar.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ModelStarUpsert) UpdateCreatedBy() *ModelStarUpsert {
	u.SetExcluded(modelstar.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *ModelStarUpsert) AddCreatedBy(v int64) *ModelStarUpsert {
	u.Add(modelstar.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ModelStarUpsert) SetUpdatedBy(v int64) *ModelStarUpsert {
	u.Set(modelstar.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ModelStarUpsert) UpdateUpdatedBy() *ModelStarUpsert {
	u.SetExcluded(modelstar.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ModelStarUpsert) AddUpdatedBy(v int64) *ModelStarUpsert {
	u.Add(modelstar.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ModelStarUpsert) SetUpdatedAt(v time.Time) *ModelStarUpsert {
	u.Set(modelstar.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ModelStarUpsert) UpdateUpdatedAt() *ModelStarUpsert {
	u.SetExcluded(modelstar.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ModelStarUpsert) SetDeletedAt(v time.Time) *ModelStarUpsert {
	u.Set(modelstar.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ModelStarUpsert) UpdateDeletedAt() *ModelStarUpsert {
	u.SetExcluded(modelstar.FieldDeletedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *ModelStarUpsert) SetUserID(v int64) *ModelStarUpsert {
	u.Set(modelstar.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ModelStarUpsert) UpdateUserID() *ModelStarUpsert {
	u.SetExcluded(modelstar.FieldUserID)
	return u
}

// SetModelID sets the "model_id" field.
func (u *ModelStarUpsert) SetModelID(v int64) *ModelStarUpsert {
	u.Set(modelstar.FieldModelID, v)
	return u
}

// UpdateModelID sets the "model_id" field to the value that was provided on create.
func (u *ModelStarUpsert) UpdateModelID() *ModelStarUpsert {
	u.SetExcluded(modelstar.FieldModelID)
	return u
}

// SetStatus sets the "status" field.
func (u *ModelStarUpsert) SetStatus(v enums.StarStatus) *ModelStarUpsert {
	u.Set(modelstar.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ModelStarUpsert) UpdateStatus() *ModelStarUpsert {
	u.SetExcluded(modelstar.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ModelStar.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(modelstar.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ModelStarUpsertOne) UpdateNewValues() *ModelStarUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(modelstar.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(modelstar.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ModelStar.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ModelStarUpsertOne) Ignore() *ModelStarUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ModelStarUpsertOne) DoNothing() *ModelStarUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ModelStarCreate.OnConflict
// documentation for more info.
func (u *ModelStarUpsertOne) Update(set func(*ModelStarUpsert)) *ModelStarUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ModelStarUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *ModelStarUpsertOne) SetCreatedBy(v int64) *ModelStarUpsertOne {
	return u.Update(func(s *ModelStarUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *ModelStarUpsertOne) AddCreatedBy(v int64) *ModelStarUpsertOne {
	return u.Update(func(s *ModelStarUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ModelStarUpsertOne) UpdateCreatedBy() *ModelStarUpsertOne {
	return u.Update(func(s *ModelStarUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ModelStarUpsertOne) SetUpdatedBy(v int64) *ModelStarUpsertOne {
	return u.Update(func(s *ModelStarUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ModelStarUpsertOne) AddUpdatedBy(v int64) *ModelStarUpsertOne {
	return u.Update(func(s *ModelStarUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ModelStarUpsertOne) UpdateUpdatedBy() *ModelStarUpsertOne {
	return u.Update(func(s *ModelStarUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ModelStarUpsertOne) SetUpdatedAt(v time.Time) *ModelStarUpsertOne {
	return u.Update(func(s *ModelStarUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ModelStarUpsertOne) UpdateUpdatedAt() *ModelStarUpsertOne {
	return u.Update(func(s *ModelStarUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ModelStarUpsertOne) SetDeletedAt(v time.Time) *ModelStarUpsertOne {
	return u.Update(func(s *ModelStarUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ModelStarUpsertOne) UpdateDeletedAt() *ModelStarUpsertOne {
	return u.Update(func(s *ModelStarUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *ModelStarUpsertOne) SetUserID(v int64) *ModelStarUpsertOne {
	return u.Update(func(s *ModelStarUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ModelStarUpsertOne) UpdateUserID() *ModelStarUpsertOne {
	return u.Update(func(s *ModelStarUpsert) {
		s.UpdateUserID()
	})
}

// SetModelID sets the "model_id" field.
func (u *ModelStarUpsertOne) SetModelID(v int64) *ModelStarUpsertOne {
	return u.Update(func(s *ModelStarUpsert) {
		s.SetModelID(v)
	})
}

// UpdateModelID sets the "model_id" field to the value that was provided on create.
func (u *ModelStarUpsertOne) UpdateModelID() *ModelStarUpsertOne {
	return u.Update(func(s *ModelStarUpsert) {
		s.UpdateModelID()
	})
}

// SetStatus sets the "status" field.
func (u *ModelStarUpsertOne) SetStatus(v enums.StarStatus) *ModelStarUpsertOne {
	return u.Update(func(s *ModelStarUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ModelStarUpsertOne) UpdateStatus() *ModelStarUpsertOne {
	return u.Update(func(s *ModelStarUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *ModelStarUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for ModelStarCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ModelStarUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ModelStarUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ModelStarUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ModelStarCreateBulk is the builder for creating many ModelStar entities in bulk.
type ModelStarCreateBulk struct {
	config
	err      error
	builders []*ModelStarCreate
	conflict []sql.ConflictOption
}

// Save creates the ModelStar entities in the database.
func (mscb *ModelStarCreateBulk) Save(ctx context.Context) ([]*ModelStar, error) {
	if mscb.err != nil {
		return nil, mscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mscb.builders))
	nodes := make([]*ModelStar, len(mscb.builders))
	mutators := make([]Mutator, len(mscb.builders))
	for i := range mscb.builders {
		func(i int, root context.Context) {
			builder := mscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ModelStarMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mscb *ModelStarCreateBulk) SaveX(ctx context.Context) []*ModelStar {
	v, err := mscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mscb *ModelStarCreateBulk) Exec(ctx context.Context) error {
	_, err := mscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mscb *ModelStarCreateBulk) ExecX(ctx context.Context) {
	if err := mscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ModelStar.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ModelStarUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (mscb *ModelStarCreateBulk) OnConflict(opts ...sql.ConflictOption) *ModelStarUpsertBulk {
	mscb.conflict = opts
	return &ModelStarUpsertBulk{
		create: mscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ModelStar.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mscb *ModelStarCreateBulk) OnConflictColumns(columns ...string) *ModelStarUpsertBulk {
	mscb.conflict = append(mscb.conflict, sql.ConflictColumns(columns...))
	return &ModelStarUpsertBulk{
		create: mscb,
	}
}

// ModelStarUpsertBulk is the builder for "upsert"-ing
// a bulk of ModelStar nodes.
type ModelStarUpsertBulk struct {
	create *ModelStarCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ModelStar.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(modelstar.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ModelStarUpsertBulk) UpdateNewValues() *ModelStarUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(modelstar.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(modelstar.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ModelStar.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ModelStarUpsertBulk) Ignore() *ModelStarUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ModelStarUpsertBulk) DoNothing() *ModelStarUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ModelStarCreateBulk.OnConflict
// documentation for more info.
func (u *ModelStarUpsertBulk) Update(set func(*ModelStarUpsert)) *ModelStarUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ModelStarUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *ModelStarUpsertBulk) SetCreatedBy(v int64) *ModelStarUpsertBulk {
	return u.Update(func(s *ModelStarUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *ModelStarUpsertBulk) AddCreatedBy(v int64) *ModelStarUpsertBulk {
	return u.Update(func(s *ModelStarUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ModelStarUpsertBulk) UpdateCreatedBy() *ModelStarUpsertBulk {
	return u.Update(func(s *ModelStarUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ModelStarUpsertBulk) SetUpdatedBy(v int64) *ModelStarUpsertBulk {
	return u.Update(func(s *ModelStarUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ModelStarUpsertBulk) AddUpdatedBy(v int64) *ModelStarUpsertBulk {
	return u.Update(func(s *ModelStarUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ModelStarUpsertBulk) UpdateUpdatedBy() *ModelStarUpsertBulk {
	return u.Update(func(s *ModelStarUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ModelStarUpsertBulk) SetUpdatedAt(v time.Time) *ModelStarUpsertBulk {
	return u.Update(func(s *ModelStarUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ModelStarUpsertBulk) UpdateUpdatedAt() *ModelStarUpsertBulk {
	return u.Update(func(s *ModelStarUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ModelStarUpsertBulk) SetDeletedAt(v time.Time) *ModelStarUpsertBulk {
	return u.Update(func(s *ModelStarUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ModelStarUpsertBulk) UpdateDeletedAt() *ModelStarUpsertBulk {
	return u.Update(func(s *ModelStarUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *ModelStarUpsertBulk) SetUserID(v int64) *ModelStarUpsertBulk {
	return u.Update(func(s *ModelStarUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ModelStarUpsertBulk) UpdateUserID() *ModelStarUpsertBulk {
	return u.Update(func(s *ModelStarUpsert) {
		s.UpdateUserID()
	})
}

// SetModelID sets the "model_id" field.
func (u *ModelStarUpsertBulk) SetModelID(v int64) *ModelStarUpsertBulk {
	return u.Update(func(s *ModelStarUpsert) {
		s.SetModelID(v)
	})
}

// UpdateModelID sets the "model_id" field to the value that was provided on create.
func (u *ModelStarUpsertBulk) UpdateModelID() *ModelStarUpsertBulk {
	return u.Update(func(s *ModelStarUpsert) {
		s.UpdateModelID()
	})
}

// SetStatus sets the "status" field.
func (u *ModelStarUpsertBulk) SetStatus(v enums.StarStatus) *ModelStarUpsertBulk {
	return u.Update(func(s *ModelStarUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ModelStarUpsertBulk) UpdateStatus() *ModelStarUpsertBulk {
	return u.Update(func(s *ModelStarUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *ModelStarUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the ModelStarCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for ModelStarCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ModelStarUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
