// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/device"
	"cephalon-ent/pkg/cep_ent/devicegpumission"
	"cephalon-ent/pkg/cep_ent/gpu"
	"cephalon-ent/pkg/cep_ent/missionkind"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeviceGpuMissionCreate is the builder for creating a DeviceGpuMission entity.
type DeviceGpuMissionCreate struct {
	config
	mutation *DeviceGpuMissionMutation
	hooks    []Hook
}

// SetCreatedBy sets the "created_by" field.
func (dgmc *DeviceGpuMissionCreate) SetCreatedBy(i int64) *DeviceGpuMissionCreate {
	dgmc.mutation.SetCreatedBy(i)
	return dgmc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (dgmc *DeviceGpuMissionCreate) SetNillableCreatedBy(i *int64) *DeviceGpuMissionCreate {
	if i != nil {
		dgmc.SetCreatedBy(*i)
	}
	return dgmc
}

// SetUpdatedBy sets the "updated_by" field.
func (dgmc *DeviceGpuMissionCreate) SetUpdatedBy(i int64) *DeviceGpuMissionCreate {
	dgmc.mutation.SetUpdatedBy(i)
	return dgmc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dgmc *DeviceGpuMissionCreate) SetNillableUpdatedBy(i *int64) *DeviceGpuMissionCreate {
	if i != nil {
		dgmc.SetUpdatedBy(*i)
	}
	return dgmc
}

// SetCreatedAt sets the "created_at" field.
func (dgmc *DeviceGpuMissionCreate) SetCreatedAt(t time.Time) *DeviceGpuMissionCreate {
	dgmc.mutation.SetCreatedAt(t)
	return dgmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dgmc *DeviceGpuMissionCreate) SetNillableCreatedAt(t *time.Time) *DeviceGpuMissionCreate {
	if t != nil {
		dgmc.SetCreatedAt(*t)
	}
	return dgmc
}

// SetUpdatedAt sets the "updated_at" field.
func (dgmc *DeviceGpuMissionCreate) SetUpdatedAt(t time.Time) *DeviceGpuMissionCreate {
	dgmc.mutation.SetUpdatedAt(t)
	return dgmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dgmc *DeviceGpuMissionCreate) SetNillableUpdatedAt(t *time.Time) *DeviceGpuMissionCreate {
	if t != nil {
		dgmc.SetUpdatedAt(*t)
	}
	return dgmc
}

// SetDeletedAt sets the "deleted_at" field.
func (dgmc *DeviceGpuMissionCreate) SetDeletedAt(t time.Time) *DeviceGpuMissionCreate {
	dgmc.mutation.SetDeletedAt(t)
	return dgmc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dgmc *DeviceGpuMissionCreate) SetNillableDeletedAt(t *time.Time) *DeviceGpuMissionCreate {
	if t != nil {
		dgmc.SetDeletedAt(*t)
	}
	return dgmc
}

// SetDeviceID sets the "device_id" field.
func (dgmc *DeviceGpuMissionCreate) SetDeviceID(i int64) *DeviceGpuMissionCreate {
	dgmc.mutation.SetDeviceID(i)
	return dgmc
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (dgmc *DeviceGpuMissionCreate) SetNillableDeviceID(i *int64) *DeviceGpuMissionCreate {
	if i != nil {
		dgmc.SetDeviceID(*i)
	}
	return dgmc
}

// SetGpuID sets the "gpu_id" field.
func (dgmc *DeviceGpuMissionCreate) SetGpuID(i int64) *DeviceGpuMissionCreate {
	dgmc.mutation.SetGpuID(i)
	return dgmc
}

// SetNillableGpuID sets the "gpu_id" field if the given value is not nil.
func (dgmc *DeviceGpuMissionCreate) SetNillableGpuID(i *int64) *DeviceGpuMissionCreate {
	if i != nil {
		dgmc.SetGpuID(*i)
	}
	return dgmc
}

// SetMissionKindID sets the "mission_kind_id" field.
func (dgmc *DeviceGpuMissionCreate) SetMissionKindID(i int64) *DeviceGpuMissionCreate {
	dgmc.mutation.SetMissionKindID(i)
	return dgmc
}

// SetNillableMissionKindID sets the "mission_kind_id" field if the given value is not nil.
func (dgmc *DeviceGpuMissionCreate) SetNillableMissionKindID(i *int64) *DeviceGpuMissionCreate {
	if i != nil {
		dgmc.SetMissionKindID(*i)
	}
	return dgmc
}

// SetID sets the "id" field.
func (dgmc *DeviceGpuMissionCreate) SetID(i int64) *DeviceGpuMissionCreate {
	dgmc.mutation.SetID(i)
	return dgmc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dgmc *DeviceGpuMissionCreate) SetNillableID(i *int64) *DeviceGpuMissionCreate {
	if i != nil {
		dgmc.SetID(*i)
	}
	return dgmc
}

// SetDevice sets the "device" edge to the Device entity.
func (dgmc *DeviceGpuMissionCreate) SetDevice(d *Device) *DeviceGpuMissionCreate {
	return dgmc.SetDeviceID(d.ID)
}

// SetMissionKind sets the "mission_kind" edge to the MissionKind entity.
func (dgmc *DeviceGpuMissionCreate) SetMissionKind(m *MissionKind) *DeviceGpuMissionCreate {
	return dgmc.SetMissionKindID(m.ID)
}

// SetGpu sets the "gpu" edge to the Gpu entity.
func (dgmc *DeviceGpuMissionCreate) SetGpu(g *Gpu) *DeviceGpuMissionCreate {
	return dgmc.SetGpuID(g.ID)
}

// Mutation returns the DeviceGpuMissionMutation object of the builder.
func (dgmc *DeviceGpuMissionCreate) Mutation() *DeviceGpuMissionMutation {
	return dgmc.mutation
}

// Save creates the DeviceGpuMission in the database.
func (dgmc *DeviceGpuMissionCreate) Save(ctx context.Context) (*DeviceGpuMission, error) {
	dgmc.defaults()
	return withHooks(ctx, dgmc.sqlSave, dgmc.mutation, dgmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dgmc *DeviceGpuMissionCreate) SaveX(ctx context.Context) *DeviceGpuMission {
	v, err := dgmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dgmc *DeviceGpuMissionCreate) Exec(ctx context.Context) error {
	_, err := dgmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dgmc *DeviceGpuMissionCreate) ExecX(ctx context.Context) {
	if err := dgmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dgmc *DeviceGpuMissionCreate) defaults() {
	if _, ok := dgmc.mutation.CreatedBy(); !ok {
		v := devicegpumission.DefaultCreatedBy
		dgmc.mutation.SetCreatedBy(v)
	}
	if _, ok := dgmc.mutation.UpdatedBy(); !ok {
		v := devicegpumission.DefaultUpdatedBy
		dgmc.mutation.SetUpdatedBy(v)
	}
	if _, ok := dgmc.mutation.CreatedAt(); !ok {
		v := devicegpumission.DefaultCreatedAt()
		dgmc.mutation.SetCreatedAt(v)
	}
	if _, ok := dgmc.mutation.UpdatedAt(); !ok {
		v := devicegpumission.DefaultUpdatedAt()
		dgmc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dgmc.mutation.DeletedAt(); !ok {
		v := devicegpumission.DefaultDeletedAt
		dgmc.mutation.SetDeletedAt(v)
	}
	if _, ok := dgmc.mutation.DeviceID(); !ok {
		v := devicegpumission.DefaultDeviceID
		dgmc.mutation.SetDeviceID(v)
	}
	if _, ok := dgmc.mutation.GpuID(); !ok {
		v := devicegpumission.DefaultGpuID
		dgmc.mutation.SetGpuID(v)
	}
	if _, ok := dgmc.mutation.MissionKindID(); !ok {
		v := devicegpumission.DefaultMissionKindID
		dgmc.mutation.SetMissionKindID(v)
	}
	if _, ok := dgmc.mutation.ID(); !ok {
		v := devicegpumission.DefaultID()
		dgmc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dgmc *DeviceGpuMissionCreate) check() error {
	if _, ok := dgmc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "DeviceGpuMission.created_by"`)}
	}
	if _, ok := dgmc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "DeviceGpuMission.updated_by"`)}
	}
	if _, ok := dgmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "DeviceGpuMission.created_at"`)}
	}
	if _, ok := dgmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "DeviceGpuMission.updated_at"`)}
	}
	if _, ok := dgmc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "DeviceGpuMission.deleted_at"`)}
	}
	if _, ok := dgmc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`cep_ent: missing required field "DeviceGpuMission.device_id"`)}
	}
	if _, ok := dgmc.mutation.GpuID(); !ok {
		return &ValidationError{Name: "gpu_id", err: errors.New(`cep_ent: missing required field "DeviceGpuMission.gpu_id"`)}
	}
	if _, ok := dgmc.mutation.MissionKindID(); !ok {
		return &ValidationError{Name: "mission_kind_id", err: errors.New(`cep_ent: missing required field "DeviceGpuMission.mission_kind_id"`)}
	}
	if _, ok := dgmc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device", err: errors.New(`cep_ent: missing required edge "DeviceGpuMission.device"`)}
	}
	if _, ok := dgmc.mutation.MissionKindID(); !ok {
		return &ValidationError{Name: "mission_kind", err: errors.New(`cep_ent: missing required edge "DeviceGpuMission.mission_kind"`)}
	}
	if _, ok := dgmc.mutation.GpuID(); !ok {
		return &ValidationError{Name: "gpu", err: errors.New(`cep_ent: missing required edge "DeviceGpuMission.gpu"`)}
	}
	return nil
}

func (dgmc *DeviceGpuMissionCreate) sqlSave(ctx context.Context) (*DeviceGpuMission, error) {
	if err := dgmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dgmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dgmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	dgmc.mutation.id = &_node.ID
	dgmc.mutation.done = true
	return _node, nil
}

func (dgmc *DeviceGpuMissionCreate) createSpec() (*DeviceGpuMission, *sqlgraph.CreateSpec) {
	var (
		_node = &DeviceGpuMission{config: dgmc.config}
		_spec = sqlgraph.NewCreateSpec(devicegpumission.Table, sqlgraph.NewFieldSpec(devicegpumission.FieldID, field.TypeInt64))
	)
	if id, ok := dgmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dgmc.mutation.CreatedBy(); ok {
		_spec.SetField(devicegpumission.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := dgmc.mutation.UpdatedBy(); ok {
		_spec.SetField(devicegpumission.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := dgmc.mutation.CreatedAt(); ok {
		_spec.SetField(devicegpumission.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dgmc.mutation.UpdatedAt(); ok {
		_spec.SetField(devicegpumission.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := dgmc.mutation.DeletedAt(); ok {
		_spec.SetField(devicegpumission.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if nodes := dgmc.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   devicegpumission.DeviceTable,
			Columns: []string{devicegpumission.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DeviceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dgmc.mutation.MissionKindIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   devicegpumission.MissionKindTable,
			Columns: []string{devicegpumission.MissionKindColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionkind.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MissionKindID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dgmc.mutation.GpuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   devicegpumission.GpuTable,
			Columns: []string{devicegpumission.GpuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gpu.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.GpuID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DeviceGpuMissionCreateBulk is the builder for creating many DeviceGpuMission entities in bulk.
type DeviceGpuMissionCreateBulk struct {
	config
	builders []*DeviceGpuMissionCreate
}

// Save creates the DeviceGpuMission entities in the database.
func (dgmcb *DeviceGpuMissionCreateBulk) Save(ctx context.Context) ([]*DeviceGpuMission, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dgmcb.builders))
	nodes := make([]*DeviceGpuMission, len(dgmcb.builders))
	mutators := make([]Mutator, len(dgmcb.builders))
	for i := range dgmcb.builders {
		func(i int, root context.Context) {
			builder := dgmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeviceGpuMissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dgmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dgmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dgmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dgmcb *DeviceGpuMissionCreateBulk) SaveX(ctx context.Context) []*DeviceGpuMission {
	v, err := dgmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dgmcb *DeviceGpuMissionCreateBulk) Exec(ctx context.Context) error {
	_, err := dgmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dgmcb *DeviceGpuMissionCreateBulk) ExecX(ctx context.Context) {
	if err := dgmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
