// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/extraservice"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/mission"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionextraservice"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// MissionExtraServiceUpdate is the builder for updating MissionExtraService entities.
type MissionExtraServiceUpdate struct {
	config
	hooks     []Hook
	mutation  *MissionExtraServiceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MissionExtraServiceUpdate builder.
func (mesu *MissionExtraServiceUpdate) Where(ps ...predicate.MissionExtraService) *MissionExtraServiceUpdate {
	mesu.mutation.Where(ps...)
	return mesu
}

// SetCreatedBy sets the "created_by" field.
func (mesu *MissionExtraServiceUpdate) SetCreatedBy(i int64) *MissionExtraServiceUpdate {
	mesu.mutation.ResetCreatedBy()
	mesu.mutation.SetCreatedBy(i)
	return mesu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mesu *MissionExtraServiceUpdate) SetNillableCreatedBy(i *int64) *MissionExtraServiceUpdate {
	if i != nil {
		mesu.SetCreatedBy(*i)
	}
	return mesu
}

// AddCreatedBy adds i to the "created_by" field.
func (mesu *MissionExtraServiceUpdate) AddCreatedBy(i int64) *MissionExtraServiceUpdate {
	mesu.mutation.AddCreatedBy(i)
	return mesu
}

// SetUpdatedBy sets the "updated_by" field.
func (mesu *MissionExtraServiceUpdate) SetUpdatedBy(i int64) *MissionExtraServiceUpdate {
	mesu.mutation.ResetUpdatedBy()
	mesu.mutation.SetUpdatedBy(i)
	return mesu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mesu *MissionExtraServiceUpdate) SetNillableUpdatedBy(i *int64) *MissionExtraServiceUpdate {
	if i != nil {
		mesu.SetUpdatedBy(*i)
	}
	return mesu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (mesu *MissionExtraServiceUpdate) AddUpdatedBy(i int64) *MissionExtraServiceUpdate {
	mesu.mutation.AddUpdatedBy(i)
	return mesu
}

// SetUpdatedAt sets the "updated_at" field.
func (mesu *MissionExtraServiceUpdate) SetUpdatedAt(t time.Time) *MissionExtraServiceUpdate {
	mesu.mutation.SetUpdatedAt(t)
	return mesu
}

// SetDeletedAt sets the "deleted_at" field.
func (mesu *MissionExtraServiceUpdate) SetDeletedAt(t time.Time) *MissionExtraServiceUpdate {
	mesu.mutation.SetDeletedAt(t)
	return mesu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mesu *MissionExtraServiceUpdate) SetNillableDeletedAt(t *time.Time) *MissionExtraServiceUpdate {
	if t != nil {
		mesu.SetDeletedAt(*t)
	}
	return mesu
}

// SetMissionID sets the "mission_id" field.
func (mesu *MissionExtraServiceUpdate) SetMissionID(i int64) *MissionExtraServiceUpdate {
	mesu.mutation.SetMissionID(i)
	return mesu
}

// SetNillableMissionID sets the "mission_id" field if the given value is not nil.
func (mesu *MissionExtraServiceUpdate) SetNillableMissionID(i *int64) *MissionExtraServiceUpdate {
	if i != nil {
		mesu.SetMissionID(*i)
	}
	return mesu
}

// SetExtraServiceID sets the "extra_service_id" field.
func (mesu *MissionExtraServiceUpdate) SetExtraServiceID(i int64) *MissionExtraServiceUpdate {
	mesu.mutation.SetExtraServiceID(i)
	return mesu
}

// SetNillableExtraServiceID sets the "extra_service_id" field if the given value is not nil.
func (mesu *MissionExtraServiceUpdate) SetNillableExtraServiceID(i *int64) *MissionExtraServiceUpdate {
	if i != nil {
		mesu.SetExtraServiceID(*i)
	}
	return mesu
}

// SetMission sets the "mission" edge to the Mission entity.
func (mesu *MissionExtraServiceUpdate) SetMission(m *Mission) *MissionExtraServiceUpdate {
	return mesu.SetMissionID(m.ID)
}

// SetExtraService sets the "extra_service" edge to the ExtraService entity.
func (mesu *MissionExtraServiceUpdate) SetExtraService(e *ExtraService) *MissionExtraServiceUpdate {
	return mesu.SetExtraServiceID(e.ID)
}

// Mutation returns the MissionExtraServiceMutation object of the builder.
func (mesu *MissionExtraServiceUpdate) Mutation() *MissionExtraServiceMutation {
	return mesu.mutation
}

// ClearMission clears the "mission" edge to the Mission entity.
func (mesu *MissionExtraServiceUpdate) ClearMission() *MissionExtraServiceUpdate {
	mesu.mutation.ClearMission()
	return mesu
}

// ClearExtraService clears the "extra_service" edge to the ExtraService entity.
func (mesu *MissionExtraServiceUpdate) ClearExtraService() *MissionExtraServiceUpdate {
	mesu.mutation.ClearExtraService()
	return mesu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mesu *MissionExtraServiceUpdate) Save(ctx context.Context) (int, error) {
	mesu.defaults()
	return withHooks(ctx, mesu.sqlSave, mesu.mutation, mesu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mesu *MissionExtraServiceUpdate) SaveX(ctx context.Context) int {
	affected, err := mesu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mesu *MissionExtraServiceUpdate) Exec(ctx context.Context) error {
	_, err := mesu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mesu *MissionExtraServiceUpdate) ExecX(ctx context.Context) {
	if err := mesu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mesu *MissionExtraServiceUpdate) defaults() {
	if _, ok := mesu.mutation.UpdatedAt(); !ok {
		v := missionextraservice.UpdateDefaultUpdatedAt()
		mesu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mesu *MissionExtraServiceUpdate) check() error {
	if _, ok := mesu.mutation.MissionID(); mesu.mutation.MissionCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionExtraService.mission"`)
	}
	if _, ok := mesu.mutation.ExtraServiceID(); mesu.mutation.ExtraServiceCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionExtraService.extra_service"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mesu *MissionExtraServiceUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MissionExtraServiceUpdate {
	mesu.modifiers = append(mesu.modifiers, modifiers...)
	return mesu
}

func (mesu *MissionExtraServiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mesu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(missionextraservice.Table, missionextraservice.Columns, sqlgraph.NewFieldSpec(missionextraservice.FieldID, field.TypeInt64))
	if ps := mesu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mesu.mutation.CreatedBy(); ok {
		_spec.SetField(missionextraservice.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mesu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(missionextraservice.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mesu.mutation.UpdatedBy(); ok {
		_spec.SetField(missionextraservice.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mesu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(missionextraservice.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mesu.mutation.UpdatedAt(); ok {
		_spec.SetField(missionextraservice.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mesu.mutation.DeletedAt(); ok {
		_spec.SetField(missionextraservice.FieldDeletedAt, field.TypeTime, value)
	}
	if mesu.mutation.MissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionextraservice.MissionTable,
			Columns: []string{missionextraservice.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mesu.mutation.MissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionextraservice.MissionTable,
			Columns: []string{missionextraservice.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mesu.mutation.ExtraServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionextraservice.ExtraServiceTable,
			Columns: []string{missionextraservice.ExtraServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extraservice.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mesu.mutation.ExtraServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionextraservice.ExtraServiceTable,
			Columns: []string{missionextraservice.ExtraServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extraservice.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(mesu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mesu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{missionextraservice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mesu.mutation.done = true
	return n, nil
}

// MissionExtraServiceUpdateOne is the builder for updating a single MissionExtraService entity.
type MissionExtraServiceUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MissionExtraServiceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedBy sets the "created_by" field.
func (mesuo *MissionExtraServiceUpdateOne) SetCreatedBy(i int64) *MissionExtraServiceUpdateOne {
	mesuo.mutation.ResetCreatedBy()
	mesuo.mutation.SetCreatedBy(i)
	return mesuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mesuo *MissionExtraServiceUpdateOne) SetNillableCreatedBy(i *int64) *MissionExtraServiceUpdateOne {
	if i != nil {
		mesuo.SetCreatedBy(*i)
	}
	return mesuo
}

// AddCreatedBy adds i to the "created_by" field.
func (mesuo *MissionExtraServiceUpdateOne) AddCreatedBy(i int64) *MissionExtraServiceUpdateOne {
	mesuo.mutation.AddCreatedBy(i)
	return mesuo
}

// SetUpdatedBy sets the "updated_by" field.
func (mesuo *MissionExtraServiceUpdateOne) SetUpdatedBy(i int64) *MissionExtraServiceUpdateOne {
	mesuo.mutation.ResetUpdatedBy()
	mesuo.mutation.SetUpdatedBy(i)
	return mesuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mesuo *MissionExtraServiceUpdateOne) SetNillableUpdatedBy(i *int64) *MissionExtraServiceUpdateOne {
	if i != nil {
		mesuo.SetUpdatedBy(*i)
	}
	return mesuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (mesuo *MissionExtraServiceUpdateOne) AddUpdatedBy(i int64) *MissionExtraServiceUpdateOne {
	mesuo.mutation.AddUpdatedBy(i)
	return mesuo
}

// SetUpdatedAt sets the "updated_at" field.
func (mesuo *MissionExtraServiceUpdateOne) SetUpdatedAt(t time.Time) *MissionExtraServiceUpdateOne {
	mesuo.mutation.SetUpdatedAt(t)
	return mesuo
}

// SetDeletedAt sets the "deleted_at" field.
func (mesuo *MissionExtraServiceUpdateOne) SetDeletedAt(t time.Time) *MissionExtraServiceUpdateOne {
	mesuo.mutation.SetDeletedAt(t)
	return mesuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mesuo *MissionExtraServiceUpdateOne) SetNillableDeletedAt(t *time.Time) *MissionExtraServiceUpdateOne {
	if t != nil {
		mesuo.SetDeletedAt(*t)
	}
	return mesuo
}

// SetMissionID sets the "mission_id" field.
func (mesuo *MissionExtraServiceUpdateOne) SetMissionID(i int64) *MissionExtraServiceUpdateOne {
	mesuo.mutation.SetMissionID(i)
	return mesuo
}

// SetNillableMissionID sets the "mission_id" field if the given value is not nil.
func (mesuo *MissionExtraServiceUpdateOne) SetNillableMissionID(i *int64) *MissionExtraServiceUpdateOne {
	if i != nil {
		mesuo.SetMissionID(*i)
	}
	return mesuo
}

// SetExtraServiceID sets the "extra_service_id" field.
func (mesuo *MissionExtraServiceUpdateOne) SetExtraServiceID(i int64) *MissionExtraServiceUpdateOne {
	mesuo.mutation.SetExtraServiceID(i)
	return mesuo
}

// SetNillableExtraServiceID sets the "extra_service_id" field if the given value is not nil.
func (mesuo *MissionExtraServiceUpdateOne) SetNillableExtraServiceID(i *int64) *MissionExtraServiceUpdateOne {
	if i != nil {
		mesuo.SetExtraServiceID(*i)
	}
	return mesuo
}

// SetMission sets the "mission" edge to the Mission entity.
func (mesuo *MissionExtraServiceUpdateOne) SetMission(m *Mission) *MissionExtraServiceUpdateOne {
	return mesuo.SetMissionID(m.ID)
}

// SetExtraService sets the "extra_service" edge to the ExtraService entity.
func (mesuo *MissionExtraServiceUpdateOne) SetExtraService(e *ExtraService) *MissionExtraServiceUpdateOne {
	return mesuo.SetExtraServiceID(e.ID)
}

// Mutation returns the MissionExtraServiceMutation object of the builder.
func (mesuo *MissionExtraServiceUpdateOne) Mutation() *MissionExtraServiceMutation {
	return mesuo.mutation
}

// ClearMission clears the "mission" edge to the Mission entity.
func (mesuo *MissionExtraServiceUpdateOne) ClearMission() *MissionExtraServiceUpdateOne {
	mesuo.mutation.ClearMission()
	return mesuo
}

// ClearExtraService clears the "extra_service" edge to the ExtraService entity.
func (mesuo *MissionExtraServiceUpdateOne) ClearExtraService() *MissionExtraServiceUpdateOne {
	mesuo.mutation.ClearExtraService()
	return mesuo
}

// Where appends a list predicates to the MissionExtraServiceUpdate builder.
func (mesuo *MissionExtraServiceUpdateOne) Where(ps ...predicate.MissionExtraService) *MissionExtraServiceUpdateOne {
	mesuo.mutation.Where(ps...)
	return mesuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mesuo *MissionExtraServiceUpdateOne) Select(field string, fields ...string) *MissionExtraServiceUpdateOne {
	mesuo.fields = append([]string{field}, fields...)
	return mesuo
}

// Save executes the query and returns the updated MissionExtraService entity.
func (mesuo *MissionExtraServiceUpdateOne) Save(ctx context.Context) (*MissionExtraService, error) {
	mesuo.defaults()
	return withHooks(ctx, mesuo.sqlSave, mesuo.mutation, mesuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mesuo *MissionExtraServiceUpdateOne) SaveX(ctx context.Context) *MissionExtraService {
	node, err := mesuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mesuo *MissionExtraServiceUpdateOne) Exec(ctx context.Context) error {
	_, err := mesuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mesuo *MissionExtraServiceUpdateOne) ExecX(ctx context.Context) {
	if err := mesuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mesuo *MissionExtraServiceUpdateOne) defaults() {
	if _, ok := mesuo.mutation.UpdatedAt(); !ok {
		v := missionextraservice.UpdateDefaultUpdatedAt()
		mesuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mesuo *MissionExtraServiceUpdateOne) check() error {
	if _, ok := mesuo.mutation.MissionID(); mesuo.mutation.MissionCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionExtraService.mission"`)
	}
	if _, ok := mesuo.mutation.ExtraServiceID(); mesuo.mutation.ExtraServiceCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionExtraService.extra_service"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mesuo *MissionExtraServiceUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MissionExtraServiceUpdateOne {
	mesuo.modifiers = append(mesuo.modifiers, modifiers...)
	return mesuo
}

func (mesuo *MissionExtraServiceUpdateOne) sqlSave(ctx context.Context) (_node *MissionExtraService, err error) {
	if err := mesuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(missionextraservice.Table, missionextraservice.Columns, sqlgraph.NewFieldSpec(missionextraservice.FieldID, field.TypeInt64))
	id, ok := mesuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "MissionExtraService.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mesuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, missionextraservice.FieldID)
		for _, f := range fields {
			if !missionextraservice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != missionextraservice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mesuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mesuo.mutation.CreatedBy(); ok {
		_spec.SetField(missionextraservice.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mesuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(missionextraservice.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mesuo.mutation.UpdatedBy(); ok {
		_spec.SetField(missionextraservice.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mesuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(missionextraservice.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mesuo.mutation.UpdatedAt(); ok {
		_spec.SetField(missionextraservice.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mesuo.mutation.DeletedAt(); ok {
		_spec.SetField(missionextraservice.FieldDeletedAt, field.TypeTime, value)
	}
	if mesuo.mutation.MissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionextraservice.MissionTable,
			Columns: []string{missionextraservice.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mesuo.mutation.MissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionextraservice.MissionTable,
			Columns: []string{missionextraservice.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mesuo.mutation.ExtraServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionextraservice.ExtraServiceTable,
			Columns: []string{missionextraservice.ExtraServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extraservice.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mesuo.mutation.ExtraServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionextraservice.ExtraServiceTable,
			Columns: []string{missionextraservice.ExtraServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extraservice.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(mesuo.modifiers...)
	_node = &MissionExtraService{config: mesuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mesuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{missionextraservice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mesuo.mutation.done = true
	return _node, nil
}
