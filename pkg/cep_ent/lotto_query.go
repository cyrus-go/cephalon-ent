// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lotto"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottogetcountrecord"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottoprize"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottorecord"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottousercount"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// LottoQuery is the builder for querying Lotto entities.
type LottoQuery struct {
	config
	ctx                      *QueryContext
	order                    []lotto.OrderOption
	inters                   []Interceptor
	predicates               []predicate.Lotto
	withLottoPrizes          *LottoPrizeQuery
	withLottoRecords         *LottoRecordQuery
	withLottoUserCounts      *LottoUserCountQuery
	withLottoGetCountRecords *LottoGetCountRecordQuery
	modifiers                []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the LottoQuery builder.
func (lq *LottoQuery) Where(ps ...predicate.Lotto) *LottoQuery {
	lq.predicates = append(lq.predicates, ps...)
	return lq
}

// Limit the number of records to be returned by this query.
func (lq *LottoQuery) Limit(limit int) *LottoQuery {
	lq.ctx.Limit = &limit
	return lq
}

// Offset to start from.
func (lq *LottoQuery) Offset(offset int) *LottoQuery {
	lq.ctx.Offset = &offset
	return lq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (lq *LottoQuery) Unique(unique bool) *LottoQuery {
	lq.ctx.Unique = &unique
	return lq
}

// Order specifies how the records should be ordered.
func (lq *LottoQuery) Order(o ...lotto.OrderOption) *LottoQuery {
	lq.order = append(lq.order, o...)
	return lq
}

// QueryLottoPrizes chains the current query on the "lotto_prizes" edge.
func (lq *LottoQuery) QueryLottoPrizes() *LottoPrizeQuery {
	query := (&LottoPrizeClient{config: lq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lotto.Table, lotto.FieldID, selector),
			sqlgraph.To(lottoprize.Table, lottoprize.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, lotto.LottoPrizesTable, lotto.LottoPrizesColumn),
		)
		fromU = sqlgraph.SetNeighbors(lq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLottoRecords chains the current query on the "lotto_records" edge.
func (lq *LottoQuery) QueryLottoRecords() *LottoRecordQuery {
	query := (&LottoRecordClient{config: lq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lotto.Table, lotto.FieldID, selector),
			sqlgraph.To(lottorecord.Table, lottorecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, lotto.LottoRecordsTable, lotto.LottoRecordsColumn),
		)
		fromU = sqlgraph.SetNeighbors(lq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLottoUserCounts chains the current query on the "lotto_user_counts" edge.
func (lq *LottoQuery) QueryLottoUserCounts() *LottoUserCountQuery {
	query := (&LottoUserCountClient{config: lq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lotto.Table, lotto.FieldID, selector),
			sqlgraph.To(lottousercount.Table, lottousercount.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, lotto.LottoUserCountsTable, lotto.LottoUserCountsColumn),
		)
		fromU = sqlgraph.SetNeighbors(lq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLottoGetCountRecords chains the current query on the "lotto_get_count_records" edge.
func (lq *LottoQuery) QueryLottoGetCountRecords() *LottoGetCountRecordQuery {
	query := (&LottoGetCountRecordClient{config: lq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lotto.Table, lotto.FieldID, selector),
			sqlgraph.To(lottogetcountrecord.Table, lottogetcountrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, lotto.LottoGetCountRecordsTable, lotto.LottoGetCountRecordsColumn),
		)
		fromU = sqlgraph.SetNeighbors(lq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Lotto entity from the query.
// Returns a *NotFoundError when no Lotto was found.
func (lq *LottoQuery) First(ctx context.Context) (*Lotto, error) {
	nodes, err := lq.Limit(1).All(setContextOp(ctx, lq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{lotto.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (lq *LottoQuery) FirstX(ctx context.Context) *Lotto {
	node, err := lq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Lotto ID from the query.
// Returns a *NotFoundError when no Lotto ID was found.
func (lq *LottoQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = lq.Limit(1).IDs(setContextOp(ctx, lq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{lotto.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (lq *LottoQuery) FirstIDX(ctx context.Context) int64 {
	id, err := lq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Lotto entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Lotto entity is found.
// Returns a *NotFoundError when no Lotto entities are found.
func (lq *LottoQuery) Only(ctx context.Context) (*Lotto, error) {
	nodes, err := lq.Limit(2).All(setContextOp(ctx, lq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{lotto.Label}
	default:
		return nil, &NotSingularError{lotto.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (lq *LottoQuery) OnlyX(ctx context.Context) *Lotto {
	node, err := lq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Lotto ID in the query.
// Returns a *NotSingularError when more than one Lotto ID is found.
// Returns a *NotFoundError when no entities are found.
func (lq *LottoQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = lq.Limit(2).IDs(setContextOp(ctx, lq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{lotto.Label}
	default:
		err = &NotSingularError{lotto.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (lq *LottoQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := lq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Lottos.
func (lq *LottoQuery) All(ctx context.Context) ([]*Lotto, error) {
	ctx = setContextOp(ctx, lq.ctx, "All")
	if err := lq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Lotto, *LottoQuery]()
	return withInterceptors[[]*Lotto](ctx, lq, qr, lq.inters)
}

// AllX is like All, but panics if an error occurs.
func (lq *LottoQuery) AllX(ctx context.Context) []*Lotto {
	nodes, err := lq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Lotto IDs.
func (lq *LottoQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if lq.ctx.Unique == nil && lq.path != nil {
		lq.Unique(true)
	}
	ctx = setContextOp(ctx, lq.ctx, "IDs")
	if err = lq.Select(lotto.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (lq *LottoQuery) IDsX(ctx context.Context) []int64 {
	ids, err := lq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (lq *LottoQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, lq.ctx, "Count")
	if err := lq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, lq, querierCount[*LottoQuery](), lq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (lq *LottoQuery) CountX(ctx context.Context) int {
	count, err := lq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (lq *LottoQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, lq.ctx, "Exist")
	switch _, err := lq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("cep_ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (lq *LottoQuery) ExistX(ctx context.Context) bool {
	exist, err := lq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the LottoQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (lq *LottoQuery) Clone() *LottoQuery {
	if lq == nil {
		return nil
	}
	return &LottoQuery{
		config:                   lq.config,
		ctx:                      lq.ctx.Clone(),
		order:                    append([]lotto.OrderOption{}, lq.order...),
		inters:                   append([]Interceptor{}, lq.inters...),
		predicates:               append([]predicate.Lotto{}, lq.predicates...),
		withLottoPrizes:          lq.withLottoPrizes.Clone(),
		withLottoRecords:         lq.withLottoRecords.Clone(),
		withLottoUserCounts:      lq.withLottoUserCounts.Clone(),
		withLottoGetCountRecords: lq.withLottoGetCountRecords.Clone(),
		// clone intermediate query.
		sql:  lq.sql.Clone(),
		path: lq.path,
	}
}

// WithLottoPrizes tells the query-builder to eager-load the nodes that are connected to
// the "lotto_prizes" edge. The optional arguments are used to configure the query builder of the edge.
func (lq *LottoQuery) WithLottoPrizes(opts ...func(*LottoPrizeQuery)) *LottoQuery {
	query := (&LottoPrizeClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lq.withLottoPrizes = query
	return lq
}

// WithLottoRecords tells the query-builder to eager-load the nodes that are connected to
// the "lotto_records" edge. The optional arguments are used to configure the query builder of the edge.
func (lq *LottoQuery) WithLottoRecords(opts ...func(*LottoRecordQuery)) *LottoQuery {
	query := (&LottoRecordClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lq.withLottoRecords = query
	return lq
}

// WithLottoUserCounts tells the query-builder to eager-load the nodes that are connected to
// the "lotto_user_counts" edge. The optional arguments are used to configure the query builder of the edge.
func (lq *LottoQuery) WithLottoUserCounts(opts ...func(*LottoUserCountQuery)) *LottoQuery {
	query := (&LottoUserCountClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lq.withLottoUserCounts = query
	return lq
}

// WithLottoGetCountRecords tells the query-builder to eager-load the nodes that are connected to
// the "lotto_get_count_records" edge. The optional arguments are used to configure the query builder of the edge.
func (lq *LottoQuery) WithLottoGetCountRecords(opts ...func(*LottoGetCountRecordQuery)) *LottoQuery {
	query := (&LottoGetCountRecordClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lq.withLottoGetCountRecords = query
	return lq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Lotto.Query().
//		GroupBy(lotto.FieldCreatedBy).
//		Aggregate(cep_ent.Count()).
//		Scan(ctx, &v)
func (lq *LottoQuery) GroupBy(field string, fields ...string) *LottoGroupBy {
	lq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &LottoGroupBy{build: lq}
	grbuild.flds = &lq.ctx.Fields
	grbuild.label = lotto.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by"`
//	}
//
//	client.Lotto.Query().
//		Select(lotto.FieldCreatedBy).
//		Scan(ctx, &v)
func (lq *LottoQuery) Select(fields ...string) *LottoSelect {
	lq.ctx.Fields = append(lq.ctx.Fields, fields...)
	sbuild := &LottoSelect{LottoQuery: lq}
	sbuild.label = lotto.Label
	sbuild.flds, sbuild.scan = &lq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a LottoSelect configured with the given aggregations.
func (lq *LottoQuery) Aggregate(fns ...AggregateFunc) *LottoSelect {
	return lq.Select().Aggregate(fns...)
}

func (lq *LottoQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range lq.inters {
		if inter == nil {
			return fmt.Errorf("cep_ent: uninitialized interceptor (forgotten import cep_ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, lq); err != nil {
				return err
			}
		}
	}
	for _, f := range lq.ctx.Fields {
		if !lotto.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
		}
	}
	if lq.path != nil {
		prev, err := lq.path(ctx)
		if err != nil {
			return err
		}
		lq.sql = prev
	}
	return nil
}

func (lq *LottoQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Lotto, error) {
	var (
		nodes       = []*Lotto{}
		_spec       = lq.querySpec()
		loadedTypes = [4]bool{
			lq.withLottoPrizes != nil,
			lq.withLottoRecords != nil,
			lq.withLottoUserCounts != nil,
			lq.withLottoGetCountRecords != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Lotto).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Lotto{config: lq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(lq.modifiers) > 0 {
		_spec.Modifiers = lq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, lq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := lq.withLottoPrizes; query != nil {
		if err := lq.loadLottoPrizes(ctx, query, nodes,
			func(n *Lotto) { n.Edges.LottoPrizes = []*LottoPrize{} },
			func(n *Lotto, e *LottoPrize) { n.Edges.LottoPrizes = append(n.Edges.LottoPrizes, e) }); err != nil {
			return nil, err
		}
	}
	if query := lq.withLottoRecords; query != nil {
		if err := lq.loadLottoRecords(ctx, query, nodes,
			func(n *Lotto) { n.Edges.LottoRecords = []*LottoRecord{} },
			func(n *Lotto, e *LottoRecord) { n.Edges.LottoRecords = append(n.Edges.LottoRecords, e) }); err != nil {
			return nil, err
		}
	}
	if query := lq.withLottoUserCounts; query != nil {
		if err := lq.loadLottoUserCounts(ctx, query, nodes,
			func(n *Lotto) { n.Edges.LottoUserCounts = []*LottoUserCount{} },
			func(n *Lotto, e *LottoUserCount) { n.Edges.LottoUserCounts = append(n.Edges.LottoUserCounts, e) }); err != nil {
			return nil, err
		}
	}
	if query := lq.withLottoGetCountRecords; query != nil {
		if err := lq.loadLottoGetCountRecords(ctx, query, nodes,
			func(n *Lotto) { n.Edges.LottoGetCountRecords = []*LottoGetCountRecord{} },
			func(n *Lotto, e *LottoGetCountRecord) {
				n.Edges.LottoGetCountRecords = append(n.Edges.LottoGetCountRecords, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (lq *LottoQuery) loadLottoPrizes(ctx context.Context, query *LottoPrizeQuery, nodes []*Lotto, init func(*Lotto), assign func(*Lotto, *LottoPrize)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Lotto)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(lottoprize.FieldLottoID)
	}
	query.Where(predicate.LottoPrize(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(lotto.LottoPrizesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.LottoID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "lotto_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (lq *LottoQuery) loadLottoRecords(ctx context.Context, query *LottoRecordQuery, nodes []*Lotto, init func(*Lotto), assign func(*Lotto, *LottoRecord)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Lotto)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(lottorecord.FieldLottoID)
	}
	query.Where(predicate.LottoRecord(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(lotto.LottoRecordsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.LottoID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "lotto_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (lq *LottoQuery) loadLottoUserCounts(ctx context.Context, query *LottoUserCountQuery, nodes []*Lotto, init func(*Lotto), assign func(*Lotto, *LottoUserCount)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Lotto)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(lottousercount.FieldLottoID)
	}
	query.Where(predicate.LottoUserCount(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(lotto.LottoUserCountsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.LottoID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "lotto_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (lq *LottoQuery) loadLottoGetCountRecords(ctx context.Context, query *LottoGetCountRecordQuery, nodes []*Lotto, init func(*Lotto), assign func(*Lotto, *LottoGetCountRecord)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Lotto)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(lottogetcountrecord.FieldLottoID)
	}
	query.Where(predicate.LottoGetCountRecord(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(lotto.LottoGetCountRecordsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.LottoID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "lotto_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (lq *LottoQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := lq.querySpec()
	if len(lq.modifiers) > 0 {
		_spec.Modifiers = lq.modifiers
	}
	_spec.Node.Columns = lq.ctx.Fields
	if len(lq.ctx.Fields) > 0 {
		_spec.Unique = lq.ctx.Unique != nil && *lq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, lq.driver, _spec)
}

func (lq *LottoQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(lotto.Table, lotto.Columns, sqlgraph.NewFieldSpec(lotto.FieldID, field.TypeInt64))
	_spec.From = lq.sql
	if unique := lq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if lq.path != nil {
		_spec.Unique = true
	}
	if fields := lq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lotto.FieldID)
		for i := range fields {
			if fields[i] != lotto.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := lq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := lq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := lq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := lq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (lq *LottoQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(lq.driver.Dialect())
	t1 := builder.Table(lotto.Table)
	columns := lq.ctx.Fields
	if len(columns) == 0 {
		columns = lotto.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if lq.sql != nil {
		selector = lq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if lq.ctx.Unique != nil && *lq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range lq.modifiers {
		m(selector)
	}
	for _, p := range lq.predicates {
		p(selector)
	}
	for _, p := range lq.order {
		p(selector)
	}
	if offset := lq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := lq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (lq *LottoQuery) Modify(modifiers ...func(s *sql.Selector)) *LottoSelect {
	lq.modifiers = append(lq.modifiers, modifiers...)
	return lq.Select()
}

// LottoGroupBy is the group-by builder for Lotto entities.
type LottoGroupBy struct {
	selector
	build *LottoQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (lgb *LottoGroupBy) Aggregate(fns ...AggregateFunc) *LottoGroupBy {
	lgb.fns = append(lgb.fns, fns...)
	return lgb
}

// Scan applies the selector query and scans the result into the given value.
func (lgb *LottoGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lgb.build.ctx, "GroupBy")
	if err := lgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LottoQuery, *LottoGroupBy](ctx, lgb.build, lgb, lgb.build.inters, v)
}

func (lgb *LottoGroupBy) sqlScan(ctx context.Context, root *LottoQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(lgb.fns))
	for _, fn := range lgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*lgb.flds)+len(lgb.fns))
		for _, f := range *lgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*lgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// LottoSelect is the builder for selecting fields of Lotto entities.
type LottoSelect struct {
	*LottoQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ls *LottoSelect) Aggregate(fns ...AggregateFunc) *LottoSelect {
	ls.fns = append(ls.fns, fns...)
	return ls
}

// Scan applies the selector query and scans the result into the given value.
func (ls *LottoSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ls.ctx, "Select")
	if err := ls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LottoQuery, *LottoSelect](ctx, ls.LottoQuery, ls, ls.inters, v)
}

func (ls *LottoSelect) sqlScan(ctx context.Context, root *LottoQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ls.fns))
	for _, fn := range ls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ls *LottoSelect) Modify(modifiers ...func(s *sql.Selector)) *LottoSelect {
	ls.modifiers = append(ls.modifiers, modifiers...)
	return ls
}
