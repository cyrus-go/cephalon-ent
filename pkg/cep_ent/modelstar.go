// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/model"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/modelstar"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// ModelStar is the model entity for the ModelStar schema.
type ModelStar struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建者 ID
	CreatedBy int64 `json:"created_by,string"`
	// 更新者 ID
	UpdatedBy int64 `json:"updated_by,string"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// 用户ID
	UserID int64 `json:"user_id"`
	// 模型ID
	ModelID int64 `json:"model_id"`
	// 收藏状态
	Status enums.Model `json:"status"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ModelStarQuery when eager-loading is set.
	Edges        ModelStarEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ModelStarEdges holds the relations/edges for other nodes in the graph.
type ModelStarEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Model holds the value of the model edge.
	Model *Model `json:"model,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ModelStarEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ModelOrErr returns the Model value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ModelStarEdges) ModelOrErr() (*Model, error) {
	if e.loadedTypes[1] {
		if e.Model == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: model.Label}
		}
		return e.Model, nil
	}
	return nil, &NotLoadedError{edge: "model"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ModelStar) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case modelstar.FieldID, modelstar.FieldCreatedBy, modelstar.FieldUpdatedBy, modelstar.FieldUserID, modelstar.FieldModelID:
			values[i] = new(sql.NullInt64)
		case modelstar.FieldStatus:
			values[i] = new(sql.NullString)
		case modelstar.FieldCreatedAt, modelstar.FieldUpdatedAt, modelstar.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ModelStar fields.
func (ms *ModelStar) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case modelstar.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ms.ID = int64(value.Int64)
		case modelstar.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ms.CreatedBy = value.Int64
			}
		case modelstar.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ms.UpdatedBy = value.Int64
			}
		case modelstar.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ms.CreatedAt = value.Time
			}
		case modelstar.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ms.UpdatedAt = value.Time
			}
		case modelstar.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ms.DeletedAt = value.Time
			}
		case modelstar.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ms.UserID = value.Int64
			}
		case modelstar.FieldModelID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field model_id", values[i])
			} else if value.Valid {
				ms.ModelID = value.Int64
			}
		case modelstar.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ms.Status = enums.Model(value.String)
			}
		default:
			ms.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ModelStar.
// This includes values selected through modifiers, order, etc.
func (ms *ModelStar) Value(name string) (ent.Value, error) {
	return ms.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the ModelStar entity.
func (ms *ModelStar) QueryUser() *UserQuery {
	return NewModelStarClient(ms.config).QueryUser(ms)
}

// QueryModel queries the "model" edge of the ModelStar entity.
func (ms *ModelStar) QueryModel() *ModelQuery {
	return NewModelStarClient(ms.config).QueryModel(ms)
}

// Update returns a builder for updating this ModelStar.
// Note that you need to call ModelStar.Unwrap() before calling this method if this ModelStar
// was returned from a transaction, and the transaction was committed or rolled back.
func (ms *ModelStar) Update() *ModelStarUpdateOne {
	return NewModelStarClient(ms.config).UpdateOne(ms)
}

// Unwrap unwraps the ModelStar entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ms *ModelStar) Unwrap() *ModelStar {
	_tx, ok := ms.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: ModelStar is not a transactional entity")
	}
	ms.config.driver = _tx.drv
	return ms
}

// String implements the fmt.Stringer.
func (ms *ModelStar) String() string {
	var builder strings.Builder
	builder.WriteString("ModelStar(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ms.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", ms.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", ms.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ms.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ms.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(ms.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ms.UserID))
	builder.WriteString(", ")
	builder.WriteString("model_id=")
	builder.WriteString(fmt.Sprintf("%v", ms.ModelID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ms.Status))
	builder.WriteByte(')')
	return builder.String()
}

// ModelStars is a parsable slice of ModelStar.
type ModelStars []*ModelStar
