// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottochancerule"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// LottoChanceRuleDelete is the builder for deleting a LottoChanceRule entity.
type LottoChanceRuleDelete struct {
	config
	hooks    []Hook
	mutation *LottoChanceRuleMutation
}

// Where appends a list predicates to the LottoChanceRuleDelete builder.
func (lcrd *LottoChanceRuleDelete) Where(ps ...predicate.LottoChanceRule) *LottoChanceRuleDelete {
	lcrd.mutation.Where(ps...)
	return lcrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (lcrd *LottoChanceRuleDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, lcrd.sqlExec, lcrd.mutation, lcrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (lcrd *LottoChanceRuleDelete) ExecX(ctx context.Context) int {
	n, err := lcrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (lcrd *LottoChanceRuleDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(lottochancerule.Table, sqlgraph.NewFieldSpec(lottochancerule.FieldID, field.TypeInt64))
	if ps := lcrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, lcrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	lcrd.mutation.done = true
	return affected, err
}

// LottoChanceRuleDeleteOne is the builder for deleting a single LottoChanceRule entity.
type LottoChanceRuleDeleteOne struct {
	lcrd *LottoChanceRuleDelete
}

// Where appends a list predicates to the LottoChanceRuleDelete builder.
func (lcrdo *LottoChanceRuleDeleteOne) Where(ps ...predicate.LottoChanceRule) *LottoChanceRuleDeleteOne {
	lcrdo.lcrd.mutation.Where(ps...)
	return lcrdo
}

// Exec executes the deletion query.
func (lcrdo *LottoChanceRuleDeleteOne) Exec(ctx context.Context) error {
	n, err := lcrdo.lcrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{lottochancerule.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (lcrdo *LottoChanceRuleDeleteOne) ExecX(ctx context.Context) {
	if err := lcrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
