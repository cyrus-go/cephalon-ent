// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/profitsetting"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
)

// ProfitSettingUpdate is the builder for updating ProfitSetting entities.
type ProfitSettingUpdate struct {
	config
	hooks    []Hook
	mutation *ProfitSettingMutation
}

// Where appends a list predicates to the ProfitSettingUpdate builder.
func (psu *ProfitSettingUpdate) Where(ps ...predicate.ProfitSetting) *ProfitSettingUpdate {
	psu.mutation.Where(ps...)
	return psu
}

// SetCreatedBy sets the "created_by" field.
func (psu *ProfitSettingUpdate) SetCreatedBy(i int64) *ProfitSettingUpdate {
	psu.mutation.ResetCreatedBy()
	psu.mutation.SetCreatedBy(i)
	return psu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (psu *ProfitSettingUpdate) SetNillableCreatedBy(i *int64) *ProfitSettingUpdate {
	if i != nil {
		psu.SetCreatedBy(*i)
	}
	return psu
}

// AddCreatedBy adds i to the "created_by" field.
func (psu *ProfitSettingUpdate) AddCreatedBy(i int64) *ProfitSettingUpdate {
	psu.mutation.AddCreatedBy(i)
	return psu
}

// SetUpdatedBy sets the "updated_by" field.
func (psu *ProfitSettingUpdate) SetUpdatedBy(i int64) *ProfitSettingUpdate {
	psu.mutation.ResetUpdatedBy()
	psu.mutation.SetUpdatedBy(i)
	return psu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (psu *ProfitSettingUpdate) SetNillableUpdatedBy(i *int64) *ProfitSettingUpdate {
	if i != nil {
		psu.SetUpdatedBy(*i)
	}
	return psu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (psu *ProfitSettingUpdate) AddUpdatedBy(i int64) *ProfitSettingUpdate {
	psu.mutation.AddUpdatedBy(i)
	return psu
}

// SetUpdatedAt sets the "updated_at" field.
func (psu *ProfitSettingUpdate) SetUpdatedAt(t time.Time) *ProfitSettingUpdate {
	psu.mutation.SetUpdatedAt(t)
	return psu
}

// SetDeletedAt sets the "deleted_at" field.
func (psu *ProfitSettingUpdate) SetDeletedAt(t time.Time) *ProfitSettingUpdate {
	psu.mutation.SetDeletedAt(t)
	return psu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (psu *ProfitSettingUpdate) SetNillableDeletedAt(t *time.Time) *ProfitSettingUpdate {
	if t != nil {
		psu.SetDeletedAt(*t)
	}
	return psu
}

// SetUserID sets the "user_id" field.
func (psu *ProfitSettingUpdate) SetUserID(i int64) *ProfitSettingUpdate {
	psu.mutation.SetUserID(i)
	return psu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (psu *ProfitSettingUpdate) SetNillableUserID(i *int64) *ProfitSettingUpdate {
	if i != nil {
		psu.SetUserID(*i)
	}
	return psu
}

// SetRatio sets the "ratio" field.
func (psu *ProfitSettingUpdate) SetRatio(i int64) *ProfitSettingUpdate {
	psu.mutation.ResetRatio()
	psu.mutation.SetRatio(i)
	return psu
}

// SetNillableRatio sets the "ratio" field if the given value is not nil.
func (psu *ProfitSettingUpdate) SetNillableRatio(i *int64) *ProfitSettingUpdate {
	if i != nil {
		psu.SetRatio(*i)
	}
	return psu
}

// AddRatio adds i to the "ratio" field.
func (psu *ProfitSettingUpdate) AddRatio(i int64) *ProfitSettingUpdate {
	psu.mutation.AddRatio(i)
	return psu
}

// SetUser sets the "user" edge to the User entity.
func (psu *ProfitSettingUpdate) SetUser(u *User) *ProfitSettingUpdate {
	return psu.SetUserID(u.ID)
}

// Mutation returns the ProfitSettingMutation object of the builder.
func (psu *ProfitSettingUpdate) Mutation() *ProfitSettingMutation {
	return psu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (psu *ProfitSettingUpdate) ClearUser() *ProfitSettingUpdate {
	psu.mutation.ClearUser()
	return psu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psu *ProfitSettingUpdate) Save(ctx context.Context) (int, error) {
	psu.defaults()
	return withHooks(ctx, psu.sqlSave, psu.mutation, psu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psu *ProfitSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *ProfitSettingUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *ProfitSettingUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psu *ProfitSettingUpdate) defaults() {
	if _, ok := psu.mutation.UpdatedAt(); !ok {
		v := profitsetting.UpdateDefaultUpdatedAt()
		psu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psu *ProfitSettingUpdate) check() error {
	if _, ok := psu.mutation.UserID(); psu.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "ProfitSetting.user"`)
	}
	return nil
}

func (psu *ProfitSettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := psu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(profitsetting.Table, profitsetting.Columns, sqlgraph.NewFieldSpec(profitsetting.FieldID, field.TypeInt64))
	if ps := psu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.CreatedBy(); ok {
		_spec.SetField(profitsetting.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := psu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(profitsetting.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := psu.mutation.UpdatedBy(); ok {
		_spec.SetField(profitsetting.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := psu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(profitsetting.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := psu.mutation.UpdatedAt(); ok {
		_spec.SetField(profitsetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := psu.mutation.DeletedAt(); ok {
		_spec.SetField(profitsetting.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := psu.mutation.Ratio(); ok {
		_spec.SetField(profitsetting.FieldRatio, field.TypeInt64, value)
	}
	if value, ok := psu.mutation.AddedRatio(); ok {
		_spec.AddField(profitsetting.FieldRatio, field.TypeInt64, value)
	}
	if psu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profitsetting.UserTable,
			Columns: []string{profitsetting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profitsetting.UserTable,
			Columns: []string{profitsetting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profitsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	psu.mutation.done = true
	return n, nil
}

// ProfitSettingUpdateOne is the builder for updating a single ProfitSetting entity.
type ProfitSettingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProfitSettingMutation
}

// SetCreatedBy sets the "created_by" field.
func (psuo *ProfitSettingUpdateOne) SetCreatedBy(i int64) *ProfitSettingUpdateOne {
	psuo.mutation.ResetCreatedBy()
	psuo.mutation.SetCreatedBy(i)
	return psuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (psuo *ProfitSettingUpdateOne) SetNillableCreatedBy(i *int64) *ProfitSettingUpdateOne {
	if i != nil {
		psuo.SetCreatedBy(*i)
	}
	return psuo
}

// AddCreatedBy adds i to the "created_by" field.
func (psuo *ProfitSettingUpdateOne) AddCreatedBy(i int64) *ProfitSettingUpdateOne {
	psuo.mutation.AddCreatedBy(i)
	return psuo
}

// SetUpdatedBy sets the "updated_by" field.
func (psuo *ProfitSettingUpdateOne) SetUpdatedBy(i int64) *ProfitSettingUpdateOne {
	psuo.mutation.ResetUpdatedBy()
	psuo.mutation.SetUpdatedBy(i)
	return psuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (psuo *ProfitSettingUpdateOne) SetNillableUpdatedBy(i *int64) *ProfitSettingUpdateOne {
	if i != nil {
		psuo.SetUpdatedBy(*i)
	}
	return psuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (psuo *ProfitSettingUpdateOne) AddUpdatedBy(i int64) *ProfitSettingUpdateOne {
	psuo.mutation.AddUpdatedBy(i)
	return psuo
}

// SetUpdatedAt sets the "updated_at" field.
func (psuo *ProfitSettingUpdateOne) SetUpdatedAt(t time.Time) *ProfitSettingUpdateOne {
	psuo.mutation.SetUpdatedAt(t)
	return psuo
}

// SetDeletedAt sets the "deleted_at" field.
func (psuo *ProfitSettingUpdateOne) SetDeletedAt(t time.Time) *ProfitSettingUpdateOne {
	psuo.mutation.SetDeletedAt(t)
	return psuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (psuo *ProfitSettingUpdateOne) SetNillableDeletedAt(t *time.Time) *ProfitSettingUpdateOne {
	if t != nil {
		psuo.SetDeletedAt(*t)
	}
	return psuo
}

// SetUserID sets the "user_id" field.
func (psuo *ProfitSettingUpdateOne) SetUserID(i int64) *ProfitSettingUpdateOne {
	psuo.mutation.SetUserID(i)
	return psuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (psuo *ProfitSettingUpdateOne) SetNillableUserID(i *int64) *ProfitSettingUpdateOne {
	if i != nil {
		psuo.SetUserID(*i)
	}
	return psuo
}

// SetRatio sets the "ratio" field.
func (psuo *ProfitSettingUpdateOne) SetRatio(i int64) *ProfitSettingUpdateOne {
	psuo.mutation.ResetRatio()
	psuo.mutation.SetRatio(i)
	return psuo
}

// SetNillableRatio sets the "ratio" field if the given value is not nil.
func (psuo *ProfitSettingUpdateOne) SetNillableRatio(i *int64) *ProfitSettingUpdateOne {
	if i != nil {
		psuo.SetRatio(*i)
	}
	return psuo
}

// AddRatio adds i to the "ratio" field.
func (psuo *ProfitSettingUpdateOne) AddRatio(i int64) *ProfitSettingUpdateOne {
	psuo.mutation.AddRatio(i)
	return psuo
}

// SetUser sets the "user" edge to the User entity.
func (psuo *ProfitSettingUpdateOne) SetUser(u *User) *ProfitSettingUpdateOne {
	return psuo.SetUserID(u.ID)
}

// Mutation returns the ProfitSettingMutation object of the builder.
func (psuo *ProfitSettingUpdateOne) Mutation() *ProfitSettingMutation {
	return psuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (psuo *ProfitSettingUpdateOne) ClearUser() *ProfitSettingUpdateOne {
	psuo.mutation.ClearUser()
	return psuo
}

// Where appends a list predicates to the ProfitSettingUpdate builder.
func (psuo *ProfitSettingUpdateOne) Where(ps ...predicate.ProfitSetting) *ProfitSettingUpdateOne {
	psuo.mutation.Where(ps...)
	return psuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psuo *ProfitSettingUpdateOne) Select(field string, fields ...string) *ProfitSettingUpdateOne {
	psuo.fields = append([]string{field}, fields...)
	return psuo
}

// Save executes the query and returns the updated ProfitSetting entity.
func (psuo *ProfitSettingUpdateOne) Save(ctx context.Context) (*ProfitSetting, error) {
	psuo.defaults()
	return withHooks(ctx, psuo.sqlSave, psuo.mutation, psuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *ProfitSettingUpdateOne) SaveX(ctx context.Context) *ProfitSetting {
	node, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psuo *ProfitSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *ProfitSettingUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psuo *ProfitSettingUpdateOne) defaults() {
	if _, ok := psuo.mutation.UpdatedAt(); !ok {
		v := profitsetting.UpdateDefaultUpdatedAt()
		psuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psuo *ProfitSettingUpdateOne) check() error {
	if _, ok := psuo.mutation.UserID(); psuo.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "ProfitSetting.user"`)
	}
	return nil
}

func (psuo *ProfitSettingUpdateOne) sqlSave(ctx context.Context) (_node *ProfitSetting, err error) {
	if err := psuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(profitsetting.Table, profitsetting.Columns, sqlgraph.NewFieldSpec(profitsetting.FieldID, field.TypeInt64))
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "ProfitSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, profitsetting.FieldID)
		for _, f := range fields {
			if !profitsetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != profitsetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psuo.mutation.CreatedBy(); ok {
		_spec.SetField(profitsetting.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := psuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(profitsetting.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := psuo.mutation.UpdatedBy(); ok {
		_spec.SetField(profitsetting.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := psuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(profitsetting.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := psuo.mutation.UpdatedAt(); ok {
		_spec.SetField(profitsetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := psuo.mutation.DeletedAt(); ok {
		_spec.SetField(profitsetting.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := psuo.mutation.Ratio(); ok {
		_spec.SetField(profitsetting.FieldRatio, field.TypeInt64, value)
	}
	if value, ok := psuo.mutation.AddedRatio(); ok {
		_spec.AddField(profitsetting.FieldRatio, field.TypeInt64, value)
	}
	if psuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profitsetting.UserTable,
			Columns: []string{profitsetting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profitsetting.UserTable,
			Columns: []string{profitsetting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProfitSetting{config: psuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profitsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	psuo.mutation.done = true
	return _node, nil
}
