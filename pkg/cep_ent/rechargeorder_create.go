// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/costbill"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/rechargeorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/vxsocial"
)

// RechargeOrderCreate is the builder for creating a RechargeOrder entity.
type RechargeOrderCreate struct {
	config
	mutation *RechargeOrderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (roc *RechargeOrderCreate) SetCreatedBy(i int64) *RechargeOrderCreate {
	roc.mutation.SetCreatedBy(i)
	return roc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (roc *RechargeOrderCreate) SetNillableCreatedBy(i *int64) *RechargeOrderCreate {
	if i != nil {
		roc.SetCreatedBy(*i)
	}
	return roc
}

// SetUpdatedBy sets the "updated_by" field.
func (roc *RechargeOrderCreate) SetUpdatedBy(i int64) *RechargeOrderCreate {
	roc.mutation.SetUpdatedBy(i)
	return roc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (roc *RechargeOrderCreate) SetNillableUpdatedBy(i *int64) *RechargeOrderCreate {
	if i != nil {
		roc.SetUpdatedBy(*i)
	}
	return roc
}

// SetCreatedAt sets the "created_at" field.
func (roc *RechargeOrderCreate) SetCreatedAt(t time.Time) *RechargeOrderCreate {
	roc.mutation.SetCreatedAt(t)
	return roc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (roc *RechargeOrderCreate) SetNillableCreatedAt(t *time.Time) *RechargeOrderCreate {
	if t != nil {
		roc.SetCreatedAt(*t)
	}
	return roc
}

// SetUpdatedAt sets the "updated_at" field.
func (roc *RechargeOrderCreate) SetUpdatedAt(t time.Time) *RechargeOrderCreate {
	roc.mutation.SetUpdatedAt(t)
	return roc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (roc *RechargeOrderCreate) SetNillableUpdatedAt(t *time.Time) *RechargeOrderCreate {
	if t != nil {
		roc.SetUpdatedAt(*t)
	}
	return roc
}

// SetDeletedAt sets the "deleted_at" field.
func (roc *RechargeOrderCreate) SetDeletedAt(t time.Time) *RechargeOrderCreate {
	roc.mutation.SetDeletedAt(t)
	return roc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (roc *RechargeOrderCreate) SetNillableDeletedAt(t *time.Time) *RechargeOrderCreate {
	if t != nil {
		roc.SetDeletedAt(*t)
	}
	return roc
}

// SetUserID sets the "user_id" field.
func (roc *RechargeOrderCreate) SetUserID(i int64) *RechargeOrderCreate {
	roc.mutation.SetUserID(i)
	return roc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (roc *RechargeOrderCreate) SetNillableUserID(i *int64) *RechargeOrderCreate {
	if i != nil {
		roc.SetUserID(*i)
	}
	return roc
}

// SetStatus sets the "status" field.
func (roc *RechargeOrderCreate) SetStatus(r rechargeorder.Status) *RechargeOrderCreate {
	roc.mutation.SetStatus(r)
	return roc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (roc *RechargeOrderCreate) SetNillableStatus(r *rechargeorder.Status) *RechargeOrderCreate {
	if r != nil {
		roc.SetStatus(*r)
	}
	return roc
}

// SetPureCep sets the "pure_cep" field.
func (roc *RechargeOrderCreate) SetPureCep(i int64) *RechargeOrderCreate {
	roc.mutation.SetPureCep(i)
	return roc
}

// SetNillablePureCep sets the "pure_cep" field if the given value is not nil.
func (roc *RechargeOrderCreate) SetNillablePureCep(i *int64) *RechargeOrderCreate {
	if i != nil {
		roc.SetPureCep(*i)
	}
	return roc
}

// SetGiftCep sets the "gift_cep" field.
func (roc *RechargeOrderCreate) SetGiftCep(i int64) *RechargeOrderCreate {
	roc.mutation.SetGiftCep(i)
	return roc
}

// SetNillableGiftCep sets the "gift_cep" field if the given value is not nil.
func (roc *RechargeOrderCreate) SetNillableGiftCep(i *int64) *RechargeOrderCreate {
	if i != nil {
		roc.SetGiftCep(*i)
	}
	return roc
}

// SetSocialID sets the "social_id" field.
func (roc *RechargeOrderCreate) SetSocialID(i int64) *RechargeOrderCreate {
	roc.mutation.SetSocialID(i)
	return roc
}

// SetNillableSocialID sets the "social_id" field if the given value is not nil.
func (roc *RechargeOrderCreate) SetNillableSocialID(i *int64) *RechargeOrderCreate {
	if i != nil {
		roc.SetSocialID(*i)
	}
	return roc
}

// SetType sets the "type" field.
func (roc *RechargeOrderCreate) SetType(r rechargeorder.Type) *RechargeOrderCreate {
	roc.mutation.SetType(r)
	return roc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (roc *RechargeOrderCreate) SetNillableType(r *rechargeorder.Type) *RechargeOrderCreate {
	if r != nil {
		roc.SetType(*r)
	}
	return roc
}

// SetSerialNumber sets the "serial_number" field.
func (roc *RechargeOrderCreate) SetSerialNumber(s string) *RechargeOrderCreate {
	roc.mutation.SetSerialNumber(s)
	return roc
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (roc *RechargeOrderCreate) SetNillableSerialNumber(s *string) *RechargeOrderCreate {
	if s != nil {
		roc.SetSerialNumber(*s)
	}
	return roc
}

// SetThirdAPIResp sets the "third_api_resp" field.
func (roc *RechargeOrderCreate) SetThirdAPIResp(s string) *RechargeOrderCreate {
	roc.mutation.SetThirdAPIResp(s)
	return roc
}

// SetNillableThirdAPIResp sets the "third_api_resp" field if the given value is not nil.
func (roc *RechargeOrderCreate) SetNillableThirdAPIResp(s *string) *RechargeOrderCreate {
	if s != nil {
		roc.SetThirdAPIResp(*s)
	}
	return roc
}

// SetFromUserID sets the "from_user_id" field.
func (roc *RechargeOrderCreate) SetFromUserID(i int64) *RechargeOrderCreate {
	roc.mutation.SetFromUserID(i)
	return roc
}

// SetNillableFromUserID sets the "from_user_id" field if the given value is not nil.
func (roc *RechargeOrderCreate) SetNillableFromUserID(i *int64) *RechargeOrderCreate {
	if i != nil {
		roc.SetFromUserID(*i)
	}
	return roc
}

// SetOutTransactionID sets the "out_transaction_id" field.
func (roc *RechargeOrderCreate) SetOutTransactionID(s string) *RechargeOrderCreate {
	roc.mutation.SetOutTransactionID(s)
	return roc
}

// SetNillableOutTransactionID sets the "out_transaction_id" field if the given value is not nil.
func (roc *RechargeOrderCreate) SetNillableOutTransactionID(s *string) *RechargeOrderCreate {
	if s != nil {
		roc.SetOutTransactionID(*s)
	}
	return roc
}

// SetID sets the "id" field.
func (roc *RechargeOrderCreate) SetID(i int64) *RechargeOrderCreate {
	roc.mutation.SetID(i)
	return roc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (roc *RechargeOrderCreate) SetNillableID(i *int64) *RechargeOrderCreate {
	if i != nil {
		roc.SetID(*i)
	}
	return roc
}

// SetUser sets the "user" edge to the User entity.
func (roc *RechargeOrderCreate) SetUser(u *User) *RechargeOrderCreate {
	return roc.SetUserID(u.ID)
}

// AddCostBillIDs adds the "cost_bills" edge to the CostBill entity by IDs.
func (roc *RechargeOrderCreate) AddCostBillIDs(ids ...int64) *RechargeOrderCreate {
	roc.mutation.AddCostBillIDs(ids...)
	return roc
}

// AddCostBills adds the "cost_bills" edges to the CostBill entity.
func (roc *RechargeOrderCreate) AddCostBills(c ...*CostBill) *RechargeOrderCreate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return roc.AddCostBillIDs(ids...)
}

// SetVxSocialID sets the "vx_social" edge to the VXSocial entity by ID.
func (roc *RechargeOrderCreate) SetVxSocialID(id int64) *RechargeOrderCreate {
	roc.mutation.SetVxSocialID(id)
	return roc
}

// SetNillableVxSocialID sets the "vx_social" edge to the VXSocial entity by ID if the given value is not nil.
func (roc *RechargeOrderCreate) SetNillableVxSocialID(id *int64) *RechargeOrderCreate {
	if id != nil {
		roc = roc.SetVxSocialID(*id)
	}
	return roc
}

// SetVxSocial sets the "vx_social" edge to the VXSocial entity.
func (roc *RechargeOrderCreate) SetVxSocial(v *VXSocial) *RechargeOrderCreate {
	return roc.SetVxSocialID(v.ID)
}

// Mutation returns the RechargeOrderMutation object of the builder.
func (roc *RechargeOrderCreate) Mutation() *RechargeOrderMutation {
	return roc.mutation
}

// Save creates the RechargeOrder in the database.
func (roc *RechargeOrderCreate) Save(ctx context.Context) (*RechargeOrder, error) {
	roc.defaults()
	return withHooks(ctx, roc.sqlSave, roc.mutation, roc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (roc *RechargeOrderCreate) SaveX(ctx context.Context) *RechargeOrder {
	v, err := roc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (roc *RechargeOrderCreate) Exec(ctx context.Context) error {
	_, err := roc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (roc *RechargeOrderCreate) ExecX(ctx context.Context) {
	if err := roc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (roc *RechargeOrderCreate) defaults() {
	if _, ok := roc.mutation.CreatedBy(); !ok {
		v := rechargeorder.DefaultCreatedBy
		roc.mutation.SetCreatedBy(v)
	}
	if _, ok := roc.mutation.UpdatedBy(); !ok {
		v := rechargeorder.DefaultUpdatedBy
		roc.mutation.SetUpdatedBy(v)
	}
	if _, ok := roc.mutation.CreatedAt(); !ok {
		v := rechargeorder.DefaultCreatedAt()
		roc.mutation.SetCreatedAt(v)
	}
	if _, ok := roc.mutation.UpdatedAt(); !ok {
		v := rechargeorder.DefaultUpdatedAt()
		roc.mutation.SetUpdatedAt(v)
	}
	if _, ok := roc.mutation.DeletedAt(); !ok {
		v := rechargeorder.DefaultDeletedAt
		roc.mutation.SetDeletedAt(v)
	}
	if _, ok := roc.mutation.UserID(); !ok {
		v := rechargeorder.DefaultUserID
		roc.mutation.SetUserID(v)
	}
	if _, ok := roc.mutation.Status(); !ok {
		v := rechargeorder.DefaultStatus
		roc.mutation.SetStatus(v)
	}
	if _, ok := roc.mutation.PureCep(); !ok {
		v := rechargeorder.DefaultPureCep
		roc.mutation.SetPureCep(v)
	}
	if _, ok := roc.mutation.GiftCep(); !ok {
		v := rechargeorder.DefaultGiftCep
		roc.mutation.SetGiftCep(v)
	}
	if _, ok := roc.mutation.SocialID(); !ok {
		v := rechargeorder.DefaultSocialID
		roc.mutation.SetSocialID(v)
	}
	if _, ok := roc.mutation.GetType(); !ok {
		v := rechargeorder.DefaultType
		roc.mutation.SetType(v)
	}
	if _, ok := roc.mutation.SerialNumber(); !ok {
		v := rechargeorder.DefaultSerialNumber
		roc.mutation.SetSerialNumber(v)
	}
	if _, ok := roc.mutation.ThirdAPIResp(); !ok {
		v := rechargeorder.DefaultThirdAPIResp
		roc.mutation.SetThirdAPIResp(v)
	}
	if _, ok := roc.mutation.FromUserID(); !ok {
		v := rechargeorder.DefaultFromUserID
		roc.mutation.SetFromUserID(v)
	}
	if _, ok := roc.mutation.OutTransactionID(); !ok {
		v := rechargeorder.DefaultOutTransactionID
		roc.mutation.SetOutTransactionID(v)
	}
	if _, ok := roc.mutation.ID(); !ok {
		v := rechargeorder.DefaultID()
		roc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (roc *RechargeOrderCreate) check() error {
	if _, ok := roc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "RechargeOrder.created_by"`)}
	}
	if _, ok := roc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "RechargeOrder.updated_by"`)}
	}
	if _, ok := roc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "RechargeOrder.created_at"`)}
	}
	if _, ok := roc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "RechargeOrder.updated_at"`)}
	}
	if _, ok := roc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "RechargeOrder.deleted_at"`)}
	}
	if _, ok := roc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "RechargeOrder.user_id"`)}
	}
	if _, ok := roc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`cep_ent: missing required field "RechargeOrder.status"`)}
	}
	if v, ok := roc.mutation.Status(); ok {
		if err := rechargeorder.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "RechargeOrder.status": %w`, err)}
		}
	}
	if _, ok := roc.mutation.PureCep(); !ok {
		return &ValidationError{Name: "pure_cep", err: errors.New(`cep_ent: missing required field "RechargeOrder.pure_cep"`)}
	}
	if _, ok := roc.mutation.GiftCep(); !ok {
		return &ValidationError{Name: "gift_cep", err: errors.New(`cep_ent: missing required field "RechargeOrder.gift_cep"`)}
	}
	if _, ok := roc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`cep_ent: missing required field "RechargeOrder.type"`)}
	}
	if v, ok := roc.mutation.GetType(); ok {
		if err := rechargeorder.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "RechargeOrder.type": %w`, err)}
		}
	}
	if _, ok := roc.mutation.SerialNumber(); !ok {
		return &ValidationError{Name: "serial_number", err: errors.New(`cep_ent: missing required field "RechargeOrder.serial_number"`)}
	}
	if _, ok := roc.mutation.ThirdAPIResp(); !ok {
		return &ValidationError{Name: "third_api_resp", err: errors.New(`cep_ent: missing required field "RechargeOrder.third_api_resp"`)}
	}
	if _, ok := roc.mutation.FromUserID(); !ok {
		return &ValidationError{Name: "from_user_id", err: errors.New(`cep_ent: missing required field "RechargeOrder.from_user_id"`)}
	}
	if _, ok := roc.mutation.OutTransactionID(); !ok {
		return &ValidationError{Name: "out_transaction_id", err: errors.New(`cep_ent: missing required field "RechargeOrder.out_transaction_id"`)}
	}
	if _, ok := roc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "RechargeOrder.user"`)}
	}
	return nil
}

func (roc *RechargeOrderCreate) sqlSave(ctx context.Context) (*RechargeOrder, error) {
	if err := roc.check(); err != nil {
		return nil, err
	}
	_node, _spec := roc.createSpec()
	if err := sqlgraph.CreateNode(ctx, roc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	roc.mutation.id = &_node.ID
	roc.mutation.done = true
	return _node, nil
}

func (roc *RechargeOrderCreate) createSpec() (*RechargeOrder, *sqlgraph.CreateSpec) {
	var (
		_node = &RechargeOrder{config: roc.config}
		_spec = sqlgraph.NewCreateSpec(rechargeorder.Table, sqlgraph.NewFieldSpec(rechargeorder.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = roc.conflict
	if id, ok := roc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := roc.mutation.CreatedBy(); ok {
		_spec.SetField(rechargeorder.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := roc.mutation.UpdatedBy(); ok {
		_spec.SetField(rechargeorder.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := roc.mutation.CreatedAt(); ok {
		_spec.SetField(rechargeorder.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := roc.mutation.UpdatedAt(); ok {
		_spec.SetField(rechargeorder.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := roc.mutation.DeletedAt(); ok {
		_spec.SetField(rechargeorder.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := roc.mutation.Status(); ok {
		_spec.SetField(rechargeorder.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := roc.mutation.PureCep(); ok {
		_spec.SetField(rechargeorder.FieldPureCep, field.TypeInt64, value)
		_node.PureCep = value
	}
	if value, ok := roc.mutation.GiftCep(); ok {
		_spec.SetField(rechargeorder.FieldGiftCep, field.TypeInt64, value)
		_node.GiftCep = value
	}
	if value, ok := roc.mutation.GetType(); ok {
		_spec.SetField(rechargeorder.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := roc.mutation.SerialNumber(); ok {
		_spec.SetField(rechargeorder.FieldSerialNumber, field.TypeString, value)
		_node.SerialNumber = value
	}
	if value, ok := roc.mutation.ThirdAPIResp(); ok {
		_spec.SetField(rechargeorder.FieldThirdAPIResp, field.TypeString, value)
		_node.ThirdAPIResp = value
	}
	if value, ok := roc.mutation.FromUserID(); ok {
		_spec.SetField(rechargeorder.FieldFromUserID, field.TypeInt64, value)
		_node.FromUserID = value
	}
	if value, ok := roc.mutation.OutTransactionID(); ok {
		_spec.SetField(rechargeorder.FieldOutTransactionID, field.TypeString, value)
		_node.OutTransactionID = value
	}
	if nodes := roc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rechargeorder.UserTable,
			Columns: []string{rechargeorder.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := roc.mutation.CostBillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rechargeorder.CostBillsTable,
			Columns: []string{rechargeorder.CostBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costbill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := roc.mutation.VxSocialIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rechargeorder.VxSocialTable,
			Columns: []string{rechargeorder.VxSocialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vxsocial.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SocialID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RechargeOrder.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RechargeOrderUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (roc *RechargeOrderCreate) OnConflict(opts ...sql.ConflictOption) *RechargeOrderUpsertOne {
	roc.conflict = opts
	return &RechargeOrderUpsertOne{
		create: roc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RechargeOrder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (roc *RechargeOrderCreate) OnConflictColumns(columns ...string) *RechargeOrderUpsertOne {
	roc.conflict = append(roc.conflict, sql.ConflictColumns(columns...))
	return &RechargeOrderUpsertOne{
		create: roc,
	}
}

type (
	// RechargeOrderUpsertOne is the builder for "upsert"-ing
	//  one RechargeOrder node.
	RechargeOrderUpsertOne struct {
		create *RechargeOrderCreate
	}

	// RechargeOrderUpsert is the "OnConflict" setter.
	RechargeOrderUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *RechargeOrderUpsert) SetCreatedBy(v int64) *RechargeOrderUpsert {
	u.Set(rechargeorder.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *RechargeOrderUpsert) UpdateCreatedBy() *RechargeOrderUpsert {
	u.SetExcluded(rechargeorder.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *RechargeOrderUpsert) AddCreatedBy(v int64) *RechargeOrderUpsert {
	u.Add(rechargeorder.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *RechargeOrderUpsert) SetUpdatedBy(v int64) *RechargeOrderUpsert {
	u.Set(rechargeorder.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *RechargeOrderUpsert) UpdateUpdatedBy() *RechargeOrderUpsert {
	u.SetExcluded(rechargeorder.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *RechargeOrderUpsert) AddUpdatedBy(v int64) *RechargeOrderUpsert {
	u.Add(rechargeorder.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RechargeOrderUpsert) SetUpdatedAt(v time.Time) *RechargeOrderUpsert {
	u.Set(rechargeorder.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RechargeOrderUpsert) UpdateUpdatedAt() *RechargeOrderUpsert {
	u.SetExcluded(rechargeorder.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RechargeOrderUpsert) SetDeletedAt(v time.Time) *RechargeOrderUpsert {
	u.Set(rechargeorder.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RechargeOrderUpsert) UpdateDeletedAt() *RechargeOrderUpsert {
	u.SetExcluded(rechargeorder.FieldDeletedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *RechargeOrderUpsert) SetUserID(v int64) *RechargeOrderUpsert {
	u.Set(rechargeorder.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *RechargeOrderUpsert) UpdateUserID() *RechargeOrderUpsert {
	u.SetExcluded(rechargeorder.FieldUserID)
	return u
}

// SetStatus sets the "status" field.
func (u *RechargeOrderUpsert) SetStatus(v rechargeorder.Status) *RechargeOrderUpsert {
	u.Set(rechargeorder.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *RechargeOrderUpsert) UpdateStatus() *RechargeOrderUpsert {
	u.SetExcluded(rechargeorder.FieldStatus)
	return u
}

// SetPureCep sets the "pure_cep" field.
func (u *RechargeOrderUpsert) SetPureCep(v int64) *RechargeOrderUpsert {
	u.Set(rechargeorder.FieldPureCep, v)
	return u
}

// UpdatePureCep sets the "pure_cep" field to the value that was provided on create.
func (u *RechargeOrderUpsert) UpdatePureCep() *RechargeOrderUpsert {
	u.SetExcluded(rechargeorder.FieldPureCep)
	return u
}

// AddPureCep adds v to the "pure_cep" field.
func (u *RechargeOrderUpsert) AddPureCep(v int64) *RechargeOrderUpsert {
	u.Add(rechargeorder.FieldPureCep, v)
	return u
}

// SetGiftCep sets the "gift_cep" field.
func (u *RechargeOrderUpsert) SetGiftCep(v int64) *RechargeOrderUpsert {
	u.Set(rechargeorder.FieldGiftCep, v)
	return u
}

// UpdateGiftCep sets the "gift_cep" field to the value that was provided on create.
func (u *RechargeOrderUpsert) UpdateGiftCep() *RechargeOrderUpsert {
	u.SetExcluded(rechargeorder.FieldGiftCep)
	return u
}

// AddGiftCep adds v to the "gift_cep" field.
func (u *RechargeOrderUpsert) AddGiftCep(v int64) *RechargeOrderUpsert {
	u.Add(rechargeorder.FieldGiftCep, v)
	return u
}

// SetSocialID sets the "social_id" field.
func (u *RechargeOrderUpsert) SetSocialID(v int64) *RechargeOrderUpsert {
	u.Set(rechargeorder.FieldSocialID, v)
	return u
}

// UpdateSocialID sets the "social_id" field to the value that was provided on create.
func (u *RechargeOrderUpsert) UpdateSocialID() *RechargeOrderUpsert {
	u.SetExcluded(rechargeorder.FieldSocialID)
	return u
}

// ClearSocialID clears the value of the "social_id" field.
func (u *RechargeOrderUpsert) ClearSocialID() *RechargeOrderUpsert {
	u.SetNull(rechargeorder.FieldSocialID)
	return u
}

// SetType sets the "type" field.
func (u *RechargeOrderUpsert) SetType(v rechargeorder.Type) *RechargeOrderUpsert {
	u.Set(rechargeorder.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *RechargeOrderUpsert) UpdateType() *RechargeOrderUpsert {
	u.SetExcluded(rechargeorder.FieldType)
	return u
}

// SetSerialNumber sets the "serial_number" field.
func (u *RechargeOrderUpsert) SetSerialNumber(v string) *RechargeOrderUpsert {
	u.Set(rechargeorder.FieldSerialNumber, v)
	return u
}

// UpdateSerialNumber sets the "serial_number" field to the value that was provided on create.
func (u *RechargeOrderUpsert) UpdateSerialNumber() *RechargeOrderUpsert {
	u.SetExcluded(rechargeorder.FieldSerialNumber)
	return u
}

// SetThirdAPIResp sets the "third_api_resp" field.
func (u *RechargeOrderUpsert) SetThirdAPIResp(v string) *RechargeOrderUpsert {
	u.Set(rechargeorder.FieldThirdAPIResp, v)
	return u
}

// UpdateThirdAPIResp sets the "third_api_resp" field to the value that was provided on create.
func (u *RechargeOrderUpsert) UpdateThirdAPIResp() *RechargeOrderUpsert {
	u.SetExcluded(rechargeorder.FieldThirdAPIResp)
	return u
}

// SetFromUserID sets the "from_user_id" field.
func (u *RechargeOrderUpsert) SetFromUserID(v int64) *RechargeOrderUpsert {
	u.Set(rechargeorder.FieldFromUserID, v)
	return u
}

// UpdateFromUserID sets the "from_user_id" field to the value that was provided on create.
func (u *RechargeOrderUpsert) UpdateFromUserID() *RechargeOrderUpsert {
	u.SetExcluded(rechargeorder.FieldFromUserID)
	return u
}

// AddFromUserID adds v to the "from_user_id" field.
func (u *RechargeOrderUpsert) AddFromUserID(v int64) *RechargeOrderUpsert {
	u.Add(rechargeorder.FieldFromUserID, v)
	return u
}

// SetOutTransactionID sets the "out_transaction_id" field.
func (u *RechargeOrderUpsert) SetOutTransactionID(v string) *RechargeOrderUpsert {
	u.Set(rechargeorder.FieldOutTransactionID, v)
	return u
}

// UpdateOutTransactionID sets the "out_transaction_id" field to the value that was provided on create.
func (u *RechargeOrderUpsert) UpdateOutTransactionID() *RechargeOrderUpsert {
	u.SetExcluded(rechargeorder.FieldOutTransactionID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.RechargeOrder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(rechargeorder.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RechargeOrderUpsertOne) UpdateNewValues() *RechargeOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(rechargeorder.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(rechargeorder.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RechargeOrder.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RechargeOrderUpsertOne) Ignore() *RechargeOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RechargeOrderUpsertOne) DoNothing() *RechargeOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RechargeOrderCreate.OnConflict
// documentation for more info.
func (u *RechargeOrderUpsertOne) Update(set func(*RechargeOrderUpsert)) *RechargeOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RechargeOrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *RechargeOrderUpsertOne) SetCreatedBy(v int64) *RechargeOrderUpsertOne {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *RechargeOrderUpsertOne) AddCreatedBy(v int64) *RechargeOrderUpsertOne {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *RechargeOrderUpsertOne) UpdateCreatedBy() *RechargeOrderUpsertOne {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *RechargeOrderUpsertOne) SetUpdatedBy(v int64) *RechargeOrderUpsertOne {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *RechargeOrderUpsertOne) AddUpdatedBy(v int64) *RechargeOrderUpsertOne {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *RechargeOrderUpsertOne) UpdateUpdatedBy() *RechargeOrderUpsertOne {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RechargeOrderUpsertOne) SetUpdatedAt(v time.Time) *RechargeOrderUpsertOne {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RechargeOrderUpsertOne) UpdateUpdatedAt() *RechargeOrderUpsertOne {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RechargeOrderUpsertOne) SetDeletedAt(v time.Time) *RechargeOrderUpsertOne {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RechargeOrderUpsertOne) UpdateDeletedAt() *RechargeOrderUpsertOne {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *RechargeOrderUpsertOne) SetUserID(v int64) *RechargeOrderUpsertOne {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *RechargeOrderUpsertOne) UpdateUserID() *RechargeOrderUpsertOne {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.UpdateUserID()
	})
}

// SetStatus sets the "status" field.
func (u *RechargeOrderUpsertOne) SetStatus(v rechargeorder.Status) *RechargeOrderUpsertOne {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *RechargeOrderUpsertOne) UpdateStatus() *RechargeOrderUpsertOne {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.UpdateStatus()
	})
}

// SetPureCep sets the "pure_cep" field.
func (u *RechargeOrderUpsertOne) SetPureCep(v int64) *RechargeOrderUpsertOne {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.SetPureCep(v)
	})
}

// AddPureCep adds v to the "pure_cep" field.
func (u *RechargeOrderUpsertOne) AddPureCep(v int64) *RechargeOrderUpsertOne {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.AddPureCep(v)
	})
}

// UpdatePureCep sets the "pure_cep" field to the value that was provided on create.
func (u *RechargeOrderUpsertOne) UpdatePureCep() *RechargeOrderUpsertOne {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.UpdatePureCep()
	})
}

// SetGiftCep sets the "gift_cep" field.
func (u *RechargeOrderUpsertOne) SetGiftCep(v int64) *RechargeOrderUpsertOne {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.SetGiftCep(v)
	})
}

// AddGiftCep adds v to the "gift_cep" field.
func (u *RechargeOrderUpsertOne) AddGiftCep(v int64) *RechargeOrderUpsertOne {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.AddGiftCep(v)
	})
}

// UpdateGiftCep sets the "gift_cep" field to the value that was provided on create.
func (u *RechargeOrderUpsertOne) UpdateGiftCep() *RechargeOrderUpsertOne {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.UpdateGiftCep()
	})
}

// SetSocialID sets the "social_id" field.
func (u *RechargeOrderUpsertOne) SetSocialID(v int64) *RechargeOrderUpsertOne {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.SetSocialID(v)
	})
}

// UpdateSocialID sets the "social_id" field to the value that was provided on create.
func (u *RechargeOrderUpsertOne) UpdateSocialID() *RechargeOrderUpsertOne {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.UpdateSocialID()
	})
}

// ClearSocialID clears the value of the "social_id" field.
func (u *RechargeOrderUpsertOne) ClearSocialID() *RechargeOrderUpsertOne {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.ClearSocialID()
	})
}

// SetType sets the "type" field.
func (u *RechargeOrderUpsertOne) SetType(v rechargeorder.Type) *RechargeOrderUpsertOne {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *RechargeOrderUpsertOne) UpdateType() *RechargeOrderUpsertOne {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.UpdateType()
	})
}

// SetSerialNumber sets the "serial_number" field.
func (u *RechargeOrderUpsertOne) SetSerialNumber(v string) *RechargeOrderUpsertOne {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.SetSerialNumber(v)
	})
}

// UpdateSerialNumber sets the "serial_number" field to the value that was provided on create.
func (u *RechargeOrderUpsertOne) UpdateSerialNumber() *RechargeOrderUpsertOne {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.UpdateSerialNumber()
	})
}

// SetThirdAPIResp sets the "third_api_resp" field.
func (u *RechargeOrderUpsertOne) SetThirdAPIResp(v string) *RechargeOrderUpsertOne {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.SetThirdAPIResp(v)
	})
}

// UpdateThirdAPIResp sets the "third_api_resp" field to the value that was provided on create.
func (u *RechargeOrderUpsertOne) UpdateThirdAPIResp() *RechargeOrderUpsertOne {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.UpdateThirdAPIResp()
	})
}

// SetFromUserID sets the "from_user_id" field.
func (u *RechargeOrderUpsertOne) SetFromUserID(v int64) *RechargeOrderUpsertOne {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.SetFromUserID(v)
	})
}

// AddFromUserID adds v to the "from_user_id" field.
func (u *RechargeOrderUpsertOne) AddFromUserID(v int64) *RechargeOrderUpsertOne {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.AddFromUserID(v)
	})
}

// UpdateFromUserID sets the "from_user_id" field to the value that was provided on create.
func (u *RechargeOrderUpsertOne) UpdateFromUserID() *RechargeOrderUpsertOne {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.UpdateFromUserID()
	})
}

// SetOutTransactionID sets the "out_transaction_id" field.
func (u *RechargeOrderUpsertOne) SetOutTransactionID(v string) *RechargeOrderUpsertOne {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.SetOutTransactionID(v)
	})
}

// UpdateOutTransactionID sets the "out_transaction_id" field to the value that was provided on create.
func (u *RechargeOrderUpsertOne) UpdateOutTransactionID() *RechargeOrderUpsertOne {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.UpdateOutTransactionID()
	})
}

// Exec executes the query.
func (u *RechargeOrderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for RechargeOrderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RechargeOrderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RechargeOrderUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RechargeOrderUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RechargeOrderCreateBulk is the builder for creating many RechargeOrder entities in bulk.
type RechargeOrderCreateBulk struct {
	config
	err      error
	builders []*RechargeOrderCreate
	conflict []sql.ConflictOption
}

// Save creates the RechargeOrder entities in the database.
func (rocb *RechargeOrderCreateBulk) Save(ctx context.Context) ([]*RechargeOrder, error) {
	if rocb.err != nil {
		return nil, rocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rocb.builders))
	nodes := make([]*RechargeOrder, len(rocb.builders))
	mutators := make([]Mutator, len(rocb.builders))
	for i := range rocb.builders {
		func(i int, root context.Context) {
			builder := rocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RechargeOrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rocb *RechargeOrderCreateBulk) SaveX(ctx context.Context) []*RechargeOrder {
	v, err := rocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rocb *RechargeOrderCreateBulk) Exec(ctx context.Context) error {
	_, err := rocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rocb *RechargeOrderCreateBulk) ExecX(ctx context.Context) {
	if err := rocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RechargeOrder.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RechargeOrderUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (rocb *RechargeOrderCreateBulk) OnConflict(opts ...sql.ConflictOption) *RechargeOrderUpsertBulk {
	rocb.conflict = opts
	return &RechargeOrderUpsertBulk{
		create: rocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RechargeOrder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rocb *RechargeOrderCreateBulk) OnConflictColumns(columns ...string) *RechargeOrderUpsertBulk {
	rocb.conflict = append(rocb.conflict, sql.ConflictColumns(columns...))
	return &RechargeOrderUpsertBulk{
		create: rocb,
	}
}

// RechargeOrderUpsertBulk is the builder for "upsert"-ing
// a bulk of RechargeOrder nodes.
type RechargeOrderUpsertBulk struct {
	create *RechargeOrderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RechargeOrder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(rechargeorder.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RechargeOrderUpsertBulk) UpdateNewValues() *RechargeOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(rechargeorder.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(rechargeorder.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RechargeOrder.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RechargeOrderUpsertBulk) Ignore() *RechargeOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RechargeOrderUpsertBulk) DoNothing() *RechargeOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RechargeOrderCreateBulk.OnConflict
// documentation for more info.
func (u *RechargeOrderUpsertBulk) Update(set func(*RechargeOrderUpsert)) *RechargeOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RechargeOrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *RechargeOrderUpsertBulk) SetCreatedBy(v int64) *RechargeOrderUpsertBulk {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *RechargeOrderUpsertBulk) AddCreatedBy(v int64) *RechargeOrderUpsertBulk {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *RechargeOrderUpsertBulk) UpdateCreatedBy() *RechargeOrderUpsertBulk {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *RechargeOrderUpsertBulk) SetUpdatedBy(v int64) *RechargeOrderUpsertBulk {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *RechargeOrderUpsertBulk) AddUpdatedBy(v int64) *RechargeOrderUpsertBulk {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *RechargeOrderUpsertBulk) UpdateUpdatedBy() *RechargeOrderUpsertBulk {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RechargeOrderUpsertBulk) SetUpdatedAt(v time.Time) *RechargeOrderUpsertBulk {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RechargeOrderUpsertBulk) UpdateUpdatedAt() *RechargeOrderUpsertBulk {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RechargeOrderUpsertBulk) SetDeletedAt(v time.Time) *RechargeOrderUpsertBulk {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RechargeOrderUpsertBulk) UpdateDeletedAt() *RechargeOrderUpsertBulk {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *RechargeOrderUpsertBulk) SetUserID(v int64) *RechargeOrderUpsertBulk {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *RechargeOrderUpsertBulk) UpdateUserID() *RechargeOrderUpsertBulk {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.UpdateUserID()
	})
}

// SetStatus sets the "status" field.
func (u *RechargeOrderUpsertBulk) SetStatus(v rechargeorder.Status) *RechargeOrderUpsertBulk {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *RechargeOrderUpsertBulk) UpdateStatus() *RechargeOrderUpsertBulk {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.UpdateStatus()
	})
}

// SetPureCep sets the "pure_cep" field.
func (u *RechargeOrderUpsertBulk) SetPureCep(v int64) *RechargeOrderUpsertBulk {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.SetPureCep(v)
	})
}

// AddPureCep adds v to the "pure_cep" field.
func (u *RechargeOrderUpsertBulk) AddPureCep(v int64) *RechargeOrderUpsertBulk {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.AddPureCep(v)
	})
}

// UpdatePureCep sets the "pure_cep" field to the value that was provided on create.
func (u *RechargeOrderUpsertBulk) UpdatePureCep() *RechargeOrderUpsertBulk {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.UpdatePureCep()
	})
}

// SetGiftCep sets the "gift_cep" field.
func (u *RechargeOrderUpsertBulk) SetGiftCep(v int64) *RechargeOrderUpsertBulk {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.SetGiftCep(v)
	})
}

// AddGiftCep adds v to the "gift_cep" field.
func (u *RechargeOrderUpsertBulk) AddGiftCep(v int64) *RechargeOrderUpsertBulk {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.AddGiftCep(v)
	})
}

// UpdateGiftCep sets the "gift_cep" field to the value that was provided on create.
func (u *RechargeOrderUpsertBulk) UpdateGiftCep() *RechargeOrderUpsertBulk {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.UpdateGiftCep()
	})
}

// SetSocialID sets the "social_id" field.
func (u *RechargeOrderUpsertBulk) SetSocialID(v int64) *RechargeOrderUpsertBulk {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.SetSocialID(v)
	})
}

// UpdateSocialID sets the "social_id" field to the value that was provided on create.
func (u *RechargeOrderUpsertBulk) UpdateSocialID() *RechargeOrderUpsertBulk {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.UpdateSocialID()
	})
}

// ClearSocialID clears the value of the "social_id" field.
func (u *RechargeOrderUpsertBulk) ClearSocialID() *RechargeOrderUpsertBulk {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.ClearSocialID()
	})
}

// SetType sets the "type" field.
func (u *RechargeOrderUpsertBulk) SetType(v rechargeorder.Type) *RechargeOrderUpsertBulk {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *RechargeOrderUpsertBulk) UpdateType() *RechargeOrderUpsertBulk {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.UpdateType()
	})
}

// SetSerialNumber sets the "serial_number" field.
func (u *RechargeOrderUpsertBulk) SetSerialNumber(v string) *RechargeOrderUpsertBulk {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.SetSerialNumber(v)
	})
}

// UpdateSerialNumber sets the "serial_number" field to the value that was provided on create.
func (u *RechargeOrderUpsertBulk) UpdateSerialNumber() *RechargeOrderUpsertBulk {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.UpdateSerialNumber()
	})
}

// SetThirdAPIResp sets the "third_api_resp" field.
func (u *RechargeOrderUpsertBulk) SetThirdAPIResp(v string) *RechargeOrderUpsertBulk {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.SetThirdAPIResp(v)
	})
}

// UpdateThirdAPIResp sets the "third_api_resp" field to the value that was provided on create.
func (u *RechargeOrderUpsertBulk) UpdateThirdAPIResp() *RechargeOrderUpsertBulk {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.UpdateThirdAPIResp()
	})
}

// SetFromUserID sets the "from_user_id" field.
func (u *RechargeOrderUpsertBulk) SetFromUserID(v int64) *RechargeOrderUpsertBulk {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.SetFromUserID(v)
	})
}

// AddFromUserID adds v to the "from_user_id" field.
func (u *RechargeOrderUpsertBulk) AddFromUserID(v int64) *RechargeOrderUpsertBulk {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.AddFromUserID(v)
	})
}

// UpdateFromUserID sets the "from_user_id" field to the value that was provided on create.
func (u *RechargeOrderUpsertBulk) UpdateFromUserID() *RechargeOrderUpsertBulk {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.UpdateFromUserID()
	})
}

// SetOutTransactionID sets the "out_transaction_id" field.
func (u *RechargeOrderUpsertBulk) SetOutTransactionID(v string) *RechargeOrderUpsertBulk {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.SetOutTransactionID(v)
	})
}

// UpdateOutTransactionID sets the "out_transaction_id" field to the value that was provided on create.
func (u *RechargeOrderUpsertBulk) UpdateOutTransactionID() *RechargeOrderUpsertBulk {
	return u.Update(func(s *RechargeOrderUpsert) {
		s.UpdateOutTransactionID()
	})
}

// Exec executes the query.
func (u *RechargeOrderUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the RechargeOrderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for RechargeOrderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RechargeOrderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
