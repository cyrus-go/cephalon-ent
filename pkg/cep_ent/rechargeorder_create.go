// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/costbill"
	"cephalon-ent/pkg/cep_ent/rechargeorder"
	"cephalon-ent/pkg/cep_ent/user"
	"cephalon-ent/pkg/cep_ent/vxsocial"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RechargeOrderCreate is the builder for creating a RechargeOrder entity.
type RechargeOrderCreate struct {
	config
	mutation *RechargeOrderMutation
	hooks    []Hook
}

// SetCreatedBy sets the "created_by" field.
func (roc *RechargeOrderCreate) SetCreatedBy(i int64) *RechargeOrderCreate {
	roc.mutation.SetCreatedBy(i)
	return roc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (roc *RechargeOrderCreate) SetNillableCreatedBy(i *int64) *RechargeOrderCreate {
	if i != nil {
		roc.SetCreatedBy(*i)
	}
	return roc
}

// SetUpdatedBy sets the "updated_by" field.
func (roc *RechargeOrderCreate) SetUpdatedBy(i int64) *RechargeOrderCreate {
	roc.mutation.SetUpdatedBy(i)
	return roc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (roc *RechargeOrderCreate) SetNillableUpdatedBy(i *int64) *RechargeOrderCreate {
	if i != nil {
		roc.SetUpdatedBy(*i)
	}
	return roc
}

// SetCreatedAt sets the "created_at" field.
func (roc *RechargeOrderCreate) SetCreatedAt(t time.Time) *RechargeOrderCreate {
	roc.mutation.SetCreatedAt(t)
	return roc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (roc *RechargeOrderCreate) SetNillableCreatedAt(t *time.Time) *RechargeOrderCreate {
	if t != nil {
		roc.SetCreatedAt(*t)
	}
	return roc
}

// SetUpdatedAt sets the "updated_at" field.
func (roc *RechargeOrderCreate) SetUpdatedAt(t time.Time) *RechargeOrderCreate {
	roc.mutation.SetUpdatedAt(t)
	return roc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (roc *RechargeOrderCreate) SetNillableUpdatedAt(t *time.Time) *RechargeOrderCreate {
	if t != nil {
		roc.SetUpdatedAt(*t)
	}
	return roc
}

// SetDeletedAt sets the "deleted_at" field.
func (roc *RechargeOrderCreate) SetDeletedAt(t time.Time) *RechargeOrderCreate {
	roc.mutation.SetDeletedAt(t)
	return roc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (roc *RechargeOrderCreate) SetNillableDeletedAt(t *time.Time) *RechargeOrderCreate {
	if t != nil {
		roc.SetDeletedAt(*t)
	}
	return roc
}

// SetUserID sets the "user_id" field.
func (roc *RechargeOrderCreate) SetUserID(i int64) *RechargeOrderCreate {
	roc.mutation.SetUserID(i)
	return roc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (roc *RechargeOrderCreate) SetNillableUserID(i *int64) *RechargeOrderCreate {
	if i != nil {
		roc.SetUserID(*i)
	}
	return roc
}

// SetStatus sets the "status" field.
func (roc *RechargeOrderCreate) SetStatus(r rechargeorder.Status) *RechargeOrderCreate {
	roc.mutation.SetStatus(r)
	return roc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (roc *RechargeOrderCreate) SetNillableStatus(r *rechargeorder.Status) *RechargeOrderCreate {
	if r != nil {
		roc.SetStatus(*r)
	}
	return roc
}

// SetPureCep sets the "pure_cep" field.
func (roc *RechargeOrderCreate) SetPureCep(i int64) *RechargeOrderCreate {
	roc.mutation.SetPureCep(i)
	return roc
}

// SetNillablePureCep sets the "pure_cep" field if the given value is not nil.
func (roc *RechargeOrderCreate) SetNillablePureCep(i *int64) *RechargeOrderCreate {
	if i != nil {
		roc.SetPureCep(*i)
	}
	return roc
}

// SetSocialID sets the "social_id" field.
func (roc *RechargeOrderCreate) SetSocialID(i int64) *RechargeOrderCreate {
	roc.mutation.SetSocialID(i)
	return roc
}

// SetNillableSocialID sets the "social_id" field if the given value is not nil.
func (roc *RechargeOrderCreate) SetNillableSocialID(i *int64) *RechargeOrderCreate {
	if i != nil {
		roc.SetSocialID(*i)
	}
	return roc
}

// SetType sets the "type" field.
func (roc *RechargeOrderCreate) SetType(r rechargeorder.Type) *RechargeOrderCreate {
	roc.mutation.SetType(r)
	return roc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (roc *RechargeOrderCreate) SetNillableType(r *rechargeorder.Type) *RechargeOrderCreate {
	if r != nil {
		roc.SetType(*r)
	}
	return roc
}

// SetSerialNumber sets the "serial_number" field.
func (roc *RechargeOrderCreate) SetSerialNumber(s string) *RechargeOrderCreate {
	roc.mutation.SetSerialNumber(s)
	return roc
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (roc *RechargeOrderCreate) SetNillableSerialNumber(s *string) *RechargeOrderCreate {
	if s != nil {
		roc.SetSerialNumber(*s)
	}
	return roc
}

// SetThirdAPIResp sets the "third_api_resp" field.
func (roc *RechargeOrderCreate) SetThirdAPIResp(s string) *RechargeOrderCreate {
	roc.mutation.SetThirdAPIResp(s)
	return roc
}

// SetNillableThirdAPIResp sets the "third_api_resp" field if the given value is not nil.
func (roc *RechargeOrderCreate) SetNillableThirdAPIResp(s *string) *RechargeOrderCreate {
	if s != nil {
		roc.SetThirdAPIResp(*s)
	}
	return roc
}

// SetFromUserID sets the "from_user_id" field.
func (roc *RechargeOrderCreate) SetFromUserID(i int64) *RechargeOrderCreate {
	roc.mutation.SetFromUserID(i)
	return roc
}

// SetNillableFromUserID sets the "from_user_id" field if the given value is not nil.
func (roc *RechargeOrderCreate) SetNillableFromUserID(i *int64) *RechargeOrderCreate {
	if i != nil {
		roc.SetFromUserID(*i)
	}
	return roc
}

// SetOutTransactionID sets the "out_transaction_id" field.
func (roc *RechargeOrderCreate) SetOutTransactionID(s string) *RechargeOrderCreate {
	roc.mutation.SetOutTransactionID(s)
	return roc
}

// SetNillableOutTransactionID sets the "out_transaction_id" field if the given value is not nil.
func (roc *RechargeOrderCreate) SetNillableOutTransactionID(s *string) *RechargeOrderCreate {
	if s != nil {
		roc.SetOutTransactionID(*s)
	}
	return roc
}

// SetID sets the "id" field.
func (roc *RechargeOrderCreate) SetID(i int64) *RechargeOrderCreate {
	roc.mutation.SetID(i)
	return roc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (roc *RechargeOrderCreate) SetNillableID(i *int64) *RechargeOrderCreate {
	if i != nil {
		roc.SetID(*i)
	}
	return roc
}

// SetUser sets the "user" edge to the User entity.
func (roc *RechargeOrderCreate) SetUser(u *User) *RechargeOrderCreate {
	return roc.SetUserID(u.ID)
}

// AddCostBillIDs adds the "cost_bills" edge to the CostBill entity by IDs.
func (roc *RechargeOrderCreate) AddCostBillIDs(ids ...int64) *RechargeOrderCreate {
	roc.mutation.AddCostBillIDs(ids...)
	return roc
}

// AddCostBills adds the "cost_bills" edges to the CostBill entity.
func (roc *RechargeOrderCreate) AddCostBills(c ...*CostBill) *RechargeOrderCreate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return roc.AddCostBillIDs(ids...)
}

// SetVxSocialID sets the "vx_social" edge to the VXSocial entity by ID.
func (roc *RechargeOrderCreate) SetVxSocialID(id int64) *RechargeOrderCreate {
	roc.mutation.SetVxSocialID(id)
	return roc
}

// SetNillableVxSocialID sets the "vx_social" edge to the VXSocial entity by ID if the given value is not nil.
func (roc *RechargeOrderCreate) SetNillableVxSocialID(id *int64) *RechargeOrderCreate {
	if id != nil {
		roc = roc.SetVxSocialID(*id)
	}
	return roc
}

// SetVxSocial sets the "vx_social" edge to the VXSocial entity.
func (roc *RechargeOrderCreate) SetVxSocial(v *VXSocial) *RechargeOrderCreate {
	return roc.SetVxSocialID(v.ID)
}

// Mutation returns the RechargeOrderMutation object of the builder.
func (roc *RechargeOrderCreate) Mutation() *RechargeOrderMutation {
	return roc.mutation
}

// Save creates the RechargeOrder in the database.
func (roc *RechargeOrderCreate) Save(ctx context.Context) (*RechargeOrder, error) {
	roc.defaults()
	return withHooks(ctx, roc.sqlSave, roc.mutation, roc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (roc *RechargeOrderCreate) SaveX(ctx context.Context) *RechargeOrder {
	v, err := roc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (roc *RechargeOrderCreate) Exec(ctx context.Context) error {
	_, err := roc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (roc *RechargeOrderCreate) ExecX(ctx context.Context) {
	if err := roc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (roc *RechargeOrderCreate) defaults() {
	if _, ok := roc.mutation.CreatedBy(); !ok {
		v := rechargeorder.DefaultCreatedBy
		roc.mutation.SetCreatedBy(v)
	}
	if _, ok := roc.mutation.UpdatedBy(); !ok {
		v := rechargeorder.DefaultUpdatedBy
		roc.mutation.SetUpdatedBy(v)
	}
	if _, ok := roc.mutation.CreatedAt(); !ok {
		v := rechargeorder.DefaultCreatedAt()
		roc.mutation.SetCreatedAt(v)
	}
	if _, ok := roc.mutation.UpdatedAt(); !ok {
		v := rechargeorder.DefaultUpdatedAt()
		roc.mutation.SetUpdatedAt(v)
	}
	if _, ok := roc.mutation.DeletedAt(); !ok {
		v := rechargeorder.DefaultDeletedAt
		roc.mutation.SetDeletedAt(v)
	}
	if _, ok := roc.mutation.UserID(); !ok {
		v := rechargeorder.DefaultUserID
		roc.mutation.SetUserID(v)
	}
	if _, ok := roc.mutation.Status(); !ok {
		v := rechargeorder.DefaultStatus
		roc.mutation.SetStatus(v)
	}
	if _, ok := roc.mutation.PureCep(); !ok {
		v := rechargeorder.DefaultPureCep
		roc.mutation.SetPureCep(v)
	}
	if _, ok := roc.mutation.SocialID(); !ok {
		v := rechargeorder.DefaultSocialID
		roc.mutation.SetSocialID(v)
	}
	if _, ok := roc.mutation.GetType(); !ok {
		v := rechargeorder.DefaultType
		roc.mutation.SetType(v)
	}
	if _, ok := roc.mutation.SerialNumber(); !ok {
		v := rechargeorder.DefaultSerialNumber
		roc.mutation.SetSerialNumber(v)
	}
	if _, ok := roc.mutation.ThirdAPIResp(); !ok {
		v := rechargeorder.DefaultThirdAPIResp
		roc.mutation.SetThirdAPIResp(v)
	}
	if _, ok := roc.mutation.FromUserID(); !ok {
		v := rechargeorder.DefaultFromUserID
		roc.mutation.SetFromUserID(v)
	}
	if _, ok := roc.mutation.OutTransactionID(); !ok {
		v := rechargeorder.DefaultOutTransactionID
		roc.mutation.SetOutTransactionID(v)
	}
	if _, ok := roc.mutation.ID(); !ok {
		v := rechargeorder.DefaultID()
		roc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (roc *RechargeOrderCreate) check() error {
	if _, ok := roc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "RechargeOrder.created_by"`)}
	}
	if _, ok := roc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "RechargeOrder.updated_by"`)}
	}
	if _, ok := roc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "RechargeOrder.created_at"`)}
	}
	if _, ok := roc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "RechargeOrder.updated_at"`)}
	}
	if _, ok := roc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "RechargeOrder.deleted_at"`)}
	}
	if _, ok := roc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "RechargeOrder.user_id"`)}
	}
	if _, ok := roc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`cep_ent: missing required field "RechargeOrder.status"`)}
	}
	if v, ok := roc.mutation.Status(); ok {
		if err := rechargeorder.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "RechargeOrder.status": %w`, err)}
		}
	}
	if _, ok := roc.mutation.PureCep(); !ok {
		return &ValidationError{Name: "pure_cep", err: errors.New(`cep_ent: missing required field "RechargeOrder.pure_cep"`)}
	}
	if v, ok := roc.mutation.PureCep(); ok {
		if err := rechargeorder.PureCepValidator(v); err != nil {
			return &ValidationError{Name: "pure_cep", err: fmt.Errorf(`cep_ent: validator failed for field "RechargeOrder.pure_cep": %w`, err)}
		}
	}
	if _, ok := roc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`cep_ent: missing required field "RechargeOrder.type"`)}
	}
	if v, ok := roc.mutation.GetType(); ok {
		if err := rechargeorder.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "RechargeOrder.type": %w`, err)}
		}
	}
	if _, ok := roc.mutation.SerialNumber(); !ok {
		return &ValidationError{Name: "serial_number", err: errors.New(`cep_ent: missing required field "RechargeOrder.serial_number"`)}
	}
	if _, ok := roc.mutation.ThirdAPIResp(); !ok {
		return &ValidationError{Name: "third_api_resp", err: errors.New(`cep_ent: missing required field "RechargeOrder.third_api_resp"`)}
	}
	if _, ok := roc.mutation.FromUserID(); !ok {
		return &ValidationError{Name: "from_user_id", err: errors.New(`cep_ent: missing required field "RechargeOrder.from_user_id"`)}
	}
	if _, ok := roc.mutation.OutTransactionID(); !ok {
		return &ValidationError{Name: "out_transaction_id", err: errors.New(`cep_ent: missing required field "RechargeOrder.out_transaction_id"`)}
	}
	if _, ok := roc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "RechargeOrder.user"`)}
	}
	return nil
}

func (roc *RechargeOrderCreate) sqlSave(ctx context.Context) (*RechargeOrder, error) {
	if err := roc.check(); err != nil {
		return nil, err
	}
	_node, _spec := roc.createSpec()
	if err := sqlgraph.CreateNode(ctx, roc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	roc.mutation.id = &_node.ID
	roc.mutation.done = true
	return _node, nil
}

func (roc *RechargeOrderCreate) createSpec() (*RechargeOrder, *sqlgraph.CreateSpec) {
	var (
		_node = &RechargeOrder{config: roc.config}
		_spec = sqlgraph.NewCreateSpec(rechargeorder.Table, sqlgraph.NewFieldSpec(rechargeorder.FieldID, field.TypeInt64))
	)
	if id, ok := roc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := roc.mutation.CreatedBy(); ok {
		_spec.SetField(rechargeorder.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := roc.mutation.UpdatedBy(); ok {
		_spec.SetField(rechargeorder.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := roc.mutation.CreatedAt(); ok {
		_spec.SetField(rechargeorder.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := roc.mutation.UpdatedAt(); ok {
		_spec.SetField(rechargeorder.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := roc.mutation.DeletedAt(); ok {
		_spec.SetField(rechargeorder.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := roc.mutation.Status(); ok {
		_spec.SetField(rechargeorder.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := roc.mutation.PureCep(); ok {
		_spec.SetField(rechargeorder.FieldPureCep, field.TypeInt64, value)
		_node.PureCep = value
	}
	if value, ok := roc.mutation.GetType(); ok {
		_spec.SetField(rechargeorder.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := roc.mutation.SerialNumber(); ok {
		_spec.SetField(rechargeorder.FieldSerialNumber, field.TypeString, value)
		_node.SerialNumber = value
	}
	if value, ok := roc.mutation.ThirdAPIResp(); ok {
		_spec.SetField(rechargeorder.FieldThirdAPIResp, field.TypeString, value)
		_node.ThirdAPIResp = value
	}
	if value, ok := roc.mutation.FromUserID(); ok {
		_spec.SetField(rechargeorder.FieldFromUserID, field.TypeInt64, value)
		_node.FromUserID = value
	}
	if value, ok := roc.mutation.OutTransactionID(); ok {
		_spec.SetField(rechargeorder.FieldOutTransactionID, field.TypeString, value)
		_node.OutTransactionID = value
	}
	if nodes := roc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rechargeorder.UserTable,
			Columns: []string{rechargeorder.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := roc.mutation.CostBillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rechargeorder.CostBillsTable,
			Columns: []string{rechargeorder.CostBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costbill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := roc.mutation.VxSocialIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rechargeorder.VxSocialTable,
			Columns: []string{rechargeorder.VxSocialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vxsocial.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SocialID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RechargeOrderCreateBulk is the builder for creating many RechargeOrder entities in bulk.
type RechargeOrderCreateBulk struct {
	config
	builders []*RechargeOrderCreate
}

// Save creates the RechargeOrder entities in the database.
func (rocb *RechargeOrderCreateBulk) Save(ctx context.Context) ([]*RechargeOrder, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rocb.builders))
	nodes := make([]*RechargeOrder, len(rocb.builders))
	mutators := make([]Mutator, len(rocb.builders))
	for i := range rocb.builders {
		func(i int, root context.Context) {
			builder := rocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RechargeOrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rocb *RechargeOrderCreateBulk) SaveX(ctx context.Context) []*RechargeOrder {
	v, err := rocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rocb *RechargeOrderCreateBulk) Exec(ctx context.Context) error {
	_, err := rocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rocb *RechargeOrderCreateBulk) ExecX(ctx context.Context) {
	if err := rocb.Exec(ctx); err != nil {
		panic(err)
	}
}
