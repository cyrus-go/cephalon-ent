// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/device"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/devicegpumission"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/gpu"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// DeviceGpuMissionUpdate is the builder for updating DeviceGpuMission entities.
type DeviceGpuMissionUpdate struct {
	config
	hooks    []Hook
	mutation *DeviceGpuMissionMutation
}

// Where appends a list predicates to the DeviceGpuMissionUpdate builder.
func (dgmu *DeviceGpuMissionUpdate) Where(ps ...predicate.DeviceGpuMission) *DeviceGpuMissionUpdate {
	dgmu.mutation.Where(ps...)
	return dgmu
}

// SetCreatedBy sets the "created_by" field.
func (dgmu *DeviceGpuMissionUpdate) SetCreatedBy(i int64) *DeviceGpuMissionUpdate {
	dgmu.mutation.ResetCreatedBy()
	dgmu.mutation.SetCreatedBy(i)
	return dgmu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (dgmu *DeviceGpuMissionUpdate) SetNillableCreatedBy(i *int64) *DeviceGpuMissionUpdate {
	if i != nil {
		dgmu.SetCreatedBy(*i)
	}
	return dgmu
}

// AddCreatedBy adds i to the "created_by" field.
func (dgmu *DeviceGpuMissionUpdate) AddCreatedBy(i int64) *DeviceGpuMissionUpdate {
	dgmu.mutation.AddCreatedBy(i)
	return dgmu
}

// SetUpdatedBy sets the "updated_by" field.
func (dgmu *DeviceGpuMissionUpdate) SetUpdatedBy(i int64) *DeviceGpuMissionUpdate {
	dgmu.mutation.ResetUpdatedBy()
	dgmu.mutation.SetUpdatedBy(i)
	return dgmu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dgmu *DeviceGpuMissionUpdate) SetNillableUpdatedBy(i *int64) *DeviceGpuMissionUpdate {
	if i != nil {
		dgmu.SetUpdatedBy(*i)
	}
	return dgmu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (dgmu *DeviceGpuMissionUpdate) AddUpdatedBy(i int64) *DeviceGpuMissionUpdate {
	dgmu.mutation.AddUpdatedBy(i)
	return dgmu
}

// SetUpdatedAt sets the "updated_at" field.
func (dgmu *DeviceGpuMissionUpdate) SetUpdatedAt(t time.Time) *DeviceGpuMissionUpdate {
	dgmu.mutation.SetUpdatedAt(t)
	return dgmu
}

// SetDeletedAt sets the "deleted_at" field.
func (dgmu *DeviceGpuMissionUpdate) SetDeletedAt(t time.Time) *DeviceGpuMissionUpdate {
	dgmu.mutation.SetDeletedAt(t)
	return dgmu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dgmu *DeviceGpuMissionUpdate) SetNillableDeletedAt(t *time.Time) *DeviceGpuMissionUpdate {
	if t != nil {
		dgmu.SetDeletedAt(*t)
	}
	return dgmu
}

// SetDeviceID sets the "device_id" field.
func (dgmu *DeviceGpuMissionUpdate) SetDeviceID(i int64) *DeviceGpuMissionUpdate {
	dgmu.mutation.SetDeviceID(i)
	return dgmu
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (dgmu *DeviceGpuMissionUpdate) SetNillableDeviceID(i *int64) *DeviceGpuMissionUpdate {
	if i != nil {
		dgmu.SetDeviceID(*i)
	}
	return dgmu
}

// SetGpuID sets the "gpu_id" field.
func (dgmu *DeviceGpuMissionUpdate) SetGpuID(i int64) *DeviceGpuMissionUpdate {
	dgmu.mutation.SetGpuID(i)
	return dgmu
}

// SetNillableGpuID sets the "gpu_id" field if the given value is not nil.
func (dgmu *DeviceGpuMissionUpdate) SetNillableGpuID(i *int64) *DeviceGpuMissionUpdate {
	if i != nil {
		dgmu.SetGpuID(*i)
	}
	return dgmu
}

// SetAbleMissionKind sets the "able_mission_kind" field.
func (dgmu *DeviceGpuMissionUpdate) SetAbleMissionKind(s []string) *DeviceGpuMissionUpdate {
	dgmu.mutation.SetAbleMissionKind(s)
	return dgmu
}

// ClearAbleMissionKind clears the value of the "able_mission_kind" field.
func (dgmu *DeviceGpuMissionUpdate) ClearAbleMissionKind() *DeviceGpuMissionUpdate {
	dgmu.mutation.ClearAbleMissionKind()
	return dgmu
}

// SetDeviceSlot sets the "device_slot" field.
func (dgmu *DeviceGpuMissionUpdate) SetDeviceSlot(i int8) *DeviceGpuMissionUpdate {
	dgmu.mutation.ResetDeviceSlot()
	dgmu.mutation.SetDeviceSlot(i)
	return dgmu
}

// SetNillableDeviceSlot sets the "device_slot" field if the given value is not nil.
func (dgmu *DeviceGpuMissionUpdate) SetNillableDeviceSlot(i *int8) *DeviceGpuMissionUpdate {
	if i != nil {
		dgmu.SetDeviceSlot(*i)
	}
	return dgmu
}

// AddDeviceSlot adds i to the "device_slot" field.
func (dgmu *DeviceGpuMissionUpdate) AddDeviceSlot(i int8) *DeviceGpuMissionUpdate {
	dgmu.mutation.AddDeviceSlot(i)
	return dgmu
}

// SetMaxOnlineMission sets the "max_online_mission" field.
func (dgmu *DeviceGpuMissionUpdate) SetMaxOnlineMission(i int8) *DeviceGpuMissionUpdate {
	dgmu.mutation.ResetMaxOnlineMission()
	dgmu.mutation.SetMaxOnlineMission(i)
	return dgmu
}

// SetNillableMaxOnlineMission sets the "max_online_mission" field if the given value is not nil.
func (dgmu *DeviceGpuMissionUpdate) SetNillableMaxOnlineMission(i *int8) *DeviceGpuMissionUpdate {
	if i != nil {
		dgmu.SetMaxOnlineMission(*i)
	}
	return dgmu
}

// AddMaxOnlineMission adds i to the "max_online_mission" field.
func (dgmu *DeviceGpuMissionUpdate) AddMaxOnlineMission(i int8) *DeviceGpuMissionUpdate {
	dgmu.mutation.AddMaxOnlineMission(i)
	return dgmu
}

// SetGpuStatus sets the "gpu_status" field.
func (dgmu *DeviceGpuMissionUpdate) SetGpuStatus(es enums.DeviceStatus) *DeviceGpuMissionUpdate {
	dgmu.mutation.SetGpuStatus(es)
	return dgmu
}

// SetNillableGpuStatus sets the "gpu_status" field if the given value is not nil.
func (dgmu *DeviceGpuMissionUpdate) SetNillableGpuStatus(es *enums.DeviceStatus) *DeviceGpuMissionUpdate {
	if es != nil {
		dgmu.SetGpuStatus(*es)
	}
	return dgmu
}

// SetMissionID sets the "mission_id" field.
func (dgmu *DeviceGpuMissionUpdate) SetMissionID(i []int64) *DeviceGpuMissionUpdate {
	dgmu.mutation.SetMissionID(i)
	return dgmu
}

// ClearMissionID clears the value of the "mission_id" field.
func (dgmu *DeviceGpuMissionUpdate) ClearMissionID() *DeviceGpuMissionUpdate {
	dgmu.mutation.ClearMissionID()
	return dgmu
}

// SetDevice sets the "device" edge to the Device entity.
func (dgmu *DeviceGpuMissionUpdate) SetDevice(d *Device) *DeviceGpuMissionUpdate {
	return dgmu.SetDeviceID(d.ID)
}

// SetGpu sets the "gpu" edge to the Gpu entity.
func (dgmu *DeviceGpuMissionUpdate) SetGpu(g *Gpu) *DeviceGpuMissionUpdate {
	return dgmu.SetGpuID(g.ID)
}

// Mutation returns the DeviceGpuMissionMutation object of the builder.
func (dgmu *DeviceGpuMissionUpdate) Mutation() *DeviceGpuMissionMutation {
	return dgmu.mutation
}

// ClearDevice clears the "device" edge to the Device entity.
func (dgmu *DeviceGpuMissionUpdate) ClearDevice() *DeviceGpuMissionUpdate {
	dgmu.mutation.ClearDevice()
	return dgmu
}

// ClearGpu clears the "gpu" edge to the Gpu entity.
func (dgmu *DeviceGpuMissionUpdate) ClearGpu() *DeviceGpuMissionUpdate {
	dgmu.mutation.ClearGpu()
	return dgmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dgmu *DeviceGpuMissionUpdate) Save(ctx context.Context) (int, error) {
	dgmu.defaults()
	return withHooks(ctx, dgmu.sqlSave, dgmu.mutation, dgmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dgmu *DeviceGpuMissionUpdate) SaveX(ctx context.Context) int {
	affected, err := dgmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dgmu *DeviceGpuMissionUpdate) Exec(ctx context.Context) error {
	_, err := dgmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dgmu *DeviceGpuMissionUpdate) ExecX(ctx context.Context) {
	if err := dgmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dgmu *DeviceGpuMissionUpdate) defaults() {
	if _, ok := dgmu.mutation.UpdatedAt(); !ok {
		v := devicegpumission.UpdateDefaultUpdatedAt()
		dgmu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dgmu *DeviceGpuMissionUpdate) check() error {
	if v, ok := dgmu.mutation.GpuStatus(); ok {
		if err := devicegpumission.GpuStatusValidator(v); err != nil {
			return &ValidationError{Name: "gpu_status", err: fmt.Errorf(`cep_ent: validator failed for field "DeviceGpuMission.gpu_status": %w`, err)}
		}
	}
	if _, ok := dgmu.mutation.DeviceID(); dgmu.mutation.DeviceCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "DeviceGpuMission.device"`)
	}
	if _, ok := dgmu.mutation.GpuID(); dgmu.mutation.GpuCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "DeviceGpuMission.gpu"`)
	}
	return nil
}

func (dgmu *DeviceGpuMissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dgmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(devicegpumission.Table, devicegpumission.Columns, sqlgraph.NewFieldSpec(devicegpumission.FieldID, field.TypeInt64))
	if ps := dgmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dgmu.mutation.CreatedBy(); ok {
		_spec.SetField(devicegpumission.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := dgmu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(devicegpumission.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := dgmu.mutation.UpdatedBy(); ok {
		_spec.SetField(devicegpumission.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := dgmu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(devicegpumission.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := dgmu.mutation.UpdatedAt(); ok {
		_spec.SetField(devicegpumission.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := dgmu.mutation.DeletedAt(); ok {
		_spec.SetField(devicegpumission.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := dgmu.mutation.AbleMissionKind(); ok {
		vv, err := devicegpumission.ValueScanner.AbleMissionKind.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(devicegpumission.FieldAbleMissionKind, field.TypeString, vv)
	}
	if dgmu.mutation.AbleMissionKindCleared() {
		_spec.ClearField(devicegpumission.FieldAbleMissionKind, field.TypeString)
	}
	if value, ok := dgmu.mutation.DeviceSlot(); ok {
		_spec.SetField(devicegpumission.FieldDeviceSlot, field.TypeInt8, value)
	}
	if value, ok := dgmu.mutation.AddedDeviceSlot(); ok {
		_spec.AddField(devicegpumission.FieldDeviceSlot, field.TypeInt8, value)
	}
	if value, ok := dgmu.mutation.MaxOnlineMission(); ok {
		_spec.SetField(devicegpumission.FieldMaxOnlineMission, field.TypeInt8, value)
	}
	if value, ok := dgmu.mutation.AddedMaxOnlineMission(); ok {
		_spec.AddField(devicegpumission.FieldMaxOnlineMission, field.TypeInt8, value)
	}
	if value, ok := dgmu.mutation.GpuStatus(); ok {
		_spec.SetField(devicegpumission.FieldGpuStatus, field.TypeEnum, value)
	}
	if value, ok := dgmu.mutation.MissionID(); ok {
		vv, err := devicegpumission.ValueScanner.MissionID.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(devicegpumission.FieldMissionID, field.TypeString, vv)
	}
	if dgmu.mutation.MissionIDCleared() {
		_spec.ClearField(devicegpumission.FieldMissionID, field.TypeString)
	}
	if dgmu.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   devicegpumission.DeviceTable,
			Columns: []string{devicegpumission.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dgmu.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   devicegpumission.DeviceTable,
			Columns: []string{devicegpumission.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dgmu.mutation.GpuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   devicegpumission.GpuTable,
			Columns: []string{devicegpumission.GpuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gpu.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dgmu.mutation.GpuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   devicegpumission.GpuTable,
			Columns: []string{devicegpumission.GpuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gpu.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dgmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{devicegpumission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dgmu.mutation.done = true
	return n, nil
}

// DeviceGpuMissionUpdateOne is the builder for updating a single DeviceGpuMission entity.
type DeviceGpuMissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeviceGpuMissionMutation
}

// SetCreatedBy sets the "created_by" field.
func (dgmuo *DeviceGpuMissionUpdateOne) SetCreatedBy(i int64) *DeviceGpuMissionUpdateOne {
	dgmuo.mutation.ResetCreatedBy()
	dgmuo.mutation.SetCreatedBy(i)
	return dgmuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (dgmuo *DeviceGpuMissionUpdateOne) SetNillableCreatedBy(i *int64) *DeviceGpuMissionUpdateOne {
	if i != nil {
		dgmuo.SetCreatedBy(*i)
	}
	return dgmuo
}

// AddCreatedBy adds i to the "created_by" field.
func (dgmuo *DeviceGpuMissionUpdateOne) AddCreatedBy(i int64) *DeviceGpuMissionUpdateOne {
	dgmuo.mutation.AddCreatedBy(i)
	return dgmuo
}

// SetUpdatedBy sets the "updated_by" field.
func (dgmuo *DeviceGpuMissionUpdateOne) SetUpdatedBy(i int64) *DeviceGpuMissionUpdateOne {
	dgmuo.mutation.ResetUpdatedBy()
	dgmuo.mutation.SetUpdatedBy(i)
	return dgmuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dgmuo *DeviceGpuMissionUpdateOne) SetNillableUpdatedBy(i *int64) *DeviceGpuMissionUpdateOne {
	if i != nil {
		dgmuo.SetUpdatedBy(*i)
	}
	return dgmuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (dgmuo *DeviceGpuMissionUpdateOne) AddUpdatedBy(i int64) *DeviceGpuMissionUpdateOne {
	dgmuo.mutation.AddUpdatedBy(i)
	return dgmuo
}

// SetUpdatedAt sets the "updated_at" field.
func (dgmuo *DeviceGpuMissionUpdateOne) SetUpdatedAt(t time.Time) *DeviceGpuMissionUpdateOne {
	dgmuo.mutation.SetUpdatedAt(t)
	return dgmuo
}

// SetDeletedAt sets the "deleted_at" field.
func (dgmuo *DeviceGpuMissionUpdateOne) SetDeletedAt(t time.Time) *DeviceGpuMissionUpdateOne {
	dgmuo.mutation.SetDeletedAt(t)
	return dgmuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dgmuo *DeviceGpuMissionUpdateOne) SetNillableDeletedAt(t *time.Time) *DeviceGpuMissionUpdateOne {
	if t != nil {
		dgmuo.SetDeletedAt(*t)
	}
	return dgmuo
}

// SetDeviceID sets the "device_id" field.
func (dgmuo *DeviceGpuMissionUpdateOne) SetDeviceID(i int64) *DeviceGpuMissionUpdateOne {
	dgmuo.mutation.SetDeviceID(i)
	return dgmuo
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (dgmuo *DeviceGpuMissionUpdateOne) SetNillableDeviceID(i *int64) *DeviceGpuMissionUpdateOne {
	if i != nil {
		dgmuo.SetDeviceID(*i)
	}
	return dgmuo
}

// SetGpuID sets the "gpu_id" field.
func (dgmuo *DeviceGpuMissionUpdateOne) SetGpuID(i int64) *DeviceGpuMissionUpdateOne {
	dgmuo.mutation.SetGpuID(i)
	return dgmuo
}

// SetNillableGpuID sets the "gpu_id" field if the given value is not nil.
func (dgmuo *DeviceGpuMissionUpdateOne) SetNillableGpuID(i *int64) *DeviceGpuMissionUpdateOne {
	if i != nil {
		dgmuo.SetGpuID(*i)
	}
	return dgmuo
}

// SetAbleMissionKind sets the "able_mission_kind" field.
func (dgmuo *DeviceGpuMissionUpdateOne) SetAbleMissionKind(s []string) *DeviceGpuMissionUpdateOne {
	dgmuo.mutation.SetAbleMissionKind(s)
	return dgmuo
}

// ClearAbleMissionKind clears the value of the "able_mission_kind" field.
func (dgmuo *DeviceGpuMissionUpdateOne) ClearAbleMissionKind() *DeviceGpuMissionUpdateOne {
	dgmuo.mutation.ClearAbleMissionKind()
	return dgmuo
}

// SetDeviceSlot sets the "device_slot" field.
func (dgmuo *DeviceGpuMissionUpdateOne) SetDeviceSlot(i int8) *DeviceGpuMissionUpdateOne {
	dgmuo.mutation.ResetDeviceSlot()
	dgmuo.mutation.SetDeviceSlot(i)
	return dgmuo
}

// SetNillableDeviceSlot sets the "device_slot" field if the given value is not nil.
func (dgmuo *DeviceGpuMissionUpdateOne) SetNillableDeviceSlot(i *int8) *DeviceGpuMissionUpdateOne {
	if i != nil {
		dgmuo.SetDeviceSlot(*i)
	}
	return dgmuo
}

// AddDeviceSlot adds i to the "device_slot" field.
func (dgmuo *DeviceGpuMissionUpdateOne) AddDeviceSlot(i int8) *DeviceGpuMissionUpdateOne {
	dgmuo.mutation.AddDeviceSlot(i)
	return dgmuo
}

// SetMaxOnlineMission sets the "max_online_mission" field.
func (dgmuo *DeviceGpuMissionUpdateOne) SetMaxOnlineMission(i int8) *DeviceGpuMissionUpdateOne {
	dgmuo.mutation.ResetMaxOnlineMission()
	dgmuo.mutation.SetMaxOnlineMission(i)
	return dgmuo
}

// SetNillableMaxOnlineMission sets the "max_online_mission" field if the given value is not nil.
func (dgmuo *DeviceGpuMissionUpdateOne) SetNillableMaxOnlineMission(i *int8) *DeviceGpuMissionUpdateOne {
	if i != nil {
		dgmuo.SetMaxOnlineMission(*i)
	}
	return dgmuo
}

// AddMaxOnlineMission adds i to the "max_online_mission" field.
func (dgmuo *DeviceGpuMissionUpdateOne) AddMaxOnlineMission(i int8) *DeviceGpuMissionUpdateOne {
	dgmuo.mutation.AddMaxOnlineMission(i)
	return dgmuo
}

// SetGpuStatus sets the "gpu_status" field.
func (dgmuo *DeviceGpuMissionUpdateOne) SetGpuStatus(es enums.DeviceStatus) *DeviceGpuMissionUpdateOne {
	dgmuo.mutation.SetGpuStatus(es)
	return dgmuo
}

// SetNillableGpuStatus sets the "gpu_status" field if the given value is not nil.
func (dgmuo *DeviceGpuMissionUpdateOne) SetNillableGpuStatus(es *enums.DeviceStatus) *DeviceGpuMissionUpdateOne {
	if es != nil {
		dgmuo.SetGpuStatus(*es)
	}
	return dgmuo
}

// SetMissionID sets the "mission_id" field.
func (dgmuo *DeviceGpuMissionUpdateOne) SetMissionID(i []int64) *DeviceGpuMissionUpdateOne {
	dgmuo.mutation.SetMissionID(i)
	return dgmuo
}

// ClearMissionID clears the value of the "mission_id" field.
func (dgmuo *DeviceGpuMissionUpdateOne) ClearMissionID() *DeviceGpuMissionUpdateOne {
	dgmuo.mutation.ClearMissionID()
	return dgmuo
}

// SetDevice sets the "device" edge to the Device entity.
func (dgmuo *DeviceGpuMissionUpdateOne) SetDevice(d *Device) *DeviceGpuMissionUpdateOne {
	return dgmuo.SetDeviceID(d.ID)
}

// SetGpu sets the "gpu" edge to the Gpu entity.
func (dgmuo *DeviceGpuMissionUpdateOne) SetGpu(g *Gpu) *DeviceGpuMissionUpdateOne {
	return dgmuo.SetGpuID(g.ID)
}

// Mutation returns the DeviceGpuMissionMutation object of the builder.
func (dgmuo *DeviceGpuMissionUpdateOne) Mutation() *DeviceGpuMissionMutation {
	return dgmuo.mutation
}

// ClearDevice clears the "device" edge to the Device entity.
func (dgmuo *DeviceGpuMissionUpdateOne) ClearDevice() *DeviceGpuMissionUpdateOne {
	dgmuo.mutation.ClearDevice()
	return dgmuo
}

// ClearGpu clears the "gpu" edge to the Gpu entity.
func (dgmuo *DeviceGpuMissionUpdateOne) ClearGpu() *DeviceGpuMissionUpdateOne {
	dgmuo.mutation.ClearGpu()
	return dgmuo
}

// Where appends a list predicates to the DeviceGpuMissionUpdate builder.
func (dgmuo *DeviceGpuMissionUpdateOne) Where(ps ...predicate.DeviceGpuMission) *DeviceGpuMissionUpdateOne {
	dgmuo.mutation.Where(ps...)
	return dgmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dgmuo *DeviceGpuMissionUpdateOne) Select(field string, fields ...string) *DeviceGpuMissionUpdateOne {
	dgmuo.fields = append([]string{field}, fields...)
	return dgmuo
}

// Save executes the query and returns the updated DeviceGpuMission entity.
func (dgmuo *DeviceGpuMissionUpdateOne) Save(ctx context.Context) (*DeviceGpuMission, error) {
	dgmuo.defaults()
	return withHooks(ctx, dgmuo.sqlSave, dgmuo.mutation, dgmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dgmuo *DeviceGpuMissionUpdateOne) SaveX(ctx context.Context) *DeviceGpuMission {
	node, err := dgmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dgmuo *DeviceGpuMissionUpdateOne) Exec(ctx context.Context) error {
	_, err := dgmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dgmuo *DeviceGpuMissionUpdateOne) ExecX(ctx context.Context) {
	if err := dgmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dgmuo *DeviceGpuMissionUpdateOne) defaults() {
	if _, ok := dgmuo.mutation.UpdatedAt(); !ok {
		v := devicegpumission.UpdateDefaultUpdatedAt()
		dgmuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dgmuo *DeviceGpuMissionUpdateOne) check() error {
	if v, ok := dgmuo.mutation.GpuStatus(); ok {
		if err := devicegpumission.GpuStatusValidator(v); err != nil {
			return &ValidationError{Name: "gpu_status", err: fmt.Errorf(`cep_ent: validator failed for field "DeviceGpuMission.gpu_status": %w`, err)}
		}
	}
	if _, ok := dgmuo.mutation.DeviceID(); dgmuo.mutation.DeviceCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "DeviceGpuMission.device"`)
	}
	if _, ok := dgmuo.mutation.GpuID(); dgmuo.mutation.GpuCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "DeviceGpuMission.gpu"`)
	}
	return nil
}

func (dgmuo *DeviceGpuMissionUpdateOne) sqlSave(ctx context.Context) (_node *DeviceGpuMission, err error) {
	if err := dgmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(devicegpumission.Table, devicegpumission.Columns, sqlgraph.NewFieldSpec(devicegpumission.FieldID, field.TypeInt64))
	id, ok := dgmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "DeviceGpuMission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dgmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, devicegpumission.FieldID)
		for _, f := range fields {
			if !devicegpumission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != devicegpumission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dgmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dgmuo.mutation.CreatedBy(); ok {
		_spec.SetField(devicegpumission.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := dgmuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(devicegpumission.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := dgmuo.mutation.UpdatedBy(); ok {
		_spec.SetField(devicegpumission.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := dgmuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(devicegpumission.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := dgmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(devicegpumission.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := dgmuo.mutation.DeletedAt(); ok {
		_spec.SetField(devicegpumission.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := dgmuo.mutation.AbleMissionKind(); ok {
		vv, err := devicegpumission.ValueScanner.AbleMissionKind.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(devicegpumission.FieldAbleMissionKind, field.TypeString, vv)
	}
	if dgmuo.mutation.AbleMissionKindCleared() {
		_spec.ClearField(devicegpumission.FieldAbleMissionKind, field.TypeString)
	}
	if value, ok := dgmuo.mutation.DeviceSlot(); ok {
		_spec.SetField(devicegpumission.FieldDeviceSlot, field.TypeInt8, value)
	}
	if value, ok := dgmuo.mutation.AddedDeviceSlot(); ok {
		_spec.AddField(devicegpumission.FieldDeviceSlot, field.TypeInt8, value)
	}
	if value, ok := dgmuo.mutation.MaxOnlineMission(); ok {
		_spec.SetField(devicegpumission.FieldMaxOnlineMission, field.TypeInt8, value)
	}
	if value, ok := dgmuo.mutation.AddedMaxOnlineMission(); ok {
		_spec.AddField(devicegpumission.FieldMaxOnlineMission, field.TypeInt8, value)
	}
	if value, ok := dgmuo.mutation.GpuStatus(); ok {
		_spec.SetField(devicegpumission.FieldGpuStatus, field.TypeEnum, value)
	}
	if value, ok := dgmuo.mutation.MissionID(); ok {
		vv, err := devicegpumission.ValueScanner.MissionID.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(devicegpumission.FieldMissionID, field.TypeString, vv)
	}
	if dgmuo.mutation.MissionIDCleared() {
		_spec.ClearField(devicegpumission.FieldMissionID, field.TypeString)
	}
	if dgmuo.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   devicegpumission.DeviceTable,
			Columns: []string{devicegpumission.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dgmuo.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   devicegpumission.DeviceTable,
			Columns: []string{devicegpumission.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dgmuo.mutation.GpuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   devicegpumission.GpuTable,
			Columns: []string{devicegpumission.GpuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gpu.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dgmuo.mutation.GpuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   devicegpumission.GpuTable,
			Columns: []string{devicegpumission.GpuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gpu.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeviceGpuMission{config: dgmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dgmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{devicegpumission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dgmuo.mutation.done = true
	return _node, nil
}
