// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionloadbalanceaccess"
)

// MissionLoadBalanceAccessCreate is the builder for creating a MissionLoadBalanceAccess entity.
type MissionLoadBalanceAccessCreate struct {
	config
	mutation *MissionLoadBalanceAccessMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (mlbac *MissionLoadBalanceAccessCreate) SetCreatedBy(i int64) *MissionLoadBalanceAccessCreate {
	mlbac.mutation.SetCreatedBy(i)
	return mlbac
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mlbac *MissionLoadBalanceAccessCreate) SetNillableCreatedBy(i *int64) *MissionLoadBalanceAccessCreate {
	if i != nil {
		mlbac.SetCreatedBy(*i)
	}
	return mlbac
}

// SetUpdatedBy sets the "updated_by" field.
func (mlbac *MissionLoadBalanceAccessCreate) SetUpdatedBy(i int64) *MissionLoadBalanceAccessCreate {
	mlbac.mutation.SetUpdatedBy(i)
	return mlbac
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mlbac *MissionLoadBalanceAccessCreate) SetNillableUpdatedBy(i *int64) *MissionLoadBalanceAccessCreate {
	if i != nil {
		mlbac.SetUpdatedBy(*i)
	}
	return mlbac
}

// SetCreatedAt sets the "created_at" field.
func (mlbac *MissionLoadBalanceAccessCreate) SetCreatedAt(t time.Time) *MissionLoadBalanceAccessCreate {
	mlbac.mutation.SetCreatedAt(t)
	return mlbac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mlbac *MissionLoadBalanceAccessCreate) SetNillableCreatedAt(t *time.Time) *MissionLoadBalanceAccessCreate {
	if t != nil {
		mlbac.SetCreatedAt(*t)
	}
	return mlbac
}

// SetUpdatedAt sets the "updated_at" field.
func (mlbac *MissionLoadBalanceAccessCreate) SetUpdatedAt(t time.Time) *MissionLoadBalanceAccessCreate {
	mlbac.mutation.SetUpdatedAt(t)
	return mlbac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mlbac *MissionLoadBalanceAccessCreate) SetNillableUpdatedAt(t *time.Time) *MissionLoadBalanceAccessCreate {
	if t != nil {
		mlbac.SetUpdatedAt(*t)
	}
	return mlbac
}

// SetDeletedAt sets the "deleted_at" field.
func (mlbac *MissionLoadBalanceAccessCreate) SetDeletedAt(t time.Time) *MissionLoadBalanceAccessCreate {
	mlbac.mutation.SetDeletedAt(t)
	return mlbac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mlbac *MissionLoadBalanceAccessCreate) SetNillableDeletedAt(t *time.Time) *MissionLoadBalanceAccessCreate {
	if t != nil {
		mlbac.SetDeletedAt(*t)
	}
	return mlbac
}

// SetMissionID sets the "mission_id" field.
func (mlbac *MissionLoadBalanceAccessCreate) SetMissionID(i int64) *MissionLoadBalanceAccessCreate {
	mlbac.mutation.SetMissionID(i)
	return mlbac
}

// SetMissionLoadBalanceID sets the "mission_load_balance_id" field.
func (mlbac *MissionLoadBalanceAccessCreate) SetMissionLoadBalanceID(i int64) *MissionLoadBalanceAccessCreate {
	mlbac.mutation.SetMissionLoadBalanceID(i)
	return mlbac
}

// SetLastAccess sets the "last_access" field.
func (mlbac *MissionLoadBalanceAccessCreate) SetLastAccess(t time.Time) *MissionLoadBalanceAccessCreate {
	mlbac.mutation.SetLastAccess(t)
	return mlbac
}

// SetNillableLastAccess sets the "last_access" field if the given value is not nil.
func (mlbac *MissionLoadBalanceAccessCreate) SetNillableLastAccess(t *time.Time) *MissionLoadBalanceAccessCreate {
	if t != nil {
		mlbac.SetLastAccess(*t)
	}
	return mlbac
}

// SetAccessCount sets the "access_count" field.
func (mlbac *MissionLoadBalanceAccessCreate) SetAccessCount(i int32) *MissionLoadBalanceAccessCreate {
	mlbac.mutation.SetAccessCount(i)
	return mlbac
}

// SetNillableAccessCount sets the "access_count" field if the given value is not nil.
func (mlbac *MissionLoadBalanceAccessCreate) SetNillableAccessCount(i *int32) *MissionLoadBalanceAccessCreate {
	if i != nil {
		mlbac.SetAccessCount(*i)
	}
	return mlbac
}

// SetID sets the "id" field.
func (mlbac *MissionLoadBalanceAccessCreate) SetID(i int64) *MissionLoadBalanceAccessCreate {
	mlbac.mutation.SetID(i)
	return mlbac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mlbac *MissionLoadBalanceAccessCreate) SetNillableID(i *int64) *MissionLoadBalanceAccessCreate {
	if i != nil {
		mlbac.SetID(*i)
	}
	return mlbac
}

// Mutation returns the MissionLoadBalanceAccessMutation object of the builder.
func (mlbac *MissionLoadBalanceAccessCreate) Mutation() *MissionLoadBalanceAccessMutation {
	return mlbac.mutation
}

// Save creates the MissionLoadBalanceAccess in the database.
func (mlbac *MissionLoadBalanceAccessCreate) Save(ctx context.Context) (*MissionLoadBalanceAccess, error) {
	mlbac.defaults()
	return withHooks(ctx, mlbac.sqlSave, mlbac.mutation, mlbac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mlbac *MissionLoadBalanceAccessCreate) SaveX(ctx context.Context) *MissionLoadBalanceAccess {
	v, err := mlbac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mlbac *MissionLoadBalanceAccessCreate) Exec(ctx context.Context) error {
	_, err := mlbac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mlbac *MissionLoadBalanceAccessCreate) ExecX(ctx context.Context) {
	if err := mlbac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mlbac *MissionLoadBalanceAccessCreate) defaults() {
	if _, ok := mlbac.mutation.CreatedBy(); !ok {
		v := missionloadbalanceaccess.DefaultCreatedBy
		mlbac.mutation.SetCreatedBy(v)
	}
	if _, ok := mlbac.mutation.UpdatedBy(); !ok {
		v := missionloadbalanceaccess.DefaultUpdatedBy
		mlbac.mutation.SetUpdatedBy(v)
	}
	if _, ok := mlbac.mutation.CreatedAt(); !ok {
		v := missionloadbalanceaccess.DefaultCreatedAt()
		mlbac.mutation.SetCreatedAt(v)
	}
	if _, ok := mlbac.mutation.UpdatedAt(); !ok {
		v := missionloadbalanceaccess.DefaultUpdatedAt()
		mlbac.mutation.SetUpdatedAt(v)
	}
	if _, ok := mlbac.mutation.DeletedAt(); !ok {
		v := missionloadbalanceaccess.DefaultDeletedAt
		mlbac.mutation.SetDeletedAt(v)
	}
	if _, ok := mlbac.mutation.LastAccess(); !ok {
		v := missionloadbalanceaccess.DefaultLastAccess
		mlbac.mutation.SetLastAccess(v)
	}
	if _, ok := mlbac.mutation.AccessCount(); !ok {
		v := missionloadbalanceaccess.DefaultAccessCount
		mlbac.mutation.SetAccessCount(v)
	}
	if _, ok := mlbac.mutation.ID(); !ok {
		v := missionloadbalanceaccess.DefaultID()
		mlbac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mlbac *MissionLoadBalanceAccessCreate) check() error {
	if _, ok := mlbac.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "MissionLoadBalanceAccess.created_by"`)}
	}
	if _, ok := mlbac.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "MissionLoadBalanceAccess.updated_by"`)}
	}
	if _, ok := mlbac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "MissionLoadBalanceAccess.created_at"`)}
	}
	if _, ok := mlbac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "MissionLoadBalanceAccess.updated_at"`)}
	}
	if _, ok := mlbac.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "MissionLoadBalanceAccess.deleted_at"`)}
	}
	if _, ok := mlbac.mutation.MissionID(); !ok {
		return &ValidationError{Name: "mission_id", err: errors.New(`cep_ent: missing required field "MissionLoadBalanceAccess.mission_id"`)}
	}
	if _, ok := mlbac.mutation.MissionLoadBalanceID(); !ok {
		return &ValidationError{Name: "mission_load_balance_id", err: errors.New(`cep_ent: missing required field "MissionLoadBalanceAccess.mission_load_balance_id"`)}
	}
	if _, ok := mlbac.mutation.LastAccess(); !ok {
		return &ValidationError{Name: "last_access", err: errors.New(`cep_ent: missing required field "MissionLoadBalanceAccess.last_access"`)}
	}
	if _, ok := mlbac.mutation.AccessCount(); !ok {
		return &ValidationError{Name: "access_count", err: errors.New(`cep_ent: missing required field "MissionLoadBalanceAccess.access_count"`)}
	}
	return nil
}

func (mlbac *MissionLoadBalanceAccessCreate) sqlSave(ctx context.Context) (*MissionLoadBalanceAccess, error) {
	if err := mlbac.check(); err != nil {
		return nil, err
	}
	_node, _spec := mlbac.createSpec()
	if err := sqlgraph.CreateNode(ctx, mlbac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	mlbac.mutation.id = &_node.ID
	mlbac.mutation.done = true
	return _node, nil
}

func (mlbac *MissionLoadBalanceAccessCreate) createSpec() (*MissionLoadBalanceAccess, *sqlgraph.CreateSpec) {
	var (
		_node = &MissionLoadBalanceAccess{config: mlbac.config}
		_spec = sqlgraph.NewCreateSpec(missionloadbalanceaccess.Table, sqlgraph.NewFieldSpec(missionloadbalanceaccess.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = mlbac.conflict
	if id, ok := mlbac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mlbac.mutation.CreatedBy(); ok {
		_spec.SetField(missionloadbalanceaccess.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := mlbac.mutation.UpdatedBy(); ok {
		_spec.SetField(missionloadbalanceaccess.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := mlbac.mutation.CreatedAt(); ok {
		_spec.SetField(missionloadbalanceaccess.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mlbac.mutation.UpdatedAt(); ok {
		_spec.SetField(missionloadbalanceaccess.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mlbac.mutation.DeletedAt(); ok {
		_spec.SetField(missionloadbalanceaccess.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := mlbac.mutation.MissionID(); ok {
		_spec.SetField(missionloadbalanceaccess.FieldMissionID, field.TypeInt64, value)
		_node.MissionID = value
	}
	if value, ok := mlbac.mutation.MissionLoadBalanceID(); ok {
		_spec.SetField(missionloadbalanceaccess.FieldMissionLoadBalanceID, field.TypeInt64, value)
		_node.MissionLoadBalanceID = value
	}
	if value, ok := mlbac.mutation.LastAccess(); ok {
		_spec.SetField(missionloadbalanceaccess.FieldLastAccess, field.TypeTime, value)
		_node.LastAccess = value
	}
	if value, ok := mlbac.mutation.AccessCount(); ok {
		_spec.SetField(missionloadbalanceaccess.FieldAccessCount, field.TypeInt32, value)
		_node.AccessCount = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MissionLoadBalanceAccess.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MissionLoadBalanceAccessUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (mlbac *MissionLoadBalanceAccessCreate) OnConflict(opts ...sql.ConflictOption) *MissionLoadBalanceAccessUpsertOne {
	mlbac.conflict = opts
	return &MissionLoadBalanceAccessUpsertOne{
		create: mlbac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MissionLoadBalanceAccess.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mlbac *MissionLoadBalanceAccessCreate) OnConflictColumns(columns ...string) *MissionLoadBalanceAccessUpsertOne {
	mlbac.conflict = append(mlbac.conflict, sql.ConflictColumns(columns...))
	return &MissionLoadBalanceAccessUpsertOne{
		create: mlbac,
	}
}

type (
	// MissionLoadBalanceAccessUpsertOne is the builder for "upsert"-ing
	//  one MissionLoadBalanceAccess node.
	MissionLoadBalanceAccessUpsertOne struct {
		create *MissionLoadBalanceAccessCreate
	}

	// MissionLoadBalanceAccessUpsert is the "OnConflict" setter.
	MissionLoadBalanceAccessUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *MissionLoadBalanceAccessUpsert) SetCreatedBy(v int64) *MissionLoadBalanceAccessUpsert {
	u.Set(missionloadbalanceaccess.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MissionLoadBalanceAccessUpsert) UpdateCreatedBy() *MissionLoadBalanceAccessUpsert {
	u.SetExcluded(missionloadbalanceaccess.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *MissionLoadBalanceAccessUpsert) AddCreatedBy(v int64) *MissionLoadBalanceAccessUpsert {
	u.Add(missionloadbalanceaccess.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MissionLoadBalanceAccessUpsert) SetUpdatedBy(v int64) *MissionLoadBalanceAccessUpsert {
	u.Set(missionloadbalanceaccess.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MissionLoadBalanceAccessUpsert) UpdateUpdatedBy() *MissionLoadBalanceAccessUpsert {
	u.SetExcluded(missionloadbalanceaccess.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MissionLoadBalanceAccessUpsert) AddUpdatedBy(v int64) *MissionLoadBalanceAccessUpsert {
	u.Add(missionloadbalanceaccess.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MissionLoadBalanceAccessUpsert) SetUpdatedAt(v time.Time) *MissionLoadBalanceAccessUpsert {
	u.Set(missionloadbalanceaccess.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MissionLoadBalanceAccessUpsert) UpdateUpdatedAt() *MissionLoadBalanceAccessUpsert {
	u.SetExcluded(missionloadbalanceaccess.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MissionLoadBalanceAccessUpsert) SetDeletedAt(v time.Time) *MissionLoadBalanceAccessUpsert {
	u.Set(missionloadbalanceaccess.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MissionLoadBalanceAccessUpsert) UpdateDeletedAt() *MissionLoadBalanceAccessUpsert {
	u.SetExcluded(missionloadbalanceaccess.FieldDeletedAt)
	return u
}

// SetMissionID sets the "mission_id" field.
func (u *MissionLoadBalanceAccessUpsert) SetMissionID(v int64) *MissionLoadBalanceAccessUpsert {
	u.Set(missionloadbalanceaccess.FieldMissionID, v)
	return u
}

// UpdateMissionID sets the "mission_id" field to the value that was provided on create.
func (u *MissionLoadBalanceAccessUpsert) UpdateMissionID() *MissionLoadBalanceAccessUpsert {
	u.SetExcluded(missionloadbalanceaccess.FieldMissionID)
	return u
}

// AddMissionID adds v to the "mission_id" field.
func (u *MissionLoadBalanceAccessUpsert) AddMissionID(v int64) *MissionLoadBalanceAccessUpsert {
	u.Add(missionloadbalanceaccess.FieldMissionID, v)
	return u
}

// SetMissionLoadBalanceID sets the "mission_load_balance_id" field.
func (u *MissionLoadBalanceAccessUpsert) SetMissionLoadBalanceID(v int64) *MissionLoadBalanceAccessUpsert {
	u.Set(missionloadbalanceaccess.FieldMissionLoadBalanceID, v)
	return u
}

// UpdateMissionLoadBalanceID sets the "mission_load_balance_id" field to the value that was provided on create.
func (u *MissionLoadBalanceAccessUpsert) UpdateMissionLoadBalanceID() *MissionLoadBalanceAccessUpsert {
	u.SetExcluded(missionloadbalanceaccess.FieldMissionLoadBalanceID)
	return u
}

// AddMissionLoadBalanceID adds v to the "mission_load_balance_id" field.
func (u *MissionLoadBalanceAccessUpsert) AddMissionLoadBalanceID(v int64) *MissionLoadBalanceAccessUpsert {
	u.Add(missionloadbalanceaccess.FieldMissionLoadBalanceID, v)
	return u
}

// SetLastAccess sets the "last_access" field.
func (u *MissionLoadBalanceAccessUpsert) SetLastAccess(v time.Time) *MissionLoadBalanceAccessUpsert {
	u.Set(missionloadbalanceaccess.FieldLastAccess, v)
	return u
}

// UpdateLastAccess sets the "last_access" field to the value that was provided on create.
func (u *MissionLoadBalanceAccessUpsert) UpdateLastAccess() *MissionLoadBalanceAccessUpsert {
	u.SetExcluded(missionloadbalanceaccess.FieldLastAccess)
	return u
}

// SetAccessCount sets the "access_count" field.
func (u *MissionLoadBalanceAccessUpsert) SetAccessCount(v int32) *MissionLoadBalanceAccessUpsert {
	u.Set(missionloadbalanceaccess.FieldAccessCount, v)
	return u
}

// UpdateAccessCount sets the "access_count" field to the value that was provided on create.
func (u *MissionLoadBalanceAccessUpsert) UpdateAccessCount() *MissionLoadBalanceAccessUpsert {
	u.SetExcluded(missionloadbalanceaccess.FieldAccessCount)
	return u
}

// AddAccessCount adds v to the "access_count" field.
func (u *MissionLoadBalanceAccessUpsert) AddAccessCount(v int32) *MissionLoadBalanceAccessUpsert {
	u.Add(missionloadbalanceaccess.FieldAccessCount, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MissionLoadBalanceAccess.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(missionloadbalanceaccess.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MissionLoadBalanceAccessUpsertOne) UpdateNewValues() *MissionLoadBalanceAccessUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(missionloadbalanceaccess.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(missionloadbalanceaccess.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MissionLoadBalanceAccess.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MissionLoadBalanceAccessUpsertOne) Ignore() *MissionLoadBalanceAccessUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MissionLoadBalanceAccessUpsertOne) DoNothing() *MissionLoadBalanceAccessUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MissionLoadBalanceAccessCreate.OnConflict
// documentation for more info.
func (u *MissionLoadBalanceAccessUpsertOne) Update(set func(*MissionLoadBalanceAccessUpsert)) *MissionLoadBalanceAccessUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MissionLoadBalanceAccessUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *MissionLoadBalanceAccessUpsertOne) SetCreatedBy(v int64) *MissionLoadBalanceAccessUpsertOne {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *MissionLoadBalanceAccessUpsertOne) AddCreatedBy(v int64) *MissionLoadBalanceAccessUpsertOne {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MissionLoadBalanceAccessUpsertOne) UpdateCreatedBy() *MissionLoadBalanceAccessUpsertOne {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MissionLoadBalanceAccessUpsertOne) SetUpdatedBy(v int64) *MissionLoadBalanceAccessUpsertOne {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MissionLoadBalanceAccessUpsertOne) AddUpdatedBy(v int64) *MissionLoadBalanceAccessUpsertOne {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MissionLoadBalanceAccessUpsertOne) UpdateUpdatedBy() *MissionLoadBalanceAccessUpsertOne {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MissionLoadBalanceAccessUpsertOne) SetUpdatedAt(v time.Time) *MissionLoadBalanceAccessUpsertOne {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MissionLoadBalanceAccessUpsertOne) UpdateUpdatedAt() *MissionLoadBalanceAccessUpsertOne {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MissionLoadBalanceAccessUpsertOne) SetDeletedAt(v time.Time) *MissionLoadBalanceAccessUpsertOne {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MissionLoadBalanceAccessUpsertOne) UpdateDeletedAt() *MissionLoadBalanceAccessUpsertOne {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetMissionID sets the "mission_id" field.
func (u *MissionLoadBalanceAccessUpsertOne) SetMissionID(v int64) *MissionLoadBalanceAccessUpsertOne {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.SetMissionID(v)
	})
}

// AddMissionID adds v to the "mission_id" field.
func (u *MissionLoadBalanceAccessUpsertOne) AddMissionID(v int64) *MissionLoadBalanceAccessUpsertOne {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.AddMissionID(v)
	})
}

// UpdateMissionID sets the "mission_id" field to the value that was provided on create.
func (u *MissionLoadBalanceAccessUpsertOne) UpdateMissionID() *MissionLoadBalanceAccessUpsertOne {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.UpdateMissionID()
	})
}

// SetMissionLoadBalanceID sets the "mission_load_balance_id" field.
func (u *MissionLoadBalanceAccessUpsertOne) SetMissionLoadBalanceID(v int64) *MissionLoadBalanceAccessUpsertOne {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.SetMissionLoadBalanceID(v)
	})
}

// AddMissionLoadBalanceID adds v to the "mission_load_balance_id" field.
func (u *MissionLoadBalanceAccessUpsertOne) AddMissionLoadBalanceID(v int64) *MissionLoadBalanceAccessUpsertOne {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.AddMissionLoadBalanceID(v)
	})
}

// UpdateMissionLoadBalanceID sets the "mission_load_balance_id" field to the value that was provided on create.
func (u *MissionLoadBalanceAccessUpsertOne) UpdateMissionLoadBalanceID() *MissionLoadBalanceAccessUpsertOne {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.UpdateMissionLoadBalanceID()
	})
}

// SetLastAccess sets the "last_access" field.
func (u *MissionLoadBalanceAccessUpsertOne) SetLastAccess(v time.Time) *MissionLoadBalanceAccessUpsertOne {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.SetLastAccess(v)
	})
}

// UpdateLastAccess sets the "last_access" field to the value that was provided on create.
func (u *MissionLoadBalanceAccessUpsertOne) UpdateLastAccess() *MissionLoadBalanceAccessUpsertOne {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.UpdateLastAccess()
	})
}

// SetAccessCount sets the "access_count" field.
func (u *MissionLoadBalanceAccessUpsertOne) SetAccessCount(v int32) *MissionLoadBalanceAccessUpsertOne {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.SetAccessCount(v)
	})
}

// AddAccessCount adds v to the "access_count" field.
func (u *MissionLoadBalanceAccessUpsertOne) AddAccessCount(v int32) *MissionLoadBalanceAccessUpsertOne {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.AddAccessCount(v)
	})
}

// UpdateAccessCount sets the "access_count" field to the value that was provided on create.
func (u *MissionLoadBalanceAccessUpsertOne) UpdateAccessCount() *MissionLoadBalanceAccessUpsertOne {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.UpdateAccessCount()
	})
}

// Exec executes the query.
func (u *MissionLoadBalanceAccessUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for MissionLoadBalanceAccessCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MissionLoadBalanceAccessUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MissionLoadBalanceAccessUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MissionLoadBalanceAccessUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MissionLoadBalanceAccessCreateBulk is the builder for creating many MissionLoadBalanceAccess entities in bulk.
type MissionLoadBalanceAccessCreateBulk struct {
	config
	err      error
	builders []*MissionLoadBalanceAccessCreate
	conflict []sql.ConflictOption
}

// Save creates the MissionLoadBalanceAccess entities in the database.
func (mlbacb *MissionLoadBalanceAccessCreateBulk) Save(ctx context.Context) ([]*MissionLoadBalanceAccess, error) {
	if mlbacb.err != nil {
		return nil, mlbacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mlbacb.builders))
	nodes := make([]*MissionLoadBalanceAccess, len(mlbacb.builders))
	mutators := make([]Mutator, len(mlbacb.builders))
	for i := range mlbacb.builders {
		func(i int, root context.Context) {
			builder := mlbacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MissionLoadBalanceAccessMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mlbacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mlbacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mlbacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mlbacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mlbacb *MissionLoadBalanceAccessCreateBulk) SaveX(ctx context.Context) []*MissionLoadBalanceAccess {
	v, err := mlbacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mlbacb *MissionLoadBalanceAccessCreateBulk) Exec(ctx context.Context) error {
	_, err := mlbacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mlbacb *MissionLoadBalanceAccessCreateBulk) ExecX(ctx context.Context) {
	if err := mlbacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MissionLoadBalanceAccess.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MissionLoadBalanceAccessUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (mlbacb *MissionLoadBalanceAccessCreateBulk) OnConflict(opts ...sql.ConflictOption) *MissionLoadBalanceAccessUpsertBulk {
	mlbacb.conflict = opts
	return &MissionLoadBalanceAccessUpsertBulk{
		create: mlbacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MissionLoadBalanceAccess.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mlbacb *MissionLoadBalanceAccessCreateBulk) OnConflictColumns(columns ...string) *MissionLoadBalanceAccessUpsertBulk {
	mlbacb.conflict = append(mlbacb.conflict, sql.ConflictColumns(columns...))
	return &MissionLoadBalanceAccessUpsertBulk{
		create: mlbacb,
	}
}

// MissionLoadBalanceAccessUpsertBulk is the builder for "upsert"-ing
// a bulk of MissionLoadBalanceAccess nodes.
type MissionLoadBalanceAccessUpsertBulk struct {
	create *MissionLoadBalanceAccessCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MissionLoadBalanceAccess.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(missionloadbalanceaccess.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MissionLoadBalanceAccessUpsertBulk) UpdateNewValues() *MissionLoadBalanceAccessUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(missionloadbalanceaccess.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(missionloadbalanceaccess.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MissionLoadBalanceAccess.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MissionLoadBalanceAccessUpsertBulk) Ignore() *MissionLoadBalanceAccessUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MissionLoadBalanceAccessUpsertBulk) DoNothing() *MissionLoadBalanceAccessUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MissionLoadBalanceAccessCreateBulk.OnConflict
// documentation for more info.
func (u *MissionLoadBalanceAccessUpsertBulk) Update(set func(*MissionLoadBalanceAccessUpsert)) *MissionLoadBalanceAccessUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MissionLoadBalanceAccessUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *MissionLoadBalanceAccessUpsertBulk) SetCreatedBy(v int64) *MissionLoadBalanceAccessUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *MissionLoadBalanceAccessUpsertBulk) AddCreatedBy(v int64) *MissionLoadBalanceAccessUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MissionLoadBalanceAccessUpsertBulk) UpdateCreatedBy() *MissionLoadBalanceAccessUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MissionLoadBalanceAccessUpsertBulk) SetUpdatedBy(v int64) *MissionLoadBalanceAccessUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MissionLoadBalanceAccessUpsertBulk) AddUpdatedBy(v int64) *MissionLoadBalanceAccessUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MissionLoadBalanceAccessUpsertBulk) UpdateUpdatedBy() *MissionLoadBalanceAccessUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MissionLoadBalanceAccessUpsertBulk) SetUpdatedAt(v time.Time) *MissionLoadBalanceAccessUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MissionLoadBalanceAccessUpsertBulk) UpdateUpdatedAt() *MissionLoadBalanceAccessUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MissionLoadBalanceAccessUpsertBulk) SetDeletedAt(v time.Time) *MissionLoadBalanceAccessUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MissionLoadBalanceAccessUpsertBulk) UpdateDeletedAt() *MissionLoadBalanceAccessUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetMissionID sets the "mission_id" field.
func (u *MissionLoadBalanceAccessUpsertBulk) SetMissionID(v int64) *MissionLoadBalanceAccessUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.SetMissionID(v)
	})
}

// AddMissionID adds v to the "mission_id" field.
func (u *MissionLoadBalanceAccessUpsertBulk) AddMissionID(v int64) *MissionLoadBalanceAccessUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.AddMissionID(v)
	})
}

// UpdateMissionID sets the "mission_id" field to the value that was provided on create.
func (u *MissionLoadBalanceAccessUpsertBulk) UpdateMissionID() *MissionLoadBalanceAccessUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.UpdateMissionID()
	})
}

// SetMissionLoadBalanceID sets the "mission_load_balance_id" field.
func (u *MissionLoadBalanceAccessUpsertBulk) SetMissionLoadBalanceID(v int64) *MissionLoadBalanceAccessUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.SetMissionLoadBalanceID(v)
	})
}

// AddMissionLoadBalanceID adds v to the "mission_load_balance_id" field.
func (u *MissionLoadBalanceAccessUpsertBulk) AddMissionLoadBalanceID(v int64) *MissionLoadBalanceAccessUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.AddMissionLoadBalanceID(v)
	})
}

// UpdateMissionLoadBalanceID sets the "mission_load_balance_id" field to the value that was provided on create.
func (u *MissionLoadBalanceAccessUpsertBulk) UpdateMissionLoadBalanceID() *MissionLoadBalanceAccessUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.UpdateMissionLoadBalanceID()
	})
}

// SetLastAccess sets the "last_access" field.
func (u *MissionLoadBalanceAccessUpsertBulk) SetLastAccess(v time.Time) *MissionLoadBalanceAccessUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.SetLastAccess(v)
	})
}

// UpdateLastAccess sets the "last_access" field to the value that was provided on create.
func (u *MissionLoadBalanceAccessUpsertBulk) UpdateLastAccess() *MissionLoadBalanceAccessUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.UpdateLastAccess()
	})
}

// SetAccessCount sets the "access_count" field.
func (u *MissionLoadBalanceAccessUpsertBulk) SetAccessCount(v int32) *MissionLoadBalanceAccessUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.SetAccessCount(v)
	})
}

// AddAccessCount adds v to the "access_count" field.
func (u *MissionLoadBalanceAccessUpsertBulk) AddAccessCount(v int32) *MissionLoadBalanceAccessUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.AddAccessCount(v)
	})
}

// UpdateAccessCount sets the "access_count" field to the value that was provided on create.
func (u *MissionLoadBalanceAccessUpsertBulk) UpdateAccessCount() *MissionLoadBalanceAccessUpsertBulk {
	return u.Update(func(s *MissionLoadBalanceAccessUpsert) {
		s.UpdateAccessCount()
	})
}

// Exec executes the query.
func (u *MissionLoadBalanceAccessUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the MissionLoadBalanceAccessCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for MissionLoadBalanceAccessCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MissionLoadBalanceAccessUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
