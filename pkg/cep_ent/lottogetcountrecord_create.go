// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lotto"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottogetcountrecord"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// LottoGetCountRecordCreate is the builder for creating a LottoGetCountRecord entity.
type LottoGetCountRecordCreate struct {
	config
	mutation *LottoGetCountRecordMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (lgcrc *LottoGetCountRecordCreate) SetCreatedBy(i int64) *LottoGetCountRecordCreate {
	lgcrc.mutation.SetCreatedBy(i)
	return lgcrc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (lgcrc *LottoGetCountRecordCreate) SetNillableCreatedBy(i *int64) *LottoGetCountRecordCreate {
	if i != nil {
		lgcrc.SetCreatedBy(*i)
	}
	return lgcrc
}

// SetUpdatedBy sets the "updated_by" field.
func (lgcrc *LottoGetCountRecordCreate) SetUpdatedBy(i int64) *LottoGetCountRecordCreate {
	lgcrc.mutation.SetUpdatedBy(i)
	return lgcrc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (lgcrc *LottoGetCountRecordCreate) SetNillableUpdatedBy(i *int64) *LottoGetCountRecordCreate {
	if i != nil {
		lgcrc.SetUpdatedBy(*i)
	}
	return lgcrc
}

// SetCreatedAt sets the "created_at" field.
func (lgcrc *LottoGetCountRecordCreate) SetCreatedAt(t time.Time) *LottoGetCountRecordCreate {
	lgcrc.mutation.SetCreatedAt(t)
	return lgcrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lgcrc *LottoGetCountRecordCreate) SetNillableCreatedAt(t *time.Time) *LottoGetCountRecordCreate {
	if t != nil {
		lgcrc.SetCreatedAt(*t)
	}
	return lgcrc
}

// SetUpdatedAt sets the "updated_at" field.
func (lgcrc *LottoGetCountRecordCreate) SetUpdatedAt(t time.Time) *LottoGetCountRecordCreate {
	lgcrc.mutation.SetUpdatedAt(t)
	return lgcrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lgcrc *LottoGetCountRecordCreate) SetNillableUpdatedAt(t *time.Time) *LottoGetCountRecordCreate {
	if t != nil {
		lgcrc.SetUpdatedAt(*t)
	}
	return lgcrc
}

// SetDeletedAt sets the "deleted_at" field.
func (lgcrc *LottoGetCountRecordCreate) SetDeletedAt(t time.Time) *LottoGetCountRecordCreate {
	lgcrc.mutation.SetDeletedAt(t)
	return lgcrc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lgcrc *LottoGetCountRecordCreate) SetNillableDeletedAt(t *time.Time) *LottoGetCountRecordCreate {
	if t != nil {
		lgcrc.SetDeletedAt(*t)
	}
	return lgcrc
}

// SetUserID sets the "user_id" field.
func (lgcrc *LottoGetCountRecordCreate) SetUserID(i int64) *LottoGetCountRecordCreate {
	lgcrc.mutation.SetUserID(i)
	return lgcrc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (lgcrc *LottoGetCountRecordCreate) SetNillableUserID(i *int64) *LottoGetCountRecordCreate {
	if i != nil {
		lgcrc.SetUserID(*i)
	}
	return lgcrc
}

// SetLottoID sets the "lotto_id" field.
func (lgcrc *LottoGetCountRecordCreate) SetLottoID(i int64) *LottoGetCountRecordCreate {
	lgcrc.mutation.SetLottoID(i)
	return lgcrc
}

// SetNillableLottoID sets the "lotto_id" field if the given value is not nil.
func (lgcrc *LottoGetCountRecordCreate) SetNillableLottoID(i *int64) *LottoGetCountRecordCreate {
	if i != nil {
		lgcrc.SetLottoID(*i)
	}
	return lgcrc
}

// SetCount sets the "count" field.
func (lgcrc *LottoGetCountRecordCreate) SetCount(i int64) *LottoGetCountRecordCreate {
	lgcrc.mutation.SetCount(i)
	return lgcrc
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (lgcrc *LottoGetCountRecordCreate) SetNillableCount(i *int64) *LottoGetCountRecordCreate {
	if i != nil {
		lgcrc.SetCount(*i)
	}
	return lgcrc
}

// SetType sets the "type" field.
func (lgcrc *LottoGetCountRecordCreate) SetType(ec enums.LottoCondition) *LottoGetCountRecordCreate {
	lgcrc.mutation.SetType(ec)
	return lgcrc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (lgcrc *LottoGetCountRecordCreate) SetNillableType(ec *enums.LottoCondition) *LottoGetCountRecordCreate {
	if ec != nil {
		lgcrc.SetType(*ec)
	}
	return lgcrc
}

// SetRechargeAmount sets the "recharge_amount" field.
func (lgcrc *LottoGetCountRecordCreate) SetRechargeAmount(i int64) *LottoGetCountRecordCreate {
	lgcrc.mutation.SetRechargeAmount(i)
	return lgcrc
}

// SetNillableRechargeAmount sets the "recharge_amount" field if the given value is not nil.
func (lgcrc *LottoGetCountRecordCreate) SetNillableRechargeAmount(i *int64) *LottoGetCountRecordCreate {
	if i != nil {
		lgcrc.SetRechargeAmount(*i)
	}
	return lgcrc
}

// SetID sets the "id" field.
func (lgcrc *LottoGetCountRecordCreate) SetID(i int64) *LottoGetCountRecordCreate {
	lgcrc.mutation.SetID(i)
	return lgcrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lgcrc *LottoGetCountRecordCreate) SetNillableID(i *int64) *LottoGetCountRecordCreate {
	if i != nil {
		lgcrc.SetID(*i)
	}
	return lgcrc
}

// SetUser sets the "user" edge to the User entity.
func (lgcrc *LottoGetCountRecordCreate) SetUser(u *User) *LottoGetCountRecordCreate {
	return lgcrc.SetUserID(u.ID)
}

// SetLotto sets the "lotto" edge to the Lotto entity.
func (lgcrc *LottoGetCountRecordCreate) SetLotto(l *Lotto) *LottoGetCountRecordCreate {
	return lgcrc.SetLottoID(l.ID)
}

// Mutation returns the LottoGetCountRecordMutation object of the builder.
func (lgcrc *LottoGetCountRecordCreate) Mutation() *LottoGetCountRecordMutation {
	return lgcrc.mutation
}

// Save creates the LottoGetCountRecord in the database.
func (lgcrc *LottoGetCountRecordCreate) Save(ctx context.Context) (*LottoGetCountRecord, error) {
	lgcrc.defaults()
	return withHooks(ctx, lgcrc.sqlSave, lgcrc.mutation, lgcrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lgcrc *LottoGetCountRecordCreate) SaveX(ctx context.Context) *LottoGetCountRecord {
	v, err := lgcrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lgcrc *LottoGetCountRecordCreate) Exec(ctx context.Context) error {
	_, err := lgcrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lgcrc *LottoGetCountRecordCreate) ExecX(ctx context.Context) {
	if err := lgcrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lgcrc *LottoGetCountRecordCreate) defaults() {
	if _, ok := lgcrc.mutation.CreatedBy(); !ok {
		v := lottogetcountrecord.DefaultCreatedBy
		lgcrc.mutation.SetCreatedBy(v)
	}
	if _, ok := lgcrc.mutation.UpdatedBy(); !ok {
		v := lottogetcountrecord.DefaultUpdatedBy
		lgcrc.mutation.SetUpdatedBy(v)
	}
	if _, ok := lgcrc.mutation.CreatedAt(); !ok {
		v := lottogetcountrecord.DefaultCreatedAt()
		lgcrc.mutation.SetCreatedAt(v)
	}
	if _, ok := lgcrc.mutation.UpdatedAt(); !ok {
		v := lottogetcountrecord.DefaultUpdatedAt()
		lgcrc.mutation.SetUpdatedAt(v)
	}
	if _, ok := lgcrc.mutation.DeletedAt(); !ok {
		v := lottogetcountrecord.DefaultDeletedAt
		lgcrc.mutation.SetDeletedAt(v)
	}
	if _, ok := lgcrc.mutation.UserID(); !ok {
		v := lottogetcountrecord.DefaultUserID
		lgcrc.mutation.SetUserID(v)
	}
	if _, ok := lgcrc.mutation.LottoID(); !ok {
		v := lottogetcountrecord.DefaultLottoID
		lgcrc.mutation.SetLottoID(v)
	}
	if _, ok := lgcrc.mutation.Count(); !ok {
		v := lottogetcountrecord.DefaultCount
		lgcrc.mutation.SetCount(v)
	}
	if _, ok := lgcrc.mutation.GetType(); !ok {
		v := lottogetcountrecord.DefaultType
		lgcrc.mutation.SetType(v)
	}
	if _, ok := lgcrc.mutation.RechargeAmount(); !ok {
		v := lottogetcountrecord.DefaultRechargeAmount
		lgcrc.mutation.SetRechargeAmount(v)
	}
	if _, ok := lgcrc.mutation.ID(); !ok {
		v := lottogetcountrecord.DefaultID()
		lgcrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lgcrc *LottoGetCountRecordCreate) check() error {
	if _, ok := lgcrc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "LottoGetCountRecord.created_by"`)}
	}
	if _, ok := lgcrc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "LottoGetCountRecord.updated_by"`)}
	}
	if _, ok := lgcrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "LottoGetCountRecord.created_at"`)}
	}
	if _, ok := lgcrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "LottoGetCountRecord.updated_at"`)}
	}
	if _, ok := lgcrc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "LottoGetCountRecord.deleted_at"`)}
	}
	if _, ok := lgcrc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "LottoGetCountRecord.user_id"`)}
	}
	if _, ok := lgcrc.mutation.LottoID(); !ok {
		return &ValidationError{Name: "lotto_id", err: errors.New(`cep_ent: missing required field "LottoGetCountRecord.lotto_id"`)}
	}
	if _, ok := lgcrc.mutation.Count(); !ok {
		return &ValidationError{Name: "count", err: errors.New(`cep_ent: missing required field "LottoGetCountRecord.count"`)}
	}
	if _, ok := lgcrc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`cep_ent: missing required field "LottoGetCountRecord.type"`)}
	}
	if v, ok := lgcrc.mutation.GetType(); ok {
		if err := lottogetcountrecord.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "LottoGetCountRecord.type": %w`, err)}
		}
	}
	if _, ok := lgcrc.mutation.RechargeAmount(); !ok {
		return &ValidationError{Name: "recharge_amount", err: errors.New(`cep_ent: missing required field "LottoGetCountRecord.recharge_amount"`)}
	}
	if _, ok := lgcrc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "LottoGetCountRecord.user"`)}
	}
	if _, ok := lgcrc.mutation.LottoID(); !ok {
		return &ValidationError{Name: "lotto", err: errors.New(`cep_ent: missing required edge "LottoGetCountRecord.lotto"`)}
	}
	return nil
}

func (lgcrc *LottoGetCountRecordCreate) sqlSave(ctx context.Context) (*LottoGetCountRecord, error) {
	if err := lgcrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lgcrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lgcrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	lgcrc.mutation.id = &_node.ID
	lgcrc.mutation.done = true
	return _node, nil
}

func (lgcrc *LottoGetCountRecordCreate) createSpec() (*LottoGetCountRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &LottoGetCountRecord{config: lgcrc.config}
		_spec = sqlgraph.NewCreateSpec(lottogetcountrecord.Table, sqlgraph.NewFieldSpec(lottogetcountrecord.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = lgcrc.conflict
	if id, ok := lgcrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lgcrc.mutation.CreatedBy(); ok {
		_spec.SetField(lottogetcountrecord.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := lgcrc.mutation.UpdatedBy(); ok {
		_spec.SetField(lottogetcountrecord.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := lgcrc.mutation.CreatedAt(); ok {
		_spec.SetField(lottogetcountrecord.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lgcrc.mutation.UpdatedAt(); ok {
		_spec.SetField(lottogetcountrecord.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := lgcrc.mutation.DeletedAt(); ok {
		_spec.SetField(lottogetcountrecord.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := lgcrc.mutation.Count(); ok {
		_spec.SetField(lottogetcountrecord.FieldCount, field.TypeInt64, value)
		_node.Count = value
	}
	if value, ok := lgcrc.mutation.GetType(); ok {
		_spec.SetField(lottogetcountrecord.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := lgcrc.mutation.RechargeAmount(); ok {
		_spec.SetField(lottogetcountrecord.FieldRechargeAmount, field.TypeInt64, value)
		_node.RechargeAmount = value
	}
	if nodes := lgcrc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottogetcountrecord.UserTable,
			Columns: []string{lottogetcountrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lgcrc.mutation.LottoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottogetcountrecord.LottoTable,
			Columns: []string{lottogetcountrecord.LottoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lotto.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LottoID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LottoGetCountRecord.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LottoGetCountRecordUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (lgcrc *LottoGetCountRecordCreate) OnConflict(opts ...sql.ConflictOption) *LottoGetCountRecordUpsertOne {
	lgcrc.conflict = opts
	return &LottoGetCountRecordUpsertOne{
		create: lgcrc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LottoGetCountRecord.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lgcrc *LottoGetCountRecordCreate) OnConflictColumns(columns ...string) *LottoGetCountRecordUpsertOne {
	lgcrc.conflict = append(lgcrc.conflict, sql.ConflictColumns(columns...))
	return &LottoGetCountRecordUpsertOne{
		create: lgcrc,
	}
}

type (
	// LottoGetCountRecordUpsertOne is the builder for "upsert"-ing
	//  one LottoGetCountRecord node.
	LottoGetCountRecordUpsertOne struct {
		create *LottoGetCountRecordCreate
	}

	// LottoGetCountRecordUpsert is the "OnConflict" setter.
	LottoGetCountRecordUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *LottoGetCountRecordUpsert) SetCreatedBy(v int64) *LottoGetCountRecordUpsert {
	u.Set(lottogetcountrecord.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *LottoGetCountRecordUpsert) UpdateCreatedBy() *LottoGetCountRecordUpsert {
	u.SetExcluded(lottogetcountrecord.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *LottoGetCountRecordUpsert) AddCreatedBy(v int64) *LottoGetCountRecordUpsert {
	u.Add(lottogetcountrecord.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *LottoGetCountRecordUpsert) SetUpdatedBy(v int64) *LottoGetCountRecordUpsert {
	u.Set(lottogetcountrecord.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *LottoGetCountRecordUpsert) UpdateUpdatedBy() *LottoGetCountRecordUpsert {
	u.SetExcluded(lottogetcountrecord.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *LottoGetCountRecordUpsert) AddUpdatedBy(v int64) *LottoGetCountRecordUpsert {
	u.Add(lottogetcountrecord.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LottoGetCountRecordUpsert) SetUpdatedAt(v time.Time) *LottoGetCountRecordUpsert {
	u.Set(lottogetcountrecord.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LottoGetCountRecordUpsert) UpdateUpdatedAt() *LottoGetCountRecordUpsert {
	u.SetExcluded(lottogetcountrecord.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LottoGetCountRecordUpsert) SetDeletedAt(v time.Time) *LottoGetCountRecordUpsert {
	u.Set(lottogetcountrecord.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LottoGetCountRecordUpsert) UpdateDeletedAt() *LottoGetCountRecordUpsert {
	u.SetExcluded(lottogetcountrecord.FieldDeletedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *LottoGetCountRecordUpsert) SetUserID(v int64) *LottoGetCountRecordUpsert {
	u.Set(lottogetcountrecord.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *LottoGetCountRecordUpsert) UpdateUserID() *LottoGetCountRecordUpsert {
	u.SetExcluded(lottogetcountrecord.FieldUserID)
	return u
}

// SetLottoID sets the "lotto_id" field.
func (u *LottoGetCountRecordUpsert) SetLottoID(v int64) *LottoGetCountRecordUpsert {
	u.Set(lottogetcountrecord.FieldLottoID, v)
	return u
}

// UpdateLottoID sets the "lotto_id" field to the value that was provided on create.
func (u *LottoGetCountRecordUpsert) UpdateLottoID() *LottoGetCountRecordUpsert {
	u.SetExcluded(lottogetcountrecord.FieldLottoID)
	return u
}

// SetCount sets the "count" field.
func (u *LottoGetCountRecordUpsert) SetCount(v int64) *LottoGetCountRecordUpsert {
	u.Set(lottogetcountrecord.FieldCount, v)
	return u
}

// UpdateCount sets the "count" field to the value that was provided on create.
func (u *LottoGetCountRecordUpsert) UpdateCount() *LottoGetCountRecordUpsert {
	u.SetExcluded(lottogetcountrecord.FieldCount)
	return u
}

// AddCount adds v to the "count" field.
func (u *LottoGetCountRecordUpsert) AddCount(v int64) *LottoGetCountRecordUpsert {
	u.Add(lottogetcountrecord.FieldCount, v)
	return u
}

// SetType sets the "type" field.
func (u *LottoGetCountRecordUpsert) SetType(v enums.LottoCondition) *LottoGetCountRecordUpsert {
	u.Set(lottogetcountrecord.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *LottoGetCountRecordUpsert) UpdateType() *LottoGetCountRecordUpsert {
	u.SetExcluded(lottogetcountrecord.FieldType)
	return u
}

// SetRechargeAmount sets the "recharge_amount" field.
func (u *LottoGetCountRecordUpsert) SetRechargeAmount(v int64) *LottoGetCountRecordUpsert {
	u.Set(lottogetcountrecord.FieldRechargeAmount, v)
	return u
}

// UpdateRechargeAmount sets the "recharge_amount" field to the value that was provided on create.
func (u *LottoGetCountRecordUpsert) UpdateRechargeAmount() *LottoGetCountRecordUpsert {
	u.SetExcluded(lottogetcountrecord.FieldRechargeAmount)
	return u
}

// AddRechargeAmount adds v to the "recharge_amount" field.
func (u *LottoGetCountRecordUpsert) AddRechargeAmount(v int64) *LottoGetCountRecordUpsert {
	u.Add(lottogetcountrecord.FieldRechargeAmount, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.LottoGetCountRecord.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(lottogetcountrecord.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LottoGetCountRecordUpsertOne) UpdateNewValues() *LottoGetCountRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(lottogetcountrecord.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(lottogetcountrecord.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LottoGetCountRecord.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LottoGetCountRecordUpsertOne) Ignore() *LottoGetCountRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LottoGetCountRecordUpsertOne) DoNothing() *LottoGetCountRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LottoGetCountRecordCreate.OnConflict
// documentation for more info.
func (u *LottoGetCountRecordUpsertOne) Update(set func(*LottoGetCountRecordUpsert)) *LottoGetCountRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LottoGetCountRecordUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *LottoGetCountRecordUpsertOne) SetCreatedBy(v int64) *LottoGetCountRecordUpsertOne {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *LottoGetCountRecordUpsertOne) AddCreatedBy(v int64) *LottoGetCountRecordUpsertOne {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *LottoGetCountRecordUpsertOne) UpdateCreatedBy() *LottoGetCountRecordUpsertOne {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *LottoGetCountRecordUpsertOne) SetUpdatedBy(v int64) *LottoGetCountRecordUpsertOne {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *LottoGetCountRecordUpsertOne) AddUpdatedBy(v int64) *LottoGetCountRecordUpsertOne {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *LottoGetCountRecordUpsertOne) UpdateUpdatedBy() *LottoGetCountRecordUpsertOne {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LottoGetCountRecordUpsertOne) SetUpdatedAt(v time.Time) *LottoGetCountRecordUpsertOne {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LottoGetCountRecordUpsertOne) UpdateUpdatedAt() *LottoGetCountRecordUpsertOne {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LottoGetCountRecordUpsertOne) SetDeletedAt(v time.Time) *LottoGetCountRecordUpsertOne {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LottoGetCountRecordUpsertOne) UpdateDeletedAt() *LottoGetCountRecordUpsertOne {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *LottoGetCountRecordUpsertOne) SetUserID(v int64) *LottoGetCountRecordUpsertOne {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *LottoGetCountRecordUpsertOne) UpdateUserID() *LottoGetCountRecordUpsertOne {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.UpdateUserID()
	})
}

// SetLottoID sets the "lotto_id" field.
func (u *LottoGetCountRecordUpsertOne) SetLottoID(v int64) *LottoGetCountRecordUpsertOne {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.SetLottoID(v)
	})
}

// UpdateLottoID sets the "lotto_id" field to the value that was provided on create.
func (u *LottoGetCountRecordUpsertOne) UpdateLottoID() *LottoGetCountRecordUpsertOne {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.UpdateLottoID()
	})
}

// SetCount sets the "count" field.
func (u *LottoGetCountRecordUpsertOne) SetCount(v int64) *LottoGetCountRecordUpsertOne {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.SetCount(v)
	})
}

// AddCount adds v to the "count" field.
func (u *LottoGetCountRecordUpsertOne) AddCount(v int64) *LottoGetCountRecordUpsertOne {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.AddCount(v)
	})
}

// UpdateCount sets the "count" field to the value that was provided on create.
func (u *LottoGetCountRecordUpsertOne) UpdateCount() *LottoGetCountRecordUpsertOne {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.UpdateCount()
	})
}

// SetType sets the "type" field.
func (u *LottoGetCountRecordUpsertOne) SetType(v enums.LottoCondition) *LottoGetCountRecordUpsertOne {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *LottoGetCountRecordUpsertOne) UpdateType() *LottoGetCountRecordUpsertOne {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.UpdateType()
	})
}

// SetRechargeAmount sets the "recharge_amount" field.
func (u *LottoGetCountRecordUpsertOne) SetRechargeAmount(v int64) *LottoGetCountRecordUpsertOne {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.SetRechargeAmount(v)
	})
}

// AddRechargeAmount adds v to the "recharge_amount" field.
func (u *LottoGetCountRecordUpsertOne) AddRechargeAmount(v int64) *LottoGetCountRecordUpsertOne {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.AddRechargeAmount(v)
	})
}

// UpdateRechargeAmount sets the "recharge_amount" field to the value that was provided on create.
func (u *LottoGetCountRecordUpsertOne) UpdateRechargeAmount() *LottoGetCountRecordUpsertOne {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.UpdateRechargeAmount()
	})
}

// Exec executes the query.
func (u *LottoGetCountRecordUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for LottoGetCountRecordCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LottoGetCountRecordUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LottoGetCountRecordUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LottoGetCountRecordUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LottoGetCountRecordCreateBulk is the builder for creating many LottoGetCountRecord entities in bulk.
type LottoGetCountRecordCreateBulk struct {
	config
	err      error
	builders []*LottoGetCountRecordCreate
	conflict []sql.ConflictOption
}

// Save creates the LottoGetCountRecord entities in the database.
func (lgcrcb *LottoGetCountRecordCreateBulk) Save(ctx context.Context) ([]*LottoGetCountRecord, error) {
	if lgcrcb.err != nil {
		return nil, lgcrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lgcrcb.builders))
	nodes := make([]*LottoGetCountRecord, len(lgcrcb.builders))
	mutators := make([]Mutator, len(lgcrcb.builders))
	for i := range lgcrcb.builders {
		func(i int, root context.Context) {
			builder := lgcrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LottoGetCountRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lgcrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lgcrcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lgcrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lgcrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lgcrcb *LottoGetCountRecordCreateBulk) SaveX(ctx context.Context) []*LottoGetCountRecord {
	v, err := lgcrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lgcrcb *LottoGetCountRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := lgcrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lgcrcb *LottoGetCountRecordCreateBulk) ExecX(ctx context.Context) {
	if err := lgcrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LottoGetCountRecord.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LottoGetCountRecordUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (lgcrcb *LottoGetCountRecordCreateBulk) OnConflict(opts ...sql.ConflictOption) *LottoGetCountRecordUpsertBulk {
	lgcrcb.conflict = opts
	return &LottoGetCountRecordUpsertBulk{
		create: lgcrcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LottoGetCountRecord.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lgcrcb *LottoGetCountRecordCreateBulk) OnConflictColumns(columns ...string) *LottoGetCountRecordUpsertBulk {
	lgcrcb.conflict = append(lgcrcb.conflict, sql.ConflictColumns(columns...))
	return &LottoGetCountRecordUpsertBulk{
		create: lgcrcb,
	}
}

// LottoGetCountRecordUpsertBulk is the builder for "upsert"-ing
// a bulk of LottoGetCountRecord nodes.
type LottoGetCountRecordUpsertBulk struct {
	create *LottoGetCountRecordCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.LottoGetCountRecord.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(lottogetcountrecord.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LottoGetCountRecordUpsertBulk) UpdateNewValues() *LottoGetCountRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(lottogetcountrecord.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(lottogetcountrecord.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LottoGetCountRecord.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LottoGetCountRecordUpsertBulk) Ignore() *LottoGetCountRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LottoGetCountRecordUpsertBulk) DoNothing() *LottoGetCountRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LottoGetCountRecordCreateBulk.OnConflict
// documentation for more info.
func (u *LottoGetCountRecordUpsertBulk) Update(set func(*LottoGetCountRecordUpsert)) *LottoGetCountRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LottoGetCountRecordUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *LottoGetCountRecordUpsertBulk) SetCreatedBy(v int64) *LottoGetCountRecordUpsertBulk {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *LottoGetCountRecordUpsertBulk) AddCreatedBy(v int64) *LottoGetCountRecordUpsertBulk {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *LottoGetCountRecordUpsertBulk) UpdateCreatedBy() *LottoGetCountRecordUpsertBulk {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *LottoGetCountRecordUpsertBulk) SetUpdatedBy(v int64) *LottoGetCountRecordUpsertBulk {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *LottoGetCountRecordUpsertBulk) AddUpdatedBy(v int64) *LottoGetCountRecordUpsertBulk {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *LottoGetCountRecordUpsertBulk) UpdateUpdatedBy() *LottoGetCountRecordUpsertBulk {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LottoGetCountRecordUpsertBulk) SetUpdatedAt(v time.Time) *LottoGetCountRecordUpsertBulk {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LottoGetCountRecordUpsertBulk) UpdateUpdatedAt() *LottoGetCountRecordUpsertBulk {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LottoGetCountRecordUpsertBulk) SetDeletedAt(v time.Time) *LottoGetCountRecordUpsertBulk {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LottoGetCountRecordUpsertBulk) UpdateDeletedAt() *LottoGetCountRecordUpsertBulk {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *LottoGetCountRecordUpsertBulk) SetUserID(v int64) *LottoGetCountRecordUpsertBulk {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *LottoGetCountRecordUpsertBulk) UpdateUserID() *LottoGetCountRecordUpsertBulk {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.UpdateUserID()
	})
}

// SetLottoID sets the "lotto_id" field.
func (u *LottoGetCountRecordUpsertBulk) SetLottoID(v int64) *LottoGetCountRecordUpsertBulk {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.SetLottoID(v)
	})
}

// UpdateLottoID sets the "lotto_id" field to the value that was provided on create.
func (u *LottoGetCountRecordUpsertBulk) UpdateLottoID() *LottoGetCountRecordUpsertBulk {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.UpdateLottoID()
	})
}

// SetCount sets the "count" field.
func (u *LottoGetCountRecordUpsertBulk) SetCount(v int64) *LottoGetCountRecordUpsertBulk {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.SetCount(v)
	})
}

// AddCount adds v to the "count" field.
func (u *LottoGetCountRecordUpsertBulk) AddCount(v int64) *LottoGetCountRecordUpsertBulk {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.AddCount(v)
	})
}

// UpdateCount sets the "count" field to the value that was provided on create.
func (u *LottoGetCountRecordUpsertBulk) UpdateCount() *LottoGetCountRecordUpsertBulk {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.UpdateCount()
	})
}

// SetType sets the "type" field.
func (u *LottoGetCountRecordUpsertBulk) SetType(v enums.LottoCondition) *LottoGetCountRecordUpsertBulk {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *LottoGetCountRecordUpsertBulk) UpdateType() *LottoGetCountRecordUpsertBulk {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.UpdateType()
	})
}

// SetRechargeAmount sets the "recharge_amount" field.
func (u *LottoGetCountRecordUpsertBulk) SetRechargeAmount(v int64) *LottoGetCountRecordUpsertBulk {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.SetRechargeAmount(v)
	})
}

// AddRechargeAmount adds v to the "recharge_amount" field.
func (u *LottoGetCountRecordUpsertBulk) AddRechargeAmount(v int64) *LottoGetCountRecordUpsertBulk {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.AddRechargeAmount(v)
	})
}

// UpdateRechargeAmount sets the "recharge_amount" field to the value that was provided on create.
func (u *LottoGetCountRecordUpsertBulk) UpdateRechargeAmount() *LottoGetCountRecordUpsertBulk {
	return u.Update(func(s *LottoGetCountRecordUpsert) {
		s.UpdateRechargeAmount()
	})
}

// Exec executes the query.
func (u *LottoGetCountRecordUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the LottoGetCountRecordCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for LottoGetCountRecordCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LottoGetCountRecordUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
