// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionkind"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// 任务种类，任务类型的抽象层，记录了任务计费类型等信息
type MissionKind struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建者 ID
	CreatedBy int64 `json:"created_by,string"`
	// 更新者 ID
	UpdatedBy int64 `json:"updated_by,string"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// 任务单位类型
	Type enums.MissionType `json:"type"`
	// 任务大类
	Category enums.MissionCategory `json:"category"`
	// 计费类型
	BillingType enums.MissionBillingType `json:"billing_type"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MissionKindQuery when eager-loading is set.
	Edges        MissionKindEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MissionKindEdges holds the relations/edges for other nodes in the graph.
type MissionKindEdges struct {
	// Missions holds the value of the missions edge.
	Missions []*Mission `json:"missions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MissionsOrErr returns the Missions value or an error if the edge
// was not loaded in eager-loading.
func (e MissionKindEdges) MissionsOrErr() ([]*Mission, error) {
	if e.loadedTypes[0] {
		return e.Missions, nil
	}
	return nil, &NotLoadedError{edge: "missions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MissionKind) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case missionkind.FieldID, missionkind.FieldCreatedBy, missionkind.FieldUpdatedBy:
			values[i] = new(sql.NullInt64)
		case missionkind.FieldType, missionkind.FieldCategory, missionkind.FieldBillingType:
			values[i] = new(sql.NullString)
		case missionkind.FieldCreatedAt, missionkind.FieldUpdatedAt, missionkind.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MissionKind fields.
func (mk *MissionKind) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case missionkind.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mk.ID = int64(value.Int64)
		case missionkind.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				mk.CreatedBy = value.Int64
			}
		case missionkind.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				mk.UpdatedBy = value.Int64
			}
		case missionkind.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mk.CreatedAt = value.Time
			}
		case missionkind.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mk.UpdatedAt = value.Time
			}
		case missionkind.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				mk.DeletedAt = value.Time
			}
		case missionkind.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				mk.Type = enums.MissionType(value.String)
			}
		case missionkind.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				mk.Category = enums.MissionCategory(value.String)
			}
		case missionkind.FieldBillingType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field billing_type", values[i])
			} else if value.Valid {
				mk.BillingType = enums.MissionBillingType(value.String)
			}
		default:
			mk.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MissionKind.
// This includes values selected through modifiers, order, etc.
func (mk *MissionKind) Value(name string) (ent.Value, error) {
	return mk.selectValues.Get(name)
}

// QueryMissions queries the "missions" edge of the MissionKind entity.
func (mk *MissionKind) QueryMissions() *MissionQuery {
	return NewMissionKindClient(mk.config).QueryMissions(mk)
}

// Update returns a builder for updating this MissionKind.
// Note that you need to call MissionKind.Unwrap() before calling this method if this MissionKind
// was returned from a transaction, and the transaction was committed or rolled back.
func (mk *MissionKind) Update() *MissionKindUpdateOne {
	return NewMissionKindClient(mk.config).UpdateOne(mk)
}

// Unwrap unwraps the MissionKind entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mk *MissionKind) Unwrap() *MissionKind {
	_tx, ok := mk.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: MissionKind is not a transactional entity")
	}
	mk.config.driver = _tx.drv
	return mk
}

// String implements the fmt.Stringer.
func (mk *MissionKind) String() string {
	var builder strings.Builder
	builder.WriteString("MissionKind(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mk.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", mk.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", mk.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(mk.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(mk.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(mk.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", mk.Type))
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(fmt.Sprintf("%v", mk.Category))
	builder.WriteString(", ")
	builder.WriteString("billing_type=")
	builder.WriteString(fmt.Sprintf("%v", mk.BillingType))
	builder.WriteByte(')')
	return builder.String()
}

// MissionKinds is a parsable slice of MissionKind.
type MissionKinds []*MissionKind
