// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionloadbalanceaccess"
)

// mission负载均衡访问记录
type MissionLoadBalanceAccess struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建者 ID
	CreatedBy int64 `json:"created_by,string"`
	// 更新者 ID
	UpdatedBy int64 `json:"updated_by,string"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// 任务 ID
	MissionID int64 `json:"mission_id,string"`
	// 父 loadbanlace ID
	MissionLoadBalanceID int64 `json:"mission_load_balance_id,string"`
	// 上次获取 api 时间
	LastAccess time.Time `json:"last_access"`
	// 已访问次数
	AccessCount  int32 `json:"access_count"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MissionLoadBalanceAccess) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case missionloadbalanceaccess.FieldID, missionloadbalanceaccess.FieldCreatedBy, missionloadbalanceaccess.FieldUpdatedBy, missionloadbalanceaccess.FieldMissionID, missionloadbalanceaccess.FieldMissionLoadBalanceID, missionloadbalanceaccess.FieldAccessCount:
			values[i] = new(sql.NullInt64)
		case missionloadbalanceaccess.FieldCreatedAt, missionloadbalanceaccess.FieldUpdatedAt, missionloadbalanceaccess.FieldDeletedAt, missionloadbalanceaccess.FieldLastAccess:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MissionLoadBalanceAccess fields.
func (mlba *MissionLoadBalanceAccess) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case missionloadbalanceaccess.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mlba.ID = int64(value.Int64)
		case missionloadbalanceaccess.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				mlba.CreatedBy = value.Int64
			}
		case missionloadbalanceaccess.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				mlba.UpdatedBy = value.Int64
			}
		case missionloadbalanceaccess.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mlba.CreatedAt = value.Time
			}
		case missionloadbalanceaccess.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mlba.UpdatedAt = value.Time
			}
		case missionloadbalanceaccess.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				mlba.DeletedAt = value.Time
			}
		case missionloadbalanceaccess.FieldMissionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mission_id", values[i])
			} else if value.Valid {
				mlba.MissionID = value.Int64
			}
		case missionloadbalanceaccess.FieldMissionLoadBalanceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mission_load_balance_id", values[i])
			} else if value.Valid {
				mlba.MissionLoadBalanceID = value.Int64
			}
		case missionloadbalanceaccess.FieldLastAccess:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_access", values[i])
			} else if value.Valid {
				mlba.LastAccess = value.Time
			}
		case missionloadbalanceaccess.FieldAccessCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field access_count", values[i])
			} else if value.Valid {
				mlba.AccessCount = int32(value.Int64)
			}
		default:
			mlba.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MissionLoadBalanceAccess.
// This includes values selected through modifiers, order, etc.
func (mlba *MissionLoadBalanceAccess) Value(name string) (ent.Value, error) {
	return mlba.selectValues.Get(name)
}

// Update returns a builder for updating this MissionLoadBalanceAccess.
// Note that you need to call MissionLoadBalanceAccess.Unwrap() before calling this method if this MissionLoadBalanceAccess
// was returned from a transaction, and the transaction was committed or rolled back.
func (mlba *MissionLoadBalanceAccess) Update() *MissionLoadBalanceAccessUpdateOne {
	return NewMissionLoadBalanceAccessClient(mlba.config).UpdateOne(mlba)
}

// Unwrap unwraps the MissionLoadBalanceAccess entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mlba *MissionLoadBalanceAccess) Unwrap() *MissionLoadBalanceAccess {
	_tx, ok := mlba.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: MissionLoadBalanceAccess is not a transactional entity")
	}
	mlba.config.driver = _tx.drv
	return mlba
}

// String implements the fmt.Stringer.
func (mlba *MissionLoadBalanceAccess) String() string {
	var builder strings.Builder
	builder.WriteString("MissionLoadBalanceAccess(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mlba.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", mlba.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", mlba.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(mlba.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(mlba.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(mlba.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("mission_id=")
	builder.WriteString(fmt.Sprintf("%v", mlba.MissionID))
	builder.WriteString(", ")
	builder.WriteString("mission_load_balance_id=")
	builder.WriteString(fmt.Sprintf("%v", mlba.MissionLoadBalanceID))
	builder.WriteString(", ")
	builder.WriteString("last_access=")
	builder.WriteString(mlba.LastAccess.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("access_count=")
	builder.WriteString(fmt.Sprintf("%v", mlba.AccessCount))
	builder.WriteByte(')')
	return builder.String()
}

// MissionLoadBalanceAccesses is a parsable slice of MissionLoadBalanceAccess.
type MissionLoadBalanceAccesses []*MissionLoadBalanceAccess
