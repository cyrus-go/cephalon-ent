// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/devicereboottime"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// DeviceRebootTimeDelete is the builder for deleting a DeviceRebootTime entity.
type DeviceRebootTimeDelete struct {
	config
	hooks    []Hook
	mutation *DeviceRebootTimeMutation
}

// Where appends a list predicates to the DeviceRebootTimeDelete builder.
func (drtd *DeviceRebootTimeDelete) Where(ps ...predicate.DeviceRebootTime) *DeviceRebootTimeDelete {
	drtd.mutation.Where(ps...)
	return drtd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (drtd *DeviceRebootTimeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, drtd.sqlExec, drtd.mutation, drtd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (drtd *DeviceRebootTimeDelete) ExecX(ctx context.Context) int {
	n, err := drtd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (drtd *DeviceRebootTimeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(devicereboottime.Table, sqlgraph.NewFieldSpec(devicereboottime.FieldID, field.TypeInt64))
	if ps := drtd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, drtd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	drtd.mutation.done = true
	return affected, err
}

// DeviceRebootTimeDeleteOne is the builder for deleting a single DeviceRebootTime entity.
type DeviceRebootTimeDeleteOne struct {
	drtd *DeviceRebootTimeDelete
}

// Where appends a list predicates to the DeviceRebootTimeDelete builder.
func (drtdo *DeviceRebootTimeDeleteOne) Where(ps ...predicate.DeviceRebootTime) *DeviceRebootTimeDeleteOne {
	drtdo.drtd.mutation.Where(ps...)
	return drtdo
}

// Exec executes the deletion query.
func (drtdo *DeviceRebootTimeDeleteOne) Exec(ctx context.Context) error {
	n, err := drtdo.drtd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{devicereboottime.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (drtdo *DeviceRebootTimeDeleteOne) ExecX(ctx context.Context) {
	if err := drtdo.Exec(ctx); err != nil {
		panic(err)
	}
}
