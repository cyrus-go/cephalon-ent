// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/deviceofflinerecord"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// DeviceOfflineRecordDelete is the builder for deleting a DeviceOfflineRecord entity.
type DeviceOfflineRecordDelete struct {
	config
	hooks    []Hook
	mutation *DeviceOfflineRecordMutation
}

// Where appends a list predicates to the DeviceOfflineRecordDelete builder.
func (dord *DeviceOfflineRecordDelete) Where(ps ...predicate.DeviceOfflineRecord) *DeviceOfflineRecordDelete {
	dord.mutation.Where(ps...)
	return dord
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (dord *DeviceOfflineRecordDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, dord.sqlExec, dord.mutation, dord.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (dord *DeviceOfflineRecordDelete) ExecX(ctx context.Context) int {
	n, err := dord.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (dord *DeviceOfflineRecordDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(deviceofflinerecord.Table, sqlgraph.NewFieldSpec(deviceofflinerecord.FieldID, field.TypeInt64))
	if ps := dord.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, dord.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	dord.mutation.done = true
	return affected, err
}

// DeviceOfflineRecordDeleteOne is the builder for deleting a single DeviceOfflineRecord entity.
type DeviceOfflineRecordDeleteOne struct {
	dord *DeviceOfflineRecordDelete
}

// Where appends a list predicates to the DeviceOfflineRecordDelete builder.
func (dordo *DeviceOfflineRecordDeleteOne) Where(ps ...predicate.DeviceOfflineRecord) *DeviceOfflineRecordDeleteOne {
	dordo.dord.mutation.Where(ps...)
	return dordo
}

// Exec executes the deletion query.
func (dordo *DeviceOfflineRecordDeleteOne) Exec(ctx context.Context) error {
	n, err := dordo.dord.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{deviceofflinerecord.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (dordo *DeviceOfflineRecordDeleteOne) ExecX(ctx context.Context) {
	if err := dordo.Exec(ctx); err != nil {
		panic(err)
	}
}
