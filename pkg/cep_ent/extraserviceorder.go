// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/extraserviceorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/mission"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionbatch"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/symbol"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// 附加服务订单表
type ExtraServiceOrder struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建者 ID
	CreatedBy int64 `json:"created_by"`
	// 更新者 ID
	UpdatedBy int64 `json:"updated_by"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// 任务 id，外键关联任务
	MissionID int64 `json:"mission_id,string"`
	// 任务订单 id，外键关联任务订单
	MissionOrderID int64 `json:"mission_order_id,string"`
	// 是否为计时类型任务
	ExtraServiceBillingType enums.ExtraServiceBillingType `json:"extra_service_billing_type"`
	// 订单的货币消耗量
	Amount int64 `json:"amount"`
	// 币种 id
	SymbolID int64 `json:"symbol_id,string"`
	// 任务单价，按次(count)就是 unit_cep/次，按时(time)就是 unit_cep/分钟
	UnitCep int64 `json:"unit_cep"`
	// 附加服务类型
	ExtraServiceType enums.ExtraServiceType `json:"extra_service_type"`
	// 包时任务订单购买的时长
	BuyDuration int64 `json:"buy_duration"`
	// 任务计划开始时间（包时）
	PlanStartedAt *time.Time `json:"plan_started_at"`
	// 任务计划结束时间（包时）
	PlanFinishedAt *time.Time `json:"plan_finished_at"`
	// 任务批次外键
	MissionBatchID int64 `json:"mission_batch_id,string"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExtraServiceOrderQuery when eager-loading is set.
	Edges        ExtraServiceOrderEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ExtraServiceOrderEdges holds the relations/edges for other nodes in the graph.
type ExtraServiceOrderEdges struct {
	// Mission holds the value of the mission edge.
	Mission *Mission `json:"mission,omitempty"`
	// MissionOrder holds the value of the mission_order edge.
	MissionOrder *MissionOrder `json:"mission_order,omitempty"`
	// Symbol holds the value of the symbol edge.
	Symbol *Symbol `json:"symbol,omitempty"`
	// MissionBatch holds the value of the mission_batch edge.
	MissionBatch *MissionBatch `json:"mission_batch,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// MissionOrErr returns the Mission value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExtraServiceOrderEdges) MissionOrErr() (*Mission, error) {
	if e.loadedTypes[0] {
		if e.Mission == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: mission.Label}
		}
		return e.Mission, nil
	}
	return nil, &NotLoadedError{edge: "mission"}
}

// MissionOrderOrErr returns the MissionOrder value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExtraServiceOrderEdges) MissionOrderOrErr() (*MissionOrder, error) {
	if e.loadedTypes[1] {
		if e.MissionOrder == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: missionorder.Label}
		}
		return e.MissionOrder, nil
	}
	return nil, &NotLoadedError{edge: "mission_order"}
}

// SymbolOrErr returns the Symbol value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExtraServiceOrderEdges) SymbolOrErr() (*Symbol, error) {
	if e.loadedTypes[2] {
		if e.Symbol == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: symbol.Label}
		}
		return e.Symbol, nil
	}
	return nil, &NotLoadedError{edge: "symbol"}
}

// MissionBatchOrErr returns the MissionBatch value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExtraServiceOrderEdges) MissionBatchOrErr() (*MissionBatch, error) {
	if e.loadedTypes[3] {
		if e.MissionBatch == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: missionbatch.Label}
		}
		return e.MissionBatch, nil
	}
	return nil, &NotLoadedError{edge: "mission_batch"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ExtraServiceOrder) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case extraserviceorder.FieldID, extraserviceorder.FieldCreatedBy, extraserviceorder.FieldUpdatedBy, extraserviceorder.FieldMissionID, extraserviceorder.FieldMissionOrderID, extraserviceorder.FieldAmount, extraserviceorder.FieldSymbolID, extraserviceorder.FieldUnitCep, extraserviceorder.FieldBuyDuration, extraserviceorder.FieldMissionBatchID:
			values[i] = new(sql.NullInt64)
		case extraserviceorder.FieldExtraServiceBillingType, extraserviceorder.FieldExtraServiceType:
			values[i] = new(sql.NullString)
		case extraserviceorder.FieldCreatedAt, extraserviceorder.FieldUpdatedAt, extraserviceorder.FieldDeletedAt, extraserviceorder.FieldPlanStartedAt, extraserviceorder.FieldPlanFinishedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ExtraServiceOrder fields.
func (eso *ExtraServiceOrder) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case extraserviceorder.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			eso.ID = int64(value.Int64)
		case extraserviceorder.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				eso.CreatedBy = value.Int64
			}
		case extraserviceorder.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				eso.UpdatedBy = value.Int64
			}
		case extraserviceorder.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				eso.CreatedAt = value.Time
			}
		case extraserviceorder.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				eso.UpdatedAt = value.Time
			}
		case extraserviceorder.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				eso.DeletedAt = value.Time
			}
		case extraserviceorder.FieldMissionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mission_id", values[i])
			} else if value.Valid {
				eso.MissionID = value.Int64
			}
		case extraserviceorder.FieldMissionOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mission_order_id", values[i])
			} else if value.Valid {
				eso.MissionOrderID = value.Int64
			}
		case extraserviceorder.FieldExtraServiceBillingType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field extra_service_billing_type", values[i])
			} else if value.Valid {
				eso.ExtraServiceBillingType = enums.ExtraServiceBillingType(value.String)
			}
		case extraserviceorder.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				eso.Amount = value.Int64
			}
		case extraserviceorder.FieldSymbolID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field symbol_id", values[i])
			} else if value.Valid {
				eso.SymbolID = value.Int64
			}
		case extraserviceorder.FieldUnitCep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field unit_cep", values[i])
			} else if value.Valid {
				eso.UnitCep = value.Int64
			}
		case extraserviceorder.FieldExtraServiceType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field extra_service_type", values[i])
			} else if value.Valid {
				eso.ExtraServiceType = enums.ExtraServiceType(value.String)
			}
		case extraserviceorder.FieldBuyDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field buy_duration", values[i])
			} else if value.Valid {
				eso.BuyDuration = value.Int64
			}
		case extraserviceorder.FieldPlanStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field plan_started_at", values[i])
			} else if value.Valid {
				eso.PlanStartedAt = new(time.Time)
				*eso.PlanStartedAt = value.Time
			}
		case extraserviceorder.FieldPlanFinishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field plan_finished_at", values[i])
			} else if value.Valid {
				eso.PlanFinishedAt = new(time.Time)
				*eso.PlanFinishedAt = value.Time
			}
		case extraserviceorder.FieldMissionBatchID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mission_batch_id", values[i])
			} else if value.Valid {
				eso.MissionBatchID = value.Int64
			}
		default:
			eso.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ExtraServiceOrder.
// This includes values selected through modifiers, order, etc.
func (eso *ExtraServiceOrder) Value(name string) (ent.Value, error) {
	return eso.selectValues.Get(name)
}

// QueryMission queries the "mission" edge of the ExtraServiceOrder entity.
func (eso *ExtraServiceOrder) QueryMission() *MissionQuery {
	return NewExtraServiceOrderClient(eso.config).QueryMission(eso)
}

// QueryMissionOrder queries the "mission_order" edge of the ExtraServiceOrder entity.
func (eso *ExtraServiceOrder) QueryMissionOrder() *MissionOrderQuery {
	return NewExtraServiceOrderClient(eso.config).QueryMissionOrder(eso)
}

// QuerySymbol queries the "symbol" edge of the ExtraServiceOrder entity.
func (eso *ExtraServiceOrder) QuerySymbol() *SymbolQuery {
	return NewExtraServiceOrderClient(eso.config).QuerySymbol(eso)
}

// QueryMissionBatch queries the "mission_batch" edge of the ExtraServiceOrder entity.
func (eso *ExtraServiceOrder) QueryMissionBatch() *MissionBatchQuery {
	return NewExtraServiceOrderClient(eso.config).QueryMissionBatch(eso)
}

// Update returns a builder for updating this ExtraServiceOrder.
// Note that you need to call ExtraServiceOrder.Unwrap() before calling this method if this ExtraServiceOrder
// was returned from a transaction, and the transaction was committed or rolled back.
func (eso *ExtraServiceOrder) Update() *ExtraServiceOrderUpdateOne {
	return NewExtraServiceOrderClient(eso.config).UpdateOne(eso)
}

// Unwrap unwraps the ExtraServiceOrder entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (eso *ExtraServiceOrder) Unwrap() *ExtraServiceOrder {
	_tx, ok := eso.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: ExtraServiceOrder is not a transactional entity")
	}
	eso.config.driver = _tx.drv
	return eso
}

// String implements the fmt.Stringer.
func (eso *ExtraServiceOrder) String() string {
	var builder strings.Builder
	builder.WriteString("ExtraServiceOrder(")
	builder.WriteString(fmt.Sprintf("id=%v, ", eso.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", eso.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", eso.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(eso.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(eso.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(eso.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("mission_id=")
	builder.WriteString(fmt.Sprintf("%v", eso.MissionID))
	builder.WriteString(", ")
	builder.WriteString("mission_order_id=")
	builder.WriteString(fmt.Sprintf("%v", eso.MissionOrderID))
	builder.WriteString(", ")
	builder.WriteString("extra_service_billing_type=")
	builder.WriteString(fmt.Sprintf("%v", eso.ExtraServiceBillingType))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", eso.Amount))
	builder.WriteString(", ")
	builder.WriteString("symbol_id=")
	builder.WriteString(fmt.Sprintf("%v", eso.SymbolID))
	builder.WriteString(", ")
	builder.WriteString("unit_cep=")
	builder.WriteString(fmt.Sprintf("%v", eso.UnitCep))
	builder.WriteString(", ")
	builder.WriteString("extra_service_type=")
	builder.WriteString(fmt.Sprintf("%v", eso.ExtraServiceType))
	builder.WriteString(", ")
	builder.WriteString("buy_duration=")
	builder.WriteString(fmt.Sprintf("%v", eso.BuyDuration))
	builder.WriteString(", ")
	if v := eso.PlanStartedAt; v != nil {
		builder.WriteString("plan_started_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := eso.PlanFinishedAt; v != nil {
		builder.WriteString("plan_finished_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("mission_batch_id=")
	builder.WriteString(fmt.Sprintf("%v", eso.MissionBatchID))
	builder.WriteByte(')')
	return builder.String()
}

// ExtraServiceOrders is a parsable slice of ExtraServiceOrder.
type ExtraServiceOrders []*ExtraServiceOrder
