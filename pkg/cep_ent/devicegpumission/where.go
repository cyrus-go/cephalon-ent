// Code generated by ent, DO NOT EDIT.

package devicegpumission

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldLTE(FieldID, id))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldEQ(FieldDeletedAt, v))
}

// DeviceID applies equality check predicate on the "device_id" field. It's identical to DeviceIDEQ.
func DeviceID(v int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldEQ(FieldDeviceID, v))
}

// GpuID applies equality check predicate on the "gpu_id" field. It's identical to GpuIDEQ.
func GpuID(v int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldEQ(FieldGpuID, v))
}

// MissionKindID applies equality check predicate on the "mission_kind_id" field. It's identical to MissionKindIDEQ.
func MissionKindID(v int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldEQ(FieldMissionKindID, v))
}

// DeviceSlot applies equality check predicate on the "device_slot" field. It's identical to DeviceSlotEQ.
func DeviceSlot(v int8) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldEQ(FieldDeviceSlot, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldLTE(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldLTE(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldLTE(FieldDeletedAt, v))
}

// DeviceIDEQ applies the EQ predicate on the "device_id" field.
func DeviceIDEQ(v int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldEQ(FieldDeviceID, v))
}

// DeviceIDNEQ applies the NEQ predicate on the "device_id" field.
func DeviceIDNEQ(v int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldNEQ(FieldDeviceID, v))
}

// DeviceIDIn applies the In predicate on the "device_id" field.
func DeviceIDIn(vs ...int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldIn(FieldDeviceID, vs...))
}

// DeviceIDNotIn applies the NotIn predicate on the "device_id" field.
func DeviceIDNotIn(vs ...int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldNotIn(FieldDeviceID, vs...))
}

// GpuIDEQ applies the EQ predicate on the "gpu_id" field.
func GpuIDEQ(v int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldEQ(FieldGpuID, v))
}

// GpuIDNEQ applies the NEQ predicate on the "gpu_id" field.
func GpuIDNEQ(v int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldNEQ(FieldGpuID, v))
}

// GpuIDIn applies the In predicate on the "gpu_id" field.
func GpuIDIn(vs ...int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldIn(FieldGpuID, vs...))
}

// GpuIDNotIn applies the NotIn predicate on the "gpu_id" field.
func GpuIDNotIn(vs ...int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldNotIn(FieldGpuID, vs...))
}

// MissionKindIDEQ applies the EQ predicate on the "mission_kind_id" field.
func MissionKindIDEQ(v int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldEQ(FieldMissionKindID, v))
}

// MissionKindIDNEQ applies the NEQ predicate on the "mission_kind_id" field.
func MissionKindIDNEQ(v int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldNEQ(FieldMissionKindID, v))
}

// MissionKindIDIn applies the In predicate on the "mission_kind_id" field.
func MissionKindIDIn(vs ...int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldIn(FieldMissionKindID, vs...))
}

// MissionKindIDNotIn applies the NotIn predicate on the "mission_kind_id" field.
func MissionKindIDNotIn(vs ...int64) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldNotIn(FieldMissionKindID, vs...))
}

// DeviceSlotEQ applies the EQ predicate on the "device_slot" field.
func DeviceSlotEQ(v int8) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldEQ(FieldDeviceSlot, v))
}

// DeviceSlotNEQ applies the NEQ predicate on the "device_slot" field.
func DeviceSlotNEQ(v int8) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldNEQ(FieldDeviceSlot, v))
}

// DeviceSlotIn applies the In predicate on the "device_slot" field.
func DeviceSlotIn(vs ...int8) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldIn(FieldDeviceSlot, vs...))
}

// DeviceSlotNotIn applies the NotIn predicate on the "device_slot" field.
func DeviceSlotNotIn(vs ...int8) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldNotIn(FieldDeviceSlot, vs...))
}

// DeviceSlotGT applies the GT predicate on the "device_slot" field.
func DeviceSlotGT(v int8) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldGT(FieldDeviceSlot, v))
}

// DeviceSlotGTE applies the GTE predicate on the "device_slot" field.
func DeviceSlotGTE(v int8) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldGTE(FieldDeviceSlot, v))
}

// DeviceSlotLT applies the LT predicate on the "device_slot" field.
func DeviceSlotLT(v int8) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldLT(FieldDeviceSlot, v))
}

// DeviceSlotLTE applies the LTE predicate on the "device_slot" field.
func DeviceSlotLTE(v int8) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.FieldLTE(FieldDeviceSlot, v))
}

// GpuStatusEQ applies the EQ predicate on the "gpu_status" field.
func GpuStatusEQ(v enums.DeviceStatus) predicate.DeviceGpuMission {
	vc := v
	return predicate.DeviceGpuMission(sql.FieldEQ(FieldGpuStatus, vc))
}

// GpuStatusNEQ applies the NEQ predicate on the "gpu_status" field.
func GpuStatusNEQ(v enums.DeviceStatus) predicate.DeviceGpuMission {
	vc := v
	return predicate.DeviceGpuMission(sql.FieldNEQ(FieldGpuStatus, vc))
}

// GpuStatusIn applies the In predicate on the "gpu_status" field.
func GpuStatusIn(vs ...enums.DeviceStatus) predicate.DeviceGpuMission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeviceGpuMission(sql.FieldIn(FieldGpuStatus, v...))
}

// GpuStatusNotIn applies the NotIn predicate on the "gpu_status" field.
func GpuStatusNotIn(vs ...enums.DeviceStatus) predicate.DeviceGpuMission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeviceGpuMission(sql.FieldNotIn(FieldGpuStatus, v...))
}

// HasDevice applies the HasEdge predicate on the "device" edge.
func HasDevice() predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DeviceTable, DeviceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeviceWith applies the HasEdge predicate on the "device" edge with a given conditions (other predicates).
func HasDeviceWith(preds ...predicate.Device) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(func(s *sql.Selector) {
		step := newDeviceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMissionKind applies the HasEdge predicate on the "mission_kind" edge.
func HasMissionKind() predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MissionKindTable, MissionKindColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMissionKindWith applies the HasEdge predicate on the "mission_kind" edge with a given conditions (other predicates).
func HasMissionKindWith(preds ...predicate.MissionKind) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(func(s *sql.Selector) {
		step := newMissionKindStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGpu applies the HasEdge predicate on the "gpu" edge.
func HasGpu() predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GpuTable, GpuColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGpuWith applies the HasEdge predicate on the "gpu" edge with a given conditions (other predicates).
func HasGpuWith(preds ...predicate.Gpu) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(func(s *sql.Selector) {
		step := newGpuStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DeviceGpuMission) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DeviceGpuMission) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DeviceGpuMission) predicate.DeviceGpuMission {
	return predicate.DeviceGpuMission(sql.NotPredicates(p))
}
