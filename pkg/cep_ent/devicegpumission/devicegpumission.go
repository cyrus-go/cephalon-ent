// Code generated by ent, DO NOT EDIT.

package devicegpumission

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

const (
	// Label holds the string label denoting the devicegpumission type in the database.
	Label = "device_gpu_mission"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeviceID holds the string denoting the device_id field in the database.
	FieldDeviceID = "device_id"
	// FieldGpuID holds the string denoting the gpu_id field in the database.
	FieldGpuID = "gpu_id"
	// FieldMissionKindID holds the string denoting the mission_kind_id field in the database.
	FieldMissionKindID = "mission_kind_id"
	// FieldDeviceSlot holds the string denoting the device_slot field in the database.
	FieldDeviceSlot = "device_slot"
	// FieldGpuStatus holds the string denoting the gpu_status field in the database.
	FieldGpuStatus = "gpu_status"
	// EdgeDevice holds the string denoting the device edge name in mutations.
	EdgeDevice = "device"
	// EdgeMissionKind holds the string denoting the mission_kind edge name in mutations.
	EdgeMissionKind = "mission_kind"
	// EdgeGpu holds the string denoting the gpu edge name in mutations.
	EdgeGpu = "gpu"
	// Table holds the table name of the devicegpumission in the database.
	Table = "device_gpu_missions"
	// DeviceTable is the table that holds the device relation/edge.
	DeviceTable = "device_gpu_missions"
	// DeviceInverseTable is the table name for the Device entity.
	// It exists in this package in order to avoid circular dependency with the "device" package.
	DeviceInverseTable = "devices"
	// DeviceColumn is the table column denoting the device relation/edge.
	DeviceColumn = "device_id"
	// MissionKindTable is the table that holds the mission_kind relation/edge.
	MissionKindTable = "device_gpu_missions"
	// MissionKindInverseTable is the table name for the MissionKind entity.
	// It exists in this package in order to avoid circular dependency with the "missionkind" package.
	MissionKindInverseTable = "mission_kinds"
	// MissionKindColumn is the table column denoting the mission_kind relation/edge.
	MissionKindColumn = "mission_kind_id"
	// GpuTable is the table that holds the gpu relation/edge.
	GpuTable = "device_gpu_missions"
	// GpuInverseTable is the table name for the Gpu entity.
	// It exists in this package in order to avoid circular dependency with the "gpu" package.
	GpuInverseTable = "gpus"
	// GpuColumn is the table column denoting the gpu relation/edge.
	GpuColumn = "gpu_id"
)

// Columns holds all SQL columns for devicegpumission fields.
var Columns = []string{
	FieldID,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldDeviceID,
	FieldGpuID,
	FieldMissionKindID,
	FieldDeviceSlot,
	FieldGpuStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedBy holds the default value on creation for the "created_by" field.
	DefaultCreatedBy int64
	// DefaultUpdatedBy holds the default value on creation for the "updated_by" field.
	DefaultUpdatedBy int64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt time.Time
	// DefaultDeviceID holds the default value on creation for the "device_id" field.
	DefaultDeviceID int64
	// DefaultGpuID holds the default value on creation for the "gpu_id" field.
	DefaultGpuID int64
	// DefaultMissionKindID holds the default value on creation for the "mission_kind_id" field.
	DefaultMissionKindID int64
	// DefaultDeviceSlot holds the default value on creation for the "device_slot" field.
	DefaultDeviceSlot int8
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
)

const DefaultGpuStatus enums.DeviceStatus = "offline"

// GpuStatusValidator is a validator for the "gpu_status" field enum values. It is called by the builders before save.
func GpuStatusValidator(gs enums.DeviceStatus) error {
	switch gs {
	case "online", "offline", "busy", "free":
		return nil
	default:
		return fmt.Errorf("devicegpumission: invalid enum value for gpu_status field: %q", gs)
	}
}

// OrderOption defines the ordering options for the DeviceGpuMission queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeviceID orders the results by the device_id field.
func ByDeviceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceID, opts...).ToFunc()
}

// ByGpuID orders the results by the gpu_id field.
func ByGpuID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGpuID, opts...).ToFunc()
}

// ByMissionKindID orders the results by the mission_kind_id field.
func ByMissionKindID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMissionKindID, opts...).ToFunc()
}

// ByDeviceSlot orders the results by the device_slot field.
func ByDeviceSlot(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceSlot, opts...).ToFunc()
}

// ByGpuStatus orders the results by the gpu_status field.
func ByGpuStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGpuStatus, opts...).ToFunc()
}

// ByDeviceField orders the results by device field.
func ByDeviceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeviceStep(), sql.OrderByField(field, opts...))
	}
}

// ByMissionKindField orders the results by mission_kind field.
func ByMissionKindField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMissionKindStep(), sql.OrderByField(field, opts...))
	}
}

// ByGpuField orders the results by gpu field.
func ByGpuField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGpuStep(), sql.OrderByField(field, opts...))
	}
}
func newDeviceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeviceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DeviceTable, DeviceColumn),
	)
}
func newMissionKindStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MissionKindInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MissionKindTable, MissionKindColumn),
	)
}
func newGpuStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GpuInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GpuTable, GpuColumn),
	)
}
