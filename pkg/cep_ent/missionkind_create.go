// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/devicegpumission"
	"cephalon-ent/pkg/cep_ent/missionkind"
	"cephalon-ent/pkg/enums"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MissionKindCreate is the builder for creating a MissionKind entity.
type MissionKindCreate struct {
	config
	mutation *MissionKindMutation
	hooks    []Hook
}

// SetCreatedBy sets the "created_by" field.
func (mkc *MissionKindCreate) SetCreatedBy(i int64) *MissionKindCreate {
	mkc.mutation.SetCreatedBy(i)
	return mkc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mkc *MissionKindCreate) SetNillableCreatedBy(i *int64) *MissionKindCreate {
	if i != nil {
		mkc.SetCreatedBy(*i)
	}
	return mkc
}

// SetUpdatedBy sets the "updated_by" field.
func (mkc *MissionKindCreate) SetUpdatedBy(i int64) *MissionKindCreate {
	mkc.mutation.SetUpdatedBy(i)
	return mkc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mkc *MissionKindCreate) SetNillableUpdatedBy(i *int64) *MissionKindCreate {
	if i != nil {
		mkc.SetUpdatedBy(*i)
	}
	return mkc
}

// SetCreatedAt sets the "created_at" field.
func (mkc *MissionKindCreate) SetCreatedAt(t time.Time) *MissionKindCreate {
	mkc.mutation.SetCreatedAt(t)
	return mkc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mkc *MissionKindCreate) SetNillableCreatedAt(t *time.Time) *MissionKindCreate {
	if t != nil {
		mkc.SetCreatedAt(*t)
	}
	return mkc
}

// SetUpdatedAt sets the "updated_at" field.
func (mkc *MissionKindCreate) SetUpdatedAt(t time.Time) *MissionKindCreate {
	mkc.mutation.SetUpdatedAt(t)
	return mkc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mkc *MissionKindCreate) SetNillableUpdatedAt(t *time.Time) *MissionKindCreate {
	if t != nil {
		mkc.SetUpdatedAt(*t)
	}
	return mkc
}

// SetDeletedAt sets the "deleted_at" field.
func (mkc *MissionKindCreate) SetDeletedAt(t time.Time) *MissionKindCreate {
	mkc.mutation.SetDeletedAt(t)
	return mkc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mkc *MissionKindCreate) SetNillableDeletedAt(t *time.Time) *MissionKindCreate {
	if t != nil {
		mkc.SetDeletedAt(*t)
	}
	return mkc
}

// SetType sets the "type" field.
func (mkc *MissionKindCreate) SetType(et enums.MissionType) *MissionKindCreate {
	mkc.mutation.SetType(et)
	return mkc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mkc *MissionKindCreate) SetNillableType(et *enums.MissionType) *MissionKindCreate {
	if et != nil {
		mkc.SetType(*et)
	}
	return mkc
}

// SetCategory sets the "category" field.
func (mkc *MissionKindCreate) SetCategory(ec enums.MissionCategory) *MissionKindCreate {
	mkc.mutation.SetCategory(ec)
	return mkc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (mkc *MissionKindCreate) SetNillableCategory(ec *enums.MissionCategory) *MissionKindCreate {
	if ec != nil {
		mkc.SetCategory(*ec)
	}
	return mkc
}

// SetBillingType sets the "billing_type" field.
func (mkc *MissionKindCreate) SetBillingType(ebt enums.MissionBillingType) *MissionKindCreate {
	mkc.mutation.SetBillingType(ebt)
	return mkc
}

// SetNillableBillingType sets the "billing_type" field if the given value is not nil.
func (mkc *MissionKindCreate) SetNillableBillingType(ebt *enums.MissionBillingType) *MissionKindCreate {
	if ebt != nil {
		mkc.SetBillingType(*ebt)
	}
	return mkc
}

// SetID sets the "id" field.
func (mkc *MissionKindCreate) SetID(i int64) *MissionKindCreate {
	mkc.mutation.SetID(i)
	return mkc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mkc *MissionKindCreate) SetNillableID(i *int64) *MissionKindCreate {
	if i != nil {
		mkc.SetID(*i)
	}
	return mkc
}

// AddDeviceGpuMissionIDs adds the "device_gpu_missions" edge to the DeviceGpuMission entity by IDs.
func (mkc *MissionKindCreate) AddDeviceGpuMissionIDs(ids ...int64) *MissionKindCreate {
	mkc.mutation.AddDeviceGpuMissionIDs(ids...)
	return mkc
}

// AddDeviceGpuMissions adds the "device_gpu_missions" edges to the DeviceGpuMission entity.
func (mkc *MissionKindCreate) AddDeviceGpuMissions(d ...*DeviceGpuMission) *MissionKindCreate {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return mkc.AddDeviceGpuMissionIDs(ids...)
}

// Mutation returns the MissionKindMutation object of the builder.
func (mkc *MissionKindCreate) Mutation() *MissionKindMutation {
	return mkc.mutation
}

// Save creates the MissionKind in the database.
func (mkc *MissionKindCreate) Save(ctx context.Context) (*MissionKind, error) {
	mkc.defaults()
	return withHooks(ctx, mkc.sqlSave, mkc.mutation, mkc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mkc *MissionKindCreate) SaveX(ctx context.Context) *MissionKind {
	v, err := mkc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mkc *MissionKindCreate) Exec(ctx context.Context) error {
	_, err := mkc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mkc *MissionKindCreate) ExecX(ctx context.Context) {
	if err := mkc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mkc *MissionKindCreate) defaults() {
	if _, ok := mkc.mutation.CreatedBy(); !ok {
		v := missionkind.DefaultCreatedBy
		mkc.mutation.SetCreatedBy(v)
	}
	if _, ok := mkc.mutation.UpdatedBy(); !ok {
		v := missionkind.DefaultUpdatedBy
		mkc.mutation.SetUpdatedBy(v)
	}
	if _, ok := mkc.mutation.CreatedAt(); !ok {
		v := missionkind.DefaultCreatedAt()
		mkc.mutation.SetCreatedAt(v)
	}
	if _, ok := mkc.mutation.UpdatedAt(); !ok {
		v := missionkind.DefaultUpdatedAt()
		mkc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mkc.mutation.DeletedAt(); !ok {
		v := missionkind.DefaultDeletedAt
		mkc.mutation.SetDeletedAt(v)
	}
	if _, ok := mkc.mutation.GetType(); !ok {
		v := missionkind.DefaultType
		mkc.mutation.SetType(v)
	}
	if _, ok := mkc.mutation.Category(); !ok {
		v := missionkind.DefaultCategory
		mkc.mutation.SetCategory(v)
	}
	if _, ok := mkc.mutation.BillingType(); !ok {
		v := missionkind.DefaultBillingType
		mkc.mutation.SetBillingType(v)
	}
	if _, ok := mkc.mutation.ID(); !ok {
		v := missionkind.DefaultID()
		mkc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mkc *MissionKindCreate) check() error {
	if _, ok := mkc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "MissionKind.created_by"`)}
	}
	if _, ok := mkc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "MissionKind.updated_by"`)}
	}
	if _, ok := mkc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "MissionKind.created_at"`)}
	}
	if _, ok := mkc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "MissionKind.updated_at"`)}
	}
	if _, ok := mkc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "MissionKind.deleted_at"`)}
	}
	if _, ok := mkc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`cep_ent: missing required field "MissionKind.type"`)}
	}
	if v, ok := mkc.mutation.GetType(); ok {
		if err := missionkind.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "MissionKind.type": %w`, err)}
		}
	}
	if _, ok := mkc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`cep_ent: missing required field "MissionKind.category"`)}
	}
	if v, ok := mkc.mutation.Category(); ok {
		if err := missionkind.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`cep_ent: validator failed for field "MissionKind.category": %w`, err)}
		}
	}
	if _, ok := mkc.mutation.BillingType(); !ok {
		return &ValidationError{Name: "billing_type", err: errors.New(`cep_ent: missing required field "MissionKind.billing_type"`)}
	}
	if v, ok := mkc.mutation.BillingType(); ok {
		if err := missionkind.BillingTypeValidator(v); err != nil {
			return &ValidationError{Name: "billing_type", err: fmt.Errorf(`cep_ent: validator failed for field "MissionKind.billing_type": %w`, err)}
		}
	}
	return nil
}

func (mkc *MissionKindCreate) sqlSave(ctx context.Context) (*MissionKind, error) {
	if err := mkc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mkc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mkc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	mkc.mutation.id = &_node.ID
	mkc.mutation.done = true
	return _node, nil
}

func (mkc *MissionKindCreate) createSpec() (*MissionKind, *sqlgraph.CreateSpec) {
	var (
		_node = &MissionKind{config: mkc.config}
		_spec = sqlgraph.NewCreateSpec(missionkind.Table, sqlgraph.NewFieldSpec(missionkind.FieldID, field.TypeInt64))
	)
	if id, ok := mkc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mkc.mutation.CreatedBy(); ok {
		_spec.SetField(missionkind.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := mkc.mutation.UpdatedBy(); ok {
		_spec.SetField(missionkind.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := mkc.mutation.CreatedAt(); ok {
		_spec.SetField(missionkind.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mkc.mutation.UpdatedAt(); ok {
		_spec.SetField(missionkind.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mkc.mutation.DeletedAt(); ok {
		_spec.SetField(missionkind.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := mkc.mutation.GetType(); ok {
		_spec.SetField(missionkind.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := mkc.mutation.Category(); ok {
		_spec.SetField(missionkind.FieldCategory, field.TypeEnum, value)
		_node.Category = value
	}
	if value, ok := mkc.mutation.BillingType(); ok {
		_spec.SetField(missionkind.FieldBillingType, field.TypeEnum, value)
		_node.BillingType = value
	}
	if nodes := mkc.mutation.DeviceGpuMissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionkind.DeviceGpuMissionsTable,
			Columns: []string{missionkind.DeviceGpuMissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(devicegpumission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MissionKindCreateBulk is the builder for creating many MissionKind entities in bulk.
type MissionKindCreateBulk struct {
	config
	builders []*MissionKindCreate
}

// Save creates the MissionKind entities in the database.
func (mkcb *MissionKindCreateBulk) Save(ctx context.Context) ([]*MissionKind, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mkcb.builders))
	nodes := make([]*MissionKind, len(mkcb.builders))
	mutators := make([]Mutator, len(mkcb.builders))
	for i := range mkcb.builders {
		func(i int, root context.Context) {
			builder := mkcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MissionKindMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mkcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mkcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mkcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mkcb *MissionKindCreateBulk) SaveX(ctx context.Context) []*MissionKind {
	v, err := mkcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mkcb *MissionKindCreateBulk) Exec(ctx context.Context) error {
	_, err := mkcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mkcb *MissionKindCreateBulk) ExecX(ctx context.Context) {
	if err := mkcb.Exec(ctx); err != nil {
		panic(err)
	}
}
