// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/bill"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/extraserviceorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/symbol"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/transferorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/wallet"
)

// SymbolCreate is the builder for creating a Symbol entity.
type SymbolCreate struct {
	config
	mutation *SymbolMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (sc *SymbolCreate) SetCreatedBy(i int64) *SymbolCreate {
	sc.mutation.SetCreatedBy(i)
	return sc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sc *SymbolCreate) SetNillableCreatedBy(i *int64) *SymbolCreate {
	if i != nil {
		sc.SetCreatedBy(*i)
	}
	return sc
}

// SetUpdatedBy sets the "updated_by" field.
func (sc *SymbolCreate) SetUpdatedBy(i int64) *SymbolCreate {
	sc.mutation.SetUpdatedBy(i)
	return sc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sc *SymbolCreate) SetNillableUpdatedBy(i *int64) *SymbolCreate {
	if i != nil {
		sc.SetUpdatedBy(*i)
	}
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *SymbolCreate) SetCreatedAt(t time.Time) *SymbolCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SymbolCreate) SetNillableCreatedAt(t *time.Time) *SymbolCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SymbolCreate) SetUpdatedAt(t time.Time) *SymbolCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SymbolCreate) SetNillableUpdatedAt(t *time.Time) *SymbolCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetDeletedAt sets the "deleted_at" field.
func (sc *SymbolCreate) SetDeletedAt(t time.Time) *SymbolCreate {
	sc.mutation.SetDeletedAt(t)
	return sc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sc *SymbolCreate) SetNillableDeletedAt(t *time.Time) *SymbolCreate {
	if t != nil {
		sc.SetDeletedAt(*t)
	}
	return sc
}

// SetName sets the "name" field.
func (sc *SymbolCreate) SetName(s string) *SymbolCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sc *SymbolCreate) SetNillableName(s *string) *SymbolCreate {
	if s != nil {
		sc.SetName(*s)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SymbolCreate) SetID(i int64) *SymbolCreate {
	sc.mutation.SetID(i)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *SymbolCreate) SetNillableID(i *int64) *SymbolCreate {
	if i != nil {
		sc.SetID(*i)
	}
	return sc
}

// AddWalletIDs adds the "wallets" edge to the Wallet entity by IDs.
func (sc *SymbolCreate) AddWalletIDs(ids ...int64) *SymbolCreate {
	sc.mutation.AddWalletIDs(ids...)
	return sc
}

// AddWallets adds the "wallets" edges to the Wallet entity.
func (sc *SymbolCreate) AddWallets(w ...*Wallet) *SymbolCreate {
	ids := make([]int64, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return sc.AddWalletIDs(ids...)
}

// AddBillIDs adds the "bills" edge to the Bill entity by IDs.
func (sc *SymbolCreate) AddBillIDs(ids ...int64) *SymbolCreate {
	sc.mutation.AddBillIDs(ids...)
	return sc
}

// AddBills adds the "bills" edges to the Bill entity.
func (sc *SymbolCreate) AddBills(b ...*Bill) *SymbolCreate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return sc.AddBillIDs(ids...)
}

// AddIncomeBillIDs adds the "income_bills" edge to the Bill entity by IDs.
func (sc *SymbolCreate) AddIncomeBillIDs(ids ...int64) *SymbolCreate {
	sc.mutation.AddIncomeBillIDs(ids...)
	return sc
}

// AddIncomeBills adds the "income_bills" edges to the Bill entity.
func (sc *SymbolCreate) AddIncomeBills(b ...*Bill) *SymbolCreate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return sc.AddIncomeBillIDs(ids...)
}

// AddMissionOrderIDs adds the "mission_orders" edge to the MissionOrder entity by IDs.
func (sc *SymbolCreate) AddMissionOrderIDs(ids ...int64) *SymbolCreate {
	sc.mutation.AddMissionOrderIDs(ids...)
	return sc
}

// AddMissionOrders adds the "mission_orders" edges to the MissionOrder entity.
func (sc *SymbolCreate) AddMissionOrders(m ...*MissionOrder) *SymbolCreate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return sc.AddMissionOrderIDs(ids...)
}

// AddTransferOrderIDs adds the "transfer_orders" edge to the TransferOrder entity by IDs.
func (sc *SymbolCreate) AddTransferOrderIDs(ids ...int64) *SymbolCreate {
	sc.mutation.AddTransferOrderIDs(ids...)
	return sc
}

// AddTransferOrders adds the "transfer_orders" edges to the TransferOrder entity.
func (sc *SymbolCreate) AddTransferOrders(t ...*TransferOrder) *SymbolCreate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return sc.AddTransferOrderIDs(ids...)
}

// AddExtraServiceOrderIDs adds the "extra_service_order" edge to the ExtraServiceOrder entity by IDs.
func (sc *SymbolCreate) AddExtraServiceOrderIDs(ids ...int64) *SymbolCreate {
	sc.mutation.AddExtraServiceOrderIDs(ids...)
	return sc
}

// AddExtraServiceOrder adds the "extra_service_order" edges to the ExtraServiceOrder entity.
func (sc *SymbolCreate) AddExtraServiceOrder(e ...*ExtraServiceOrder) *SymbolCreate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return sc.AddExtraServiceOrderIDs(ids...)
}

// Mutation returns the SymbolMutation object of the builder.
func (sc *SymbolCreate) Mutation() *SymbolMutation {
	return sc.mutation
}

// Save creates the Symbol in the database.
func (sc *SymbolCreate) Save(ctx context.Context) (*Symbol, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SymbolCreate) SaveX(ctx context.Context) *Symbol {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SymbolCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SymbolCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SymbolCreate) defaults() {
	if _, ok := sc.mutation.CreatedBy(); !ok {
		v := symbol.DefaultCreatedBy
		sc.mutation.SetCreatedBy(v)
	}
	if _, ok := sc.mutation.UpdatedBy(); !ok {
		v := symbol.DefaultUpdatedBy
		sc.mutation.SetUpdatedBy(v)
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := symbol.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := symbol.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.DeletedAt(); !ok {
		v := symbol.DefaultDeletedAt
		sc.mutation.SetDeletedAt(v)
	}
	if _, ok := sc.mutation.Name(); !ok {
		v := symbol.DefaultName
		sc.mutation.SetName(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := symbol.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SymbolCreate) check() error {
	if _, ok := sc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "Symbol.created_by"`)}
	}
	if _, ok := sc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "Symbol.updated_by"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "Symbol.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "Symbol.updated_at"`)}
	}
	if _, ok := sc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "Symbol.deleted_at"`)}
	}
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`cep_ent: missing required field "Symbol.name"`)}
	}
	return nil
}

func (sc *SymbolCreate) sqlSave(ctx context.Context) (*Symbol, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SymbolCreate) createSpec() (*Symbol, *sqlgraph.CreateSpec) {
	var (
		_node = &Symbol{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(symbol.Table, sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreatedBy(); ok {
		_spec.SetField(symbol.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := sc.mutation.UpdatedBy(); ok {
		_spec.SetField(symbol.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(symbol.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(symbol.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.SetField(symbol.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(symbol.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := sc.mutation.WalletsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.WalletsTable,
			Columns: []string{symbol.WalletsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.BillsTable,
			Columns: []string{symbol.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.IncomeBillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.IncomeBillsTable,
			Columns: []string{symbol.IncomeBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.MissionOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.MissionOrdersTable,
			Columns: []string{symbol.MissionOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.TransferOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.TransferOrdersTable,
			Columns: []string{symbol.TransferOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transferorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ExtraServiceOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symbol.ExtraServiceOrderTable,
			Columns: []string{symbol.ExtraServiceOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extraserviceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Symbol.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SymbolUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (sc *SymbolCreate) OnConflict(opts ...sql.ConflictOption) *SymbolUpsertOne {
	sc.conflict = opts
	return &SymbolUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Symbol.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *SymbolCreate) OnConflictColumns(columns ...string) *SymbolUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SymbolUpsertOne{
		create: sc,
	}
}

type (
	// SymbolUpsertOne is the builder for "upsert"-ing
	//  one Symbol node.
	SymbolUpsertOne struct {
		create *SymbolCreate
	}

	// SymbolUpsert is the "OnConflict" setter.
	SymbolUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *SymbolUpsert) SetCreatedBy(v int64) *SymbolUpsert {
	u.Set(symbol.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *SymbolUpsert) UpdateCreatedBy() *SymbolUpsert {
	u.SetExcluded(symbol.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *SymbolUpsert) AddCreatedBy(v int64) *SymbolUpsert {
	u.Add(symbol.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *SymbolUpsert) SetUpdatedBy(v int64) *SymbolUpsert {
	u.Set(symbol.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *SymbolUpsert) UpdateUpdatedBy() *SymbolUpsert {
	u.SetExcluded(symbol.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *SymbolUpsert) AddUpdatedBy(v int64) *SymbolUpsert {
	u.Add(symbol.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SymbolUpsert) SetUpdatedAt(v time.Time) *SymbolUpsert {
	u.Set(symbol.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SymbolUpsert) UpdateUpdatedAt() *SymbolUpsert {
	u.SetExcluded(symbol.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SymbolUpsert) SetDeletedAt(v time.Time) *SymbolUpsert {
	u.Set(symbol.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SymbolUpsert) UpdateDeletedAt() *SymbolUpsert {
	u.SetExcluded(symbol.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *SymbolUpsert) SetName(v string) *SymbolUpsert {
	u.Set(symbol.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SymbolUpsert) UpdateName() *SymbolUpsert {
	u.SetExcluded(symbol.FieldName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Symbol.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(symbol.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SymbolUpsertOne) UpdateNewValues() *SymbolUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(symbol.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(symbol.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Symbol.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SymbolUpsertOne) Ignore() *SymbolUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SymbolUpsertOne) DoNothing() *SymbolUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SymbolCreate.OnConflict
// documentation for more info.
func (u *SymbolUpsertOne) Update(set func(*SymbolUpsert)) *SymbolUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SymbolUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *SymbolUpsertOne) SetCreatedBy(v int64) *SymbolUpsertOne {
	return u.Update(func(s *SymbolUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *SymbolUpsertOne) AddCreatedBy(v int64) *SymbolUpsertOne {
	return u.Update(func(s *SymbolUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *SymbolUpsertOne) UpdateCreatedBy() *SymbolUpsertOne {
	return u.Update(func(s *SymbolUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *SymbolUpsertOne) SetUpdatedBy(v int64) *SymbolUpsertOne {
	return u.Update(func(s *SymbolUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *SymbolUpsertOne) AddUpdatedBy(v int64) *SymbolUpsertOne {
	return u.Update(func(s *SymbolUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *SymbolUpsertOne) UpdateUpdatedBy() *SymbolUpsertOne {
	return u.Update(func(s *SymbolUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SymbolUpsertOne) SetUpdatedAt(v time.Time) *SymbolUpsertOne {
	return u.Update(func(s *SymbolUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SymbolUpsertOne) UpdateUpdatedAt() *SymbolUpsertOne {
	return u.Update(func(s *SymbolUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SymbolUpsertOne) SetDeletedAt(v time.Time) *SymbolUpsertOne {
	return u.Update(func(s *SymbolUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SymbolUpsertOne) UpdateDeletedAt() *SymbolUpsertOne {
	return u.Update(func(s *SymbolUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *SymbolUpsertOne) SetName(v string) *SymbolUpsertOne {
	return u.Update(func(s *SymbolUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SymbolUpsertOne) UpdateName() *SymbolUpsertOne {
	return u.Update(func(s *SymbolUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *SymbolUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for SymbolCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SymbolUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SymbolUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SymbolUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SymbolCreateBulk is the builder for creating many Symbol entities in bulk.
type SymbolCreateBulk struct {
	config
	err      error
	builders []*SymbolCreate
	conflict []sql.ConflictOption
}

// Save creates the Symbol entities in the database.
func (scb *SymbolCreateBulk) Save(ctx context.Context) ([]*Symbol, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Symbol, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SymbolMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SymbolCreateBulk) SaveX(ctx context.Context) []*Symbol {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SymbolCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SymbolCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Symbol.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SymbolUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (scb *SymbolCreateBulk) OnConflict(opts ...sql.ConflictOption) *SymbolUpsertBulk {
	scb.conflict = opts
	return &SymbolUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Symbol.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *SymbolCreateBulk) OnConflictColumns(columns ...string) *SymbolUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SymbolUpsertBulk{
		create: scb,
	}
}

// SymbolUpsertBulk is the builder for "upsert"-ing
// a bulk of Symbol nodes.
type SymbolUpsertBulk struct {
	create *SymbolCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Symbol.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(symbol.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SymbolUpsertBulk) UpdateNewValues() *SymbolUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(symbol.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(symbol.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Symbol.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SymbolUpsertBulk) Ignore() *SymbolUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SymbolUpsertBulk) DoNothing() *SymbolUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SymbolCreateBulk.OnConflict
// documentation for more info.
func (u *SymbolUpsertBulk) Update(set func(*SymbolUpsert)) *SymbolUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SymbolUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *SymbolUpsertBulk) SetCreatedBy(v int64) *SymbolUpsertBulk {
	return u.Update(func(s *SymbolUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *SymbolUpsertBulk) AddCreatedBy(v int64) *SymbolUpsertBulk {
	return u.Update(func(s *SymbolUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *SymbolUpsertBulk) UpdateCreatedBy() *SymbolUpsertBulk {
	return u.Update(func(s *SymbolUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *SymbolUpsertBulk) SetUpdatedBy(v int64) *SymbolUpsertBulk {
	return u.Update(func(s *SymbolUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *SymbolUpsertBulk) AddUpdatedBy(v int64) *SymbolUpsertBulk {
	return u.Update(func(s *SymbolUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *SymbolUpsertBulk) UpdateUpdatedBy() *SymbolUpsertBulk {
	return u.Update(func(s *SymbolUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SymbolUpsertBulk) SetUpdatedAt(v time.Time) *SymbolUpsertBulk {
	return u.Update(func(s *SymbolUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SymbolUpsertBulk) UpdateUpdatedAt() *SymbolUpsertBulk {
	return u.Update(func(s *SymbolUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SymbolUpsertBulk) SetDeletedAt(v time.Time) *SymbolUpsertBulk {
	return u.Update(func(s *SymbolUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SymbolUpsertBulk) UpdateDeletedAt() *SymbolUpsertBulk {
	return u.Update(func(s *SymbolUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *SymbolUpsertBulk) SetName(v string) *SymbolUpsertBulk {
	return u.Update(func(s *SymbolUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SymbolUpsertBulk) UpdateName() *SymbolUpsertBulk {
	return u.Update(func(s *SymbolUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *SymbolUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the SymbolCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for SymbolCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SymbolUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
