// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/artwork"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/artworklike"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
)

// ArtworkCreate is the builder for creating a Artwork entity.
type ArtworkCreate struct {
	config
	mutation *ArtworkMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (ac *ArtworkCreate) SetCreatedBy(i int64) *ArtworkCreate {
	ac.mutation.SetCreatedBy(i)
	return ac
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ac *ArtworkCreate) SetNillableCreatedBy(i *int64) *ArtworkCreate {
	if i != nil {
		ac.SetCreatedBy(*i)
	}
	return ac
}

// SetUpdatedBy sets the "updated_by" field.
func (ac *ArtworkCreate) SetUpdatedBy(i int64) *ArtworkCreate {
	ac.mutation.SetUpdatedBy(i)
	return ac
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ac *ArtworkCreate) SetNillableUpdatedBy(i *int64) *ArtworkCreate {
	if i != nil {
		ac.SetUpdatedBy(*i)
	}
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *ArtworkCreate) SetCreatedAt(t time.Time) *ArtworkCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *ArtworkCreate) SetNillableCreatedAt(t *time.Time) *ArtworkCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *ArtworkCreate) SetUpdatedAt(t time.Time) *ArtworkCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *ArtworkCreate) SetNillableUpdatedAt(t *time.Time) *ArtworkCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *ArtworkCreate) SetDeletedAt(t time.Time) *ArtworkCreate {
	ac.mutation.SetDeletedAt(t)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *ArtworkCreate) SetNillableDeletedAt(t *time.Time) *ArtworkCreate {
	if t != nil {
		ac.SetDeletedAt(*t)
	}
	return ac
}

// SetName sets the "name" field.
func (ac *ArtworkCreate) SetName(s string) *ArtworkCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ac *ArtworkCreate) SetNillableName(s *string) *ArtworkCreate {
	if s != nil {
		ac.SetName(*s)
	}
	return ac
}

// SetURL sets the "url" field.
func (ac *ArtworkCreate) SetURL(s string) *ArtworkCreate {
	ac.mutation.SetURL(s)
	return ac
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (ac *ArtworkCreate) SetNillableURL(s *string) *ArtworkCreate {
	if s != nil {
		ac.SetURL(*s)
	}
	return ac
}

// SetAuthorID sets the "author_id" field.
func (ac *ArtworkCreate) SetAuthorID(i int64) *ArtworkCreate {
	ac.mutation.SetAuthorID(i)
	return ac
}

// SetNillableAuthorID sets the "author_id" field if the given value is not nil.
func (ac *ArtworkCreate) SetNillableAuthorID(i *int64) *ArtworkCreate {
	if i != nil {
		ac.SetAuthorID(*i)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *ArtworkCreate) SetID(i int64) *ArtworkCreate {
	ac.mutation.SetID(i)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *ArtworkCreate) SetNillableID(i *int64) *ArtworkCreate {
	if i != nil {
		ac.SetID(*i)
	}
	return ac
}

// SetAuthor sets the "author" edge to the User entity.
func (ac *ArtworkCreate) SetAuthor(u *User) *ArtworkCreate {
	return ac.SetAuthorID(u.ID)
}

// AddArtworkLikeIDs adds the "artwork_likes" edge to the ArtworkLike entity by IDs.
func (ac *ArtworkCreate) AddArtworkLikeIDs(ids ...int64) *ArtworkCreate {
	ac.mutation.AddArtworkLikeIDs(ids...)
	return ac
}

// AddArtworkLikes adds the "artwork_likes" edges to the ArtworkLike entity.
func (ac *ArtworkCreate) AddArtworkLikes(a ...*ArtworkLike) *ArtworkCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddArtworkLikeIDs(ids...)
}

// Mutation returns the ArtworkMutation object of the builder.
func (ac *ArtworkCreate) Mutation() *ArtworkMutation {
	return ac.mutation
}

// Save creates the Artwork in the database.
func (ac *ArtworkCreate) Save(ctx context.Context) (*Artwork, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ArtworkCreate) SaveX(ctx context.Context) *Artwork {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *ArtworkCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *ArtworkCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *ArtworkCreate) defaults() {
	if _, ok := ac.mutation.CreatedBy(); !ok {
		v := artwork.DefaultCreatedBy
		ac.mutation.SetCreatedBy(v)
	}
	if _, ok := ac.mutation.UpdatedBy(); !ok {
		v := artwork.DefaultUpdatedBy
		ac.mutation.SetUpdatedBy(v)
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := artwork.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := artwork.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.DeletedAt(); !ok {
		v := artwork.DefaultDeletedAt
		ac.mutation.SetDeletedAt(v)
	}
	if _, ok := ac.mutation.Name(); !ok {
		v := artwork.DefaultName
		ac.mutation.SetName(v)
	}
	if _, ok := ac.mutation.URL(); !ok {
		v := artwork.DefaultURL
		ac.mutation.SetURL(v)
	}
	if _, ok := ac.mutation.AuthorID(); !ok {
		v := artwork.DefaultAuthorID
		ac.mutation.SetAuthorID(v)
	}
	if _, ok := ac.mutation.ID(); !ok {
		v := artwork.DefaultID()
		ac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *ArtworkCreate) check() error {
	if _, ok := ac.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "Artwork.created_by"`)}
	}
	if _, ok := ac.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "Artwork.updated_by"`)}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "Artwork.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "Artwork.updated_at"`)}
	}
	if _, ok := ac.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "Artwork.deleted_at"`)}
	}
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`cep_ent: missing required field "Artwork.name"`)}
	}
	if _, ok := ac.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`cep_ent: missing required field "Artwork.url"`)}
	}
	if _, ok := ac.mutation.AuthorID(); !ok {
		return &ValidationError{Name: "author_id", err: errors.New(`cep_ent: missing required field "Artwork.author_id"`)}
	}
	if _, ok := ac.mutation.AuthorID(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`cep_ent: missing required edge "Artwork.author"`)}
	}
	return nil
}

func (ac *ArtworkCreate) sqlSave(ctx context.Context) (*Artwork, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *ArtworkCreate) createSpec() (*Artwork, *sqlgraph.CreateSpec) {
	var (
		_node = &Artwork{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(artwork.Table, sqlgraph.NewFieldSpec(artwork.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.CreatedBy(); ok {
		_spec.SetField(artwork.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := ac.mutation.UpdatedBy(); ok {
		_spec.SetField(artwork.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(artwork.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(artwork.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.SetField(artwork.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(artwork.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ac.mutation.URL(); ok {
		_spec.SetField(artwork.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if nodes := ac.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artwork.AuthorTable,
			Columns: []string{artwork.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AuthorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.ArtworkLikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artwork.ArtworkLikesTable,
			Columns: []string{artwork.ArtworkLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artworklike.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Artwork.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ArtworkUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (ac *ArtworkCreate) OnConflict(opts ...sql.ConflictOption) *ArtworkUpsertOne {
	ac.conflict = opts
	return &ArtworkUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Artwork.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *ArtworkCreate) OnConflictColumns(columns ...string) *ArtworkUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &ArtworkUpsertOne{
		create: ac,
	}
}

type (
	// ArtworkUpsertOne is the builder for "upsert"-ing
	//  one Artwork node.
	ArtworkUpsertOne struct {
		create *ArtworkCreate
	}

	// ArtworkUpsert is the "OnConflict" setter.
	ArtworkUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *ArtworkUpsert) SetCreatedBy(v int64) *ArtworkUpsert {
	u.Set(artwork.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ArtworkUpsert) UpdateCreatedBy() *ArtworkUpsert {
	u.SetExcluded(artwork.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *ArtworkUpsert) AddCreatedBy(v int64) *ArtworkUpsert {
	u.Add(artwork.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ArtworkUpsert) SetUpdatedBy(v int64) *ArtworkUpsert {
	u.Set(artwork.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ArtworkUpsert) UpdateUpdatedBy() *ArtworkUpsert {
	u.SetExcluded(artwork.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ArtworkUpsert) AddUpdatedBy(v int64) *ArtworkUpsert {
	u.Add(artwork.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ArtworkUpsert) SetUpdatedAt(v time.Time) *ArtworkUpsert {
	u.Set(artwork.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ArtworkUpsert) UpdateUpdatedAt() *ArtworkUpsert {
	u.SetExcluded(artwork.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ArtworkUpsert) SetDeletedAt(v time.Time) *ArtworkUpsert {
	u.Set(artwork.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ArtworkUpsert) UpdateDeletedAt() *ArtworkUpsert {
	u.SetExcluded(artwork.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *ArtworkUpsert) SetName(v string) *ArtworkUpsert {
	u.Set(artwork.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ArtworkUpsert) UpdateName() *ArtworkUpsert {
	u.SetExcluded(artwork.FieldName)
	return u
}

// SetURL sets the "url" field.
func (u *ArtworkUpsert) SetURL(v string) *ArtworkUpsert {
	u.Set(artwork.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *ArtworkUpsert) UpdateURL() *ArtworkUpsert {
	u.SetExcluded(artwork.FieldURL)
	return u
}

// SetAuthorID sets the "author_id" field.
func (u *ArtworkUpsert) SetAuthorID(v int64) *ArtworkUpsert {
	u.Set(artwork.FieldAuthorID, v)
	return u
}

// UpdateAuthorID sets the "author_id" field to the value that was provided on create.
func (u *ArtworkUpsert) UpdateAuthorID() *ArtworkUpsert {
	u.SetExcluded(artwork.FieldAuthorID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Artwork.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(artwork.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ArtworkUpsertOne) UpdateNewValues() *ArtworkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(artwork.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(artwork.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Artwork.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ArtworkUpsertOne) Ignore() *ArtworkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ArtworkUpsertOne) DoNothing() *ArtworkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ArtworkCreate.OnConflict
// documentation for more info.
func (u *ArtworkUpsertOne) Update(set func(*ArtworkUpsert)) *ArtworkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ArtworkUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *ArtworkUpsertOne) SetCreatedBy(v int64) *ArtworkUpsertOne {
	return u.Update(func(s *ArtworkUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *ArtworkUpsertOne) AddCreatedBy(v int64) *ArtworkUpsertOne {
	return u.Update(func(s *ArtworkUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ArtworkUpsertOne) UpdateCreatedBy() *ArtworkUpsertOne {
	return u.Update(func(s *ArtworkUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ArtworkUpsertOne) SetUpdatedBy(v int64) *ArtworkUpsertOne {
	return u.Update(func(s *ArtworkUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ArtworkUpsertOne) AddUpdatedBy(v int64) *ArtworkUpsertOne {
	return u.Update(func(s *ArtworkUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ArtworkUpsertOne) UpdateUpdatedBy() *ArtworkUpsertOne {
	return u.Update(func(s *ArtworkUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ArtworkUpsertOne) SetUpdatedAt(v time.Time) *ArtworkUpsertOne {
	return u.Update(func(s *ArtworkUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ArtworkUpsertOne) UpdateUpdatedAt() *ArtworkUpsertOne {
	return u.Update(func(s *ArtworkUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ArtworkUpsertOne) SetDeletedAt(v time.Time) *ArtworkUpsertOne {
	return u.Update(func(s *ArtworkUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ArtworkUpsertOne) UpdateDeletedAt() *ArtworkUpsertOne {
	return u.Update(func(s *ArtworkUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *ArtworkUpsertOne) SetName(v string) *ArtworkUpsertOne {
	return u.Update(func(s *ArtworkUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ArtworkUpsertOne) UpdateName() *ArtworkUpsertOne {
	return u.Update(func(s *ArtworkUpsert) {
		s.UpdateName()
	})
}

// SetURL sets the "url" field.
func (u *ArtworkUpsertOne) SetURL(v string) *ArtworkUpsertOne {
	return u.Update(func(s *ArtworkUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *ArtworkUpsertOne) UpdateURL() *ArtworkUpsertOne {
	return u.Update(func(s *ArtworkUpsert) {
		s.UpdateURL()
	})
}

// SetAuthorID sets the "author_id" field.
func (u *ArtworkUpsertOne) SetAuthorID(v int64) *ArtworkUpsertOne {
	return u.Update(func(s *ArtworkUpsert) {
		s.SetAuthorID(v)
	})
}

// UpdateAuthorID sets the "author_id" field to the value that was provided on create.
func (u *ArtworkUpsertOne) UpdateAuthorID() *ArtworkUpsertOne {
	return u.Update(func(s *ArtworkUpsert) {
		s.UpdateAuthorID()
	})
}

// Exec executes the query.
func (u *ArtworkUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for ArtworkCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ArtworkUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ArtworkUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ArtworkUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ArtworkCreateBulk is the builder for creating many Artwork entities in bulk.
type ArtworkCreateBulk struct {
	config
	err      error
	builders []*ArtworkCreate
	conflict []sql.ConflictOption
}

// Save creates the Artwork entities in the database.
func (acb *ArtworkCreateBulk) Save(ctx context.Context) ([]*Artwork, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Artwork, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ArtworkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *ArtworkCreateBulk) SaveX(ctx context.Context) []*Artwork {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *ArtworkCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *ArtworkCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Artwork.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ArtworkUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (acb *ArtworkCreateBulk) OnConflict(opts ...sql.ConflictOption) *ArtworkUpsertBulk {
	acb.conflict = opts
	return &ArtworkUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Artwork.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *ArtworkCreateBulk) OnConflictColumns(columns ...string) *ArtworkUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &ArtworkUpsertBulk{
		create: acb,
	}
}

// ArtworkUpsertBulk is the builder for "upsert"-ing
// a bulk of Artwork nodes.
type ArtworkUpsertBulk struct {
	create *ArtworkCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Artwork.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(artwork.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ArtworkUpsertBulk) UpdateNewValues() *ArtworkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(artwork.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(artwork.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Artwork.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ArtworkUpsertBulk) Ignore() *ArtworkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ArtworkUpsertBulk) DoNothing() *ArtworkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ArtworkCreateBulk.OnConflict
// documentation for more info.
func (u *ArtworkUpsertBulk) Update(set func(*ArtworkUpsert)) *ArtworkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ArtworkUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *ArtworkUpsertBulk) SetCreatedBy(v int64) *ArtworkUpsertBulk {
	return u.Update(func(s *ArtworkUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *ArtworkUpsertBulk) AddCreatedBy(v int64) *ArtworkUpsertBulk {
	return u.Update(func(s *ArtworkUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ArtworkUpsertBulk) UpdateCreatedBy() *ArtworkUpsertBulk {
	return u.Update(func(s *ArtworkUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ArtworkUpsertBulk) SetUpdatedBy(v int64) *ArtworkUpsertBulk {
	return u.Update(func(s *ArtworkUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ArtworkUpsertBulk) AddUpdatedBy(v int64) *ArtworkUpsertBulk {
	return u.Update(func(s *ArtworkUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ArtworkUpsertBulk) UpdateUpdatedBy() *ArtworkUpsertBulk {
	return u.Update(func(s *ArtworkUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ArtworkUpsertBulk) SetUpdatedAt(v time.Time) *ArtworkUpsertBulk {
	return u.Update(func(s *ArtworkUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ArtworkUpsertBulk) UpdateUpdatedAt() *ArtworkUpsertBulk {
	return u.Update(func(s *ArtworkUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ArtworkUpsertBulk) SetDeletedAt(v time.Time) *ArtworkUpsertBulk {
	return u.Update(func(s *ArtworkUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ArtworkUpsertBulk) UpdateDeletedAt() *ArtworkUpsertBulk {
	return u.Update(func(s *ArtworkUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *ArtworkUpsertBulk) SetName(v string) *ArtworkUpsertBulk {
	return u.Update(func(s *ArtworkUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ArtworkUpsertBulk) UpdateName() *ArtworkUpsertBulk {
	return u.Update(func(s *ArtworkUpsert) {
		s.UpdateName()
	})
}

// SetURL sets the "url" field.
func (u *ArtworkUpsertBulk) SetURL(v string) *ArtworkUpsertBulk {
	return u.Update(func(s *ArtworkUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *ArtworkUpsertBulk) UpdateURL() *ArtworkUpsertBulk {
	return u.Update(func(s *ArtworkUpsert) {
		s.UpdateURL()
	})
}

// SetAuthorID sets the "author_id" field.
func (u *ArtworkUpsertBulk) SetAuthorID(v int64) *ArtworkUpsertBulk {
	return u.Update(func(s *ArtworkUpsert) {
		s.SetAuthorID(v)
	})
}

// UpdateAuthorID sets the "author_id" field to the value that was provided on create.
func (u *ArtworkUpsertBulk) UpdateAuthorID() *ArtworkUpsertBulk {
	return u.Update(func(s *ArtworkUpsert) {
		s.UpdateAuthorID()
	})
}

// Exec executes the query.
func (u *ArtworkUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the ArtworkCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for ArtworkCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ArtworkUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
