// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/missionkind"
	"cephalon-ent/pkg/cep_ent/predicate"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MissionKindDelete is the builder for deleting a MissionKind entity.
type MissionKindDelete struct {
	config
	hooks    []Hook
	mutation *MissionKindMutation
}

// Where appends a list predicates to the MissionKindDelete builder.
func (mkd *MissionKindDelete) Where(ps ...predicate.MissionKind) *MissionKindDelete {
	mkd.mutation.Where(ps...)
	return mkd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mkd *MissionKindDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, mkd.sqlExec, mkd.mutation, mkd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mkd *MissionKindDelete) ExecX(ctx context.Context) int {
	n, err := mkd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mkd *MissionKindDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(missionkind.Table, sqlgraph.NewFieldSpec(missionkind.FieldID, field.TypeInt64))
	if ps := mkd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mkd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mkd.mutation.done = true
	return affected, err
}

// MissionKindDeleteOne is the builder for deleting a single MissionKind entity.
type MissionKindDeleteOne struct {
	mkd *MissionKindDelete
}

// Where appends a list predicates to the MissionKindDelete builder.
func (mkdo *MissionKindDeleteOne) Where(ps ...predicate.MissionKind) *MissionKindDeleteOne {
	mkdo.mkd.mutation.Where(ps...)
	return mkdo
}

// Exec executes the deletion query.
func (mkdo *MissionKindDeleteOne) Exec(ctx context.Context) error {
	n, err := mkdo.mkd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{missionkind.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mkdo *MissionKindDeleteOne) ExecX(ctx context.Context) {
	if err := mkdo.Exec(ctx); err != nil {
		panic(err)
	}
}
