// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/device"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/deviceconfig"
)

// 设备配置信息
type DeviceConfig struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建者 ID
	CreatedBy int64 `json:"created_by,string"`
	// 更新者 ID
	UpdatedBy int64 `json:"updated_by,string"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// 外键设备 id
	DeviceID int64 `json:"device_id,string"`
	// 间隔基数
	GapBase int64 `json:"gap_base"`
	// 间隔随机范围最大值
	GapRandomMax int64 `json:"gap_random_max"`
	// 间隔随机范围最小值
	GapRandomMin int64 `json:"gap_random_min"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeviceConfigQuery when eager-loading is set.
	Edges        DeviceConfigEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DeviceConfigEdges holds the relations/edges for other nodes in the graph.
type DeviceConfigEdges struct {
	// Device holds the value of the device edge.
	Device *Device `json:"device,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DeviceOrErr returns the Device value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeviceConfigEdges) DeviceOrErr() (*Device, error) {
	if e.loadedTypes[0] {
		if e.Device == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: device.Label}
		}
		return e.Device, nil
	}
	return nil, &NotLoadedError{edge: "device"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeviceConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case deviceconfig.FieldID, deviceconfig.FieldCreatedBy, deviceconfig.FieldUpdatedBy, deviceconfig.FieldDeviceID, deviceconfig.FieldGapBase, deviceconfig.FieldGapRandomMax, deviceconfig.FieldGapRandomMin:
			values[i] = new(sql.NullInt64)
		case deviceconfig.FieldCreatedAt, deviceconfig.FieldUpdatedAt, deviceconfig.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeviceConfig fields.
func (dc *DeviceConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deviceconfig.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dc.ID = int64(value.Int64)
		case deviceconfig.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				dc.CreatedBy = value.Int64
			}
		case deviceconfig.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				dc.UpdatedBy = value.Int64
			}
		case deviceconfig.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				dc.CreatedAt = value.Time
			}
		case deviceconfig.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				dc.UpdatedAt = value.Time
			}
		case deviceconfig.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				dc.DeletedAt = value.Time
			}
		case deviceconfig.FieldDeviceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field device_id", values[i])
			} else if value.Valid {
				dc.DeviceID = value.Int64
			}
		case deviceconfig.FieldGapBase:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gap_base", values[i])
			} else if value.Valid {
				dc.GapBase = value.Int64
			}
		case deviceconfig.FieldGapRandomMax:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gap_random_max", values[i])
			} else if value.Valid {
				dc.GapRandomMax = value.Int64
			}
		case deviceconfig.FieldGapRandomMin:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gap_random_min", values[i])
			} else if value.Valid {
				dc.GapRandomMin = value.Int64
			}
		default:
			dc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DeviceConfig.
// This includes values selected through modifiers, order, etc.
func (dc *DeviceConfig) Value(name string) (ent.Value, error) {
	return dc.selectValues.Get(name)
}

// QueryDevice queries the "device" edge of the DeviceConfig entity.
func (dc *DeviceConfig) QueryDevice() *DeviceQuery {
	return NewDeviceConfigClient(dc.config).QueryDevice(dc)
}

// Update returns a builder for updating this DeviceConfig.
// Note that you need to call DeviceConfig.Unwrap() before calling this method if this DeviceConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (dc *DeviceConfig) Update() *DeviceConfigUpdateOne {
	return NewDeviceConfigClient(dc.config).UpdateOne(dc)
}

// Unwrap unwraps the DeviceConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dc *DeviceConfig) Unwrap() *DeviceConfig {
	_tx, ok := dc.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: DeviceConfig is not a transactional entity")
	}
	dc.config.driver = _tx.drv
	return dc
}

// String implements the fmt.Stringer.
func (dc *DeviceConfig) String() string {
	var builder strings.Builder
	builder.WriteString("DeviceConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dc.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", dc.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", dc.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(dc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(dc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(dc.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("device_id=")
	builder.WriteString(fmt.Sprintf("%v", dc.DeviceID))
	builder.WriteString(", ")
	builder.WriteString("gap_base=")
	builder.WriteString(fmt.Sprintf("%v", dc.GapBase))
	builder.WriteString(", ")
	builder.WriteString("gap_random_max=")
	builder.WriteString(fmt.Sprintf("%v", dc.GapRandomMax))
	builder.WriteString(", ")
	builder.WriteString("gap_random_min=")
	builder.WriteString(fmt.Sprintf("%v", dc.GapRandomMin))
	builder.WriteByte(')')
	return builder.String()
}

// DeviceConfigs is a parsable slice of DeviceConfig.
type DeviceConfigs []*DeviceConfig
