// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/hmackeypair"
	"cephalon-ent/pkg/cep_ent/mission"
	"cephalon-ent/pkg/cep_ent/missionproduceorder"
	"cephalon-ent/pkg/cep_ent/missionproduction"
	"cephalon-ent/pkg/cep_ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MissionProductionUpdate is the builder for updating MissionProduction entities.
type MissionProductionUpdate struct {
	config
	hooks    []Hook
	mutation *MissionProductionMutation
}

// Where appends a list predicates to the MissionProductionUpdate builder.
func (mpu *MissionProductionUpdate) Where(ps ...predicate.MissionProduction) *MissionProductionUpdate {
	mpu.mutation.Where(ps...)
	return mpu
}

// SetCreatedBy sets the "created_by" field.
func (mpu *MissionProductionUpdate) SetCreatedBy(i int64) *MissionProductionUpdate {
	mpu.mutation.ResetCreatedBy()
	mpu.mutation.SetCreatedBy(i)
	return mpu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mpu *MissionProductionUpdate) SetNillableCreatedBy(i *int64) *MissionProductionUpdate {
	if i != nil {
		mpu.SetCreatedBy(*i)
	}
	return mpu
}

// AddCreatedBy adds i to the "created_by" field.
func (mpu *MissionProductionUpdate) AddCreatedBy(i int64) *MissionProductionUpdate {
	mpu.mutation.AddCreatedBy(i)
	return mpu
}

// SetUpdatedBy sets the "updated_by" field.
func (mpu *MissionProductionUpdate) SetUpdatedBy(i int64) *MissionProductionUpdate {
	mpu.mutation.ResetUpdatedBy()
	mpu.mutation.SetUpdatedBy(i)
	return mpu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mpu *MissionProductionUpdate) SetNillableUpdatedBy(i *int64) *MissionProductionUpdate {
	if i != nil {
		mpu.SetUpdatedBy(*i)
	}
	return mpu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (mpu *MissionProductionUpdate) AddUpdatedBy(i int64) *MissionProductionUpdate {
	mpu.mutation.AddUpdatedBy(i)
	return mpu
}

// SetUpdatedAt sets the "updated_at" field.
func (mpu *MissionProductionUpdate) SetUpdatedAt(t time.Time) *MissionProductionUpdate {
	mpu.mutation.SetUpdatedAt(t)
	return mpu
}

// SetDeletedAt sets the "deleted_at" field.
func (mpu *MissionProductionUpdate) SetDeletedAt(t time.Time) *MissionProductionUpdate {
	mpu.mutation.SetDeletedAt(t)
	return mpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mpu *MissionProductionUpdate) SetNillableDeletedAt(t *time.Time) *MissionProductionUpdate {
	if t != nil {
		mpu.SetDeletedAt(*t)
	}
	return mpu
}

// SetMissionID sets the "mission_id" field.
func (mpu *MissionProductionUpdate) SetMissionID(i int64) *MissionProductionUpdate {
	mpu.mutation.SetMissionID(i)
	return mpu
}

// SetHmacKeyPairID sets the "hmac_key_pair_id" field.
func (mpu *MissionProductionUpdate) SetHmacKeyPairID(i int64) *MissionProductionUpdate {
	mpu.mutation.SetHmacKeyPairID(i)
	return mpu
}

// SetStartedAt sets the "started_at" field.
func (mpu *MissionProductionUpdate) SetStartedAt(t time.Time) *MissionProductionUpdate {
	mpu.mutation.SetStartedAt(t)
	return mpu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (mpu *MissionProductionUpdate) SetNillableStartedAt(t *time.Time) *MissionProductionUpdate {
	if t != nil {
		mpu.SetStartedAt(*t)
	}
	return mpu
}

// SetFinishedAt sets the "finished_at" field.
func (mpu *MissionProductionUpdate) SetFinishedAt(t time.Time) *MissionProductionUpdate {
	mpu.mutation.SetFinishedAt(t)
	return mpu
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (mpu *MissionProductionUpdate) SetNillableFinishedAt(t *time.Time) *MissionProductionUpdate {
	if t != nil {
		mpu.SetFinishedAt(*t)
	}
	return mpu
}

// SetStatus sets the "status" field.
func (mpu *MissionProductionUpdate) SetStatus(m missionproduction.Status) *MissionProductionUpdate {
	mpu.mutation.SetStatus(m)
	return mpu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mpu *MissionProductionUpdate) SetNillableStatus(m *missionproduction.Status) *MissionProductionUpdate {
	if m != nil {
		mpu.SetStatus(*m)
	}
	return mpu
}

// SetDeviceID sets the "device_id" field.
func (mpu *MissionProductionUpdate) SetDeviceID(i int64) *MissionProductionUpdate {
	mpu.mutation.ResetDeviceID()
	mpu.mutation.SetDeviceID(i)
	return mpu
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (mpu *MissionProductionUpdate) SetNillableDeviceID(i *int64) *MissionProductionUpdate {
	if i != nil {
		mpu.SetDeviceID(*i)
	}
	return mpu
}

// AddDeviceID adds i to the "device_id" field.
func (mpu *MissionProductionUpdate) AddDeviceID(i int64) *MissionProductionUpdate {
	mpu.mutation.AddDeviceID(i)
	return mpu
}

// SetResultUrls sets the "result_urls" field.
func (mpu *MissionProductionUpdate) SetResultUrls(s string) *MissionProductionUpdate {
	mpu.mutation.SetResultUrls(s)
	return mpu
}

// SetNillableResultUrls sets the "result_urls" field if the given value is not nil.
func (mpu *MissionProductionUpdate) SetNillableResultUrls(s *string) *MissionProductionUpdate {
	if s != nil {
		mpu.SetResultUrls(*s)
	}
	return mpu
}

// SetAdditionalResult sets the "additional_result" field.
func (mpu *MissionProductionUpdate) SetAdditionalResult(s string) *MissionProductionUpdate {
	mpu.mutation.SetAdditionalResult(s)
	return mpu
}

// SetNillableAdditionalResult sets the "additional_result" field if the given value is not nil.
func (mpu *MissionProductionUpdate) SetNillableAdditionalResult(s *string) *MissionProductionUpdate {
	if s != nil {
		mpu.SetAdditionalResult(*s)
	}
	return mpu
}

// SetMissionProduceOrderID sets the "mission_produce_order" edge to the MissionProduceOrder entity by ID.
func (mpu *MissionProductionUpdate) SetMissionProduceOrderID(id int64) *MissionProductionUpdate {
	mpu.mutation.SetMissionProduceOrderID(id)
	return mpu
}

// SetNillableMissionProduceOrderID sets the "mission_produce_order" edge to the MissionProduceOrder entity by ID if the given value is not nil.
func (mpu *MissionProductionUpdate) SetNillableMissionProduceOrderID(id *int64) *MissionProductionUpdate {
	if id != nil {
		mpu = mpu.SetMissionProduceOrderID(*id)
	}
	return mpu
}

// SetMissionProduceOrder sets the "mission_produce_order" edge to the MissionProduceOrder entity.
func (mpu *MissionProductionUpdate) SetMissionProduceOrder(m *MissionProduceOrder) *MissionProductionUpdate {
	return mpu.SetMissionProduceOrderID(m.ID)
}

// SetMission sets the "mission" edge to the Mission entity.
func (mpu *MissionProductionUpdate) SetMission(m *Mission) *MissionProductionUpdate {
	return mpu.SetMissionID(m.ID)
}

// SetHmacKeyPair sets the "hmac_key_pair" edge to the HmacKeyPair entity.
func (mpu *MissionProductionUpdate) SetHmacKeyPair(h *HmacKeyPair) *MissionProductionUpdate {
	return mpu.SetHmacKeyPairID(h.ID)
}

// Mutation returns the MissionProductionMutation object of the builder.
func (mpu *MissionProductionUpdate) Mutation() *MissionProductionMutation {
	return mpu.mutation
}

// ClearMissionProduceOrder clears the "mission_produce_order" edge to the MissionProduceOrder entity.
func (mpu *MissionProductionUpdate) ClearMissionProduceOrder() *MissionProductionUpdate {
	mpu.mutation.ClearMissionProduceOrder()
	return mpu
}

// ClearMission clears the "mission" edge to the Mission entity.
func (mpu *MissionProductionUpdate) ClearMission() *MissionProductionUpdate {
	mpu.mutation.ClearMission()
	return mpu
}

// ClearHmacKeyPair clears the "hmac_key_pair" edge to the HmacKeyPair entity.
func (mpu *MissionProductionUpdate) ClearHmacKeyPair() *MissionProductionUpdate {
	mpu.mutation.ClearHmacKeyPair()
	return mpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mpu *MissionProductionUpdate) Save(ctx context.Context) (int, error) {
	mpu.defaults()
	return withHooks(ctx, mpu.sqlSave, mpu.mutation, mpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mpu *MissionProductionUpdate) SaveX(ctx context.Context) int {
	affected, err := mpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mpu *MissionProductionUpdate) Exec(ctx context.Context) error {
	_, err := mpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpu *MissionProductionUpdate) ExecX(ctx context.Context) {
	if err := mpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpu *MissionProductionUpdate) defaults() {
	if _, ok := mpu.mutation.UpdatedAt(); !ok {
		v := missionproduction.UpdateDefaultUpdatedAt()
		mpu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpu *MissionProductionUpdate) check() error {
	if v, ok := mpu.mutation.Status(); ok {
		if err := missionproduction.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "MissionProduction.status": %w`, err)}
		}
	}
	if _, ok := mpu.mutation.MissionID(); mpu.mutation.MissionCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionProduction.mission"`)
	}
	if _, ok := mpu.mutation.HmacKeyPairID(); mpu.mutation.HmacKeyPairCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionProduction.hmac_key_pair"`)
	}
	return nil
}

func (mpu *MissionProductionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(missionproduction.Table, missionproduction.Columns, sqlgraph.NewFieldSpec(missionproduction.FieldID, field.TypeInt64))
	if ps := mpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mpu.mutation.CreatedBy(); ok {
		_spec.SetField(missionproduction.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mpu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(missionproduction.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mpu.mutation.UpdatedBy(); ok {
		_spec.SetField(missionproduction.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mpu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(missionproduction.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mpu.mutation.UpdatedAt(); ok {
		_spec.SetField(missionproduction.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mpu.mutation.DeletedAt(); ok {
		_spec.SetField(missionproduction.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := mpu.mutation.StartedAt(); ok {
		_spec.SetField(missionproduction.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := mpu.mutation.FinishedAt(); ok {
		_spec.SetField(missionproduction.FieldFinishedAt, field.TypeTime, value)
	}
	if value, ok := mpu.mutation.Status(); ok {
		_spec.SetField(missionproduction.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := mpu.mutation.DeviceID(); ok {
		_spec.SetField(missionproduction.FieldDeviceID, field.TypeInt64, value)
	}
	if value, ok := mpu.mutation.AddedDeviceID(); ok {
		_spec.AddField(missionproduction.FieldDeviceID, field.TypeInt64, value)
	}
	if value, ok := mpu.mutation.ResultUrls(); ok {
		_spec.SetField(missionproduction.FieldResultUrls, field.TypeString, value)
	}
	if value, ok := mpu.mutation.AdditionalResult(); ok {
		_spec.SetField(missionproduction.FieldAdditionalResult, field.TypeString, value)
	}
	if mpu.mutation.MissionProduceOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   missionproduction.MissionProduceOrderTable,
			Columns: []string{missionproduction.MissionProduceOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpu.mutation.MissionProduceOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   missionproduction.MissionProduceOrderTable,
			Columns: []string{missionproduction.MissionProduceOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpu.mutation.MissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduction.MissionTable,
			Columns: []string{missionproduction.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpu.mutation.MissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduction.MissionTable,
			Columns: []string{missionproduction.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpu.mutation.HmacKeyPairCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduction.HmacKeyPairTable,
			Columns: []string{missionproduction.HmacKeyPairColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hmackeypair.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpu.mutation.HmacKeyPairIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduction.HmacKeyPairTable,
			Columns: []string{missionproduction.HmacKeyPairColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hmackeypair.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{missionproduction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mpu.mutation.done = true
	return n, nil
}

// MissionProductionUpdateOne is the builder for updating a single MissionProduction entity.
type MissionProductionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MissionProductionMutation
}

// SetCreatedBy sets the "created_by" field.
func (mpuo *MissionProductionUpdateOne) SetCreatedBy(i int64) *MissionProductionUpdateOne {
	mpuo.mutation.ResetCreatedBy()
	mpuo.mutation.SetCreatedBy(i)
	return mpuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mpuo *MissionProductionUpdateOne) SetNillableCreatedBy(i *int64) *MissionProductionUpdateOne {
	if i != nil {
		mpuo.SetCreatedBy(*i)
	}
	return mpuo
}

// AddCreatedBy adds i to the "created_by" field.
func (mpuo *MissionProductionUpdateOne) AddCreatedBy(i int64) *MissionProductionUpdateOne {
	mpuo.mutation.AddCreatedBy(i)
	return mpuo
}

// SetUpdatedBy sets the "updated_by" field.
func (mpuo *MissionProductionUpdateOne) SetUpdatedBy(i int64) *MissionProductionUpdateOne {
	mpuo.mutation.ResetUpdatedBy()
	mpuo.mutation.SetUpdatedBy(i)
	return mpuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mpuo *MissionProductionUpdateOne) SetNillableUpdatedBy(i *int64) *MissionProductionUpdateOne {
	if i != nil {
		mpuo.SetUpdatedBy(*i)
	}
	return mpuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (mpuo *MissionProductionUpdateOne) AddUpdatedBy(i int64) *MissionProductionUpdateOne {
	mpuo.mutation.AddUpdatedBy(i)
	return mpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (mpuo *MissionProductionUpdateOne) SetUpdatedAt(t time.Time) *MissionProductionUpdateOne {
	mpuo.mutation.SetUpdatedAt(t)
	return mpuo
}

// SetDeletedAt sets the "deleted_at" field.
func (mpuo *MissionProductionUpdateOne) SetDeletedAt(t time.Time) *MissionProductionUpdateOne {
	mpuo.mutation.SetDeletedAt(t)
	return mpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mpuo *MissionProductionUpdateOne) SetNillableDeletedAt(t *time.Time) *MissionProductionUpdateOne {
	if t != nil {
		mpuo.SetDeletedAt(*t)
	}
	return mpuo
}

// SetMissionID sets the "mission_id" field.
func (mpuo *MissionProductionUpdateOne) SetMissionID(i int64) *MissionProductionUpdateOne {
	mpuo.mutation.SetMissionID(i)
	return mpuo
}

// SetHmacKeyPairID sets the "hmac_key_pair_id" field.
func (mpuo *MissionProductionUpdateOne) SetHmacKeyPairID(i int64) *MissionProductionUpdateOne {
	mpuo.mutation.SetHmacKeyPairID(i)
	return mpuo
}

// SetStartedAt sets the "started_at" field.
func (mpuo *MissionProductionUpdateOne) SetStartedAt(t time.Time) *MissionProductionUpdateOne {
	mpuo.mutation.SetStartedAt(t)
	return mpuo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (mpuo *MissionProductionUpdateOne) SetNillableStartedAt(t *time.Time) *MissionProductionUpdateOne {
	if t != nil {
		mpuo.SetStartedAt(*t)
	}
	return mpuo
}

// SetFinishedAt sets the "finished_at" field.
func (mpuo *MissionProductionUpdateOne) SetFinishedAt(t time.Time) *MissionProductionUpdateOne {
	mpuo.mutation.SetFinishedAt(t)
	return mpuo
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (mpuo *MissionProductionUpdateOne) SetNillableFinishedAt(t *time.Time) *MissionProductionUpdateOne {
	if t != nil {
		mpuo.SetFinishedAt(*t)
	}
	return mpuo
}

// SetStatus sets the "status" field.
func (mpuo *MissionProductionUpdateOne) SetStatus(m missionproduction.Status) *MissionProductionUpdateOne {
	mpuo.mutation.SetStatus(m)
	return mpuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mpuo *MissionProductionUpdateOne) SetNillableStatus(m *missionproduction.Status) *MissionProductionUpdateOne {
	if m != nil {
		mpuo.SetStatus(*m)
	}
	return mpuo
}

// SetDeviceID sets the "device_id" field.
func (mpuo *MissionProductionUpdateOne) SetDeviceID(i int64) *MissionProductionUpdateOne {
	mpuo.mutation.ResetDeviceID()
	mpuo.mutation.SetDeviceID(i)
	return mpuo
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (mpuo *MissionProductionUpdateOne) SetNillableDeviceID(i *int64) *MissionProductionUpdateOne {
	if i != nil {
		mpuo.SetDeviceID(*i)
	}
	return mpuo
}

// AddDeviceID adds i to the "device_id" field.
func (mpuo *MissionProductionUpdateOne) AddDeviceID(i int64) *MissionProductionUpdateOne {
	mpuo.mutation.AddDeviceID(i)
	return mpuo
}

// SetResultUrls sets the "result_urls" field.
func (mpuo *MissionProductionUpdateOne) SetResultUrls(s string) *MissionProductionUpdateOne {
	mpuo.mutation.SetResultUrls(s)
	return mpuo
}

// SetNillableResultUrls sets the "result_urls" field if the given value is not nil.
func (mpuo *MissionProductionUpdateOne) SetNillableResultUrls(s *string) *MissionProductionUpdateOne {
	if s != nil {
		mpuo.SetResultUrls(*s)
	}
	return mpuo
}

// SetAdditionalResult sets the "additional_result" field.
func (mpuo *MissionProductionUpdateOne) SetAdditionalResult(s string) *MissionProductionUpdateOne {
	mpuo.mutation.SetAdditionalResult(s)
	return mpuo
}

// SetNillableAdditionalResult sets the "additional_result" field if the given value is not nil.
func (mpuo *MissionProductionUpdateOne) SetNillableAdditionalResult(s *string) *MissionProductionUpdateOne {
	if s != nil {
		mpuo.SetAdditionalResult(*s)
	}
	return mpuo
}

// SetMissionProduceOrderID sets the "mission_produce_order" edge to the MissionProduceOrder entity by ID.
func (mpuo *MissionProductionUpdateOne) SetMissionProduceOrderID(id int64) *MissionProductionUpdateOne {
	mpuo.mutation.SetMissionProduceOrderID(id)
	return mpuo
}

// SetNillableMissionProduceOrderID sets the "mission_produce_order" edge to the MissionProduceOrder entity by ID if the given value is not nil.
func (mpuo *MissionProductionUpdateOne) SetNillableMissionProduceOrderID(id *int64) *MissionProductionUpdateOne {
	if id != nil {
		mpuo = mpuo.SetMissionProduceOrderID(*id)
	}
	return mpuo
}

// SetMissionProduceOrder sets the "mission_produce_order" edge to the MissionProduceOrder entity.
func (mpuo *MissionProductionUpdateOne) SetMissionProduceOrder(m *MissionProduceOrder) *MissionProductionUpdateOne {
	return mpuo.SetMissionProduceOrderID(m.ID)
}

// SetMission sets the "mission" edge to the Mission entity.
func (mpuo *MissionProductionUpdateOne) SetMission(m *Mission) *MissionProductionUpdateOne {
	return mpuo.SetMissionID(m.ID)
}

// SetHmacKeyPair sets the "hmac_key_pair" edge to the HmacKeyPair entity.
func (mpuo *MissionProductionUpdateOne) SetHmacKeyPair(h *HmacKeyPair) *MissionProductionUpdateOne {
	return mpuo.SetHmacKeyPairID(h.ID)
}

// Mutation returns the MissionProductionMutation object of the builder.
func (mpuo *MissionProductionUpdateOne) Mutation() *MissionProductionMutation {
	return mpuo.mutation
}

// ClearMissionProduceOrder clears the "mission_produce_order" edge to the MissionProduceOrder entity.
func (mpuo *MissionProductionUpdateOne) ClearMissionProduceOrder() *MissionProductionUpdateOne {
	mpuo.mutation.ClearMissionProduceOrder()
	return mpuo
}

// ClearMission clears the "mission" edge to the Mission entity.
func (mpuo *MissionProductionUpdateOne) ClearMission() *MissionProductionUpdateOne {
	mpuo.mutation.ClearMission()
	return mpuo
}

// ClearHmacKeyPair clears the "hmac_key_pair" edge to the HmacKeyPair entity.
func (mpuo *MissionProductionUpdateOne) ClearHmacKeyPair() *MissionProductionUpdateOne {
	mpuo.mutation.ClearHmacKeyPair()
	return mpuo
}

// Where appends a list predicates to the MissionProductionUpdate builder.
func (mpuo *MissionProductionUpdateOne) Where(ps ...predicate.MissionProduction) *MissionProductionUpdateOne {
	mpuo.mutation.Where(ps...)
	return mpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mpuo *MissionProductionUpdateOne) Select(field string, fields ...string) *MissionProductionUpdateOne {
	mpuo.fields = append([]string{field}, fields...)
	return mpuo
}

// Save executes the query and returns the updated MissionProduction entity.
func (mpuo *MissionProductionUpdateOne) Save(ctx context.Context) (*MissionProduction, error) {
	mpuo.defaults()
	return withHooks(ctx, mpuo.sqlSave, mpuo.mutation, mpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mpuo *MissionProductionUpdateOne) SaveX(ctx context.Context) *MissionProduction {
	node, err := mpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mpuo *MissionProductionUpdateOne) Exec(ctx context.Context) error {
	_, err := mpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpuo *MissionProductionUpdateOne) ExecX(ctx context.Context) {
	if err := mpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpuo *MissionProductionUpdateOne) defaults() {
	if _, ok := mpuo.mutation.UpdatedAt(); !ok {
		v := missionproduction.UpdateDefaultUpdatedAt()
		mpuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpuo *MissionProductionUpdateOne) check() error {
	if v, ok := mpuo.mutation.Status(); ok {
		if err := missionproduction.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "MissionProduction.status": %w`, err)}
		}
	}
	if _, ok := mpuo.mutation.MissionID(); mpuo.mutation.MissionCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionProduction.mission"`)
	}
	if _, ok := mpuo.mutation.HmacKeyPairID(); mpuo.mutation.HmacKeyPairCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionProduction.hmac_key_pair"`)
	}
	return nil
}

func (mpuo *MissionProductionUpdateOne) sqlSave(ctx context.Context) (_node *MissionProduction, err error) {
	if err := mpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(missionproduction.Table, missionproduction.Columns, sqlgraph.NewFieldSpec(missionproduction.FieldID, field.TypeInt64))
	id, ok := mpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "MissionProduction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, missionproduction.FieldID)
		for _, f := range fields {
			if !missionproduction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != missionproduction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mpuo.mutation.CreatedBy(); ok {
		_spec.SetField(missionproduction.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mpuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(missionproduction.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mpuo.mutation.UpdatedBy(); ok {
		_spec.SetField(missionproduction.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mpuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(missionproduction.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(missionproduction.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mpuo.mutation.DeletedAt(); ok {
		_spec.SetField(missionproduction.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := mpuo.mutation.StartedAt(); ok {
		_spec.SetField(missionproduction.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := mpuo.mutation.FinishedAt(); ok {
		_spec.SetField(missionproduction.FieldFinishedAt, field.TypeTime, value)
	}
	if value, ok := mpuo.mutation.Status(); ok {
		_spec.SetField(missionproduction.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := mpuo.mutation.DeviceID(); ok {
		_spec.SetField(missionproduction.FieldDeviceID, field.TypeInt64, value)
	}
	if value, ok := mpuo.mutation.AddedDeviceID(); ok {
		_spec.AddField(missionproduction.FieldDeviceID, field.TypeInt64, value)
	}
	if value, ok := mpuo.mutation.ResultUrls(); ok {
		_spec.SetField(missionproduction.FieldResultUrls, field.TypeString, value)
	}
	if value, ok := mpuo.mutation.AdditionalResult(); ok {
		_spec.SetField(missionproduction.FieldAdditionalResult, field.TypeString, value)
	}
	if mpuo.mutation.MissionProduceOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   missionproduction.MissionProduceOrderTable,
			Columns: []string{missionproduction.MissionProduceOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpuo.mutation.MissionProduceOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   missionproduction.MissionProduceOrderTable,
			Columns: []string{missionproduction.MissionProduceOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionproduceorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpuo.mutation.MissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduction.MissionTable,
			Columns: []string{missionproduction.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpuo.mutation.MissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduction.MissionTable,
			Columns: []string{missionproduction.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpuo.mutation.HmacKeyPairCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduction.HmacKeyPairTable,
			Columns: []string{missionproduction.HmacKeyPairColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hmackeypair.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpuo.mutation.HmacKeyPairIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionproduction.HmacKeyPairTable,
			Columns: []string{missionproduction.HmacKeyPairColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hmackeypair.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MissionProduction{config: mpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{missionproduction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mpuo.mutation.done = true
	return _node, nil
}
