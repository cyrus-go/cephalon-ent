// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/survey"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/surveyquestion"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// 问卷问题表
type SurveyQuestion struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建者 ID
	CreatedBy int64 `json:"created_by,string"`
	// 更新者 ID
	UpdatedBy int64 `json:"updated_by,string"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// 问卷 ID
	SurveyID int64 `json:"survey_id,string"`
	// 问题的内容
	Text string `json:"text"`
	// 问题类型，单选/多选等
	Type enums.SurveyQuestionType `json:"type"`
	// 选项内容，单选/多选的内容
	Options []string `json:"options"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SurveyQuestionQuery when eager-loading is set.
	Edges        SurveyQuestionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SurveyQuestionEdges holds the relations/edges for other nodes in the graph.
type SurveyQuestionEdges struct {
	// Survey holds the value of the survey edge.
	Survey *Survey `json:"survey,omitempty"`
	// SurveyAnswers holds the value of the survey_answers edge.
	SurveyAnswers []*SurveyAnswer `json:"survey_answers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SurveyOrErr returns the Survey value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SurveyQuestionEdges) SurveyOrErr() (*Survey, error) {
	if e.loadedTypes[0] {
		if e.Survey == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: survey.Label}
		}
		return e.Survey, nil
	}
	return nil, &NotLoadedError{edge: "survey"}
}

// SurveyAnswersOrErr returns the SurveyAnswers value or an error if the edge
// was not loaded in eager-loading.
func (e SurveyQuestionEdges) SurveyAnswersOrErr() ([]*SurveyAnswer, error) {
	if e.loadedTypes[1] {
		return e.SurveyAnswers, nil
	}
	return nil, &NotLoadedError{edge: "survey_answers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SurveyQuestion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case surveyquestion.FieldID, surveyquestion.FieldCreatedBy, surveyquestion.FieldUpdatedBy, surveyquestion.FieldSurveyID:
			values[i] = new(sql.NullInt64)
		case surveyquestion.FieldText, surveyquestion.FieldType:
			values[i] = new(sql.NullString)
		case surveyquestion.FieldCreatedAt, surveyquestion.FieldUpdatedAt, surveyquestion.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case surveyquestion.FieldOptions:
			values[i] = surveyquestion.ValueScanner.Options.ScanValue()
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SurveyQuestion fields.
func (sq *SurveyQuestion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case surveyquestion.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sq.ID = int64(value.Int64)
		case surveyquestion.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				sq.CreatedBy = value.Int64
			}
		case surveyquestion.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				sq.UpdatedBy = value.Int64
			}
		case surveyquestion.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sq.CreatedAt = value.Time
			}
		case surveyquestion.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sq.UpdatedAt = value.Time
			}
		case surveyquestion.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sq.DeletedAt = value.Time
			}
		case surveyquestion.FieldSurveyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field survey_id", values[i])
			} else if value.Valid {
				sq.SurveyID = value.Int64
			}
		case surveyquestion.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				sq.Text = value.String
			}
		case surveyquestion.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				sq.Type = enums.SurveyQuestionType(value.String)
			}
		case surveyquestion.FieldOptions:
			if value, err := surveyquestion.ValueScanner.Options.FromValue(values[i]); err != nil {
				return err
			} else {
				sq.Options = value
			}
		default:
			sq.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SurveyQuestion.
// This includes values selected through modifiers, order, etc.
func (sq *SurveyQuestion) Value(name string) (ent.Value, error) {
	return sq.selectValues.Get(name)
}

// QuerySurvey queries the "survey" edge of the SurveyQuestion entity.
func (sq *SurveyQuestion) QuerySurvey() *SurveyQuery {
	return NewSurveyQuestionClient(sq.config).QuerySurvey(sq)
}

// QuerySurveyAnswers queries the "survey_answers" edge of the SurveyQuestion entity.
func (sq *SurveyQuestion) QuerySurveyAnswers() *SurveyAnswerQuery {
	return NewSurveyQuestionClient(sq.config).QuerySurveyAnswers(sq)
}

// Update returns a builder for updating this SurveyQuestion.
// Note that you need to call SurveyQuestion.Unwrap() before calling this method if this SurveyQuestion
// was returned from a transaction, and the transaction was committed or rolled back.
func (sq *SurveyQuestion) Update() *SurveyQuestionUpdateOne {
	return NewSurveyQuestionClient(sq.config).UpdateOne(sq)
}

// Unwrap unwraps the SurveyQuestion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sq *SurveyQuestion) Unwrap() *SurveyQuestion {
	_tx, ok := sq.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: SurveyQuestion is not a transactional entity")
	}
	sq.config.driver = _tx.drv
	return sq
}

// String implements the fmt.Stringer.
func (sq *SurveyQuestion) String() string {
	var builder strings.Builder
	builder.WriteString("SurveyQuestion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sq.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", sq.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", sq.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sq.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sq.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(sq.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("survey_id=")
	builder.WriteString(fmt.Sprintf("%v", sq.SurveyID))
	builder.WriteString(", ")
	builder.WriteString("text=")
	builder.WriteString(sq.Text)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", sq.Type))
	builder.WriteString(", ")
	builder.WriteString("options=")
	builder.WriteString(fmt.Sprintf("%v", sq.Options))
	builder.WriteByte(')')
	return builder.String()
}

// SurveyQuestions is a parsable slice of SurveyQuestion.
type SurveyQuestions []*SurveyQuestion
