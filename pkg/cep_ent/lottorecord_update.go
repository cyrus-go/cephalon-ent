// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lotto"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottoprize"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottorecord"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
)

// LottoRecordUpdate is the builder for updating LottoRecord entities.
type LottoRecordUpdate struct {
	config
	hooks     []Hook
	mutation  *LottoRecordMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the LottoRecordUpdate builder.
func (lru *LottoRecordUpdate) Where(ps ...predicate.LottoRecord) *LottoRecordUpdate {
	lru.mutation.Where(ps...)
	return lru
}

// SetCreatedBy sets the "created_by" field.
func (lru *LottoRecordUpdate) SetCreatedBy(i int64) *LottoRecordUpdate {
	lru.mutation.ResetCreatedBy()
	lru.mutation.SetCreatedBy(i)
	return lru
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (lru *LottoRecordUpdate) SetNillableCreatedBy(i *int64) *LottoRecordUpdate {
	if i != nil {
		lru.SetCreatedBy(*i)
	}
	return lru
}

// AddCreatedBy adds i to the "created_by" field.
func (lru *LottoRecordUpdate) AddCreatedBy(i int64) *LottoRecordUpdate {
	lru.mutation.AddCreatedBy(i)
	return lru
}

// SetUpdatedBy sets the "updated_by" field.
func (lru *LottoRecordUpdate) SetUpdatedBy(i int64) *LottoRecordUpdate {
	lru.mutation.ResetUpdatedBy()
	lru.mutation.SetUpdatedBy(i)
	return lru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (lru *LottoRecordUpdate) SetNillableUpdatedBy(i *int64) *LottoRecordUpdate {
	if i != nil {
		lru.SetUpdatedBy(*i)
	}
	return lru
}

// AddUpdatedBy adds i to the "updated_by" field.
func (lru *LottoRecordUpdate) AddUpdatedBy(i int64) *LottoRecordUpdate {
	lru.mutation.AddUpdatedBy(i)
	return lru
}

// SetUpdatedAt sets the "updated_at" field.
func (lru *LottoRecordUpdate) SetUpdatedAt(t time.Time) *LottoRecordUpdate {
	lru.mutation.SetUpdatedAt(t)
	return lru
}

// SetDeletedAt sets the "deleted_at" field.
func (lru *LottoRecordUpdate) SetDeletedAt(t time.Time) *LottoRecordUpdate {
	lru.mutation.SetDeletedAt(t)
	return lru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lru *LottoRecordUpdate) SetNillableDeletedAt(t *time.Time) *LottoRecordUpdate {
	if t != nil {
		lru.SetDeletedAt(*t)
	}
	return lru
}

// SetUserID sets the "user_id" field.
func (lru *LottoRecordUpdate) SetUserID(i int64) *LottoRecordUpdate {
	lru.mutation.SetUserID(i)
	return lru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (lru *LottoRecordUpdate) SetNillableUserID(i *int64) *LottoRecordUpdate {
	if i != nil {
		lru.SetUserID(*i)
	}
	return lru
}

// SetLottoID sets the "lotto_id" field.
func (lru *LottoRecordUpdate) SetLottoID(i int64) *LottoRecordUpdate {
	lru.mutation.SetLottoID(i)
	return lru
}

// SetNillableLottoID sets the "lotto_id" field if the given value is not nil.
func (lru *LottoRecordUpdate) SetNillableLottoID(i *int64) *LottoRecordUpdate {
	if i != nil {
		lru.SetLottoID(*i)
	}
	return lru
}

// SetResult sets the "result" field.
func (lru *LottoRecordUpdate) SetResult(l lottorecord.Result) *LottoRecordUpdate {
	lru.mutation.SetResult(l)
	return lru
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (lru *LottoRecordUpdate) SetNillableResult(l *lottorecord.Result) *LottoRecordUpdate {
	if l != nil {
		lru.SetResult(*l)
	}
	return lru
}

// SetLottoPrizeID sets the "lotto_prize_id" field.
func (lru *LottoRecordUpdate) SetLottoPrizeID(i int64) *LottoRecordUpdate {
	lru.mutation.SetLottoPrizeID(i)
	return lru
}

// SetNillableLottoPrizeID sets the "lotto_prize_id" field if the given value is not nil.
func (lru *LottoRecordUpdate) SetNillableLottoPrizeID(i *int64) *LottoRecordUpdate {
	if i != nil {
		lru.SetLottoPrizeID(*i)
	}
	return lru
}

// SetStatus sets the "status" field.
func (lru *LottoRecordUpdate) SetStatus(l lottorecord.Status) *LottoRecordUpdate {
	lru.mutation.SetStatus(l)
	return lru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (lru *LottoRecordUpdate) SetNillableStatus(l *lottorecord.Status) *LottoRecordUpdate {
	if l != nil {
		lru.SetStatus(*l)
	}
	return lru
}

// SetRemainLottoCount sets the "remain_lotto_count" field.
func (lru *LottoRecordUpdate) SetRemainLottoCount(i int64) *LottoRecordUpdate {
	lru.mutation.ResetRemainLottoCount()
	lru.mutation.SetRemainLottoCount(i)
	return lru
}

// SetNillableRemainLottoCount sets the "remain_lotto_count" field if the given value is not nil.
func (lru *LottoRecordUpdate) SetNillableRemainLottoCount(i *int64) *LottoRecordUpdate {
	if i != nil {
		lru.SetRemainLottoCount(*i)
	}
	return lru
}

// AddRemainLottoCount adds i to the "remain_lotto_count" field.
func (lru *LottoRecordUpdate) AddRemainLottoCount(i int64) *LottoRecordUpdate {
	lru.mutation.AddRemainLottoCount(i)
	return lru
}

// SetUser sets the "user" edge to the User entity.
func (lru *LottoRecordUpdate) SetUser(u *User) *LottoRecordUpdate {
	return lru.SetUserID(u.ID)
}

// SetLotto sets the "lotto" edge to the Lotto entity.
func (lru *LottoRecordUpdate) SetLotto(l *Lotto) *LottoRecordUpdate {
	return lru.SetLottoID(l.ID)
}

// SetLottoPrize sets the "lotto_prize" edge to the LottoPrize entity.
func (lru *LottoRecordUpdate) SetLottoPrize(l *LottoPrize) *LottoRecordUpdate {
	return lru.SetLottoPrizeID(l.ID)
}

// Mutation returns the LottoRecordMutation object of the builder.
func (lru *LottoRecordUpdate) Mutation() *LottoRecordMutation {
	return lru.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (lru *LottoRecordUpdate) ClearUser() *LottoRecordUpdate {
	lru.mutation.ClearUser()
	return lru
}

// ClearLotto clears the "lotto" edge to the Lotto entity.
func (lru *LottoRecordUpdate) ClearLotto() *LottoRecordUpdate {
	lru.mutation.ClearLotto()
	return lru
}

// ClearLottoPrize clears the "lotto_prize" edge to the LottoPrize entity.
func (lru *LottoRecordUpdate) ClearLottoPrize() *LottoRecordUpdate {
	lru.mutation.ClearLottoPrize()
	return lru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lru *LottoRecordUpdate) Save(ctx context.Context) (int, error) {
	lru.defaults()
	return withHooks(ctx, lru.sqlSave, lru.mutation, lru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lru *LottoRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := lru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lru *LottoRecordUpdate) Exec(ctx context.Context) error {
	_, err := lru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lru *LottoRecordUpdate) ExecX(ctx context.Context) {
	if err := lru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lru *LottoRecordUpdate) defaults() {
	if _, ok := lru.mutation.UpdatedAt(); !ok {
		v := lottorecord.UpdateDefaultUpdatedAt()
		lru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lru *LottoRecordUpdate) check() error {
	if v, ok := lru.mutation.Result(); ok {
		if err := lottorecord.ResultValidator(v); err != nil {
			return &ValidationError{Name: "result", err: fmt.Errorf(`cep_ent: validator failed for field "LottoRecord.result": %w`, err)}
		}
	}
	if v, ok := lru.mutation.Status(); ok {
		if err := lottorecord.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "LottoRecord.status": %w`, err)}
		}
	}
	if _, ok := lru.mutation.UserID(); lru.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "LottoRecord.user"`)
	}
	if _, ok := lru.mutation.LottoID(); lru.mutation.LottoCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "LottoRecord.lotto"`)
	}
	if _, ok := lru.mutation.LottoPrizeID(); lru.mutation.LottoPrizeCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "LottoRecord.lotto_prize"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (lru *LottoRecordUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LottoRecordUpdate {
	lru.modifiers = append(lru.modifiers, modifiers...)
	return lru
}

func (lru *LottoRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(lottorecord.Table, lottorecord.Columns, sqlgraph.NewFieldSpec(lottorecord.FieldID, field.TypeInt64))
	if ps := lru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lru.mutation.CreatedBy(); ok {
		_spec.SetField(lottorecord.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := lru.mutation.AddedCreatedBy(); ok {
		_spec.AddField(lottorecord.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := lru.mutation.UpdatedBy(); ok {
		_spec.SetField(lottorecord.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := lru.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(lottorecord.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := lru.mutation.UpdatedAt(); ok {
		_spec.SetField(lottorecord.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lru.mutation.DeletedAt(); ok {
		_spec.SetField(lottorecord.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := lru.mutation.Result(); ok {
		_spec.SetField(lottorecord.FieldResult, field.TypeEnum, value)
	}
	if value, ok := lru.mutation.Status(); ok {
		_spec.SetField(lottorecord.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := lru.mutation.RemainLottoCount(); ok {
		_spec.SetField(lottorecord.FieldRemainLottoCount, field.TypeInt64, value)
	}
	if value, ok := lru.mutation.AddedRemainLottoCount(); ok {
		_spec.AddField(lottorecord.FieldRemainLottoCount, field.TypeInt64, value)
	}
	if lru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottorecord.UserTable,
			Columns: []string{lottorecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottorecord.UserTable,
			Columns: []string{lottorecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lru.mutation.LottoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottorecord.LottoTable,
			Columns: []string{lottorecord.LottoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lotto.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lru.mutation.LottoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottorecord.LottoTable,
			Columns: []string{lottorecord.LottoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lotto.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lru.mutation.LottoPrizeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottorecord.LottoPrizeTable,
			Columns: []string{lottorecord.LottoPrizeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottoprize.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lru.mutation.LottoPrizeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottorecord.LottoPrizeTable,
			Columns: []string{lottorecord.LottoPrizeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottoprize.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(lru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, lru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lottorecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lru.mutation.done = true
	return n, nil
}

// LottoRecordUpdateOne is the builder for updating a single LottoRecord entity.
type LottoRecordUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *LottoRecordMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedBy sets the "created_by" field.
func (lruo *LottoRecordUpdateOne) SetCreatedBy(i int64) *LottoRecordUpdateOne {
	lruo.mutation.ResetCreatedBy()
	lruo.mutation.SetCreatedBy(i)
	return lruo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (lruo *LottoRecordUpdateOne) SetNillableCreatedBy(i *int64) *LottoRecordUpdateOne {
	if i != nil {
		lruo.SetCreatedBy(*i)
	}
	return lruo
}

// AddCreatedBy adds i to the "created_by" field.
func (lruo *LottoRecordUpdateOne) AddCreatedBy(i int64) *LottoRecordUpdateOne {
	lruo.mutation.AddCreatedBy(i)
	return lruo
}

// SetUpdatedBy sets the "updated_by" field.
func (lruo *LottoRecordUpdateOne) SetUpdatedBy(i int64) *LottoRecordUpdateOne {
	lruo.mutation.ResetUpdatedBy()
	lruo.mutation.SetUpdatedBy(i)
	return lruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (lruo *LottoRecordUpdateOne) SetNillableUpdatedBy(i *int64) *LottoRecordUpdateOne {
	if i != nil {
		lruo.SetUpdatedBy(*i)
	}
	return lruo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (lruo *LottoRecordUpdateOne) AddUpdatedBy(i int64) *LottoRecordUpdateOne {
	lruo.mutation.AddUpdatedBy(i)
	return lruo
}

// SetUpdatedAt sets the "updated_at" field.
func (lruo *LottoRecordUpdateOne) SetUpdatedAt(t time.Time) *LottoRecordUpdateOne {
	lruo.mutation.SetUpdatedAt(t)
	return lruo
}

// SetDeletedAt sets the "deleted_at" field.
func (lruo *LottoRecordUpdateOne) SetDeletedAt(t time.Time) *LottoRecordUpdateOne {
	lruo.mutation.SetDeletedAt(t)
	return lruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lruo *LottoRecordUpdateOne) SetNillableDeletedAt(t *time.Time) *LottoRecordUpdateOne {
	if t != nil {
		lruo.SetDeletedAt(*t)
	}
	return lruo
}

// SetUserID sets the "user_id" field.
func (lruo *LottoRecordUpdateOne) SetUserID(i int64) *LottoRecordUpdateOne {
	lruo.mutation.SetUserID(i)
	return lruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (lruo *LottoRecordUpdateOne) SetNillableUserID(i *int64) *LottoRecordUpdateOne {
	if i != nil {
		lruo.SetUserID(*i)
	}
	return lruo
}

// SetLottoID sets the "lotto_id" field.
func (lruo *LottoRecordUpdateOne) SetLottoID(i int64) *LottoRecordUpdateOne {
	lruo.mutation.SetLottoID(i)
	return lruo
}

// SetNillableLottoID sets the "lotto_id" field if the given value is not nil.
func (lruo *LottoRecordUpdateOne) SetNillableLottoID(i *int64) *LottoRecordUpdateOne {
	if i != nil {
		lruo.SetLottoID(*i)
	}
	return lruo
}

// SetResult sets the "result" field.
func (lruo *LottoRecordUpdateOne) SetResult(l lottorecord.Result) *LottoRecordUpdateOne {
	lruo.mutation.SetResult(l)
	return lruo
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (lruo *LottoRecordUpdateOne) SetNillableResult(l *lottorecord.Result) *LottoRecordUpdateOne {
	if l != nil {
		lruo.SetResult(*l)
	}
	return lruo
}

// SetLottoPrizeID sets the "lotto_prize_id" field.
func (lruo *LottoRecordUpdateOne) SetLottoPrizeID(i int64) *LottoRecordUpdateOne {
	lruo.mutation.SetLottoPrizeID(i)
	return lruo
}

// SetNillableLottoPrizeID sets the "lotto_prize_id" field if the given value is not nil.
func (lruo *LottoRecordUpdateOne) SetNillableLottoPrizeID(i *int64) *LottoRecordUpdateOne {
	if i != nil {
		lruo.SetLottoPrizeID(*i)
	}
	return lruo
}

// SetStatus sets the "status" field.
func (lruo *LottoRecordUpdateOne) SetStatus(l lottorecord.Status) *LottoRecordUpdateOne {
	lruo.mutation.SetStatus(l)
	return lruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (lruo *LottoRecordUpdateOne) SetNillableStatus(l *lottorecord.Status) *LottoRecordUpdateOne {
	if l != nil {
		lruo.SetStatus(*l)
	}
	return lruo
}

// SetRemainLottoCount sets the "remain_lotto_count" field.
func (lruo *LottoRecordUpdateOne) SetRemainLottoCount(i int64) *LottoRecordUpdateOne {
	lruo.mutation.ResetRemainLottoCount()
	lruo.mutation.SetRemainLottoCount(i)
	return lruo
}

// SetNillableRemainLottoCount sets the "remain_lotto_count" field if the given value is not nil.
func (lruo *LottoRecordUpdateOne) SetNillableRemainLottoCount(i *int64) *LottoRecordUpdateOne {
	if i != nil {
		lruo.SetRemainLottoCount(*i)
	}
	return lruo
}

// AddRemainLottoCount adds i to the "remain_lotto_count" field.
func (lruo *LottoRecordUpdateOne) AddRemainLottoCount(i int64) *LottoRecordUpdateOne {
	lruo.mutation.AddRemainLottoCount(i)
	return lruo
}

// SetUser sets the "user" edge to the User entity.
func (lruo *LottoRecordUpdateOne) SetUser(u *User) *LottoRecordUpdateOne {
	return lruo.SetUserID(u.ID)
}

// SetLotto sets the "lotto" edge to the Lotto entity.
func (lruo *LottoRecordUpdateOne) SetLotto(l *Lotto) *LottoRecordUpdateOne {
	return lruo.SetLottoID(l.ID)
}

// SetLottoPrize sets the "lotto_prize" edge to the LottoPrize entity.
func (lruo *LottoRecordUpdateOne) SetLottoPrize(l *LottoPrize) *LottoRecordUpdateOne {
	return lruo.SetLottoPrizeID(l.ID)
}

// Mutation returns the LottoRecordMutation object of the builder.
func (lruo *LottoRecordUpdateOne) Mutation() *LottoRecordMutation {
	return lruo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (lruo *LottoRecordUpdateOne) ClearUser() *LottoRecordUpdateOne {
	lruo.mutation.ClearUser()
	return lruo
}

// ClearLotto clears the "lotto" edge to the Lotto entity.
func (lruo *LottoRecordUpdateOne) ClearLotto() *LottoRecordUpdateOne {
	lruo.mutation.ClearLotto()
	return lruo
}

// ClearLottoPrize clears the "lotto_prize" edge to the LottoPrize entity.
func (lruo *LottoRecordUpdateOne) ClearLottoPrize() *LottoRecordUpdateOne {
	lruo.mutation.ClearLottoPrize()
	return lruo
}

// Where appends a list predicates to the LottoRecordUpdate builder.
func (lruo *LottoRecordUpdateOne) Where(ps ...predicate.LottoRecord) *LottoRecordUpdateOne {
	lruo.mutation.Where(ps...)
	return lruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lruo *LottoRecordUpdateOne) Select(field string, fields ...string) *LottoRecordUpdateOne {
	lruo.fields = append([]string{field}, fields...)
	return lruo
}

// Save executes the query and returns the updated LottoRecord entity.
func (lruo *LottoRecordUpdateOne) Save(ctx context.Context) (*LottoRecord, error) {
	lruo.defaults()
	return withHooks(ctx, lruo.sqlSave, lruo.mutation, lruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lruo *LottoRecordUpdateOne) SaveX(ctx context.Context) *LottoRecord {
	node, err := lruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lruo *LottoRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := lruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lruo *LottoRecordUpdateOne) ExecX(ctx context.Context) {
	if err := lruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lruo *LottoRecordUpdateOne) defaults() {
	if _, ok := lruo.mutation.UpdatedAt(); !ok {
		v := lottorecord.UpdateDefaultUpdatedAt()
		lruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lruo *LottoRecordUpdateOne) check() error {
	if v, ok := lruo.mutation.Result(); ok {
		if err := lottorecord.ResultValidator(v); err != nil {
			return &ValidationError{Name: "result", err: fmt.Errorf(`cep_ent: validator failed for field "LottoRecord.result": %w`, err)}
		}
	}
	if v, ok := lruo.mutation.Status(); ok {
		if err := lottorecord.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "LottoRecord.status": %w`, err)}
		}
	}
	if _, ok := lruo.mutation.UserID(); lruo.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "LottoRecord.user"`)
	}
	if _, ok := lruo.mutation.LottoID(); lruo.mutation.LottoCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "LottoRecord.lotto"`)
	}
	if _, ok := lruo.mutation.LottoPrizeID(); lruo.mutation.LottoPrizeCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "LottoRecord.lotto_prize"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (lruo *LottoRecordUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LottoRecordUpdateOne {
	lruo.modifiers = append(lruo.modifiers, modifiers...)
	return lruo
}

func (lruo *LottoRecordUpdateOne) sqlSave(ctx context.Context) (_node *LottoRecord, err error) {
	if err := lruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(lottorecord.Table, lottorecord.Columns, sqlgraph.NewFieldSpec(lottorecord.FieldID, field.TypeInt64))
	id, ok := lruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "LottoRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lottorecord.FieldID)
		for _, f := range fields {
			if !lottorecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != lottorecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lruo.mutation.CreatedBy(); ok {
		_spec.SetField(lottorecord.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := lruo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(lottorecord.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := lruo.mutation.UpdatedBy(); ok {
		_spec.SetField(lottorecord.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := lruo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(lottorecord.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := lruo.mutation.UpdatedAt(); ok {
		_spec.SetField(lottorecord.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lruo.mutation.DeletedAt(); ok {
		_spec.SetField(lottorecord.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := lruo.mutation.Result(); ok {
		_spec.SetField(lottorecord.FieldResult, field.TypeEnum, value)
	}
	if value, ok := lruo.mutation.Status(); ok {
		_spec.SetField(lottorecord.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := lruo.mutation.RemainLottoCount(); ok {
		_spec.SetField(lottorecord.FieldRemainLottoCount, field.TypeInt64, value)
	}
	if value, ok := lruo.mutation.AddedRemainLottoCount(); ok {
		_spec.AddField(lottorecord.FieldRemainLottoCount, field.TypeInt64, value)
	}
	if lruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottorecord.UserTable,
			Columns: []string{lottorecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottorecord.UserTable,
			Columns: []string{lottorecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lruo.mutation.LottoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottorecord.LottoTable,
			Columns: []string{lottorecord.LottoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lotto.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lruo.mutation.LottoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottorecord.LottoTable,
			Columns: []string{lottorecord.LottoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lotto.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lruo.mutation.LottoPrizeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottorecord.LottoPrizeTable,
			Columns: []string{lottorecord.LottoPrizeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottoprize.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lruo.mutation.LottoPrizeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottorecord.LottoPrizeTable,
			Columns: []string{lottorecord.LottoPrizeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottoprize.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(lruo.modifiers...)
	_node = &LottoRecord{config: lruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lottorecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lruo.mutation.done = true
	return _node, nil
}
