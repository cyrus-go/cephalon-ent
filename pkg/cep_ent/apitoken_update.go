// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/apitoken"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// ApiTokenUpdate is the builder for updating ApiToken entities.
type ApiTokenUpdate struct {
	config
	hooks     []Hook
	mutation  *ApiTokenMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ApiTokenUpdate builder.
func (atu *ApiTokenUpdate) Where(ps ...predicate.ApiToken) *ApiTokenUpdate {
	atu.mutation.Where(ps...)
	return atu
}

// SetCreatedBy sets the "created_by" field.
func (atu *ApiTokenUpdate) SetCreatedBy(i int64) *ApiTokenUpdate {
	atu.mutation.ResetCreatedBy()
	atu.mutation.SetCreatedBy(i)
	return atu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (atu *ApiTokenUpdate) SetNillableCreatedBy(i *int64) *ApiTokenUpdate {
	if i != nil {
		atu.SetCreatedBy(*i)
	}
	return atu
}

// AddCreatedBy adds i to the "created_by" field.
func (atu *ApiTokenUpdate) AddCreatedBy(i int64) *ApiTokenUpdate {
	atu.mutation.AddCreatedBy(i)
	return atu
}

// SetUpdatedBy sets the "updated_by" field.
func (atu *ApiTokenUpdate) SetUpdatedBy(i int64) *ApiTokenUpdate {
	atu.mutation.ResetUpdatedBy()
	atu.mutation.SetUpdatedBy(i)
	return atu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (atu *ApiTokenUpdate) SetNillableUpdatedBy(i *int64) *ApiTokenUpdate {
	if i != nil {
		atu.SetUpdatedBy(*i)
	}
	return atu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (atu *ApiTokenUpdate) AddUpdatedBy(i int64) *ApiTokenUpdate {
	atu.mutation.AddUpdatedBy(i)
	return atu
}

// SetUpdatedAt sets the "updated_at" field.
func (atu *ApiTokenUpdate) SetUpdatedAt(t time.Time) *ApiTokenUpdate {
	atu.mutation.SetUpdatedAt(t)
	return atu
}

// SetDeletedAt sets the "deleted_at" field.
func (atu *ApiTokenUpdate) SetDeletedAt(t time.Time) *ApiTokenUpdate {
	atu.mutation.SetDeletedAt(t)
	return atu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (atu *ApiTokenUpdate) SetNillableDeletedAt(t *time.Time) *ApiTokenUpdate {
	if t != nil {
		atu.SetDeletedAt(*t)
	}
	return atu
}

// SetUserID sets the "user_id" field.
func (atu *ApiTokenUpdate) SetUserID(i int64) *ApiTokenUpdate {
	atu.mutation.SetUserID(i)
	return atu
}

// SetName sets the "name" field.
func (atu *ApiTokenUpdate) SetName(s string) *ApiTokenUpdate {
	atu.mutation.SetName(s)
	return atu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (atu *ApiTokenUpdate) SetNillableName(s *string) *ApiTokenUpdate {
	if s != nil {
		atu.SetName(*s)
	}
	return atu
}

// SetToken sets the "token" field.
func (atu *ApiTokenUpdate) SetToken(s string) *ApiTokenUpdate {
	atu.mutation.SetToken(s)
	return atu
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (atu *ApiTokenUpdate) SetNillableToken(s *string) *ApiTokenUpdate {
	if s != nil {
		atu.SetToken(*s)
	}
	return atu
}

// SetStatus sets the "status" field.
func (atu *ApiTokenUpdate) SetStatus(ets enums.ApiTokenStatus) *ApiTokenUpdate {
	atu.mutation.SetStatus(ets)
	return atu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (atu *ApiTokenUpdate) SetNillableStatus(ets *enums.ApiTokenStatus) *ApiTokenUpdate {
	if ets != nil {
		atu.SetStatus(*ets)
	}
	return atu
}

// SetUser sets the "user" edge to the User entity.
func (atu *ApiTokenUpdate) SetUser(u *User) *ApiTokenUpdate {
	return atu.SetUserID(u.ID)
}

// Mutation returns the ApiTokenMutation object of the builder.
func (atu *ApiTokenUpdate) Mutation() *ApiTokenMutation {
	return atu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (atu *ApiTokenUpdate) ClearUser() *ApiTokenUpdate {
	atu.mutation.ClearUser()
	return atu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (atu *ApiTokenUpdate) Save(ctx context.Context) (int, error) {
	atu.defaults()
	return withHooks(ctx, atu.sqlSave, atu.mutation, atu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atu *ApiTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := atu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (atu *ApiTokenUpdate) Exec(ctx context.Context) error {
	_, err := atu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atu *ApiTokenUpdate) ExecX(ctx context.Context) {
	if err := atu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atu *ApiTokenUpdate) defaults() {
	if _, ok := atu.mutation.UpdatedAt(); !ok {
		v := apitoken.UpdateDefaultUpdatedAt()
		atu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atu *ApiTokenUpdate) check() error {
	if v, ok := atu.mutation.Status(); ok {
		if err := apitoken.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "ApiToken.status": %w`, err)}
		}
	}
	if _, ok := atu.mutation.UserID(); atu.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "ApiToken.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (atu *ApiTokenUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ApiTokenUpdate {
	atu.modifiers = append(atu.modifiers, modifiers...)
	return atu
}

func (atu *ApiTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := atu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(apitoken.Table, apitoken.Columns, sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeInt64))
	if ps := atu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atu.mutation.CreatedBy(); ok {
		_spec.SetField(apitoken.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := atu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(apitoken.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := atu.mutation.UpdatedBy(); ok {
		_spec.SetField(apitoken.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := atu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(apitoken.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := atu.mutation.UpdatedAt(); ok {
		_spec.SetField(apitoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := atu.mutation.DeletedAt(); ok {
		_spec.SetField(apitoken.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := atu.mutation.Name(); ok {
		_spec.SetField(apitoken.FieldName, field.TypeString, value)
	}
	if value, ok := atu.mutation.Token(); ok {
		_spec.SetField(apitoken.FieldToken, field.TypeString, value)
	}
	if value, ok := atu.mutation.Status(); ok {
		_spec.SetField(apitoken.FieldStatus, field.TypeEnum, value)
	}
	if atu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apitoken.UserTable,
			Columns: []string{apitoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apitoken.UserTable,
			Columns: []string{apitoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(atu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, atu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apitoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	atu.mutation.done = true
	return n, nil
}

// ApiTokenUpdateOne is the builder for updating a single ApiToken entity.
type ApiTokenUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ApiTokenMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedBy sets the "created_by" field.
func (atuo *ApiTokenUpdateOne) SetCreatedBy(i int64) *ApiTokenUpdateOne {
	atuo.mutation.ResetCreatedBy()
	atuo.mutation.SetCreatedBy(i)
	return atuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (atuo *ApiTokenUpdateOne) SetNillableCreatedBy(i *int64) *ApiTokenUpdateOne {
	if i != nil {
		atuo.SetCreatedBy(*i)
	}
	return atuo
}

// AddCreatedBy adds i to the "created_by" field.
func (atuo *ApiTokenUpdateOne) AddCreatedBy(i int64) *ApiTokenUpdateOne {
	atuo.mutation.AddCreatedBy(i)
	return atuo
}

// SetUpdatedBy sets the "updated_by" field.
func (atuo *ApiTokenUpdateOne) SetUpdatedBy(i int64) *ApiTokenUpdateOne {
	atuo.mutation.ResetUpdatedBy()
	atuo.mutation.SetUpdatedBy(i)
	return atuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (atuo *ApiTokenUpdateOne) SetNillableUpdatedBy(i *int64) *ApiTokenUpdateOne {
	if i != nil {
		atuo.SetUpdatedBy(*i)
	}
	return atuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (atuo *ApiTokenUpdateOne) AddUpdatedBy(i int64) *ApiTokenUpdateOne {
	atuo.mutation.AddUpdatedBy(i)
	return atuo
}

// SetUpdatedAt sets the "updated_at" field.
func (atuo *ApiTokenUpdateOne) SetUpdatedAt(t time.Time) *ApiTokenUpdateOne {
	atuo.mutation.SetUpdatedAt(t)
	return atuo
}

// SetDeletedAt sets the "deleted_at" field.
func (atuo *ApiTokenUpdateOne) SetDeletedAt(t time.Time) *ApiTokenUpdateOne {
	atuo.mutation.SetDeletedAt(t)
	return atuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (atuo *ApiTokenUpdateOne) SetNillableDeletedAt(t *time.Time) *ApiTokenUpdateOne {
	if t != nil {
		atuo.SetDeletedAt(*t)
	}
	return atuo
}

// SetUserID sets the "user_id" field.
func (atuo *ApiTokenUpdateOne) SetUserID(i int64) *ApiTokenUpdateOne {
	atuo.mutation.SetUserID(i)
	return atuo
}

// SetName sets the "name" field.
func (atuo *ApiTokenUpdateOne) SetName(s string) *ApiTokenUpdateOne {
	atuo.mutation.SetName(s)
	return atuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (atuo *ApiTokenUpdateOne) SetNillableName(s *string) *ApiTokenUpdateOne {
	if s != nil {
		atuo.SetName(*s)
	}
	return atuo
}

// SetToken sets the "token" field.
func (atuo *ApiTokenUpdateOne) SetToken(s string) *ApiTokenUpdateOne {
	atuo.mutation.SetToken(s)
	return atuo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (atuo *ApiTokenUpdateOne) SetNillableToken(s *string) *ApiTokenUpdateOne {
	if s != nil {
		atuo.SetToken(*s)
	}
	return atuo
}

// SetStatus sets the "status" field.
func (atuo *ApiTokenUpdateOne) SetStatus(ets enums.ApiTokenStatus) *ApiTokenUpdateOne {
	atuo.mutation.SetStatus(ets)
	return atuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (atuo *ApiTokenUpdateOne) SetNillableStatus(ets *enums.ApiTokenStatus) *ApiTokenUpdateOne {
	if ets != nil {
		atuo.SetStatus(*ets)
	}
	return atuo
}

// SetUser sets the "user" edge to the User entity.
func (atuo *ApiTokenUpdateOne) SetUser(u *User) *ApiTokenUpdateOne {
	return atuo.SetUserID(u.ID)
}

// Mutation returns the ApiTokenMutation object of the builder.
func (atuo *ApiTokenUpdateOne) Mutation() *ApiTokenMutation {
	return atuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (atuo *ApiTokenUpdateOne) ClearUser() *ApiTokenUpdateOne {
	atuo.mutation.ClearUser()
	return atuo
}

// Where appends a list predicates to the ApiTokenUpdate builder.
func (atuo *ApiTokenUpdateOne) Where(ps ...predicate.ApiToken) *ApiTokenUpdateOne {
	atuo.mutation.Where(ps...)
	return atuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (atuo *ApiTokenUpdateOne) Select(field string, fields ...string) *ApiTokenUpdateOne {
	atuo.fields = append([]string{field}, fields...)
	return atuo
}

// Save executes the query and returns the updated ApiToken entity.
func (atuo *ApiTokenUpdateOne) Save(ctx context.Context) (*ApiToken, error) {
	atuo.defaults()
	return withHooks(ctx, atuo.sqlSave, atuo.mutation, atuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atuo *ApiTokenUpdateOne) SaveX(ctx context.Context) *ApiToken {
	node, err := atuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (atuo *ApiTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := atuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atuo *ApiTokenUpdateOne) ExecX(ctx context.Context) {
	if err := atuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atuo *ApiTokenUpdateOne) defaults() {
	if _, ok := atuo.mutation.UpdatedAt(); !ok {
		v := apitoken.UpdateDefaultUpdatedAt()
		atuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atuo *ApiTokenUpdateOne) check() error {
	if v, ok := atuo.mutation.Status(); ok {
		if err := apitoken.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "ApiToken.status": %w`, err)}
		}
	}
	if _, ok := atuo.mutation.UserID(); atuo.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "ApiToken.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (atuo *ApiTokenUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ApiTokenUpdateOne {
	atuo.modifiers = append(atuo.modifiers, modifiers...)
	return atuo
}

func (atuo *ApiTokenUpdateOne) sqlSave(ctx context.Context) (_node *ApiToken, err error) {
	if err := atuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(apitoken.Table, apitoken.Columns, sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeInt64))
	id, ok := atuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "ApiToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := atuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, apitoken.FieldID)
		for _, f := range fields {
			if !apitoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != apitoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := atuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atuo.mutation.CreatedBy(); ok {
		_spec.SetField(apitoken.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := atuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(apitoken.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := atuo.mutation.UpdatedBy(); ok {
		_spec.SetField(apitoken.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := atuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(apitoken.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := atuo.mutation.UpdatedAt(); ok {
		_spec.SetField(apitoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := atuo.mutation.DeletedAt(); ok {
		_spec.SetField(apitoken.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := atuo.mutation.Name(); ok {
		_spec.SetField(apitoken.FieldName, field.TypeString, value)
	}
	if value, ok := atuo.mutation.Token(); ok {
		_spec.SetField(apitoken.FieldToken, field.TypeString, value)
	}
	if value, ok := atuo.mutation.Status(); ok {
		_spec.SetField(apitoken.FieldStatus, field.TypeEnum, value)
	}
	if atuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apitoken.UserTable,
			Columns: []string{apitoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apitoken.UserTable,
			Columns: []string{apitoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(atuo.modifiers...)
	_node = &ApiToken{config: atuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, atuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apitoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	atuo.mutation.done = true
	return _node, nil
}
