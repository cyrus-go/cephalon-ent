// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/surveyanswer"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/surveyquestion"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/surveyresponse"
)

// SurveyAnswerQuery is the builder for querying SurveyAnswer entities.
type SurveyAnswerQuery struct {
	config
	ctx                *QueryContext
	order              []surveyanswer.OrderOption
	inters             []Interceptor
	predicates         []predicate.SurveyAnswer
	withSurveyResponse *SurveyResponseQuery
	withSurveyQuestion *SurveyQuestionQuery
	modifiers          []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SurveyAnswerQuery builder.
func (saq *SurveyAnswerQuery) Where(ps ...predicate.SurveyAnswer) *SurveyAnswerQuery {
	saq.predicates = append(saq.predicates, ps...)
	return saq
}

// Limit the number of records to be returned by this query.
func (saq *SurveyAnswerQuery) Limit(limit int) *SurveyAnswerQuery {
	saq.ctx.Limit = &limit
	return saq
}

// Offset to start from.
func (saq *SurveyAnswerQuery) Offset(offset int) *SurveyAnswerQuery {
	saq.ctx.Offset = &offset
	return saq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (saq *SurveyAnswerQuery) Unique(unique bool) *SurveyAnswerQuery {
	saq.ctx.Unique = &unique
	return saq
}

// Order specifies how the records should be ordered.
func (saq *SurveyAnswerQuery) Order(o ...surveyanswer.OrderOption) *SurveyAnswerQuery {
	saq.order = append(saq.order, o...)
	return saq
}

// QuerySurveyResponse chains the current query on the "survey_response" edge.
func (saq *SurveyAnswerQuery) QuerySurveyResponse() *SurveyResponseQuery {
	query := (&SurveyResponseClient{config: saq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := saq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := saq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(surveyanswer.Table, surveyanswer.FieldID, selector),
			sqlgraph.To(surveyresponse.Table, surveyresponse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, surveyanswer.SurveyResponseTable, surveyanswer.SurveyResponseColumn),
		)
		fromU = sqlgraph.SetNeighbors(saq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySurveyQuestion chains the current query on the "survey_question" edge.
func (saq *SurveyAnswerQuery) QuerySurveyQuestion() *SurveyQuestionQuery {
	query := (&SurveyQuestionClient{config: saq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := saq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := saq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(surveyanswer.Table, surveyanswer.FieldID, selector),
			sqlgraph.To(surveyquestion.Table, surveyquestion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, surveyanswer.SurveyQuestionTable, surveyanswer.SurveyQuestionColumn),
		)
		fromU = sqlgraph.SetNeighbors(saq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SurveyAnswer entity from the query.
// Returns a *NotFoundError when no SurveyAnswer was found.
func (saq *SurveyAnswerQuery) First(ctx context.Context) (*SurveyAnswer, error) {
	nodes, err := saq.Limit(1).All(setContextOp(ctx, saq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{surveyanswer.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (saq *SurveyAnswerQuery) FirstX(ctx context.Context) *SurveyAnswer {
	node, err := saq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SurveyAnswer ID from the query.
// Returns a *NotFoundError when no SurveyAnswer ID was found.
func (saq *SurveyAnswerQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = saq.Limit(1).IDs(setContextOp(ctx, saq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{surveyanswer.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (saq *SurveyAnswerQuery) FirstIDX(ctx context.Context) int64 {
	id, err := saq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SurveyAnswer entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SurveyAnswer entity is found.
// Returns a *NotFoundError when no SurveyAnswer entities are found.
func (saq *SurveyAnswerQuery) Only(ctx context.Context) (*SurveyAnswer, error) {
	nodes, err := saq.Limit(2).All(setContextOp(ctx, saq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{surveyanswer.Label}
	default:
		return nil, &NotSingularError{surveyanswer.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (saq *SurveyAnswerQuery) OnlyX(ctx context.Context) *SurveyAnswer {
	node, err := saq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SurveyAnswer ID in the query.
// Returns a *NotSingularError when more than one SurveyAnswer ID is found.
// Returns a *NotFoundError when no entities are found.
func (saq *SurveyAnswerQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = saq.Limit(2).IDs(setContextOp(ctx, saq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{surveyanswer.Label}
	default:
		err = &NotSingularError{surveyanswer.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (saq *SurveyAnswerQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := saq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SurveyAnswers.
func (saq *SurveyAnswerQuery) All(ctx context.Context) ([]*SurveyAnswer, error) {
	ctx = setContextOp(ctx, saq.ctx, "All")
	if err := saq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SurveyAnswer, *SurveyAnswerQuery]()
	return withInterceptors[[]*SurveyAnswer](ctx, saq, qr, saq.inters)
}

// AllX is like All, but panics if an error occurs.
func (saq *SurveyAnswerQuery) AllX(ctx context.Context) []*SurveyAnswer {
	nodes, err := saq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SurveyAnswer IDs.
func (saq *SurveyAnswerQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if saq.ctx.Unique == nil && saq.path != nil {
		saq.Unique(true)
	}
	ctx = setContextOp(ctx, saq.ctx, "IDs")
	if err = saq.Select(surveyanswer.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (saq *SurveyAnswerQuery) IDsX(ctx context.Context) []int64 {
	ids, err := saq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (saq *SurveyAnswerQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, saq.ctx, "Count")
	if err := saq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, saq, querierCount[*SurveyAnswerQuery](), saq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (saq *SurveyAnswerQuery) CountX(ctx context.Context) int {
	count, err := saq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (saq *SurveyAnswerQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, saq.ctx, "Exist")
	switch _, err := saq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("cep_ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (saq *SurveyAnswerQuery) ExistX(ctx context.Context) bool {
	exist, err := saq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SurveyAnswerQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (saq *SurveyAnswerQuery) Clone() *SurveyAnswerQuery {
	if saq == nil {
		return nil
	}
	return &SurveyAnswerQuery{
		config:             saq.config,
		ctx:                saq.ctx.Clone(),
		order:              append([]surveyanswer.OrderOption{}, saq.order...),
		inters:             append([]Interceptor{}, saq.inters...),
		predicates:         append([]predicate.SurveyAnswer{}, saq.predicates...),
		withSurveyResponse: saq.withSurveyResponse.Clone(),
		withSurveyQuestion: saq.withSurveyQuestion.Clone(),
		// clone intermediate query.
		sql:  saq.sql.Clone(),
		path: saq.path,
	}
}

// WithSurveyResponse tells the query-builder to eager-load the nodes that are connected to
// the "survey_response" edge. The optional arguments are used to configure the query builder of the edge.
func (saq *SurveyAnswerQuery) WithSurveyResponse(opts ...func(*SurveyResponseQuery)) *SurveyAnswerQuery {
	query := (&SurveyResponseClient{config: saq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	saq.withSurveyResponse = query
	return saq
}

// WithSurveyQuestion tells the query-builder to eager-load the nodes that are connected to
// the "survey_question" edge. The optional arguments are used to configure the query builder of the edge.
func (saq *SurveyAnswerQuery) WithSurveyQuestion(opts ...func(*SurveyQuestionQuery)) *SurveyAnswerQuery {
	query := (&SurveyQuestionClient{config: saq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	saq.withSurveyQuestion = query
	return saq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by,string"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SurveyAnswer.Query().
//		GroupBy(surveyanswer.FieldCreatedBy).
//		Aggregate(cep_ent.Count()).
//		Scan(ctx, &v)
func (saq *SurveyAnswerQuery) GroupBy(field string, fields ...string) *SurveyAnswerGroupBy {
	saq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SurveyAnswerGroupBy{build: saq}
	grbuild.flds = &saq.ctx.Fields
	grbuild.label = surveyanswer.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by,string"`
//	}
//
//	client.SurveyAnswer.Query().
//		Select(surveyanswer.FieldCreatedBy).
//		Scan(ctx, &v)
func (saq *SurveyAnswerQuery) Select(fields ...string) *SurveyAnswerSelect {
	saq.ctx.Fields = append(saq.ctx.Fields, fields...)
	sbuild := &SurveyAnswerSelect{SurveyAnswerQuery: saq}
	sbuild.label = surveyanswer.Label
	sbuild.flds, sbuild.scan = &saq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SurveyAnswerSelect configured with the given aggregations.
func (saq *SurveyAnswerQuery) Aggregate(fns ...AggregateFunc) *SurveyAnswerSelect {
	return saq.Select().Aggregate(fns...)
}

func (saq *SurveyAnswerQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range saq.inters {
		if inter == nil {
			return fmt.Errorf("cep_ent: uninitialized interceptor (forgotten import cep_ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, saq); err != nil {
				return err
			}
		}
	}
	for _, f := range saq.ctx.Fields {
		if !surveyanswer.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
		}
	}
	if saq.path != nil {
		prev, err := saq.path(ctx)
		if err != nil {
			return err
		}
		saq.sql = prev
	}
	return nil
}

func (saq *SurveyAnswerQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SurveyAnswer, error) {
	var (
		nodes       = []*SurveyAnswer{}
		_spec       = saq.querySpec()
		loadedTypes = [2]bool{
			saq.withSurveyResponse != nil,
			saq.withSurveyQuestion != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SurveyAnswer).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SurveyAnswer{config: saq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(saq.modifiers) > 0 {
		_spec.Modifiers = saq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, saq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := saq.withSurveyResponse; query != nil {
		if err := saq.loadSurveyResponse(ctx, query, nodes, nil,
			func(n *SurveyAnswer, e *SurveyResponse) { n.Edges.SurveyResponse = e }); err != nil {
			return nil, err
		}
	}
	if query := saq.withSurveyQuestion; query != nil {
		if err := saq.loadSurveyQuestion(ctx, query, nodes, nil,
			func(n *SurveyAnswer, e *SurveyQuestion) { n.Edges.SurveyQuestion = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (saq *SurveyAnswerQuery) loadSurveyResponse(ctx context.Context, query *SurveyResponseQuery, nodes []*SurveyAnswer, init func(*SurveyAnswer), assign func(*SurveyAnswer, *SurveyResponse)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*SurveyAnswer)
	for i := range nodes {
		fk := nodes[i].SurveyResponseID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(surveyresponse.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "survey_response_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (saq *SurveyAnswerQuery) loadSurveyQuestion(ctx context.Context, query *SurveyQuestionQuery, nodes []*SurveyAnswer, init func(*SurveyAnswer), assign func(*SurveyAnswer, *SurveyQuestion)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*SurveyAnswer)
	for i := range nodes {
		fk := nodes[i].SurveyQuestionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(surveyquestion.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "survey_question_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (saq *SurveyAnswerQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := saq.querySpec()
	if len(saq.modifiers) > 0 {
		_spec.Modifiers = saq.modifiers
	}
	_spec.Node.Columns = saq.ctx.Fields
	if len(saq.ctx.Fields) > 0 {
		_spec.Unique = saq.ctx.Unique != nil && *saq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, saq.driver, _spec)
}

func (saq *SurveyAnswerQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(surveyanswer.Table, surveyanswer.Columns, sqlgraph.NewFieldSpec(surveyanswer.FieldID, field.TypeInt64))
	_spec.From = saq.sql
	if unique := saq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if saq.path != nil {
		_spec.Unique = true
	}
	if fields := saq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, surveyanswer.FieldID)
		for i := range fields {
			if fields[i] != surveyanswer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if saq.withSurveyResponse != nil {
			_spec.Node.AddColumnOnce(surveyanswer.FieldSurveyResponseID)
		}
		if saq.withSurveyQuestion != nil {
			_spec.Node.AddColumnOnce(surveyanswer.FieldSurveyQuestionID)
		}
	}
	if ps := saq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := saq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := saq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := saq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (saq *SurveyAnswerQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(saq.driver.Dialect())
	t1 := builder.Table(surveyanswer.Table)
	columns := saq.ctx.Fields
	if len(columns) == 0 {
		columns = surveyanswer.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if saq.sql != nil {
		selector = saq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if saq.ctx.Unique != nil && *saq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range saq.modifiers {
		m(selector)
	}
	for _, p := range saq.predicates {
		p(selector)
	}
	for _, p := range saq.order {
		p(selector)
	}
	if offset := saq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := saq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (saq *SurveyAnswerQuery) Modify(modifiers ...func(s *sql.Selector)) *SurveyAnswerSelect {
	saq.modifiers = append(saq.modifiers, modifiers...)
	return saq.Select()
}

// SurveyAnswerGroupBy is the group-by builder for SurveyAnswer entities.
type SurveyAnswerGroupBy struct {
	selector
	build *SurveyAnswerQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sagb *SurveyAnswerGroupBy) Aggregate(fns ...AggregateFunc) *SurveyAnswerGroupBy {
	sagb.fns = append(sagb.fns, fns...)
	return sagb
}

// Scan applies the selector query and scans the result into the given value.
func (sagb *SurveyAnswerGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sagb.build.ctx, "GroupBy")
	if err := sagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SurveyAnswerQuery, *SurveyAnswerGroupBy](ctx, sagb.build, sagb, sagb.build.inters, v)
}

func (sagb *SurveyAnswerGroupBy) sqlScan(ctx context.Context, root *SurveyAnswerQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sagb.fns))
	for _, fn := range sagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sagb.flds)+len(sagb.fns))
		for _, f := range *sagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SurveyAnswerSelect is the builder for selecting fields of SurveyAnswer entities.
type SurveyAnswerSelect struct {
	*SurveyAnswerQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sas *SurveyAnswerSelect) Aggregate(fns ...AggregateFunc) *SurveyAnswerSelect {
	sas.fns = append(sas.fns, fns...)
	return sas
}

// Scan applies the selector query and scans the result into the given value.
func (sas *SurveyAnswerSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sas.ctx, "Select")
	if err := sas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SurveyAnswerQuery, *SurveyAnswerSelect](ctx, sas.SurveyAnswerQuery, sas, sas.inters, v)
}

func (sas *SurveyAnswerSelect) sqlScan(ctx context.Context, root *SurveyAnswerQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sas.fns))
	for _, fn := range sas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sas *SurveyAnswerSelect) Modify(modifiers ...func(s *sql.Selector)) *SurveyAnswerSelect {
	sas.modifiers = append(sas.modifiers, modifiers...)
	return sas
}
