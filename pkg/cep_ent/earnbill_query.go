// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/earnbill"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionproduceorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/platformaccount"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/profitaccount"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
)

// EarnBillQuery is the builder for querying EarnBill entities.
type EarnBillQuery struct {
	config
	ctx                      *QueryContext
	order                    []earnbill.OrderOption
	inters                   []Interceptor
	predicates               []predicate.EarnBill
	withUser                 *UserQuery
	withProfitAccount        *ProfitAccountQuery
	withPlatformAccount      *PlatformAccountQuery
	withMissionProduceOrders *MissionProduceOrderQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EarnBillQuery builder.
func (ebq *EarnBillQuery) Where(ps ...predicate.EarnBill) *EarnBillQuery {
	ebq.predicates = append(ebq.predicates, ps...)
	return ebq
}

// Limit the number of records to be returned by this query.
func (ebq *EarnBillQuery) Limit(limit int) *EarnBillQuery {
	ebq.ctx.Limit = &limit
	return ebq
}

// Offset to start from.
func (ebq *EarnBillQuery) Offset(offset int) *EarnBillQuery {
	ebq.ctx.Offset = &offset
	return ebq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ebq *EarnBillQuery) Unique(unique bool) *EarnBillQuery {
	ebq.ctx.Unique = &unique
	return ebq
}

// Order specifies how the records should be ordered.
func (ebq *EarnBillQuery) Order(o ...earnbill.OrderOption) *EarnBillQuery {
	ebq.order = append(ebq.order, o...)
	return ebq
}

// QueryUser chains the current query on the "user" edge.
func (ebq *EarnBillQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: ebq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ebq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ebq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(earnbill.Table, earnbill.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, earnbill.UserTable, earnbill.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(ebq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProfitAccount chains the current query on the "profit_account" edge.
func (ebq *EarnBillQuery) QueryProfitAccount() *ProfitAccountQuery {
	query := (&ProfitAccountClient{config: ebq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ebq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ebq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(earnbill.Table, earnbill.FieldID, selector),
			sqlgraph.To(profitaccount.Table, profitaccount.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, earnbill.ProfitAccountTable, earnbill.ProfitAccountColumn),
		)
		fromU = sqlgraph.SetNeighbors(ebq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPlatformAccount chains the current query on the "platform_account" edge.
func (ebq *EarnBillQuery) QueryPlatformAccount() *PlatformAccountQuery {
	query := (&PlatformAccountClient{config: ebq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ebq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ebq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(earnbill.Table, earnbill.FieldID, selector),
			sqlgraph.To(platformaccount.Table, platformaccount.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, earnbill.PlatformAccountTable, earnbill.PlatformAccountColumn),
		)
		fromU = sqlgraph.SetNeighbors(ebq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMissionProduceOrders chains the current query on the "mission_produce_orders" edge.
func (ebq *EarnBillQuery) QueryMissionProduceOrders() *MissionProduceOrderQuery {
	query := (&MissionProduceOrderClient{config: ebq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ebq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ebq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(earnbill.Table, earnbill.FieldID, selector),
			sqlgraph.To(missionproduceorder.Table, missionproduceorder.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, earnbill.MissionProduceOrdersTable, earnbill.MissionProduceOrdersColumn),
		)
		fromU = sqlgraph.SetNeighbors(ebq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EarnBill entity from the query.
// Returns a *NotFoundError when no EarnBill was found.
func (ebq *EarnBillQuery) First(ctx context.Context) (*EarnBill, error) {
	nodes, err := ebq.Limit(1).All(setContextOp(ctx, ebq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{earnbill.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ebq *EarnBillQuery) FirstX(ctx context.Context) *EarnBill {
	node, err := ebq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EarnBill ID from the query.
// Returns a *NotFoundError when no EarnBill ID was found.
func (ebq *EarnBillQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = ebq.Limit(1).IDs(setContextOp(ctx, ebq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{earnbill.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ebq *EarnBillQuery) FirstIDX(ctx context.Context) int64 {
	id, err := ebq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EarnBill entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EarnBill entity is found.
// Returns a *NotFoundError when no EarnBill entities are found.
func (ebq *EarnBillQuery) Only(ctx context.Context) (*EarnBill, error) {
	nodes, err := ebq.Limit(2).All(setContextOp(ctx, ebq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{earnbill.Label}
	default:
		return nil, &NotSingularError{earnbill.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ebq *EarnBillQuery) OnlyX(ctx context.Context) *EarnBill {
	node, err := ebq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EarnBill ID in the query.
// Returns a *NotSingularError when more than one EarnBill ID is found.
// Returns a *NotFoundError when no entities are found.
func (ebq *EarnBillQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = ebq.Limit(2).IDs(setContextOp(ctx, ebq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{earnbill.Label}
	default:
		err = &NotSingularError{earnbill.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ebq *EarnBillQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := ebq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EarnBills.
func (ebq *EarnBillQuery) All(ctx context.Context) ([]*EarnBill, error) {
	ctx = setContextOp(ctx, ebq.ctx, "All")
	if err := ebq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*EarnBill, *EarnBillQuery]()
	return withInterceptors[[]*EarnBill](ctx, ebq, qr, ebq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ebq *EarnBillQuery) AllX(ctx context.Context) []*EarnBill {
	nodes, err := ebq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EarnBill IDs.
func (ebq *EarnBillQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if ebq.ctx.Unique == nil && ebq.path != nil {
		ebq.Unique(true)
	}
	ctx = setContextOp(ctx, ebq.ctx, "IDs")
	if err = ebq.Select(earnbill.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ebq *EarnBillQuery) IDsX(ctx context.Context) []int64 {
	ids, err := ebq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ebq *EarnBillQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ebq.ctx, "Count")
	if err := ebq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ebq, querierCount[*EarnBillQuery](), ebq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ebq *EarnBillQuery) CountX(ctx context.Context) int {
	count, err := ebq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ebq *EarnBillQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ebq.ctx, "Exist")
	switch _, err := ebq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("cep_ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ebq *EarnBillQuery) ExistX(ctx context.Context) bool {
	exist, err := ebq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EarnBillQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ebq *EarnBillQuery) Clone() *EarnBillQuery {
	if ebq == nil {
		return nil
	}
	return &EarnBillQuery{
		config:                   ebq.config,
		ctx:                      ebq.ctx.Clone(),
		order:                    append([]earnbill.OrderOption{}, ebq.order...),
		inters:                   append([]Interceptor{}, ebq.inters...),
		predicates:               append([]predicate.EarnBill{}, ebq.predicates...),
		withUser:                 ebq.withUser.Clone(),
		withProfitAccount:        ebq.withProfitAccount.Clone(),
		withPlatformAccount:      ebq.withPlatformAccount.Clone(),
		withMissionProduceOrders: ebq.withMissionProduceOrders.Clone(),
		// clone intermediate query.
		sql:  ebq.sql.Clone(),
		path: ebq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (ebq *EarnBillQuery) WithUser(opts ...func(*UserQuery)) *EarnBillQuery {
	query := (&UserClient{config: ebq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ebq.withUser = query
	return ebq
}

// WithProfitAccount tells the query-builder to eager-load the nodes that are connected to
// the "profit_account" edge. The optional arguments are used to configure the query builder of the edge.
func (ebq *EarnBillQuery) WithProfitAccount(opts ...func(*ProfitAccountQuery)) *EarnBillQuery {
	query := (&ProfitAccountClient{config: ebq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ebq.withProfitAccount = query
	return ebq
}

// WithPlatformAccount tells the query-builder to eager-load the nodes that are connected to
// the "platform_account" edge. The optional arguments are used to configure the query builder of the edge.
func (ebq *EarnBillQuery) WithPlatformAccount(opts ...func(*PlatformAccountQuery)) *EarnBillQuery {
	query := (&PlatformAccountClient{config: ebq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ebq.withPlatformAccount = query
	return ebq
}

// WithMissionProduceOrders tells the query-builder to eager-load the nodes that are connected to
// the "mission_produce_orders" edge. The optional arguments are used to configure the query builder of the edge.
func (ebq *EarnBillQuery) WithMissionProduceOrders(opts ...func(*MissionProduceOrderQuery)) *EarnBillQuery {
	query := (&MissionProduceOrderClient{config: ebq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ebq.withMissionProduceOrders = query
	return ebq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by,string"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EarnBill.Query().
//		GroupBy(earnbill.FieldCreatedBy).
//		Aggregate(cep_ent.Count()).
//		Scan(ctx, &v)
func (ebq *EarnBillQuery) GroupBy(field string, fields ...string) *EarnBillGroupBy {
	ebq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EarnBillGroupBy{build: ebq}
	grbuild.flds = &ebq.ctx.Fields
	grbuild.label = earnbill.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by,string"`
//	}
//
//	client.EarnBill.Query().
//		Select(earnbill.FieldCreatedBy).
//		Scan(ctx, &v)
func (ebq *EarnBillQuery) Select(fields ...string) *EarnBillSelect {
	ebq.ctx.Fields = append(ebq.ctx.Fields, fields...)
	sbuild := &EarnBillSelect{EarnBillQuery: ebq}
	sbuild.label = earnbill.Label
	sbuild.flds, sbuild.scan = &ebq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EarnBillSelect configured with the given aggregations.
func (ebq *EarnBillQuery) Aggregate(fns ...AggregateFunc) *EarnBillSelect {
	return ebq.Select().Aggregate(fns...)
}

func (ebq *EarnBillQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ebq.inters {
		if inter == nil {
			return fmt.Errorf("cep_ent: uninitialized interceptor (forgotten import cep_ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ebq); err != nil {
				return err
			}
		}
	}
	for _, f := range ebq.ctx.Fields {
		if !earnbill.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
		}
	}
	if ebq.path != nil {
		prev, err := ebq.path(ctx)
		if err != nil {
			return err
		}
		ebq.sql = prev
	}
	return nil
}

func (ebq *EarnBillQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EarnBill, error) {
	var (
		nodes       = []*EarnBill{}
		_spec       = ebq.querySpec()
		loadedTypes = [4]bool{
			ebq.withUser != nil,
			ebq.withProfitAccount != nil,
			ebq.withPlatformAccount != nil,
			ebq.withMissionProduceOrders != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*EarnBill).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &EarnBill{config: ebq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ebq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ebq.withUser; query != nil {
		if err := ebq.loadUser(ctx, query, nodes, nil,
			func(n *EarnBill, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := ebq.withProfitAccount; query != nil {
		if err := ebq.loadProfitAccount(ctx, query, nodes, nil,
			func(n *EarnBill, e *ProfitAccount) { n.Edges.ProfitAccount = e }); err != nil {
			return nil, err
		}
	}
	if query := ebq.withPlatformAccount; query != nil {
		if err := ebq.loadPlatformAccount(ctx, query, nodes, nil,
			func(n *EarnBill, e *PlatformAccount) { n.Edges.PlatformAccount = e }); err != nil {
			return nil, err
		}
	}
	if query := ebq.withMissionProduceOrders; query != nil {
		if err := ebq.loadMissionProduceOrders(ctx, query, nodes, nil,
			func(n *EarnBill, e *MissionProduceOrder) { n.Edges.MissionProduceOrders = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ebq *EarnBillQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*EarnBill, init func(*EarnBill), assign func(*EarnBill, *User)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*EarnBill)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ebq *EarnBillQuery) loadProfitAccount(ctx context.Context, query *ProfitAccountQuery, nodes []*EarnBill, init func(*EarnBill), assign func(*EarnBill, *ProfitAccount)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*EarnBill)
	for i := range nodes {
		fk := nodes[i].ProfitAccountID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(profitaccount.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "profit_account_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ebq *EarnBillQuery) loadPlatformAccount(ctx context.Context, query *PlatformAccountQuery, nodes []*EarnBill, init func(*EarnBill), assign func(*EarnBill, *PlatformAccount)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*EarnBill)
	for i := range nodes {
		fk := nodes[i].PlatformAccountID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(platformaccount.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "platform_account_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ebq *EarnBillQuery) loadMissionProduceOrders(ctx context.Context, query *MissionProduceOrderQuery, nodes []*EarnBill, init func(*EarnBill), assign func(*EarnBill, *MissionProduceOrder)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*EarnBill)
	for i := range nodes {
		fk := nodes[i].ReasonID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(missionproduceorder.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "reason_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ebq *EarnBillQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ebq.querySpec()
	_spec.Node.Columns = ebq.ctx.Fields
	if len(ebq.ctx.Fields) > 0 {
		_spec.Unique = ebq.ctx.Unique != nil && *ebq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ebq.driver, _spec)
}

func (ebq *EarnBillQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(earnbill.Table, earnbill.Columns, sqlgraph.NewFieldSpec(earnbill.FieldID, field.TypeInt64))
	_spec.From = ebq.sql
	if unique := ebq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ebq.path != nil {
		_spec.Unique = true
	}
	if fields := ebq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, earnbill.FieldID)
		for i := range fields {
			if fields[i] != earnbill.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ebq.withUser != nil {
			_spec.Node.AddColumnOnce(earnbill.FieldUserID)
		}
		if ebq.withProfitAccount != nil {
			_spec.Node.AddColumnOnce(earnbill.FieldProfitAccountID)
		}
		if ebq.withPlatformAccount != nil {
			_spec.Node.AddColumnOnce(earnbill.FieldPlatformAccountID)
		}
		if ebq.withMissionProduceOrders != nil {
			_spec.Node.AddColumnOnce(earnbill.FieldReasonID)
		}
	}
	if ps := ebq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ebq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ebq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ebq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ebq *EarnBillQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ebq.driver.Dialect())
	t1 := builder.Table(earnbill.Table)
	columns := ebq.ctx.Fields
	if len(columns) == 0 {
		columns = earnbill.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ebq.sql != nil {
		selector = ebq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ebq.ctx.Unique != nil && *ebq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ebq.predicates {
		p(selector)
	}
	for _, p := range ebq.order {
		p(selector)
	}
	if offset := ebq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ebq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EarnBillGroupBy is the group-by builder for EarnBill entities.
type EarnBillGroupBy struct {
	selector
	build *EarnBillQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ebgb *EarnBillGroupBy) Aggregate(fns ...AggregateFunc) *EarnBillGroupBy {
	ebgb.fns = append(ebgb.fns, fns...)
	return ebgb
}

// Scan applies the selector query and scans the result into the given value.
func (ebgb *EarnBillGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ebgb.build.ctx, "GroupBy")
	if err := ebgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EarnBillQuery, *EarnBillGroupBy](ctx, ebgb.build, ebgb, ebgb.build.inters, v)
}

func (ebgb *EarnBillGroupBy) sqlScan(ctx context.Context, root *EarnBillQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ebgb.fns))
	for _, fn := range ebgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ebgb.flds)+len(ebgb.fns))
		for _, f := range *ebgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ebgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ebgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EarnBillSelect is the builder for selecting fields of EarnBill entities.
type EarnBillSelect struct {
	*EarnBillQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ebs *EarnBillSelect) Aggregate(fns ...AggregateFunc) *EarnBillSelect {
	ebs.fns = append(ebs.fns, fns...)
	return ebs
}

// Scan applies the selector query and scans the result into the given value.
func (ebs *EarnBillSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ebs.ctx, "Select")
	if err := ebs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EarnBillQuery, *EarnBillSelect](ctx, ebs.EarnBillQuery, ebs, ebs.inters, v)
}

func (ebs *EarnBillSelect) sqlScan(ctx context.Context, root *EarnBillQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ebs.fns))
	for _, fn := range ebs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ebs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ebs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
