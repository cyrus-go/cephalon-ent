// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/enumcondition"
	"cephalon-ent/pkg/cep_ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EnumConditionUpdate is the builder for updating EnumCondition entities.
type EnumConditionUpdate struct {
	config
	hooks    []Hook
	mutation *EnumConditionMutation
}

// Where appends a list predicates to the EnumConditionUpdate builder.
func (ecu *EnumConditionUpdate) Where(ps ...predicate.EnumCondition) *EnumConditionUpdate {
	ecu.mutation.Where(ps...)
	return ecu
}

// SetCreatedBy sets the "created_by" field.
func (ecu *EnumConditionUpdate) SetCreatedBy(i int64) *EnumConditionUpdate {
	ecu.mutation.ResetCreatedBy()
	ecu.mutation.SetCreatedBy(i)
	return ecu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ecu *EnumConditionUpdate) SetNillableCreatedBy(i *int64) *EnumConditionUpdate {
	if i != nil {
		ecu.SetCreatedBy(*i)
	}
	return ecu
}

// AddCreatedBy adds i to the "created_by" field.
func (ecu *EnumConditionUpdate) AddCreatedBy(i int64) *EnumConditionUpdate {
	ecu.mutation.AddCreatedBy(i)
	return ecu
}

// SetUpdatedBy sets the "updated_by" field.
func (ecu *EnumConditionUpdate) SetUpdatedBy(i int64) *EnumConditionUpdate {
	ecu.mutation.ResetUpdatedBy()
	ecu.mutation.SetUpdatedBy(i)
	return ecu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ecu *EnumConditionUpdate) SetNillableUpdatedBy(i *int64) *EnumConditionUpdate {
	if i != nil {
		ecu.SetUpdatedBy(*i)
	}
	return ecu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (ecu *EnumConditionUpdate) AddUpdatedBy(i int64) *EnumConditionUpdate {
	ecu.mutation.AddUpdatedBy(i)
	return ecu
}

// SetUpdatedAt sets the "updated_at" field.
func (ecu *EnumConditionUpdate) SetUpdatedAt(t time.Time) *EnumConditionUpdate {
	ecu.mutation.SetUpdatedAt(t)
	return ecu
}

// SetDeletedAt sets the "deleted_at" field.
func (ecu *EnumConditionUpdate) SetDeletedAt(t time.Time) *EnumConditionUpdate {
	ecu.mutation.SetDeletedAt(t)
	return ecu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ecu *EnumConditionUpdate) SetNillableDeletedAt(t *time.Time) *EnumConditionUpdate {
	if t != nil {
		ecu.SetDeletedAt(*t)
	}
	return ecu
}

// SetFrontType sets the "front_type" field.
func (ecu *EnumConditionUpdate) SetFrontType(s string) *EnumConditionUpdate {
	ecu.mutation.SetFrontType(s)
	return ecu
}

// SetNillableFrontType sets the "front_type" field if the given value is not nil.
func (ecu *EnumConditionUpdate) SetNillableFrontType(s *string) *EnumConditionUpdate {
	if s != nil {
		ecu.SetFrontType(*s)
	}
	return ecu
}

// SetMissionType sets the "mission_type" field.
func (ecu *EnumConditionUpdate) SetMissionType(s string) *EnumConditionUpdate {
	ecu.mutation.SetMissionType(s)
	return ecu
}

// SetNillableMissionType sets the "mission_type" field if the given value is not nil.
func (ecu *EnumConditionUpdate) SetNillableMissionType(s *string) *EnumConditionUpdate {
	if s != nil {
		ecu.SetMissionType(*s)
	}
	return ecu
}

// SetMissionCallWay sets the "mission_call_way" field.
func (ecu *EnumConditionUpdate) SetMissionCallWay(s string) *EnumConditionUpdate {
	ecu.mutation.SetMissionCallWay(s)
	return ecu
}

// SetNillableMissionCallWay sets the "mission_call_way" field if the given value is not nil.
func (ecu *EnumConditionUpdate) SetNillableMissionCallWay(s *string) *EnumConditionUpdate {
	if s != nil {
		ecu.SetMissionCallWay(*s)
	}
	return ecu
}

// Mutation returns the EnumConditionMutation object of the builder.
func (ecu *EnumConditionUpdate) Mutation() *EnumConditionMutation {
	return ecu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ecu *EnumConditionUpdate) Save(ctx context.Context) (int, error) {
	ecu.defaults()
	return withHooks(ctx, ecu.sqlSave, ecu.mutation, ecu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ecu *EnumConditionUpdate) SaveX(ctx context.Context) int {
	affected, err := ecu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ecu *EnumConditionUpdate) Exec(ctx context.Context) error {
	_, err := ecu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecu *EnumConditionUpdate) ExecX(ctx context.Context) {
	if err := ecu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ecu *EnumConditionUpdate) defaults() {
	if _, ok := ecu.mutation.UpdatedAt(); !ok {
		v := enumcondition.UpdateDefaultUpdatedAt()
		ecu.mutation.SetUpdatedAt(v)
	}
}

func (ecu *EnumConditionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(enumcondition.Table, enumcondition.Columns, sqlgraph.NewFieldSpec(enumcondition.FieldID, field.TypeInt64))
	if ps := ecu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ecu.mutation.CreatedBy(); ok {
		_spec.SetField(enumcondition.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := ecu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(enumcondition.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := ecu.mutation.UpdatedBy(); ok {
		_spec.SetField(enumcondition.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := ecu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(enumcondition.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := ecu.mutation.UpdatedAt(); ok {
		_spec.SetField(enumcondition.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ecu.mutation.DeletedAt(); ok {
		_spec.SetField(enumcondition.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := ecu.mutation.FrontType(); ok {
		_spec.SetField(enumcondition.FieldFrontType, field.TypeString, value)
	}
	if value, ok := ecu.mutation.MissionType(); ok {
		_spec.SetField(enumcondition.FieldMissionType, field.TypeString, value)
	}
	if value, ok := ecu.mutation.MissionCallWay(); ok {
		_spec.SetField(enumcondition.FieldMissionCallWay, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ecu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enumcondition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ecu.mutation.done = true
	return n, nil
}

// EnumConditionUpdateOne is the builder for updating a single EnumCondition entity.
type EnumConditionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EnumConditionMutation
}

// SetCreatedBy sets the "created_by" field.
func (ecuo *EnumConditionUpdateOne) SetCreatedBy(i int64) *EnumConditionUpdateOne {
	ecuo.mutation.ResetCreatedBy()
	ecuo.mutation.SetCreatedBy(i)
	return ecuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ecuo *EnumConditionUpdateOne) SetNillableCreatedBy(i *int64) *EnumConditionUpdateOne {
	if i != nil {
		ecuo.SetCreatedBy(*i)
	}
	return ecuo
}

// AddCreatedBy adds i to the "created_by" field.
func (ecuo *EnumConditionUpdateOne) AddCreatedBy(i int64) *EnumConditionUpdateOne {
	ecuo.mutation.AddCreatedBy(i)
	return ecuo
}

// SetUpdatedBy sets the "updated_by" field.
func (ecuo *EnumConditionUpdateOne) SetUpdatedBy(i int64) *EnumConditionUpdateOne {
	ecuo.mutation.ResetUpdatedBy()
	ecuo.mutation.SetUpdatedBy(i)
	return ecuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ecuo *EnumConditionUpdateOne) SetNillableUpdatedBy(i *int64) *EnumConditionUpdateOne {
	if i != nil {
		ecuo.SetUpdatedBy(*i)
	}
	return ecuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (ecuo *EnumConditionUpdateOne) AddUpdatedBy(i int64) *EnumConditionUpdateOne {
	ecuo.mutation.AddUpdatedBy(i)
	return ecuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ecuo *EnumConditionUpdateOne) SetUpdatedAt(t time.Time) *EnumConditionUpdateOne {
	ecuo.mutation.SetUpdatedAt(t)
	return ecuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ecuo *EnumConditionUpdateOne) SetDeletedAt(t time.Time) *EnumConditionUpdateOne {
	ecuo.mutation.SetDeletedAt(t)
	return ecuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ecuo *EnumConditionUpdateOne) SetNillableDeletedAt(t *time.Time) *EnumConditionUpdateOne {
	if t != nil {
		ecuo.SetDeletedAt(*t)
	}
	return ecuo
}

// SetFrontType sets the "front_type" field.
func (ecuo *EnumConditionUpdateOne) SetFrontType(s string) *EnumConditionUpdateOne {
	ecuo.mutation.SetFrontType(s)
	return ecuo
}

// SetNillableFrontType sets the "front_type" field if the given value is not nil.
func (ecuo *EnumConditionUpdateOne) SetNillableFrontType(s *string) *EnumConditionUpdateOne {
	if s != nil {
		ecuo.SetFrontType(*s)
	}
	return ecuo
}

// SetMissionType sets the "mission_type" field.
func (ecuo *EnumConditionUpdateOne) SetMissionType(s string) *EnumConditionUpdateOne {
	ecuo.mutation.SetMissionType(s)
	return ecuo
}

// SetNillableMissionType sets the "mission_type" field if the given value is not nil.
func (ecuo *EnumConditionUpdateOne) SetNillableMissionType(s *string) *EnumConditionUpdateOne {
	if s != nil {
		ecuo.SetMissionType(*s)
	}
	return ecuo
}

// SetMissionCallWay sets the "mission_call_way" field.
func (ecuo *EnumConditionUpdateOne) SetMissionCallWay(s string) *EnumConditionUpdateOne {
	ecuo.mutation.SetMissionCallWay(s)
	return ecuo
}

// SetNillableMissionCallWay sets the "mission_call_way" field if the given value is not nil.
func (ecuo *EnumConditionUpdateOne) SetNillableMissionCallWay(s *string) *EnumConditionUpdateOne {
	if s != nil {
		ecuo.SetMissionCallWay(*s)
	}
	return ecuo
}

// Mutation returns the EnumConditionMutation object of the builder.
func (ecuo *EnumConditionUpdateOne) Mutation() *EnumConditionMutation {
	return ecuo.mutation
}

// Where appends a list predicates to the EnumConditionUpdate builder.
func (ecuo *EnumConditionUpdateOne) Where(ps ...predicate.EnumCondition) *EnumConditionUpdateOne {
	ecuo.mutation.Where(ps...)
	return ecuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ecuo *EnumConditionUpdateOne) Select(field string, fields ...string) *EnumConditionUpdateOne {
	ecuo.fields = append([]string{field}, fields...)
	return ecuo
}

// Save executes the query and returns the updated EnumCondition entity.
func (ecuo *EnumConditionUpdateOne) Save(ctx context.Context) (*EnumCondition, error) {
	ecuo.defaults()
	return withHooks(ctx, ecuo.sqlSave, ecuo.mutation, ecuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ecuo *EnumConditionUpdateOne) SaveX(ctx context.Context) *EnumCondition {
	node, err := ecuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ecuo *EnumConditionUpdateOne) Exec(ctx context.Context) error {
	_, err := ecuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecuo *EnumConditionUpdateOne) ExecX(ctx context.Context) {
	if err := ecuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ecuo *EnumConditionUpdateOne) defaults() {
	if _, ok := ecuo.mutation.UpdatedAt(); !ok {
		v := enumcondition.UpdateDefaultUpdatedAt()
		ecuo.mutation.SetUpdatedAt(v)
	}
}

func (ecuo *EnumConditionUpdateOne) sqlSave(ctx context.Context) (_node *EnumCondition, err error) {
	_spec := sqlgraph.NewUpdateSpec(enumcondition.Table, enumcondition.Columns, sqlgraph.NewFieldSpec(enumcondition.FieldID, field.TypeInt64))
	id, ok := ecuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "EnumCondition.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ecuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enumcondition.FieldID)
		for _, f := range fields {
			if !enumcondition.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != enumcondition.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ecuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ecuo.mutation.CreatedBy(); ok {
		_spec.SetField(enumcondition.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := ecuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(enumcondition.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := ecuo.mutation.UpdatedBy(); ok {
		_spec.SetField(enumcondition.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := ecuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(enumcondition.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := ecuo.mutation.UpdatedAt(); ok {
		_spec.SetField(enumcondition.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ecuo.mutation.DeletedAt(); ok {
		_spec.SetField(enumcondition.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := ecuo.mutation.FrontType(); ok {
		_spec.SetField(enumcondition.FieldFrontType, field.TypeString, value)
	}
	if value, ok := ecuo.mutation.MissionType(); ok {
		_spec.SetField(enumcondition.FieldMissionType, field.TypeString, value)
	}
	if value, ok := ecuo.mutation.MissionCallWay(); ok {
		_spec.SetField(enumcondition.FieldMissionCallWay, field.TypeString, value)
	}
	_node = &EnumCondition{config: ecuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ecuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enumcondition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ecuo.mutation.done = true
	return _node, nil
}
