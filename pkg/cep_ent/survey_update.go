// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/survey"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/surveyquestion"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/surveyresponse"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// SurveyUpdate is the builder for updating Survey entities.
type SurveyUpdate struct {
	config
	hooks     []Hook
	mutation  *SurveyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SurveyUpdate builder.
func (su *SurveyUpdate) Where(ps ...predicate.Survey) *SurveyUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetCreatedBy sets the "created_by" field.
func (su *SurveyUpdate) SetCreatedBy(i int64) *SurveyUpdate {
	su.mutation.ResetCreatedBy()
	su.mutation.SetCreatedBy(i)
	return su
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (su *SurveyUpdate) SetNillableCreatedBy(i *int64) *SurveyUpdate {
	if i != nil {
		su.SetCreatedBy(*i)
	}
	return su
}

// AddCreatedBy adds i to the "created_by" field.
func (su *SurveyUpdate) AddCreatedBy(i int64) *SurveyUpdate {
	su.mutation.AddCreatedBy(i)
	return su
}

// SetUpdatedBy sets the "updated_by" field.
func (su *SurveyUpdate) SetUpdatedBy(i int64) *SurveyUpdate {
	su.mutation.ResetUpdatedBy()
	su.mutation.SetUpdatedBy(i)
	return su
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (su *SurveyUpdate) SetNillableUpdatedBy(i *int64) *SurveyUpdate {
	if i != nil {
		su.SetUpdatedBy(*i)
	}
	return su
}

// AddUpdatedBy adds i to the "updated_by" field.
func (su *SurveyUpdate) AddUpdatedBy(i int64) *SurveyUpdate {
	su.mutation.AddUpdatedBy(i)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SurveyUpdate) SetUpdatedAt(t time.Time) *SurveyUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *SurveyUpdate) SetDeletedAt(t time.Time) *SurveyUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *SurveyUpdate) SetNillableDeletedAt(t *time.Time) *SurveyUpdate {
	if t != nil {
		su.SetDeletedAt(*t)
	}
	return su
}

// SetTitle sets the "title" field.
func (su *SurveyUpdate) SetTitle(s string) *SurveyUpdate {
	su.mutation.SetTitle(s)
	return su
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (su *SurveyUpdate) SetNillableTitle(s *string) *SurveyUpdate {
	if s != nil {
		su.SetTitle(*s)
	}
	return su
}

// SetStartedAt sets the "started_at" field.
func (su *SurveyUpdate) SetStartedAt(t time.Time) *SurveyUpdate {
	su.mutation.SetStartedAt(t)
	return su
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (su *SurveyUpdate) SetNillableStartedAt(t *time.Time) *SurveyUpdate {
	if t != nil {
		su.SetStartedAt(*t)
	}
	return su
}

// ClearStartedAt clears the value of the "started_at" field.
func (su *SurveyUpdate) ClearStartedAt() *SurveyUpdate {
	su.mutation.ClearStartedAt()
	return su
}

// SetEndedAt sets the "ended_at" field.
func (su *SurveyUpdate) SetEndedAt(t time.Time) *SurveyUpdate {
	su.mutation.SetEndedAt(t)
	return su
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (su *SurveyUpdate) SetNillableEndedAt(t *time.Time) *SurveyUpdate {
	if t != nil {
		su.SetEndedAt(*t)
	}
	return su
}

// ClearEndedAt clears the value of the "ended_at" field.
func (su *SurveyUpdate) ClearEndedAt() *SurveyUpdate {
	su.mutation.ClearEndedAt()
	return su
}

// SetSortNum sets the "sort_num" field.
func (su *SurveyUpdate) SetSortNum(i int64) *SurveyUpdate {
	su.mutation.ResetSortNum()
	su.mutation.SetSortNum(i)
	return su
}

// SetNillableSortNum sets the "sort_num" field if the given value is not nil.
func (su *SurveyUpdate) SetNillableSortNum(i *int64) *SurveyUpdate {
	if i != nil {
		su.SetSortNum(*i)
	}
	return su
}

// AddSortNum adds i to the "sort_num" field.
func (su *SurveyUpdate) AddSortNum(i int64) *SurveyUpdate {
	su.mutation.AddSortNum(i)
	return su
}

// SetGroup sets the "group" field.
func (su *SurveyUpdate) SetGroup(s string) *SurveyUpdate {
	su.mutation.SetGroup(s)
	return su
}

// SetNillableGroup sets the "group" field if the given value is not nil.
func (su *SurveyUpdate) SetNillableGroup(s *string) *SurveyUpdate {
	if s != nil {
		su.SetGroup(*s)
	}
	return su
}

// SetGiftCepAmount sets the "gift_cep_amount" field.
func (su *SurveyUpdate) SetGiftCepAmount(i int64) *SurveyUpdate {
	su.mutation.ResetGiftCepAmount()
	su.mutation.SetGiftCepAmount(i)
	return su
}

// SetNillableGiftCepAmount sets the "gift_cep_amount" field if the given value is not nil.
func (su *SurveyUpdate) SetNillableGiftCepAmount(i *int64) *SurveyUpdate {
	if i != nil {
		su.SetGiftCepAmount(*i)
	}
	return su
}

// AddGiftCepAmount adds i to the "gift_cep_amount" field.
func (su *SurveyUpdate) AddGiftCepAmount(i int64) *SurveyUpdate {
	su.mutation.AddGiftCepAmount(i)
	return su
}

// SetGiftType sets the "gift_type" field.
func (su *SurveyUpdate) SetGiftType(egt enums.SurveyGiftType) *SurveyUpdate {
	su.mutation.SetGiftType(egt)
	return su
}

// SetNillableGiftType sets the "gift_type" field if the given value is not nil.
func (su *SurveyUpdate) SetNillableGiftType(egt *enums.SurveyGiftType) *SurveyUpdate {
	if egt != nil {
		su.SetGiftType(*egt)
	}
	return su
}

// SetHint sets the "hint" field.
func (su *SurveyUpdate) SetHint(s string) *SurveyUpdate {
	su.mutation.SetHint(s)
	return su
}

// SetNillableHint sets the "hint" field if the given value is not nil.
func (su *SurveyUpdate) SetNillableHint(s *string) *SurveyUpdate {
	if s != nil {
		su.SetHint(*s)
	}
	return su
}

// SetDesc sets the "desc" field.
func (su *SurveyUpdate) SetDesc(s string) *SurveyUpdate {
	su.mutation.SetDesc(s)
	return su
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (su *SurveyUpdate) SetNillableDesc(s *string) *SurveyUpdate {
	if s != nil {
		su.SetDesc(*s)
	}
	return su
}

// SetIsGiftRecharge sets the "is_gift_recharge" field.
func (su *SurveyUpdate) SetIsGiftRecharge(b bool) *SurveyUpdate {
	su.mutation.SetIsGiftRecharge(b)
	return su
}

// SetNillableIsGiftRecharge sets the "is_gift_recharge" field if the given value is not nil.
func (su *SurveyUpdate) SetNillableIsGiftRecharge(b *bool) *SurveyUpdate {
	if b != nil {
		su.SetIsGiftRecharge(*b)
	}
	return su
}

// SetBackgroundImage sets the "background_image" field.
func (su *SurveyUpdate) SetBackgroundImage(s string) *SurveyUpdate {
	su.mutation.SetBackgroundImage(s)
	return su
}

// SetNillableBackgroundImage sets the "background_image" field if the given value is not nil.
func (su *SurveyUpdate) SetNillableBackgroundImage(s *string) *SurveyUpdate {
	if s != nil {
		su.SetBackgroundImage(*s)
	}
	return su
}

// AddSurveyQuestionIDs adds the "survey_questions" edge to the SurveyQuestion entity by IDs.
func (su *SurveyUpdate) AddSurveyQuestionIDs(ids ...int64) *SurveyUpdate {
	su.mutation.AddSurveyQuestionIDs(ids...)
	return su
}

// AddSurveyQuestions adds the "survey_questions" edges to the SurveyQuestion entity.
func (su *SurveyUpdate) AddSurveyQuestions(s ...*SurveyQuestion) *SurveyUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddSurveyQuestionIDs(ids...)
}

// AddSurveyResponseIDs adds the "survey_responses" edge to the SurveyResponse entity by IDs.
func (su *SurveyUpdate) AddSurveyResponseIDs(ids ...int64) *SurveyUpdate {
	su.mutation.AddSurveyResponseIDs(ids...)
	return su
}

// AddSurveyResponses adds the "survey_responses" edges to the SurveyResponse entity.
func (su *SurveyUpdate) AddSurveyResponses(s ...*SurveyResponse) *SurveyUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddSurveyResponseIDs(ids...)
}

// Mutation returns the SurveyMutation object of the builder.
func (su *SurveyUpdate) Mutation() *SurveyMutation {
	return su.mutation
}

// ClearSurveyQuestions clears all "survey_questions" edges to the SurveyQuestion entity.
func (su *SurveyUpdate) ClearSurveyQuestions() *SurveyUpdate {
	su.mutation.ClearSurveyQuestions()
	return su
}

// RemoveSurveyQuestionIDs removes the "survey_questions" edge to SurveyQuestion entities by IDs.
func (su *SurveyUpdate) RemoveSurveyQuestionIDs(ids ...int64) *SurveyUpdate {
	su.mutation.RemoveSurveyQuestionIDs(ids...)
	return su
}

// RemoveSurveyQuestions removes "survey_questions" edges to SurveyQuestion entities.
func (su *SurveyUpdate) RemoveSurveyQuestions(s ...*SurveyQuestion) *SurveyUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveSurveyQuestionIDs(ids...)
}

// ClearSurveyResponses clears all "survey_responses" edges to the SurveyResponse entity.
func (su *SurveyUpdate) ClearSurveyResponses() *SurveyUpdate {
	su.mutation.ClearSurveyResponses()
	return su
}

// RemoveSurveyResponseIDs removes the "survey_responses" edge to SurveyResponse entities by IDs.
func (su *SurveyUpdate) RemoveSurveyResponseIDs(ids ...int64) *SurveyUpdate {
	su.mutation.RemoveSurveyResponseIDs(ids...)
	return su
}

// RemoveSurveyResponses removes "survey_responses" edges to SurveyResponse entities.
func (su *SurveyUpdate) RemoveSurveyResponses(s ...*SurveyResponse) *SurveyUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveSurveyResponseIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SurveyUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SurveyUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SurveyUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SurveyUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SurveyUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := survey.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SurveyUpdate) check() error {
	if v, ok := su.mutation.GiftType(); ok {
		if err := survey.GiftTypeValidator(v); err != nil {
			return &ValidationError{Name: "gift_type", err: fmt.Errorf(`cep_ent: validator failed for field "Survey.gift_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *SurveyUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SurveyUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *SurveyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(survey.Table, survey.Columns, sqlgraph.NewFieldSpec(survey.FieldID, field.TypeInt64))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.CreatedBy(); ok {
		_spec.SetField(survey.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedCreatedBy(); ok {
		_spec.AddField(survey.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := su.mutation.UpdatedBy(); ok {
		_spec.SetField(survey.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(survey.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(survey.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(survey.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.Title(); ok {
		_spec.SetField(survey.FieldTitle, field.TypeString, value)
	}
	if value, ok := su.mutation.StartedAt(); ok {
		_spec.SetField(survey.FieldStartedAt, field.TypeTime, value)
	}
	if su.mutation.StartedAtCleared() {
		_spec.ClearField(survey.FieldStartedAt, field.TypeTime)
	}
	if value, ok := su.mutation.EndedAt(); ok {
		_spec.SetField(survey.FieldEndedAt, field.TypeTime, value)
	}
	if su.mutation.EndedAtCleared() {
		_spec.ClearField(survey.FieldEndedAt, field.TypeTime)
	}
	if value, ok := su.mutation.SortNum(); ok {
		_spec.SetField(survey.FieldSortNum, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedSortNum(); ok {
		_spec.AddField(survey.FieldSortNum, field.TypeInt64, value)
	}
	if value, ok := su.mutation.Group(); ok {
		_spec.SetField(survey.FieldGroup, field.TypeString, value)
	}
	if value, ok := su.mutation.GiftCepAmount(); ok {
		_spec.SetField(survey.FieldGiftCepAmount, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedGiftCepAmount(); ok {
		_spec.AddField(survey.FieldGiftCepAmount, field.TypeInt64, value)
	}
	if value, ok := su.mutation.GiftType(); ok {
		_spec.SetField(survey.FieldGiftType, field.TypeEnum, value)
	}
	if value, ok := su.mutation.Hint(); ok {
		_spec.SetField(survey.FieldHint, field.TypeString, value)
	}
	if value, ok := su.mutation.Desc(); ok {
		_spec.SetField(survey.FieldDesc, field.TypeString, value)
	}
	if value, ok := su.mutation.IsGiftRecharge(); ok {
		_spec.SetField(survey.FieldIsGiftRecharge, field.TypeBool, value)
	}
	if value, ok := su.mutation.BackgroundImage(); ok {
		_spec.SetField(survey.FieldBackgroundImage, field.TypeString, value)
	}
	if su.mutation.SurveyQuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   survey.SurveyQuestionsTable,
			Columns: []string{survey.SurveyQuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyquestion.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedSurveyQuestionsIDs(); len(nodes) > 0 && !su.mutation.SurveyQuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   survey.SurveyQuestionsTable,
			Columns: []string{survey.SurveyQuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyquestion.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SurveyQuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   survey.SurveyQuestionsTable,
			Columns: []string{survey.SurveyQuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyquestion.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.SurveyResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   survey.SurveyResponsesTable,
			Columns: []string{survey.SurveyResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyresponse.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedSurveyResponsesIDs(); len(nodes) > 0 && !su.mutation.SurveyResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   survey.SurveyResponsesTable,
			Columns: []string{survey.SurveyResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyresponse.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SurveyResponsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   survey.SurveyResponsesTable,
			Columns: []string{survey.SurveyResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyresponse.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{survey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SurveyUpdateOne is the builder for updating a single Survey entity.
type SurveyUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SurveyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedBy sets the "created_by" field.
func (suo *SurveyUpdateOne) SetCreatedBy(i int64) *SurveyUpdateOne {
	suo.mutation.ResetCreatedBy()
	suo.mutation.SetCreatedBy(i)
	return suo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (suo *SurveyUpdateOne) SetNillableCreatedBy(i *int64) *SurveyUpdateOne {
	if i != nil {
		suo.SetCreatedBy(*i)
	}
	return suo
}

// AddCreatedBy adds i to the "created_by" field.
func (suo *SurveyUpdateOne) AddCreatedBy(i int64) *SurveyUpdateOne {
	suo.mutation.AddCreatedBy(i)
	return suo
}

// SetUpdatedBy sets the "updated_by" field.
func (suo *SurveyUpdateOne) SetUpdatedBy(i int64) *SurveyUpdateOne {
	suo.mutation.ResetUpdatedBy()
	suo.mutation.SetUpdatedBy(i)
	return suo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (suo *SurveyUpdateOne) SetNillableUpdatedBy(i *int64) *SurveyUpdateOne {
	if i != nil {
		suo.SetUpdatedBy(*i)
	}
	return suo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (suo *SurveyUpdateOne) AddUpdatedBy(i int64) *SurveyUpdateOne {
	suo.mutation.AddUpdatedBy(i)
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SurveyUpdateOne) SetUpdatedAt(t time.Time) *SurveyUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *SurveyUpdateOne) SetDeletedAt(t time.Time) *SurveyUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *SurveyUpdateOne) SetNillableDeletedAt(t *time.Time) *SurveyUpdateOne {
	if t != nil {
		suo.SetDeletedAt(*t)
	}
	return suo
}

// SetTitle sets the "title" field.
func (suo *SurveyUpdateOne) SetTitle(s string) *SurveyUpdateOne {
	suo.mutation.SetTitle(s)
	return suo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (suo *SurveyUpdateOne) SetNillableTitle(s *string) *SurveyUpdateOne {
	if s != nil {
		suo.SetTitle(*s)
	}
	return suo
}

// SetStartedAt sets the "started_at" field.
func (suo *SurveyUpdateOne) SetStartedAt(t time.Time) *SurveyUpdateOne {
	suo.mutation.SetStartedAt(t)
	return suo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (suo *SurveyUpdateOne) SetNillableStartedAt(t *time.Time) *SurveyUpdateOne {
	if t != nil {
		suo.SetStartedAt(*t)
	}
	return suo
}

// ClearStartedAt clears the value of the "started_at" field.
func (suo *SurveyUpdateOne) ClearStartedAt() *SurveyUpdateOne {
	suo.mutation.ClearStartedAt()
	return suo
}

// SetEndedAt sets the "ended_at" field.
func (suo *SurveyUpdateOne) SetEndedAt(t time.Time) *SurveyUpdateOne {
	suo.mutation.SetEndedAt(t)
	return suo
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (suo *SurveyUpdateOne) SetNillableEndedAt(t *time.Time) *SurveyUpdateOne {
	if t != nil {
		suo.SetEndedAt(*t)
	}
	return suo
}

// ClearEndedAt clears the value of the "ended_at" field.
func (suo *SurveyUpdateOne) ClearEndedAt() *SurveyUpdateOne {
	suo.mutation.ClearEndedAt()
	return suo
}

// SetSortNum sets the "sort_num" field.
func (suo *SurveyUpdateOne) SetSortNum(i int64) *SurveyUpdateOne {
	suo.mutation.ResetSortNum()
	suo.mutation.SetSortNum(i)
	return suo
}

// SetNillableSortNum sets the "sort_num" field if the given value is not nil.
func (suo *SurveyUpdateOne) SetNillableSortNum(i *int64) *SurveyUpdateOne {
	if i != nil {
		suo.SetSortNum(*i)
	}
	return suo
}

// AddSortNum adds i to the "sort_num" field.
func (suo *SurveyUpdateOne) AddSortNum(i int64) *SurveyUpdateOne {
	suo.mutation.AddSortNum(i)
	return suo
}

// SetGroup sets the "group" field.
func (suo *SurveyUpdateOne) SetGroup(s string) *SurveyUpdateOne {
	suo.mutation.SetGroup(s)
	return suo
}

// SetNillableGroup sets the "group" field if the given value is not nil.
func (suo *SurveyUpdateOne) SetNillableGroup(s *string) *SurveyUpdateOne {
	if s != nil {
		suo.SetGroup(*s)
	}
	return suo
}

// SetGiftCepAmount sets the "gift_cep_amount" field.
func (suo *SurveyUpdateOne) SetGiftCepAmount(i int64) *SurveyUpdateOne {
	suo.mutation.ResetGiftCepAmount()
	suo.mutation.SetGiftCepAmount(i)
	return suo
}

// SetNillableGiftCepAmount sets the "gift_cep_amount" field if the given value is not nil.
func (suo *SurveyUpdateOne) SetNillableGiftCepAmount(i *int64) *SurveyUpdateOne {
	if i != nil {
		suo.SetGiftCepAmount(*i)
	}
	return suo
}

// AddGiftCepAmount adds i to the "gift_cep_amount" field.
func (suo *SurveyUpdateOne) AddGiftCepAmount(i int64) *SurveyUpdateOne {
	suo.mutation.AddGiftCepAmount(i)
	return suo
}

// SetGiftType sets the "gift_type" field.
func (suo *SurveyUpdateOne) SetGiftType(egt enums.SurveyGiftType) *SurveyUpdateOne {
	suo.mutation.SetGiftType(egt)
	return suo
}

// SetNillableGiftType sets the "gift_type" field if the given value is not nil.
func (suo *SurveyUpdateOne) SetNillableGiftType(egt *enums.SurveyGiftType) *SurveyUpdateOne {
	if egt != nil {
		suo.SetGiftType(*egt)
	}
	return suo
}

// SetHint sets the "hint" field.
func (suo *SurveyUpdateOne) SetHint(s string) *SurveyUpdateOne {
	suo.mutation.SetHint(s)
	return suo
}

// SetNillableHint sets the "hint" field if the given value is not nil.
func (suo *SurveyUpdateOne) SetNillableHint(s *string) *SurveyUpdateOne {
	if s != nil {
		suo.SetHint(*s)
	}
	return suo
}

// SetDesc sets the "desc" field.
func (suo *SurveyUpdateOne) SetDesc(s string) *SurveyUpdateOne {
	suo.mutation.SetDesc(s)
	return suo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (suo *SurveyUpdateOne) SetNillableDesc(s *string) *SurveyUpdateOne {
	if s != nil {
		suo.SetDesc(*s)
	}
	return suo
}

// SetIsGiftRecharge sets the "is_gift_recharge" field.
func (suo *SurveyUpdateOne) SetIsGiftRecharge(b bool) *SurveyUpdateOne {
	suo.mutation.SetIsGiftRecharge(b)
	return suo
}

// SetNillableIsGiftRecharge sets the "is_gift_recharge" field if the given value is not nil.
func (suo *SurveyUpdateOne) SetNillableIsGiftRecharge(b *bool) *SurveyUpdateOne {
	if b != nil {
		suo.SetIsGiftRecharge(*b)
	}
	return suo
}

// SetBackgroundImage sets the "background_image" field.
func (suo *SurveyUpdateOne) SetBackgroundImage(s string) *SurveyUpdateOne {
	suo.mutation.SetBackgroundImage(s)
	return suo
}

// SetNillableBackgroundImage sets the "background_image" field if the given value is not nil.
func (suo *SurveyUpdateOne) SetNillableBackgroundImage(s *string) *SurveyUpdateOne {
	if s != nil {
		suo.SetBackgroundImage(*s)
	}
	return suo
}

// AddSurveyQuestionIDs adds the "survey_questions" edge to the SurveyQuestion entity by IDs.
func (suo *SurveyUpdateOne) AddSurveyQuestionIDs(ids ...int64) *SurveyUpdateOne {
	suo.mutation.AddSurveyQuestionIDs(ids...)
	return suo
}

// AddSurveyQuestions adds the "survey_questions" edges to the SurveyQuestion entity.
func (suo *SurveyUpdateOne) AddSurveyQuestions(s ...*SurveyQuestion) *SurveyUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddSurveyQuestionIDs(ids...)
}

// AddSurveyResponseIDs adds the "survey_responses" edge to the SurveyResponse entity by IDs.
func (suo *SurveyUpdateOne) AddSurveyResponseIDs(ids ...int64) *SurveyUpdateOne {
	suo.mutation.AddSurveyResponseIDs(ids...)
	return suo
}

// AddSurveyResponses adds the "survey_responses" edges to the SurveyResponse entity.
func (suo *SurveyUpdateOne) AddSurveyResponses(s ...*SurveyResponse) *SurveyUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddSurveyResponseIDs(ids...)
}

// Mutation returns the SurveyMutation object of the builder.
func (suo *SurveyUpdateOne) Mutation() *SurveyMutation {
	return suo.mutation
}

// ClearSurveyQuestions clears all "survey_questions" edges to the SurveyQuestion entity.
func (suo *SurveyUpdateOne) ClearSurveyQuestions() *SurveyUpdateOne {
	suo.mutation.ClearSurveyQuestions()
	return suo
}

// RemoveSurveyQuestionIDs removes the "survey_questions" edge to SurveyQuestion entities by IDs.
func (suo *SurveyUpdateOne) RemoveSurveyQuestionIDs(ids ...int64) *SurveyUpdateOne {
	suo.mutation.RemoveSurveyQuestionIDs(ids...)
	return suo
}

// RemoveSurveyQuestions removes "survey_questions" edges to SurveyQuestion entities.
func (suo *SurveyUpdateOne) RemoveSurveyQuestions(s ...*SurveyQuestion) *SurveyUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveSurveyQuestionIDs(ids...)
}

// ClearSurveyResponses clears all "survey_responses" edges to the SurveyResponse entity.
func (suo *SurveyUpdateOne) ClearSurveyResponses() *SurveyUpdateOne {
	suo.mutation.ClearSurveyResponses()
	return suo
}

// RemoveSurveyResponseIDs removes the "survey_responses" edge to SurveyResponse entities by IDs.
func (suo *SurveyUpdateOne) RemoveSurveyResponseIDs(ids ...int64) *SurveyUpdateOne {
	suo.mutation.RemoveSurveyResponseIDs(ids...)
	return suo
}

// RemoveSurveyResponses removes "survey_responses" edges to SurveyResponse entities.
func (suo *SurveyUpdateOne) RemoveSurveyResponses(s ...*SurveyResponse) *SurveyUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveSurveyResponseIDs(ids...)
}

// Where appends a list predicates to the SurveyUpdate builder.
func (suo *SurveyUpdateOne) Where(ps ...predicate.Survey) *SurveyUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SurveyUpdateOne) Select(field string, fields ...string) *SurveyUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Survey entity.
func (suo *SurveyUpdateOne) Save(ctx context.Context) (*Survey, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SurveyUpdateOne) SaveX(ctx context.Context) *Survey {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SurveyUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SurveyUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SurveyUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := survey.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SurveyUpdateOne) check() error {
	if v, ok := suo.mutation.GiftType(); ok {
		if err := survey.GiftTypeValidator(v); err != nil {
			return &ValidationError{Name: "gift_type", err: fmt.Errorf(`cep_ent: validator failed for field "Survey.gift_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *SurveyUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SurveyUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *SurveyUpdateOne) sqlSave(ctx context.Context) (_node *Survey, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(survey.Table, survey.Columns, sqlgraph.NewFieldSpec(survey.FieldID, field.TypeInt64))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "Survey.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, survey.FieldID)
		for _, f := range fields {
			if !survey.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != survey.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.CreatedBy(); ok {
		_spec.SetField(survey.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(survey.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.UpdatedBy(); ok {
		_spec.SetField(survey.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(survey.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(survey.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(survey.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Title(); ok {
		_spec.SetField(survey.FieldTitle, field.TypeString, value)
	}
	if value, ok := suo.mutation.StartedAt(); ok {
		_spec.SetField(survey.FieldStartedAt, field.TypeTime, value)
	}
	if suo.mutation.StartedAtCleared() {
		_spec.ClearField(survey.FieldStartedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.EndedAt(); ok {
		_spec.SetField(survey.FieldEndedAt, field.TypeTime, value)
	}
	if suo.mutation.EndedAtCleared() {
		_spec.ClearField(survey.FieldEndedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.SortNum(); ok {
		_spec.SetField(survey.FieldSortNum, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedSortNum(); ok {
		_spec.AddField(survey.FieldSortNum, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.Group(); ok {
		_spec.SetField(survey.FieldGroup, field.TypeString, value)
	}
	if value, ok := suo.mutation.GiftCepAmount(); ok {
		_spec.SetField(survey.FieldGiftCepAmount, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedGiftCepAmount(); ok {
		_spec.AddField(survey.FieldGiftCepAmount, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.GiftType(); ok {
		_spec.SetField(survey.FieldGiftType, field.TypeEnum, value)
	}
	if value, ok := suo.mutation.Hint(); ok {
		_spec.SetField(survey.FieldHint, field.TypeString, value)
	}
	if value, ok := suo.mutation.Desc(); ok {
		_spec.SetField(survey.FieldDesc, field.TypeString, value)
	}
	if value, ok := suo.mutation.IsGiftRecharge(); ok {
		_spec.SetField(survey.FieldIsGiftRecharge, field.TypeBool, value)
	}
	if value, ok := suo.mutation.BackgroundImage(); ok {
		_spec.SetField(survey.FieldBackgroundImage, field.TypeString, value)
	}
	if suo.mutation.SurveyQuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   survey.SurveyQuestionsTable,
			Columns: []string{survey.SurveyQuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyquestion.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedSurveyQuestionsIDs(); len(nodes) > 0 && !suo.mutation.SurveyQuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   survey.SurveyQuestionsTable,
			Columns: []string{survey.SurveyQuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyquestion.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SurveyQuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   survey.SurveyQuestionsTable,
			Columns: []string{survey.SurveyQuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyquestion.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.SurveyResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   survey.SurveyResponsesTable,
			Columns: []string{survey.SurveyResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyresponse.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedSurveyResponsesIDs(); len(nodes) > 0 && !suo.mutation.SurveyResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   survey.SurveyResponsesTable,
			Columns: []string{survey.SurveyResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyresponse.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SurveyResponsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   survey.SurveyResponsesTable,
			Columns: []string{survey.SurveyResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyresponse.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(suo.modifiers...)
	_node = &Survey{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{survey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
