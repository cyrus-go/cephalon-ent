// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/missiontype"
	"cephalon-ent/pkg/enums"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MissionTypeCreate is the builder for creating a MissionType entity.
type MissionTypeCreate struct {
	config
	mutation *MissionTypeMutation
	hooks    []Hook
}

// SetCreatedBy sets the "created_by" field.
func (mtc *MissionTypeCreate) SetCreatedBy(i int64) *MissionTypeCreate {
	mtc.mutation.SetCreatedBy(i)
	return mtc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mtc *MissionTypeCreate) SetNillableCreatedBy(i *int64) *MissionTypeCreate {
	if i != nil {
		mtc.SetCreatedBy(*i)
	}
	return mtc
}

// SetUpdatedBy sets the "updated_by" field.
func (mtc *MissionTypeCreate) SetUpdatedBy(i int64) *MissionTypeCreate {
	mtc.mutation.SetUpdatedBy(i)
	return mtc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mtc *MissionTypeCreate) SetNillableUpdatedBy(i *int64) *MissionTypeCreate {
	if i != nil {
		mtc.SetUpdatedBy(*i)
	}
	return mtc
}

// SetCreatedAt sets the "created_at" field.
func (mtc *MissionTypeCreate) SetCreatedAt(t time.Time) *MissionTypeCreate {
	mtc.mutation.SetCreatedAt(t)
	return mtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mtc *MissionTypeCreate) SetNillableCreatedAt(t *time.Time) *MissionTypeCreate {
	if t != nil {
		mtc.SetCreatedAt(*t)
	}
	return mtc
}

// SetUpdatedAt sets the "updated_at" field.
func (mtc *MissionTypeCreate) SetUpdatedAt(t time.Time) *MissionTypeCreate {
	mtc.mutation.SetUpdatedAt(t)
	return mtc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mtc *MissionTypeCreate) SetNillableUpdatedAt(t *time.Time) *MissionTypeCreate {
	if t != nil {
		mtc.SetUpdatedAt(*t)
	}
	return mtc
}

// SetDeletedAt sets the "deleted_at" field.
func (mtc *MissionTypeCreate) SetDeletedAt(t time.Time) *MissionTypeCreate {
	mtc.mutation.SetDeletedAt(t)
	return mtc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mtc *MissionTypeCreate) SetNillableDeletedAt(t *time.Time) *MissionTypeCreate {
	if t != nil {
		mtc.SetDeletedAt(*t)
	}
	return mtc
}

// SetType sets the "type" field.
func (mtc *MissionTypeCreate) SetType(et enums.MissionType) *MissionTypeCreate {
	mtc.mutation.SetType(et)
	return mtc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mtc *MissionTypeCreate) SetNillableType(et *enums.MissionType) *MissionTypeCreate {
	if et != nil {
		mtc.SetType(*et)
	}
	return mtc
}

// SetGpu sets the "gpu" field.
func (mtc *MissionTypeCreate) SetGpu(e enums.GPU) *MissionTypeCreate {
	mtc.mutation.SetGpu(e)
	return mtc
}

// SetNillableGpu sets the "gpu" field if the given value is not nil.
func (mtc *MissionTypeCreate) SetNillableGpu(e *enums.GPU) *MissionTypeCreate {
	if e != nil {
		mtc.SetGpu(*e)
	}
	return mtc
}

// SetCep sets the "cep" field.
func (mtc *MissionTypeCreate) SetCep(i int64) *MissionTypeCreate {
	mtc.mutation.SetCep(i)
	return mtc
}

// SetNillableCep sets the "cep" field if the given value is not nil.
func (mtc *MissionTypeCreate) SetNillableCep(i *int64) *MissionTypeCreate {
	if i != nil {
		mtc.SetCep(*i)
	}
	return mtc
}

// SetIsTime sets the "is_time" field.
func (mtc *MissionTypeCreate) SetIsTime(b bool) *MissionTypeCreate {
	mtc.mutation.SetIsTime(b)
	return mtc
}

// SetNillableIsTime sets the "is_time" field if the given value is not nil.
func (mtc *MissionTypeCreate) SetNillableIsTime(b *bool) *MissionTypeCreate {
	if b != nil {
		mtc.SetIsTime(*b)
	}
	return mtc
}

// SetCategory sets the "category" field.
func (mtc *MissionTypeCreate) SetCategory(ec enums.MissionCategory) *MissionTypeCreate {
	mtc.mutation.SetCategory(ec)
	return mtc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (mtc *MissionTypeCreate) SetNillableCategory(ec *enums.MissionCategory) *MissionTypeCreate {
	if ec != nil {
		mtc.SetCategory(*ec)
	}
	return mtc
}

// SetID sets the "id" field.
func (mtc *MissionTypeCreate) SetID(i int64) *MissionTypeCreate {
	mtc.mutation.SetID(i)
	return mtc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mtc *MissionTypeCreate) SetNillableID(i *int64) *MissionTypeCreate {
	if i != nil {
		mtc.SetID(*i)
	}
	return mtc
}

// Mutation returns the MissionTypeMutation object of the builder.
func (mtc *MissionTypeCreate) Mutation() *MissionTypeMutation {
	return mtc.mutation
}

// Save creates the MissionType in the database.
func (mtc *MissionTypeCreate) Save(ctx context.Context) (*MissionType, error) {
	mtc.defaults()
	return withHooks(ctx, mtc.sqlSave, mtc.mutation, mtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mtc *MissionTypeCreate) SaveX(ctx context.Context) *MissionType {
	v, err := mtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mtc *MissionTypeCreate) Exec(ctx context.Context) error {
	_, err := mtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtc *MissionTypeCreate) ExecX(ctx context.Context) {
	if err := mtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mtc *MissionTypeCreate) defaults() {
	if _, ok := mtc.mutation.CreatedBy(); !ok {
		v := missiontype.DefaultCreatedBy
		mtc.mutation.SetCreatedBy(v)
	}
	if _, ok := mtc.mutation.UpdatedBy(); !ok {
		v := missiontype.DefaultUpdatedBy
		mtc.mutation.SetUpdatedBy(v)
	}
	if _, ok := mtc.mutation.CreatedAt(); !ok {
		v := missiontype.DefaultCreatedAt()
		mtc.mutation.SetCreatedAt(v)
	}
	if _, ok := mtc.mutation.UpdatedAt(); !ok {
		v := missiontype.DefaultUpdatedAt()
		mtc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mtc.mutation.DeletedAt(); !ok {
		v := missiontype.DefaultDeletedAt
		mtc.mutation.SetDeletedAt(v)
	}
	if _, ok := mtc.mutation.GetType(); !ok {
		v := missiontype.DefaultType
		mtc.mutation.SetType(v)
	}
	if _, ok := mtc.mutation.Gpu(); !ok {
		v := missiontype.DefaultGpu
		mtc.mutation.SetGpu(v)
	}
	if _, ok := mtc.mutation.Cep(); !ok {
		v := missiontype.DefaultCep
		mtc.mutation.SetCep(v)
	}
	if _, ok := mtc.mutation.IsTime(); !ok {
		v := missiontype.DefaultIsTime
		mtc.mutation.SetIsTime(v)
	}
	if _, ok := mtc.mutation.Category(); !ok {
		v := missiontype.DefaultCategory
		mtc.mutation.SetCategory(v)
	}
	if _, ok := mtc.mutation.ID(); !ok {
		v := missiontype.DefaultID()
		mtc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mtc *MissionTypeCreate) check() error {
	if _, ok := mtc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "MissionType.created_by"`)}
	}
	if _, ok := mtc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "MissionType.updated_by"`)}
	}
	if _, ok := mtc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "MissionType.created_at"`)}
	}
	if _, ok := mtc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "MissionType.updated_at"`)}
	}
	if _, ok := mtc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "MissionType.deleted_at"`)}
	}
	if _, ok := mtc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`cep_ent: missing required field "MissionType.type"`)}
	}
	if v, ok := mtc.mutation.GetType(); ok {
		if err := missiontype.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "MissionType.type": %w`, err)}
		}
	}
	if _, ok := mtc.mutation.Gpu(); !ok {
		return &ValidationError{Name: "gpu", err: errors.New(`cep_ent: missing required field "MissionType.gpu"`)}
	}
	if v, ok := mtc.mutation.Gpu(); ok {
		if err := missiontype.GpuValidator(v); err != nil {
			return &ValidationError{Name: "gpu", err: fmt.Errorf(`cep_ent: validator failed for field "MissionType.gpu": %w`, err)}
		}
	}
	if _, ok := mtc.mutation.Cep(); !ok {
		return &ValidationError{Name: "cep", err: errors.New(`cep_ent: missing required field "MissionType.cep"`)}
	}
	if _, ok := mtc.mutation.IsTime(); !ok {
		return &ValidationError{Name: "is_time", err: errors.New(`cep_ent: missing required field "MissionType.is_time"`)}
	}
	if _, ok := mtc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`cep_ent: missing required field "MissionType.category"`)}
	}
	if v, ok := mtc.mutation.Category(); ok {
		if err := missiontype.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`cep_ent: validator failed for field "MissionType.category": %w`, err)}
		}
	}
	return nil
}

func (mtc *MissionTypeCreate) sqlSave(ctx context.Context) (*MissionType, error) {
	if err := mtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	mtc.mutation.id = &_node.ID
	mtc.mutation.done = true
	return _node, nil
}

func (mtc *MissionTypeCreate) createSpec() (*MissionType, *sqlgraph.CreateSpec) {
	var (
		_node = &MissionType{config: mtc.config}
		_spec = sqlgraph.NewCreateSpec(missiontype.Table, sqlgraph.NewFieldSpec(missiontype.FieldID, field.TypeInt64))
	)
	if id, ok := mtc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mtc.mutation.CreatedBy(); ok {
		_spec.SetField(missiontype.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := mtc.mutation.UpdatedBy(); ok {
		_spec.SetField(missiontype.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := mtc.mutation.CreatedAt(); ok {
		_spec.SetField(missiontype.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mtc.mutation.UpdatedAt(); ok {
		_spec.SetField(missiontype.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mtc.mutation.DeletedAt(); ok {
		_spec.SetField(missiontype.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := mtc.mutation.GetType(); ok {
		_spec.SetField(missiontype.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := mtc.mutation.Gpu(); ok {
		_spec.SetField(missiontype.FieldGpu, field.TypeEnum, value)
		_node.Gpu = value
	}
	if value, ok := mtc.mutation.Cep(); ok {
		_spec.SetField(missiontype.FieldCep, field.TypeInt64, value)
		_node.Cep = value
	}
	if value, ok := mtc.mutation.IsTime(); ok {
		_spec.SetField(missiontype.FieldIsTime, field.TypeBool, value)
		_node.IsTime = value
	}
	if value, ok := mtc.mutation.Category(); ok {
		_spec.SetField(missiontype.FieldCategory, field.TypeEnum, value)
		_node.Category = value
	}
	return _node, _spec
}

// MissionTypeCreateBulk is the builder for creating many MissionType entities in bulk.
type MissionTypeCreateBulk struct {
	config
	builders []*MissionTypeCreate
}

// Save creates the MissionType entities in the database.
func (mtcb *MissionTypeCreateBulk) Save(ctx context.Context) ([]*MissionType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mtcb.builders))
	nodes := make([]*MissionType, len(mtcb.builders))
	mutators := make([]Mutator, len(mtcb.builders))
	for i := range mtcb.builders {
		func(i int, root context.Context) {
			builder := mtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MissionTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mtcb *MissionTypeCreateBulk) SaveX(ctx context.Context) []*MissionType {
	v, err := mtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mtcb *MissionTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := mtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtcb *MissionTypeCreateBulk) ExecX(ctx context.Context) {
	if err := mtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
