// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionproduction"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// MissionProductionDelete is the builder for deleting a MissionProduction entity.
type MissionProductionDelete struct {
	config
	hooks    []Hook
	mutation *MissionProductionMutation
}

// Where appends a list predicates to the MissionProductionDelete builder.
func (mpd *MissionProductionDelete) Where(ps ...predicate.MissionProduction) *MissionProductionDelete {
	mpd.mutation.Where(ps...)
	return mpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mpd *MissionProductionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, mpd.sqlExec, mpd.mutation, mpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mpd *MissionProductionDelete) ExecX(ctx context.Context) int {
	n, err := mpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mpd *MissionProductionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(missionproduction.Table, sqlgraph.NewFieldSpec(missionproduction.FieldID, field.TypeInt64))
	if ps := mpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mpd.mutation.done = true
	return affected, err
}

// MissionProductionDeleteOne is the builder for deleting a single MissionProduction entity.
type MissionProductionDeleteOne struct {
	mpd *MissionProductionDelete
}

// Where appends a list predicates to the MissionProductionDelete builder.
func (mpdo *MissionProductionDeleteOne) Where(ps ...predicate.MissionProduction) *MissionProductionDeleteOne {
	mpdo.mpd.mutation.Where(ps...)
	return mpdo
}

// Exec executes the deletion query.
func (mpdo *MissionProductionDeleteOne) Exec(ctx context.Context) error {
	n, err := mpdo.mpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{missionproduction.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mpdo *MissionProductionDeleteOne) ExecX(ctx context.Context) {
	if err := mpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
