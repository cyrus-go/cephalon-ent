// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/clientversion"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// 客户端版本，OTA 服务端功能支持
type ClientVersion struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建者 ID
	CreatedBy int64 `json:"created_by,string"`
	// 更新者 ID
	UpdatedBy int64 `json:"updated_by,string"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// 客户端文件地址
	ClientURL string `json:"client_url"`
	// 主配置文件地址
	ConfigURL string `json:"config_url"`
	// 版本号
	Version string `json:"version"`
	// 状态：只允许有一条数据的状态为启用（可被自动更新的版本）
	Status       enums.ClientStatus `json:"status"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ClientVersion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case clientversion.FieldID, clientversion.FieldCreatedBy, clientversion.FieldUpdatedBy:
			values[i] = new(sql.NullInt64)
		case clientversion.FieldClientURL, clientversion.FieldConfigURL, clientversion.FieldVersion, clientversion.FieldStatus:
			values[i] = new(sql.NullString)
		case clientversion.FieldCreatedAt, clientversion.FieldUpdatedAt, clientversion.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ClientVersion fields.
func (cv *ClientVersion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case clientversion.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cv.ID = int64(value.Int64)
		case clientversion.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				cv.CreatedBy = value.Int64
			}
		case clientversion.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				cv.UpdatedBy = value.Int64
			}
		case clientversion.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cv.CreatedAt = value.Time
			}
		case clientversion.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cv.UpdatedAt = value.Time
			}
		case clientversion.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				cv.DeletedAt = value.Time
			}
		case clientversion.FieldClientURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_url", values[i])
			} else if value.Valid {
				cv.ClientURL = value.String
			}
		case clientversion.FieldConfigURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field config_url", values[i])
			} else if value.Valid {
				cv.ConfigURL = value.String
			}
		case clientversion.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				cv.Version = value.String
			}
		case clientversion.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				cv.Status = enums.ClientStatus(value.String)
			}
		default:
			cv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ClientVersion.
// This includes values selected through modifiers, order, etc.
func (cv *ClientVersion) Value(name string) (ent.Value, error) {
	return cv.selectValues.Get(name)
}

// Update returns a builder for updating this ClientVersion.
// Note that you need to call ClientVersion.Unwrap() before calling this method if this ClientVersion
// was returned from a transaction, and the transaction was committed or rolled back.
func (cv *ClientVersion) Update() *ClientVersionUpdateOne {
	return NewClientVersionClient(cv.config).UpdateOne(cv)
}

// Unwrap unwraps the ClientVersion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cv *ClientVersion) Unwrap() *ClientVersion {
	_tx, ok := cv.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: ClientVersion is not a transactional entity")
	}
	cv.config.driver = _tx.drv
	return cv
}

// String implements the fmt.Stringer.
func (cv *ClientVersion) String() string {
	var builder strings.Builder
	builder.WriteString("ClientVersion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cv.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", cv.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", cv.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cv.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cv.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(cv.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("client_url=")
	builder.WriteString(cv.ClientURL)
	builder.WriteString(", ")
	builder.WriteString("config_url=")
	builder.WriteString(cv.ConfigURL)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(cv.Version)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", cv.Status))
	builder.WriteByte(')')
	return builder.String()
}

// ClientVersions is a parsable slice of ClientVersion.
type ClientVersions []*ClientVersion
