// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/hmackeypair"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/mission"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionkeypair"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// HmacKeyPairQuery is the builder for querying HmacKeyPair entities.
type HmacKeyPairQuery struct {
	config
	ctx                 *QueryContext
	order               []hmackeypair.OrderOption
	inters              []Interceptor
	predicates          []predicate.HmacKeyPair
	withMissionKeyPairs *MissionKeyPairQuery
	withCreatedMissions *MissionQuery
	modifiers           []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HmacKeyPairQuery builder.
func (hkpq *HmacKeyPairQuery) Where(ps ...predicate.HmacKeyPair) *HmacKeyPairQuery {
	hkpq.predicates = append(hkpq.predicates, ps...)
	return hkpq
}

// Limit the number of records to be returned by this query.
func (hkpq *HmacKeyPairQuery) Limit(limit int) *HmacKeyPairQuery {
	hkpq.ctx.Limit = &limit
	return hkpq
}

// Offset to start from.
func (hkpq *HmacKeyPairQuery) Offset(offset int) *HmacKeyPairQuery {
	hkpq.ctx.Offset = &offset
	return hkpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (hkpq *HmacKeyPairQuery) Unique(unique bool) *HmacKeyPairQuery {
	hkpq.ctx.Unique = &unique
	return hkpq
}

// Order specifies how the records should be ordered.
func (hkpq *HmacKeyPairQuery) Order(o ...hmackeypair.OrderOption) *HmacKeyPairQuery {
	hkpq.order = append(hkpq.order, o...)
	return hkpq
}

// QueryMissionKeyPairs chains the current query on the "mission_key_pairs" edge.
func (hkpq *HmacKeyPairQuery) QueryMissionKeyPairs() *MissionKeyPairQuery {
	query := (&MissionKeyPairClient{config: hkpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hkpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hkpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hmackeypair.Table, hmackeypair.FieldID, selector),
			sqlgraph.To(missionkeypair.Table, missionkeypair.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hmackeypair.MissionKeyPairsTable, hmackeypair.MissionKeyPairsColumn),
		)
		fromU = sqlgraph.SetNeighbors(hkpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreatedMissions chains the current query on the "created_missions" edge.
func (hkpq *HmacKeyPairQuery) QueryCreatedMissions() *MissionQuery {
	query := (&MissionClient{config: hkpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hkpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hkpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hmackeypair.Table, hmackeypair.FieldID, selector),
			sqlgraph.To(mission.Table, mission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hmackeypair.CreatedMissionsTable, hmackeypair.CreatedMissionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(hkpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first HmacKeyPair entity from the query.
// Returns a *NotFoundError when no HmacKeyPair was found.
func (hkpq *HmacKeyPairQuery) First(ctx context.Context) (*HmacKeyPair, error) {
	nodes, err := hkpq.Limit(1).All(setContextOp(ctx, hkpq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{hmackeypair.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (hkpq *HmacKeyPairQuery) FirstX(ctx context.Context) *HmacKeyPair {
	node, err := hkpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first HmacKeyPair ID from the query.
// Returns a *NotFoundError when no HmacKeyPair ID was found.
func (hkpq *HmacKeyPairQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = hkpq.Limit(1).IDs(setContextOp(ctx, hkpq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{hmackeypair.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (hkpq *HmacKeyPairQuery) FirstIDX(ctx context.Context) int64 {
	id, err := hkpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single HmacKeyPair entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one HmacKeyPair entity is found.
// Returns a *NotFoundError when no HmacKeyPair entities are found.
func (hkpq *HmacKeyPairQuery) Only(ctx context.Context) (*HmacKeyPair, error) {
	nodes, err := hkpq.Limit(2).All(setContextOp(ctx, hkpq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{hmackeypair.Label}
	default:
		return nil, &NotSingularError{hmackeypair.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (hkpq *HmacKeyPairQuery) OnlyX(ctx context.Context) *HmacKeyPair {
	node, err := hkpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only HmacKeyPair ID in the query.
// Returns a *NotSingularError when more than one HmacKeyPair ID is found.
// Returns a *NotFoundError when no entities are found.
func (hkpq *HmacKeyPairQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = hkpq.Limit(2).IDs(setContextOp(ctx, hkpq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{hmackeypair.Label}
	default:
		err = &NotSingularError{hmackeypair.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (hkpq *HmacKeyPairQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := hkpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of HmacKeyPairs.
func (hkpq *HmacKeyPairQuery) All(ctx context.Context) ([]*HmacKeyPair, error) {
	ctx = setContextOp(ctx, hkpq.ctx, "All")
	if err := hkpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*HmacKeyPair, *HmacKeyPairQuery]()
	return withInterceptors[[]*HmacKeyPair](ctx, hkpq, qr, hkpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (hkpq *HmacKeyPairQuery) AllX(ctx context.Context) []*HmacKeyPair {
	nodes, err := hkpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of HmacKeyPair IDs.
func (hkpq *HmacKeyPairQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if hkpq.ctx.Unique == nil && hkpq.path != nil {
		hkpq.Unique(true)
	}
	ctx = setContextOp(ctx, hkpq.ctx, "IDs")
	if err = hkpq.Select(hmackeypair.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (hkpq *HmacKeyPairQuery) IDsX(ctx context.Context) []int64 {
	ids, err := hkpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (hkpq *HmacKeyPairQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, hkpq.ctx, "Count")
	if err := hkpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, hkpq, querierCount[*HmacKeyPairQuery](), hkpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (hkpq *HmacKeyPairQuery) CountX(ctx context.Context) int {
	count, err := hkpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (hkpq *HmacKeyPairQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, hkpq.ctx, "Exist")
	switch _, err := hkpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("cep_ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (hkpq *HmacKeyPairQuery) ExistX(ctx context.Context) bool {
	exist, err := hkpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HmacKeyPairQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (hkpq *HmacKeyPairQuery) Clone() *HmacKeyPairQuery {
	if hkpq == nil {
		return nil
	}
	return &HmacKeyPairQuery{
		config:              hkpq.config,
		ctx:                 hkpq.ctx.Clone(),
		order:               append([]hmackeypair.OrderOption{}, hkpq.order...),
		inters:              append([]Interceptor{}, hkpq.inters...),
		predicates:          append([]predicate.HmacKeyPair{}, hkpq.predicates...),
		withMissionKeyPairs: hkpq.withMissionKeyPairs.Clone(),
		withCreatedMissions: hkpq.withCreatedMissions.Clone(),
		// clone intermediate query.
		sql:  hkpq.sql.Clone(),
		path: hkpq.path,
	}
}

// WithMissionKeyPairs tells the query-builder to eager-load the nodes that are connected to
// the "mission_key_pairs" edge. The optional arguments are used to configure the query builder of the edge.
func (hkpq *HmacKeyPairQuery) WithMissionKeyPairs(opts ...func(*MissionKeyPairQuery)) *HmacKeyPairQuery {
	query := (&MissionKeyPairClient{config: hkpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hkpq.withMissionKeyPairs = query
	return hkpq
}

// WithCreatedMissions tells the query-builder to eager-load the nodes that are connected to
// the "created_missions" edge. The optional arguments are used to configure the query builder of the edge.
func (hkpq *HmacKeyPairQuery) WithCreatedMissions(opts ...func(*MissionQuery)) *HmacKeyPairQuery {
	query := (&MissionClient{config: hkpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hkpq.withCreatedMissions = query
	return hkpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.HmacKeyPair.Query().
//		GroupBy(hmackeypair.FieldCreatedBy).
//		Aggregate(cep_ent.Count()).
//		Scan(ctx, &v)
func (hkpq *HmacKeyPairQuery) GroupBy(field string, fields ...string) *HmacKeyPairGroupBy {
	hkpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &HmacKeyPairGroupBy{build: hkpq}
	grbuild.flds = &hkpq.ctx.Fields
	grbuild.label = hmackeypair.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by"`
//	}
//
//	client.HmacKeyPair.Query().
//		Select(hmackeypair.FieldCreatedBy).
//		Scan(ctx, &v)
func (hkpq *HmacKeyPairQuery) Select(fields ...string) *HmacKeyPairSelect {
	hkpq.ctx.Fields = append(hkpq.ctx.Fields, fields...)
	sbuild := &HmacKeyPairSelect{HmacKeyPairQuery: hkpq}
	sbuild.label = hmackeypair.Label
	sbuild.flds, sbuild.scan = &hkpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a HmacKeyPairSelect configured with the given aggregations.
func (hkpq *HmacKeyPairQuery) Aggregate(fns ...AggregateFunc) *HmacKeyPairSelect {
	return hkpq.Select().Aggregate(fns...)
}

func (hkpq *HmacKeyPairQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range hkpq.inters {
		if inter == nil {
			return fmt.Errorf("cep_ent: uninitialized interceptor (forgotten import cep_ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, hkpq); err != nil {
				return err
			}
		}
	}
	for _, f := range hkpq.ctx.Fields {
		if !hmackeypair.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
		}
	}
	if hkpq.path != nil {
		prev, err := hkpq.path(ctx)
		if err != nil {
			return err
		}
		hkpq.sql = prev
	}
	return nil
}

func (hkpq *HmacKeyPairQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*HmacKeyPair, error) {
	var (
		nodes       = []*HmacKeyPair{}
		_spec       = hkpq.querySpec()
		loadedTypes = [2]bool{
			hkpq.withMissionKeyPairs != nil,
			hkpq.withCreatedMissions != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*HmacKeyPair).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &HmacKeyPair{config: hkpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(hkpq.modifiers) > 0 {
		_spec.Modifiers = hkpq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, hkpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := hkpq.withMissionKeyPairs; query != nil {
		if err := hkpq.loadMissionKeyPairs(ctx, query, nodes,
			func(n *HmacKeyPair) { n.Edges.MissionKeyPairs = []*MissionKeyPair{} },
			func(n *HmacKeyPair, e *MissionKeyPair) { n.Edges.MissionKeyPairs = append(n.Edges.MissionKeyPairs, e) }); err != nil {
			return nil, err
		}
	}
	if query := hkpq.withCreatedMissions; query != nil {
		if err := hkpq.loadCreatedMissions(ctx, query, nodes,
			func(n *HmacKeyPair) { n.Edges.CreatedMissions = []*Mission{} },
			func(n *HmacKeyPair, e *Mission) { n.Edges.CreatedMissions = append(n.Edges.CreatedMissions, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (hkpq *HmacKeyPairQuery) loadMissionKeyPairs(ctx context.Context, query *MissionKeyPairQuery, nodes []*HmacKeyPair, init func(*HmacKeyPair), assign func(*HmacKeyPair, *MissionKeyPair)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*HmacKeyPair)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(missionkeypair.FieldKeyPairID)
	}
	query.Where(predicate.MissionKeyPair(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(hmackeypair.MissionKeyPairsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.KeyPairID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "key_pair_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (hkpq *HmacKeyPairQuery) loadCreatedMissions(ctx context.Context, query *MissionQuery, nodes []*HmacKeyPair, init func(*HmacKeyPair), assign func(*HmacKeyPair, *Mission)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*HmacKeyPair)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(mission.FieldKeyPairID)
	}
	query.Where(predicate.Mission(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(hmackeypair.CreatedMissionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.KeyPairID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "key_pair_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (hkpq *HmacKeyPairQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := hkpq.querySpec()
	if len(hkpq.modifiers) > 0 {
		_spec.Modifiers = hkpq.modifiers
	}
	_spec.Node.Columns = hkpq.ctx.Fields
	if len(hkpq.ctx.Fields) > 0 {
		_spec.Unique = hkpq.ctx.Unique != nil && *hkpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, hkpq.driver, _spec)
}

func (hkpq *HmacKeyPairQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(hmackeypair.Table, hmackeypair.Columns, sqlgraph.NewFieldSpec(hmackeypair.FieldID, field.TypeInt64))
	_spec.From = hkpq.sql
	if unique := hkpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if hkpq.path != nil {
		_spec.Unique = true
	}
	if fields := hkpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hmackeypair.FieldID)
		for i := range fields {
			if fields[i] != hmackeypair.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := hkpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := hkpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := hkpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := hkpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (hkpq *HmacKeyPairQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(hkpq.driver.Dialect())
	t1 := builder.Table(hmackeypair.Table)
	columns := hkpq.ctx.Fields
	if len(columns) == 0 {
		columns = hmackeypair.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if hkpq.sql != nil {
		selector = hkpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if hkpq.ctx.Unique != nil && *hkpq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range hkpq.modifiers {
		m(selector)
	}
	for _, p := range hkpq.predicates {
		p(selector)
	}
	for _, p := range hkpq.order {
		p(selector)
	}
	if offset := hkpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := hkpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (hkpq *HmacKeyPairQuery) Modify(modifiers ...func(s *sql.Selector)) *HmacKeyPairSelect {
	hkpq.modifiers = append(hkpq.modifiers, modifiers...)
	return hkpq.Select()
}

// HmacKeyPairGroupBy is the group-by builder for HmacKeyPair entities.
type HmacKeyPairGroupBy struct {
	selector
	build *HmacKeyPairQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (hkpgb *HmacKeyPairGroupBy) Aggregate(fns ...AggregateFunc) *HmacKeyPairGroupBy {
	hkpgb.fns = append(hkpgb.fns, fns...)
	return hkpgb
}

// Scan applies the selector query and scans the result into the given value.
func (hkpgb *HmacKeyPairGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hkpgb.build.ctx, "GroupBy")
	if err := hkpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HmacKeyPairQuery, *HmacKeyPairGroupBy](ctx, hkpgb.build, hkpgb, hkpgb.build.inters, v)
}

func (hkpgb *HmacKeyPairGroupBy) sqlScan(ctx context.Context, root *HmacKeyPairQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(hkpgb.fns))
	for _, fn := range hkpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*hkpgb.flds)+len(hkpgb.fns))
		for _, f := range *hkpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*hkpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hkpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// HmacKeyPairSelect is the builder for selecting fields of HmacKeyPair entities.
type HmacKeyPairSelect struct {
	*HmacKeyPairQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (hkps *HmacKeyPairSelect) Aggregate(fns ...AggregateFunc) *HmacKeyPairSelect {
	hkps.fns = append(hkps.fns, fns...)
	return hkps
}

// Scan applies the selector query and scans the result into the given value.
func (hkps *HmacKeyPairSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hkps.ctx, "Select")
	if err := hkps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HmacKeyPairQuery, *HmacKeyPairSelect](ctx, hkps.HmacKeyPairQuery, hkps, hkps.inters, v)
}

func (hkps *HmacKeyPairSelect) sqlScan(ctx context.Context, root *HmacKeyPairQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(hkps.fns))
	for _, fn := range hkps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*hkps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hkps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (hkps *HmacKeyPairSelect) Modify(modifiers ...func(s *sql.Selector)) *HmacKeyPairSelect {
	hkps.modifiers = append(hkps.modifiers, modifiers...)
	return hkps
}
