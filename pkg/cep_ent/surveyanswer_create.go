// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/surveyanswer"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/surveyquestion"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/surveyresponse"
)

// SurveyAnswerCreate is the builder for creating a SurveyAnswer entity.
type SurveyAnswerCreate struct {
	config
	mutation *SurveyAnswerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (sac *SurveyAnswerCreate) SetCreatedBy(i int64) *SurveyAnswerCreate {
	sac.mutation.SetCreatedBy(i)
	return sac
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sac *SurveyAnswerCreate) SetNillableCreatedBy(i *int64) *SurveyAnswerCreate {
	if i != nil {
		sac.SetCreatedBy(*i)
	}
	return sac
}

// SetUpdatedBy sets the "updated_by" field.
func (sac *SurveyAnswerCreate) SetUpdatedBy(i int64) *SurveyAnswerCreate {
	sac.mutation.SetUpdatedBy(i)
	return sac
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sac *SurveyAnswerCreate) SetNillableUpdatedBy(i *int64) *SurveyAnswerCreate {
	if i != nil {
		sac.SetUpdatedBy(*i)
	}
	return sac
}

// SetCreatedAt sets the "created_at" field.
func (sac *SurveyAnswerCreate) SetCreatedAt(t time.Time) *SurveyAnswerCreate {
	sac.mutation.SetCreatedAt(t)
	return sac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sac *SurveyAnswerCreate) SetNillableCreatedAt(t *time.Time) *SurveyAnswerCreate {
	if t != nil {
		sac.SetCreatedAt(*t)
	}
	return sac
}

// SetUpdatedAt sets the "updated_at" field.
func (sac *SurveyAnswerCreate) SetUpdatedAt(t time.Time) *SurveyAnswerCreate {
	sac.mutation.SetUpdatedAt(t)
	return sac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sac *SurveyAnswerCreate) SetNillableUpdatedAt(t *time.Time) *SurveyAnswerCreate {
	if t != nil {
		sac.SetUpdatedAt(*t)
	}
	return sac
}

// SetDeletedAt sets the "deleted_at" field.
func (sac *SurveyAnswerCreate) SetDeletedAt(t time.Time) *SurveyAnswerCreate {
	sac.mutation.SetDeletedAt(t)
	return sac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sac *SurveyAnswerCreate) SetNillableDeletedAt(t *time.Time) *SurveyAnswerCreate {
	if t != nil {
		sac.SetDeletedAt(*t)
	}
	return sac
}

// SetSurveyResponseID sets the "survey_response_id" field.
func (sac *SurveyAnswerCreate) SetSurveyResponseID(i int64) *SurveyAnswerCreate {
	sac.mutation.SetSurveyResponseID(i)
	return sac
}

// SetNillableSurveyResponseID sets the "survey_response_id" field if the given value is not nil.
func (sac *SurveyAnswerCreate) SetNillableSurveyResponseID(i *int64) *SurveyAnswerCreate {
	if i != nil {
		sac.SetSurveyResponseID(*i)
	}
	return sac
}

// SetSurveyQuestionID sets the "survey_question_id" field.
func (sac *SurveyAnswerCreate) SetSurveyQuestionID(i int64) *SurveyAnswerCreate {
	sac.mutation.SetSurveyQuestionID(i)
	return sac
}

// SetNillableSurveyQuestionID sets the "survey_question_id" field if the given value is not nil.
func (sac *SurveyAnswerCreate) SetNillableSurveyQuestionID(i *int64) *SurveyAnswerCreate {
	if i != nil {
		sac.SetSurveyQuestionID(*i)
	}
	return sac
}

// SetSurveyAnswer sets the "survey_answer" field.
func (sac *SurveyAnswerCreate) SetSurveyAnswer(s string) *SurveyAnswerCreate {
	sac.mutation.SetSurveyAnswer(s)
	return sac
}

// SetNillableSurveyAnswer sets the "survey_answer" field if the given value is not nil.
func (sac *SurveyAnswerCreate) SetNillableSurveyAnswer(s *string) *SurveyAnswerCreate {
	if s != nil {
		sac.SetSurveyAnswer(*s)
	}
	return sac
}

// SetID sets the "id" field.
func (sac *SurveyAnswerCreate) SetID(i int64) *SurveyAnswerCreate {
	sac.mutation.SetID(i)
	return sac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sac *SurveyAnswerCreate) SetNillableID(i *int64) *SurveyAnswerCreate {
	if i != nil {
		sac.SetID(*i)
	}
	return sac
}

// SetSurveyResponse sets the "survey_response" edge to the SurveyResponse entity.
func (sac *SurveyAnswerCreate) SetSurveyResponse(s *SurveyResponse) *SurveyAnswerCreate {
	return sac.SetSurveyResponseID(s.ID)
}

// SetSurveyQuestion sets the "survey_question" edge to the SurveyQuestion entity.
func (sac *SurveyAnswerCreate) SetSurveyQuestion(s *SurveyQuestion) *SurveyAnswerCreate {
	return sac.SetSurveyQuestionID(s.ID)
}

// Mutation returns the SurveyAnswerMutation object of the builder.
func (sac *SurveyAnswerCreate) Mutation() *SurveyAnswerMutation {
	return sac.mutation
}

// Save creates the SurveyAnswer in the database.
func (sac *SurveyAnswerCreate) Save(ctx context.Context) (*SurveyAnswer, error) {
	sac.defaults()
	return withHooks(ctx, sac.sqlSave, sac.mutation, sac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sac *SurveyAnswerCreate) SaveX(ctx context.Context) *SurveyAnswer {
	v, err := sac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sac *SurveyAnswerCreate) Exec(ctx context.Context) error {
	_, err := sac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sac *SurveyAnswerCreate) ExecX(ctx context.Context) {
	if err := sac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sac *SurveyAnswerCreate) defaults() {
	if _, ok := sac.mutation.CreatedBy(); !ok {
		v := surveyanswer.DefaultCreatedBy
		sac.mutation.SetCreatedBy(v)
	}
	if _, ok := sac.mutation.UpdatedBy(); !ok {
		v := surveyanswer.DefaultUpdatedBy
		sac.mutation.SetUpdatedBy(v)
	}
	if _, ok := sac.mutation.CreatedAt(); !ok {
		v := surveyanswer.DefaultCreatedAt()
		sac.mutation.SetCreatedAt(v)
	}
	if _, ok := sac.mutation.UpdatedAt(); !ok {
		v := surveyanswer.DefaultUpdatedAt()
		sac.mutation.SetUpdatedAt(v)
	}
	if _, ok := sac.mutation.DeletedAt(); !ok {
		v := surveyanswer.DefaultDeletedAt
		sac.mutation.SetDeletedAt(v)
	}
	if _, ok := sac.mutation.SurveyResponseID(); !ok {
		v := surveyanswer.DefaultSurveyResponseID
		sac.mutation.SetSurveyResponseID(v)
	}
	if _, ok := sac.mutation.SurveyQuestionID(); !ok {
		v := surveyanswer.DefaultSurveyQuestionID
		sac.mutation.SetSurveyQuestionID(v)
	}
	if _, ok := sac.mutation.SurveyAnswer(); !ok {
		v := surveyanswer.DefaultSurveyAnswer
		sac.mutation.SetSurveyAnswer(v)
	}
	if _, ok := sac.mutation.ID(); !ok {
		v := surveyanswer.DefaultID()
		sac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sac *SurveyAnswerCreate) check() error {
	if _, ok := sac.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "SurveyAnswer.created_by"`)}
	}
	if _, ok := sac.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "SurveyAnswer.updated_by"`)}
	}
	if _, ok := sac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "SurveyAnswer.created_at"`)}
	}
	if _, ok := sac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "SurveyAnswer.updated_at"`)}
	}
	if _, ok := sac.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "SurveyAnswer.deleted_at"`)}
	}
	if _, ok := sac.mutation.SurveyResponseID(); !ok {
		return &ValidationError{Name: "survey_response_id", err: errors.New(`cep_ent: missing required field "SurveyAnswer.survey_response_id"`)}
	}
	if _, ok := sac.mutation.SurveyQuestionID(); !ok {
		return &ValidationError{Name: "survey_question_id", err: errors.New(`cep_ent: missing required field "SurveyAnswer.survey_question_id"`)}
	}
	if _, ok := sac.mutation.SurveyAnswer(); !ok {
		return &ValidationError{Name: "survey_answer", err: errors.New(`cep_ent: missing required field "SurveyAnswer.survey_answer"`)}
	}
	if _, ok := sac.mutation.SurveyResponseID(); !ok {
		return &ValidationError{Name: "survey_response", err: errors.New(`cep_ent: missing required edge "SurveyAnswer.survey_response"`)}
	}
	if _, ok := sac.mutation.SurveyQuestionID(); !ok {
		return &ValidationError{Name: "survey_question", err: errors.New(`cep_ent: missing required edge "SurveyAnswer.survey_question"`)}
	}
	return nil
}

func (sac *SurveyAnswerCreate) sqlSave(ctx context.Context) (*SurveyAnswer, error) {
	if err := sac.check(); err != nil {
		return nil, err
	}
	_node, _spec := sac.createSpec()
	if err := sqlgraph.CreateNode(ctx, sac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	sac.mutation.id = &_node.ID
	sac.mutation.done = true
	return _node, nil
}

func (sac *SurveyAnswerCreate) createSpec() (*SurveyAnswer, *sqlgraph.CreateSpec) {
	var (
		_node = &SurveyAnswer{config: sac.config}
		_spec = sqlgraph.NewCreateSpec(surveyanswer.Table, sqlgraph.NewFieldSpec(surveyanswer.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = sac.conflict
	if id, ok := sac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sac.mutation.CreatedBy(); ok {
		_spec.SetField(surveyanswer.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := sac.mutation.UpdatedBy(); ok {
		_spec.SetField(surveyanswer.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := sac.mutation.CreatedAt(); ok {
		_spec.SetField(surveyanswer.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sac.mutation.UpdatedAt(); ok {
		_spec.SetField(surveyanswer.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sac.mutation.DeletedAt(); ok {
		_spec.SetField(surveyanswer.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := sac.mutation.SurveyAnswer(); ok {
		_spec.SetField(surveyanswer.FieldSurveyAnswer, field.TypeString, value)
		_node.SurveyAnswer = value
	}
	if nodes := sac.mutation.SurveyResponseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   surveyanswer.SurveyResponseTable,
			Columns: []string{surveyanswer.SurveyResponseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyresponse.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SurveyResponseID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sac.mutation.SurveyQuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   surveyanswer.SurveyQuestionTable,
			Columns: []string{surveyanswer.SurveyQuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyquestion.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SurveyQuestionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SurveyAnswer.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SurveyAnswerUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (sac *SurveyAnswerCreate) OnConflict(opts ...sql.ConflictOption) *SurveyAnswerUpsertOne {
	sac.conflict = opts
	return &SurveyAnswerUpsertOne{
		create: sac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SurveyAnswer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sac *SurveyAnswerCreate) OnConflictColumns(columns ...string) *SurveyAnswerUpsertOne {
	sac.conflict = append(sac.conflict, sql.ConflictColumns(columns...))
	return &SurveyAnswerUpsertOne{
		create: sac,
	}
}

type (
	// SurveyAnswerUpsertOne is the builder for "upsert"-ing
	//  one SurveyAnswer node.
	SurveyAnswerUpsertOne struct {
		create *SurveyAnswerCreate
	}

	// SurveyAnswerUpsert is the "OnConflict" setter.
	SurveyAnswerUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *SurveyAnswerUpsert) SetCreatedBy(v int64) *SurveyAnswerUpsert {
	u.Set(surveyanswer.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *SurveyAnswerUpsert) UpdateCreatedBy() *SurveyAnswerUpsert {
	u.SetExcluded(surveyanswer.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *SurveyAnswerUpsert) AddCreatedBy(v int64) *SurveyAnswerUpsert {
	u.Add(surveyanswer.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *SurveyAnswerUpsert) SetUpdatedBy(v int64) *SurveyAnswerUpsert {
	u.Set(surveyanswer.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *SurveyAnswerUpsert) UpdateUpdatedBy() *SurveyAnswerUpsert {
	u.SetExcluded(surveyanswer.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *SurveyAnswerUpsert) AddUpdatedBy(v int64) *SurveyAnswerUpsert {
	u.Add(surveyanswer.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SurveyAnswerUpsert) SetUpdatedAt(v time.Time) *SurveyAnswerUpsert {
	u.Set(surveyanswer.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SurveyAnswerUpsert) UpdateUpdatedAt() *SurveyAnswerUpsert {
	u.SetExcluded(surveyanswer.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SurveyAnswerUpsert) SetDeletedAt(v time.Time) *SurveyAnswerUpsert {
	u.Set(surveyanswer.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SurveyAnswerUpsert) UpdateDeletedAt() *SurveyAnswerUpsert {
	u.SetExcluded(surveyanswer.FieldDeletedAt)
	return u
}

// SetSurveyResponseID sets the "survey_response_id" field.
func (u *SurveyAnswerUpsert) SetSurveyResponseID(v int64) *SurveyAnswerUpsert {
	u.Set(surveyanswer.FieldSurveyResponseID, v)
	return u
}

// UpdateSurveyResponseID sets the "survey_response_id" field to the value that was provided on create.
func (u *SurveyAnswerUpsert) UpdateSurveyResponseID() *SurveyAnswerUpsert {
	u.SetExcluded(surveyanswer.FieldSurveyResponseID)
	return u
}

// SetSurveyQuestionID sets the "survey_question_id" field.
func (u *SurveyAnswerUpsert) SetSurveyQuestionID(v int64) *SurveyAnswerUpsert {
	u.Set(surveyanswer.FieldSurveyQuestionID, v)
	return u
}

// UpdateSurveyQuestionID sets the "survey_question_id" field to the value that was provided on create.
func (u *SurveyAnswerUpsert) UpdateSurveyQuestionID() *SurveyAnswerUpsert {
	u.SetExcluded(surveyanswer.FieldSurveyQuestionID)
	return u
}

// SetSurveyAnswer sets the "survey_answer" field.
func (u *SurveyAnswerUpsert) SetSurveyAnswer(v string) *SurveyAnswerUpsert {
	u.Set(surveyanswer.FieldSurveyAnswer, v)
	return u
}

// UpdateSurveyAnswer sets the "survey_answer" field to the value that was provided on create.
func (u *SurveyAnswerUpsert) UpdateSurveyAnswer() *SurveyAnswerUpsert {
	u.SetExcluded(surveyanswer.FieldSurveyAnswer)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SurveyAnswer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(surveyanswer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SurveyAnswerUpsertOne) UpdateNewValues() *SurveyAnswerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(surveyanswer.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(surveyanswer.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SurveyAnswer.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SurveyAnswerUpsertOne) Ignore() *SurveyAnswerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SurveyAnswerUpsertOne) DoNothing() *SurveyAnswerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SurveyAnswerCreate.OnConflict
// documentation for more info.
func (u *SurveyAnswerUpsertOne) Update(set func(*SurveyAnswerUpsert)) *SurveyAnswerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SurveyAnswerUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *SurveyAnswerUpsertOne) SetCreatedBy(v int64) *SurveyAnswerUpsertOne {
	return u.Update(func(s *SurveyAnswerUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *SurveyAnswerUpsertOne) AddCreatedBy(v int64) *SurveyAnswerUpsertOne {
	return u.Update(func(s *SurveyAnswerUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *SurveyAnswerUpsertOne) UpdateCreatedBy() *SurveyAnswerUpsertOne {
	return u.Update(func(s *SurveyAnswerUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *SurveyAnswerUpsertOne) SetUpdatedBy(v int64) *SurveyAnswerUpsertOne {
	return u.Update(func(s *SurveyAnswerUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *SurveyAnswerUpsertOne) AddUpdatedBy(v int64) *SurveyAnswerUpsertOne {
	return u.Update(func(s *SurveyAnswerUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *SurveyAnswerUpsertOne) UpdateUpdatedBy() *SurveyAnswerUpsertOne {
	return u.Update(func(s *SurveyAnswerUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SurveyAnswerUpsertOne) SetUpdatedAt(v time.Time) *SurveyAnswerUpsertOne {
	return u.Update(func(s *SurveyAnswerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SurveyAnswerUpsertOne) UpdateUpdatedAt() *SurveyAnswerUpsertOne {
	return u.Update(func(s *SurveyAnswerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SurveyAnswerUpsertOne) SetDeletedAt(v time.Time) *SurveyAnswerUpsertOne {
	return u.Update(func(s *SurveyAnswerUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SurveyAnswerUpsertOne) UpdateDeletedAt() *SurveyAnswerUpsertOne {
	return u.Update(func(s *SurveyAnswerUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetSurveyResponseID sets the "survey_response_id" field.
func (u *SurveyAnswerUpsertOne) SetSurveyResponseID(v int64) *SurveyAnswerUpsertOne {
	return u.Update(func(s *SurveyAnswerUpsert) {
		s.SetSurveyResponseID(v)
	})
}

// UpdateSurveyResponseID sets the "survey_response_id" field to the value that was provided on create.
func (u *SurveyAnswerUpsertOne) UpdateSurveyResponseID() *SurveyAnswerUpsertOne {
	return u.Update(func(s *SurveyAnswerUpsert) {
		s.UpdateSurveyResponseID()
	})
}

// SetSurveyQuestionID sets the "survey_question_id" field.
func (u *SurveyAnswerUpsertOne) SetSurveyQuestionID(v int64) *SurveyAnswerUpsertOne {
	return u.Update(func(s *SurveyAnswerUpsert) {
		s.SetSurveyQuestionID(v)
	})
}

// UpdateSurveyQuestionID sets the "survey_question_id" field to the value that was provided on create.
func (u *SurveyAnswerUpsertOne) UpdateSurveyQuestionID() *SurveyAnswerUpsertOne {
	return u.Update(func(s *SurveyAnswerUpsert) {
		s.UpdateSurveyQuestionID()
	})
}

// SetSurveyAnswer sets the "survey_answer" field.
func (u *SurveyAnswerUpsertOne) SetSurveyAnswer(v string) *SurveyAnswerUpsertOne {
	return u.Update(func(s *SurveyAnswerUpsert) {
		s.SetSurveyAnswer(v)
	})
}

// UpdateSurveyAnswer sets the "survey_answer" field to the value that was provided on create.
func (u *SurveyAnswerUpsertOne) UpdateSurveyAnswer() *SurveyAnswerUpsertOne {
	return u.Update(func(s *SurveyAnswerUpsert) {
		s.UpdateSurveyAnswer()
	})
}

// Exec executes the query.
func (u *SurveyAnswerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for SurveyAnswerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SurveyAnswerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SurveyAnswerUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SurveyAnswerUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SurveyAnswerCreateBulk is the builder for creating many SurveyAnswer entities in bulk.
type SurveyAnswerCreateBulk struct {
	config
	err      error
	builders []*SurveyAnswerCreate
	conflict []sql.ConflictOption
}

// Save creates the SurveyAnswer entities in the database.
func (sacb *SurveyAnswerCreateBulk) Save(ctx context.Context) ([]*SurveyAnswer, error) {
	if sacb.err != nil {
		return nil, sacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sacb.builders))
	nodes := make([]*SurveyAnswer, len(sacb.builders))
	mutators := make([]Mutator, len(sacb.builders))
	for i := range sacb.builders {
		func(i int, root context.Context) {
			builder := sacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SurveyAnswerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sacb *SurveyAnswerCreateBulk) SaveX(ctx context.Context) []*SurveyAnswer {
	v, err := sacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sacb *SurveyAnswerCreateBulk) Exec(ctx context.Context) error {
	_, err := sacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sacb *SurveyAnswerCreateBulk) ExecX(ctx context.Context) {
	if err := sacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SurveyAnswer.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SurveyAnswerUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (sacb *SurveyAnswerCreateBulk) OnConflict(opts ...sql.ConflictOption) *SurveyAnswerUpsertBulk {
	sacb.conflict = opts
	return &SurveyAnswerUpsertBulk{
		create: sacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SurveyAnswer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sacb *SurveyAnswerCreateBulk) OnConflictColumns(columns ...string) *SurveyAnswerUpsertBulk {
	sacb.conflict = append(sacb.conflict, sql.ConflictColumns(columns...))
	return &SurveyAnswerUpsertBulk{
		create: sacb,
	}
}

// SurveyAnswerUpsertBulk is the builder for "upsert"-ing
// a bulk of SurveyAnswer nodes.
type SurveyAnswerUpsertBulk struct {
	create *SurveyAnswerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SurveyAnswer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(surveyanswer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SurveyAnswerUpsertBulk) UpdateNewValues() *SurveyAnswerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(surveyanswer.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(surveyanswer.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SurveyAnswer.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SurveyAnswerUpsertBulk) Ignore() *SurveyAnswerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SurveyAnswerUpsertBulk) DoNothing() *SurveyAnswerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SurveyAnswerCreateBulk.OnConflict
// documentation for more info.
func (u *SurveyAnswerUpsertBulk) Update(set func(*SurveyAnswerUpsert)) *SurveyAnswerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SurveyAnswerUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *SurveyAnswerUpsertBulk) SetCreatedBy(v int64) *SurveyAnswerUpsertBulk {
	return u.Update(func(s *SurveyAnswerUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *SurveyAnswerUpsertBulk) AddCreatedBy(v int64) *SurveyAnswerUpsertBulk {
	return u.Update(func(s *SurveyAnswerUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *SurveyAnswerUpsertBulk) UpdateCreatedBy() *SurveyAnswerUpsertBulk {
	return u.Update(func(s *SurveyAnswerUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *SurveyAnswerUpsertBulk) SetUpdatedBy(v int64) *SurveyAnswerUpsertBulk {
	return u.Update(func(s *SurveyAnswerUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *SurveyAnswerUpsertBulk) AddUpdatedBy(v int64) *SurveyAnswerUpsertBulk {
	return u.Update(func(s *SurveyAnswerUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *SurveyAnswerUpsertBulk) UpdateUpdatedBy() *SurveyAnswerUpsertBulk {
	return u.Update(func(s *SurveyAnswerUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SurveyAnswerUpsertBulk) SetUpdatedAt(v time.Time) *SurveyAnswerUpsertBulk {
	return u.Update(func(s *SurveyAnswerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SurveyAnswerUpsertBulk) UpdateUpdatedAt() *SurveyAnswerUpsertBulk {
	return u.Update(func(s *SurveyAnswerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SurveyAnswerUpsertBulk) SetDeletedAt(v time.Time) *SurveyAnswerUpsertBulk {
	return u.Update(func(s *SurveyAnswerUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SurveyAnswerUpsertBulk) UpdateDeletedAt() *SurveyAnswerUpsertBulk {
	return u.Update(func(s *SurveyAnswerUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetSurveyResponseID sets the "survey_response_id" field.
func (u *SurveyAnswerUpsertBulk) SetSurveyResponseID(v int64) *SurveyAnswerUpsertBulk {
	return u.Update(func(s *SurveyAnswerUpsert) {
		s.SetSurveyResponseID(v)
	})
}

// UpdateSurveyResponseID sets the "survey_response_id" field to the value that was provided on create.
func (u *SurveyAnswerUpsertBulk) UpdateSurveyResponseID() *SurveyAnswerUpsertBulk {
	return u.Update(func(s *SurveyAnswerUpsert) {
		s.UpdateSurveyResponseID()
	})
}

// SetSurveyQuestionID sets the "survey_question_id" field.
func (u *SurveyAnswerUpsertBulk) SetSurveyQuestionID(v int64) *SurveyAnswerUpsertBulk {
	return u.Update(func(s *SurveyAnswerUpsert) {
		s.SetSurveyQuestionID(v)
	})
}

// UpdateSurveyQuestionID sets the "survey_question_id" field to the value that was provided on create.
func (u *SurveyAnswerUpsertBulk) UpdateSurveyQuestionID() *SurveyAnswerUpsertBulk {
	return u.Update(func(s *SurveyAnswerUpsert) {
		s.UpdateSurveyQuestionID()
	})
}

// SetSurveyAnswer sets the "survey_answer" field.
func (u *SurveyAnswerUpsertBulk) SetSurveyAnswer(v string) *SurveyAnswerUpsertBulk {
	return u.Update(func(s *SurveyAnswerUpsert) {
		s.SetSurveyAnswer(v)
	})
}

// UpdateSurveyAnswer sets the "survey_answer" field to the value that was provided on create.
func (u *SurveyAnswerUpsertBulk) UpdateSurveyAnswer() *SurveyAnswerUpsertBulk {
	return u.Update(func(s *SurveyAnswerUpsert) {
		s.UpdateSurveyAnswer()
	})
}

// Exec executes the query.
func (u *SurveyAnswerUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the SurveyAnswerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for SurveyAnswerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SurveyAnswerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
