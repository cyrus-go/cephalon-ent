// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/device"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/devicereboottime"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// DeviceRebootTimeQuery is the builder for querying DeviceRebootTime entities.
type DeviceRebootTimeQuery struct {
	config
	ctx        *QueryContext
	order      []devicereboottime.OrderOption
	inters     []Interceptor
	predicates []predicate.DeviceRebootTime
	withDevice *DeviceQuery
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DeviceRebootTimeQuery builder.
func (drtq *DeviceRebootTimeQuery) Where(ps ...predicate.DeviceRebootTime) *DeviceRebootTimeQuery {
	drtq.predicates = append(drtq.predicates, ps...)
	return drtq
}

// Limit the number of records to be returned by this query.
func (drtq *DeviceRebootTimeQuery) Limit(limit int) *DeviceRebootTimeQuery {
	drtq.ctx.Limit = &limit
	return drtq
}

// Offset to start from.
func (drtq *DeviceRebootTimeQuery) Offset(offset int) *DeviceRebootTimeQuery {
	drtq.ctx.Offset = &offset
	return drtq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (drtq *DeviceRebootTimeQuery) Unique(unique bool) *DeviceRebootTimeQuery {
	drtq.ctx.Unique = &unique
	return drtq
}

// Order specifies how the records should be ordered.
func (drtq *DeviceRebootTimeQuery) Order(o ...devicereboottime.OrderOption) *DeviceRebootTimeQuery {
	drtq.order = append(drtq.order, o...)
	return drtq
}

// QueryDevice chains the current query on the "device" edge.
func (drtq *DeviceRebootTimeQuery) QueryDevice() *DeviceQuery {
	query := (&DeviceClient{config: drtq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := drtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := drtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(devicereboottime.Table, devicereboottime.FieldID, selector),
			sqlgraph.To(device.Table, device.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, devicereboottime.DeviceTable, devicereboottime.DeviceColumn),
		)
		fromU = sqlgraph.SetNeighbors(drtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DeviceRebootTime entity from the query.
// Returns a *NotFoundError when no DeviceRebootTime was found.
func (drtq *DeviceRebootTimeQuery) First(ctx context.Context) (*DeviceRebootTime, error) {
	nodes, err := drtq.Limit(1).All(setContextOp(ctx, drtq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{devicereboottime.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (drtq *DeviceRebootTimeQuery) FirstX(ctx context.Context) *DeviceRebootTime {
	node, err := drtq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DeviceRebootTime ID from the query.
// Returns a *NotFoundError when no DeviceRebootTime ID was found.
func (drtq *DeviceRebootTimeQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = drtq.Limit(1).IDs(setContextOp(ctx, drtq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{devicereboottime.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (drtq *DeviceRebootTimeQuery) FirstIDX(ctx context.Context) int64 {
	id, err := drtq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DeviceRebootTime entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DeviceRebootTime entity is found.
// Returns a *NotFoundError when no DeviceRebootTime entities are found.
func (drtq *DeviceRebootTimeQuery) Only(ctx context.Context) (*DeviceRebootTime, error) {
	nodes, err := drtq.Limit(2).All(setContextOp(ctx, drtq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{devicereboottime.Label}
	default:
		return nil, &NotSingularError{devicereboottime.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (drtq *DeviceRebootTimeQuery) OnlyX(ctx context.Context) *DeviceRebootTime {
	node, err := drtq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DeviceRebootTime ID in the query.
// Returns a *NotSingularError when more than one DeviceRebootTime ID is found.
// Returns a *NotFoundError when no entities are found.
func (drtq *DeviceRebootTimeQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = drtq.Limit(2).IDs(setContextOp(ctx, drtq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{devicereboottime.Label}
	default:
		err = &NotSingularError{devicereboottime.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (drtq *DeviceRebootTimeQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := drtq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DeviceRebootTimes.
func (drtq *DeviceRebootTimeQuery) All(ctx context.Context) ([]*DeviceRebootTime, error) {
	ctx = setContextOp(ctx, drtq.ctx, "All")
	if err := drtq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*DeviceRebootTime, *DeviceRebootTimeQuery]()
	return withInterceptors[[]*DeviceRebootTime](ctx, drtq, qr, drtq.inters)
}

// AllX is like All, but panics if an error occurs.
func (drtq *DeviceRebootTimeQuery) AllX(ctx context.Context) []*DeviceRebootTime {
	nodes, err := drtq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DeviceRebootTime IDs.
func (drtq *DeviceRebootTimeQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if drtq.ctx.Unique == nil && drtq.path != nil {
		drtq.Unique(true)
	}
	ctx = setContextOp(ctx, drtq.ctx, "IDs")
	if err = drtq.Select(devicereboottime.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (drtq *DeviceRebootTimeQuery) IDsX(ctx context.Context) []int64 {
	ids, err := drtq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (drtq *DeviceRebootTimeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, drtq.ctx, "Count")
	if err := drtq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, drtq, querierCount[*DeviceRebootTimeQuery](), drtq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (drtq *DeviceRebootTimeQuery) CountX(ctx context.Context) int {
	count, err := drtq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (drtq *DeviceRebootTimeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, drtq.ctx, "Exist")
	switch _, err := drtq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("cep_ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (drtq *DeviceRebootTimeQuery) ExistX(ctx context.Context) bool {
	exist, err := drtq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DeviceRebootTimeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (drtq *DeviceRebootTimeQuery) Clone() *DeviceRebootTimeQuery {
	if drtq == nil {
		return nil
	}
	return &DeviceRebootTimeQuery{
		config:     drtq.config,
		ctx:        drtq.ctx.Clone(),
		order:      append([]devicereboottime.OrderOption{}, drtq.order...),
		inters:     append([]Interceptor{}, drtq.inters...),
		predicates: append([]predicate.DeviceRebootTime{}, drtq.predicates...),
		withDevice: drtq.withDevice.Clone(),
		// clone intermediate query.
		sql:  drtq.sql.Clone(),
		path: drtq.path,
	}
}

// WithDevice tells the query-builder to eager-load the nodes that are connected to
// the "device" edge. The optional arguments are used to configure the query builder of the edge.
func (drtq *DeviceRebootTimeQuery) WithDevice(opts ...func(*DeviceQuery)) *DeviceRebootTimeQuery {
	query := (&DeviceClient{config: drtq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	drtq.withDevice = query
	return drtq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DeviceRebootTime.Query().
//		GroupBy(devicereboottime.FieldCreatedBy).
//		Aggregate(cep_ent.Count()).
//		Scan(ctx, &v)
func (drtq *DeviceRebootTimeQuery) GroupBy(field string, fields ...string) *DeviceRebootTimeGroupBy {
	drtq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DeviceRebootTimeGroupBy{build: drtq}
	grbuild.flds = &drtq.ctx.Fields
	grbuild.label = devicereboottime.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by"`
//	}
//
//	client.DeviceRebootTime.Query().
//		Select(devicereboottime.FieldCreatedBy).
//		Scan(ctx, &v)
func (drtq *DeviceRebootTimeQuery) Select(fields ...string) *DeviceRebootTimeSelect {
	drtq.ctx.Fields = append(drtq.ctx.Fields, fields...)
	sbuild := &DeviceRebootTimeSelect{DeviceRebootTimeQuery: drtq}
	sbuild.label = devicereboottime.Label
	sbuild.flds, sbuild.scan = &drtq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DeviceRebootTimeSelect configured with the given aggregations.
func (drtq *DeviceRebootTimeQuery) Aggregate(fns ...AggregateFunc) *DeviceRebootTimeSelect {
	return drtq.Select().Aggregate(fns...)
}

func (drtq *DeviceRebootTimeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range drtq.inters {
		if inter == nil {
			return fmt.Errorf("cep_ent: uninitialized interceptor (forgotten import cep_ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, drtq); err != nil {
				return err
			}
		}
	}
	for _, f := range drtq.ctx.Fields {
		if !devicereboottime.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
		}
	}
	if drtq.path != nil {
		prev, err := drtq.path(ctx)
		if err != nil {
			return err
		}
		drtq.sql = prev
	}
	return nil
}

func (drtq *DeviceRebootTimeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DeviceRebootTime, error) {
	var (
		nodes       = []*DeviceRebootTime{}
		_spec       = drtq.querySpec()
		loadedTypes = [1]bool{
			drtq.withDevice != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DeviceRebootTime).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DeviceRebootTime{config: drtq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(drtq.modifiers) > 0 {
		_spec.Modifiers = drtq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, drtq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := drtq.withDevice; query != nil {
		if err := drtq.loadDevice(ctx, query, nodes, nil,
			func(n *DeviceRebootTime, e *Device) { n.Edges.Device = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (drtq *DeviceRebootTimeQuery) loadDevice(ctx context.Context, query *DeviceQuery, nodes []*DeviceRebootTime, init func(*DeviceRebootTime), assign func(*DeviceRebootTime, *Device)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*DeviceRebootTime)
	for i := range nodes {
		fk := nodes[i].DeviceID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(device.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "device_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (drtq *DeviceRebootTimeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := drtq.querySpec()
	if len(drtq.modifiers) > 0 {
		_spec.Modifiers = drtq.modifiers
	}
	_spec.Node.Columns = drtq.ctx.Fields
	if len(drtq.ctx.Fields) > 0 {
		_spec.Unique = drtq.ctx.Unique != nil && *drtq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, drtq.driver, _spec)
}

func (drtq *DeviceRebootTimeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(devicereboottime.Table, devicereboottime.Columns, sqlgraph.NewFieldSpec(devicereboottime.FieldID, field.TypeInt64))
	_spec.From = drtq.sql
	if unique := drtq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if drtq.path != nil {
		_spec.Unique = true
	}
	if fields := drtq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, devicereboottime.FieldID)
		for i := range fields {
			if fields[i] != devicereboottime.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if drtq.withDevice != nil {
			_spec.Node.AddColumnOnce(devicereboottime.FieldDeviceID)
		}
	}
	if ps := drtq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := drtq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := drtq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := drtq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (drtq *DeviceRebootTimeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(drtq.driver.Dialect())
	t1 := builder.Table(devicereboottime.Table)
	columns := drtq.ctx.Fields
	if len(columns) == 0 {
		columns = devicereboottime.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if drtq.sql != nil {
		selector = drtq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if drtq.ctx.Unique != nil && *drtq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range drtq.modifiers {
		m(selector)
	}
	for _, p := range drtq.predicates {
		p(selector)
	}
	for _, p := range drtq.order {
		p(selector)
	}
	if offset := drtq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := drtq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (drtq *DeviceRebootTimeQuery) Modify(modifiers ...func(s *sql.Selector)) *DeviceRebootTimeSelect {
	drtq.modifiers = append(drtq.modifiers, modifiers...)
	return drtq.Select()
}

// DeviceRebootTimeGroupBy is the group-by builder for DeviceRebootTime entities.
type DeviceRebootTimeGroupBy struct {
	selector
	build *DeviceRebootTimeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (drtgb *DeviceRebootTimeGroupBy) Aggregate(fns ...AggregateFunc) *DeviceRebootTimeGroupBy {
	drtgb.fns = append(drtgb.fns, fns...)
	return drtgb
}

// Scan applies the selector query and scans the result into the given value.
func (drtgb *DeviceRebootTimeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, drtgb.build.ctx, "GroupBy")
	if err := drtgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DeviceRebootTimeQuery, *DeviceRebootTimeGroupBy](ctx, drtgb.build, drtgb, drtgb.build.inters, v)
}

func (drtgb *DeviceRebootTimeGroupBy) sqlScan(ctx context.Context, root *DeviceRebootTimeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(drtgb.fns))
	for _, fn := range drtgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*drtgb.flds)+len(drtgb.fns))
		for _, f := range *drtgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*drtgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := drtgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DeviceRebootTimeSelect is the builder for selecting fields of DeviceRebootTime entities.
type DeviceRebootTimeSelect struct {
	*DeviceRebootTimeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (drts *DeviceRebootTimeSelect) Aggregate(fns ...AggregateFunc) *DeviceRebootTimeSelect {
	drts.fns = append(drts.fns, fns...)
	return drts
}

// Scan applies the selector query and scans the result into the given value.
func (drts *DeviceRebootTimeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, drts.ctx, "Select")
	if err := drts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DeviceRebootTimeQuery, *DeviceRebootTimeSelect](ctx, drts.DeviceRebootTimeQuery, drts, drts.inters, v)
}

func (drts *DeviceRebootTimeSelect) sqlScan(ctx context.Context, root *DeviceRebootTimeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(drts.fns))
	for _, fn := range drts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*drts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := drts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (drts *DeviceRebootTimeSelect) Modify(modifiers ...func(s *sql.Selector)) *DeviceRebootTimeSelect {
	drts.modifiers = append(drts.modifiers, modifiers...)
	return drts
}
