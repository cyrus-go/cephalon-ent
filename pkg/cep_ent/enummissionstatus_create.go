// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/enummissionstatus"
)

// EnumMissionStatusCreate is the builder for creating a EnumMissionStatus entity.
type EnumMissionStatusCreate struct {
	config
	mutation *EnumMissionStatusMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (emsc *EnumMissionStatusCreate) SetCreatedBy(i int64) *EnumMissionStatusCreate {
	emsc.mutation.SetCreatedBy(i)
	return emsc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (emsc *EnumMissionStatusCreate) SetNillableCreatedBy(i *int64) *EnumMissionStatusCreate {
	if i != nil {
		emsc.SetCreatedBy(*i)
	}
	return emsc
}

// SetUpdatedBy sets the "updated_by" field.
func (emsc *EnumMissionStatusCreate) SetUpdatedBy(i int64) *EnumMissionStatusCreate {
	emsc.mutation.SetUpdatedBy(i)
	return emsc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (emsc *EnumMissionStatusCreate) SetNillableUpdatedBy(i *int64) *EnumMissionStatusCreate {
	if i != nil {
		emsc.SetUpdatedBy(*i)
	}
	return emsc
}

// SetCreatedAt sets the "created_at" field.
func (emsc *EnumMissionStatusCreate) SetCreatedAt(t time.Time) *EnumMissionStatusCreate {
	emsc.mutation.SetCreatedAt(t)
	return emsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (emsc *EnumMissionStatusCreate) SetNillableCreatedAt(t *time.Time) *EnumMissionStatusCreate {
	if t != nil {
		emsc.SetCreatedAt(*t)
	}
	return emsc
}

// SetUpdatedAt sets the "updated_at" field.
func (emsc *EnumMissionStatusCreate) SetUpdatedAt(t time.Time) *EnumMissionStatusCreate {
	emsc.mutation.SetUpdatedAt(t)
	return emsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (emsc *EnumMissionStatusCreate) SetNillableUpdatedAt(t *time.Time) *EnumMissionStatusCreate {
	if t != nil {
		emsc.SetUpdatedAt(*t)
	}
	return emsc
}

// SetDeletedAt sets the "deleted_at" field.
func (emsc *EnumMissionStatusCreate) SetDeletedAt(t time.Time) *EnumMissionStatusCreate {
	emsc.mutation.SetDeletedAt(t)
	return emsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (emsc *EnumMissionStatusCreate) SetNillableDeletedAt(t *time.Time) *EnumMissionStatusCreate {
	if t != nil {
		emsc.SetDeletedAt(*t)
	}
	return emsc
}

// SetFrontStatus sets the "front_status" field.
func (emsc *EnumMissionStatusCreate) SetFrontStatus(s string) *EnumMissionStatusCreate {
	emsc.mutation.SetFrontStatus(s)
	return emsc
}

// SetNillableFrontStatus sets the "front_status" field if the given value is not nil.
func (emsc *EnumMissionStatusCreate) SetNillableFrontStatus(s *string) *EnumMissionStatusCreate {
	if s != nil {
		emsc.SetFrontStatus(*s)
	}
	return emsc
}

// SetMissionType sets the "mission_type" field.
func (emsc *EnumMissionStatusCreate) SetMissionType(s string) *EnumMissionStatusCreate {
	emsc.mutation.SetMissionType(s)
	return emsc
}

// SetNillableMissionType sets the "mission_type" field if the given value is not nil.
func (emsc *EnumMissionStatusCreate) SetNillableMissionType(s *string) *EnumMissionStatusCreate {
	if s != nil {
		emsc.SetMissionType(*s)
	}
	return emsc
}

// SetMissionStatus sets the "mission_status" field.
func (emsc *EnumMissionStatusCreate) SetMissionStatus(s string) *EnumMissionStatusCreate {
	emsc.mutation.SetMissionStatus(s)
	return emsc
}

// SetNillableMissionStatus sets the "mission_status" field if the given value is not nil.
func (emsc *EnumMissionStatusCreate) SetNillableMissionStatus(s *string) *EnumMissionStatusCreate {
	if s != nil {
		emsc.SetMissionStatus(*s)
	}
	return emsc
}

// SetID sets the "id" field.
func (emsc *EnumMissionStatusCreate) SetID(i int64) *EnumMissionStatusCreate {
	emsc.mutation.SetID(i)
	return emsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (emsc *EnumMissionStatusCreate) SetNillableID(i *int64) *EnumMissionStatusCreate {
	if i != nil {
		emsc.SetID(*i)
	}
	return emsc
}

// Mutation returns the EnumMissionStatusMutation object of the builder.
func (emsc *EnumMissionStatusCreate) Mutation() *EnumMissionStatusMutation {
	return emsc.mutation
}

// Save creates the EnumMissionStatus in the database.
func (emsc *EnumMissionStatusCreate) Save(ctx context.Context) (*EnumMissionStatus, error) {
	emsc.defaults()
	return withHooks(ctx, emsc.sqlSave, emsc.mutation, emsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (emsc *EnumMissionStatusCreate) SaveX(ctx context.Context) *EnumMissionStatus {
	v, err := emsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (emsc *EnumMissionStatusCreate) Exec(ctx context.Context) error {
	_, err := emsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (emsc *EnumMissionStatusCreate) ExecX(ctx context.Context) {
	if err := emsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (emsc *EnumMissionStatusCreate) defaults() {
	if _, ok := emsc.mutation.CreatedBy(); !ok {
		v := enummissionstatus.DefaultCreatedBy
		emsc.mutation.SetCreatedBy(v)
	}
	if _, ok := emsc.mutation.UpdatedBy(); !ok {
		v := enummissionstatus.DefaultUpdatedBy
		emsc.mutation.SetUpdatedBy(v)
	}
	if _, ok := emsc.mutation.CreatedAt(); !ok {
		v := enummissionstatus.DefaultCreatedAt()
		emsc.mutation.SetCreatedAt(v)
	}
	if _, ok := emsc.mutation.UpdatedAt(); !ok {
		v := enummissionstatus.DefaultUpdatedAt()
		emsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := emsc.mutation.DeletedAt(); !ok {
		v := enummissionstatus.DefaultDeletedAt
		emsc.mutation.SetDeletedAt(v)
	}
	if _, ok := emsc.mutation.FrontStatus(); !ok {
		v := enummissionstatus.DefaultFrontStatus
		emsc.mutation.SetFrontStatus(v)
	}
	if _, ok := emsc.mutation.MissionType(); !ok {
		v := enummissionstatus.DefaultMissionType
		emsc.mutation.SetMissionType(v)
	}
	if _, ok := emsc.mutation.MissionStatus(); !ok {
		v := enummissionstatus.DefaultMissionStatus
		emsc.mutation.SetMissionStatus(v)
	}
	if _, ok := emsc.mutation.ID(); !ok {
		v := enummissionstatus.DefaultID()
		emsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (emsc *EnumMissionStatusCreate) check() error {
	if _, ok := emsc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "EnumMissionStatus.created_by"`)}
	}
	if _, ok := emsc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "EnumMissionStatus.updated_by"`)}
	}
	if _, ok := emsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "EnumMissionStatus.created_at"`)}
	}
	if _, ok := emsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "EnumMissionStatus.updated_at"`)}
	}
	if _, ok := emsc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "EnumMissionStatus.deleted_at"`)}
	}
	if _, ok := emsc.mutation.FrontStatus(); !ok {
		return &ValidationError{Name: "front_status", err: errors.New(`cep_ent: missing required field "EnumMissionStatus.front_status"`)}
	}
	if _, ok := emsc.mutation.MissionType(); !ok {
		return &ValidationError{Name: "mission_type", err: errors.New(`cep_ent: missing required field "EnumMissionStatus.mission_type"`)}
	}
	if _, ok := emsc.mutation.MissionStatus(); !ok {
		return &ValidationError{Name: "mission_status", err: errors.New(`cep_ent: missing required field "EnumMissionStatus.mission_status"`)}
	}
	return nil
}

func (emsc *EnumMissionStatusCreate) sqlSave(ctx context.Context) (*EnumMissionStatus, error) {
	if err := emsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := emsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, emsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	emsc.mutation.id = &_node.ID
	emsc.mutation.done = true
	return _node, nil
}

func (emsc *EnumMissionStatusCreate) createSpec() (*EnumMissionStatus, *sqlgraph.CreateSpec) {
	var (
		_node = &EnumMissionStatus{config: emsc.config}
		_spec = sqlgraph.NewCreateSpec(enummissionstatus.Table, sqlgraph.NewFieldSpec(enummissionstatus.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = emsc.conflict
	if id, ok := emsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := emsc.mutation.CreatedBy(); ok {
		_spec.SetField(enummissionstatus.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := emsc.mutation.UpdatedBy(); ok {
		_spec.SetField(enummissionstatus.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := emsc.mutation.CreatedAt(); ok {
		_spec.SetField(enummissionstatus.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := emsc.mutation.UpdatedAt(); ok {
		_spec.SetField(enummissionstatus.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := emsc.mutation.DeletedAt(); ok {
		_spec.SetField(enummissionstatus.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := emsc.mutation.FrontStatus(); ok {
		_spec.SetField(enummissionstatus.FieldFrontStatus, field.TypeString, value)
		_node.FrontStatus = value
	}
	if value, ok := emsc.mutation.MissionType(); ok {
		_spec.SetField(enummissionstatus.FieldMissionType, field.TypeString, value)
		_node.MissionType = value
	}
	if value, ok := emsc.mutation.MissionStatus(); ok {
		_spec.SetField(enummissionstatus.FieldMissionStatus, field.TypeString, value)
		_node.MissionStatus = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EnumMissionStatus.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EnumMissionStatusUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (emsc *EnumMissionStatusCreate) OnConflict(opts ...sql.ConflictOption) *EnumMissionStatusUpsertOne {
	emsc.conflict = opts
	return &EnumMissionStatusUpsertOne{
		create: emsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EnumMissionStatus.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (emsc *EnumMissionStatusCreate) OnConflictColumns(columns ...string) *EnumMissionStatusUpsertOne {
	emsc.conflict = append(emsc.conflict, sql.ConflictColumns(columns...))
	return &EnumMissionStatusUpsertOne{
		create: emsc,
	}
}

type (
	// EnumMissionStatusUpsertOne is the builder for "upsert"-ing
	//  one EnumMissionStatus node.
	EnumMissionStatusUpsertOne struct {
		create *EnumMissionStatusCreate
	}

	// EnumMissionStatusUpsert is the "OnConflict" setter.
	EnumMissionStatusUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *EnumMissionStatusUpsert) SetCreatedBy(v int64) *EnumMissionStatusUpsert {
	u.Set(enummissionstatus.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *EnumMissionStatusUpsert) UpdateCreatedBy() *EnumMissionStatusUpsert {
	u.SetExcluded(enummissionstatus.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *EnumMissionStatusUpsert) AddCreatedBy(v int64) *EnumMissionStatusUpsert {
	u.Add(enummissionstatus.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *EnumMissionStatusUpsert) SetUpdatedBy(v int64) *EnumMissionStatusUpsert {
	u.Set(enummissionstatus.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *EnumMissionStatusUpsert) UpdateUpdatedBy() *EnumMissionStatusUpsert {
	u.SetExcluded(enummissionstatus.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *EnumMissionStatusUpsert) AddUpdatedBy(v int64) *EnumMissionStatusUpsert {
	u.Add(enummissionstatus.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EnumMissionStatusUpsert) SetUpdatedAt(v time.Time) *EnumMissionStatusUpsert {
	u.Set(enummissionstatus.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EnumMissionStatusUpsert) UpdateUpdatedAt() *EnumMissionStatusUpsert {
	u.SetExcluded(enummissionstatus.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EnumMissionStatusUpsert) SetDeletedAt(v time.Time) *EnumMissionStatusUpsert {
	u.Set(enummissionstatus.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EnumMissionStatusUpsert) UpdateDeletedAt() *EnumMissionStatusUpsert {
	u.SetExcluded(enummissionstatus.FieldDeletedAt)
	return u
}

// SetFrontStatus sets the "front_status" field.
func (u *EnumMissionStatusUpsert) SetFrontStatus(v string) *EnumMissionStatusUpsert {
	u.Set(enummissionstatus.FieldFrontStatus, v)
	return u
}

// UpdateFrontStatus sets the "front_status" field to the value that was provided on create.
func (u *EnumMissionStatusUpsert) UpdateFrontStatus() *EnumMissionStatusUpsert {
	u.SetExcluded(enummissionstatus.FieldFrontStatus)
	return u
}

// SetMissionType sets the "mission_type" field.
func (u *EnumMissionStatusUpsert) SetMissionType(v string) *EnumMissionStatusUpsert {
	u.Set(enummissionstatus.FieldMissionType, v)
	return u
}

// UpdateMissionType sets the "mission_type" field to the value that was provided on create.
func (u *EnumMissionStatusUpsert) UpdateMissionType() *EnumMissionStatusUpsert {
	u.SetExcluded(enummissionstatus.FieldMissionType)
	return u
}

// SetMissionStatus sets the "mission_status" field.
func (u *EnumMissionStatusUpsert) SetMissionStatus(v string) *EnumMissionStatusUpsert {
	u.Set(enummissionstatus.FieldMissionStatus, v)
	return u
}

// UpdateMissionStatus sets the "mission_status" field to the value that was provided on create.
func (u *EnumMissionStatusUpsert) UpdateMissionStatus() *EnumMissionStatusUpsert {
	u.SetExcluded(enummissionstatus.FieldMissionStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.EnumMissionStatus.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(enummissionstatus.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EnumMissionStatusUpsertOne) UpdateNewValues() *EnumMissionStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(enummissionstatus.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(enummissionstatus.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EnumMissionStatus.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EnumMissionStatusUpsertOne) Ignore() *EnumMissionStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EnumMissionStatusUpsertOne) DoNothing() *EnumMissionStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EnumMissionStatusCreate.OnConflict
// documentation for more info.
func (u *EnumMissionStatusUpsertOne) Update(set func(*EnumMissionStatusUpsert)) *EnumMissionStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EnumMissionStatusUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *EnumMissionStatusUpsertOne) SetCreatedBy(v int64) *EnumMissionStatusUpsertOne {
	return u.Update(func(s *EnumMissionStatusUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *EnumMissionStatusUpsertOne) AddCreatedBy(v int64) *EnumMissionStatusUpsertOne {
	return u.Update(func(s *EnumMissionStatusUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *EnumMissionStatusUpsertOne) UpdateCreatedBy() *EnumMissionStatusUpsertOne {
	return u.Update(func(s *EnumMissionStatusUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *EnumMissionStatusUpsertOne) SetUpdatedBy(v int64) *EnumMissionStatusUpsertOne {
	return u.Update(func(s *EnumMissionStatusUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *EnumMissionStatusUpsertOne) AddUpdatedBy(v int64) *EnumMissionStatusUpsertOne {
	return u.Update(func(s *EnumMissionStatusUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *EnumMissionStatusUpsertOne) UpdateUpdatedBy() *EnumMissionStatusUpsertOne {
	return u.Update(func(s *EnumMissionStatusUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EnumMissionStatusUpsertOne) SetUpdatedAt(v time.Time) *EnumMissionStatusUpsertOne {
	return u.Update(func(s *EnumMissionStatusUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EnumMissionStatusUpsertOne) UpdateUpdatedAt() *EnumMissionStatusUpsertOne {
	return u.Update(func(s *EnumMissionStatusUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EnumMissionStatusUpsertOne) SetDeletedAt(v time.Time) *EnumMissionStatusUpsertOne {
	return u.Update(func(s *EnumMissionStatusUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EnumMissionStatusUpsertOne) UpdateDeletedAt() *EnumMissionStatusUpsertOne {
	return u.Update(func(s *EnumMissionStatusUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetFrontStatus sets the "front_status" field.
func (u *EnumMissionStatusUpsertOne) SetFrontStatus(v string) *EnumMissionStatusUpsertOne {
	return u.Update(func(s *EnumMissionStatusUpsert) {
		s.SetFrontStatus(v)
	})
}

// UpdateFrontStatus sets the "front_status" field to the value that was provided on create.
func (u *EnumMissionStatusUpsertOne) UpdateFrontStatus() *EnumMissionStatusUpsertOne {
	return u.Update(func(s *EnumMissionStatusUpsert) {
		s.UpdateFrontStatus()
	})
}

// SetMissionType sets the "mission_type" field.
func (u *EnumMissionStatusUpsertOne) SetMissionType(v string) *EnumMissionStatusUpsertOne {
	return u.Update(func(s *EnumMissionStatusUpsert) {
		s.SetMissionType(v)
	})
}

// UpdateMissionType sets the "mission_type" field to the value that was provided on create.
func (u *EnumMissionStatusUpsertOne) UpdateMissionType() *EnumMissionStatusUpsertOne {
	return u.Update(func(s *EnumMissionStatusUpsert) {
		s.UpdateMissionType()
	})
}

// SetMissionStatus sets the "mission_status" field.
func (u *EnumMissionStatusUpsertOne) SetMissionStatus(v string) *EnumMissionStatusUpsertOne {
	return u.Update(func(s *EnumMissionStatusUpsert) {
		s.SetMissionStatus(v)
	})
}

// UpdateMissionStatus sets the "mission_status" field to the value that was provided on create.
func (u *EnumMissionStatusUpsertOne) UpdateMissionStatus() *EnumMissionStatusUpsertOne {
	return u.Update(func(s *EnumMissionStatusUpsert) {
		s.UpdateMissionStatus()
	})
}

// Exec executes the query.
func (u *EnumMissionStatusUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for EnumMissionStatusCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EnumMissionStatusUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EnumMissionStatusUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EnumMissionStatusUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EnumMissionStatusCreateBulk is the builder for creating many EnumMissionStatus entities in bulk.
type EnumMissionStatusCreateBulk struct {
	config
	err      error
	builders []*EnumMissionStatusCreate
	conflict []sql.ConflictOption
}

// Save creates the EnumMissionStatus entities in the database.
func (emscb *EnumMissionStatusCreateBulk) Save(ctx context.Context) ([]*EnumMissionStatus, error) {
	if emscb.err != nil {
		return nil, emscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(emscb.builders))
	nodes := make([]*EnumMissionStatus, len(emscb.builders))
	mutators := make([]Mutator, len(emscb.builders))
	for i := range emscb.builders {
		func(i int, root context.Context) {
			builder := emscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EnumMissionStatusMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, emscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = emscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, emscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, emscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (emscb *EnumMissionStatusCreateBulk) SaveX(ctx context.Context) []*EnumMissionStatus {
	v, err := emscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (emscb *EnumMissionStatusCreateBulk) Exec(ctx context.Context) error {
	_, err := emscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (emscb *EnumMissionStatusCreateBulk) ExecX(ctx context.Context) {
	if err := emscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EnumMissionStatus.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EnumMissionStatusUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (emscb *EnumMissionStatusCreateBulk) OnConflict(opts ...sql.ConflictOption) *EnumMissionStatusUpsertBulk {
	emscb.conflict = opts
	return &EnumMissionStatusUpsertBulk{
		create: emscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EnumMissionStatus.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (emscb *EnumMissionStatusCreateBulk) OnConflictColumns(columns ...string) *EnumMissionStatusUpsertBulk {
	emscb.conflict = append(emscb.conflict, sql.ConflictColumns(columns...))
	return &EnumMissionStatusUpsertBulk{
		create: emscb,
	}
}

// EnumMissionStatusUpsertBulk is the builder for "upsert"-ing
// a bulk of EnumMissionStatus nodes.
type EnumMissionStatusUpsertBulk struct {
	create *EnumMissionStatusCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.EnumMissionStatus.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(enummissionstatus.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EnumMissionStatusUpsertBulk) UpdateNewValues() *EnumMissionStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(enummissionstatus.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(enummissionstatus.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EnumMissionStatus.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EnumMissionStatusUpsertBulk) Ignore() *EnumMissionStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EnumMissionStatusUpsertBulk) DoNothing() *EnumMissionStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EnumMissionStatusCreateBulk.OnConflict
// documentation for more info.
func (u *EnumMissionStatusUpsertBulk) Update(set func(*EnumMissionStatusUpsert)) *EnumMissionStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EnumMissionStatusUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *EnumMissionStatusUpsertBulk) SetCreatedBy(v int64) *EnumMissionStatusUpsertBulk {
	return u.Update(func(s *EnumMissionStatusUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *EnumMissionStatusUpsertBulk) AddCreatedBy(v int64) *EnumMissionStatusUpsertBulk {
	return u.Update(func(s *EnumMissionStatusUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *EnumMissionStatusUpsertBulk) UpdateCreatedBy() *EnumMissionStatusUpsertBulk {
	return u.Update(func(s *EnumMissionStatusUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *EnumMissionStatusUpsertBulk) SetUpdatedBy(v int64) *EnumMissionStatusUpsertBulk {
	return u.Update(func(s *EnumMissionStatusUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *EnumMissionStatusUpsertBulk) AddUpdatedBy(v int64) *EnumMissionStatusUpsertBulk {
	return u.Update(func(s *EnumMissionStatusUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *EnumMissionStatusUpsertBulk) UpdateUpdatedBy() *EnumMissionStatusUpsertBulk {
	return u.Update(func(s *EnumMissionStatusUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EnumMissionStatusUpsertBulk) SetUpdatedAt(v time.Time) *EnumMissionStatusUpsertBulk {
	return u.Update(func(s *EnumMissionStatusUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EnumMissionStatusUpsertBulk) UpdateUpdatedAt() *EnumMissionStatusUpsertBulk {
	return u.Update(func(s *EnumMissionStatusUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EnumMissionStatusUpsertBulk) SetDeletedAt(v time.Time) *EnumMissionStatusUpsertBulk {
	return u.Update(func(s *EnumMissionStatusUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EnumMissionStatusUpsertBulk) UpdateDeletedAt() *EnumMissionStatusUpsertBulk {
	return u.Update(func(s *EnumMissionStatusUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetFrontStatus sets the "front_status" field.
func (u *EnumMissionStatusUpsertBulk) SetFrontStatus(v string) *EnumMissionStatusUpsertBulk {
	return u.Update(func(s *EnumMissionStatusUpsert) {
		s.SetFrontStatus(v)
	})
}

// UpdateFrontStatus sets the "front_status" field to the value that was provided on create.
func (u *EnumMissionStatusUpsertBulk) UpdateFrontStatus() *EnumMissionStatusUpsertBulk {
	return u.Update(func(s *EnumMissionStatusUpsert) {
		s.UpdateFrontStatus()
	})
}

// SetMissionType sets the "mission_type" field.
func (u *EnumMissionStatusUpsertBulk) SetMissionType(v string) *EnumMissionStatusUpsertBulk {
	return u.Update(func(s *EnumMissionStatusUpsert) {
		s.SetMissionType(v)
	})
}

// UpdateMissionType sets the "mission_type" field to the value that was provided on create.
func (u *EnumMissionStatusUpsertBulk) UpdateMissionType() *EnumMissionStatusUpsertBulk {
	return u.Update(func(s *EnumMissionStatusUpsert) {
		s.UpdateMissionType()
	})
}

// SetMissionStatus sets the "mission_status" field.
func (u *EnumMissionStatusUpsertBulk) SetMissionStatus(v string) *EnumMissionStatusUpsertBulk {
	return u.Update(func(s *EnumMissionStatusUpsert) {
		s.SetMissionStatus(v)
	})
}

// UpdateMissionStatus sets the "mission_status" field to the value that was provided on create.
func (u *EnumMissionStatusUpsertBulk) UpdateMissionStatus() *EnumMissionStatusUpsertBulk {
	return u.Update(func(s *EnumMissionStatusUpsert) {
		s.UpdateMissionStatus()
	})
}

// Exec executes the query.
func (u *EnumMissionStatusUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the EnumMissionStatusCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for EnumMissionStatusCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EnumMissionStatusUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
