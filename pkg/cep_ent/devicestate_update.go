// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/device"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/devicestate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// DeviceStateUpdate is the builder for updating DeviceState entities.
type DeviceStateUpdate struct {
	config
	hooks     []Hook
	mutation  *DeviceStateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DeviceStateUpdate builder.
func (dsu *DeviceStateUpdate) Where(ps ...predicate.DeviceState) *DeviceStateUpdate {
	dsu.mutation.Where(ps...)
	return dsu
}

// SetCreatedBy sets the "created_by" field.
func (dsu *DeviceStateUpdate) SetCreatedBy(i int64) *DeviceStateUpdate {
	dsu.mutation.ResetCreatedBy()
	dsu.mutation.SetCreatedBy(i)
	return dsu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (dsu *DeviceStateUpdate) SetNillableCreatedBy(i *int64) *DeviceStateUpdate {
	if i != nil {
		dsu.SetCreatedBy(*i)
	}
	return dsu
}

// AddCreatedBy adds i to the "created_by" field.
func (dsu *DeviceStateUpdate) AddCreatedBy(i int64) *DeviceStateUpdate {
	dsu.mutation.AddCreatedBy(i)
	return dsu
}

// SetUpdatedBy sets the "updated_by" field.
func (dsu *DeviceStateUpdate) SetUpdatedBy(i int64) *DeviceStateUpdate {
	dsu.mutation.ResetUpdatedBy()
	dsu.mutation.SetUpdatedBy(i)
	return dsu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dsu *DeviceStateUpdate) SetNillableUpdatedBy(i *int64) *DeviceStateUpdate {
	if i != nil {
		dsu.SetUpdatedBy(*i)
	}
	return dsu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (dsu *DeviceStateUpdate) AddUpdatedBy(i int64) *DeviceStateUpdate {
	dsu.mutation.AddUpdatedBy(i)
	return dsu
}

// SetUpdatedAt sets the "updated_at" field.
func (dsu *DeviceStateUpdate) SetUpdatedAt(t time.Time) *DeviceStateUpdate {
	dsu.mutation.SetUpdatedAt(t)
	return dsu
}

// SetDeletedAt sets the "deleted_at" field.
func (dsu *DeviceStateUpdate) SetDeletedAt(t time.Time) *DeviceStateUpdate {
	dsu.mutation.SetDeletedAt(t)
	return dsu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dsu *DeviceStateUpdate) SetNillableDeletedAt(t *time.Time) *DeviceStateUpdate {
	if t != nil {
		dsu.SetDeletedAt(*t)
	}
	return dsu
}

// SetDeviceID sets the "device_id" field.
func (dsu *DeviceStateUpdate) SetDeviceID(i int64) *DeviceStateUpdate {
	dsu.mutation.SetDeviceID(i)
	return dsu
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (dsu *DeviceStateUpdate) SetNillableDeviceID(i *int64) *DeviceStateUpdate {
	if i != nil {
		dsu.SetDeviceID(*i)
	}
	return dsu
}

// SetDelay sets the "delay" field.
func (dsu *DeviceStateUpdate) SetDelay(f float64) *DeviceStateUpdate {
	dsu.mutation.ResetDelay()
	dsu.mutation.SetDelay(f)
	return dsu
}

// SetNillableDelay sets the "delay" field if the given value is not nil.
func (dsu *DeviceStateUpdate) SetNillableDelay(f *float64) *DeviceStateUpdate {
	if f != nil {
		dsu.SetDelay(*f)
	}
	return dsu
}

// AddDelay adds f to the "delay" field.
func (dsu *DeviceStateUpdate) AddDelay(f float64) *DeviceStateUpdate {
	dsu.mutation.AddDelay(f)
	return dsu
}

// SetDevice sets the "device" edge to the Device entity.
func (dsu *DeviceStateUpdate) SetDevice(d *Device) *DeviceStateUpdate {
	return dsu.SetDeviceID(d.ID)
}

// Mutation returns the DeviceStateMutation object of the builder.
func (dsu *DeviceStateUpdate) Mutation() *DeviceStateMutation {
	return dsu.mutation
}

// ClearDevice clears the "device" edge to the Device entity.
func (dsu *DeviceStateUpdate) ClearDevice() *DeviceStateUpdate {
	dsu.mutation.ClearDevice()
	return dsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dsu *DeviceStateUpdate) Save(ctx context.Context) (int, error) {
	dsu.defaults()
	return withHooks(ctx, dsu.sqlSave, dsu.mutation, dsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dsu *DeviceStateUpdate) SaveX(ctx context.Context) int {
	affected, err := dsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dsu *DeviceStateUpdate) Exec(ctx context.Context) error {
	_, err := dsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dsu *DeviceStateUpdate) ExecX(ctx context.Context) {
	if err := dsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dsu *DeviceStateUpdate) defaults() {
	if _, ok := dsu.mutation.UpdatedAt(); !ok {
		v := devicestate.UpdateDefaultUpdatedAt()
		dsu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dsu *DeviceStateUpdate) check() error {
	if _, ok := dsu.mutation.DeviceID(); dsu.mutation.DeviceCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "DeviceState.device"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (dsu *DeviceStateUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DeviceStateUpdate {
	dsu.modifiers = append(dsu.modifiers, modifiers...)
	return dsu
}

func (dsu *DeviceStateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(devicestate.Table, devicestate.Columns, sqlgraph.NewFieldSpec(devicestate.FieldID, field.TypeInt64))
	if ps := dsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dsu.mutation.CreatedBy(); ok {
		_spec.SetField(devicestate.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := dsu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(devicestate.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := dsu.mutation.UpdatedBy(); ok {
		_spec.SetField(devicestate.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := dsu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(devicestate.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := dsu.mutation.UpdatedAt(); ok {
		_spec.SetField(devicestate.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := dsu.mutation.DeletedAt(); ok {
		_spec.SetField(devicestate.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := dsu.mutation.Delay(); ok {
		_spec.SetField(devicestate.FieldDelay, field.TypeFloat64, value)
	}
	if value, ok := dsu.mutation.AddedDelay(); ok {
		_spec.AddField(devicestate.FieldDelay, field.TypeFloat64, value)
	}
	if dsu.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   devicestate.DeviceTable,
			Columns: []string{devicestate.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dsu.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   devicestate.DeviceTable,
			Columns: []string{devicestate.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(dsu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, dsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{devicestate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dsu.mutation.done = true
	return n, nil
}

// DeviceStateUpdateOne is the builder for updating a single DeviceState entity.
type DeviceStateUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DeviceStateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedBy sets the "created_by" field.
func (dsuo *DeviceStateUpdateOne) SetCreatedBy(i int64) *DeviceStateUpdateOne {
	dsuo.mutation.ResetCreatedBy()
	dsuo.mutation.SetCreatedBy(i)
	return dsuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (dsuo *DeviceStateUpdateOne) SetNillableCreatedBy(i *int64) *DeviceStateUpdateOne {
	if i != nil {
		dsuo.SetCreatedBy(*i)
	}
	return dsuo
}

// AddCreatedBy adds i to the "created_by" field.
func (dsuo *DeviceStateUpdateOne) AddCreatedBy(i int64) *DeviceStateUpdateOne {
	dsuo.mutation.AddCreatedBy(i)
	return dsuo
}

// SetUpdatedBy sets the "updated_by" field.
func (dsuo *DeviceStateUpdateOne) SetUpdatedBy(i int64) *DeviceStateUpdateOne {
	dsuo.mutation.ResetUpdatedBy()
	dsuo.mutation.SetUpdatedBy(i)
	return dsuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dsuo *DeviceStateUpdateOne) SetNillableUpdatedBy(i *int64) *DeviceStateUpdateOne {
	if i != nil {
		dsuo.SetUpdatedBy(*i)
	}
	return dsuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (dsuo *DeviceStateUpdateOne) AddUpdatedBy(i int64) *DeviceStateUpdateOne {
	dsuo.mutation.AddUpdatedBy(i)
	return dsuo
}

// SetUpdatedAt sets the "updated_at" field.
func (dsuo *DeviceStateUpdateOne) SetUpdatedAt(t time.Time) *DeviceStateUpdateOne {
	dsuo.mutation.SetUpdatedAt(t)
	return dsuo
}

// SetDeletedAt sets the "deleted_at" field.
func (dsuo *DeviceStateUpdateOne) SetDeletedAt(t time.Time) *DeviceStateUpdateOne {
	dsuo.mutation.SetDeletedAt(t)
	return dsuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dsuo *DeviceStateUpdateOne) SetNillableDeletedAt(t *time.Time) *DeviceStateUpdateOne {
	if t != nil {
		dsuo.SetDeletedAt(*t)
	}
	return dsuo
}

// SetDeviceID sets the "device_id" field.
func (dsuo *DeviceStateUpdateOne) SetDeviceID(i int64) *DeviceStateUpdateOne {
	dsuo.mutation.SetDeviceID(i)
	return dsuo
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (dsuo *DeviceStateUpdateOne) SetNillableDeviceID(i *int64) *DeviceStateUpdateOne {
	if i != nil {
		dsuo.SetDeviceID(*i)
	}
	return dsuo
}

// SetDelay sets the "delay" field.
func (dsuo *DeviceStateUpdateOne) SetDelay(f float64) *DeviceStateUpdateOne {
	dsuo.mutation.ResetDelay()
	dsuo.mutation.SetDelay(f)
	return dsuo
}

// SetNillableDelay sets the "delay" field if the given value is not nil.
func (dsuo *DeviceStateUpdateOne) SetNillableDelay(f *float64) *DeviceStateUpdateOne {
	if f != nil {
		dsuo.SetDelay(*f)
	}
	return dsuo
}

// AddDelay adds f to the "delay" field.
func (dsuo *DeviceStateUpdateOne) AddDelay(f float64) *DeviceStateUpdateOne {
	dsuo.mutation.AddDelay(f)
	return dsuo
}

// SetDevice sets the "device" edge to the Device entity.
func (dsuo *DeviceStateUpdateOne) SetDevice(d *Device) *DeviceStateUpdateOne {
	return dsuo.SetDeviceID(d.ID)
}

// Mutation returns the DeviceStateMutation object of the builder.
func (dsuo *DeviceStateUpdateOne) Mutation() *DeviceStateMutation {
	return dsuo.mutation
}

// ClearDevice clears the "device" edge to the Device entity.
func (dsuo *DeviceStateUpdateOne) ClearDevice() *DeviceStateUpdateOne {
	dsuo.mutation.ClearDevice()
	return dsuo
}

// Where appends a list predicates to the DeviceStateUpdate builder.
func (dsuo *DeviceStateUpdateOne) Where(ps ...predicate.DeviceState) *DeviceStateUpdateOne {
	dsuo.mutation.Where(ps...)
	return dsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dsuo *DeviceStateUpdateOne) Select(field string, fields ...string) *DeviceStateUpdateOne {
	dsuo.fields = append([]string{field}, fields...)
	return dsuo
}

// Save executes the query and returns the updated DeviceState entity.
func (dsuo *DeviceStateUpdateOne) Save(ctx context.Context) (*DeviceState, error) {
	dsuo.defaults()
	return withHooks(ctx, dsuo.sqlSave, dsuo.mutation, dsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dsuo *DeviceStateUpdateOne) SaveX(ctx context.Context) *DeviceState {
	node, err := dsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dsuo *DeviceStateUpdateOne) Exec(ctx context.Context) error {
	_, err := dsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dsuo *DeviceStateUpdateOne) ExecX(ctx context.Context) {
	if err := dsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dsuo *DeviceStateUpdateOne) defaults() {
	if _, ok := dsuo.mutation.UpdatedAt(); !ok {
		v := devicestate.UpdateDefaultUpdatedAt()
		dsuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dsuo *DeviceStateUpdateOne) check() error {
	if _, ok := dsuo.mutation.DeviceID(); dsuo.mutation.DeviceCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "DeviceState.device"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (dsuo *DeviceStateUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DeviceStateUpdateOne {
	dsuo.modifiers = append(dsuo.modifiers, modifiers...)
	return dsuo
}

func (dsuo *DeviceStateUpdateOne) sqlSave(ctx context.Context) (_node *DeviceState, err error) {
	if err := dsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(devicestate.Table, devicestate.Columns, sqlgraph.NewFieldSpec(devicestate.FieldID, field.TypeInt64))
	id, ok := dsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "DeviceState.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, devicestate.FieldID)
		for _, f := range fields {
			if !devicestate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != devicestate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dsuo.mutation.CreatedBy(); ok {
		_spec.SetField(devicestate.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := dsuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(devicestate.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := dsuo.mutation.UpdatedBy(); ok {
		_spec.SetField(devicestate.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := dsuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(devicestate.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := dsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(devicestate.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := dsuo.mutation.DeletedAt(); ok {
		_spec.SetField(devicestate.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := dsuo.mutation.Delay(); ok {
		_spec.SetField(devicestate.FieldDelay, field.TypeFloat64, value)
	}
	if value, ok := dsuo.mutation.AddedDelay(); ok {
		_spec.AddField(devicestate.FieldDelay, field.TypeFloat64, value)
	}
	if dsuo.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   devicestate.DeviceTable,
			Columns: []string{devicestate.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dsuo.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   devicestate.DeviceTable,
			Columns: []string{devicestate.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(dsuo.modifiers...)
	_node = &DeviceState{config: dsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{devicestate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dsuo.mutation.done = true
	return _node, nil
}
