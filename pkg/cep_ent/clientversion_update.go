// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/clientversion"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// ClientVersionUpdate is the builder for updating ClientVersion entities.
type ClientVersionUpdate struct {
	config
	hooks     []Hook
	mutation  *ClientVersionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ClientVersionUpdate builder.
func (cvu *ClientVersionUpdate) Where(ps ...predicate.ClientVersion) *ClientVersionUpdate {
	cvu.mutation.Where(ps...)
	return cvu
}

// SetCreatedBy sets the "created_by" field.
func (cvu *ClientVersionUpdate) SetCreatedBy(i int64) *ClientVersionUpdate {
	cvu.mutation.ResetCreatedBy()
	cvu.mutation.SetCreatedBy(i)
	return cvu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cvu *ClientVersionUpdate) SetNillableCreatedBy(i *int64) *ClientVersionUpdate {
	if i != nil {
		cvu.SetCreatedBy(*i)
	}
	return cvu
}

// AddCreatedBy adds i to the "created_by" field.
func (cvu *ClientVersionUpdate) AddCreatedBy(i int64) *ClientVersionUpdate {
	cvu.mutation.AddCreatedBy(i)
	return cvu
}

// SetUpdatedBy sets the "updated_by" field.
func (cvu *ClientVersionUpdate) SetUpdatedBy(i int64) *ClientVersionUpdate {
	cvu.mutation.ResetUpdatedBy()
	cvu.mutation.SetUpdatedBy(i)
	return cvu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cvu *ClientVersionUpdate) SetNillableUpdatedBy(i *int64) *ClientVersionUpdate {
	if i != nil {
		cvu.SetUpdatedBy(*i)
	}
	return cvu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (cvu *ClientVersionUpdate) AddUpdatedBy(i int64) *ClientVersionUpdate {
	cvu.mutation.AddUpdatedBy(i)
	return cvu
}

// SetUpdatedAt sets the "updated_at" field.
func (cvu *ClientVersionUpdate) SetUpdatedAt(t time.Time) *ClientVersionUpdate {
	cvu.mutation.SetUpdatedAt(t)
	return cvu
}

// SetDeletedAt sets the "deleted_at" field.
func (cvu *ClientVersionUpdate) SetDeletedAt(t time.Time) *ClientVersionUpdate {
	cvu.mutation.SetDeletedAt(t)
	return cvu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cvu *ClientVersionUpdate) SetNillableDeletedAt(t *time.Time) *ClientVersionUpdate {
	if t != nil {
		cvu.SetDeletedAt(*t)
	}
	return cvu
}

// SetClientURL sets the "client_url" field.
func (cvu *ClientVersionUpdate) SetClientURL(s string) *ClientVersionUpdate {
	cvu.mutation.SetClientURL(s)
	return cvu
}

// SetNillableClientURL sets the "client_url" field if the given value is not nil.
func (cvu *ClientVersionUpdate) SetNillableClientURL(s *string) *ClientVersionUpdate {
	if s != nil {
		cvu.SetClientURL(*s)
	}
	return cvu
}

// SetConfigURL sets the "config_url" field.
func (cvu *ClientVersionUpdate) SetConfigURL(s string) *ClientVersionUpdate {
	cvu.mutation.SetConfigURL(s)
	return cvu
}

// SetNillableConfigURL sets the "config_url" field if the given value is not nil.
func (cvu *ClientVersionUpdate) SetNillableConfigURL(s *string) *ClientVersionUpdate {
	if s != nil {
		cvu.SetConfigURL(*s)
	}
	return cvu
}

// SetVersion sets the "version" field.
func (cvu *ClientVersionUpdate) SetVersion(s string) *ClientVersionUpdate {
	cvu.mutation.SetVersion(s)
	return cvu
}

// SetStatus sets the "status" field.
func (cvu *ClientVersionUpdate) SetStatus(es enums.ClientStatus) *ClientVersionUpdate {
	cvu.mutation.SetStatus(es)
	return cvu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cvu *ClientVersionUpdate) SetNillableStatus(es *enums.ClientStatus) *ClientVersionUpdate {
	if es != nil {
		cvu.SetStatus(*es)
	}
	return cvu
}

// Mutation returns the ClientVersionMutation object of the builder.
func (cvu *ClientVersionUpdate) Mutation() *ClientVersionMutation {
	return cvu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cvu *ClientVersionUpdate) Save(ctx context.Context) (int, error) {
	cvu.defaults()
	return withHooks(ctx, cvu.sqlSave, cvu.mutation, cvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cvu *ClientVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := cvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cvu *ClientVersionUpdate) Exec(ctx context.Context) error {
	_, err := cvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cvu *ClientVersionUpdate) ExecX(ctx context.Context) {
	if err := cvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cvu *ClientVersionUpdate) defaults() {
	if _, ok := cvu.mutation.UpdatedAt(); !ok {
		v := clientversion.UpdateDefaultUpdatedAt()
		cvu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cvu *ClientVersionUpdate) check() error {
	if v, ok := cvu.mutation.Status(); ok {
		if err := clientversion.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "ClientVersion.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cvu *ClientVersionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ClientVersionUpdate {
	cvu.modifiers = append(cvu.modifiers, modifiers...)
	return cvu
}

func (cvu *ClientVersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cvu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(clientversion.Table, clientversion.Columns, sqlgraph.NewFieldSpec(clientversion.FieldID, field.TypeInt64))
	if ps := cvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cvu.mutation.CreatedBy(); ok {
		_spec.SetField(clientversion.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := cvu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(clientversion.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := cvu.mutation.UpdatedBy(); ok {
		_spec.SetField(clientversion.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := cvu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(clientversion.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := cvu.mutation.UpdatedAt(); ok {
		_spec.SetField(clientversion.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cvu.mutation.DeletedAt(); ok {
		_spec.SetField(clientversion.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := cvu.mutation.ClientURL(); ok {
		_spec.SetField(clientversion.FieldClientURL, field.TypeString, value)
	}
	if value, ok := cvu.mutation.ConfigURL(); ok {
		_spec.SetField(clientversion.FieldConfigURL, field.TypeString, value)
	}
	if value, ok := cvu.mutation.Version(); ok {
		_spec.SetField(clientversion.FieldVersion, field.TypeString, value)
	}
	if value, ok := cvu.mutation.Status(); ok {
		_spec.SetField(clientversion.FieldStatus, field.TypeEnum, value)
	}
	_spec.AddModifiers(cvu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clientversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cvu.mutation.done = true
	return n, nil
}

// ClientVersionUpdateOne is the builder for updating a single ClientVersion entity.
type ClientVersionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ClientVersionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedBy sets the "created_by" field.
func (cvuo *ClientVersionUpdateOne) SetCreatedBy(i int64) *ClientVersionUpdateOne {
	cvuo.mutation.ResetCreatedBy()
	cvuo.mutation.SetCreatedBy(i)
	return cvuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cvuo *ClientVersionUpdateOne) SetNillableCreatedBy(i *int64) *ClientVersionUpdateOne {
	if i != nil {
		cvuo.SetCreatedBy(*i)
	}
	return cvuo
}

// AddCreatedBy adds i to the "created_by" field.
func (cvuo *ClientVersionUpdateOne) AddCreatedBy(i int64) *ClientVersionUpdateOne {
	cvuo.mutation.AddCreatedBy(i)
	return cvuo
}

// SetUpdatedBy sets the "updated_by" field.
func (cvuo *ClientVersionUpdateOne) SetUpdatedBy(i int64) *ClientVersionUpdateOne {
	cvuo.mutation.ResetUpdatedBy()
	cvuo.mutation.SetUpdatedBy(i)
	return cvuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cvuo *ClientVersionUpdateOne) SetNillableUpdatedBy(i *int64) *ClientVersionUpdateOne {
	if i != nil {
		cvuo.SetUpdatedBy(*i)
	}
	return cvuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (cvuo *ClientVersionUpdateOne) AddUpdatedBy(i int64) *ClientVersionUpdateOne {
	cvuo.mutation.AddUpdatedBy(i)
	return cvuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cvuo *ClientVersionUpdateOne) SetUpdatedAt(t time.Time) *ClientVersionUpdateOne {
	cvuo.mutation.SetUpdatedAt(t)
	return cvuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cvuo *ClientVersionUpdateOne) SetDeletedAt(t time.Time) *ClientVersionUpdateOne {
	cvuo.mutation.SetDeletedAt(t)
	return cvuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cvuo *ClientVersionUpdateOne) SetNillableDeletedAt(t *time.Time) *ClientVersionUpdateOne {
	if t != nil {
		cvuo.SetDeletedAt(*t)
	}
	return cvuo
}

// SetClientURL sets the "client_url" field.
func (cvuo *ClientVersionUpdateOne) SetClientURL(s string) *ClientVersionUpdateOne {
	cvuo.mutation.SetClientURL(s)
	return cvuo
}

// SetNillableClientURL sets the "client_url" field if the given value is not nil.
func (cvuo *ClientVersionUpdateOne) SetNillableClientURL(s *string) *ClientVersionUpdateOne {
	if s != nil {
		cvuo.SetClientURL(*s)
	}
	return cvuo
}

// SetConfigURL sets the "config_url" field.
func (cvuo *ClientVersionUpdateOne) SetConfigURL(s string) *ClientVersionUpdateOne {
	cvuo.mutation.SetConfigURL(s)
	return cvuo
}

// SetNillableConfigURL sets the "config_url" field if the given value is not nil.
func (cvuo *ClientVersionUpdateOne) SetNillableConfigURL(s *string) *ClientVersionUpdateOne {
	if s != nil {
		cvuo.SetConfigURL(*s)
	}
	return cvuo
}

// SetVersion sets the "version" field.
func (cvuo *ClientVersionUpdateOne) SetVersion(s string) *ClientVersionUpdateOne {
	cvuo.mutation.SetVersion(s)
	return cvuo
}

// SetStatus sets the "status" field.
func (cvuo *ClientVersionUpdateOne) SetStatus(es enums.ClientStatus) *ClientVersionUpdateOne {
	cvuo.mutation.SetStatus(es)
	return cvuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cvuo *ClientVersionUpdateOne) SetNillableStatus(es *enums.ClientStatus) *ClientVersionUpdateOne {
	if es != nil {
		cvuo.SetStatus(*es)
	}
	return cvuo
}

// Mutation returns the ClientVersionMutation object of the builder.
func (cvuo *ClientVersionUpdateOne) Mutation() *ClientVersionMutation {
	return cvuo.mutation
}

// Where appends a list predicates to the ClientVersionUpdate builder.
func (cvuo *ClientVersionUpdateOne) Where(ps ...predicate.ClientVersion) *ClientVersionUpdateOne {
	cvuo.mutation.Where(ps...)
	return cvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cvuo *ClientVersionUpdateOne) Select(field string, fields ...string) *ClientVersionUpdateOne {
	cvuo.fields = append([]string{field}, fields...)
	return cvuo
}

// Save executes the query and returns the updated ClientVersion entity.
func (cvuo *ClientVersionUpdateOne) Save(ctx context.Context) (*ClientVersion, error) {
	cvuo.defaults()
	return withHooks(ctx, cvuo.sqlSave, cvuo.mutation, cvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cvuo *ClientVersionUpdateOne) SaveX(ctx context.Context) *ClientVersion {
	node, err := cvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cvuo *ClientVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := cvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cvuo *ClientVersionUpdateOne) ExecX(ctx context.Context) {
	if err := cvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cvuo *ClientVersionUpdateOne) defaults() {
	if _, ok := cvuo.mutation.UpdatedAt(); !ok {
		v := clientversion.UpdateDefaultUpdatedAt()
		cvuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cvuo *ClientVersionUpdateOne) check() error {
	if v, ok := cvuo.mutation.Status(); ok {
		if err := clientversion.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "ClientVersion.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cvuo *ClientVersionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ClientVersionUpdateOne {
	cvuo.modifiers = append(cvuo.modifiers, modifiers...)
	return cvuo
}

func (cvuo *ClientVersionUpdateOne) sqlSave(ctx context.Context) (_node *ClientVersion, err error) {
	if err := cvuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(clientversion.Table, clientversion.Columns, sqlgraph.NewFieldSpec(clientversion.FieldID, field.TypeInt64))
	id, ok := cvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "ClientVersion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, clientversion.FieldID)
		for _, f := range fields {
			if !clientversion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != clientversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cvuo.mutation.CreatedBy(); ok {
		_spec.SetField(clientversion.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := cvuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(clientversion.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := cvuo.mutation.UpdatedBy(); ok {
		_spec.SetField(clientversion.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := cvuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(clientversion.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := cvuo.mutation.UpdatedAt(); ok {
		_spec.SetField(clientversion.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cvuo.mutation.DeletedAt(); ok {
		_spec.SetField(clientversion.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := cvuo.mutation.ClientURL(); ok {
		_spec.SetField(clientversion.FieldClientURL, field.TypeString, value)
	}
	if value, ok := cvuo.mutation.ConfigURL(); ok {
		_spec.SetField(clientversion.FieldConfigURL, field.TypeString, value)
	}
	if value, ok := cvuo.mutation.Version(); ok {
		_spec.SetField(clientversion.FieldVersion, field.TypeString, value)
	}
	if value, ok := cvuo.mutation.Status(); ok {
		_spec.SetField(clientversion.FieldStatus, field.TypeEnum, value)
	}
	_spec.AddModifiers(cvuo.modifiers...)
	_node = &ClientVersion{config: cvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clientversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cvuo.mutation.done = true
	return _node, nil
}
