// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/missionbatch"
	"cephalon-ent/pkg/cep_ent/predicate"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MissionBatchDelete is the builder for deleting a MissionBatch entity.
type MissionBatchDelete struct {
	config
	hooks    []Hook
	mutation *MissionBatchMutation
}

// Where appends a list predicates to the MissionBatchDelete builder.
func (mbd *MissionBatchDelete) Where(ps ...predicate.MissionBatch) *MissionBatchDelete {
	mbd.mutation.Where(ps...)
	return mbd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mbd *MissionBatchDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, mbd.sqlExec, mbd.mutation, mbd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mbd *MissionBatchDelete) ExecX(ctx context.Context) int {
	n, err := mbd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mbd *MissionBatchDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(missionbatch.Table, sqlgraph.NewFieldSpec(missionbatch.FieldID, field.TypeInt64))
	if ps := mbd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mbd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mbd.mutation.done = true
	return affected, err
}

// MissionBatchDeleteOne is the builder for deleting a single MissionBatch entity.
type MissionBatchDeleteOne struct {
	mbd *MissionBatchDelete
}

// Where appends a list predicates to the MissionBatchDelete builder.
func (mbdo *MissionBatchDeleteOne) Where(ps ...predicate.MissionBatch) *MissionBatchDeleteOne {
	mbdo.mbd.mutation.Where(ps...)
	return mbdo
}

// Exec executes the deletion query.
func (mbdo *MissionBatchDeleteOne) Exec(ctx context.Context) error {
	n, err := mbdo.mbd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{missionbatch.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mbdo *MissionBatchDeleteOne) ExecX(ctx context.Context) {
	if err := mbdo.Exec(ctx); err != nil {
		panic(err)
	}
}
