// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionloadbalance"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// MissionLoadBalanceDelete is the builder for deleting a MissionLoadBalance entity.
type MissionLoadBalanceDelete struct {
	config
	hooks    []Hook
	mutation *MissionLoadBalanceMutation
}

// Where appends a list predicates to the MissionLoadBalanceDelete builder.
func (mlbd *MissionLoadBalanceDelete) Where(ps ...predicate.MissionLoadBalance) *MissionLoadBalanceDelete {
	mlbd.mutation.Where(ps...)
	return mlbd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mlbd *MissionLoadBalanceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, mlbd.sqlExec, mlbd.mutation, mlbd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mlbd *MissionLoadBalanceDelete) ExecX(ctx context.Context) int {
	n, err := mlbd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mlbd *MissionLoadBalanceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(missionloadbalance.Table, sqlgraph.NewFieldSpec(missionloadbalance.FieldID, field.TypeInt64))
	if ps := mlbd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mlbd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mlbd.mutation.done = true
	return affected, err
}

// MissionLoadBalanceDeleteOne is the builder for deleting a single MissionLoadBalance entity.
type MissionLoadBalanceDeleteOne struct {
	mlbd *MissionLoadBalanceDelete
}

// Where appends a list predicates to the MissionLoadBalanceDelete builder.
func (mlbdo *MissionLoadBalanceDeleteOne) Where(ps ...predicate.MissionLoadBalance) *MissionLoadBalanceDeleteOne {
	mlbdo.mlbd.mutation.Where(ps...)
	return mlbdo
}

// Exec executes the deletion query.
func (mlbdo *MissionLoadBalanceDeleteOne) Exec(ctx context.Context) error {
	n, err := mlbdo.mlbd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{missionloadbalance.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mlbdo *MissionLoadBalanceDeleteOne) ExecX(ctx context.Context) {
	if err := mlbdo.Exec(ctx); err != nil {
		panic(err)
	}
}
