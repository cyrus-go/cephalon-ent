// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lotto"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottoprize"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottorecord"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
)

// LottoRecordCreate is the builder for creating a LottoRecord entity.
type LottoRecordCreate struct {
	config
	mutation *LottoRecordMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (lrc *LottoRecordCreate) SetCreatedBy(i int64) *LottoRecordCreate {
	lrc.mutation.SetCreatedBy(i)
	return lrc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (lrc *LottoRecordCreate) SetNillableCreatedBy(i *int64) *LottoRecordCreate {
	if i != nil {
		lrc.SetCreatedBy(*i)
	}
	return lrc
}

// SetUpdatedBy sets the "updated_by" field.
func (lrc *LottoRecordCreate) SetUpdatedBy(i int64) *LottoRecordCreate {
	lrc.mutation.SetUpdatedBy(i)
	return lrc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (lrc *LottoRecordCreate) SetNillableUpdatedBy(i *int64) *LottoRecordCreate {
	if i != nil {
		lrc.SetUpdatedBy(*i)
	}
	return lrc
}

// SetCreatedAt sets the "created_at" field.
func (lrc *LottoRecordCreate) SetCreatedAt(t time.Time) *LottoRecordCreate {
	lrc.mutation.SetCreatedAt(t)
	return lrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lrc *LottoRecordCreate) SetNillableCreatedAt(t *time.Time) *LottoRecordCreate {
	if t != nil {
		lrc.SetCreatedAt(*t)
	}
	return lrc
}

// SetUpdatedAt sets the "updated_at" field.
func (lrc *LottoRecordCreate) SetUpdatedAt(t time.Time) *LottoRecordCreate {
	lrc.mutation.SetUpdatedAt(t)
	return lrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lrc *LottoRecordCreate) SetNillableUpdatedAt(t *time.Time) *LottoRecordCreate {
	if t != nil {
		lrc.SetUpdatedAt(*t)
	}
	return lrc
}

// SetDeletedAt sets the "deleted_at" field.
func (lrc *LottoRecordCreate) SetDeletedAt(t time.Time) *LottoRecordCreate {
	lrc.mutation.SetDeletedAt(t)
	return lrc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lrc *LottoRecordCreate) SetNillableDeletedAt(t *time.Time) *LottoRecordCreate {
	if t != nil {
		lrc.SetDeletedAt(*t)
	}
	return lrc
}

// SetUserID sets the "user_id" field.
func (lrc *LottoRecordCreate) SetUserID(i int64) *LottoRecordCreate {
	lrc.mutation.SetUserID(i)
	return lrc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (lrc *LottoRecordCreate) SetNillableUserID(i *int64) *LottoRecordCreate {
	if i != nil {
		lrc.SetUserID(*i)
	}
	return lrc
}

// SetLottoID sets the "lotto_id" field.
func (lrc *LottoRecordCreate) SetLottoID(i int64) *LottoRecordCreate {
	lrc.mutation.SetLottoID(i)
	return lrc
}

// SetNillableLottoID sets the "lotto_id" field if the given value is not nil.
func (lrc *LottoRecordCreate) SetNillableLottoID(i *int64) *LottoRecordCreate {
	if i != nil {
		lrc.SetLottoID(*i)
	}
	return lrc
}

// SetResult sets the "result" field.
func (lrc *LottoRecordCreate) SetResult(l lottorecord.Result) *LottoRecordCreate {
	lrc.mutation.SetResult(l)
	return lrc
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (lrc *LottoRecordCreate) SetNillableResult(l *lottorecord.Result) *LottoRecordCreate {
	if l != nil {
		lrc.SetResult(*l)
	}
	return lrc
}

// SetLottoPrizeID sets the "lotto_prize_id" field.
func (lrc *LottoRecordCreate) SetLottoPrizeID(i int64) *LottoRecordCreate {
	lrc.mutation.SetLottoPrizeID(i)
	return lrc
}

// SetNillableLottoPrizeID sets the "lotto_prize_id" field if the given value is not nil.
func (lrc *LottoRecordCreate) SetNillableLottoPrizeID(i *int64) *LottoRecordCreate {
	if i != nil {
		lrc.SetLottoPrizeID(*i)
	}
	return lrc
}

// SetStatus sets the "status" field.
func (lrc *LottoRecordCreate) SetStatus(l lottorecord.Status) *LottoRecordCreate {
	lrc.mutation.SetStatus(l)
	return lrc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (lrc *LottoRecordCreate) SetNillableStatus(l *lottorecord.Status) *LottoRecordCreate {
	if l != nil {
		lrc.SetStatus(*l)
	}
	return lrc
}

// SetRemainLottoCount sets the "remain_lotto_count" field.
func (lrc *LottoRecordCreate) SetRemainLottoCount(i int64) *LottoRecordCreate {
	lrc.mutation.SetRemainLottoCount(i)
	return lrc
}

// SetNillableRemainLottoCount sets the "remain_lotto_count" field if the given value is not nil.
func (lrc *LottoRecordCreate) SetNillableRemainLottoCount(i *int64) *LottoRecordCreate {
	if i != nil {
		lrc.SetRemainLottoCount(*i)
	}
	return lrc
}

// SetID sets the "id" field.
func (lrc *LottoRecordCreate) SetID(i int64) *LottoRecordCreate {
	lrc.mutation.SetID(i)
	return lrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lrc *LottoRecordCreate) SetNillableID(i *int64) *LottoRecordCreate {
	if i != nil {
		lrc.SetID(*i)
	}
	return lrc
}

// SetUser sets the "user" edge to the User entity.
func (lrc *LottoRecordCreate) SetUser(u *User) *LottoRecordCreate {
	return lrc.SetUserID(u.ID)
}

// SetLotto sets the "lotto" edge to the Lotto entity.
func (lrc *LottoRecordCreate) SetLotto(l *Lotto) *LottoRecordCreate {
	return lrc.SetLottoID(l.ID)
}

// SetLottoPrize sets the "lotto_prize" edge to the LottoPrize entity.
func (lrc *LottoRecordCreate) SetLottoPrize(l *LottoPrize) *LottoRecordCreate {
	return lrc.SetLottoPrizeID(l.ID)
}

// Mutation returns the LottoRecordMutation object of the builder.
func (lrc *LottoRecordCreate) Mutation() *LottoRecordMutation {
	return lrc.mutation
}

// Save creates the LottoRecord in the database.
func (lrc *LottoRecordCreate) Save(ctx context.Context) (*LottoRecord, error) {
	lrc.defaults()
	return withHooks(ctx, lrc.sqlSave, lrc.mutation, lrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lrc *LottoRecordCreate) SaveX(ctx context.Context) *LottoRecord {
	v, err := lrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lrc *LottoRecordCreate) Exec(ctx context.Context) error {
	_, err := lrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lrc *LottoRecordCreate) ExecX(ctx context.Context) {
	if err := lrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lrc *LottoRecordCreate) defaults() {
	if _, ok := lrc.mutation.CreatedBy(); !ok {
		v := lottorecord.DefaultCreatedBy
		lrc.mutation.SetCreatedBy(v)
	}
	if _, ok := lrc.mutation.UpdatedBy(); !ok {
		v := lottorecord.DefaultUpdatedBy
		lrc.mutation.SetUpdatedBy(v)
	}
	if _, ok := lrc.mutation.CreatedAt(); !ok {
		v := lottorecord.DefaultCreatedAt()
		lrc.mutation.SetCreatedAt(v)
	}
	if _, ok := lrc.mutation.UpdatedAt(); !ok {
		v := lottorecord.DefaultUpdatedAt()
		lrc.mutation.SetUpdatedAt(v)
	}
	if _, ok := lrc.mutation.DeletedAt(); !ok {
		v := lottorecord.DefaultDeletedAt
		lrc.mutation.SetDeletedAt(v)
	}
	if _, ok := lrc.mutation.UserID(); !ok {
		v := lottorecord.DefaultUserID
		lrc.mutation.SetUserID(v)
	}
	if _, ok := lrc.mutation.LottoID(); !ok {
		v := lottorecord.DefaultLottoID
		lrc.mutation.SetLottoID(v)
	}
	if _, ok := lrc.mutation.Result(); !ok {
		v := lottorecord.DefaultResult
		lrc.mutation.SetResult(v)
	}
	if _, ok := lrc.mutation.LottoPrizeID(); !ok {
		v := lottorecord.DefaultLottoPrizeID
		lrc.mutation.SetLottoPrizeID(v)
	}
	if _, ok := lrc.mutation.Status(); !ok {
		v := lottorecord.DefaultStatus
		lrc.mutation.SetStatus(v)
	}
	if _, ok := lrc.mutation.RemainLottoCount(); !ok {
		v := lottorecord.DefaultRemainLottoCount
		lrc.mutation.SetRemainLottoCount(v)
	}
	if _, ok := lrc.mutation.ID(); !ok {
		v := lottorecord.DefaultID()
		lrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lrc *LottoRecordCreate) check() error {
	if _, ok := lrc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "LottoRecord.created_by"`)}
	}
	if _, ok := lrc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "LottoRecord.updated_by"`)}
	}
	if _, ok := lrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "LottoRecord.created_at"`)}
	}
	if _, ok := lrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "LottoRecord.updated_at"`)}
	}
	if _, ok := lrc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "LottoRecord.deleted_at"`)}
	}
	if _, ok := lrc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "LottoRecord.user_id"`)}
	}
	if _, ok := lrc.mutation.LottoID(); !ok {
		return &ValidationError{Name: "lotto_id", err: errors.New(`cep_ent: missing required field "LottoRecord.lotto_id"`)}
	}
	if _, ok := lrc.mutation.Result(); !ok {
		return &ValidationError{Name: "result", err: errors.New(`cep_ent: missing required field "LottoRecord.result"`)}
	}
	if v, ok := lrc.mutation.Result(); ok {
		if err := lottorecord.ResultValidator(v); err != nil {
			return &ValidationError{Name: "result", err: fmt.Errorf(`cep_ent: validator failed for field "LottoRecord.result": %w`, err)}
		}
	}
	if _, ok := lrc.mutation.LottoPrizeID(); !ok {
		return &ValidationError{Name: "lotto_prize_id", err: errors.New(`cep_ent: missing required field "LottoRecord.lotto_prize_id"`)}
	}
	if _, ok := lrc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`cep_ent: missing required field "LottoRecord.status"`)}
	}
	if v, ok := lrc.mutation.Status(); ok {
		if err := lottorecord.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "LottoRecord.status": %w`, err)}
		}
	}
	if _, ok := lrc.mutation.RemainLottoCount(); !ok {
		return &ValidationError{Name: "remain_lotto_count", err: errors.New(`cep_ent: missing required field "LottoRecord.remain_lotto_count"`)}
	}
	if _, ok := lrc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "LottoRecord.user"`)}
	}
	if _, ok := lrc.mutation.LottoID(); !ok {
		return &ValidationError{Name: "lotto", err: errors.New(`cep_ent: missing required edge "LottoRecord.lotto"`)}
	}
	if _, ok := lrc.mutation.LottoPrizeID(); !ok {
		return &ValidationError{Name: "lotto_prize", err: errors.New(`cep_ent: missing required edge "LottoRecord.lotto_prize"`)}
	}
	return nil
}

func (lrc *LottoRecordCreate) sqlSave(ctx context.Context) (*LottoRecord, error) {
	if err := lrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	lrc.mutation.id = &_node.ID
	lrc.mutation.done = true
	return _node, nil
}

func (lrc *LottoRecordCreate) createSpec() (*LottoRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &LottoRecord{config: lrc.config}
		_spec = sqlgraph.NewCreateSpec(lottorecord.Table, sqlgraph.NewFieldSpec(lottorecord.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = lrc.conflict
	if id, ok := lrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lrc.mutation.CreatedBy(); ok {
		_spec.SetField(lottorecord.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := lrc.mutation.UpdatedBy(); ok {
		_spec.SetField(lottorecord.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := lrc.mutation.CreatedAt(); ok {
		_spec.SetField(lottorecord.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lrc.mutation.UpdatedAt(); ok {
		_spec.SetField(lottorecord.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := lrc.mutation.DeletedAt(); ok {
		_spec.SetField(lottorecord.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := lrc.mutation.Result(); ok {
		_spec.SetField(lottorecord.FieldResult, field.TypeEnum, value)
		_node.Result = value
	}
	if value, ok := lrc.mutation.Status(); ok {
		_spec.SetField(lottorecord.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := lrc.mutation.RemainLottoCount(); ok {
		_spec.SetField(lottorecord.FieldRemainLottoCount, field.TypeInt64, value)
		_node.RemainLottoCount = value
	}
	if nodes := lrc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottorecord.UserTable,
			Columns: []string{lottorecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lrc.mutation.LottoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottorecord.LottoTable,
			Columns: []string{lottorecord.LottoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lotto.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LottoID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lrc.mutation.LottoPrizeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottorecord.LottoPrizeTable,
			Columns: []string{lottorecord.LottoPrizeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottoprize.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LottoPrizeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LottoRecord.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LottoRecordUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (lrc *LottoRecordCreate) OnConflict(opts ...sql.ConflictOption) *LottoRecordUpsertOne {
	lrc.conflict = opts
	return &LottoRecordUpsertOne{
		create: lrc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LottoRecord.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lrc *LottoRecordCreate) OnConflictColumns(columns ...string) *LottoRecordUpsertOne {
	lrc.conflict = append(lrc.conflict, sql.ConflictColumns(columns...))
	return &LottoRecordUpsertOne{
		create: lrc,
	}
}

type (
	// LottoRecordUpsertOne is the builder for "upsert"-ing
	//  one LottoRecord node.
	LottoRecordUpsertOne struct {
		create *LottoRecordCreate
	}

	// LottoRecordUpsert is the "OnConflict" setter.
	LottoRecordUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *LottoRecordUpsert) SetCreatedBy(v int64) *LottoRecordUpsert {
	u.Set(lottorecord.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *LottoRecordUpsert) UpdateCreatedBy() *LottoRecordUpsert {
	u.SetExcluded(lottorecord.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *LottoRecordUpsert) AddCreatedBy(v int64) *LottoRecordUpsert {
	u.Add(lottorecord.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *LottoRecordUpsert) SetUpdatedBy(v int64) *LottoRecordUpsert {
	u.Set(lottorecord.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *LottoRecordUpsert) UpdateUpdatedBy() *LottoRecordUpsert {
	u.SetExcluded(lottorecord.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *LottoRecordUpsert) AddUpdatedBy(v int64) *LottoRecordUpsert {
	u.Add(lottorecord.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LottoRecordUpsert) SetUpdatedAt(v time.Time) *LottoRecordUpsert {
	u.Set(lottorecord.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LottoRecordUpsert) UpdateUpdatedAt() *LottoRecordUpsert {
	u.SetExcluded(lottorecord.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LottoRecordUpsert) SetDeletedAt(v time.Time) *LottoRecordUpsert {
	u.Set(lottorecord.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LottoRecordUpsert) UpdateDeletedAt() *LottoRecordUpsert {
	u.SetExcluded(lottorecord.FieldDeletedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *LottoRecordUpsert) SetUserID(v int64) *LottoRecordUpsert {
	u.Set(lottorecord.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *LottoRecordUpsert) UpdateUserID() *LottoRecordUpsert {
	u.SetExcluded(lottorecord.FieldUserID)
	return u
}

// SetLottoID sets the "lotto_id" field.
func (u *LottoRecordUpsert) SetLottoID(v int64) *LottoRecordUpsert {
	u.Set(lottorecord.FieldLottoID, v)
	return u
}

// UpdateLottoID sets the "lotto_id" field to the value that was provided on create.
func (u *LottoRecordUpsert) UpdateLottoID() *LottoRecordUpsert {
	u.SetExcluded(lottorecord.FieldLottoID)
	return u
}

// SetResult sets the "result" field.
func (u *LottoRecordUpsert) SetResult(v lottorecord.Result) *LottoRecordUpsert {
	u.Set(lottorecord.FieldResult, v)
	return u
}

// UpdateResult sets the "result" field to the value that was provided on create.
func (u *LottoRecordUpsert) UpdateResult() *LottoRecordUpsert {
	u.SetExcluded(lottorecord.FieldResult)
	return u
}

// SetLottoPrizeID sets the "lotto_prize_id" field.
func (u *LottoRecordUpsert) SetLottoPrizeID(v int64) *LottoRecordUpsert {
	u.Set(lottorecord.FieldLottoPrizeID, v)
	return u
}

// UpdateLottoPrizeID sets the "lotto_prize_id" field to the value that was provided on create.
func (u *LottoRecordUpsert) UpdateLottoPrizeID() *LottoRecordUpsert {
	u.SetExcluded(lottorecord.FieldLottoPrizeID)
	return u
}

// SetStatus sets the "status" field.
func (u *LottoRecordUpsert) SetStatus(v lottorecord.Status) *LottoRecordUpsert {
	u.Set(lottorecord.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *LottoRecordUpsert) UpdateStatus() *LottoRecordUpsert {
	u.SetExcluded(lottorecord.FieldStatus)
	return u
}

// SetRemainLottoCount sets the "remain_lotto_count" field.
func (u *LottoRecordUpsert) SetRemainLottoCount(v int64) *LottoRecordUpsert {
	u.Set(lottorecord.FieldRemainLottoCount, v)
	return u
}

// UpdateRemainLottoCount sets the "remain_lotto_count" field to the value that was provided on create.
func (u *LottoRecordUpsert) UpdateRemainLottoCount() *LottoRecordUpsert {
	u.SetExcluded(lottorecord.FieldRemainLottoCount)
	return u
}

// AddRemainLottoCount adds v to the "remain_lotto_count" field.
func (u *LottoRecordUpsert) AddRemainLottoCount(v int64) *LottoRecordUpsert {
	u.Add(lottorecord.FieldRemainLottoCount, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.LottoRecord.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(lottorecord.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LottoRecordUpsertOne) UpdateNewValues() *LottoRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(lottorecord.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(lottorecord.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LottoRecord.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LottoRecordUpsertOne) Ignore() *LottoRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LottoRecordUpsertOne) DoNothing() *LottoRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LottoRecordCreate.OnConflict
// documentation for more info.
func (u *LottoRecordUpsertOne) Update(set func(*LottoRecordUpsert)) *LottoRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LottoRecordUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *LottoRecordUpsertOne) SetCreatedBy(v int64) *LottoRecordUpsertOne {
	return u.Update(func(s *LottoRecordUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *LottoRecordUpsertOne) AddCreatedBy(v int64) *LottoRecordUpsertOne {
	return u.Update(func(s *LottoRecordUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *LottoRecordUpsertOne) UpdateCreatedBy() *LottoRecordUpsertOne {
	return u.Update(func(s *LottoRecordUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *LottoRecordUpsertOne) SetUpdatedBy(v int64) *LottoRecordUpsertOne {
	return u.Update(func(s *LottoRecordUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *LottoRecordUpsertOne) AddUpdatedBy(v int64) *LottoRecordUpsertOne {
	return u.Update(func(s *LottoRecordUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *LottoRecordUpsertOne) UpdateUpdatedBy() *LottoRecordUpsertOne {
	return u.Update(func(s *LottoRecordUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LottoRecordUpsertOne) SetUpdatedAt(v time.Time) *LottoRecordUpsertOne {
	return u.Update(func(s *LottoRecordUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LottoRecordUpsertOne) UpdateUpdatedAt() *LottoRecordUpsertOne {
	return u.Update(func(s *LottoRecordUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LottoRecordUpsertOne) SetDeletedAt(v time.Time) *LottoRecordUpsertOne {
	return u.Update(func(s *LottoRecordUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LottoRecordUpsertOne) UpdateDeletedAt() *LottoRecordUpsertOne {
	return u.Update(func(s *LottoRecordUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *LottoRecordUpsertOne) SetUserID(v int64) *LottoRecordUpsertOne {
	return u.Update(func(s *LottoRecordUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *LottoRecordUpsertOne) UpdateUserID() *LottoRecordUpsertOne {
	return u.Update(func(s *LottoRecordUpsert) {
		s.UpdateUserID()
	})
}

// SetLottoID sets the "lotto_id" field.
func (u *LottoRecordUpsertOne) SetLottoID(v int64) *LottoRecordUpsertOne {
	return u.Update(func(s *LottoRecordUpsert) {
		s.SetLottoID(v)
	})
}

// UpdateLottoID sets the "lotto_id" field to the value that was provided on create.
func (u *LottoRecordUpsertOne) UpdateLottoID() *LottoRecordUpsertOne {
	return u.Update(func(s *LottoRecordUpsert) {
		s.UpdateLottoID()
	})
}

// SetResult sets the "result" field.
func (u *LottoRecordUpsertOne) SetResult(v lottorecord.Result) *LottoRecordUpsertOne {
	return u.Update(func(s *LottoRecordUpsert) {
		s.SetResult(v)
	})
}

// UpdateResult sets the "result" field to the value that was provided on create.
func (u *LottoRecordUpsertOne) UpdateResult() *LottoRecordUpsertOne {
	return u.Update(func(s *LottoRecordUpsert) {
		s.UpdateResult()
	})
}

// SetLottoPrizeID sets the "lotto_prize_id" field.
func (u *LottoRecordUpsertOne) SetLottoPrizeID(v int64) *LottoRecordUpsertOne {
	return u.Update(func(s *LottoRecordUpsert) {
		s.SetLottoPrizeID(v)
	})
}

// UpdateLottoPrizeID sets the "lotto_prize_id" field to the value that was provided on create.
func (u *LottoRecordUpsertOne) UpdateLottoPrizeID() *LottoRecordUpsertOne {
	return u.Update(func(s *LottoRecordUpsert) {
		s.UpdateLottoPrizeID()
	})
}

// SetStatus sets the "status" field.
func (u *LottoRecordUpsertOne) SetStatus(v lottorecord.Status) *LottoRecordUpsertOne {
	return u.Update(func(s *LottoRecordUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *LottoRecordUpsertOne) UpdateStatus() *LottoRecordUpsertOne {
	return u.Update(func(s *LottoRecordUpsert) {
		s.UpdateStatus()
	})
}

// SetRemainLottoCount sets the "remain_lotto_count" field.
func (u *LottoRecordUpsertOne) SetRemainLottoCount(v int64) *LottoRecordUpsertOne {
	return u.Update(func(s *LottoRecordUpsert) {
		s.SetRemainLottoCount(v)
	})
}

// AddRemainLottoCount adds v to the "remain_lotto_count" field.
func (u *LottoRecordUpsertOne) AddRemainLottoCount(v int64) *LottoRecordUpsertOne {
	return u.Update(func(s *LottoRecordUpsert) {
		s.AddRemainLottoCount(v)
	})
}

// UpdateRemainLottoCount sets the "remain_lotto_count" field to the value that was provided on create.
func (u *LottoRecordUpsertOne) UpdateRemainLottoCount() *LottoRecordUpsertOne {
	return u.Update(func(s *LottoRecordUpsert) {
		s.UpdateRemainLottoCount()
	})
}

// Exec executes the query.
func (u *LottoRecordUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for LottoRecordCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LottoRecordUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LottoRecordUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LottoRecordUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LottoRecordCreateBulk is the builder for creating many LottoRecord entities in bulk.
type LottoRecordCreateBulk struct {
	config
	err      error
	builders []*LottoRecordCreate
	conflict []sql.ConflictOption
}

// Save creates the LottoRecord entities in the database.
func (lrcb *LottoRecordCreateBulk) Save(ctx context.Context) ([]*LottoRecord, error) {
	if lrcb.err != nil {
		return nil, lrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lrcb.builders))
	nodes := make([]*LottoRecord, len(lrcb.builders))
	mutators := make([]Mutator, len(lrcb.builders))
	for i := range lrcb.builders {
		func(i int, root context.Context) {
			builder := lrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LottoRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lrcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lrcb *LottoRecordCreateBulk) SaveX(ctx context.Context) []*LottoRecord {
	v, err := lrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lrcb *LottoRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := lrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lrcb *LottoRecordCreateBulk) ExecX(ctx context.Context) {
	if err := lrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LottoRecord.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LottoRecordUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (lrcb *LottoRecordCreateBulk) OnConflict(opts ...sql.ConflictOption) *LottoRecordUpsertBulk {
	lrcb.conflict = opts
	return &LottoRecordUpsertBulk{
		create: lrcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LottoRecord.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lrcb *LottoRecordCreateBulk) OnConflictColumns(columns ...string) *LottoRecordUpsertBulk {
	lrcb.conflict = append(lrcb.conflict, sql.ConflictColumns(columns...))
	return &LottoRecordUpsertBulk{
		create: lrcb,
	}
}

// LottoRecordUpsertBulk is the builder for "upsert"-ing
// a bulk of LottoRecord nodes.
type LottoRecordUpsertBulk struct {
	create *LottoRecordCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.LottoRecord.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(lottorecord.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LottoRecordUpsertBulk) UpdateNewValues() *LottoRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(lottorecord.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(lottorecord.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LottoRecord.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LottoRecordUpsertBulk) Ignore() *LottoRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LottoRecordUpsertBulk) DoNothing() *LottoRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LottoRecordCreateBulk.OnConflict
// documentation for more info.
func (u *LottoRecordUpsertBulk) Update(set func(*LottoRecordUpsert)) *LottoRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LottoRecordUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *LottoRecordUpsertBulk) SetCreatedBy(v int64) *LottoRecordUpsertBulk {
	return u.Update(func(s *LottoRecordUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *LottoRecordUpsertBulk) AddCreatedBy(v int64) *LottoRecordUpsertBulk {
	return u.Update(func(s *LottoRecordUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *LottoRecordUpsertBulk) UpdateCreatedBy() *LottoRecordUpsertBulk {
	return u.Update(func(s *LottoRecordUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *LottoRecordUpsertBulk) SetUpdatedBy(v int64) *LottoRecordUpsertBulk {
	return u.Update(func(s *LottoRecordUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *LottoRecordUpsertBulk) AddUpdatedBy(v int64) *LottoRecordUpsertBulk {
	return u.Update(func(s *LottoRecordUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *LottoRecordUpsertBulk) UpdateUpdatedBy() *LottoRecordUpsertBulk {
	return u.Update(func(s *LottoRecordUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LottoRecordUpsertBulk) SetUpdatedAt(v time.Time) *LottoRecordUpsertBulk {
	return u.Update(func(s *LottoRecordUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LottoRecordUpsertBulk) UpdateUpdatedAt() *LottoRecordUpsertBulk {
	return u.Update(func(s *LottoRecordUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LottoRecordUpsertBulk) SetDeletedAt(v time.Time) *LottoRecordUpsertBulk {
	return u.Update(func(s *LottoRecordUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LottoRecordUpsertBulk) UpdateDeletedAt() *LottoRecordUpsertBulk {
	return u.Update(func(s *LottoRecordUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *LottoRecordUpsertBulk) SetUserID(v int64) *LottoRecordUpsertBulk {
	return u.Update(func(s *LottoRecordUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *LottoRecordUpsertBulk) UpdateUserID() *LottoRecordUpsertBulk {
	return u.Update(func(s *LottoRecordUpsert) {
		s.UpdateUserID()
	})
}

// SetLottoID sets the "lotto_id" field.
func (u *LottoRecordUpsertBulk) SetLottoID(v int64) *LottoRecordUpsertBulk {
	return u.Update(func(s *LottoRecordUpsert) {
		s.SetLottoID(v)
	})
}

// UpdateLottoID sets the "lotto_id" field to the value that was provided on create.
func (u *LottoRecordUpsertBulk) UpdateLottoID() *LottoRecordUpsertBulk {
	return u.Update(func(s *LottoRecordUpsert) {
		s.UpdateLottoID()
	})
}

// SetResult sets the "result" field.
func (u *LottoRecordUpsertBulk) SetResult(v lottorecord.Result) *LottoRecordUpsertBulk {
	return u.Update(func(s *LottoRecordUpsert) {
		s.SetResult(v)
	})
}

// UpdateResult sets the "result" field to the value that was provided on create.
func (u *LottoRecordUpsertBulk) UpdateResult() *LottoRecordUpsertBulk {
	return u.Update(func(s *LottoRecordUpsert) {
		s.UpdateResult()
	})
}

// SetLottoPrizeID sets the "lotto_prize_id" field.
func (u *LottoRecordUpsertBulk) SetLottoPrizeID(v int64) *LottoRecordUpsertBulk {
	return u.Update(func(s *LottoRecordUpsert) {
		s.SetLottoPrizeID(v)
	})
}

// UpdateLottoPrizeID sets the "lotto_prize_id" field to the value that was provided on create.
func (u *LottoRecordUpsertBulk) UpdateLottoPrizeID() *LottoRecordUpsertBulk {
	return u.Update(func(s *LottoRecordUpsert) {
		s.UpdateLottoPrizeID()
	})
}

// SetStatus sets the "status" field.
func (u *LottoRecordUpsertBulk) SetStatus(v lottorecord.Status) *LottoRecordUpsertBulk {
	return u.Update(func(s *LottoRecordUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *LottoRecordUpsertBulk) UpdateStatus() *LottoRecordUpsertBulk {
	return u.Update(func(s *LottoRecordUpsert) {
		s.UpdateStatus()
	})
}

// SetRemainLottoCount sets the "remain_lotto_count" field.
func (u *LottoRecordUpsertBulk) SetRemainLottoCount(v int64) *LottoRecordUpsertBulk {
	return u.Update(func(s *LottoRecordUpsert) {
		s.SetRemainLottoCount(v)
	})
}

// AddRemainLottoCount adds v to the "remain_lotto_count" field.
func (u *LottoRecordUpsertBulk) AddRemainLottoCount(v int64) *LottoRecordUpsertBulk {
	return u.Update(func(s *LottoRecordUpsert) {
		s.AddRemainLottoCount(v)
	})
}

// UpdateRemainLottoCount sets the "remain_lotto_count" field to the value that was provided on create.
func (u *LottoRecordUpsertBulk) UpdateRemainLottoCount() *LottoRecordUpsertBulk {
	return u.Update(func(s *LottoRecordUpsert) {
		s.UpdateRemainLottoCount()
	})
}

// Exec executes the query.
func (u *LottoRecordUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the LottoRecordCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for LottoRecordCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LottoRecordUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
