// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/device"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/deviceconfig"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// DeviceConfigQuery is the builder for querying DeviceConfig entities.
type DeviceConfigQuery struct {
	config
	ctx        *QueryContext
	order      []deviceconfig.OrderOption
	inters     []Interceptor
	predicates []predicate.DeviceConfig
	withDevice *DeviceQuery
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DeviceConfigQuery builder.
func (dcq *DeviceConfigQuery) Where(ps ...predicate.DeviceConfig) *DeviceConfigQuery {
	dcq.predicates = append(dcq.predicates, ps...)
	return dcq
}

// Limit the number of records to be returned by this query.
func (dcq *DeviceConfigQuery) Limit(limit int) *DeviceConfigQuery {
	dcq.ctx.Limit = &limit
	return dcq
}

// Offset to start from.
func (dcq *DeviceConfigQuery) Offset(offset int) *DeviceConfigQuery {
	dcq.ctx.Offset = &offset
	return dcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (dcq *DeviceConfigQuery) Unique(unique bool) *DeviceConfigQuery {
	dcq.ctx.Unique = &unique
	return dcq
}

// Order specifies how the records should be ordered.
func (dcq *DeviceConfigQuery) Order(o ...deviceconfig.OrderOption) *DeviceConfigQuery {
	dcq.order = append(dcq.order, o...)
	return dcq
}

// QueryDevice chains the current query on the "device" edge.
func (dcq *DeviceConfigQuery) QueryDevice() *DeviceQuery {
	query := (&DeviceClient{config: dcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deviceconfig.Table, deviceconfig.FieldID, selector),
			sqlgraph.To(device.Table, device.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, deviceconfig.DeviceTable, deviceconfig.DeviceColumn),
		)
		fromU = sqlgraph.SetNeighbors(dcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DeviceConfig entity from the query.
// Returns a *NotFoundError when no DeviceConfig was found.
func (dcq *DeviceConfigQuery) First(ctx context.Context) (*DeviceConfig, error) {
	nodes, err := dcq.Limit(1).All(setContextOp(ctx, dcq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{deviceconfig.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (dcq *DeviceConfigQuery) FirstX(ctx context.Context) *DeviceConfig {
	node, err := dcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DeviceConfig ID from the query.
// Returns a *NotFoundError when no DeviceConfig ID was found.
func (dcq *DeviceConfigQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = dcq.Limit(1).IDs(setContextOp(ctx, dcq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{deviceconfig.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (dcq *DeviceConfigQuery) FirstIDX(ctx context.Context) int64 {
	id, err := dcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DeviceConfig entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DeviceConfig entity is found.
// Returns a *NotFoundError when no DeviceConfig entities are found.
func (dcq *DeviceConfigQuery) Only(ctx context.Context) (*DeviceConfig, error) {
	nodes, err := dcq.Limit(2).All(setContextOp(ctx, dcq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{deviceconfig.Label}
	default:
		return nil, &NotSingularError{deviceconfig.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (dcq *DeviceConfigQuery) OnlyX(ctx context.Context) *DeviceConfig {
	node, err := dcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DeviceConfig ID in the query.
// Returns a *NotSingularError when more than one DeviceConfig ID is found.
// Returns a *NotFoundError when no entities are found.
func (dcq *DeviceConfigQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = dcq.Limit(2).IDs(setContextOp(ctx, dcq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{deviceconfig.Label}
	default:
		err = &NotSingularError{deviceconfig.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (dcq *DeviceConfigQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := dcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DeviceConfigs.
func (dcq *DeviceConfigQuery) All(ctx context.Context) ([]*DeviceConfig, error) {
	ctx = setContextOp(ctx, dcq.ctx, "All")
	if err := dcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*DeviceConfig, *DeviceConfigQuery]()
	return withInterceptors[[]*DeviceConfig](ctx, dcq, qr, dcq.inters)
}

// AllX is like All, but panics if an error occurs.
func (dcq *DeviceConfigQuery) AllX(ctx context.Context) []*DeviceConfig {
	nodes, err := dcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DeviceConfig IDs.
func (dcq *DeviceConfigQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if dcq.ctx.Unique == nil && dcq.path != nil {
		dcq.Unique(true)
	}
	ctx = setContextOp(ctx, dcq.ctx, "IDs")
	if err = dcq.Select(deviceconfig.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (dcq *DeviceConfigQuery) IDsX(ctx context.Context) []int64 {
	ids, err := dcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (dcq *DeviceConfigQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, dcq.ctx, "Count")
	if err := dcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, dcq, querierCount[*DeviceConfigQuery](), dcq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (dcq *DeviceConfigQuery) CountX(ctx context.Context) int {
	count, err := dcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (dcq *DeviceConfigQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, dcq.ctx, "Exist")
	switch _, err := dcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("cep_ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (dcq *DeviceConfigQuery) ExistX(ctx context.Context) bool {
	exist, err := dcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DeviceConfigQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (dcq *DeviceConfigQuery) Clone() *DeviceConfigQuery {
	if dcq == nil {
		return nil
	}
	return &DeviceConfigQuery{
		config:     dcq.config,
		ctx:        dcq.ctx.Clone(),
		order:      append([]deviceconfig.OrderOption{}, dcq.order...),
		inters:     append([]Interceptor{}, dcq.inters...),
		predicates: append([]predicate.DeviceConfig{}, dcq.predicates...),
		withDevice: dcq.withDevice.Clone(),
		// clone intermediate query.
		sql:  dcq.sql.Clone(),
		path: dcq.path,
	}
}

// WithDevice tells the query-builder to eager-load the nodes that are connected to
// the "device" edge. The optional arguments are used to configure the query builder of the edge.
func (dcq *DeviceConfigQuery) WithDevice(opts ...func(*DeviceQuery)) *DeviceConfigQuery {
	query := (&DeviceClient{config: dcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dcq.withDevice = query
	return dcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by,string"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DeviceConfig.Query().
//		GroupBy(deviceconfig.FieldCreatedBy).
//		Aggregate(cep_ent.Count()).
//		Scan(ctx, &v)
func (dcq *DeviceConfigQuery) GroupBy(field string, fields ...string) *DeviceConfigGroupBy {
	dcq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DeviceConfigGroupBy{build: dcq}
	grbuild.flds = &dcq.ctx.Fields
	grbuild.label = deviceconfig.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by,string"`
//	}
//
//	client.DeviceConfig.Query().
//		Select(deviceconfig.FieldCreatedBy).
//		Scan(ctx, &v)
func (dcq *DeviceConfigQuery) Select(fields ...string) *DeviceConfigSelect {
	dcq.ctx.Fields = append(dcq.ctx.Fields, fields...)
	sbuild := &DeviceConfigSelect{DeviceConfigQuery: dcq}
	sbuild.label = deviceconfig.Label
	sbuild.flds, sbuild.scan = &dcq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DeviceConfigSelect configured with the given aggregations.
func (dcq *DeviceConfigQuery) Aggregate(fns ...AggregateFunc) *DeviceConfigSelect {
	return dcq.Select().Aggregate(fns...)
}

func (dcq *DeviceConfigQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range dcq.inters {
		if inter == nil {
			return fmt.Errorf("cep_ent: uninitialized interceptor (forgotten import cep_ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, dcq); err != nil {
				return err
			}
		}
	}
	for _, f := range dcq.ctx.Fields {
		if !deviceconfig.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
		}
	}
	if dcq.path != nil {
		prev, err := dcq.path(ctx)
		if err != nil {
			return err
		}
		dcq.sql = prev
	}
	return nil
}

func (dcq *DeviceConfigQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DeviceConfig, error) {
	var (
		nodes       = []*DeviceConfig{}
		_spec       = dcq.querySpec()
		loadedTypes = [1]bool{
			dcq.withDevice != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DeviceConfig).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DeviceConfig{config: dcq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(dcq.modifiers) > 0 {
		_spec.Modifiers = dcq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, dcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := dcq.withDevice; query != nil {
		if err := dcq.loadDevice(ctx, query, nodes, nil,
			func(n *DeviceConfig, e *Device) { n.Edges.Device = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (dcq *DeviceConfigQuery) loadDevice(ctx context.Context, query *DeviceQuery, nodes []*DeviceConfig, init func(*DeviceConfig), assign func(*DeviceConfig, *Device)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*DeviceConfig)
	for i := range nodes {
		fk := nodes[i].DeviceID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(device.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "device_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (dcq *DeviceConfigQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := dcq.querySpec()
	if len(dcq.modifiers) > 0 {
		_spec.Modifiers = dcq.modifiers
	}
	_spec.Node.Columns = dcq.ctx.Fields
	if len(dcq.ctx.Fields) > 0 {
		_spec.Unique = dcq.ctx.Unique != nil && *dcq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, dcq.driver, _spec)
}

func (dcq *DeviceConfigQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(deviceconfig.Table, deviceconfig.Columns, sqlgraph.NewFieldSpec(deviceconfig.FieldID, field.TypeInt64))
	_spec.From = dcq.sql
	if unique := dcq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if dcq.path != nil {
		_spec.Unique = true
	}
	if fields := dcq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deviceconfig.FieldID)
		for i := range fields {
			if fields[i] != deviceconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if dcq.withDevice != nil {
			_spec.Node.AddColumnOnce(deviceconfig.FieldDeviceID)
		}
	}
	if ps := dcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := dcq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := dcq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := dcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (dcq *DeviceConfigQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(dcq.driver.Dialect())
	t1 := builder.Table(deviceconfig.Table)
	columns := dcq.ctx.Fields
	if len(columns) == 0 {
		columns = deviceconfig.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if dcq.sql != nil {
		selector = dcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if dcq.ctx.Unique != nil && *dcq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range dcq.modifiers {
		m(selector)
	}
	for _, p := range dcq.predicates {
		p(selector)
	}
	for _, p := range dcq.order {
		p(selector)
	}
	if offset := dcq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := dcq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (dcq *DeviceConfigQuery) Modify(modifiers ...func(s *sql.Selector)) *DeviceConfigSelect {
	dcq.modifiers = append(dcq.modifiers, modifiers...)
	return dcq.Select()
}

// DeviceConfigGroupBy is the group-by builder for DeviceConfig entities.
type DeviceConfigGroupBy struct {
	selector
	build *DeviceConfigQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dcgb *DeviceConfigGroupBy) Aggregate(fns ...AggregateFunc) *DeviceConfigGroupBy {
	dcgb.fns = append(dcgb.fns, fns...)
	return dcgb
}

// Scan applies the selector query and scans the result into the given value.
func (dcgb *DeviceConfigGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dcgb.build.ctx, "GroupBy")
	if err := dcgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DeviceConfigQuery, *DeviceConfigGroupBy](ctx, dcgb.build, dcgb, dcgb.build.inters, v)
}

func (dcgb *DeviceConfigGroupBy) sqlScan(ctx context.Context, root *DeviceConfigQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(dcgb.fns))
	for _, fn := range dcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*dcgb.flds)+len(dcgb.fns))
		for _, f := range *dcgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*dcgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dcgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DeviceConfigSelect is the builder for selecting fields of DeviceConfig entities.
type DeviceConfigSelect struct {
	*DeviceConfigQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (dcs *DeviceConfigSelect) Aggregate(fns ...AggregateFunc) *DeviceConfigSelect {
	dcs.fns = append(dcs.fns, fns...)
	return dcs
}

// Scan applies the selector query and scans the result into the given value.
func (dcs *DeviceConfigSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dcs.ctx, "Select")
	if err := dcs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DeviceConfigQuery, *DeviceConfigSelect](ctx, dcs.DeviceConfigQuery, dcs, dcs.inters, v)
}

func (dcs *DeviceConfigSelect) sqlScan(ctx context.Context, root *DeviceConfigQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(dcs.fns))
	for _, fn := range dcs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*dcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (dcs *DeviceConfigSelect) Modify(modifiers ...func(s *sql.Selector)) *DeviceConfigSelect {
	dcs.modifiers = append(dcs.modifiers, modifiers...)
	return dcs
}
