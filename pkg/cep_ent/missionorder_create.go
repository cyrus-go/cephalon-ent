// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/bill"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/device"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/mission"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionbatch"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/symbol"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// MissionOrderCreate is the builder for creating a MissionOrder entity.
type MissionOrderCreate struct {
	config
	mutation *MissionOrderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (moc *MissionOrderCreate) SetCreatedBy(i int64) *MissionOrderCreate {
	moc.mutation.SetCreatedBy(i)
	return moc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (moc *MissionOrderCreate) SetNillableCreatedBy(i *int64) *MissionOrderCreate {
	if i != nil {
		moc.SetCreatedBy(*i)
	}
	return moc
}

// SetUpdatedBy sets the "updated_by" field.
func (moc *MissionOrderCreate) SetUpdatedBy(i int64) *MissionOrderCreate {
	moc.mutation.SetUpdatedBy(i)
	return moc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (moc *MissionOrderCreate) SetNillableUpdatedBy(i *int64) *MissionOrderCreate {
	if i != nil {
		moc.SetUpdatedBy(*i)
	}
	return moc
}

// SetCreatedAt sets the "created_at" field.
func (moc *MissionOrderCreate) SetCreatedAt(t time.Time) *MissionOrderCreate {
	moc.mutation.SetCreatedAt(t)
	return moc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (moc *MissionOrderCreate) SetNillableCreatedAt(t *time.Time) *MissionOrderCreate {
	if t != nil {
		moc.SetCreatedAt(*t)
	}
	return moc
}

// SetUpdatedAt sets the "updated_at" field.
func (moc *MissionOrderCreate) SetUpdatedAt(t time.Time) *MissionOrderCreate {
	moc.mutation.SetUpdatedAt(t)
	return moc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (moc *MissionOrderCreate) SetNillableUpdatedAt(t *time.Time) *MissionOrderCreate {
	if t != nil {
		moc.SetUpdatedAt(*t)
	}
	return moc
}

// SetDeletedAt sets the "deleted_at" field.
func (moc *MissionOrderCreate) SetDeletedAt(t time.Time) *MissionOrderCreate {
	moc.mutation.SetDeletedAt(t)
	return moc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (moc *MissionOrderCreate) SetNillableDeletedAt(t *time.Time) *MissionOrderCreate {
	if t != nil {
		moc.SetDeletedAt(*t)
	}
	return moc
}

// SetMissionID sets the "mission_id" field.
func (moc *MissionOrderCreate) SetMissionID(i int64) *MissionOrderCreate {
	moc.mutation.SetMissionID(i)
	return moc
}

// SetNillableMissionID sets the "mission_id" field if the given value is not nil.
func (moc *MissionOrderCreate) SetNillableMissionID(i *int64) *MissionOrderCreate {
	if i != nil {
		moc.SetMissionID(*i)
	}
	return moc
}

// SetStatus sets the "status" field.
func (moc *MissionOrderCreate) SetStatus(eos enums.MissionOrderStatus) *MissionOrderCreate {
	moc.mutation.SetStatus(eos)
	return moc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (moc *MissionOrderCreate) SetNillableStatus(eos *enums.MissionOrderStatus) *MissionOrderCreate {
	if eos != nil {
		moc.SetStatus(*eos)
	}
	return moc
}

// SetSymbolID sets the "symbol_id" field.
func (moc *MissionOrderCreate) SetSymbolID(i int64) *MissionOrderCreate {
	moc.mutation.SetSymbolID(i)
	return moc
}

// SetNillableSymbolID sets the "symbol_id" field if the given value is not nil.
func (moc *MissionOrderCreate) SetNillableSymbolID(i *int64) *MissionOrderCreate {
	if i != nil {
		moc.SetSymbolID(*i)
	}
	return moc
}

// SetConsumeUserID sets the "consume_user_id" field.
func (moc *MissionOrderCreate) SetConsumeUserID(i int64) *MissionOrderCreate {
	moc.mutation.SetConsumeUserID(i)
	return moc
}

// SetNillableConsumeUserID sets the "consume_user_id" field if the given value is not nil.
func (moc *MissionOrderCreate) SetNillableConsumeUserID(i *int64) *MissionOrderCreate {
	if i != nil {
		moc.SetConsumeUserID(*i)
	}
	return moc
}

// SetConsumeAmount sets the "consume_amount" field.
func (moc *MissionOrderCreate) SetConsumeAmount(i int64) *MissionOrderCreate {
	moc.mutation.SetConsumeAmount(i)
	return moc
}

// SetNillableConsumeAmount sets the "consume_amount" field if the given value is not nil.
func (moc *MissionOrderCreate) SetNillableConsumeAmount(i *int64) *MissionOrderCreate {
	if i != nil {
		moc.SetConsumeAmount(*i)
	}
	return moc
}

// SetProduceUserID sets the "produce_user_id" field.
func (moc *MissionOrderCreate) SetProduceUserID(i int64) *MissionOrderCreate {
	moc.mutation.SetProduceUserID(i)
	return moc
}

// SetNillableProduceUserID sets the "produce_user_id" field if the given value is not nil.
func (moc *MissionOrderCreate) SetNillableProduceUserID(i *int64) *MissionOrderCreate {
	if i != nil {
		moc.SetProduceUserID(*i)
	}
	return moc
}

// SetProduceAmount sets the "produce_amount" field.
func (moc *MissionOrderCreate) SetProduceAmount(i int64) *MissionOrderCreate {
	moc.mutation.SetProduceAmount(i)
	return moc
}

// SetNillableProduceAmount sets the "produce_amount" field if the given value is not nil.
func (moc *MissionOrderCreate) SetNillableProduceAmount(i *int64) *MissionOrderCreate {
	if i != nil {
		moc.SetProduceAmount(*i)
	}
	return moc
}

// SetGasAmount sets the "gas_amount" field.
func (moc *MissionOrderCreate) SetGasAmount(i int64) *MissionOrderCreate {
	moc.mutation.SetGasAmount(i)
	return moc
}

// SetNillableGasAmount sets the "gas_amount" field if the given value is not nil.
func (moc *MissionOrderCreate) SetNillableGasAmount(i *int64) *MissionOrderCreate {
	if i != nil {
		moc.SetGasAmount(*i)
	}
	return moc
}

// SetMissionType sets the "mission_type" field.
func (moc *MissionOrderCreate) SetMissionType(et enums.MissionType) *MissionOrderCreate {
	moc.mutation.SetMissionType(et)
	return moc
}

// SetNillableMissionType sets the "mission_type" field if the given value is not nil.
func (moc *MissionOrderCreate) SetNillableMissionType(et *enums.MissionType) *MissionOrderCreate {
	if et != nil {
		moc.SetMissionType(*et)
	}
	return moc
}

// SetMissionBillingType sets the "mission_billing_type" field.
func (moc *MissionOrderCreate) SetMissionBillingType(ebt enums.MissionBillingType) *MissionOrderCreate {
	moc.mutation.SetMissionBillingType(ebt)
	return moc
}

// SetNillableMissionBillingType sets the "mission_billing_type" field if the given value is not nil.
func (moc *MissionOrderCreate) SetNillableMissionBillingType(ebt *enums.MissionBillingType) *MissionOrderCreate {
	if ebt != nil {
		moc.SetMissionBillingType(*ebt)
	}
	return moc
}

// SetCallWay sets the "call_way" field.
func (moc *MissionOrderCreate) SetCallWay(ecw enums.MissionCallWay) *MissionOrderCreate {
	moc.mutation.SetCallWay(ecw)
	return moc
}

// SetNillableCallWay sets the "call_way" field if the given value is not nil.
func (moc *MissionOrderCreate) SetNillableCallWay(ecw *enums.MissionCallWay) *MissionOrderCreate {
	if ecw != nil {
		moc.SetCallWay(*ecw)
	}
	return moc
}

// SetSerialNumber sets the "serial_number" field.
func (moc *MissionOrderCreate) SetSerialNumber(s string) *MissionOrderCreate {
	moc.mutation.SetSerialNumber(s)
	return moc
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (moc *MissionOrderCreate) SetNillableSerialNumber(s *string) *MissionOrderCreate {
	if s != nil {
		moc.SetSerialNumber(*s)
	}
	return moc
}

// SetStartedAt sets the "started_at" field.
func (moc *MissionOrderCreate) SetStartedAt(t time.Time) *MissionOrderCreate {
	moc.mutation.SetStartedAt(t)
	return moc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (moc *MissionOrderCreate) SetNillableStartedAt(t *time.Time) *MissionOrderCreate {
	if t != nil {
		moc.SetStartedAt(*t)
	}
	return moc
}

// SetFinishedAt sets the "finished_at" field.
func (moc *MissionOrderCreate) SetFinishedAt(t time.Time) *MissionOrderCreate {
	moc.mutation.SetFinishedAt(t)
	return moc
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (moc *MissionOrderCreate) SetNillableFinishedAt(t *time.Time) *MissionOrderCreate {
	if t != nil {
		moc.SetFinishedAt(*t)
	}
	return moc
}

// SetBuyDuration sets the "buy_duration" field.
func (moc *MissionOrderCreate) SetBuyDuration(i int64) *MissionOrderCreate {
	moc.mutation.SetBuyDuration(i)
	return moc
}

// SetNillableBuyDuration sets the "buy_duration" field if the given value is not nil.
func (moc *MissionOrderCreate) SetNillableBuyDuration(i *int64) *MissionOrderCreate {
	if i != nil {
		moc.SetBuyDuration(*i)
	}
	return moc
}

// SetPlanStartedAt sets the "plan_started_at" field.
func (moc *MissionOrderCreate) SetPlanStartedAt(t time.Time) *MissionOrderCreate {
	moc.mutation.SetPlanStartedAt(t)
	return moc
}

// SetNillablePlanStartedAt sets the "plan_started_at" field if the given value is not nil.
func (moc *MissionOrderCreate) SetNillablePlanStartedAt(t *time.Time) *MissionOrderCreate {
	if t != nil {
		moc.SetPlanStartedAt(*t)
	}
	return moc
}

// SetPlanFinishedAt sets the "plan_finished_at" field.
func (moc *MissionOrderCreate) SetPlanFinishedAt(t time.Time) *MissionOrderCreate {
	moc.mutation.SetPlanFinishedAt(t)
	return moc
}

// SetNillablePlanFinishedAt sets the "plan_finished_at" field if the given value is not nil.
func (moc *MissionOrderCreate) SetNillablePlanFinishedAt(t *time.Time) *MissionOrderCreate {
	if t != nil {
		moc.SetPlanFinishedAt(*t)
	}
	return moc
}

// SetExpiredWarningTime sets the "expired_warning_time" field.
func (moc *MissionOrderCreate) SetExpiredWarningTime(t time.Time) *MissionOrderCreate {
	moc.mutation.SetExpiredWarningTime(t)
	return moc
}

// SetNillableExpiredWarningTime sets the "expired_warning_time" field if the given value is not nil.
func (moc *MissionOrderCreate) SetNillableExpiredWarningTime(t *time.Time) *MissionOrderCreate {
	if t != nil {
		moc.SetExpiredWarningTime(*t)
	}
	return moc
}

// SetMissionBatchID sets the "mission_batch_id" field.
func (moc *MissionOrderCreate) SetMissionBatchID(i int64) *MissionOrderCreate {
	moc.mutation.SetMissionBatchID(i)
	return moc
}

// SetNillableMissionBatchID sets the "mission_batch_id" field if the given value is not nil.
func (moc *MissionOrderCreate) SetNillableMissionBatchID(i *int64) *MissionOrderCreate {
	if i != nil {
		moc.SetMissionBatchID(*i)
	}
	return moc
}

// SetMissionBatchNumber sets the "mission_batch_number" field.
func (moc *MissionOrderCreate) SetMissionBatchNumber(s string) *MissionOrderCreate {
	moc.mutation.SetMissionBatchNumber(s)
	return moc
}

// SetNillableMissionBatchNumber sets the "mission_batch_number" field if the given value is not nil.
func (moc *MissionOrderCreate) SetNillableMissionBatchNumber(s *string) *MissionOrderCreate {
	if s != nil {
		moc.SetMissionBatchNumber(*s)
	}
	return moc
}

// SetDeviceID sets the "device_id" field.
func (moc *MissionOrderCreate) SetDeviceID(i int64) *MissionOrderCreate {
	moc.mutation.SetDeviceID(i)
	return moc
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (moc *MissionOrderCreate) SetNillableDeviceID(i *int64) *MissionOrderCreate {
	if i != nil {
		moc.SetDeviceID(*i)
	}
	return moc
}

// SetID sets the "id" field.
func (moc *MissionOrderCreate) SetID(i int64) *MissionOrderCreate {
	moc.mutation.SetID(i)
	return moc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (moc *MissionOrderCreate) SetNillableID(i *int64) *MissionOrderCreate {
	if i != nil {
		moc.SetID(*i)
	}
	return moc
}

// SetConsumeUser sets the "consume_user" edge to the User entity.
func (moc *MissionOrderCreate) SetConsumeUser(u *User) *MissionOrderCreate {
	return moc.SetConsumeUserID(u.ID)
}

// SetProduceUser sets the "produce_user" edge to the User entity.
func (moc *MissionOrderCreate) SetProduceUser(u *User) *MissionOrderCreate {
	return moc.SetProduceUserID(u.ID)
}

// SetSymbol sets the "symbol" edge to the Symbol entity.
func (moc *MissionOrderCreate) SetSymbol(s *Symbol) *MissionOrderCreate {
	return moc.SetSymbolID(s.ID)
}

// AddBillIDs adds the "bills" edge to the Bill entity by IDs.
func (moc *MissionOrderCreate) AddBillIDs(ids ...int64) *MissionOrderCreate {
	moc.mutation.AddBillIDs(ids...)
	return moc
}

// AddBills adds the "bills" edges to the Bill entity.
func (moc *MissionOrderCreate) AddBills(b ...*Bill) *MissionOrderCreate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return moc.AddBillIDs(ids...)
}

// SetMissionBatch sets the "mission_batch" edge to the MissionBatch entity.
func (moc *MissionOrderCreate) SetMissionBatch(m *MissionBatch) *MissionOrderCreate {
	return moc.SetMissionBatchID(m.ID)
}

// SetMission sets the "mission" edge to the Mission entity.
func (moc *MissionOrderCreate) SetMission(m *Mission) *MissionOrderCreate {
	return moc.SetMissionID(m.ID)
}

// SetDevice sets the "device" edge to the Device entity.
func (moc *MissionOrderCreate) SetDevice(d *Device) *MissionOrderCreate {
	return moc.SetDeviceID(d.ID)
}

// Mutation returns the MissionOrderMutation object of the builder.
func (moc *MissionOrderCreate) Mutation() *MissionOrderMutation {
	return moc.mutation
}

// Save creates the MissionOrder in the database.
func (moc *MissionOrderCreate) Save(ctx context.Context) (*MissionOrder, error) {
	moc.defaults()
	return withHooks(ctx, moc.sqlSave, moc.mutation, moc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (moc *MissionOrderCreate) SaveX(ctx context.Context) *MissionOrder {
	v, err := moc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (moc *MissionOrderCreate) Exec(ctx context.Context) error {
	_, err := moc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (moc *MissionOrderCreate) ExecX(ctx context.Context) {
	if err := moc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (moc *MissionOrderCreate) defaults() {
	if _, ok := moc.mutation.CreatedBy(); !ok {
		v := missionorder.DefaultCreatedBy
		moc.mutation.SetCreatedBy(v)
	}
	if _, ok := moc.mutation.UpdatedBy(); !ok {
		v := missionorder.DefaultUpdatedBy
		moc.mutation.SetUpdatedBy(v)
	}
	if _, ok := moc.mutation.CreatedAt(); !ok {
		v := missionorder.DefaultCreatedAt()
		moc.mutation.SetCreatedAt(v)
	}
	if _, ok := moc.mutation.UpdatedAt(); !ok {
		v := missionorder.DefaultUpdatedAt()
		moc.mutation.SetUpdatedAt(v)
	}
	if _, ok := moc.mutation.DeletedAt(); !ok {
		v := missionorder.DefaultDeletedAt
		moc.mutation.SetDeletedAt(v)
	}
	if _, ok := moc.mutation.MissionID(); !ok {
		v := missionorder.DefaultMissionID
		moc.mutation.SetMissionID(v)
	}
	if _, ok := moc.mutation.Status(); !ok {
		v := missionorder.DefaultStatus
		moc.mutation.SetStatus(v)
	}
	if _, ok := moc.mutation.SymbolID(); !ok {
		v := missionorder.DefaultSymbolID
		moc.mutation.SetSymbolID(v)
	}
	if _, ok := moc.mutation.ConsumeUserID(); !ok {
		v := missionorder.DefaultConsumeUserID
		moc.mutation.SetConsumeUserID(v)
	}
	if _, ok := moc.mutation.ConsumeAmount(); !ok {
		v := missionorder.DefaultConsumeAmount
		moc.mutation.SetConsumeAmount(v)
	}
	if _, ok := moc.mutation.ProduceUserID(); !ok {
		v := missionorder.DefaultProduceUserID
		moc.mutation.SetProduceUserID(v)
	}
	if _, ok := moc.mutation.ProduceAmount(); !ok {
		v := missionorder.DefaultProduceAmount
		moc.mutation.SetProduceAmount(v)
	}
	if _, ok := moc.mutation.GasAmount(); !ok {
		v := missionorder.DefaultGasAmount
		moc.mutation.SetGasAmount(v)
	}
	if _, ok := moc.mutation.MissionType(); !ok {
		v := missionorder.DefaultMissionType
		moc.mutation.SetMissionType(v)
	}
	if _, ok := moc.mutation.MissionBillingType(); !ok {
		v := missionorder.DefaultMissionBillingType
		moc.mutation.SetMissionBillingType(v)
	}
	if _, ok := moc.mutation.CallWay(); !ok {
		v := missionorder.DefaultCallWay
		moc.mutation.SetCallWay(v)
	}
	if _, ok := moc.mutation.SerialNumber(); !ok {
		v := missionorder.DefaultSerialNumber
		moc.mutation.SetSerialNumber(v)
	}
	if _, ok := moc.mutation.StartedAt(); !ok {
		v := missionorder.DefaultStartedAt
		moc.mutation.SetStartedAt(v)
	}
	if _, ok := moc.mutation.FinishedAt(); !ok {
		v := missionorder.DefaultFinishedAt
		moc.mutation.SetFinishedAt(v)
	}
	if _, ok := moc.mutation.BuyDuration(); !ok {
		v := missionorder.DefaultBuyDuration
		moc.mutation.SetBuyDuration(v)
	}
	if _, ok := moc.mutation.PlanStartedAt(); !ok {
		v := missionorder.DefaultPlanStartedAt
		moc.mutation.SetPlanStartedAt(v)
	}
	if _, ok := moc.mutation.PlanFinishedAt(); !ok {
		v := missionorder.DefaultPlanFinishedAt
		moc.mutation.SetPlanFinishedAt(v)
	}
	if _, ok := moc.mutation.ExpiredWarningTime(); !ok {
		v := missionorder.DefaultExpiredWarningTime
		moc.mutation.SetExpiredWarningTime(v)
	}
	if _, ok := moc.mutation.MissionBatchID(); !ok {
		v := missionorder.DefaultMissionBatchID
		moc.mutation.SetMissionBatchID(v)
	}
	if _, ok := moc.mutation.MissionBatchNumber(); !ok {
		v := missionorder.DefaultMissionBatchNumber
		moc.mutation.SetMissionBatchNumber(v)
	}
	if _, ok := moc.mutation.DeviceID(); !ok {
		v := missionorder.DefaultDeviceID
		moc.mutation.SetDeviceID(v)
	}
	if _, ok := moc.mutation.ID(); !ok {
		v := missionorder.DefaultID()
		moc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (moc *MissionOrderCreate) check() error {
	if _, ok := moc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "MissionOrder.created_by"`)}
	}
	if _, ok := moc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "MissionOrder.updated_by"`)}
	}
	if _, ok := moc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "MissionOrder.created_at"`)}
	}
	if _, ok := moc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "MissionOrder.updated_at"`)}
	}
	if _, ok := moc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "MissionOrder.deleted_at"`)}
	}
	if _, ok := moc.mutation.MissionID(); !ok {
		return &ValidationError{Name: "mission_id", err: errors.New(`cep_ent: missing required field "MissionOrder.mission_id"`)}
	}
	if _, ok := moc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`cep_ent: missing required field "MissionOrder.status"`)}
	}
	if v, ok := moc.mutation.Status(); ok {
		if err := missionorder.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "MissionOrder.status": %w`, err)}
		}
	}
	if _, ok := moc.mutation.SymbolID(); !ok {
		return &ValidationError{Name: "symbol_id", err: errors.New(`cep_ent: missing required field "MissionOrder.symbol_id"`)}
	}
	if _, ok := moc.mutation.ConsumeUserID(); !ok {
		return &ValidationError{Name: "consume_user_id", err: errors.New(`cep_ent: missing required field "MissionOrder.consume_user_id"`)}
	}
	if _, ok := moc.mutation.ConsumeAmount(); !ok {
		return &ValidationError{Name: "consume_amount", err: errors.New(`cep_ent: missing required field "MissionOrder.consume_amount"`)}
	}
	if _, ok := moc.mutation.ProduceUserID(); !ok {
		return &ValidationError{Name: "produce_user_id", err: errors.New(`cep_ent: missing required field "MissionOrder.produce_user_id"`)}
	}
	if _, ok := moc.mutation.ProduceAmount(); !ok {
		return &ValidationError{Name: "produce_amount", err: errors.New(`cep_ent: missing required field "MissionOrder.produce_amount"`)}
	}
	if _, ok := moc.mutation.GasAmount(); !ok {
		return &ValidationError{Name: "gas_amount", err: errors.New(`cep_ent: missing required field "MissionOrder.gas_amount"`)}
	}
	if _, ok := moc.mutation.MissionType(); !ok {
		return &ValidationError{Name: "mission_type", err: errors.New(`cep_ent: missing required field "MissionOrder.mission_type"`)}
	}
	if v, ok := moc.mutation.MissionType(); ok {
		if err := missionorder.MissionTypeValidator(v); err != nil {
			return &ValidationError{Name: "mission_type", err: fmt.Errorf(`cep_ent: validator failed for field "MissionOrder.mission_type": %w`, err)}
		}
	}
	if _, ok := moc.mutation.MissionBillingType(); !ok {
		return &ValidationError{Name: "mission_billing_type", err: errors.New(`cep_ent: missing required field "MissionOrder.mission_billing_type"`)}
	}
	if v, ok := moc.mutation.MissionBillingType(); ok {
		if err := missionorder.MissionBillingTypeValidator(v); err != nil {
			return &ValidationError{Name: "mission_billing_type", err: fmt.Errorf(`cep_ent: validator failed for field "MissionOrder.mission_billing_type": %w`, err)}
		}
	}
	if _, ok := moc.mutation.CallWay(); !ok {
		return &ValidationError{Name: "call_way", err: errors.New(`cep_ent: missing required field "MissionOrder.call_way"`)}
	}
	if v, ok := moc.mutation.CallWay(); ok {
		if err := missionorder.CallWayValidator(v); err != nil {
			return &ValidationError{Name: "call_way", err: fmt.Errorf(`cep_ent: validator failed for field "MissionOrder.call_way": %w`, err)}
		}
	}
	if _, ok := moc.mutation.SerialNumber(); !ok {
		return &ValidationError{Name: "serial_number", err: errors.New(`cep_ent: missing required field "MissionOrder.serial_number"`)}
	}
	if _, ok := moc.mutation.StartedAt(); !ok {
		return &ValidationError{Name: "started_at", err: errors.New(`cep_ent: missing required field "MissionOrder.started_at"`)}
	}
	if _, ok := moc.mutation.FinishedAt(); !ok {
		return &ValidationError{Name: "finished_at", err: errors.New(`cep_ent: missing required field "MissionOrder.finished_at"`)}
	}
	if _, ok := moc.mutation.BuyDuration(); !ok {
		return &ValidationError{Name: "buy_duration", err: errors.New(`cep_ent: missing required field "MissionOrder.buy_duration"`)}
	}
	if _, ok := moc.mutation.MissionBatchID(); !ok {
		return &ValidationError{Name: "mission_batch_id", err: errors.New(`cep_ent: missing required field "MissionOrder.mission_batch_id"`)}
	}
	if _, ok := moc.mutation.MissionBatchNumber(); !ok {
		return &ValidationError{Name: "mission_batch_number", err: errors.New(`cep_ent: missing required field "MissionOrder.mission_batch_number"`)}
	}
	if _, ok := moc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`cep_ent: missing required field "MissionOrder.device_id"`)}
	}
	if _, ok := moc.mutation.ConsumeUserID(); !ok {
		return &ValidationError{Name: "consume_user", err: errors.New(`cep_ent: missing required edge "MissionOrder.consume_user"`)}
	}
	if _, ok := moc.mutation.ProduceUserID(); !ok {
		return &ValidationError{Name: "produce_user", err: errors.New(`cep_ent: missing required edge "MissionOrder.produce_user"`)}
	}
	if _, ok := moc.mutation.SymbolID(); !ok {
		return &ValidationError{Name: "symbol", err: errors.New(`cep_ent: missing required edge "MissionOrder.symbol"`)}
	}
	if _, ok := moc.mutation.MissionBatchID(); !ok {
		return &ValidationError{Name: "mission_batch", err: errors.New(`cep_ent: missing required edge "MissionOrder.mission_batch"`)}
	}
	if _, ok := moc.mutation.MissionID(); !ok {
		return &ValidationError{Name: "mission", err: errors.New(`cep_ent: missing required edge "MissionOrder.mission"`)}
	}
	if _, ok := moc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device", err: errors.New(`cep_ent: missing required edge "MissionOrder.device"`)}
	}
	return nil
}

func (moc *MissionOrderCreate) sqlSave(ctx context.Context) (*MissionOrder, error) {
	if err := moc.check(); err != nil {
		return nil, err
	}
	_node, _spec := moc.createSpec()
	if err := sqlgraph.CreateNode(ctx, moc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	moc.mutation.id = &_node.ID
	moc.mutation.done = true
	return _node, nil
}

func (moc *MissionOrderCreate) createSpec() (*MissionOrder, *sqlgraph.CreateSpec) {
	var (
		_node = &MissionOrder{config: moc.config}
		_spec = sqlgraph.NewCreateSpec(missionorder.Table, sqlgraph.NewFieldSpec(missionorder.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = moc.conflict
	if id, ok := moc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := moc.mutation.CreatedBy(); ok {
		_spec.SetField(missionorder.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := moc.mutation.UpdatedBy(); ok {
		_spec.SetField(missionorder.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := moc.mutation.CreatedAt(); ok {
		_spec.SetField(missionorder.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := moc.mutation.UpdatedAt(); ok {
		_spec.SetField(missionorder.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := moc.mutation.DeletedAt(); ok {
		_spec.SetField(missionorder.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := moc.mutation.Status(); ok {
		_spec.SetField(missionorder.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := moc.mutation.ConsumeAmount(); ok {
		_spec.SetField(missionorder.FieldConsumeAmount, field.TypeInt64, value)
		_node.ConsumeAmount = value
	}
	if value, ok := moc.mutation.ProduceAmount(); ok {
		_spec.SetField(missionorder.FieldProduceAmount, field.TypeInt64, value)
		_node.ProduceAmount = value
	}
	if value, ok := moc.mutation.GasAmount(); ok {
		_spec.SetField(missionorder.FieldGasAmount, field.TypeInt64, value)
		_node.GasAmount = value
	}
	if value, ok := moc.mutation.MissionType(); ok {
		_spec.SetField(missionorder.FieldMissionType, field.TypeEnum, value)
		_node.MissionType = value
	}
	if value, ok := moc.mutation.MissionBillingType(); ok {
		_spec.SetField(missionorder.FieldMissionBillingType, field.TypeEnum, value)
		_node.MissionBillingType = value
	}
	if value, ok := moc.mutation.CallWay(); ok {
		_spec.SetField(missionorder.FieldCallWay, field.TypeEnum, value)
		_node.CallWay = value
	}
	if value, ok := moc.mutation.SerialNumber(); ok {
		_spec.SetField(missionorder.FieldSerialNumber, field.TypeString, value)
		_node.SerialNumber = value
	}
	if value, ok := moc.mutation.StartedAt(); ok {
		_spec.SetField(missionorder.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := moc.mutation.FinishedAt(); ok {
		_spec.SetField(missionorder.FieldFinishedAt, field.TypeTime, value)
		_node.FinishedAt = value
	}
	if value, ok := moc.mutation.BuyDuration(); ok {
		_spec.SetField(missionorder.FieldBuyDuration, field.TypeInt64, value)
		_node.BuyDuration = value
	}
	if value, ok := moc.mutation.PlanStartedAt(); ok {
		_spec.SetField(missionorder.FieldPlanStartedAt, field.TypeTime, value)
		_node.PlanStartedAt = &value
	}
	if value, ok := moc.mutation.PlanFinishedAt(); ok {
		_spec.SetField(missionorder.FieldPlanFinishedAt, field.TypeTime, value)
		_node.PlanFinishedAt = &value
	}
	if value, ok := moc.mutation.ExpiredWarningTime(); ok {
		_spec.SetField(missionorder.FieldExpiredWarningTime, field.TypeTime, value)
		_node.ExpiredWarningTime = &value
	}
	if value, ok := moc.mutation.MissionBatchNumber(); ok {
		_spec.SetField(missionorder.FieldMissionBatchNumber, field.TypeString, value)
		_node.MissionBatchNumber = value
	}
	if nodes := moc.mutation.ConsumeUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionorder.ConsumeUserTable,
			Columns: []string{missionorder.ConsumeUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ConsumeUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := moc.mutation.ProduceUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionorder.ProduceUserTable,
			Columns: []string{missionorder.ProduceUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProduceUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := moc.mutation.SymbolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionorder.SymbolTable,
			Columns: []string{missionorder.SymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SymbolID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := moc.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionorder.BillsTable,
			Columns: []string{missionorder.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := moc.mutation.MissionBatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionorder.MissionBatchTable,
			Columns: []string{missionorder.MissionBatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionbatch.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MissionBatchID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := moc.mutation.MissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionorder.MissionTable,
			Columns: []string{missionorder.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MissionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := moc.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionorder.DeviceTable,
			Columns: []string{missionorder.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DeviceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MissionOrder.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MissionOrderUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (moc *MissionOrderCreate) OnConflict(opts ...sql.ConflictOption) *MissionOrderUpsertOne {
	moc.conflict = opts
	return &MissionOrderUpsertOne{
		create: moc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MissionOrder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (moc *MissionOrderCreate) OnConflictColumns(columns ...string) *MissionOrderUpsertOne {
	moc.conflict = append(moc.conflict, sql.ConflictColumns(columns...))
	return &MissionOrderUpsertOne{
		create: moc,
	}
}

type (
	// MissionOrderUpsertOne is the builder for "upsert"-ing
	//  one MissionOrder node.
	MissionOrderUpsertOne struct {
		create *MissionOrderCreate
	}

	// MissionOrderUpsert is the "OnConflict" setter.
	MissionOrderUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *MissionOrderUpsert) SetCreatedBy(v int64) *MissionOrderUpsert {
	u.Set(missionorder.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MissionOrderUpsert) UpdateCreatedBy() *MissionOrderUpsert {
	u.SetExcluded(missionorder.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *MissionOrderUpsert) AddCreatedBy(v int64) *MissionOrderUpsert {
	u.Add(missionorder.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MissionOrderUpsert) SetUpdatedBy(v int64) *MissionOrderUpsert {
	u.Set(missionorder.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MissionOrderUpsert) UpdateUpdatedBy() *MissionOrderUpsert {
	u.SetExcluded(missionorder.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MissionOrderUpsert) AddUpdatedBy(v int64) *MissionOrderUpsert {
	u.Add(missionorder.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MissionOrderUpsert) SetUpdatedAt(v time.Time) *MissionOrderUpsert {
	u.Set(missionorder.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MissionOrderUpsert) UpdateUpdatedAt() *MissionOrderUpsert {
	u.SetExcluded(missionorder.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MissionOrderUpsert) SetDeletedAt(v time.Time) *MissionOrderUpsert {
	u.Set(missionorder.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MissionOrderUpsert) UpdateDeletedAt() *MissionOrderUpsert {
	u.SetExcluded(missionorder.FieldDeletedAt)
	return u
}

// SetMissionID sets the "mission_id" field.
func (u *MissionOrderUpsert) SetMissionID(v int64) *MissionOrderUpsert {
	u.Set(missionorder.FieldMissionID, v)
	return u
}

// UpdateMissionID sets the "mission_id" field to the value that was provided on create.
func (u *MissionOrderUpsert) UpdateMissionID() *MissionOrderUpsert {
	u.SetExcluded(missionorder.FieldMissionID)
	return u
}

// SetStatus sets the "status" field.
func (u *MissionOrderUpsert) SetStatus(v enums.MissionOrderStatus) *MissionOrderUpsert {
	u.Set(missionorder.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MissionOrderUpsert) UpdateStatus() *MissionOrderUpsert {
	u.SetExcluded(missionorder.FieldStatus)
	return u
}

// SetSymbolID sets the "symbol_id" field.
func (u *MissionOrderUpsert) SetSymbolID(v int64) *MissionOrderUpsert {
	u.Set(missionorder.FieldSymbolID, v)
	return u
}

// UpdateSymbolID sets the "symbol_id" field to the value that was provided on create.
func (u *MissionOrderUpsert) UpdateSymbolID() *MissionOrderUpsert {
	u.SetExcluded(missionorder.FieldSymbolID)
	return u
}

// SetConsumeUserID sets the "consume_user_id" field.
func (u *MissionOrderUpsert) SetConsumeUserID(v int64) *MissionOrderUpsert {
	u.Set(missionorder.FieldConsumeUserID, v)
	return u
}

// UpdateConsumeUserID sets the "consume_user_id" field to the value that was provided on create.
func (u *MissionOrderUpsert) UpdateConsumeUserID() *MissionOrderUpsert {
	u.SetExcluded(missionorder.FieldConsumeUserID)
	return u
}

// SetConsumeAmount sets the "consume_amount" field.
func (u *MissionOrderUpsert) SetConsumeAmount(v int64) *MissionOrderUpsert {
	u.Set(missionorder.FieldConsumeAmount, v)
	return u
}

// UpdateConsumeAmount sets the "consume_amount" field to the value that was provided on create.
func (u *MissionOrderUpsert) UpdateConsumeAmount() *MissionOrderUpsert {
	u.SetExcluded(missionorder.FieldConsumeAmount)
	return u
}

// AddConsumeAmount adds v to the "consume_amount" field.
func (u *MissionOrderUpsert) AddConsumeAmount(v int64) *MissionOrderUpsert {
	u.Add(missionorder.FieldConsumeAmount, v)
	return u
}

// SetProduceUserID sets the "produce_user_id" field.
func (u *MissionOrderUpsert) SetProduceUserID(v int64) *MissionOrderUpsert {
	u.Set(missionorder.FieldProduceUserID, v)
	return u
}

// UpdateProduceUserID sets the "produce_user_id" field to the value that was provided on create.
func (u *MissionOrderUpsert) UpdateProduceUserID() *MissionOrderUpsert {
	u.SetExcluded(missionorder.FieldProduceUserID)
	return u
}

// SetProduceAmount sets the "produce_amount" field.
func (u *MissionOrderUpsert) SetProduceAmount(v int64) *MissionOrderUpsert {
	u.Set(missionorder.FieldProduceAmount, v)
	return u
}

// UpdateProduceAmount sets the "produce_amount" field to the value that was provided on create.
func (u *MissionOrderUpsert) UpdateProduceAmount() *MissionOrderUpsert {
	u.SetExcluded(missionorder.FieldProduceAmount)
	return u
}

// AddProduceAmount adds v to the "produce_amount" field.
func (u *MissionOrderUpsert) AddProduceAmount(v int64) *MissionOrderUpsert {
	u.Add(missionorder.FieldProduceAmount, v)
	return u
}

// SetGasAmount sets the "gas_amount" field.
func (u *MissionOrderUpsert) SetGasAmount(v int64) *MissionOrderUpsert {
	u.Set(missionorder.FieldGasAmount, v)
	return u
}

// UpdateGasAmount sets the "gas_amount" field to the value that was provided on create.
func (u *MissionOrderUpsert) UpdateGasAmount() *MissionOrderUpsert {
	u.SetExcluded(missionorder.FieldGasAmount)
	return u
}

// AddGasAmount adds v to the "gas_amount" field.
func (u *MissionOrderUpsert) AddGasAmount(v int64) *MissionOrderUpsert {
	u.Add(missionorder.FieldGasAmount, v)
	return u
}

// SetMissionType sets the "mission_type" field.
func (u *MissionOrderUpsert) SetMissionType(v enums.MissionType) *MissionOrderUpsert {
	u.Set(missionorder.FieldMissionType, v)
	return u
}

// UpdateMissionType sets the "mission_type" field to the value that was provided on create.
func (u *MissionOrderUpsert) UpdateMissionType() *MissionOrderUpsert {
	u.SetExcluded(missionorder.FieldMissionType)
	return u
}

// SetMissionBillingType sets the "mission_billing_type" field.
func (u *MissionOrderUpsert) SetMissionBillingType(v enums.MissionBillingType) *MissionOrderUpsert {
	u.Set(missionorder.FieldMissionBillingType, v)
	return u
}

// UpdateMissionBillingType sets the "mission_billing_type" field to the value that was provided on create.
func (u *MissionOrderUpsert) UpdateMissionBillingType() *MissionOrderUpsert {
	u.SetExcluded(missionorder.FieldMissionBillingType)
	return u
}

// SetCallWay sets the "call_way" field.
func (u *MissionOrderUpsert) SetCallWay(v enums.MissionCallWay) *MissionOrderUpsert {
	u.Set(missionorder.FieldCallWay, v)
	return u
}

// UpdateCallWay sets the "call_way" field to the value that was provided on create.
func (u *MissionOrderUpsert) UpdateCallWay() *MissionOrderUpsert {
	u.SetExcluded(missionorder.FieldCallWay)
	return u
}

// SetSerialNumber sets the "serial_number" field.
func (u *MissionOrderUpsert) SetSerialNumber(v string) *MissionOrderUpsert {
	u.Set(missionorder.FieldSerialNumber, v)
	return u
}

// UpdateSerialNumber sets the "serial_number" field to the value that was provided on create.
func (u *MissionOrderUpsert) UpdateSerialNumber() *MissionOrderUpsert {
	u.SetExcluded(missionorder.FieldSerialNumber)
	return u
}

// SetStartedAt sets the "started_at" field.
func (u *MissionOrderUpsert) SetStartedAt(v time.Time) *MissionOrderUpsert {
	u.Set(missionorder.FieldStartedAt, v)
	return u
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *MissionOrderUpsert) UpdateStartedAt() *MissionOrderUpsert {
	u.SetExcluded(missionorder.FieldStartedAt)
	return u
}

// SetFinishedAt sets the "finished_at" field.
func (u *MissionOrderUpsert) SetFinishedAt(v time.Time) *MissionOrderUpsert {
	u.Set(missionorder.FieldFinishedAt, v)
	return u
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *MissionOrderUpsert) UpdateFinishedAt() *MissionOrderUpsert {
	u.SetExcluded(missionorder.FieldFinishedAt)
	return u
}

// SetBuyDuration sets the "buy_duration" field.
func (u *MissionOrderUpsert) SetBuyDuration(v int64) *MissionOrderUpsert {
	u.Set(missionorder.FieldBuyDuration, v)
	return u
}

// UpdateBuyDuration sets the "buy_duration" field to the value that was provided on create.
func (u *MissionOrderUpsert) UpdateBuyDuration() *MissionOrderUpsert {
	u.SetExcluded(missionorder.FieldBuyDuration)
	return u
}

// AddBuyDuration adds v to the "buy_duration" field.
func (u *MissionOrderUpsert) AddBuyDuration(v int64) *MissionOrderUpsert {
	u.Add(missionorder.FieldBuyDuration, v)
	return u
}

// SetPlanStartedAt sets the "plan_started_at" field.
func (u *MissionOrderUpsert) SetPlanStartedAt(v time.Time) *MissionOrderUpsert {
	u.Set(missionorder.FieldPlanStartedAt, v)
	return u
}

// UpdatePlanStartedAt sets the "plan_started_at" field to the value that was provided on create.
func (u *MissionOrderUpsert) UpdatePlanStartedAt() *MissionOrderUpsert {
	u.SetExcluded(missionorder.FieldPlanStartedAt)
	return u
}

// ClearPlanStartedAt clears the value of the "plan_started_at" field.
func (u *MissionOrderUpsert) ClearPlanStartedAt() *MissionOrderUpsert {
	u.SetNull(missionorder.FieldPlanStartedAt)
	return u
}

// SetPlanFinishedAt sets the "plan_finished_at" field.
func (u *MissionOrderUpsert) SetPlanFinishedAt(v time.Time) *MissionOrderUpsert {
	u.Set(missionorder.FieldPlanFinishedAt, v)
	return u
}

// UpdatePlanFinishedAt sets the "plan_finished_at" field to the value that was provided on create.
func (u *MissionOrderUpsert) UpdatePlanFinishedAt() *MissionOrderUpsert {
	u.SetExcluded(missionorder.FieldPlanFinishedAt)
	return u
}

// ClearPlanFinishedAt clears the value of the "plan_finished_at" field.
func (u *MissionOrderUpsert) ClearPlanFinishedAt() *MissionOrderUpsert {
	u.SetNull(missionorder.FieldPlanFinishedAt)
	return u
}

// SetExpiredWarningTime sets the "expired_warning_time" field.
func (u *MissionOrderUpsert) SetExpiredWarningTime(v time.Time) *MissionOrderUpsert {
	u.Set(missionorder.FieldExpiredWarningTime, v)
	return u
}

// UpdateExpiredWarningTime sets the "expired_warning_time" field to the value that was provided on create.
func (u *MissionOrderUpsert) UpdateExpiredWarningTime() *MissionOrderUpsert {
	u.SetExcluded(missionorder.FieldExpiredWarningTime)
	return u
}

// ClearExpiredWarningTime clears the value of the "expired_warning_time" field.
func (u *MissionOrderUpsert) ClearExpiredWarningTime() *MissionOrderUpsert {
	u.SetNull(missionorder.FieldExpiredWarningTime)
	return u
}

// SetMissionBatchID sets the "mission_batch_id" field.
func (u *MissionOrderUpsert) SetMissionBatchID(v int64) *MissionOrderUpsert {
	u.Set(missionorder.FieldMissionBatchID, v)
	return u
}

// UpdateMissionBatchID sets the "mission_batch_id" field to the value that was provided on create.
func (u *MissionOrderUpsert) UpdateMissionBatchID() *MissionOrderUpsert {
	u.SetExcluded(missionorder.FieldMissionBatchID)
	return u
}

// SetMissionBatchNumber sets the "mission_batch_number" field.
func (u *MissionOrderUpsert) SetMissionBatchNumber(v string) *MissionOrderUpsert {
	u.Set(missionorder.FieldMissionBatchNumber, v)
	return u
}

// UpdateMissionBatchNumber sets the "mission_batch_number" field to the value that was provided on create.
func (u *MissionOrderUpsert) UpdateMissionBatchNumber() *MissionOrderUpsert {
	u.SetExcluded(missionorder.FieldMissionBatchNumber)
	return u
}

// SetDeviceID sets the "device_id" field.
func (u *MissionOrderUpsert) SetDeviceID(v int64) *MissionOrderUpsert {
	u.Set(missionorder.FieldDeviceID, v)
	return u
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *MissionOrderUpsert) UpdateDeviceID() *MissionOrderUpsert {
	u.SetExcluded(missionorder.FieldDeviceID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MissionOrder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(missionorder.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MissionOrderUpsertOne) UpdateNewValues() *MissionOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(missionorder.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(missionorder.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MissionOrder.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MissionOrderUpsertOne) Ignore() *MissionOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MissionOrderUpsertOne) DoNothing() *MissionOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MissionOrderCreate.OnConflict
// documentation for more info.
func (u *MissionOrderUpsertOne) Update(set func(*MissionOrderUpsert)) *MissionOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MissionOrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *MissionOrderUpsertOne) SetCreatedBy(v int64) *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *MissionOrderUpsertOne) AddCreatedBy(v int64) *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MissionOrderUpsertOne) UpdateCreatedBy() *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MissionOrderUpsertOne) SetUpdatedBy(v int64) *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MissionOrderUpsertOne) AddUpdatedBy(v int64) *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MissionOrderUpsertOne) UpdateUpdatedBy() *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MissionOrderUpsertOne) SetUpdatedAt(v time.Time) *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MissionOrderUpsertOne) UpdateUpdatedAt() *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MissionOrderUpsertOne) SetDeletedAt(v time.Time) *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MissionOrderUpsertOne) UpdateDeletedAt() *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetMissionID sets the "mission_id" field.
func (u *MissionOrderUpsertOne) SetMissionID(v int64) *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetMissionID(v)
	})
}

// UpdateMissionID sets the "mission_id" field to the value that was provided on create.
func (u *MissionOrderUpsertOne) UpdateMissionID() *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateMissionID()
	})
}

// SetStatus sets the "status" field.
func (u *MissionOrderUpsertOne) SetStatus(v enums.MissionOrderStatus) *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MissionOrderUpsertOne) UpdateStatus() *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateStatus()
	})
}

// SetSymbolID sets the "symbol_id" field.
func (u *MissionOrderUpsertOne) SetSymbolID(v int64) *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetSymbolID(v)
	})
}

// UpdateSymbolID sets the "symbol_id" field to the value that was provided on create.
func (u *MissionOrderUpsertOne) UpdateSymbolID() *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateSymbolID()
	})
}

// SetConsumeUserID sets the "consume_user_id" field.
func (u *MissionOrderUpsertOne) SetConsumeUserID(v int64) *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetConsumeUserID(v)
	})
}

// UpdateConsumeUserID sets the "consume_user_id" field to the value that was provided on create.
func (u *MissionOrderUpsertOne) UpdateConsumeUserID() *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateConsumeUserID()
	})
}

// SetConsumeAmount sets the "consume_amount" field.
func (u *MissionOrderUpsertOne) SetConsumeAmount(v int64) *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetConsumeAmount(v)
	})
}

// AddConsumeAmount adds v to the "consume_amount" field.
func (u *MissionOrderUpsertOne) AddConsumeAmount(v int64) *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.AddConsumeAmount(v)
	})
}

// UpdateConsumeAmount sets the "consume_amount" field to the value that was provided on create.
func (u *MissionOrderUpsertOne) UpdateConsumeAmount() *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateConsumeAmount()
	})
}

// SetProduceUserID sets the "produce_user_id" field.
func (u *MissionOrderUpsertOne) SetProduceUserID(v int64) *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetProduceUserID(v)
	})
}

// UpdateProduceUserID sets the "produce_user_id" field to the value that was provided on create.
func (u *MissionOrderUpsertOne) UpdateProduceUserID() *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateProduceUserID()
	})
}

// SetProduceAmount sets the "produce_amount" field.
func (u *MissionOrderUpsertOne) SetProduceAmount(v int64) *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetProduceAmount(v)
	})
}

// AddProduceAmount adds v to the "produce_amount" field.
func (u *MissionOrderUpsertOne) AddProduceAmount(v int64) *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.AddProduceAmount(v)
	})
}

// UpdateProduceAmount sets the "produce_amount" field to the value that was provided on create.
func (u *MissionOrderUpsertOne) UpdateProduceAmount() *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateProduceAmount()
	})
}

// SetGasAmount sets the "gas_amount" field.
func (u *MissionOrderUpsertOne) SetGasAmount(v int64) *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetGasAmount(v)
	})
}

// AddGasAmount adds v to the "gas_amount" field.
func (u *MissionOrderUpsertOne) AddGasAmount(v int64) *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.AddGasAmount(v)
	})
}

// UpdateGasAmount sets the "gas_amount" field to the value that was provided on create.
func (u *MissionOrderUpsertOne) UpdateGasAmount() *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateGasAmount()
	})
}

// SetMissionType sets the "mission_type" field.
func (u *MissionOrderUpsertOne) SetMissionType(v enums.MissionType) *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetMissionType(v)
	})
}

// UpdateMissionType sets the "mission_type" field to the value that was provided on create.
func (u *MissionOrderUpsertOne) UpdateMissionType() *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateMissionType()
	})
}

// SetMissionBillingType sets the "mission_billing_type" field.
func (u *MissionOrderUpsertOne) SetMissionBillingType(v enums.MissionBillingType) *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetMissionBillingType(v)
	})
}

// UpdateMissionBillingType sets the "mission_billing_type" field to the value that was provided on create.
func (u *MissionOrderUpsertOne) UpdateMissionBillingType() *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateMissionBillingType()
	})
}

// SetCallWay sets the "call_way" field.
func (u *MissionOrderUpsertOne) SetCallWay(v enums.MissionCallWay) *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetCallWay(v)
	})
}

// UpdateCallWay sets the "call_way" field to the value that was provided on create.
func (u *MissionOrderUpsertOne) UpdateCallWay() *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateCallWay()
	})
}

// SetSerialNumber sets the "serial_number" field.
func (u *MissionOrderUpsertOne) SetSerialNumber(v string) *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetSerialNumber(v)
	})
}

// UpdateSerialNumber sets the "serial_number" field to the value that was provided on create.
func (u *MissionOrderUpsertOne) UpdateSerialNumber() *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateSerialNumber()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *MissionOrderUpsertOne) SetStartedAt(v time.Time) *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *MissionOrderUpsertOne) UpdateStartedAt() *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateStartedAt()
	})
}

// SetFinishedAt sets the "finished_at" field.
func (u *MissionOrderUpsertOne) SetFinishedAt(v time.Time) *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetFinishedAt(v)
	})
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *MissionOrderUpsertOne) UpdateFinishedAt() *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateFinishedAt()
	})
}

// SetBuyDuration sets the "buy_duration" field.
func (u *MissionOrderUpsertOne) SetBuyDuration(v int64) *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetBuyDuration(v)
	})
}

// AddBuyDuration adds v to the "buy_duration" field.
func (u *MissionOrderUpsertOne) AddBuyDuration(v int64) *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.AddBuyDuration(v)
	})
}

// UpdateBuyDuration sets the "buy_duration" field to the value that was provided on create.
func (u *MissionOrderUpsertOne) UpdateBuyDuration() *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateBuyDuration()
	})
}

// SetPlanStartedAt sets the "plan_started_at" field.
func (u *MissionOrderUpsertOne) SetPlanStartedAt(v time.Time) *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetPlanStartedAt(v)
	})
}

// UpdatePlanStartedAt sets the "plan_started_at" field to the value that was provided on create.
func (u *MissionOrderUpsertOne) UpdatePlanStartedAt() *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdatePlanStartedAt()
	})
}

// ClearPlanStartedAt clears the value of the "plan_started_at" field.
func (u *MissionOrderUpsertOne) ClearPlanStartedAt() *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.ClearPlanStartedAt()
	})
}

// SetPlanFinishedAt sets the "plan_finished_at" field.
func (u *MissionOrderUpsertOne) SetPlanFinishedAt(v time.Time) *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetPlanFinishedAt(v)
	})
}

// UpdatePlanFinishedAt sets the "plan_finished_at" field to the value that was provided on create.
func (u *MissionOrderUpsertOne) UpdatePlanFinishedAt() *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdatePlanFinishedAt()
	})
}

// ClearPlanFinishedAt clears the value of the "plan_finished_at" field.
func (u *MissionOrderUpsertOne) ClearPlanFinishedAt() *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.ClearPlanFinishedAt()
	})
}

// SetExpiredWarningTime sets the "expired_warning_time" field.
func (u *MissionOrderUpsertOne) SetExpiredWarningTime(v time.Time) *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetExpiredWarningTime(v)
	})
}

// UpdateExpiredWarningTime sets the "expired_warning_time" field to the value that was provided on create.
func (u *MissionOrderUpsertOne) UpdateExpiredWarningTime() *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateExpiredWarningTime()
	})
}

// ClearExpiredWarningTime clears the value of the "expired_warning_time" field.
func (u *MissionOrderUpsertOne) ClearExpiredWarningTime() *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.ClearExpiredWarningTime()
	})
}

// SetMissionBatchID sets the "mission_batch_id" field.
func (u *MissionOrderUpsertOne) SetMissionBatchID(v int64) *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetMissionBatchID(v)
	})
}

// UpdateMissionBatchID sets the "mission_batch_id" field to the value that was provided on create.
func (u *MissionOrderUpsertOne) UpdateMissionBatchID() *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateMissionBatchID()
	})
}

// SetMissionBatchNumber sets the "mission_batch_number" field.
func (u *MissionOrderUpsertOne) SetMissionBatchNumber(v string) *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetMissionBatchNumber(v)
	})
}

// UpdateMissionBatchNumber sets the "mission_batch_number" field to the value that was provided on create.
func (u *MissionOrderUpsertOne) UpdateMissionBatchNumber() *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateMissionBatchNumber()
	})
}

// SetDeviceID sets the "device_id" field.
func (u *MissionOrderUpsertOne) SetDeviceID(v int64) *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetDeviceID(v)
	})
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *MissionOrderUpsertOne) UpdateDeviceID() *MissionOrderUpsertOne {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateDeviceID()
	})
}

// Exec executes the query.
func (u *MissionOrderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for MissionOrderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MissionOrderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MissionOrderUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MissionOrderUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MissionOrderCreateBulk is the builder for creating many MissionOrder entities in bulk.
type MissionOrderCreateBulk struct {
	config
	err      error
	builders []*MissionOrderCreate
	conflict []sql.ConflictOption
}

// Save creates the MissionOrder entities in the database.
func (mocb *MissionOrderCreateBulk) Save(ctx context.Context) ([]*MissionOrder, error) {
	if mocb.err != nil {
		return nil, mocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mocb.builders))
	nodes := make([]*MissionOrder, len(mocb.builders))
	mutators := make([]Mutator, len(mocb.builders))
	for i := range mocb.builders {
		func(i int, root context.Context) {
			builder := mocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MissionOrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mocb *MissionOrderCreateBulk) SaveX(ctx context.Context) []*MissionOrder {
	v, err := mocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mocb *MissionOrderCreateBulk) Exec(ctx context.Context) error {
	_, err := mocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mocb *MissionOrderCreateBulk) ExecX(ctx context.Context) {
	if err := mocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MissionOrder.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MissionOrderUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (mocb *MissionOrderCreateBulk) OnConflict(opts ...sql.ConflictOption) *MissionOrderUpsertBulk {
	mocb.conflict = opts
	return &MissionOrderUpsertBulk{
		create: mocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MissionOrder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mocb *MissionOrderCreateBulk) OnConflictColumns(columns ...string) *MissionOrderUpsertBulk {
	mocb.conflict = append(mocb.conflict, sql.ConflictColumns(columns...))
	return &MissionOrderUpsertBulk{
		create: mocb,
	}
}

// MissionOrderUpsertBulk is the builder for "upsert"-ing
// a bulk of MissionOrder nodes.
type MissionOrderUpsertBulk struct {
	create *MissionOrderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MissionOrder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(missionorder.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MissionOrderUpsertBulk) UpdateNewValues() *MissionOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(missionorder.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(missionorder.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MissionOrder.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MissionOrderUpsertBulk) Ignore() *MissionOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MissionOrderUpsertBulk) DoNothing() *MissionOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MissionOrderCreateBulk.OnConflict
// documentation for more info.
func (u *MissionOrderUpsertBulk) Update(set func(*MissionOrderUpsert)) *MissionOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MissionOrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *MissionOrderUpsertBulk) SetCreatedBy(v int64) *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *MissionOrderUpsertBulk) AddCreatedBy(v int64) *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MissionOrderUpsertBulk) UpdateCreatedBy() *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MissionOrderUpsertBulk) SetUpdatedBy(v int64) *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MissionOrderUpsertBulk) AddUpdatedBy(v int64) *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MissionOrderUpsertBulk) UpdateUpdatedBy() *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MissionOrderUpsertBulk) SetUpdatedAt(v time.Time) *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MissionOrderUpsertBulk) UpdateUpdatedAt() *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MissionOrderUpsertBulk) SetDeletedAt(v time.Time) *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MissionOrderUpsertBulk) UpdateDeletedAt() *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetMissionID sets the "mission_id" field.
func (u *MissionOrderUpsertBulk) SetMissionID(v int64) *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetMissionID(v)
	})
}

// UpdateMissionID sets the "mission_id" field to the value that was provided on create.
func (u *MissionOrderUpsertBulk) UpdateMissionID() *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateMissionID()
	})
}

// SetStatus sets the "status" field.
func (u *MissionOrderUpsertBulk) SetStatus(v enums.MissionOrderStatus) *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MissionOrderUpsertBulk) UpdateStatus() *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateStatus()
	})
}

// SetSymbolID sets the "symbol_id" field.
func (u *MissionOrderUpsertBulk) SetSymbolID(v int64) *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetSymbolID(v)
	})
}

// UpdateSymbolID sets the "symbol_id" field to the value that was provided on create.
func (u *MissionOrderUpsertBulk) UpdateSymbolID() *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateSymbolID()
	})
}

// SetConsumeUserID sets the "consume_user_id" field.
func (u *MissionOrderUpsertBulk) SetConsumeUserID(v int64) *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetConsumeUserID(v)
	})
}

// UpdateConsumeUserID sets the "consume_user_id" field to the value that was provided on create.
func (u *MissionOrderUpsertBulk) UpdateConsumeUserID() *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateConsumeUserID()
	})
}

// SetConsumeAmount sets the "consume_amount" field.
func (u *MissionOrderUpsertBulk) SetConsumeAmount(v int64) *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetConsumeAmount(v)
	})
}

// AddConsumeAmount adds v to the "consume_amount" field.
func (u *MissionOrderUpsertBulk) AddConsumeAmount(v int64) *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.AddConsumeAmount(v)
	})
}

// UpdateConsumeAmount sets the "consume_amount" field to the value that was provided on create.
func (u *MissionOrderUpsertBulk) UpdateConsumeAmount() *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateConsumeAmount()
	})
}

// SetProduceUserID sets the "produce_user_id" field.
func (u *MissionOrderUpsertBulk) SetProduceUserID(v int64) *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetProduceUserID(v)
	})
}

// UpdateProduceUserID sets the "produce_user_id" field to the value that was provided on create.
func (u *MissionOrderUpsertBulk) UpdateProduceUserID() *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateProduceUserID()
	})
}

// SetProduceAmount sets the "produce_amount" field.
func (u *MissionOrderUpsertBulk) SetProduceAmount(v int64) *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetProduceAmount(v)
	})
}

// AddProduceAmount adds v to the "produce_amount" field.
func (u *MissionOrderUpsertBulk) AddProduceAmount(v int64) *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.AddProduceAmount(v)
	})
}

// UpdateProduceAmount sets the "produce_amount" field to the value that was provided on create.
func (u *MissionOrderUpsertBulk) UpdateProduceAmount() *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateProduceAmount()
	})
}

// SetGasAmount sets the "gas_amount" field.
func (u *MissionOrderUpsertBulk) SetGasAmount(v int64) *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetGasAmount(v)
	})
}

// AddGasAmount adds v to the "gas_amount" field.
func (u *MissionOrderUpsertBulk) AddGasAmount(v int64) *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.AddGasAmount(v)
	})
}

// UpdateGasAmount sets the "gas_amount" field to the value that was provided on create.
func (u *MissionOrderUpsertBulk) UpdateGasAmount() *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateGasAmount()
	})
}

// SetMissionType sets the "mission_type" field.
func (u *MissionOrderUpsertBulk) SetMissionType(v enums.MissionType) *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetMissionType(v)
	})
}

// UpdateMissionType sets the "mission_type" field to the value that was provided on create.
func (u *MissionOrderUpsertBulk) UpdateMissionType() *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateMissionType()
	})
}

// SetMissionBillingType sets the "mission_billing_type" field.
func (u *MissionOrderUpsertBulk) SetMissionBillingType(v enums.MissionBillingType) *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetMissionBillingType(v)
	})
}

// UpdateMissionBillingType sets the "mission_billing_type" field to the value that was provided on create.
func (u *MissionOrderUpsertBulk) UpdateMissionBillingType() *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateMissionBillingType()
	})
}

// SetCallWay sets the "call_way" field.
func (u *MissionOrderUpsertBulk) SetCallWay(v enums.MissionCallWay) *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetCallWay(v)
	})
}

// UpdateCallWay sets the "call_way" field to the value that was provided on create.
func (u *MissionOrderUpsertBulk) UpdateCallWay() *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateCallWay()
	})
}

// SetSerialNumber sets the "serial_number" field.
func (u *MissionOrderUpsertBulk) SetSerialNumber(v string) *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetSerialNumber(v)
	})
}

// UpdateSerialNumber sets the "serial_number" field to the value that was provided on create.
func (u *MissionOrderUpsertBulk) UpdateSerialNumber() *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateSerialNumber()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *MissionOrderUpsertBulk) SetStartedAt(v time.Time) *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *MissionOrderUpsertBulk) UpdateStartedAt() *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateStartedAt()
	})
}

// SetFinishedAt sets the "finished_at" field.
func (u *MissionOrderUpsertBulk) SetFinishedAt(v time.Time) *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetFinishedAt(v)
	})
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *MissionOrderUpsertBulk) UpdateFinishedAt() *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateFinishedAt()
	})
}

// SetBuyDuration sets the "buy_duration" field.
func (u *MissionOrderUpsertBulk) SetBuyDuration(v int64) *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetBuyDuration(v)
	})
}

// AddBuyDuration adds v to the "buy_duration" field.
func (u *MissionOrderUpsertBulk) AddBuyDuration(v int64) *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.AddBuyDuration(v)
	})
}

// UpdateBuyDuration sets the "buy_duration" field to the value that was provided on create.
func (u *MissionOrderUpsertBulk) UpdateBuyDuration() *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateBuyDuration()
	})
}

// SetPlanStartedAt sets the "plan_started_at" field.
func (u *MissionOrderUpsertBulk) SetPlanStartedAt(v time.Time) *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetPlanStartedAt(v)
	})
}

// UpdatePlanStartedAt sets the "plan_started_at" field to the value that was provided on create.
func (u *MissionOrderUpsertBulk) UpdatePlanStartedAt() *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdatePlanStartedAt()
	})
}

// ClearPlanStartedAt clears the value of the "plan_started_at" field.
func (u *MissionOrderUpsertBulk) ClearPlanStartedAt() *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.ClearPlanStartedAt()
	})
}

// SetPlanFinishedAt sets the "plan_finished_at" field.
func (u *MissionOrderUpsertBulk) SetPlanFinishedAt(v time.Time) *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetPlanFinishedAt(v)
	})
}

// UpdatePlanFinishedAt sets the "plan_finished_at" field to the value that was provided on create.
func (u *MissionOrderUpsertBulk) UpdatePlanFinishedAt() *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdatePlanFinishedAt()
	})
}

// ClearPlanFinishedAt clears the value of the "plan_finished_at" field.
func (u *MissionOrderUpsertBulk) ClearPlanFinishedAt() *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.ClearPlanFinishedAt()
	})
}

// SetExpiredWarningTime sets the "expired_warning_time" field.
func (u *MissionOrderUpsertBulk) SetExpiredWarningTime(v time.Time) *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetExpiredWarningTime(v)
	})
}

// UpdateExpiredWarningTime sets the "expired_warning_time" field to the value that was provided on create.
func (u *MissionOrderUpsertBulk) UpdateExpiredWarningTime() *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateExpiredWarningTime()
	})
}

// ClearExpiredWarningTime clears the value of the "expired_warning_time" field.
func (u *MissionOrderUpsertBulk) ClearExpiredWarningTime() *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.ClearExpiredWarningTime()
	})
}

// SetMissionBatchID sets the "mission_batch_id" field.
func (u *MissionOrderUpsertBulk) SetMissionBatchID(v int64) *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetMissionBatchID(v)
	})
}

// UpdateMissionBatchID sets the "mission_batch_id" field to the value that was provided on create.
func (u *MissionOrderUpsertBulk) UpdateMissionBatchID() *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateMissionBatchID()
	})
}

// SetMissionBatchNumber sets the "mission_batch_number" field.
func (u *MissionOrderUpsertBulk) SetMissionBatchNumber(v string) *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetMissionBatchNumber(v)
	})
}

// UpdateMissionBatchNumber sets the "mission_batch_number" field to the value that was provided on create.
func (u *MissionOrderUpsertBulk) UpdateMissionBatchNumber() *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateMissionBatchNumber()
	})
}

// SetDeviceID sets the "device_id" field.
func (u *MissionOrderUpsertBulk) SetDeviceID(v int64) *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.SetDeviceID(v)
	})
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *MissionOrderUpsertBulk) UpdateDeviceID() *MissionOrderUpsertBulk {
	return u.Update(func(s *MissionOrderUpsert) {
		s.UpdateDeviceID()
	})
}

// Exec executes the query.
func (u *MissionOrderUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the MissionOrderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for MissionOrderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MissionOrderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
