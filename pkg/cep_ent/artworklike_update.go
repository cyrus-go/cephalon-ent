// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/artwork"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/artworklike"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
)

// ArtworkLikeUpdate is the builder for updating ArtworkLike entities.
type ArtworkLikeUpdate struct {
	config
	hooks     []Hook
	mutation  *ArtworkLikeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ArtworkLikeUpdate builder.
func (alu *ArtworkLikeUpdate) Where(ps ...predicate.ArtworkLike) *ArtworkLikeUpdate {
	alu.mutation.Where(ps...)
	return alu
}

// SetCreatedBy sets the "created_by" field.
func (alu *ArtworkLikeUpdate) SetCreatedBy(i int64) *ArtworkLikeUpdate {
	alu.mutation.ResetCreatedBy()
	alu.mutation.SetCreatedBy(i)
	return alu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (alu *ArtworkLikeUpdate) SetNillableCreatedBy(i *int64) *ArtworkLikeUpdate {
	if i != nil {
		alu.SetCreatedBy(*i)
	}
	return alu
}

// AddCreatedBy adds i to the "created_by" field.
func (alu *ArtworkLikeUpdate) AddCreatedBy(i int64) *ArtworkLikeUpdate {
	alu.mutation.AddCreatedBy(i)
	return alu
}

// SetUpdatedBy sets the "updated_by" field.
func (alu *ArtworkLikeUpdate) SetUpdatedBy(i int64) *ArtworkLikeUpdate {
	alu.mutation.ResetUpdatedBy()
	alu.mutation.SetUpdatedBy(i)
	return alu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (alu *ArtworkLikeUpdate) SetNillableUpdatedBy(i *int64) *ArtworkLikeUpdate {
	if i != nil {
		alu.SetUpdatedBy(*i)
	}
	return alu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (alu *ArtworkLikeUpdate) AddUpdatedBy(i int64) *ArtworkLikeUpdate {
	alu.mutation.AddUpdatedBy(i)
	return alu
}

// SetUpdatedAt sets the "updated_at" field.
func (alu *ArtworkLikeUpdate) SetUpdatedAt(t time.Time) *ArtworkLikeUpdate {
	alu.mutation.SetUpdatedAt(t)
	return alu
}

// SetDeletedAt sets the "deleted_at" field.
func (alu *ArtworkLikeUpdate) SetDeletedAt(t time.Time) *ArtworkLikeUpdate {
	alu.mutation.SetDeletedAt(t)
	return alu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (alu *ArtworkLikeUpdate) SetNillableDeletedAt(t *time.Time) *ArtworkLikeUpdate {
	if t != nil {
		alu.SetDeletedAt(*t)
	}
	return alu
}

// SetUserID sets the "user_id" field.
func (alu *ArtworkLikeUpdate) SetUserID(i int64) *ArtworkLikeUpdate {
	alu.mutation.SetUserID(i)
	return alu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (alu *ArtworkLikeUpdate) SetNillableUserID(i *int64) *ArtworkLikeUpdate {
	if i != nil {
		alu.SetUserID(*i)
	}
	return alu
}

// SetArtworkID sets the "artwork_id" field.
func (alu *ArtworkLikeUpdate) SetArtworkID(i int64) *ArtworkLikeUpdate {
	alu.mutation.SetArtworkID(i)
	return alu
}

// SetNillableArtworkID sets the "artwork_id" field if the given value is not nil.
func (alu *ArtworkLikeUpdate) SetNillableArtworkID(i *int64) *ArtworkLikeUpdate {
	if i != nil {
		alu.SetArtworkID(*i)
	}
	return alu
}

// SetDate sets the "date" field.
func (alu *ArtworkLikeUpdate) SetDate(i int32) *ArtworkLikeUpdate {
	alu.mutation.ResetDate()
	alu.mutation.SetDate(i)
	return alu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (alu *ArtworkLikeUpdate) SetNillableDate(i *int32) *ArtworkLikeUpdate {
	if i != nil {
		alu.SetDate(*i)
	}
	return alu
}

// AddDate adds i to the "date" field.
func (alu *ArtworkLikeUpdate) AddDate(i int32) *ArtworkLikeUpdate {
	alu.mutation.AddDate(i)
	return alu
}

// SetUser sets the "user" edge to the User entity.
func (alu *ArtworkLikeUpdate) SetUser(u *User) *ArtworkLikeUpdate {
	return alu.SetUserID(u.ID)
}

// SetArtwork sets the "artwork" edge to the Artwork entity.
func (alu *ArtworkLikeUpdate) SetArtwork(a *Artwork) *ArtworkLikeUpdate {
	return alu.SetArtworkID(a.ID)
}

// Mutation returns the ArtworkLikeMutation object of the builder.
func (alu *ArtworkLikeUpdate) Mutation() *ArtworkLikeMutation {
	return alu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (alu *ArtworkLikeUpdate) ClearUser() *ArtworkLikeUpdate {
	alu.mutation.ClearUser()
	return alu
}

// ClearArtwork clears the "artwork" edge to the Artwork entity.
func (alu *ArtworkLikeUpdate) ClearArtwork() *ArtworkLikeUpdate {
	alu.mutation.ClearArtwork()
	return alu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (alu *ArtworkLikeUpdate) Save(ctx context.Context) (int, error) {
	alu.defaults()
	return withHooks(ctx, alu.sqlSave, alu.mutation, alu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (alu *ArtworkLikeUpdate) SaveX(ctx context.Context) int {
	affected, err := alu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (alu *ArtworkLikeUpdate) Exec(ctx context.Context) error {
	_, err := alu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alu *ArtworkLikeUpdate) ExecX(ctx context.Context) {
	if err := alu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (alu *ArtworkLikeUpdate) defaults() {
	if _, ok := alu.mutation.UpdatedAt(); !ok {
		v := artworklike.UpdateDefaultUpdatedAt()
		alu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (alu *ArtworkLikeUpdate) check() error {
	if _, ok := alu.mutation.UserID(); alu.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "ArtworkLike.user"`)
	}
	if _, ok := alu.mutation.ArtworkID(); alu.mutation.ArtworkCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "ArtworkLike.artwork"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (alu *ArtworkLikeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ArtworkLikeUpdate {
	alu.modifiers = append(alu.modifiers, modifiers...)
	return alu
}

func (alu *ArtworkLikeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := alu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(artworklike.Table, artworklike.Columns, sqlgraph.NewFieldSpec(artworklike.FieldID, field.TypeInt64))
	if ps := alu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := alu.mutation.CreatedBy(); ok {
		_spec.SetField(artworklike.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := alu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(artworklike.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := alu.mutation.UpdatedBy(); ok {
		_spec.SetField(artworklike.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := alu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(artworklike.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := alu.mutation.UpdatedAt(); ok {
		_spec.SetField(artworklike.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := alu.mutation.DeletedAt(); ok {
		_spec.SetField(artworklike.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := alu.mutation.Date(); ok {
		_spec.SetField(artworklike.FieldDate, field.TypeInt32, value)
	}
	if value, ok := alu.mutation.AddedDate(); ok {
		_spec.AddField(artworklike.FieldDate, field.TypeInt32, value)
	}
	if alu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artworklike.UserTable,
			Columns: []string{artworklike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := alu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artworklike.UserTable,
			Columns: []string{artworklike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if alu.mutation.ArtworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artworklike.ArtworkTable,
			Columns: []string{artworklike.ArtworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artwork.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := alu.mutation.ArtworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artworklike.ArtworkTable,
			Columns: []string{artworklike.ArtworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artwork.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(alu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, alu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{artworklike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	alu.mutation.done = true
	return n, nil
}

// ArtworkLikeUpdateOne is the builder for updating a single ArtworkLike entity.
type ArtworkLikeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ArtworkLikeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedBy sets the "created_by" field.
func (aluo *ArtworkLikeUpdateOne) SetCreatedBy(i int64) *ArtworkLikeUpdateOne {
	aluo.mutation.ResetCreatedBy()
	aluo.mutation.SetCreatedBy(i)
	return aluo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (aluo *ArtworkLikeUpdateOne) SetNillableCreatedBy(i *int64) *ArtworkLikeUpdateOne {
	if i != nil {
		aluo.SetCreatedBy(*i)
	}
	return aluo
}

// AddCreatedBy adds i to the "created_by" field.
func (aluo *ArtworkLikeUpdateOne) AddCreatedBy(i int64) *ArtworkLikeUpdateOne {
	aluo.mutation.AddCreatedBy(i)
	return aluo
}

// SetUpdatedBy sets the "updated_by" field.
func (aluo *ArtworkLikeUpdateOne) SetUpdatedBy(i int64) *ArtworkLikeUpdateOne {
	aluo.mutation.ResetUpdatedBy()
	aluo.mutation.SetUpdatedBy(i)
	return aluo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (aluo *ArtworkLikeUpdateOne) SetNillableUpdatedBy(i *int64) *ArtworkLikeUpdateOne {
	if i != nil {
		aluo.SetUpdatedBy(*i)
	}
	return aluo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (aluo *ArtworkLikeUpdateOne) AddUpdatedBy(i int64) *ArtworkLikeUpdateOne {
	aluo.mutation.AddUpdatedBy(i)
	return aluo
}

// SetUpdatedAt sets the "updated_at" field.
func (aluo *ArtworkLikeUpdateOne) SetUpdatedAt(t time.Time) *ArtworkLikeUpdateOne {
	aluo.mutation.SetUpdatedAt(t)
	return aluo
}

// SetDeletedAt sets the "deleted_at" field.
func (aluo *ArtworkLikeUpdateOne) SetDeletedAt(t time.Time) *ArtworkLikeUpdateOne {
	aluo.mutation.SetDeletedAt(t)
	return aluo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aluo *ArtworkLikeUpdateOne) SetNillableDeletedAt(t *time.Time) *ArtworkLikeUpdateOne {
	if t != nil {
		aluo.SetDeletedAt(*t)
	}
	return aluo
}

// SetUserID sets the "user_id" field.
func (aluo *ArtworkLikeUpdateOne) SetUserID(i int64) *ArtworkLikeUpdateOne {
	aluo.mutation.SetUserID(i)
	return aluo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (aluo *ArtworkLikeUpdateOne) SetNillableUserID(i *int64) *ArtworkLikeUpdateOne {
	if i != nil {
		aluo.SetUserID(*i)
	}
	return aluo
}

// SetArtworkID sets the "artwork_id" field.
func (aluo *ArtworkLikeUpdateOne) SetArtworkID(i int64) *ArtworkLikeUpdateOne {
	aluo.mutation.SetArtworkID(i)
	return aluo
}

// SetNillableArtworkID sets the "artwork_id" field if the given value is not nil.
func (aluo *ArtworkLikeUpdateOne) SetNillableArtworkID(i *int64) *ArtworkLikeUpdateOne {
	if i != nil {
		aluo.SetArtworkID(*i)
	}
	return aluo
}

// SetDate sets the "date" field.
func (aluo *ArtworkLikeUpdateOne) SetDate(i int32) *ArtworkLikeUpdateOne {
	aluo.mutation.ResetDate()
	aluo.mutation.SetDate(i)
	return aluo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (aluo *ArtworkLikeUpdateOne) SetNillableDate(i *int32) *ArtworkLikeUpdateOne {
	if i != nil {
		aluo.SetDate(*i)
	}
	return aluo
}

// AddDate adds i to the "date" field.
func (aluo *ArtworkLikeUpdateOne) AddDate(i int32) *ArtworkLikeUpdateOne {
	aluo.mutation.AddDate(i)
	return aluo
}

// SetUser sets the "user" edge to the User entity.
func (aluo *ArtworkLikeUpdateOne) SetUser(u *User) *ArtworkLikeUpdateOne {
	return aluo.SetUserID(u.ID)
}

// SetArtwork sets the "artwork" edge to the Artwork entity.
func (aluo *ArtworkLikeUpdateOne) SetArtwork(a *Artwork) *ArtworkLikeUpdateOne {
	return aluo.SetArtworkID(a.ID)
}

// Mutation returns the ArtworkLikeMutation object of the builder.
func (aluo *ArtworkLikeUpdateOne) Mutation() *ArtworkLikeMutation {
	return aluo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (aluo *ArtworkLikeUpdateOne) ClearUser() *ArtworkLikeUpdateOne {
	aluo.mutation.ClearUser()
	return aluo
}

// ClearArtwork clears the "artwork" edge to the Artwork entity.
func (aluo *ArtworkLikeUpdateOne) ClearArtwork() *ArtworkLikeUpdateOne {
	aluo.mutation.ClearArtwork()
	return aluo
}

// Where appends a list predicates to the ArtworkLikeUpdate builder.
func (aluo *ArtworkLikeUpdateOne) Where(ps ...predicate.ArtworkLike) *ArtworkLikeUpdateOne {
	aluo.mutation.Where(ps...)
	return aluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aluo *ArtworkLikeUpdateOne) Select(field string, fields ...string) *ArtworkLikeUpdateOne {
	aluo.fields = append([]string{field}, fields...)
	return aluo
}

// Save executes the query and returns the updated ArtworkLike entity.
func (aluo *ArtworkLikeUpdateOne) Save(ctx context.Context) (*ArtworkLike, error) {
	aluo.defaults()
	return withHooks(ctx, aluo.sqlSave, aluo.mutation, aluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aluo *ArtworkLikeUpdateOne) SaveX(ctx context.Context) *ArtworkLike {
	node, err := aluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aluo *ArtworkLikeUpdateOne) Exec(ctx context.Context) error {
	_, err := aluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aluo *ArtworkLikeUpdateOne) ExecX(ctx context.Context) {
	if err := aluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aluo *ArtworkLikeUpdateOne) defaults() {
	if _, ok := aluo.mutation.UpdatedAt(); !ok {
		v := artworklike.UpdateDefaultUpdatedAt()
		aluo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aluo *ArtworkLikeUpdateOne) check() error {
	if _, ok := aluo.mutation.UserID(); aluo.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "ArtworkLike.user"`)
	}
	if _, ok := aluo.mutation.ArtworkID(); aluo.mutation.ArtworkCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "ArtworkLike.artwork"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aluo *ArtworkLikeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ArtworkLikeUpdateOne {
	aluo.modifiers = append(aluo.modifiers, modifiers...)
	return aluo
}

func (aluo *ArtworkLikeUpdateOne) sqlSave(ctx context.Context) (_node *ArtworkLike, err error) {
	if err := aluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(artworklike.Table, artworklike.Columns, sqlgraph.NewFieldSpec(artworklike.FieldID, field.TypeInt64))
	id, ok := aluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "ArtworkLike.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, artworklike.FieldID)
		for _, f := range fields {
			if !artworklike.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != artworklike.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aluo.mutation.CreatedBy(); ok {
		_spec.SetField(artworklike.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := aluo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(artworklike.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := aluo.mutation.UpdatedBy(); ok {
		_spec.SetField(artworklike.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := aluo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(artworklike.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := aluo.mutation.UpdatedAt(); ok {
		_spec.SetField(artworklike.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aluo.mutation.DeletedAt(); ok {
		_spec.SetField(artworklike.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := aluo.mutation.Date(); ok {
		_spec.SetField(artworklike.FieldDate, field.TypeInt32, value)
	}
	if value, ok := aluo.mutation.AddedDate(); ok {
		_spec.AddField(artworklike.FieldDate, field.TypeInt32, value)
	}
	if aluo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artworklike.UserTable,
			Columns: []string{artworklike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aluo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artworklike.UserTable,
			Columns: []string{artworklike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aluo.mutation.ArtworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artworklike.ArtworkTable,
			Columns: []string{artworklike.ArtworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artwork.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aluo.mutation.ArtworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artworklike.ArtworkTable,
			Columns: []string{artworklike.ArtworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artwork.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(aluo.modifiers...)
	_node = &ArtworkLike{config: aluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{artworklike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aluo.mutation.done = true
	return _node, nil
}
