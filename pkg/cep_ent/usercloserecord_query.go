// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/usercloserecord"
)

// UserCloseRecordQuery is the builder for querying UserCloseRecord entities.
type UserCloseRecordQuery struct {
	config
	ctx             *QueryContext
	order           []usercloserecord.OrderOption
	inters          []Interceptor
	predicates      []predicate.UserCloseRecord
	withUser        *UserQuery
	withOperateUser *UserQuery
	modifiers       []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserCloseRecordQuery builder.
func (ucrq *UserCloseRecordQuery) Where(ps ...predicate.UserCloseRecord) *UserCloseRecordQuery {
	ucrq.predicates = append(ucrq.predicates, ps...)
	return ucrq
}

// Limit the number of records to be returned by this query.
func (ucrq *UserCloseRecordQuery) Limit(limit int) *UserCloseRecordQuery {
	ucrq.ctx.Limit = &limit
	return ucrq
}

// Offset to start from.
func (ucrq *UserCloseRecordQuery) Offset(offset int) *UserCloseRecordQuery {
	ucrq.ctx.Offset = &offset
	return ucrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ucrq *UserCloseRecordQuery) Unique(unique bool) *UserCloseRecordQuery {
	ucrq.ctx.Unique = &unique
	return ucrq
}

// Order specifies how the records should be ordered.
func (ucrq *UserCloseRecordQuery) Order(o ...usercloserecord.OrderOption) *UserCloseRecordQuery {
	ucrq.order = append(ucrq.order, o...)
	return ucrq
}

// QueryUser chains the current query on the "user" edge.
func (ucrq *UserCloseRecordQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: ucrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ucrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ucrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usercloserecord.Table, usercloserecord.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usercloserecord.UserTable, usercloserecord.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(ucrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOperateUser chains the current query on the "operate_user" edge.
func (ucrq *UserCloseRecordQuery) QueryOperateUser() *UserQuery {
	query := (&UserClient{config: ucrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ucrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ucrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usercloserecord.Table, usercloserecord.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usercloserecord.OperateUserTable, usercloserecord.OperateUserColumn),
		)
		fromU = sqlgraph.SetNeighbors(ucrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UserCloseRecord entity from the query.
// Returns a *NotFoundError when no UserCloseRecord was found.
func (ucrq *UserCloseRecordQuery) First(ctx context.Context) (*UserCloseRecord, error) {
	nodes, err := ucrq.Limit(1).All(setContextOp(ctx, ucrq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{usercloserecord.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ucrq *UserCloseRecordQuery) FirstX(ctx context.Context) *UserCloseRecord {
	node, err := ucrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UserCloseRecord ID from the query.
// Returns a *NotFoundError when no UserCloseRecord ID was found.
func (ucrq *UserCloseRecordQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = ucrq.Limit(1).IDs(setContextOp(ctx, ucrq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{usercloserecord.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ucrq *UserCloseRecordQuery) FirstIDX(ctx context.Context) int64 {
	id, err := ucrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UserCloseRecord entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UserCloseRecord entity is found.
// Returns a *NotFoundError when no UserCloseRecord entities are found.
func (ucrq *UserCloseRecordQuery) Only(ctx context.Context) (*UserCloseRecord, error) {
	nodes, err := ucrq.Limit(2).All(setContextOp(ctx, ucrq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{usercloserecord.Label}
	default:
		return nil, &NotSingularError{usercloserecord.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ucrq *UserCloseRecordQuery) OnlyX(ctx context.Context) *UserCloseRecord {
	node, err := ucrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UserCloseRecord ID in the query.
// Returns a *NotSingularError when more than one UserCloseRecord ID is found.
// Returns a *NotFoundError when no entities are found.
func (ucrq *UserCloseRecordQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = ucrq.Limit(2).IDs(setContextOp(ctx, ucrq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{usercloserecord.Label}
	default:
		err = &NotSingularError{usercloserecord.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ucrq *UserCloseRecordQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := ucrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserCloseRecords.
func (ucrq *UserCloseRecordQuery) All(ctx context.Context) ([]*UserCloseRecord, error) {
	ctx = setContextOp(ctx, ucrq.ctx, "All")
	if err := ucrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UserCloseRecord, *UserCloseRecordQuery]()
	return withInterceptors[[]*UserCloseRecord](ctx, ucrq, qr, ucrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ucrq *UserCloseRecordQuery) AllX(ctx context.Context) []*UserCloseRecord {
	nodes, err := ucrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UserCloseRecord IDs.
func (ucrq *UserCloseRecordQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if ucrq.ctx.Unique == nil && ucrq.path != nil {
		ucrq.Unique(true)
	}
	ctx = setContextOp(ctx, ucrq.ctx, "IDs")
	if err = ucrq.Select(usercloserecord.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ucrq *UserCloseRecordQuery) IDsX(ctx context.Context) []int64 {
	ids, err := ucrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ucrq *UserCloseRecordQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ucrq.ctx, "Count")
	if err := ucrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ucrq, querierCount[*UserCloseRecordQuery](), ucrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ucrq *UserCloseRecordQuery) CountX(ctx context.Context) int {
	count, err := ucrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ucrq *UserCloseRecordQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ucrq.ctx, "Exist")
	switch _, err := ucrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("cep_ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ucrq *UserCloseRecordQuery) ExistX(ctx context.Context) bool {
	exist, err := ucrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserCloseRecordQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ucrq *UserCloseRecordQuery) Clone() *UserCloseRecordQuery {
	if ucrq == nil {
		return nil
	}
	return &UserCloseRecordQuery{
		config:          ucrq.config,
		ctx:             ucrq.ctx.Clone(),
		order:           append([]usercloserecord.OrderOption{}, ucrq.order...),
		inters:          append([]Interceptor{}, ucrq.inters...),
		predicates:      append([]predicate.UserCloseRecord{}, ucrq.predicates...),
		withUser:        ucrq.withUser.Clone(),
		withOperateUser: ucrq.withOperateUser.Clone(),
		// clone intermediate query.
		sql:  ucrq.sql.Clone(),
		path: ucrq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (ucrq *UserCloseRecordQuery) WithUser(opts ...func(*UserQuery)) *UserCloseRecordQuery {
	query := (&UserClient{config: ucrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ucrq.withUser = query
	return ucrq
}

// WithOperateUser tells the query-builder to eager-load the nodes that are connected to
// the "operate_user" edge. The optional arguments are used to configure the query builder of the edge.
func (ucrq *UserCloseRecordQuery) WithOperateUser(opts ...func(*UserQuery)) *UserCloseRecordQuery {
	query := (&UserClient{config: ucrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ucrq.withOperateUser = query
	return ucrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by,string"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserCloseRecord.Query().
//		GroupBy(usercloserecord.FieldCreatedBy).
//		Aggregate(cep_ent.Count()).
//		Scan(ctx, &v)
func (ucrq *UserCloseRecordQuery) GroupBy(field string, fields ...string) *UserCloseRecordGroupBy {
	ucrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserCloseRecordGroupBy{build: ucrq}
	grbuild.flds = &ucrq.ctx.Fields
	grbuild.label = usercloserecord.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by,string"`
//	}
//
//	client.UserCloseRecord.Query().
//		Select(usercloserecord.FieldCreatedBy).
//		Scan(ctx, &v)
func (ucrq *UserCloseRecordQuery) Select(fields ...string) *UserCloseRecordSelect {
	ucrq.ctx.Fields = append(ucrq.ctx.Fields, fields...)
	sbuild := &UserCloseRecordSelect{UserCloseRecordQuery: ucrq}
	sbuild.label = usercloserecord.Label
	sbuild.flds, sbuild.scan = &ucrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserCloseRecordSelect configured with the given aggregations.
func (ucrq *UserCloseRecordQuery) Aggregate(fns ...AggregateFunc) *UserCloseRecordSelect {
	return ucrq.Select().Aggregate(fns...)
}

func (ucrq *UserCloseRecordQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ucrq.inters {
		if inter == nil {
			return fmt.Errorf("cep_ent: uninitialized interceptor (forgotten import cep_ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ucrq); err != nil {
				return err
			}
		}
	}
	for _, f := range ucrq.ctx.Fields {
		if !usercloserecord.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
		}
	}
	if ucrq.path != nil {
		prev, err := ucrq.path(ctx)
		if err != nil {
			return err
		}
		ucrq.sql = prev
	}
	return nil
}

func (ucrq *UserCloseRecordQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UserCloseRecord, error) {
	var (
		nodes       = []*UserCloseRecord{}
		_spec       = ucrq.querySpec()
		loadedTypes = [2]bool{
			ucrq.withUser != nil,
			ucrq.withOperateUser != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UserCloseRecord).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UserCloseRecord{config: ucrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ucrq.modifiers) > 0 {
		_spec.Modifiers = ucrq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ucrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ucrq.withUser; query != nil {
		if err := ucrq.loadUser(ctx, query, nodes, nil,
			func(n *UserCloseRecord, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := ucrq.withOperateUser; query != nil {
		if err := ucrq.loadOperateUser(ctx, query, nodes, nil,
			func(n *UserCloseRecord, e *User) { n.Edges.OperateUser = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ucrq *UserCloseRecordQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*UserCloseRecord, init func(*UserCloseRecord), assign func(*UserCloseRecord, *User)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*UserCloseRecord)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ucrq *UserCloseRecordQuery) loadOperateUser(ctx context.Context, query *UserQuery, nodes []*UserCloseRecord, init func(*UserCloseRecord), assign func(*UserCloseRecord, *User)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*UserCloseRecord)
	for i := range nodes {
		fk := nodes[i].OperateUserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "operate_user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ucrq *UserCloseRecordQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ucrq.querySpec()
	if len(ucrq.modifiers) > 0 {
		_spec.Modifiers = ucrq.modifiers
	}
	_spec.Node.Columns = ucrq.ctx.Fields
	if len(ucrq.ctx.Fields) > 0 {
		_spec.Unique = ucrq.ctx.Unique != nil && *ucrq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ucrq.driver, _spec)
}

func (ucrq *UserCloseRecordQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(usercloserecord.Table, usercloserecord.Columns, sqlgraph.NewFieldSpec(usercloserecord.FieldID, field.TypeInt64))
	_spec.From = ucrq.sql
	if unique := ucrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ucrq.path != nil {
		_spec.Unique = true
	}
	if fields := ucrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usercloserecord.FieldID)
		for i := range fields {
			if fields[i] != usercloserecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ucrq.withUser != nil {
			_spec.Node.AddColumnOnce(usercloserecord.FieldUserID)
		}
		if ucrq.withOperateUser != nil {
			_spec.Node.AddColumnOnce(usercloserecord.FieldOperateUserID)
		}
	}
	if ps := ucrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ucrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ucrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ucrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ucrq *UserCloseRecordQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ucrq.driver.Dialect())
	t1 := builder.Table(usercloserecord.Table)
	columns := ucrq.ctx.Fields
	if len(columns) == 0 {
		columns = usercloserecord.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ucrq.sql != nil {
		selector = ucrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ucrq.ctx.Unique != nil && *ucrq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range ucrq.modifiers {
		m(selector)
	}
	for _, p := range ucrq.predicates {
		p(selector)
	}
	for _, p := range ucrq.order {
		p(selector)
	}
	if offset := ucrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ucrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ucrq *UserCloseRecordQuery) Modify(modifiers ...func(s *sql.Selector)) *UserCloseRecordSelect {
	ucrq.modifiers = append(ucrq.modifiers, modifiers...)
	return ucrq.Select()
}

// UserCloseRecordGroupBy is the group-by builder for UserCloseRecord entities.
type UserCloseRecordGroupBy struct {
	selector
	build *UserCloseRecordQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ucrgb *UserCloseRecordGroupBy) Aggregate(fns ...AggregateFunc) *UserCloseRecordGroupBy {
	ucrgb.fns = append(ucrgb.fns, fns...)
	return ucrgb
}

// Scan applies the selector query and scans the result into the given value.
func (ucrgb *UserCloseRecordGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ucrgb.build.ctx, "GroupBy")
	if err := ucrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserCloseRecordQuery, *UserCloseRecordGroupBy](ctx, ucrgb.build, ucrgb, ucrgb.build.inters, v)
}

func (ucrgb *UserCloseRecordGroupBy) sqlScan(ctx context.Context, root *UserCloseRecordQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ucrgb.fns))
	for _, fn := range ucrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ucrgb.flds)+len(ucrgb.fns))
		for _, f := range *ucrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ucrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ucrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserCloseRecordSelect is the builder for selecting fields of UserCloseRecord entities.
type UserCloseRecordSelect struct {
	*UserCloseRecordQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ucrs *UserCloseRecordSelect) Aggregate(fns ...AggregateFunc) *UserCloseRecordSelect {
	ucrs.fns = append(ucrs.fns, fns...)
	return ucrs
}

// Scan applies the selector query and scans the result into the given value.
func (ucrs *UserCloseRecordSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ucrs.ctx, "Select")
	if err := ucrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserCloseRecordQuery, *UserCloseRecordSelect](ctx, ucrs.UserCloseRecordQuery, ucrs, ucrs.inters, v)
}

func (ucrs *UserCloseRecordSelect) sqlScan(ctx context.Context, root *UserCloseRecordQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ucrs.fns))
	for _, fn := range ucrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ucrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ucrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ucrs *UserCloseRecordSelect) Modify(modifiers ...func(s *sql.Selector)) *UserCloseRecordSelect {
	ucrs.modifiers = append(ucrs.modifiers, modifiers...)
	return ucrs
}
