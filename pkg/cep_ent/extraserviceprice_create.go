// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/extraservice"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/extraserviceprice"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// ExtraServicePriceCreate is the builder for creating a ExtraServicePrice entity.
type ExtraServicePriceCreate struct {
	config
	mutation *ExtraServicePriceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (espc *ExtraServicePriceCreate) SetCreatedBy(i int64) *ExtraServicePriceCreate {
	espc.mutation.SetCreatedBy(i)
	return espc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (espc *ExtraServicePriceCreate) SetNillableCreatedBy(i *int64) *ExtraServicePriceCreate {
	if i != nil {
		espc.SetCreatedBy(*i)
	}
	return espc
}

// SetUpdatedBy sets the "updated_by" field.
func (espc *ExtraServicePriceCreate) SetUpdatedBy(i int64) *ExtraServicePriceCreate {
	espc.mutation.SetUpdatedBy(i)
	return espc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (espc *ExtraServicePriceCreate) SetNillableUpdatedBy(i *int64) *ExtraServicePriceCreate {
	if i != nil {
		espc.SetUpdatedBy(*i)
	}
	return espc
}

// SetCreatedAt sets the "created_at" field.
func (espc *ExtraServicePriceCreate) SetCreatedAt(t time.Time) *ExtraServicePriceCreate {
	espc.mutation.SetCreatedAt(t)
	return espc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (espc *ExtraServicePriceCreate) SetNillableCreatedAt(t *time.Time) *ExtraServicePriceCreate {
	if t != nil {
		espc.SetCreatedAt(*t)
	}
	return espc
}

// SetUpdatedAt sets the "updated_at" field.
func (espc *ExtraServicePriceCreate) SetUpdatedAt(t time.Time) *ExtraServicePriceCreate {
	espc.mutation.SetUpdatedAt(t)
	return espc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (espc *ExtraServicePriceCreate) SetNillableUpdatedAt(t *time.Time) *ExtraServicePriceCreate {
	if t != nil {
		espc.SetUpdatedAt(*t)
	}
	return espc
}

// SetDeletedAt sets the "deleted_at" field.
func (espc *ExtraServicePriceCreate) SetDeletedAt(t time.Time) *ExtraServicePriceCreate {
	espc.mutation.SetDeletedAt(t)
	return espc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (espc *ExtraServicePriceCreate) SetNillableDeletedAt(t *time.Time) *ExtraServicePriceCreate {
	if t != nil {
		espc.SetDeletedAt(*t)
	}
	return espc
}

// SetExtraServiceBillingType sets the "extra_service_billing_type" field.
func (espc *ExtraServicePriceCreate) SetExtraServiceBillingType(esbt enums.ExtraServiceBillingType) *ExtraServicePriceCreate {
	espc.mutation.SetExtraServiceBillingType(esbt)
	return espc
}

// SetNillableExtraServiceBillingType sets the "extra_service_billing_type" field if the given value is not nil.
func (espc *ExtraServicePriceCreate) SetNillableExtraServiceBillingType(esbt *enums.ExtraServiceBillingType) *ExtraServicePriceCreate {
	if esbt != nil {
		espc.SetExtraServiceBillingType(*esbt)
	}
	return espc
}

// SetExtraServiceID sets the "extra_service_id" field.
func (espc *ExtraServicePriceCreate) SetExtraServiceID(i int64) *ExtraServicePriceCreate {
	espc.mutation.SetExtraServiceID(i)
	return espc
}

// SetNillableExtraServiceID sets the "extra_service_id" field if the given value is not nil.
func (espc *ExtraServicePriceCreate) SetNillableExtraServiceID(i *int64) *ExtraServicePriceCreate {
	if i != nil {
		espc.SetExtraServiceID(*i)
	}
	return espc
}

// SetCep sets the "cep" field.
func (espc *ExtraServicePriceCreate) SetCep(i int64) *ExtraServicePriceCreate {
	espc.mutation.SetCep(i)
	return espc
}

// SetNillableCep sets the "cep" field if the given value is not nil.
func (espc *ExtraServicePriceCreate) SetNillableCep(i *int64) *ExtraServicePriceCreate {
	if i != nil {
		espc.SetCep(*i)
	}
	return espc
}

// SetStartedAt sets the "started_at" field.
func (espc *ExtraServicePriceCreate) SetStartedAt(t time.Time) *ExtraServicePriceCreate {
	espc.mutation.SetStartedAt(t)
	return espc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (espc *ExtraServicePriceCreate) SetNillableStartedAt(t *time.Time) *ExtraServicePriceCreate {
	if t != nil {
		espc.SetStartedAt(*t)
	}
	return espc
}

// SetFinishedAt sets the "finished_at" field.
func (espc *ExtraServicePriceCreate) SetFinishedAt(t time.Time) *ExtraServicePriceCreate {
	espc.mutation.SetFinishedAt(t)
	return espc
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (espc *ExtraServicePriceCreate) SetNillableFinishedAt(t *time.Time) *ExtraServicePriceCreate {
	if t != nil {
		espc.SetFinishedAt(*t)
	}
	return espc
}

// SetIsDeprecated sets the "is_deprecated" field.
func (espc *ExtraServicePriceCreate) SetIsDeprecated(b bool) *ExtraServicePriceCreate {
	espc.mutation.SetIsDeprecated(b)
	return espc
}

// SetNillableIsDeprecated sets the "is_deprecated" field if the given value is not nil.
func (espc *ExtraServicePriceCreate) SetNillableIsDeprecated(b *bool) *ExtraServicePriceCreate {
	if b != nil {
		espc.SetIsDeprecated(*b)
	}
	return espc
}

// SetIsSensitive sets the "is_sensitive" field.
func (espc *ExtraServicePriceCreate) SetIsSensitive(b bool) *ExtraServicePriceCreate {
	espc.mutation.SetIsSensitive(b)
	return espc
}

// SetNillableIsSensitive sets the "is_sensitive" field if the given value is not nil.
func (espc *ExtraServicePriceCreate) SetNillableIsSensitive(b *bool) *ExtraServicePriceCreate {
	if b != nil {
		espc.SetIsSensitive(*b)
	}
	return espc
}

// SetID sets the "id" field.
func (espc *ExtraServicePriceCreate) SetID(i int64) *ExtraServicePriceCreate {
	espc.mutation.SetID(i)
	return espc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (espc *ExtraServicePriceCreate) SetNillableID(i *int64) *ExtraServicePriceCreate {
	if i != nil {
		espc.SetID(*i)
	}
	return espc
}

// SetExtraService sets the "extra_service" edge to the ExtraService entity.
func (espc *ExtraServicePriceCreate) SetExtraService(e *ExtraService) *ExtraServicePriceCreate {
	return espc.SetExtraServiceID(e.ID)
}

// Mutation returns the ExtraServicePriceMutation object of the builder.
func (espc *ExtraServicePriceCreate) Mutation() *ExtraServicePriceMutation {
	return espc.mutation
}

// Save creates the ExtraServicePrice in the database.
func (espc *ExtraServicePriceCreate) Save(ctx context.Context) (*ExtraServicePrice, error) {
	espc.defaults()
	return withHooks(ctx, espc.sqlSave, espc.mutation, espc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (espc *ExtraServicePriceCreate) SaveX(ctx context.Context) *ExtraServicePrice {
	v, err := espc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (espc *ExtraServicePriceCreate) Exec(ctx context.Context) error {
	_, err := espc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (espc *ExtraServicePriceCreate) ExecX(ctx context.Context) {
	if err := espc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (espc *ExtraServicePriceCreate) defaults() {
	if _, ok := espc.mutation.CreatedBy(); !ok {
		v := extraserviceprice.DefaultCreatedBy
		espc.mutation.SetCreatedBy(v)
	}
	if _, ok := espc.mutation.UpdatedBy(); !ok {
		v := extraserviceprice.DefaultUpdatedBy
		espc.mutation.SetUpdatedBy(v)
	}
	if _, ok := espc.mutation.CreatedAt(); !ok {
		v := extraserviceprice.DefaultCreatedAt()
		espc.mutation.SetCreatedAt(v)
	}
	if _, ok := espc.mutation.UpdatedAt(); !ok {
		v := extraserviceprice.DefaultUpdatedAt()
		espc.mutation.SetUpdatedAt(v)
	}
	if _, ok := espc.mutation.DeletedAt(); !ok {
		v := extraserviceprice.DefaultDeletedAt
		espc.mutation.SetDeletedAt(v)
	}
	if _, ok := espc.mutation.ExtraServiceBillingType(); !ok {
		v := extraserviceprice.DefaultExtraServiceBillingType
		espc.mutation.SetExtraServiceBillingType(v)
	}
	if _, ok := espc.mutation.ExtraServiceID(); !ok {
		v := extraserviceprice.DefaultExtraServiceID
		espc.mutation.SetExtraServiceID(v)
	}
	if _, ok := espc.mutation.Cep(); !ok {
		v := extraserviceprice.DefaultCep
		espc.mutation.SetCep(v)
	}
	if _, ok := espc.mutation.IsDeprecated(); !ok {
		v := extraserviceprice.DefaultIsDeprecated
		espc.mutation.SetIsDeprecated(v)
	}
	if _, ok := espc.mutation.IsSensitive(); !ok {
		v := extraserviceprice.DefaultIsSensitive
		espc.mutation.SetIsSensitive(v)
	}
	if _, ok := espc.mutation.ID(); !ok {
		v := extraserviceprice.DefaultID()
		espc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (espc *ExtraServicePriceCreate) check() error {
	if _, ok := espc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "ExtraServicePrice.created_by"`)}
	}
	if _, ok := espc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "ExtraServicePrice.updated_by"`)}
	}
	if _, ok := espc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "ExtraServicePrice.created_at"`)}
	}
	if _, ok := espc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "ExtraServicePrice.updated_at"`)}
	}
	if _, ok := espc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "ExtraServicePrice.deleted_at"`)}
	}
	if _, ok := espc.mutation.ExtraServiceBillingType(); !ok {
		return &ValidationError{Name: "extra_service_billing_type", err: errors.New(`cep_ent: missing required field "ExtraServicePrice.extra_service_billing_type"`)}
	}
	if v, ok := espc.mutation.ExtraServiceBillingType(); ok {
		if err := extraserviceprice.ExtraServiceBillingTypeValidator(v); err != nil {
			return &ValidationError{Name: "extra_service_billing_type", err: fmt.Errorf(`cep_ent: validator failed for field "ExtraServicePrice.extra_service_billing_type": %w`, err)}
		}
	}
	if _, ok := espc.mutation.ExtraServiceID(); !ok {
		return &ValidationError{Name: "extra_service_id", err: errors.New(`cep_ent: missing required field "ExtraServicePrice.extra_service_id"`)}
	}
	if _, ok := espc.mutation.Cep(); !ok {
		return &ValidationError{Name: "cep", err: errors.New(`cep_ent: missing required field "ExtraServicePrice.cep"`)}
	}
	if _, ok := espc.mutation.IsDeprecated(); !ok {
		return &ValidationError{Name: "is_deprecated", err: errors.New(`cep_ent: missing required field "ExtraServicePrice.is_deprecated"`)}
	}
	if _, ok := espc.mutation.IsSensitive(); !ok {
		return &ValidationError{Name: "is_sensitive", err: errors.New(`cep_ent: missing required field "ExtraServicePrice.is_sensitive"`)}
	}
	if _, ok := espc.mutation.ExtraServiceID(); !ok {
		return &ValidationError{Name: "extra_service", err: errors.New(`cep_ent: missing required edge "ExtraServicePrice.extra_service"`)}
	}
	return nil
}

func (espc *ExtraServicePriceCreate) sqlSave(ctx context.Context) (*ExtraServicePrice, error) {
	if err := espc.check(); err != nil {
		return nil, err
	}
	_node, _spec := espc.createSpec()
	if err := sqlgraph.CreateNode(ctx, espc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	espc.mutation.id = &_node.ID
	espc.mutation.done = true
	return _node, nil
}

func (espc *ExtraServicePriceCreate) createSpec() (*ExtraServicePrice, *sqlgraph.CreateSpec) {
	var (
		_node = &ExtraServicePrice{config: espc.config}
		_spec = sqlgraph.NewCreateSpec(extraserviceprice.Table, sqlgraph.NewFieldSpec(extraserviceprice.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = espc.conflict
	if id, ok := espc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := espc.mutation.CreatedBy(); ok {
		_spec.SetField(extraserviceprice.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := espc.mutation.UpdatedBy(); ok {
		_spec.SetField(extraserviceprice.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := espc.mutation.CreatedAt(); ok {
		_spec.SetField(extraserviceprice.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := espc.mutation.UpdatedAt(); ok {
		_spec.SetField(extraserviceprice.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := espc.mutation.DeletedAt(); ok {
		_spec.SetField(extraserviceprice.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := espc.mutation.ExtraServiceBillingType(); ok {
		_spec.SetField(extraserviceprice.FieldExtraServiceBillingType, field.TypeEnum, value)
		_node.ExtraServiceBillingType = value
	}
	if value, ok := espc.mutation.Cep(); ok {
		_spec.SetField(extraserviceprice.FieldCep, field.TypeInt64, value)
		_node.Cep = value
	}
	if value, ok := espc.mutation.StartedAt(); ok {
		_spec.SetField(extraserviceprice.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = &value
	}
	if value, ok := espc.mutation.FinishedAt(); ok {
		_spec.SetField(extraserviceprice.FieldFinishedAt, field.TypeTime, value)
		_node.FinishedAt = &value
	}
	if value, ok := espc.mutation.IsDeprecated(); ok {
		_spec.SetField(extraserviceprice.FieldIsDeprecated, field.TypeBool, value)
		_node.IsDeprecated = value
	}
	if value, ok := espc.mutation.IsSensitive(); ok {
		_spec.SetField(extraserviceprice.FieldIsSensitive, field.TypeBool, value)
		_node.IsSensitive = value
	}
	if nodes := espc.mutation.ExtraServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   extraserviceprice.ExtraServiceTable,
			Columns: []string{extraserviceprice.ExtraServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extraservice.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ExtraServiceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ExtraServicePrice.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ExtraServicePriceUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (espc *ExtraServicePriceCreate) OnConflict(opts ...sql.ConflictOption) *ExtraServicePriceUpsertOne {
	espc.conflict = opts
	return &ExtraServicePriceUpsertOne{
		create: espc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ExtraServicePrice.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (espc *ExtraServicePriceCreate) OnConflictColumns(columns ...string) *ExtraServicePriceUpsertOne {
	espc.conflict = append(espc.conflict, sql.ConflictColumns(columns...))
	return &ExtraServicePriceUpsertOne{
		create: espc,
	}
}

type (
	// ExtraServicePriceUpsertOne is the builder for "upsert"-ing
	//  one ExtraServicePrice node.
	ExtraServicePriceUpsertOne struct {
		create *ExtraServicePriceCreate
	}

	// ExtraServicePriceUpsert is the "OnConflict" setter.
	ExtraServicePriceUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *ExtraServicePriceUpsert) SetCreatedBy(v int64) *ExtraServicePriceUpsert {
	u.Set(extraserviceprice.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ExtraServicePriceUpsert) UpdateCreatedBy() *ExtraServicePriceUpsert {
	u.SetExcluded(extraserviceprice.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *ExtraServicePriceUpsert) AddCreatedBy(v int64) *ExtraServicePriceUpsert {
	u.Add(extraserviceprice.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ExtraServicePriceUpsert) SetUpdatedBy(v int64) *ExtraServicePriceUpsert {
	u.Set(extraserviceprice.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ExtraServicePriceUpsert) UpdateUpdatedBy() *ExtraServicePriceUpsert {
	u.SetExcluded(extraserviceprice.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ExtraServicePriceUpsert) AddUpdatedBy(v int64) *ExtraServicePriceUpsert {
	u.Add(extraserviceprice.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ExtraServicePriceUpsert) SetUpdatedAt(v time.Time) *ExtraServicePriceUpsert {
	u.Set(extraserviceprice.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ExtraServicePriceUpsert) UpdateUpdatedAt() *ExtraServicePriceUpsert {
	u.SetExcluded(extraserviceprice.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ExtraServicePriceUpsert) SetDeletedAt(v time.Time) *ExtraServicePriceUpsert {
	u.Set(extraserviceprice.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ExtraServicePriceUpsert) UpdateDeletedAt() *ExtraServicePriceUpsert {
	u.SetExcluded(extraserviceprice.FieldDeletedAt)
	return u
}

// SetExtraServiceBillingType sets the "extra_service_billing_type" field.
func (u *ExtraServicePriceUpsert) SetExtraServiceBillingType(v enums.ExtraServiceBillingType) *ExtraServicePriceUpsert {
	u.Set(extraserviceprice.FieldExtraServiceBillingType, v)
	return u
}

// UpdateExtraServiceBillingType sets the "extra_service_billing_type" field to the value that was provided on create.
func (u *ExtraServicePriceUpsert) UpdateExtraServiceBillingType() *ExtraServicePriceUpsert {
	u.SetExcluded(extraserviceprice.FieldExtraServiceBillingType)
	return u
}

// SetExtraServiceID sets the "extra_service_id" field.
func (u *ExtraServicePriceUpsert) SetExtraServiceID(v int64) *ExtraServicePriceUpsert {
	u.Set(extraserviceprice.FieldExtraServiceID, v)
	return u
}

// UpdateExtraServiceID sets the "extra_service_id" field to the value that was provided on create.
func (u *ExtraServicePriceUpsert) UpdateExtraServiceID() *ExtraServicePriceUpsert {
	u.SetExcluded(extraserviceprice.FieldExtraServiceID)
	return u
}

// SetCep sets the "cep" field.
func (u *ExtraServicePriceUpsert) SetCep(v int64) *ExtraServicePriceUpsert {
	u.Set(extraserviceprice.FieldCep, v)
	return u
}

// UpdateCep sets the "cep" field to the value that was provided on create.
func (u *ExtraServicePriceUpsert) UpdateCep() *ExtraServicePriceUpsert {
	u.SetExcluded(extraserviceprice.FieldCep)
	return u
}

// AddCep adds v to the "cep" field.
func (u *ExtraServicePriceUpsert) AddCep(v int64) *ExtraServicePriceUpsert {
	u.Add(extraserviceprice.FieldCep, v)
	return u
}

// SetStartedAt sets the "started_at" field.
func (u *ExtraServicePriceUpsert) SetStartedAt(v time.Time) *ExtraServicePriceUpsert {
	u.Set(extraserviceprice.FieldStartedAt, v)
	return u
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *ExtraServicePriceUpsert) UpdateStartedAt() *ExtraServicePriceUpsert {
	u.SetExcluded(extraserviceprice.FieldStartedAt)
	return u
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *ExtraServicePriceUpsert) ClearStartedAt() *ExtraServicePriceUpsert {
	u.SetNull(extraserviceprice.FieldStartedAt)
	return u
}

// SetFinishedAt sets the "finished_at" field.
func (u *ExtraServicePriceUpsert) SetFinishedAt(v time.Time) *ExtraServicePriceUpsert {
	u.Set(extraserviceprice.FieldFinishedAt, v)
	return u
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *ExtraServicePriceUpsert) UpdateFinishedAt() *ExtraServicePriceUpsert {
	u.SetExcluded(extraserviceprice.FieldFinishedAt)
	return u
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (u *ExtraServicePriceUpsert) ClearFinishedAt() *ExtraServicePriceUpsert {
	u.SetNull(extraserviceprice.FieldFinishedAt)
	return u
}

// SetIsDeprecated sets the "is_deprecated" field.
func (u *ExtraServicePriceUpsert) SetIsDeprecated(v bool) *ExtraServicePriceUpsert {
	u.Set(extraserviceprice.FieldIsDeprecated, v)
	return u
}

// UpdateIsDeprecated sets the "is_deprecated" field to the value that was provided on create.
func (u *ExtraServicePriceUpsert) UpdateIsDeprecated() *ExtraServicePriceUpsert {
	u.SetExcluded(extraserviceprice.FieldIsDeprecated)
	return u
}

// SetIsSensitive sets the "is_sensitive" field.
func (u *ExtraServicePriceUpsert) SetIsSensitive(v bool) *ExtraServicePriceUpsert {
	u.Set(extraserviceprice.FieldIsSensitive, v)
	return u
}

// UpdateIsSensitive sets the "is_sensitive" field to the value that was provided on create.
func (u *ExtraServicePriceUpsert) UpdateIsSensitive() *ExtraServicePriceUpsert {
	u.SetExcluded(extraserviceprice.FieldIsSensitive)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ExtraServicePrice.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(extraserviceprice.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ExtraServicePriceUpsertOne) UpdateNewValues() *ExtraServicePriceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(extraserviceprice.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(extraserviceprice.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ExtraServicePrice.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ExtraServicePriceUpsertOne) Ignore() *ExtraServicePriceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ExtraServicePriceUpsertOne) DoNothing() *ExtraServicePriceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ExtraServicePriceCreate.OnConflict
// documentation for more info.
func (u *ExtraServicePriceUpsertOne) Update(set func(*ExtraServicePriceUpsert)) *ExtraServicePriceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ExtraServicePriceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *ExtraServicePriceUpsertOne) SetCreatedBy(v int64) *ExtraServicePriceUpsertOne {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *ExtraServicePriceUpsertOne) AddCreatedBy(v int64) *ExtraServicePriceUpsertOne {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ExtraServicePriceUpsertOne) UpdateCreatedBy() *ExtraServicePriceUpsertOne {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ExtraServicePriceUpsertOne) SetUpdatedBy(v int64) *ExtraServicePriceUpsertOne {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ExtraServicePriceUpsertOne) AddUpdatedBy(v int64) *ExtraServicePriceUpsertOne {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ExtraServicePriceUpsertOne) UpdateUpdatedBy() *ExtraServicePriceUpsertOne {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ExtraServicePriceUpsertOne) SetUpdatedAt(v time.Time) *ExtraServicePriceUpsertOne {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ExtraServicePriceUpsertOne) UpdateUpdatedAt() *ExtraServicePriceUpsertOne {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ExtraServicePriceUpsertOne) SetDeletedAt(v time.Time) *ExtraServicePriceUpsertOne {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ExtraServicePriceUpsertOne) UpdateDeletedAt() *ExtraServicePriceUpsertOne {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetExtraServiceBillingType sets the "extra_service_billing_type" field.
func (u *ExtraServicePriceUpsertOne) SetExtraServiceBillingType(v enums.ExtraServiceBillingType) *ExtraServicePriceUpsertOne {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.SetExtraServiceBillingType(v)
	})
}

// UpdateExtraServiceBillingType sets the "extra_service_billing_type" field to the value that was provided on create.
func (u *ExtraServicePriceUpsertOne) UpdateExtraServiceBillingType() *ExtraServicePriceUpsertOne {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.UpdateExtraServiceBillingType()
	})
}

// SetExtraServiceID sets the "extra_service_id" field.
func (u *ExtraServicePriceUpsertOne) SetExtraServiceID(v int64) *ExtraServicePriceUpsertOne {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.SetExtraServiceID(v)
	})
}

// UpdateExtraServiceID sets the "extra_service_id" field to the value that was provided on create.
func (u *ExtraServicePriceUpsertOne) UpdateExtraServiceID() *ExtraServicePriceUpsertOne {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.UpdateExtraServiceID()
	})
}

// SetCep sets the "cep" field.
func (u *ExtraServicePriceUpsertOne) SetCep(v int64) *ExtraServicePriceUpsertOne {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.SetCep(v)
	})
}

// AddCep adds v to the "cep" field.
func (u *ExtraServicePriceUpsertOne) AddCep(v int64) *ExtraServicePriceUpsertOne {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.AddCep(v)
	})
}

// UpdateCep sets the "cep" field to the value that was provided on create.
func (u *ExtraServicePriceUpsertOne) UpdateCep() *ExtraServicePriceUpsertOne {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.UpdateCep()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *ExtraServicePriceUpsertOne) SetStartedAt(v time.Time) *ExtraServicePriceUpsertOne {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *ExtraServicePriceUpsertOne) UpdateStartedAt() *ExtraServicePriceUpsertOne {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.UpdateStartedAt()
	})
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *ExtraServicePriceUpsertOne) ClearStartedAt() *ExtraServicePriceUpsertOne {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.ClearStartedAt()
	})
}

// SetFinishedAt sets the "finished_at" field.
func (u *ExtraServicePriceUpsertOne) SetFinishedAt(v time.Time) *ExtraServicePriceUpsertOne {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.SetFinishedAt(v)
	})
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *ExtraServicePriceUpsertOne) UpdateFinishedAt() *ExtraServicePriceUpsertOne {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.UpdateFinishedAt()
	})
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (u *ExtraServicePriceUpsertOne) ClearFinishedAt() *ExtraServicePriceUpsertOne {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.ClearFinishedAt()
	})
}

// SetIsDeprecated sets the "is_deprecated" field.
func (u *ExtraServicePriceUpsertOne) SetIsDeprecated(v bool) *ExtraServicePriceUpsertOne {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.SetIsDeprecated(v)
	})
}

// UpdateIsDeprecated sets the "is_deprecated" field to the value that was provided on create.
func (u *ExtraServicePriceUpsertOne) UpdateIsDeprecated() *ExtraServicePriceUpsertOne {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.UpdateIsDeprecated()
	})
}

// SetIsSensitive sets the "is_sensitive" field.
func (u *ExtraServicePriceUpsertOne) SetIsSensitive(v bool) *ExtraServicePriceUpsertOne {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.SetIsSensitive(v)
	})
}

// UpdateIsSensitive sets the "is_sensitive" field to the value that was provided on create.
func (u *ExtraServicePriceUpsertOne) UpdateIsSensitive() *ExtraServicePriceUpsertOne {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.UpdateIsSensitive()
	})
}

// Exec executes the query.
func (u *ExtraServicePriceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for ExtraServicePriceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ExtraServicePriceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ExtraServicePriceUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ExtraServicePriceUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ExtraServicePriceCreateBulk is the builder for creating many ExtraServicePrice entities in bulk.
type ExtraServicePriceCreateBulk struct {
	config
	err      error
	builders []*ExtraServicePriceCreate
	conflict []sql.ConflictOption
}

// Save creates the ExtraServicePrice entities in the database.
func (espcb *ExtraServicePriceCreateBulk) Save(ctx context.Context) ([]*ExtraServicePrice, error) {
	if espcb.err != nil {
		return nil, espcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(espcb.builders))
	nodes := make([]*ExtraServicePrice, len(espcb.builders))
	mutators := make([]Mutator, len(espcb.builders))
	for i := range espcb.builders {
		func(i int, root context.Context) {
			builder := espcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExtraServicePriceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, espcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = espcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, espcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, espcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (espcb *ExtraServicePriceCreateBulk) SaveX(ctx context.Context) []*ExtraServicePrice {
	v, err := espcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (espcb *ExtraServicePriceCreateBulk) Exec(ctx context.Context) error {
	_, err := espcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (espcb *ExtraServicePriceCreateBulk) ExecX(ctx context.Context) {
	if err := espcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ExtraServicePrice.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ExtraServicePriceUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (espcb *ExtraServicePriceCreateBulk) OnConflict(opts ...sql.ConflictOption) *ExtraServicePriceUpsertBulk {
	espcb.conflict = opts
	return &ExtraServicePriceUpsertBulk{
		create: espcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ExtraServicePrice.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (espcb *ExtraServicePriceCreateBulk) OnConflictColumns(columns ...string) *ExtraServicePriceUpsertBulk {
	espcb.conflict = append(espcb.conflict, sql.ConflictColumns(columns...))
	return &ExtraServicePriceUpsertBulk{
		create: espcb,
	}
}

// ExtraServicePriceUpsertBulk is the builder for "upsert"-ing
// a bulk of ExtraServicePrice nodes.
type ExtraServicePriceUpsertBulk struct {
	create *ExtraServicePriceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ExtraServicePrice.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(extraserviceprice.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ExtraServicePriceUpsertBulk) UpdateNewValues() *ExtraServicePriceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(extraserviceprice.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(extraserviceprice.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ExtraServicePrice.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ExtraServicePriceUpsertBulk) Ignore() *ExtraServicePriceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ExtraServicePriceUpsertBulk) DoNothing() *ExtraServicePriceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ExtraServicePriceCreateBulk.OnConflict
// documentation for more info.
func (u *ExtraServicePriceUpsertBulk) Update(set func(*ExtraServicePriceUpsert)) *ExtraServicePriceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ExtraServicePriceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *ExtraServicePriceUpsertBulk) SetCreatedBy(v int64) *ExtraServicePriceUpsertBulk {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *ExtraServicePriceUpsertBulk) AddCreatedBy(v int64) *ExtraServicePriceUpsertBulk {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ExtraServicePriceUpsertBulk) UpdateCreatedBy() *ExtraServicePriceUpsertBulk {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ExtraServicePriceUpsertBulk) SetUpdatedBy(v int64) *ExtraServicePriceUpsertBulk {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ExtraServicePriceUpsertBulk) AddUpdatedBy(v int64) *ExtraServicePriceUpsertBulk {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ExtraServicePriceUpsertBulk) UpdateUpdatedBy() *ExtraServicePriceUpsertBulk {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ExtraServicePriceUpsertBulk) SetUpdatedAt(v time.Time) *ExtraServicePriceUpsertBulk {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ExtraServicePriceUpsertBulk) UpdateUpdatedAt() *ExtraServicePriceUpsertBulk {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ExtraServicePriceUpsertBulk) SetDeletedAt(v time.Time) *ExtraServicePriceUpsertBulk {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ExtraServicePriceUpsertBulk) UpdateDeletedAt() *ExtraServicePriceUpsertBulk {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetExtraServiceBillingType sets the "extra_service_billing_type" field.
func (u *ExtraServicePriceUpsertBulk) SetExtraServiceBillingType(v enums.ExtraServiceBillingType) *ExtraServicePriceUpsertBulk {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.SetExtraServiceBillingType(v)
	})
}

// UpdateExtraServiceBillingType sets the "extra_service_billing_type" field to the value that was provided on create.
func (u *ExtraServicePriceUpsertBulk) UpdateExtraServiceBillingType() *ExtraServicePriceUpsertBulk {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.UpdateExtraServiceBillingType()
	})
}

// SetExtraServiceID sets the "extra_service_id" field.
func (u *ExtraServicePriceUpsertBulk) SetExtraServiceID(v int64) *ExtraServicePriceUpsertBulk {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.SetExtraServiceID(v)
	})
}

// UpdateExtraServiceID sets the "extra_service_id" field to the value that was provided on create.
func (u *ExtraServicePriceUpsertBulk) UpdateExtraServiceID() *ExtraServicePriceUpsertBulk {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.UpdateExtraServiceID()
	})
}

// SetCep sets the "cep" field.
func (u *ExtraServicePriceUpsertBulk) SetCep(v int64) *ExtraServicePriceUpsertBulk {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.SetCep(v)
	})
}

// AddCep adds v to the "cep" field.
func (u *ExtraServicePriceUpsertBulk) AddCep(v int64) *ExtraServicePriceUpsertBulk {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.AddCep(v)
	})
}

// UpdateCep sets the "cep" field to the value that was provided on create.
func (u *ExtraServicePriceUpsertBulk) UpdateCep() *ExtraServicePriceUpsertBulk {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.UpdateCep()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *ExtraServicePriceUpsertBulk) SetStartedAt(v time.Time) *ExtraServicePriceUpsertBulk {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *ExtraServicePriceUpsertBulk) UpdateStartedAt() *ExtraServicePriceUpsertBulk {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.UpdateStartedAt()
	})
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *ExtraServicePriceUpsertBulk) ClearStartedAt() *ExtraServicePriceUpsertBulk {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.ClearStartedAt()
	})
}

// SetFinishedAt sets the "finished_at" field.
func (u *ExtraServicePriceUpsertBulk) SetFinishedAt(v time.Time) *ExtraServicePriceUpsertBulk {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.SetFinishedAt(v)
	})
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *ExtraServicePriceUpsertBulk) UpdateFinishedAt() *ExtraServicePriceUpsertBulk {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.UpdateFinishedAt()
	})
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (u *ExtraServicePriceUpsertBulk) ClearFinishedAt() *ExtraServicePriceUpsertBulk {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.ClearFinishedAt()
	})
}

// SetIsDeprecated sets the "is_deprecated" field.
func (u *ExtraServicePriceUpsertBulk) SetIsDeprecated(v bool) *ExtraServicePriceUpsertBulk {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.SetIsDeprecated(v)
	})
}

// UpdateIsDeprecated sets the "is_deprecated" field to the value that was provided on create.
func (u *ExtraServicePriceUpsertBulk) UpdateIsDeprecated() *ExtraServicePriceUpsertBulk {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.UpdateIsDeprecated()
	})
}

// SetIsSensitive sets the "is_sensitive" field.
func (u *ExtraServicePriceUpsertBulk) SetIsSensitive(v bool) *ExtraServicePriceUpsertBulk {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.SetIsSensitive(v)
	})
}

// UpdateIsSensitive sets the "is_sensitive" field to the value that was provided on create.
func (u *ExtraServicePriceUpsertBulk) UpdateIsSensitive() *ExtraServicePriceUpsertBulk {
	return u.Update(func(s *ExtraServicePriceUpsert) {
		s.UpdateIsSensitive()
	})
}

// Exec executes the query.
func (u *ExtraServicePriceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the ExtraServicePriceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for ExtraServicePriceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ExtraServicePriceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
