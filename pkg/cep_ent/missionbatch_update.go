// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionbatch"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionconsumeorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
)

// MissionBatchUpdate is the builder for updating MissionBatch entities.
type MissionBatchUpdate struct {
	config
	hooks    []Hook
	mutation *MissionBatchMutation
}

// Where appends a list predicates to the MissionBatchUpdate builder.
func (mbu *MissionBatchUpdate) Where(ps ...predicate.MissionBatch) *MissionBatchUpdate {
	mbu.mutation.Where(ps...)
	return mbu
}

// SetCreatedBy sets the "created_by" field.
func (mbu *MissionBatchUpdate) SetCreatedBy(i int64) *MissionBatchUpdate {
	mbu.mutation.ResetCreatedBy()
	mbu.mutation.SetCreatedBy(i)
	return mbu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mbu *MissionBatchUpdate) SetNillableCreatedBy(i *int64) *MissionBatchUpdate {
	if i != nil {
		mbu.SetCreatedBy(*i)
	}
	return mbu
}

// AddCreatedBy adds i to the "created_by" field.
func (mbu *MissionBatchUpdate) AddCreatedBy(i int64) *MissionBatchUpdate {
	mbu.mutation.AddCreatedBy(i)
	return mbu
}

// SetUpdatedBy sets the "updated_by" field.
func (mbu *MissionBatchUpdate) SetUpdatedBy(i int64) *MissionBatchUpdate {
	mbu.mutation.ResetUpdatedBy()
	mbu.mutation.SetUpdatedBy(i)
	return mbu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mbu *MissionBatchUpdate) SetNillableUpdatedBy(i *int64) *MissionBatchUpdate {
	if i != nil {
		mbu.SetUpdatedBy(*i)
	}
	return mbu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (mbu *MissionBatchUpdate) AddUpdatedBy(i int64) *MissionBatchUpdate {
	mbu.mutation.AddUpdatedBy(i)
	return mbu
}

// SetUpdatedAt sets the "updated_at" field.
func (mbu *MissionBatchUpdate) SetUpdatedAt(t time.Time) *MissionBatchUpdate {
	mbu.mutation.SetUpdatedAt(t)
	return mbu
}

// SetDeletedAt sets the "deleted_at" field.
func (mbu *MissionBatchUpdate) SetDeletedAt(t time.Time) *MissionBatchUpdate {
	mbu.mutation.SetDeletedAt(t)
	return mbu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mbu *MissionBatchUpdate) SetNillableDeletedAt(t *time.Time) *MissionBatchUpdate {
	if t != nil {
		mbu.SetDeletedAt(*t)
	}
	return mbu
}

// SetNumber sets the "number" field.
func (mbu *MissionBatchUpdate) SetNumber(s string) *MissionBatchUpdate {
	mbu.mutation.SetNumber(s)
	return mbu
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (mbu *MissionBatchUpdate) SetNillableNumber(s *string) *MissionBatchUpdate {
	if s != nil {
		mbu.SetNumber(*s)
	}
	return mbu
}

// SetUserID sets the "user_id" field.
func (mbu *MissionBatchUpdate) SetUserID(i int64) *MissionBatchUpdate {
	mbu.mutation.SetUserID(i)
	return mbu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (mbu *MissionBatchUpdate) SetNillableUserID(i *int64) *MissionBatchUpdate {
	if i != nil {
		mbu.SetUserID(*i)
	}
	return mbu
}

// SetUser sets the "user" edge to the User entity.
func (mbu *MissionBatchUpdate) SetUser(u *User) *MissionBatchUpdate {
	return mbu.SetUserID(u.ID)
}

// AddMissionConsumeOrderIDs adds the "mission_consume_orders" edge to the MissionConsumeOrder entity by IDs.
func (mbu *MissionBatchUpdate) AddMissionConsumeOrderIDs(ids ...int64) *MissionBatchUpdate {
	mbu.mutation.AddMissionConsumeOrderIDs(ids...)
	return mbu
}

// AddMissionConsumeOrders adds the "mission_consume_orders" edges to the MissionConsumeOrder entity.
func (mbu *MissionBatchUpdate) AddMissionConsumeOrders(m ...*MissionConsumeOrder) *MissionBatchUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mbu.AddMissionConsumeOrderIDs(ids...)
}

// Mutation returns the MissionBatchMutation object of the builder.
func (mbu *MissionBatchUpdate) Mutation() *MissionBatchMutation {
	return mbu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (mbu *MissionBatchUpdate) ClearUser() *MissionBatchUpdate {
	mbu.mutation.ClearUser()
	return mbu
}

// ClearMissionConsumeOrders clears all "mission_consume_orders" edges to the MissionConsumeOrder entity.
func (mbu *MissionBatchUpdate) ClearMissionConsumeOrders() *MissionBatchUpdate {
	mbu.mutation.ClearMissionConsumeOrders()
	return mbu
}

// RemoveMissionConsumeOrderIDs removes the "mission_consume_orders" edge to MissionConsumeOrder entities by IDs.
func (mbu *MissionBatchUpdate) RemoveMissionConsumeOrderIDs(ids ...int64) *MissionBatchUpdate {
	mbu.mutation.RemoveMissionConsumeOrderIDs(ids...)
	return mbu
}

// RemoveMissionConsumeOrders removes "mission_consume_orders" edges to MissionConsumeOrder entities.
func (mbu *MissionBatchUpdate) RemoveMissionConsumeOrders(m ...*MissionConsumeOrder) *MissionBatchUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mbu.RemoveMissionConsumeOrderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mbu *MissionBatchUpdate) Save(ctx context.Context) (int, error) {
	mbu.defaults()
	return withHooks(ctx, mbu.sqlSave, mbu.mutation, mbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mbu *MissionBatchUpdate) SaveX(ctx context.Context) int {
	affected, err := mbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mbu *MissionBatchUpdate) Exec(ctx context.Context) error {
	_, err := mbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mbu *MissionBatchUpdate) ExecX(ctx context.Context) {
	if err := mbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mbu *MissionBatchUpdate) defaults() {
	if _, ok := mbu.mutation.UpdatedAt(); !ok {
		v := missionbatch.UpdateDefaultUpdatedAt()
		mbu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mbu *MissionBatchUpdate) check() error {
	if _, ok := mbu.mutation.UserID(); mbu.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionBatch.user"`)
	}
	return nil
}

func (mbu *MissionBatchUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mbu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(missionbatch.Table, missionbatch.Columns, sqlgraph.NewFieldSpec(missionbatch.FieldID, field.TypeInt64))
	if ps := mbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mbu.mutation.CreatedBy(); ok {
		_spec.SetField(missionbatch.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mbu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(missionbatch.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mbu.mutation.UpdatedBy(); ok {
		_spec.SetField(missionbatch.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mbu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(missionbatch.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mbu.mutation.UpdatedAt(); ok {
		_spec.SetField(missionbatch.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mbu.mutation.DeletedAt(); ok {
		_spec.SetField(missionbatch.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := mbu.mutation.Number(); ok {
		_spec.SetField(missionbatch.FieldNumber, field.TypeString, value)
	}
	if mbu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionbatch.UserTable,
			Columns: []string{missionbatch.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mbu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionbatch.UserTable,
			Columns: []string{missionbatch.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mbu.mutation.MissionConsumeOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionbatch.MissionConsumeOrdersTable,
			Columns: []string{missionbatch.MissionConsumeOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mbu.mutation.RemovedMissionConsumeOrdersIDs(); len(nodes) > 0 && !mbu.mutation.MissionConsumeOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionbatch.MissionConsumeOrdersTable,
			Columns: []string{missionbatch.MissionConsumeOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mbu.mutation.MissionConsumeOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionbatch.MissionConsumeOrdersTable,
			Columns: []string{missionbatch.MissionConsumeOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{missionbatch.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mbu.mutation.done = true
	return n, nil
}

// MissionBatchUpdateOne is the builder for updating a single MissionBatch entity.
type MissionBatchUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MissionBatchMutation
}

// SetCreatedBy sets the "created_by" field.
func (mbuo *MissionBatchUpdateOne) SetCreatedBy(i int64) *MissionBatchUpdateOne {
	mbuo.mutation.ResetCreatedBy()
	mbuo.mutation.SetCreatedBy(i)
	return mbuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mbuo *MissionBatchUpdateOne) SetNillableCreatedBy(i *int64) *MissionBatchUpdateOne {
	if i != nil {
		mbuo.SetCreatedBy(*i)
	}
	return mbuo
}

// AddCreatedBy adds i to the "created_by" field.
func (mbuo *MissionBatchUpdateOne) AddCreatedBy(i int64) *MissionBatchUpdateOne {
	mbuo.mutation.AddCreatedBy(i)
	return mbuo
}

// SetUpdatedBy sets the "updated_by" field.
func (mbuo *MissionBatchUpdateOne) SetUpdatedBy(i int64) *MissionBatchUpdateOne {
	mbuo.mutation.ResetUpdatedBy()
	mbuo.mutation.SetUpdatedBy(i)
	return mbuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mbuo *MissionBatchUpdateOne) SetNillableUpdatedBy(i *int64) *MissionBatchUpdateOne {
	if i != nil {
		mbuo.SetUpdatedBy(*i)
	}
	return mbuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (mbuo *MissionBatchUpdateOne) AddUpdatedBy(i int64) *MissionBatchUpdateOne {
	mbuo.mutation.AddUpdatedBy(i)
	return mbuo
}

// SetUpdatedAt sets the "updated_at" field.
func (mbuo *MissionBatchUpdateOne) SetUpdatedAt(t time.Time) *MissionBatchUpdateOne {
	mbuo.mutation.SetUpdatedAt(t)
	return mbuo
}

// SetDeletedAt sets the "deleted_at" field.
func (mbuo *MissionBatchUpdateOne) SetDeletedAt(t time.Time) *MissionBatchUpdateOne {
	mbuo.mutation.SetDeletedAt(t)
	return mbuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mbuo *MissionBatchUpdateOne) SetNillableDeletedAt(t *time.Time) *MissionBatchUpdateOne {
	if t != nil {
		mbuo.SetDeletedAt(*t)
	}
	return mbuo
}

// SetNumber sets the "number" field.
func (mbuo *MissionBatchUpdateOne) SetNumber(s string) *MissionBatchUpdateOne {
	mbuo.mutation.SetNumber(s)
	return mbuo
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (mbuo *MissionBatchUpdateOne) SetNillableNumber(s *string) *MissionBatchUpdateOne {
	if s != nil {
		mbuo.SetNumber(*s)
	}
	return mbuo
}

// SetUserID sets the "user_id" field.
func (mbuo *MissionBatchUpdateOne) SetUserID(i int64) *MissionBatchUpdateOne {
	mbuo.mutation.SetUserID(i)
	return mbuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (mbuo *MissionBatchUpdateOne) SetNillableUserID(i *int64) *MissionBatchUpdateOne {
	if i != nil {
		mbuo.SetUserID(*i)
	}
	return mbuo
}

// SetUser sets the "user" edge to the User entity.
func (mbuo *MissionBatchUpdateOne) SetUser(u *User) *MissionBatchUpdateOne {
	return mbuo.SetUserID(u.ID)
}

// AddMissionConsumeOrderIDs adds the "mission_consume_orders" edge to the MissionConsumeOrder entity by IDs.
func (mbuo *MissionBatchUpdateOne) AddMissionConsumeOrderIDs(ids ...int64) *MissionBatchUpdateOne {
	mbuo.mutation.AddMissionConsumeOrderIDs(ids...)
	return mbuo
}

// AddMissionConsumeOrders adds the "mission_consume_orders" edges to the MissionConsumeOrder entity.
func (mbuo *MissionBatchUpdateOne) AddMissionConsumeOrders(m ...*MissionConsumeOrder) *MissionBatchUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mbuo.AddMissionConsumeOrderIDs(ids...)
}

// Mutation returns the MissionBatchMutation object of the builder.
func (mbuo *MissionBatchUpdateOne) Mutation() *MissionBatchMutation {
	return mbuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (mbuo *MissionBatchUpdateOne) ClearUser() *MissionBatchUpdateOne {
	mbuo.mutation.ClearUser()
	return mbuo
}

// ClearMissionConsumeOrders clears all "mission_consume_orders" edges to the MissionConsumeOrder entity.
func (mbuo *MissionBatchUpdateOne) ClearMissionConsumeOrders() *MissionBatchUpdateOne {
	mbuo.mutation.ClearMissionConsumeOrders()
	return mbuo
}

// RemoveMissionConsumeOrderIDs removes the "mission_consume_orders" edge to MissionConsumeOrder entities by IDs.
func (mbuo *MissionBatchUpdateOne) RemoveMissionConsumeOrderIDs(ids ...int64) *MissionBatchUpdateOne {
	mbuo.mutation.RemoveMissionConsumeOrderIDs(ids...)
	return mbuo
}

// RemoveMissionConsumeOrders removes "mission_consume_orders" edges to MissionConsumeOrder entities.
func (mbuo *MissionBatchUpdateOne) RemoveMissionConsumeOrders(m ...*MissionConsumeOrder) *MissionBatchUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mbuo.RemoveMissionConsumeOrderIDs(ids...)
}

// Where appends a list predicates to the MissionBatchUpdate builder.
func (mbuo *MissionBatchUpdateOne) Where(ps ...predicate.MissionBatch) *MissionBatchUpdateOne {
	mbuo.mutation.Where(ps...)
	return mbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mbuo *MissionBatchUpdateOne) Select(field string, fields ...string) *MissionBatchUpdateOne {
	mbuo.fields = append([]string{field}, fields...)
	return mbuo
}

// Save executes the query and returns the updated MissionBatch entity.
func (mbuo *MissionBatchUpdateOne) Save(ctx context.Context) (*MissionBatch, error) {
	mbuo.defaults()
	return withHooks(ctx, mbuo.sqlSave, mbuo.mutation, mbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mbuo *MissionBatchUpdateOne) SaveX(ctx context.Context) *MissionBatch {
	node, err := mbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mbuo *MissionBatchUpdateOne) Exec(ctx context.Context) error {
	_, err := mbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mbuo *MissionBatchUpdateOne) ExecX(ctx context.Context) {
	if err := mbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mbuo *MissionBatchUpdateOne) defaults() {
	if _, ok := mbuo.mutation.UpdatedAt(); !ok {
		v := missionbatch.UpdateDefaultUpdatedAt()
		mbuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mbuo *MissionBatchUpdateOne) check() error {
	if _, ok := mbuo.mutation.UserID(); mbuo.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "MissionBatch.user"`)
	}
	return nil
}

func (mbuo *MissionBatchUpdateOne) sqlSave(ctx context.Context) (_node *MissionBatch, err error) {
	if err := mbuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(missionbatch.Table, missionbatch.Columns, sqlgraph.NewFieldSpec(missionbatch.FieldID, field.TypeInt64))
	id, ok := mbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "MissionBatch.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, missionbatch.FieldID)
		for _, f := range fields {
			if !missionbatch.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != missionbatch.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mbuo.mutation.CreatedBy(); ok {
		_spec.SetField(missionbatch.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mbuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(missionbatch.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mbuo.mutation.UpdatedBy(); ok {
		_spec.SetField(missionbatch.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mbuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(missionbatch.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mbuo.mutation.UpdatedAt(); ok {
		_spec.SetField(missionbatch.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mbuo.mutation.DeletedAt(); ok {
		_spec.SetField(missionbatch.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := mbuo.mutation.Number(); ok {
		_spec.SetField(missionbatch.FieldNumber, field.TypeString, value)
	}
	if mbuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionbatch.UserTable,
			Columns: []string{missionbatch.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mbuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionbatch.UserTable,
			Columns: []string{missionbatch.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mbuo.mutation.MissionConsumeOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionbatch.MissionConsumeOrdersTable,
			Columns: []string{missionbatch.MissionConsumeOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mbuo.mutation.RemovedMissionConsumeOrdersIDs(); len(nodes) > 0 && !mbuo.mutation.MissionConsumeOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionbatch.MissionConsumeOrdersTable,
			Columns: []string{missionbatch.MissionConsumeOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mbuo.mutation.MissionConsumeOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionbatch.MissionConsumeOrdersTable,
			Columns: []string{missionbatch.MissionConsumeOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MissionBatch{config: mbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{missionbatch.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mbuo.mutation.done = true
	return _node, nil
}
