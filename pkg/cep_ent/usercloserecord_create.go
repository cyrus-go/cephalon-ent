// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/usercloserecord"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// UserCloseRecordCreate is the builder for creating a UserCloseRecord entity.
type UserCloseRecordCreate struct {
	config
	mutation *UserCloseRecordMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (ucrc *UserCloseRecordCreate) SetCreatedBy(i int64) *UserCloseRecordCreate {
	ucrc.mutation.SetCreatedBy(i)
	return ucrc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ucrc *UserCloseRecordCreate) SetNillableCreatedBy(i *int64) *UserCloseRecordCreate {
	if i != nil {
		ucrc.SetCreatedBy(*i)
	}
	return ucrc
}

// SetUpdatedBy sets the "updated_by" field.
func (ucrc *UserCloseRecordCreate) SetUpdatedBy(i int64) *UserCloseRecordCreate {
	ucrc.mutation.SetUpdatedBy(i)
	return ucrc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ucrc *UserCloseRecordCreate) SetNillableUpdatedBy(i *int64) *UserCloseRecordCreate {
	if i != nil {
		ucrc.SetUpdatedBy(*i)
	}
	return ucrc
}

// SetCreatedAt sets the "created_at" field.
func (ucrc *UserCloseRecordCreate) SetCreatedAt(t time.Time) *UserCloseRecordCreate {
	ucrc.mutation.SetCreatedAt(t)
	return ucrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ucrc *UserCloseRecordCreate) SetNillableCreatedAt(t *time.Time) *UserCloseRecordCreate {
	if t != nil {
		ucrc.SetCreatedAt(*t)
	}
	return ucrc
}

// SetUpdatedAt sets the "updated_at" field.
func (ucrc *UserCloseRecordCreate) SetUpdatedAt(t time.Time) *UserCloseRecordCreate {
	ucrc.mutation.SetUpdatedAt(t)
	return ucrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ucrc *UserCloseRecordCreate) SetNillableUpdatedAt(t *time.Time) *UserCloseRecordCreate {
	if t != nil {
		ucrc.SetUpdatedAt(*t)
	}
	return ucrc
}

// SetDeletedAt sets the "deleted_at" field.
func (ucrc *UserCloseRecordCreate) SetDeletedAt(t time.Time) *UserCloseRecordCreate {
	ucrc.mutation.SetDeletedAt(t)
	return ucrc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ucrc *UserCloseRecordCreate) SetNillableDeletedAt(t *time.Time) *UserCloseRecordCreate {
	if t != nil {
		ucrc.SetDeletedAt(*t)
	}
	return ucrc
}

// SetUserID sets the "user_id" field.
func (ucrc *UserCloseRecordCreate) SetUserID(i int64) *UserCloseRecordCreate {
	ucrc.mutation.SetUserID(i)
	return ucrc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ucrc *UserCloseRecordCreate) SetNillableUserID(i *int64) *UserCloseRecordCreate {
	if i != nil {
		ucrc.SetUserID(*i)
	}
	return ucrc
}

// SetRegisteredAt sets the "registered_at" field.
func (ucrc *UserCloseRecordCreate) SetRegisteredAt(t time.Time) *UserCloseRecordCreate {
	ucrc.mutation.SetRegisteredAt(t)
	return ucrc
}

// SetNillableRegisteredAt sets the "registered_at" field if the given value is not nil.
func (ucrc *UserCloseRecordCreate) SetNillableRegisteredAt(t *time.Time) *UserCloseRecordCreate {
	if t != nil {
		ucrc.SetRegisteredAt(*t)
	}
	return ucrc
}

// SetClosedAt sets the "closed_at" field.
func (ucrc *UserCloseRecordCreate) SetClosedAt(t time.Time) *UserCloseRecordCreate {
	ucrc.mutation.SetClosedAt(t)
	return ucrc
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (ucrc *UserCloseRecordCreate) SetNillableClosedAt(t *time.Time) *UserCloseRecordCreate {
	if t != nil {
		ucrc.SetClosedAt(*t)
	}
	return ucrc
}

// SetType sets the "type" field.
func (ucrc *UserCloseRecordCreate) SetType(ect enums.UserCloseType) *UserCloseRecordCreate {
	ucrc.mutation.SetType(ect)
	return ucrc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ucrc *UserCloseRecordCreate) SetNillableType(ect *enums.UserCloseType) *UserCloseRecordCreate {
	if ect != nil {
		ucrc.SetType(*ect)
	}
	return ucrc
}

// SetOperateUserID sets the "operate_user_id" field.
func (ucrc *UserCloseRecordCreate) SetOperateUserID(i int64) *UserCloseRecordCreate {
	ucrc.mutation.SetOperateUserID(i)
	return ucrc
}

// SetNillableOperateUserID sets the "operate_user_id" field if the given value is not nil.
func (ucrc *UserCloseRecordCreate) SetNillableOperateUserID(i *int64) *UserCloseRecordCreate {
	if i != nil {
		ucrc.SetOperateUserID(*i)
	}
	return ucrc
}

// SetID sets the "id" field.
func (ucrc *UserCloseRecordCreate) SetID(i int64) *UserCloseRecordCreate {
	ucrc.mutation.SetID(i)
	return ucrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ucrc *UserCloseRecordCreate) SetNillableID(i *int64) *UserCloseRecordCreate {
	if i != nil {
		ucrc.SetID(*i)
	}
	return ucrc
}

// SetUser sets the "user" edge to the User entity.
func (ucrc *UserCloseRecordCreate) SetUser(u *User) *UserCloseRecordCreate {
	return ucrc.SetUserID(u.ID)
}

// SetOperateUser sets the "operate_user" edge to the User entity.
func (ucrc *UserCloseRecordCreate) SetOperateUser(u *User) *UserCloseRecordCreate {
	return ucrc.SetOperateUserID(u.ID)
}

// Mutation returns the UserCloseRecordMutation object of the builder.
func (ucrc *UserCloseRecordCreate) Mutation() *UserCloseRecordMutation {
	return ucrc.mutation
}

// Save creates the UserCloseRecord in the database.
func (ucrc *UserCloseRecordCreate) Save(ctx context.Context) (*UserCloseRecord, error) {
	ucrc.defaults()
	return withHooks(ctx, ucrc.sqlSave, ucrc.mutation, ucrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ucrc *UserCloseRecordCreate) SaveX(ctx context.Context) *UserCloseRecord {
	v, err := ucrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucrc *UserCloseRecordCreate) Exec(ctx context.Context) error {
	_, err := ucrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucrc *UserCloseRecordCreate) ExecX(ctx context.Context) {
	if err := ucrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ucrc *UserCloseRecordCreate) defaults() {
	if _, ok := ucrc.mutation.CreatedBy(); !ok {
		v := usercloserecord.DefaultCreatedBy
		ucrc.mutation.SetCreatedBy(v)
	}
	if _, ok := ucrc.mutation.UpdatedBy(); !ok {
		v := usercloserecord.DefaultUpdatedBy
		ucrc.mutation.SetUpdatedBy(v)
	}
	if _, ok := ucrc.mutation.CreatedAt(); !ok {
		v := usercloserecord.DefaultCreatedAt()
		ucrc.mutation.SetCreatedAt(v)
	}
	if _, ok := ucrc.mutation.UpdatedAt(); !ok {
		v := usercloserecord.DefaultUpdatedAt()
		ucrc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ucrc.mutation.DeletedAt(); !ok {
		v := usercloserecord.DefaultDeletedAt
		ucrc.mutation.SetDeletedAt(v)
	}
	if _, ok := ucrc.mutation.UserID(); !ok {
		v := usercloserecord.DefaultUserID
		ucrc.mutation.SetUserID(v)
	}
	if _, ok := ucrc.mutation.RegisteredAt(); !ok {
		v := usercloserecord.DefaultRegisteredAt
		ucrc.mutation.SetRegisteredAt(v)
	}
	if _, ok := ucrc.mutation.ClosedAt(); !ok {
		v := usercloserecord.DefaultClosedAt
		ucrc.mutation.SetClosedAt(v)
	}
	if _, ok := ucrc.mutation.GetType(); !ok {
		v := usercloserecord.DefaultType
		ucrc.mutation.SetType(v)
	}
	if _, ok := ucrc.mutation.OperateUserID(); !ok {
		v := usercloserecord.DefaultOperateUserID
		ucrc.mutation.SetOperateUserID(v)
	}
	if _, ok := ucrc.mutation.ID(); !ok {
		v := usercloserecord.DefaultID()
		ucrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucrc *UserCloseRecordCreate) check() error {
	if _, ok := ucrc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "UserCloseRecord.created_by"`)}
	}
	if _, ok := ucrc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "UserCloseRecord.updated_by"`)}
	}
	if _, ok := ucrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "UserCloseRecord.created_at"`)}
	}
	if _, ok := ucrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "UserCloseRecord.updated_at"`)}
	}
	if _, ok := ucrc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "UserCloseRecord.deleted_at"`)}
	}
	if _, ok := ucrc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "UserCloseRecord.user_id"`)}
	}
	if _, ok := ucrc.mutation.RegisteredAt(); !ok {
		return &ValidationError{Name: "registered_at", err: errors.New(`cep_ent: missing required field "UserCloseRecord.registered_at"`)}
	}
	if _, ok := ucrc.mutation.ClosedAt(); !ok {
		return &ValidationError{Name: "closed_at", err: errors.New(`cep_ent: missing required field "UserCloseRecord.closed_at"`)}
	}
	if _, ok := ucrc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`cep_ent: missing required field "UserCloseRecord.type"`)}
	}
	if v, ok := ucrc.mutation.GetType(); ok {
		if err := usercloserecord.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "UserCloseRecord.type": %w`, err)}
		}
	}
	if _, ok := ucrc.mutation.OperateUserID(); !ok {
		return &ValidationError{Name: "operate_user_id", err: errors.New(`cep_ent: missing required field "UserCloseRecord.operate_user_id"`)}
	}
	if _, ok := ucrc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "UserCloseRecord.user"`)}
	}
	if _, ok := ucrc.mutation.OperateUserID(); !ok {
		return &ValidationError{Name: "operate_user", err: errors.New(`cep_ent: missing required edge "UserCloseRecord.operate_user"`)}
	}
	return nil
}

func (ucrc *UserCloseRecordCreate) sqlSave(ctx context.Context) (*UserCloseRecord, error) {
	if err := ucrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ucrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ucrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	ucrc.mutation.id = &_node.ID
	ucrc.mutation.done = true
	return _node, nil
}

func (ucrc *UserCloseRecordCreate) createSpec() (*UserCloseRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &UserCloseRecord{config: ucrc.config}
		_spec = sqlgraph.NewCreateSpec(usercloserecord.Table, sqlgraph.NewFieldSpec(usercloserecord.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = ucrc.conflict
	if id, ok := ucrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ucrc.mutation.CreatedBy(); ok {
		_spec.SetField(usercloserecord.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := ucrc.mutation.UpdatedBy(); ok {
		_spec.SetField(usercloserecord.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := ucrc.mutation.CreatedAt(); ok {
		_spec.SetField(usercloserecord.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ucrc.mutation.UpdatedAt(); ok {
		_spec.SetField(usercloserecord.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ucrc.mutation.DeletedAt(); ok {
		_spec.SetField(usercloserecord.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := ucrc.mutation.RegisteredAt(); ok {
		_spec.SetField(usercloserecord.FieldRegisteredAt, field.TypeTime, value)
		_node.RegisteredAt = value
	}
	if value, ok := ucrc.mutation.ClosedAt(); ok {
		_spec.SetField(usercloserecord.FieldClosedAt, field.TypeTime, value)
		_node.ClosedAt = value
	}
	if value, ok := ucrc.mutation.GetType(); ok {
		_spec.SetField(usercloserecord.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if nodes := ucrc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercloserecord.UserTable,
			Columns: []string{usercloserecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ucrc.mutation.OperateUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercloserecord.OperateUserTable,
			Columns: []string{usercloserecord.OperateUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OperateUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserCloseRecord.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserCloseRecordUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (ucrc *UserCloseRecordCreate) OnConflict(opts ...sql.ConflictOption) *UserCloseRecordUpsertOne {
	ucrc.conflict = opts
	return &UserCloseRecordUpsertOne{
		create: ucrc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserCloseRecord.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ucrc *UserCloseRecordCreate) OnConflictColumns(columns ...string) *UserCloseRecordUpsertOne {
	ucrc.conflict = append(ucrc.conflict, sql.ConflictColumns(columns...))
	return &UserCloseRecordUpsertOne{
		create: ucrc,
	}
}

type (
	// UserCloseRecordUpsertOne is the builder for "upsert"-ing
	//  one UserCloseRecord node.
	UserCloseRecordUpsertOne struct {
		create *UserCloseRecordCreate
	}

	// UserCloseRecordUpsert is the "OnConflict" setter.
	UserCloseRecordUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *UserCloseRecordUpsert) SetCreatedBy(v int64) *UserCloseRecordUpsert {
	u.Set(usercloserecord.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *UserCloseRecordUpsert) UpdateCreatedBy() *UserCloseRecordUpsert {
	u.SetExcluded(usercloserecord.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *UserCloseRecordUpsert) AddCreatedBy(v int64) *UserCloseRecordUpsert {
	u.Add(usercloserecord.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *UserCloseRecordUpsert) SetUpdatedBy(v int64) *UserCloseRecordUpsert {
	u.Set(usercloserecord.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *UserCloseRecordUpsert) UpdateUpdatedBy() *UserCloseRecordUpsert {
	u.SetExcluded(usercloserecord.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *UserCloseRecordUpsert) AddUpdatedBy(v int64) *UserCloseRecordUpsert {
	u.Add(usercloserecord.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserCloseRecordUpsert) SetUpdatedAt(v time.Time) *UserCloseRecordUpsert {
	u.Set(usercloserecord.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserCloseRecordUpsert) UpdateUpdatedAt() *UserCloseRecordUpsert {
	u.SetExcluded(usercloserecord.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserCloseRecordUpsert) SetDeletedAt(v time.Time) *UserCloseRecordUpsert {
	u.Set(usercloserecord.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserCloseRecordUpsert) UpdateDeletedAt() *UserCloseRecordUpsert {
	u.SetExcluded(usercloserecord.FieldDeletedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserCloseRecordUpsert) SetUserID(v int64) *UserCloseRecordUpsert {
	u.Set(usercloserecord.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserCloseRecordUpsert) UpdateUserID() *UserCloseRecordUpsert {
	u.SetExcluded(usercloserecord.FieldUserID)
	return u
}

// SetRegisteredAt sets the "registered_at" field.
func (u *UserCloseRecordUpsert) SetRegisteredAt(v time.Time) *UserCloseRecordUpsert {
	u.Set(usercloserecord.FieldRegisteredAt, v)
	return u
}

// UpdateRegisteredAt sets the "registered_at" field to the value that was provided on create.
func (u *UserCloseRecordUpsert) UpdateRegisteredAt() *UserCloseRecordUpsert {
	u.SetExcluded(usercloserecord.FieldRegisteredAt)
	return u
}

// SetClosedAt sets the "closed_at" field.
func (u *UserCloseRecordUpsert) SetClosedAt(v time.Time) *UserCloseRecordUpsert {
	u.Set(usercloserecord.FieldClosedAt, v)
	return u
}

// UpdateClosedAt sets the "closed_at" field to the value that was provided on create.
func (u *UserCloseRecordUpsert) UpdateClosedAt() *UserCloseRecordUpsert {
	u.SetExcluded(usercloserecord.FieldClosedAt)
	return u
}

// SetType sets the "type" field.
func (u *UserCloseRecordUpsert) SetType(v enums.UserCloseType) *UserCloseRecordUpsert {
	u.Set(usercloserecord.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *UserCloseRecordUpsert) UpdateType() *UserCloseRecordUpsert {
	u.SetExcluded(usercloserecord.FieldType)
	return u
}

// SetOperateUserID sets the "operate_user_id" field.
func (u *UserCloseRecordUpsert) SetOperateUserID(v int64) *UserCloseRecordUpsert {
	u.Set(usercloserecord.FieldOperateUserID, v)
	return u
}

// UpdateOperateUserID sets the "operate_user_id" field to the value that was provided on create.
func (u *UserCloseRecordUpsert) UpdateOperateUserID() *UserCloseRecordUpsert {
	u.SetExcluded(usercloserecord.FieldOperateUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UserCloseRecord.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(usercloserecord.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserCloseRecordUpsertOne) UpdateNewValues() *UserCloseRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(usercloserecord.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(usercloserecord.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserCloseRecord.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserCloseRecordUpsertOne) Ignore() *UserCloseRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserCloseRecordUpsertOne) DoNothing() *UserCloseRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCloseRecordCreate.OnConflict
// documentation for more info.
func (u *UserCloseRecordUpsertOne) Update(set func(*UserCloseRecordUpsert)) *UserCloseRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserCloseRecordUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *UserCloseRecordUpsertOne) SetCreatedBy(v int64) *UserCloseRecordUpsertOne {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *UserCloseRecordUpsertOne) AddCreatedBy(v int64) *UserCloseRecordUpsertOne {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *UserCloseRecordUpsertOne) UpdateCreatedBy() *UserCloseRecordUpsertOne {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *UserCloseRecordUpsertOne) SetUpdatedBy(v int64) *UserCloseRecordUpsertOne {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *UserCloseRecordUpsertOne) AddUpdatedBy(v int64) *UserCloseRecordUpsertOne {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *UserCloseRecordUpsertOne) UpdateUpdatedBy() *UserCloseRecordUpsertOne {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserCloseRecordUpsertOne) SetUpdatedAt(v time.Time) *UserCloseRecordUpsertOne {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserCloseRecordUpsertOne) UpdateUpdatedAt() *UserCloseRecordUpsertOne {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserCloseRecordUpsertOne) SetDeletedAt(v time.Time) *UserCloseRecordUpsertOne {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserCloseRecordUpsertOne) UpdateDeletedAt() *UserCloseRecordUpsertOne {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *UserCloseRecordUpsertOne) SetUserID(v int64) *UserCloseRecordUpsertOne {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserCloseRecordUpsertOne) UpdateUserID() *UserCloseRecordUpsertOne {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.UpdateUserID()
	})
}

// SetRegisteredAt sets the "registered_at" field.
func (u *UserCloseRecordUpsertOne) SetRegisteredAt(v time.Time) *UserCloseRecordUpsertOne {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.SetRegisteredAt(v)
	})
}

// UpdateRegisteredAt sets the "registered_at" field to the value that was provided on create.
func (u *UserCloseRecordUpsertOne) UpdateRegisteredAt() *UserCloseRecordUpsertOne {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.UpdateRegisteredAt()
	})
}

// SetClosedAt sets the "closed_at" field.
func (u *UserCloseRecordUpsertOne) SetClosedAt(v time.Time) *UserCloseRecordUpsertOne {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.SetClosedAt(v)
	})
}

// UpdateClosedAt sets the "closed_at" field to the value that was provided on create.
func (u *UserCloseRecordUpsertOne) UpdateClosedAt() *UserCloseRecordUpsertOne {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.UpdateClosedAt()
	})
}

// SetType sets the "type" field.
func (u *UserCloseRecordUpsertOne) SetType(v enums.UserCloseType) *UserCloseRecordUpsertOne {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *UserCloseRecordUpsertOne) UpdateType() *UserCloseRecordUpsertOne {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.UpdateType()
	})
}

// SetOperateUserID sets the "operate_user_id" field.
func (u *UserCloseRecordUpsertOne) SetOperateUserID(v int64) *UserCloseRecordUpsertOne {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.SetOperateUserID(v)
	})
}

// UpdateOperateUserID sets the "operate_user_id" field to the value that was provided on create.
func (u *UserCloseRecordUpsertOne) UpdateOperateUserID() *UserCloseRecordUpsertOne {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.UpdateOperateUserID()
	})
}

// Exec executes the query.
func (u *UserCloseRecordUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for UserCloseRecordCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserCloseRecordUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserCloseRecordUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserCloseRecordUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserCloseRecordCreateBulk is the builder for creating many UserCloseRecord entities in bulk.
type UserCloseRecordCreateBulk struct {
	config
	err      error
	builders []*UserCloseRecordCreate
	conflict []sql.ConflictOption
}

// Save creates the UserCloseRecord entities in the database.
func (ucrcb *UserCloseRecordCreateBulk) Save(ctx context.Context) ([]*UserCloseRecord, error) {
	if ucrcb.err != nil {
		return nil, ucrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucrcb.builders))
	nodes := make([]*UserCloseRecord, len(ucrcb.builders))
	mutators := make([]Mutator, len(ucrcb.builders))
	for i := range ucrcb.builders {
		func(i int, root context.Context) {
			builder := ucrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserCloseRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ucrcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucrcb *UserCloseRecordCreateBulk) SaveX(ctx context.Context) []*UserCloseRecord {
	v, err := ucrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucrcb *UserCloseRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := ucrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucrcb *UserCloseRecordCreateBulk) ExecX(ctx context.Context) {
	if err := ucrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserCloseRecord.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserCloseRecordUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (ucrcb *UserCloseRecordCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserCloseRecordUpsertBulk {
	ucrcb.conflict = opts
	return &UserCloseRecordUpsertBulk{
		create: ucrcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserCloseRecord.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ucrcb *UserCloseRecordCreateBulk) OnConflictColumns(columns ...string) *UserCloseRecordUpsertBulk {
	ucrcb.conflict = append(ucrcb.conflict, sql.ConflictColumns(columns...))
	return &UserCloseRecordUpsertBulk{
		create: ucrcb,
	}
}

// UserCloseRecordUpsertBulk is the builder for "upsert"-ing
// a bulk of UserCloseRecord nodes.
type UserCloseRecordUpsertBulk struct {
	create *UserCloseRecordCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserCloseRecord.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(usercloserecord.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserCloseRecordUpsertBulk) UpdateNewValues() *UserCloseRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(usercloserecord.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(usercloserecord.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserCloseRecord.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserCloseRecordUpsertBulk) Ignore() *UserCloseRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserCloseRecordUpsertBulk) DoNothing() *UserCloseRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCloseRecordCreateBulk.OnConflict
// documentation for more info.
func (u *UserCloseRecordUpsertBulk) Update(set func(*UserCloseRecordUpsert)) *UserCloseRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserCloseRecordUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *UserCloseRecordUpsertBulk) SetCreatedBy(v int64) *UserCloseRecordUpsertBulk {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *UserCloseRecordUpsertBulk) AddCreatedBy(v int64) *UserCloseRecordUpsertBulk {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *UserCloseRecordUpsertBulk) UpdateCreatedBy() *UserCloseRecordUpsertBulk {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *UserCloseRecordUpsertBulk) SetUpdatedBy(v int64) *UserCloseRecordUpsertBulk {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *UserCloseRecordUpsertBulk) AddUpdatedBy(v int64) *UserCloseRecordUpsertBulk {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *UserCloseRecordUpsertBulk) UpdateUpdatedBy() *UserCloseRecordUpsertBulk {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserCloseRecordUpsertBulk) SetUpdatedAt(v time.Time) *UserCloseRecordUpsertBulk {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserCloseRecordUpsertBulk) UpdateUpdatedAt() *UserCloseRecordUpsertBulk {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserCloseRecordUpsertBulk) SetDeletedAt(v time.Time) *UserCloseRecordUpsertBulk {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserCloseRecordUpsertBulk) UpdateDeletedAt() *UserCloseRecordUpsertBulk {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *UserCloseRecordUpsertBulk) SetUserID(v int64) *UserCloseRecordUpsertBulk {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserCloseRecordUpsertBulk) UpdateUserID() *UserCloseRecordUpsertBulk {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.UpdateUserID()
	})
}

// SetRegisteredAt sets the "registered_at" field.
func (u *UserCloseRecordUpsertBulk) SetRegisteredAt(v time.Time) *UserCloseRecordUpsertBulk {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.SetRegisteredAt(v)
	})
}

// UpdateRegisteredAt sets the "registered_at" field to the value that was provided on create.
func (u *UserCloseRecordUpsertBulk) UpdateRegisteredAt() *UserCloseRecordUpsertBulk {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.UpdateRegisteredAt()
	})
}

// SetClosedAt sets the "closed_at" field.
func (u *UserCloseRecordUpsertBulk) SetClosedAt(v time.Time) *UserCloseRecordUpsertBulk {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.SetClosedAt(v)
	})
}

// UpdateClosedAt sets the "closed_at" field to the value that was provided on create.
func (u *UserCloseRecordUpsertBulk) UpdateClosedAt() *UserCloseRecordUpsertBulk {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.UpdateClosedAt()
	})
}

// SetType sets the "type" field.
func (u *UserCloseRecordUpsertBulk) SetType(v enums.UserCloseType) *UserCloseRecordUpsertBulk {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *UserCloseRecordUpsertBulk) UpdateType() *UserCloseRecordUpsertBulk {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.UpdateType()
	})
}

// SetOperateUserID sets the "operate_user_id" field.
func (u *UserCloseRecordUpsertBulk) SetOperateUserID(v int64) *UserCloseRecordUpsertBulk {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.SetOperateUserID(v)
	})
}

// UpdateOperateUserID sets the "operate_user_id" field to the value that was provided on create.
func (u *UserCloseRecordUpsertBulk) UpdateOperateUserID() *UserCloseRecordUpsertBulk {
	return u.Update(func(s *UserCloseRecordUpsert) {
		s.UpdateOperateUserID()
	})
}

// Exec executes the query.
func (u *UserCloseRecordUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the UserCloseRecordCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for UserCloseRecordCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserCloseRecordUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
