// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/platformwallet"
	"cephalon-ent/pkg/cep_ent/predicate"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlatformWalletDelete is the builder for deleting a PlatformWallet entity.
type PlatformWalletDelete struct {
	config
	hooks    []Hook
	mutation *PlatformWalletMutation
}

// Where appends a list predicates to the PlatformWalletDelete builder.
func (pwd *PlatformWalletDelete) Where(ps ...predicate.PlatformWallet) *PlatformWalletDelete {
	pwd.mutation.Where(ps...)
	return pwd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pwd *PlatformWalletDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pwd.sqlExec, pwd.mutation, pwd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pwd *PlatformWalletDelete) ExecX(ctx context.Context) int {
	n, err := pwd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pwd *PlatformWalletDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(platformwallet.Table, sqlgraph.NewFieldSpec(platformwallet.FieldID, field.TypeInt64))
	if ps := pwd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pwd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pwd.mutation.done = true
	return affected, err
}

// PlatformWalletDeleteOne is the builder for deleting a single PlatformWallet entity.
type PlatformWalletDeleteOne struct {
	pwd *PlatformWalletDelete
}

// Where appends a list predicates to the PlatformWalletDelete builder.
func (pwdo *PlatformWalletDeleteOne) Where(ps ...predicate.PlatformWallet) *PlatformWalletDeleteOne {
	pwdo.pwd.mutation.Where(ps...)
	return pwdo
}

// Exec executes the deletion query.
func (pwdo *PlatformWalletDeleteOne) Exec(ctx context.Context) error {
	n, err := pwdo.pwd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{platformwallet.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pwdo *PlatformWalletDeleteOne) ExecX(ctx context.Context) {
	if err := pwdo.Exec(ctx); err != nil {
		panic(err)
	}
}
