// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/gpupeak"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// GpuPeakCreate is the builder for creating a GpuPeak entity.
type GpuPeakCreate struct {
	config
	mutation *GpuPeakMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (gpc *GpuPeakCreate) SetCreatedBy(i int64) *GpuPeakCreate {
	gpc.mutation.SetCreatedBy(i)
	return gpc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (gpc *GpuPeakCreate) SetNillableCreatedBy(i *int64) *GpuPeakCreate {
	if i != nil {
		gpc.SetCreatedBy(*i)
	}
	return gpc
}

// SetUpdatedBy sets the "updated_by" field.
func (gpc *GpuPeakCreate) SetUpdatedBy(i int64) *GpuPeakCreate {
	gpc.mutation.SetUpdatedBy(i)
	return gpc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (gpc *GpuPeakCreate) SetNillableUpdatedBy(i *int64) *GpuPeakCreate {
	if i != nil {
		gpc.SetUpdatedBy(*i)
	}
	return gpc
}

// SetCreatedAt sets the "created_at" field.
func (gpc *GpuPeakCreate) SetCreatedAt(t time.Time) *GpuPeakCreate {
	gpc.mutation.SetCreatedAt(t)
	return gpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gpc *GpuPeakCreate) SetNillableCreatedAt(t *time.Time) *GpuPeakCreate {
	if t != nil {
		gpc.SetCreatedAt(*t)
	}
	return gpc
}

// SetUpdatedAt sets the "updated_at" field.
func (gpc *GpuPeakCreate) SetUpdatedAt(t time.Time) *GpuPeakCreate {
	gpc.mutation.SetUpdatedAt(t)
	return gpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gpc *GpuPeakCreate) SetNillableUpdatedAt(t *time.Time) *GpuPeakCreate {
	if t != nil {
		gpc.SetUpdatedAt(*t)
	}
	return gpc
}

// SetDeletedAt sets the "deleted_at" field.
func (gpc *GpuPeakCreate) SetDeletedAt(t time.Time) *GpuPeakCreate {
	gpc.mutation.SetDeletedAt(t)
	return gpc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gpc *GpuPeakCreate) SetNillableDeletedAt(t *time.Time) *GpuPeakCreate {
	if t != nil {
		gpc.SetDeletedAt(*t)
	}
	return gpc
}

// SetVersion sets the "version" field.
func (gpc *GpuPeakCreate) SetVersion(ev enums.GpuVersion) *GpuPeakCreate {
	gpc.mutation.SetVersion(ev)
	return gpc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (gpc *GpuPeakCreate) SetNillableVersion(ev *enums.GpuVersion) *GpuPeakCreate {
	if ev != nil {
		gpc.SetVersion(*ev)
	}
	return gpc
}

// SetPeak sets the "peak" field.
func (gpc *GpuPeakCreate) SetPeak(i int) *GpuPeakCreate {
	gpc.mutation.SetPeak(i)
	return gpc
}

// SetNillablePeak sets the "peak" field if the given value is not nil.
func (gpc *GpuPeakCreate) SetNillablePeak(i *int) *GpuPeakCreate {
	if i != nil {
		gpc.SetPeak(*i)
	}
	return gpc
}

// SetID sets the "id" field.
func (gpc *GpuPeakCreate) SetID(i int64) *GpuPeakCreate {
	gpc.mutation.SetID(i)
	return gpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (gpc *GpuPeakCreate) SetNillableID(i *int64) *GpuPeakCreate {
	if i != nil {
		gpc.SetID(*i)
	}
	return gpc
}

// Mutation returns the GpuPeakMutation object of the builder.
func (gpc *GpuPeakCreate) Mutation() *GpuPeakMutation {
	return gpc.mutation
}

// Save creates the GpuPeak in the database.
func (gpc *GpuPeakCreate) Save(ctx context.Context) (*GpuPeak, error) {
	gpc.defaults()
	return withHooks(ctx, gpc.sqlSave, gpc.mutation, gpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gpc *GpuPeakCreate) SaveX(ctx context.Context) *GpuPeak {
	v, err := gpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gpc *GpuPeakCreate) Exec(ctx context.Context) error {
	_, err := gpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gpc *GpuPeakCreate) ExecX(ctx context.Context) {
	if err := gpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gpc *GpuPeakCreate) defaults() {
	if _, ok := gpc.mutation.CreatedBy(); !ok {
		v := gpupeak.DefaultCreatedBy
		gpc.mutation.SetCreatedBy(v)
	}
	if _, ok := gpc.mutation.UpdatedBy(); !ok {
		v := gpupeak.DefaultUpdatedBy
		gpc.mutation.SetUpdatedBy(v)
	}
	if _, ok := gpc.mutation.CreatedAt(); !ok {
		v := gpupeak.DefaultCreatedAt()
		gpc.mutation.SetCreatedAt(v)
	}
	if _, ok := gpc.mutation.UpdatedAt(); !ok {
		v := gpupeak.DefaultUpdatedAt()
		gpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := gpc.mutation.DeletedAt(); !ok {
		v := gpupeak.DefaultDeletedAt
		gpc.mutation.SetDeletedAt(v)
	}
	if _, ok := gpc.mutation.Version(); !ok {
		v := gpupeak.DefaultVersion
		gpc.mutation.SetVersion(v)
	}
	if _, ok := gpc.mutation.Peak(); !ok {
		v := gpupeak.DefaultPeak
		gpc.mutation.SetPeak(v)
	}
	if _, ok := gpc.mutation.ID(); !ok {
		v := gpupeak.DefaultID()
		gpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gpc *GpuPeakCreate) check() error {
	if _, ok := gpc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "GpuPeak.created_by"`)}
	}
	if _, ok := gpc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "GpuPeak.updated_by"`)}
	}
	if _, ok := gpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "GpuPeak.created_at"`)}
	}
	if _, ok := gpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "GpuPeak.updated_at"`)}
	}
	if _, ok := gpc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "GpuPeak.deleted_at"`)}
	}
	if _, ok := gpc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`cep_ent: missing required field "GpuPeak.version"`)}
	}
	if v, ok := gpc.mutation.Version(); ok {
		if err := gpupeak.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`cep_ent: validator failed for field "GpuPeak.version": %w`, err)}
		}
	}
	if _, ok := gpc.mutation.Peak(); !ok {
		return &ValidationError{Name: "peak", err: errors.New(`cep_ent: missing required field "GpuPeak.peak"`)}
	}
	return nil
}

func (gpc *GpuPeakCreate) sqlSave(ctx context.Context) (*GpuPeak, error) {
	if err := gpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	gpc.mutation.id = &_node.ID
	gpc.mutation.done = true
	return _node, nil
}

func (gpc *GpuPeakCreate) createSpec() (*GpuPeak, *sqlgraph.CreateSpec) {
	var (
		_node = &GpuPeak{config: gpc.config}
		_spec = sqlgraph.NewCreateSpec(gpupeak.Table, sqlgraph.NewFieldSpec(gpupeak.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = gpc.conflict
	if id, ok := gpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gpc.mutation.CreatedBy(); ok {
		_spec.SetField(gpupeak.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := gpc.mutation.UpdatedBy(); ok {
		_spec.SetField(gpupeak.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := gpc.mutation.CreatedAt(); ok {
		_spec.SetField(gpupeak.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := gpc.mutation.UpdatedAt(); ok {
		_spec.SetField(gpupeak.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := gpc.mutation.DeletedAt(); ok {
		_spec.SetField(gpupeak.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := gpc.mutation.Version(); ok {
		_spec.SetField(gpupeak.FieldVersion, field.TypeEnum, value)
		_node.Version = value
	}
	if value, ok := gpc.mutation.Peak(); ok {
		_spec.SetField(gpupeak.FieldPeak, field.TypeInt, value)
		_node.Peak = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GpuPeak.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GpuPeakUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (gpc *GpuPeakCreate) OnConflict(opts ...sql.ConflictOption) *GpuPeakUpsertOne {
	gpc.conflict = opts
	return &GpuPeakUpsertOne{
		create: gpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GpuPeak.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gpc *GpuPeakCreate) OnConflictColumns(columns ...string) *GpuPeakUpsertOne {
	gpc.conflict = append(gpc.conflict, sql.ConflictColumns(columns...))
	return &GpuPeakUpsertOne{
		create: gpc,
	}
}

type (
	// GpuPeakUpsertOne is the builder for "upsert"-ing
	//  one GpuPeak node.
	GpuPeakUpsertOne struct {
		create *GpuPeakCreate
	}

	// GpuPeakUpsert is the "OnConflict" setter.
	GpuPeakUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *GpuPeakUpsert) SetCreatedBy(v int64) *GpuPeakUpsert {
	u.Set(gpupeak.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *GpuPeakUpsert) UpdateCreatedBy() *GpuPeakUpsert {
	u.SetExcluded(gpupeak.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *GpuPeakUpsert) AddCreatedBy(v int64) *GpuPeakUpsert {
	u.Add(gpupeak.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *GpuPeakUpsert) SetUpdatedBy(v int64) *GpuPeakUpsert {
	u.Set(gpupeak.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *GpuPeakUpsert) UpdateUpdatedBy() *GpuPeakUpsert {
	u.SetExcluded(gpupeak.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *GpuPeakUpsert) AddUpdatedBy(v int64) *GpuPeakUpsert {
	u.Add(gpupeak.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GpuPeakUpsert) SetUpdatedAt(v time.Time) *GpuPeakUpsert {
	u.Set(gpupeak.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GpuPeakUpsert) UpdateUpdatedAt() *GpuPeakUpsert {
	u.SetExcluded(gpupeak.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GpuPeakUpsert) SetDeletedAt(v time.Time) *GpuPeakUpsert {
	u.Set(gpupeak.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GpuPeakUpsert) UpdateDeletedAt() *GpuPeakUpsert {
	u.SetExcluded(gpupeak.FieldDeletedAt)
	return u
}

// SetVersion sets the "version" field.
func (u *GpuPeakUpsert) SetVersion(v enums.GpuVersion) *GpuPeakUpsert {
	u.Set(gpupeak.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *GpuPeakUpsert) UpdateVersion() *GpuPeakUpsert {
	u.SetExcluded(gpupeak.FieldVersion)
	return u
}

// SetPeak sets the "peak" field.
func (u *GpuPeakUpsert) SetPeak(v int) *GpuPeakUpsert {
	u.Set(gpupeak.FieldPeak, v)
	return u
}

// UpdatePeak sets the "peak" field to the value that was provided on create.
func (u *GpuPeakUpsert) UpdatePeak() *GpuPeakUpsert {
	u.SetExcluded(gpupeak.FieldPeak)
	return u
}

// AddPeak adds v to the "peak" field.
func (u *GpuPeakUpsert) AddPeak(v int) *GpuPeakUpsert {
	u.Add(gpupeak.FieldPeak, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GpuPeak.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(gpupeak.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GpuPeakUpsertOne) UpdateNewValues() *GpuPeakUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(gpupeak.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(gpupeak.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GpuPeak.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GpuPeakUpsertOne) Ignore() *GpuPeakUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GpuPeakUpsertOne) DoNothing() *GpuPeakUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GpuPeakCreate.OnConflict
// documentation for more info.
func (u *GpuPeakUpsertOne) Update(set func(*GpuPeakUpsert)) *GpuPeakUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GpuPeakUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *GpuPeakUpsertOne) SetCreatedBy(v int64) *GpuPeakUpsertOne {
	return u.Update(func(s *GpuPeakUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *GpuPeakUpsertOne) AddCreatedBy(v int64) *GpuPeakUpsertOne {
	return u.Update(func(s *GpuPeakUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *GpuPeakUpsertOne) UpdateCreatedBy() *GpuPeakUpsertOne {
	return u.Update(func(s *GpuPeakUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *GpuPeakUpsertOne) SetUpdatedBy(v int64) *GpuPeakUpsertOne {
	return u.Update(func(s *GpuPeakUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *GpuPeakUpsertOne) AddUpdatedBy(v int64) *GpuPeakUpsertOne {
	return u.Update(func(s *GpuPeakUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *GpuPeakUpsertOne) UpdateUpdatedBy() *GpuPeakUpsertOne {
	return u.Update(func(s *GpuPeakUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GpuPeakUpsertOne) SetUpdatedAt(v time.Time) *GpuPeakUpsertOne {
	return u.Update(func(s *GpuPeakUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GpuPeakUpsertOne) UpdateUpdatedAt() *GpuPeakUpsertOne {
	return u.Update(func(s *GpuPeakUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GpuPeakUpsertOne) SetDeletedAt(v time.Time) *GpuPeakUpsertOne {
	return u.Update(func(s *GpuPeakUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GpuPeakUpsertOne) UpdateDeletedAt() *GpuPeakUpsertOne {
	return u.Update(func(s *GpuPeakUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetVersion sets the "version" field.
func (u *GpuPeakUpsertOne) SetVersion(v enums.GpuVersion) *GpuPeakUpsertOne {
	return u.Update(func(s *GpuPeakUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *GpuPeakUpsertOne) UpdateVersion() *GpuPeakUpsertOne {
	return u.Update(func(s *GpuPeakUpsert) {
		s.UpdateVersion()
	})
}

// SetPeak sets the "peak" field.
func (u *GpuPeakUpsertOne) SetPeak(v int) *GpuPeakUpsertOne {
	return u.Update(func(s *GpuPeakUpsert) {
		s.SetPeak(v)
	})
}

// AddPeak adds v to the "peak" field.
func (u *GpuPeakUpsertOne) AddPeak(v int) *GpuPeakUpsertOne {
	return u.Update(func(s *GpuPeakUpsert) {
		s.AddPeak(v)
	})
}

// UpdatePeak sets the "peak" field to the value that was provided on create.
func (u *GpuPeakUpsertOne) UpdatePeak() *GpuPeakUpsertOne {
	return u.Update(func(s *GpuPeakUpsert) {
		s.UpdatePeak()
	})
}

// Exec executes the query.
func (u *GpuPeakUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for GpuPeakCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GpuPeakUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GpuPeakUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GpuPeakUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GpuPeakCreateBulk is the builder for creating many GpuPeak entities in bulk.
type GpuPeakCreateBulk struct {
	config
	err      error
	builders []*GpuPeakCreate
	conflict []sql.ConflictOption
}

// Save creates the GpuPeak entities in the database.
func (gpcb *GpuPeakCreateBulk) Save(ctx context.Context) ([]*GpuPeak, error) {
	if gpcb.err != nil {
		return nil, gpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gpcb.builders))
	nodes := make([]*GpuPeak, len(gpcb.builders))
	mutators := make([]Mutator, len(gpcb.builders))
	for i := range gpcb.builders {
		func(i int, root context.Context) {
			builder := gpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GpuPeakMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gpcb *GpuPeakCreateBulk) SaveX(ctx context.Context) []*GpuPeak {
	v, err := gpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gpcb *GpuPeakCreateBulk) Exec(ctx context.Context) error {
	_, err := gpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gpcb *GpuPeakCreateBulk) ExecX(ctx context.Context) {
	if err := gpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GpuPeak.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GpuPeakUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (gpcb *GpuPeakCreateBulk) OnConflict(opts ...sql.ConflictOption) *GpuPeakUpsertBulk {
	gpcb.conflict = opts
	return &GpuPeakUpsertBulk{
		create: gpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GpuPeak.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gpcb *GpuPeakCreateBulk) OnConflictColumns(columns ...string) *GpuPeakUpsertBulk {
	gpcb.conflict = append(gpcb.conflict, sql.ConflictColumns(columns...))
	return &GpuPeakUpsertBulk{
		create: gpcb,
	}
}

// GpuPeakUpsertBulk is the builder for "upsert"-ing
// a bulk of GpuPeak nodes.
type GpuPeakUpsertBulk struct {
	create *GpuPeakCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GpuPeak.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(gpupeak.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GpuPeakUpsertBulk) UpdateNewValues() *GpuPeakUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(gpupeak.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(gpupeak.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GpuPeak.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GpuPeakUpsertBulk) Ignore() *GpuPeakUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GpuPeakUpsertBulk) DoNothing() *GpuPeakUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GpuPeakCreateBulk.OnConflict
// documentation for more info.
func (u *GpuPeakUpsertBulk) Update(set func(*GpuPeakUpsert)) *GpuPeakUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GpuPeakUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *GpuPeakUpsertBulk) SetCreatedBy(v int64) *GpuPeakUpsertBulk {
	return u.Update(func(s *GpuPeakUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *GpuPeakUpsertBulk) AddCreatedBy(v int64) *GpuPeakUpsertBulk {
	return u.Update(func(s *GpuPeakUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *GpuPeakUpsertBulk) UpdateCreatedBy() *GpuPeakUpsertBulk {
	return u.Update(func(s *GpuPeakUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *GpuPeakUpsertBulk) SetUpdatedBy(v int64) *GpuPeakUpsertBulk {
	return u.Update(func(s *GpuPeakUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *GpuPeakUpsertBulk) AddUpdatedBy(v int64) *GpuPeakUpsertBulk {
	return u.Update(func(s *GpuPeakUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *GpuPeakUpsertBulk) UpdateUpdatedBy() *GpuPeakUpsertBulk {
	return u.Update(func(s *GpuPeakUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GpuPeakUpsertBulk) SetUpdatedAt(v time.Time) *GpuPeakUpsertBulk {
	return u.Update(func(s *GpuPeakUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GpuPeakUpsertBulk) UpdateUpdatedAt() *GpuPeakUpsertBulk {
	return u.Update(func(s *GpuPeakUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GpuPeakUpsertBulk) SetDeletedAt(v time.Time) *GpuPeakUpsertBulk {
	return u.Update(func(s *GpuPeakUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GpuPeakUpsertBulk) UpdateDeletedAt() *GpuPeakUpsertBulk {
	return u.Update(func(s *GpuPeakUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetVersion sets the "version" field.
func (u *GpuPeakUpsertBulk) SetVersion(v enums.GpuVersion) *GpuPeakUpsertBulk {
	return u.Update(func(s *GpuPeakUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *GpuPeakUpsertBulk) UpdateVersion() *GpuPeakUpsertBulk {
	return u.Update(func(s *GpuPeakUpsert) {
		s.UpdateVersion()
	})
}

// SetPeak sets the "peak" field.
func (u *GpuPeakUpsertBulk) SetPeak(v int) *GpuPeakUpsertBulk {
	return u.Update(func(s *GpuPeakUpsert) {
		s.SetPeak(v)
	})
}

// AddPeak adds v to the "peak" field.
func (u *GpuPeakUpsertBulk) AddPeak(v int) *GpuPeakUpsertBulk {
	return u.Update(func(s *GpuPeakUpsert) {
		s.AddPeak(v)
	})
}

// UpdatePeak sets the "peak" field to the value that was provided on create.
func (u *GpuPeakUpsertBulk) UpdatePeak() *GpuPeakUpsertBulk {
	return u.Update(func(s *GpuPeakUpsert) {
		s.UpdatePeak()
	})
}

// Exec executes the query.
func (u *GpuPeakUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the GpuPeakCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for GpuPeakCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GpuPeakUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
