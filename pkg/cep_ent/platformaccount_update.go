// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/earnbill"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/platformaccount"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// PlatformAccountUpdate is the builder for updating PlatformAccount entities.
type PlatformAccountUpdate struct {
	config
	hooks    []Hook
	mutation *PlatformAccountMutation
}

// Where appends a list predicates to the PlatformAccountUpdate builder.
func (pau *PlatformAccountUpdate) Where(ps ...predicate.PlatformAccount) *PlatformAccountUpdate {
	pau.mutation.Where(ps...)
	return pau
}

// SetCreatedBy sets the "created_by" field.
func (pau *PlatformAccountUpdate) SetCreatedBy(i int64) *PlatformAccountUpdate {
	pau.mutation.ResetCreatedBy()
	pau.mutation.SetCreatedBy(i)
	return pau
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pau *PlatformAccountUpdate) SetNillableCreatedBy(i *int64) *PlatformAccountUpdate {
	if i != nil {
		pau.SetCreatedBy(*i)
	}
	return pau
}

// AddCreatedBy adds i to the "created_by" field.
func (pau *PlatformAccountUpdate) AddCreatedBy(i int64) *PlatformAccountUpdate {
	pau.mutation.AddCreatedBy(i)
	return pau
}

// SetUpdatedBy sets the "updated_by" field.
func (pau *PlatformAccountUpdate) SetUpdatedBy(i int64) *PlatformAccountUpdate {
	pau.mutation.ResetUpdatedBy()
	pau.mutation.SetUpdatedBy(i)
	return pau
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pau *PlatformAccountUpdate) SetNillableUpdatedBy(i *int64) *PlatformAccountUpdate {
	if i != nil {
		pau.SetUpdatedBy(*i)
	}
	return pau
}

// AddUpdatedBy adds i to the "updated_by" field.
func (pau *PlatformAccountUpdate) AddUpdatedBy(i int64) *PlatformAccountUpdate {
	pau.mutation.AddUpdatedBy(i)
	return pau
}

// SetUpdatedAt sets the "updated_at" field.
func (pau *PlatformAccountUpdate) SetUpdatedAt(t time.Time) *PlatformAccountUpdate {
	pau.mutation.SetUpdatedAt(t)
	return pau
}

// SetDeletedAt sets the "deleted_at" field.
func (pau *PlatformAccountUpdate) SetDeletedAt(t time.Time) *PlatformAccountUpdate {
	pau.mutation.SetDeletedAt(t)
	return pau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pau *PlatformAccountUpdate) SetNillableDeletedAt(t *time.Time) *PlatformAccountUpdate {
	if t != nil {
		pau.SetDeletedAt(*t)
	}
	return pau
}

// SetType sets the "type" field.
func (pau *PlatformAccountUpdate) SetType(pl platformaccount.Type) *PlatformAccountUpdate {
	pau.mutation.SetType(pl)
	return pau
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pau *PlatformAccountUpdate) SetNillableType(pl *platformaccount.Type) *PlatformAccountUpdate {
	if pl != nil {
		pau.SetType(*pl)
	}
	return pau
}

// SetSumTotalCep sets the "sum_total_cep" field.
func (pau *PlatformAccountUpdate) SetSumTotalCep(i int64) *PlatformAccountUpdate {
	pau.mutation.ResetSumTotalCep()
	pau.mutation.SetSumTotalCep(i)
	return pau
}

// SetNillableSumTotalCep sets the "sum_total_cep" field if the given value is not nil.
func (pau *PlatformAccountUpdate) SetNillableSumTotalCep(i *int64) *PlatformAccountUpdate {
	if i != nil {
		pau.SetSumTotalCep(*i)
	}
	return pau
}

// AddSumTotalCep adds i to the "sum_total_cep" field.
func (pau *PlatformAccountUpdate) AddSumTotalCep(i int64) *PlatformAccountUpdate {
	pau.mutation.AddSumTotalCep(i)
	return pau
}

// SetTotalCep sets the "total_cep" field.
func (pau *PlatformAccountUpdate) SetTotalCep(i int64) *PlatformAccountUpdate {
	pau.mutation.ResetTotalCep()
	pau.mutation.SetTotalCep(i)
	return pau
}

// SetNillableTotalCep sets the "total_cep" field if the given value is not nil.
func (pau *PlatformAccountUpdate) SetNillableTotalCep(i *int64) *PlatformAccountUpdate {
	if i != nil {
		pau.SetTotalCep(*i)
	}
	return pau
}

// AddTotalCep adds i to the "total_cep" field.
func (pau *PlatformAccountUpdate) AddTotalCep(i int64) *PlatformAccountUpdate {
	pau.mutation.AddTotalCep(i)
	return pau
}

// SetSumPureCep sets the "sum_pure_cep" field.
func (pau *PlatformAccountUpdate) SetSumPureCep(i int64) *PlatformAccountUpdate {
	pau.mutation.ResetSumPureCep()
	pau.mutation.SetSumPureCep(i)
	return pau
}

// SetNillableSumPureCep sets the "sum_pure_cep" field if the given value is not nil.
func (pau *PlatformAccountUpdate) SetNillableSumPureCep(i *int64) *PlatformAccountUpdate {
	if i != nil {
		pau.SetSumPureCep(*i)
	}
	return pau
}

// AddSumPureCep adds i to the "sum_pure_cep" field.
func (pau *PlatformAccountUpdate) AddSumPureCep(i int64) *PlatformAccountUpdate {
	pau.mutation.AddSumPureCep(i)
	return pau
}

// SetPureCep sets the "pure_cep" field.
func (pau *PlatformAccountUpdate) SetPureCep(i int64) *PlatformAccountUpdate {
	pau.mutation.ResetPureCep()
	pau.mutation.SetPureCep(i)
	return pau
}

// SetNillablePureCep sets the "pure_cep" field if the given value is not nil.
func (pau *PlatformAccountUpdate) SetNillablePureCep(i *int64) *PlatformAccountUpdate {
	if i != nil {
		pau.SetPureCep(*i)
	}
	return pau
}

// AddPureCep adds i to the "pure_cep" field.
func (pau *PlatformAccountUpdate) AddPureCep(i int64) *PlatformAccountUpdate {
	pau.mutation.AddPureCep(i)
	return pau
}

// SetSumGiftCep sets the "sum_gift_cep" field.
func (pau *PlatformAccountUpdate) SetSumGiftCep(i int64) *PlatformAccountUpdate {
	pau.mutation.ResetSumGiftCep()
	pau.mutation.SetSumGiftCep(i)
	return pau
}

// SetNillableSumGiftCep sets the "sum_gift_cep" field if the given value is not nil.
func (pau *PlatformAccountUpdate) SetNillableSumGiftCep(i *int64) *PlatformAccountUpdate {
	if i != nil {
		pau.SetSumGiftCep(*i)
	}
	return pau
}

// AddSumGiftCep adds i to the "sum_gift_cep" field.
func (pau *PlatformAccountUpdate) AddSumGiftCep(i int64) *PlatformAccountUpdate {
	pau.mutation.AddSumGiftCep(i)
	return pau
}

// SetGiftCep sets the "gift_cep" field.
func (pau *PlatformAccountUpdate) SetGiftCep(i int64) *PlatformAccountUpdate {
	pau.mutation.ResetGiftCep()
	pau.mutation.SetGiftCep(i)
	return pau
}

// SetNillableGiftCep sets the "gift_cep" field if the given value is not nil.
func (pau *PlatformAccountUpdate) SetNillableGiftCep(i *int64) *PlatformAccountUpdate {
	if i != nil {
		pau.SetGiftCep(*i)
	}
	return pau
}

// AddGiftCep adds i to the "gift_cep" field.
func (pau *PlatformAccountUpdate) AddGiftCep(i int64) *PlatformAccountUpdate {
	pau.mutation.AddGiftCep(i)
	return pau
}

// AddEarnBillIDs adds the "earn_bills" edge to the EarnBill entity by IDs.
func (pau *PlatformAccountUpdate) AddEarnBillIDs(ids ...int64) *PlatformAccountUpdate {
	pau.mutation.AddEarnBillIDs(ids...)
	return pau
}

// AddEarnBills adds the "earn_bills" edges to the EarnBill entity.
func (pau *PlatformAccountUpdate) AddEarnBills(e ...*EarnBill) *PlatformAccountUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pau.AddEarnBillIDs(ids...)
}

// Mutation returns the PlatformAccountMutation object of the builder.
func (pau *PlatformAccountUpdate) Mutation() *PlatformAccountMutation {
	return pau.mutation
}

// ClearEarnBills clears all "earn_bills" edges to the EarnBill entity.
func (pau *PlatformAccountUpdate) ClearEarnBills() *PlatformAccountUpdate {
	pau.mutation.ClearEarnBills()
	return pau
}

// RemoveEarnBillIDs removes the "earn_bills" edge to EarnBill entities by IDs.
func (pau *PlatformAccountUpdate) RemoveEarnBillIDs(ids ...int64) *PlatformAccountUpdate {
	pau.mutation.RemoveEarnBillIDs(ids...)
	return pau
}

// RemoveEarnBills removes "earn_bills" edges to EarnBill entities.
func (pau *PlatformAccountUpdate) RemoveEarnBills(e ...*EarnBill) *PlatformAccountUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pau.RemoveEarnBillIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pau *PlatformAccountUpdate) Save(ctx context.Context) (int, error) {
	pau.defaults()
	return withHooks(ctx, pau.sqlSave, pau.mutation, pau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pau *PlatformAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := pau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pau *PlatformAccountUpdate) Exec(ctx context.Context) error {
	_, err := pau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pau *PlatformAccountUpdate) ExecX(ctx context.Context) {
	if err := pau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pau *PlatformAccountUpdate) defaults() {
	if _, ok := pau.mutation.UpdatedAt(); !ok {
		v := platformaccount.UpdateDefaultUpdatedAt()
		pau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pau *PlatformAccountUpdate) check() error {
	if v, ok := pau.mutation.GetType(); ok {
		if err := platformaccount.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "PlatformAccount.type": %w`, err)}
		}
	}
	return nil
}

func (pau *PlatformAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(platformaccount.Table, platformaccount.Columns, sqlgraph.NewFieldSpec(platformaccount.FieldID, field.TypeInt64))
	if ps := pau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pau.mutation.CreatedBy(); ok {
		_spec.SetField(platformaccount.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := pau.mutation.AddedCreatedBy(); ok {
		_spec.AddField(platformaccount.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := pau.mutation.UpdatedBy(); ok {
		_spec.SetField(platformaccount.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := pau.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(platformaccount.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := pau.mutation.UpdatedAt(); ok {
		_spec.SetField(platformaccount.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pau.mutation.DeletedAt(); ok {
		_spec.SetField(platformaccount.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := pau.mutation.GetType(); ok {
		_spec.SetField(platformaccount.FieldType, field.TypeEnum, value)
	}
	if value, ok := pau.mutation.SumTotalCep(); ok {
		_spec.SetField(platformaccount.FieldSumTotalCep, field.TypeInt64, value)
	}
	if value, ok := pau.mutation.AddedSumTotalCep(); ok {
		_spec.AddField(platformaccount.FieldSumTotalCep, field.TypeInt64, value)
	}
	if value, ok := pau.mutation.TotalCep(); ok {
		_spec.SetField(platformaccount.FieldTotalCep, field.TypeInt64, value)
	}
	if value, ok := pau.mutation.AddedTotalCep(); ok {
		_spec.AddField(platformaccount.FieldTotalCep, field.TypeInt64, value)
	}
	if value, ok := pau.mutation.SumPureCep(); ok {
		_spec.SetField(platformaccount.FieldSumPureCep, field.TypeInt64, value)
	}
	if value, ok := pau.mutation.AddedSumPureCep(); ok {
		_spec.AddField(platformaccount.FieldSumPureCep, field.TypeInt64, value)
	}
	if value, ok := pau.mutation.PureCep(); ok {
		_spec.SetField(platformaccount.FieldPureCep, field.TypeInt64, value)
	}
	if value, ok := pau.mutation.AddedPureCep(); ok {
		_spec.AddField(platformaccount.FieldPureCep, field.TypeInt64, value)
	}
	if value, ok := pau.mutation.SumGiftCep(); ok {
		_spec.SetField(platformaccount.FieldSumGiftCep, field.TypeInt64, value)
	}
	if value, ok := pau.mutation.AddedSumGiftCep(); ok {
		_spec.AddField(platformaccount.FieldSumGiftCep, field.TypeInt64, value)
	}
	if value, ok := pau.mutation.GiftCep(); ok {
		_spec.SetField(platformaccount.FieldGiftCep, field.TypeInt64, value)
	}
	if value, ok := pau.mutation.AddedGiftCep(); ok {
		_spec.AddField(platformaccount.FieldGiftCep, field.TypeInt64, value)
	}
	if pau.mutation.EarnBillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformaccount.EarnBillsTable,
			Columns: []string{platformaccount.EarnBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earnbill.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pau.mutation.RemovedEarnBillsIDs(); len(nodes) > 0 && !pau.mutation.EarnBillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformaccount.EarnBillsTable,
			Columns: []string{platformaccount.EarnBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earnbill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pau.mutation.EarnBillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformaccount.EarnBillsTable,
			Columns: []string{platformaccount.EarnBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earnbill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{platformaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pau.mutation.done = true
	return n, nil
}

// PlatformAccountUpdateOne is the builder for updating a single PlatformAccount entity.
type PlatformAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlatformAccountMutation
}

// SetCreatedBy sets the "created_by" field.
func (pauo *PlatformAccountUpdateOne) SetCreatedBy(i int64) *PlatformAccountUpdateOne {
	pauo.mutation.ResetCreatedBy()
	pauo.mutation.SetCreatedBy(i)
	return pauo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pauo *PlatformAccountUpdateOne) SetNillableCreatedBy(i *int64) *PlatformAccountUpdateOne {
	if i != nil {
		pauo.SetCreatedBy(*i)
	}
	return pauo
}

// AddCreatedBy adds i to the "created_by" field.
func (pauo *PlatformAccountUpdateOne) AddCreatedBy(i int64) *PlatformAccountUpdateOne {
	pauo.mutation.AddCreatedBy(i)
	return pauo
}

// SetUpdatedBy sets the "updated_by" field.
func (pauo *PlatformAccountUpdateOne) SetUpdatedBy(i int64) *PlatformAccountUpdateOne {
	pauo.mutation.ResetUpdatedBy()
	pauo.mutation.SetUpdatedBy(i)
	return pauo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pauo *PlatformAccountUpdateOne) SetNillableUpdatedBy(i *int64) *PlatformAccountUpdateOne {
	if i != nil {
		pauo.SetUpdatedBy(*i)
	}
	return pauo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (pauo *PlatformAccountUpdateOne) AddUpdatedBy(i int64) *PlatformAccountUpdateOne {
	pauo.mutation.AddUpdatedBy(i)
	return pauo
}

// SetUpdatedAt sets the "updated_at" field.
func (pauo *PlatformAccountUpdateOne) SetUpdatedAt(t time.Time) *PlatformAccountUpdateOne {
	pauo.mutation.SetUpdatedAt(t)
	return pauo
}

// SetDeletedAt sets the "deleted_at" field.
func (pauo *PlatformAccountUpdateOne) SetDeletedAt(t time.Time) *PlatformAccountUpdateOne {
	pauo.mutation.SetDeletedAt(t)
	return pauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pauo *PlatformAccountUpdateOne) SetNillableDeletedAt(t *time.Time) *PlatformAccountUpdateOne {
	if t != nil {
		pauo.SetDeletedAt(*t)
	}
	return pauo
}

// SetType sets the "type" field.
func (pauo *PlatformAccountUpdateOne) SetType(pl platformaccount.Type) *PlatformAccountUpdateOne {
	pauo.mutation.SetType(pl)
	return pauo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pauo *PlatformAccountUpdateOne) SetNillableType(pl *platformaccount.Type) *PlatformAccountUpdateOne {
	if pl != nil {
		pauo.SetType(*pl)
	}
	return pauo
}

// SetSumTotalCep sets the "sum_total_cep" field.
func (pauo *PlatformAccountUpdateOne) SetSumTotalCep(i int64) *PlatformAccountUpdateOne {
	pauo.mutation.ResetSumTotalCep()
	pauo.mutation.SetSumTotalCep(i)
	return pauo
}

// SetNillableSumTotalCep sets the "sum_total_cep" field if the given value is not nil.
func (pauo *PlatformAccountUpdateOne) SetNillableSumTotalCep(i *int64) *PlatformAccountUpdateOne {
	if i != nil {
		pauo.SetSumTotalCep(*i)
	}
	return pauo
}

// AddSumTotalCep adds i to the "sum_total_cep" field.
func (pauo *PlatformAccountUpdateOne) AddSumTotalCep(i int64) *PlatformAccountUpdateOne {
	pauo.mutation.AddSumTotalCep(i)
	return pauo
}

// SetTotalCep sets the "total_cep" field.
func (pauo *PlatformAccountUpdateOne) SetTotalCep(i int64) *PlatformAccountUpdateOne {
	pauo.mutation.ResetTotalCep()
	pauo.mutation.SetTotalCep(i)
	return pauo
}

// SetNillableTotalCep sets the "total_cep" field if the given value is not nil.
func (pauo *PlatformAccountUpdateOne) SetNillableTotalCep(i *int64) *PlatformAccountUpdateOne {
	if i != nil {
		pauo.SetTotalCep(*i)
	}
	return pauo
}

// AddTotalCep adds i to the "total_cep" field.
func (pauo *PlatformAccountUpdateOne) AddTotalCep(i int64) *PlatformAccountUpdateOne {
	pauo.mutation.AddTotalCep(i)
	return pauo
}

// SetSumPureCep sets the "sum_pure_cep" field.
func (pauo *PlatformAccountUpdateOne) SetSumPureCep(i int64) *PlatformAccountUpdateOne {
	pauo.mutation.ResetSumPureCep()
	pauo.mutation.SetSumPureCep(i)
	return pauo
}

// SetNillableSumPureCep sets the "sum_pure_cep" field if the given value is not nil.
func (pauo *PlatformAccountUpdateOne) SetNillableSumPureCep(i *int64) *PlatformAccountUpdateOne {
	if i != nil {
		pauo.SetSumPureCep(*i)
	}
	return pauo
}

// AddSumPureCep adds i to the "sum_pure_cep" field.
func (pauo *PlatformAccountUpdateOne) AddSumPureCep(i int64) *PlatformAccountUpdateOne {
	pauo.mutation.AddSumPureCep(i)
	return pauo
}

// SetPureCep sets the "pure_cep" field.
func (pauo *PlatformAccountUpdateOne) SetPureCep(i int64) *PlatformAccountUpdateOne {
	pauo.mutation.ResetPureCep()
	pauo.mutation.SetPureCep(i)
	return pauo
}

// SetNillablePureCep sets the "pure_cep" field if the given value is not nil.
func (pauo *PlatformAccountUpdateOne) SetNillablePureCep(i *int64) *PlatformAccountUpdateOne {
	if i != nil {
		pauo.SetPureCep(*i)
	}
	return pauo
}

// AddPureCep adds i to the "pure_cep" field.
func (pauo *PlatformAccountUpdateOne) AddPureCep(i int64) *PlatformAccountUpdateOne {
	pauo.mutation.AddPureCep(i)
	return pauo
}

// SetSumGiftCep sets the "sum_gift_cep" field.
func (pauo *PlatformAccountUpdateOne) SetSumGiftCep(i int64) *PlatformAccountUpdateOne {
	pauo.mutation.ResetSumGiftCep()
	pauo.mutation.SetSumGiftCep(i)
	return pauo
}

// SetNillableSumGiftCep sets the "sum_gift_cep" field if the given value is not nil.
func (pauo *PlatformAccountUpdateOne) SetNillableSumGiftCep(i *int64) *PlatformAccountUpdateOne {
	if i != nil {
		pauo.SetSumGiftCep(*i)
	}
	return pauo
}

// AddSumGiftCep adds i to the "sum_gift_cep" field.
func (pauo *PlatformAccountUpdateOne) AddSumGiftCep(i int64) *PlatformAccountUpdateOne {
	pauo.mutation.AddSumGiftCep(i)
	return pauo
}

// SetGiftCep sets the "gift_cep" field.
func (pauo *PlatformAccountUpdateOne) SetGiftCep(i int64) *PlatformAccountUpdateOne {
	pauo.mutation.ResetGiftCep()
	pauo.mutation.SetGiftCep(i)
	return pauo
}

// SetNillableGiftCep sets the "gift_cep" field if the given value is not nil.
func (pauo *PlatformAccountUpdateOne) SetNillableGiftCep(i *int64) *PlatformAccountUpdateOne {
	if i != nil {
		pauo.SetGiftCep(*i)
	}
	return pauo
}

// AddGiftCep adds i to the "gift_cep" field.
func (pauo *PlatformAccountUpdateOne) AddGiftCep(i int64) *PlatformAccountUpdateOne {
	pauo.mutation.AddGiftCep(i)
	return pauo
}

// AddEarnBillIDs adds the "earn_bills" edge to the EarnBill entity by IDs.
func (pauo *PlatformAccountUpdateOne) AddEarnBillIDs(ids ...int64) *PlatformAccountUpdateOne {
	pauo.mutation.AddEarnBillIDs(ids...)
	return pauo
}

// AddEarnBills adds the "earn_bills" edges to the EarnBill entity.
func (pauo *PlatformAccountUpdateOne) AddEarnBills(e ...*EarnBill) *PlatformAccountUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pauo.AddEarnBillIDs(ids...)
}

// Mutation returns the PlatformAccountMutation object of the builder.
func (pauo *PlatformAccountUpdateOne) Mutation() *PlatformAccountMutation {
	return pauo.mutation
}

// ClearEarnBills clears all "earn_bills" edges to the EarnBill entity.
func (pauo *PlatformAccountUpdateOne) ClearEarnBills() *PlatformAccountUpdateOne {
	pauo.mutation.ClearEarnBills()
	return pauo
}

// RemoveEarnBillIDs removes the "earn_bills" edge to EarnBill entities by IDs.
func (pauo *PlatformAccountUpdateOne) RemoveEarnBillIDs(ids ...int64) *PlatformAccountUpdateOne {
	pauo.mutation.RemoveEarnBillIDs(ids...)
	return pauo
}

// RemoveEarnBills removes "earn_bills" edges to EarnBill entities.
func (pauo *PlatformAccountUpdateOne) RemoveEarnBills(e ...*EarnBill) *PlatformAccountUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pauo.RemoveEarnBillIDs(ids...)
}

// Where appends a list predicates to the PlatformAccountUpdate builder.
func (pauo *PlatformAccountUpdateOne) Where(ps ...predicate.PlatformAccount) *PlatformAccountUpdateOne {
	pauo.mutation.Where(ps...)
	return pauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pauo *PlatformAccountUpdateOne) Select(field string, fields ...string) *PlatformAccountUpdateOne {
	pauo.fields = append([]string{field}, fields...)
	return pauo
}

// Save executes the query and returns the updated PlatformAccount entity.
func (pauo *PlatformAccountUpdateOne) Save(ctx context.Context) (*PlatformAccount, error) {
	pauo.defaults()
	return withHooks(ctx, pauo.sqlSave, pauo.mutation, pauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pauo *PlatformAccountUpdateOne) SaveX(ctx context.Context) *PlatformAccount {
	node, err := pauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pauo *PlatformAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := pauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pauo *PlatformAccountUpdateOne) ExecX(ctx context.Context) {
	if err := pauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pauo *PlatformAccountUpdateOne) defaults() {
	if _, ok := pauo.mutation.UpdatedAt(); !ok {
		v := platformaccount.UpdateDefaultUpdatedAt()
		pauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pauo *PlatformAccountUpdateOne) check() error {
	if v, ok := pauo.mutation.GetType(); ok {
		if err := platformaccount.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "PlatformAccount.type": %w`, err)}
		}
	}
	return nil
}

func (pauo *PlatformAccountUpdateOne) sqlSave(ctx context.Context) (_node *PlatformAccount, err error) {
	if err := pauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(platformaccount.Table, platformaccount.Columns, sqlgraph.NewFieldSpec(platformaccount.FieldID, field.TypeInt64))
	id, ok := pauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "PlatformAccount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, platformaccount.FieldID)
		for _, f := range fields {
			if !platformaccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != platformaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pauo.mutation.CreatedBy(); ok {
		_spec.SetField(platformaccount.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := pauo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(platformaccount.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := pauo.mutation.UpdatedBy(); ok {
		_spec.SetField(platformaccount.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := pauo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(platformaccount.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := pauo.mutation.UpdatedAt(); ok {
		_spec.SetField(platformaccount.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pauo.mutation.DeletedAt(); ok {
		_spec.SetField(platformaccount.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := pauo.mutation.GetType(); ok {
		_spec.SetField(platformaccount.FieldType, field.TypeEnum, value)
	}
	if value, ok := pauo.mutation.SumTotalCep(); ok {
		_spec.SetField(platformaccount.FieldSumTotalCep, field.TypeInt64, value)
	}
	if value, ok := pauo.mutation.AddedSumTotalCep(); ok {
		_spec.AddField(platformaccount.FieldSumTotalCep, field.TypeInt64, value)
	}
	if value, ok := pauo.mutation.TotalCep(); ok {
		_spec.SetField(platformaccount.FieldTotalCep, field.TypeInt64, value)
	}
	if value, ok := pauo.mutation.AddedTotalCep(); ok {
		_spec.AddField(platformaccount.FieldTotalCep, field.TypeInt64, value)
	}
	if value, ok := pauo.mutation.SumPureCep(); ok {
		_spec.SetField(platformaccount.FieldSumPureCep, field.TypeInt64, value)
	}
	if value, ok := pauo.mutation.AddedSumPureCep(); ok {
		_spec.AddField(platformaccount.FieldSumPureCep, field.TypeInt64, value)
	}
	if value, ok := pauo.mutation.PureCep(); ok {
		_spec.SetField(platformaccount.FieldPureCep, field.TypeInt64, value)
	}
	if value, ok := pauo.mutation.AddedPureCep(); ok {
		_spec.AddField(platformaccount.FieldPureCep, field.TypeInt64, value)
	}
	if value, ok := pauo.mutation.SumGiftCep(); ok {
		_spec.SetField(platformaccount.FieldSumGiftCep, field.TypeInt64, value)
	}
	if value, ok := pauo.mutation.AddedSumGiftCep(); ok {
		_spec.AddField(platformaccount.FieldSumGiftCep, field.TypeInt64, value)
	}
	if value, ok := pauo.mutation.GiftCep(); ok {
		_spec.SetField(platformaccount.FieldGiftCep, field.TypeInt64, value)
	}
	if value, ok := pauo.mutation.AddedGiftCep(); ok {
		_spec.AddField(platformaccount.FieldGiftCep, field.TypeInt64, value)
	}
	if pauo.mutation.EarnBillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformaccount.EarnBillsTable,
			Columns: []string{platformaccount.EarnBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earnbill.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pauo.mutation.RemovedEarnBillsIDs(); len(nodes) > 0 && !pauo.mutation.EarnBillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformaccount.EarnBillsTable,
			Columns: []string{platformaccount.EarnBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earnbill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pauo.mutation.EarnBillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformaccount.EarnBillsTable,
			Columns: []string{platformaccount.EarnBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earnbill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PlatformAccount{config: pauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{platformaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pauo.mutation.done = true
	return _node, nil
}
