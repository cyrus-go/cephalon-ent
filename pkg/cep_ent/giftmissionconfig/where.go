// Code generated by ent, DO NOT EDIT.

package giftmissionconfig

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldLTE(FieldID, id))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldEQ(FieldDeletedAt, v))
}

// GapBase applies equality check predicate on the "gap_base" field. It's identical to GapBaseEQ.
func GapBase(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldEQ(FieldGapBase, v))
}

// GapRandomMax applies equality check predicate on the "gap_random_max" field. It's identical to GapRandomMaxEQ.
func GapRandomMax(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldEQ(FieldGapRandomMax, v))
}

// GapRandomMin applies equality check predicate on the "gap_random_min" field. It's identical to GapRandomMinEQ.
func GapRandomMin(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldEQ(FieldGapRandomMin, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldLTE(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldLTE(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldLTE(FieldDeletedAt, v))
}

// StabilityLevelEQ applies the EQ predicate on the "stability_level" field.
func StabilityLevelEQ(v enums.DeviceStabilityType) predicate.GiftMissionConfig {
	vc := v
	return predicate.GiftMissionConfig(sql.FieldEQ(FieldStabilityLevel, vc))
}

// StabilityLevelNEQ applies the NEQ predicate on the "stability_level" field.
func StabilityLevelNEQ(v enums.DeviceStabilityType) predicate.GiftMissionConfig {
	vc := v
	return predicate.GiftMissionConfig(sql.FieldNEQ(FieldStabilityLevel, vc))
}

// StabilityLevelIn applies the In predicate on the "stability_level" field.
func StabilityLevelIn(vs ...enums.DeviceStabilityType) predicate.GiftMissionConfig {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GiftMissionConfig(sql.FieldIn(FieldStabilityLevel, v...))
}

// StabilityLevelNotIn applies the NotIn predicate on the "stability_level" field.
func StabilityLevelNotIn(vs ...enums.DeviceStabilityType) predicate.GiftMissionConfig {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GiftMissionConfig(sql.FieldNotIn(FieldStabilityLevel, v...))
}

// GpuVersionEQ applies the EQ predicate on the "gpu_version" field.
func GpuVersionEQ(v enums.GpuVersion) predicate.GiftMissionConfig {
	vc := v
	return predicate.GiftMissionConfig(sql.FieldEQ(FieldGpuVersion, vc))
}

// GpuVersionNEQ applies the NEQ predicate on the "gpu_version" field.
func GpuVersionNEQ(v enums.GpuVersion) predicate.GiftMissionConfig {
	vc := v
	return predicate.GiftMissionConfig(sql.FieldNEQ(FieldGpuVersion, vc))
}

// GpuVersionIn applies the In predicate on the "gpu_version" field.
func GpuVersionIn(vs ...enums.GpuVersion) predicate.GiftMissionConfig {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GiftMissionConfig(sql.FieldIn(FieldGpuVersion, v...))
}

// GpuVersionNotIn applies the NotIn predicate on the "gpu_version" field.
func GpuVersionNotIn(vs ...enums.GpuVersion) predicate.GiftMissionConfig {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GiftMissionConfig(sql.FieldNotIn(FieldGpuVersion, v...))
}

// GapBaseEQ applies the EQ predicate on the "gap_base" field.
func GapBaseEQ(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldEQ(FieldGapBase, v))
}

// GapBaseNEQ applies the NEQ predicate on the "gap_base" field.
func GapBaseNEQ(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldNEQ(FieldGapBase, v))
}

// GapBaseIn applies the In predicate on the "gap_base" field.
func GapBaseIn(vs ...int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldIn(FieldGapBase, vs...))
}

// GapBaseNotIn applies the NotIn predicate on the "gap_base" field.
func GapBaseNotIn(vs ...int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldNotIn(FieldGapBase, vs...))
}

// GapBaseGT applies the GT predicate on the "gap_base" field.
func GapBaseGT(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldGT(FieldGapBase, v))
}

// GapBaseGTE applies the GTE predicate on the "gap_base" field.
func GapBaseGTE(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldGTE(FieldGapBase, v))
}

// GapBaseLT applies the LT predicate on the "gap_base" field.
func GapBaseLT(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldLT(FieldGapBase, v))
}

// GapBaseLTE applies the LTE predicate on the "gap_base" field.
func GapBaseLTE(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldLTE(FieldGapBase, v))
}

// GapRandomMaxEQ applies the EQ predicate on the "gap_random_max" field.
func GapRandomMaxEQ(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldEQ(FieldGapRandomMax, v))
}

// GapRandomMaxNEQ applies the NEQ predicate on the "gap_random_max" field.
func GapRandomMaxNEQ(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldNEQ(FieldGapRandomMax, v))
}

// GapRandomMaxIn applies the In predicate on the "gap_random_max" field.
func GapRandomMaxIn(vs ...int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldIn(FieldGapRandomMax, vs...))
}

// GapRandomMaxNotIn applies the NotIn predicate on the "gap_random_max" field.
func GapRandomMaxNotIn(vs ...int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldNotIn(FieldGapRandomMax, vs...))
}

// GapRandomMaxGT applies the GT predicate on the "gap_random_max" field.
func GapRandomMaxGT(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldGT(FieldGapRandomMax, v))
}

// GapRandomMaxGTE applies the GTE predicate on the "gap_random_max" field.
func GapRandomMaxGTE(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldGTE(FieldGapRandomMax, v))
}

// GapRandomMaxLT applies the LT predicate on the "gap_random_max" field.
func GapRandomMaxLT(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldLT(FieldGapRandomMax, v))
}

// GapRandomMaxLTE applies the LTE predicate on the "gap_random_max" field.
func GapRandomMaxLTE(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldLTE(FieldGapRandomMax, v))
}

// GapRandomMinEQ applies the EQ predicate on the "gap_random_min" field.
func GapRandomMinEQ(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldEQ(FieldGapRandomMin, v))
}

// GapRandomMinNEQ applies the NEQ predicate on the "gap_random_min" field.
func GapRandomMinNEQ(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldNEQ(FieldGapRandomMin, v))
}

// GapRandomMinIn applies the In predicate on the "gap_random_min" field.
func GapRandomMinIn(vs ...int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldIn(FieldGapRandomMin, vs...))
}

// GapRandomMinNotIn applies the NotIn predicate on the "gap_random_min" field.
func GapRandomMinNotIn(vs ...int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldNotIn(FieldGapRandomMin, vs...))
}

// GapRandomMinGT applies the GT predicate on the "gap_random_min" field.
func GapRandomMinGT(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldGT(FieldGapRandomMin, v))
}

// GapRandomMinGTE applies the GTE predicate on the "gap_random_min" field.
func GapRandomMinGTE(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldGTE(FieldGapRandomMin, v))
}

// GapRandomMinLT applies the LT predicate on the "gap_random_min" field.
func GapRandomMinLT(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldLT(FieldGapRandomMin, v))
}

// GapRandomMinLTE applies the LTE predicate on the "gap_random_min" field.
func GapRandomMinLTE(v int64) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.FieldLTE(FieldGapRandomMin, v))
}

// HasDevices applies the HasEdge predicate on the "devices" edge.
func HasDevices() predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DevicesTable, DevicesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDevicesWith applies the HasEdge predicate on the "devices" edge with a given conditions (other predicates).
func HasDevicesWith(preds ...predicate.Device) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(func(s *sql.Selector) {
		step := newDevicesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GiftMissionConfig) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GiftMissionConfig) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GiftMissionConfig) predicate.GiftMissionConfig {
	return predicate.GiftMissionConfig(sql.NotPredicates(p))
}
