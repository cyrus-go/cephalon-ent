// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lotto"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottochancerule"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottogetcountrecord"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottoprize"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottorecord"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottousercount"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// LottoCreate is the builder for creating a Lotto entity.
type LottoCreate struct {
	config
	mutation *LottoMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (lc *LottoCreate) SetCreatedBy(i int64) *LottoCreate {
	lc.mutation.SetCreatedBy(i)
	return lc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (lc *LottoCreate) SetNillableCreatedBy(i *int64) *LottoCreate {
	if i != nil {
		lc.SetCreatedBy(*i)
	}
	return lc
}

// SetUpdatedBy sets the "updated_by" field.
func (lc *LottoCreate) SetUpdatedBy(i int64) *LottoCreate {
	lc.mutation.SetUpdatedBy(i)
	return lc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (lc *LottoCreate) SetNillableUpdatedBy(i *int64) *LottoCreate {
	if i != nil {
		lc.SetUpdatedBy(*i)
	}
	return lc
}

// SetCreatedAt sets the "created_at" field.
func (lc *LottoCreate) SetCreatedAt(t time.Time) *LottoCreate {
	lc.mutation.SetCreatedAt(t)
	return lc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lc *LottoCreate) SetNillableCreatedAt(t *time.Time) *LottoCreate {
	if t != nil {
		lc.SetCreatedAt(*t)
	}
	return lc
}

// SetUpdatedAt sets the "updated_at" field.
func (lc *LottoCreate) SetUpdatedAt(t time.Time) *LottoCreate {
	lc.mutation.SetUpdatedAt(t)
	return lc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lc *LottoCreate) SetNillableUpdatedAt(t *time.Time) *LottoCreate {
	if t != nil {
		lc.SetUpdatedAt(*t)
	}
	return lc
}

// SetDeletedAt sets the "deleted_at" field.
func (lc *LottoCreate) SetDeletedAt(t time.Time) *LottoCreate {
	lc.mutation.SetDeletedAt(t)
	return lc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lc *LottoCreate) SetNillableDeletedAt(t *time.Time) *LottoCreate {
	if t != nil {
		lc.SetDeletedAt(*t)
	}
	return lc
}

// SetName sets the "name" field.
func (lc *LottoCreate) SetName(s string) *LottoCreate {
	lc.mutation.SetName(s)
	return lc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (lc *LottoCreate) SetNillableName(s *string) *LottoCreate {
	if s != nil {
		lc.SetName(*s)
	}
	return lc
}

// SetTotalWeight sets the "total_weight" field.
func (lc *LottoCreate) SetTotalWeight(i int64) *LottoCreate {
	lc.mutation.SetTotalWeight(i)
	return lc
}

// SetNillableTotalWeight sets the "total_weight" field if the given value is not nil.
func (lc *LottoCreate) SetNillableTotalWeight(i *int64) *LottoCreate {
	if i != nil {
		lc.SetTotalWeight(*i)
	}
	return lc
}

// SetStartedAt sets the "started_at" field.
func (lc *LottoCreate) SetStartedAt(t time.Time) *LottoCreate {
	lc.mutation.SetStartedAt(t)
	return lc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (lc *LottoCreate) SetNillableStartedAt(t *time.Time) *LottoCreate {
	if t != nil {
		lc.SetStartedAt(*t)
	}
	return lc
}

// SetEndedAt sets the "ended_at" field.
func (lc *LottoCreate) SetEndedAt(t time.Time) *LottoCreate {
	lc.mutation.SetEndedAt(t)
	return lc
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (lc *LottoCreate) SetNillableEndedAt(t *time.Time) *LottoCreate {
	if t != nil {
		lc.SetEndedAt(*t)
	}
	return lc
}

// SetStatus sets the "status" field.
func (lc *LottoCreate) SetStatus(es enums.LottoStatus) *LottoCreate {
	lc.mutation.SetStatus(es)
	return lc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (lc *LottoCreate) SetNillableStatus(es *enums.LottoStatus) *LottoCreate {
	if es != nil {
		lc.SetStatus(*es)
	}
	return lc
}

// SetRemark sets the "remark" field.
func (lc *LottoCreate) SetRemark(s string) *LottoCreate {
	lc.mutation.SetRemark(s)
	return lc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (lc *LottoCreate) SetNillableRemark(s *string) *LottoCreate {
	if s != nil {
		lc.SetRemark(*s)
	}
	return lc
}

// SetID sets the "id" field.
func (lc *LottoCreate) SetID(i int64) *LottoCreate {
	lc.mutation.SetID(i)
	return lc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lc *LottoCreate) SetNillableID(i *int64) *LottoCreate {
	if i != nil {
		lc.SetID(*i)
	}
	return lc
}

// AddLottoPrizeIDs adds the "lotto_prizes" edge to the LottoPrize entity by IDs.
func (lc *LottoCreate) AddLottoPrizeIDs(ids ...int64) *LottoCreate {
	lc.mutation.AddLottoPrizeIDs(ids...)
	return lc
}

// AddLottoPrizes adds the "lotto_prizes" edges to the LottoPrize entity.
func (lc *LottoCreate) AddLottoPrizes(l ...*LottoPrize) *LottoCreate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lc.AddLottoPrizeIDs(ids...)
}

// AddLottoRecordIDs adds the "lotto_records" edge to the LottoRecord entity by IDs.
func (lc *LottoCreate) AddLottoRecordIDs(ids ...int64) *LottoCreate {
	lc.mutation.AddLottoRecordIDs(ids...)
	return lc
}

// AddLottoRecords adds the "lotto_records" edges to the LottoRecord entity.
func (lc *LottoCreate) AddLottoRecords(l ...*LottoRecord) *LottoCreate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lc.AddLottoRecordIDs(ids...)
}

// AddLottoUserCountIDs adds the "lotto_user_counts" edge to the LottoUserCount entity by IDs.
func (lc *LottoCreate) AddLottoUserCountIDs(ids ...int64) *LottoCreate {
	lc.mutation.AddLottoUserCountIDs(ids...)
	return lc
}

// AddLottoUserCounts adds the "lotto_user_counts" edges to the LottoUserCount entity.
func (lc *LottoCreate) AddLottoUserCounts(l ...*LottoUserCount) *LottoCreate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lc.AddLottoUserCountIDs(ids...)
}

// AddLottoGetCountRecordIDs adds the "lotto_get_count_records" edge to the LottoGetCountRecord entity by IDs.
func (lc *LottoCreate) AddLottoGetCountRecordIDs(ids ...int64) *LottoCreate {
	lc.mutation.AddLottoGetCountRecordIDs(ids...)
	return lc
}

// AddLottoGetCountRecords adds the "lotto_get_count_records" edges to the LottoGetCountRecord entity.
func (lc *LottoCreate) AddLottoGetCountRecords(l ...*LottoGetCountRecord) *LottoCreate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lc.AddLottoGetCountRecordIDs(ids...)
}

// AddLottoChangeRuleIDs adds the "lotto_Change_rules" edge to the LottoChanceRule entity by IDs.
func (lc *LottoCreate) AddLottoChangeRuleIDs(ids ...int64) *LottoCreate {
	lc.mutation.AddLottoChangeRuleIDs(ids...)
	return lc
}

// AddLottoChangeRules adds the "lotto_Change_rules" edges to the LottoChanceRule entity.
func (lc *LottoCreate) AddLottoChangeRules(l ...*LottoChanceRule) *LottoCreate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lc.AddLottoChangeRuleIDs(ids...)
}

// Mutation returns the LottoMutation object of the builder.
func (lc *LottoCreate) Mutation() *LottoMutation {
	return lc.mutation
}

// Save creates the Lotto in the database.
func (lc *LottoCreate) Save(ctx context.Context) (*Lotto, error) {
	lc.defaults()
	return withHooks(ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LottoCreate) SaveX(ctx context.Context) *Lotto {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LottoCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LottoCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *LottoCreate) defaults() {
	if _, ok := lc.mutation.CreatedBy(); !ok {
		v := lotto.DefaultCreatedBy
		lc.mutation.SetCreatedBy(v)
	}
	if _, ok := lc.mutation.UpdatedBy(); !ok {
		v := lotto.DefaultUpdatedBy
		lc.mutation.SetUpdatedBy(v)
	}
	if _, ok := lc.mutation.CreatedAt(); !ok {
		v := lotto.DefaultCreatedAt()
		lc.mutation.SetCreatedAt(v)
	}
	if _, ok := lc.mutation.UpdatedAt(); !ok {
		v := lotto.DefaultUpdatedAt()
		lc.mutation.SetUpdatedAt(v)
	}
	if _, ok := lc.mutation.DeletedAt(); !ok {
		v := lotto.DefaultDeletedAt
		lc.mutation.SetDeletedAt(v)
	}
	if _, ok := lc.mutation.Name(); !ok {
		v := lotto.DefaultName
		lc.mutation.SetName(v)
	}
	if _, ok := lc.mutation.TotalWeight(); !ok {
		v := lotto.DefaultTotalWeight
		lc.mutation.SetTotalWeight(v)
	}
	if _, ok := lc.mutation.StartedAt(); !ok {
		v := lotto.DefaultStartedAt
		lc.mutation.SetStartedAt(v)
	}
	if _, ok := lc.mutation.EndedAt(); !ok {
		v := lotto.DefaultEndedAt
		lc.mutation.SetEndedAt(v)
	}
	if _, ok := lc.mutation.Status(); !ok {
		v := lotto.DefaultStatus
		lc.mutation.SetStatus(v)
	}
	if _, ok := lc.mutation.Remark(); !ok {
		v := lotto.DefaultRemark
		lc.mutation.SetRemark(v)
	}
	if _, ok := lc.mutation.ID(); !ok {
		v := lotto.DefaultID()
		lc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LottoCreate) check() error {
	if _, ok := lc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "Lotto.created_by"`)}
	}
	if _, ok := lc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "Lotto.updated_by"`)}
	}
	if _, ok := lc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "Lotto.created_at"`)}
	}
	if _, ok := lc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "Lotto.updated_at"`)}
	}
	if _, ok := lc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "Lotto.deleted_at"`)}
	}
	if _, ok := lc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`cep_ent: missing required field "Lotto.name"`)}
	}
	if _, ok := lc.mutation.TotalWeight(); !ok {
		return &ValidationError{Name: "total_weight", err: errors.New(`cep_ent: missing required field "Lotto.total_weight"`)}
	}
	if _, ok := lc.mutation.StartedAt(); !ok {
		return &ValidationError{Name: "started_at", err: errors.New(`cep_ent: missing required field "Lotto.started_at"`)}
	}
	if _, ok := lc.mutation.EndedAt(); !ok {
		return &ValidationError{Name: "ended_at", err: errors.New(`cep_ent: missing required field "Lotto.ended_at"`)}
	}
	if _, ok := lc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`cep_ent: missing required field "Lotto.status"`)}
	}
	if v, ok := lc.mutation.Status(); ok {
		if err := lotto.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "Lotto.status": %w`, err)}
		}
	}
	if _, ok := lc.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`cep_ent: missing required field "Lotto.remark"`)}
	}
	return nil
}

func (lc *LottoCreate) sqlSave(ctx context.Context) (*Lotto, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *LottoCreate) createSpec() (*Lotto, *sqlgraph.CreateSpec) {
	var (
		_node = &Lotto{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(lotto.Table, sqlgraph.NewFieldSpec(lotto.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = lc.conflict
	if id, ok := lc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lc.mutation.CreatedBy(); ok {
		_spec.SetField(lotto.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := lc.mutation.UpdatedBy(); ok {
		_spec.SetField(lotto.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := lc.mutation.CreatedAt(); ok {
		_spec.SetField(lotto.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lc.mutation.UpdatedAt(); ok {
		_spec.SetField(lotto.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := lc.mutation.DeletedAt(); ok {
		_spec.SetField(lotto.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := lc.mutation.Name(); ok {
		_spec.SetField(lotto.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := lc.mutation.TotalWeight(); ok {
		_spec.SetField(lotto.FieldTotalWeight, field.TypeInt64, value)
		_node.TotalWeight = value
	}
	if value, ok := lc.mutation.StartedAt(); ok {
		_spec.SetField(lotto.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := lc.mutation.EndedAt(); ok {
		_spec.SetField(lotto.FieldEndedAt, field.TypeTime, value)
		_node.EndedAt = value
	}
	if value, ok := lc.mutation.Status(); ok {
		_spec.SetField(lotto.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := lc.mutation.Remark(); ok {
		_spec.SetField(lotto.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if nodes := lc.mutation.LottoPrizesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoPrizesTable,
			Columns: []string{lotto.LottoPrizesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottoprize.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.LottoRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoRecordsTable,
			Columns: []string{lotto.LottoRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottorecord.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.LottoUserCountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoUserCountsTable,
			Columns: []string{lotto.LottoUserCountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottousercount.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.LottoGetCountRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoGetCountRecordsTable,
			Columns: []string{lotto.LottoGetCountRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottogetcountrecord.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.LottoChangeRulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lotto.LottoChangeRulesTable,
			Columns: []string{lotto.LottoChangeRulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottochancerule.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Lotto.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LottoUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (lc *LottoCreate) OnConflict(opts ...sql.ConflictOption) *LottoUpsertOne {
	lc.conflict = opts
	return &LottoUpsertOne{
		create: lc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Lotto.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lc *LottoCreate) OnConflictColumns(columns ...string) *LottoUpsertOne {
	lc.conflict = append(lc.conflict, sql.ConflictColumns(columns...))
	return &LottoUpsertOne{
		create: lc,
	}
}

type (
	// LottoUpsertOne is the builder for "upsert"-ing
	//  one Lotto node.
	LottoUpsertOne struct {
		create *LottoCreate
	}

	// LottoUpsert is the "OnConflict" setter.
	LottoUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *LottoUpsert) SetCreatedBy(v int64) *LottoUpsert {
	u.Set(lotto.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *LottoUpsert) UpdateCreatedBy() *LottoUpsert {
	u.SetExcluded(lotto.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *LottoUpsert) AddCreatedBy(v int64) *LottoUpsert {
	u.Add(lotto.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *LottoUpsert) SetUpdatedBy(v int64) *LottoUpsert {
	u.Set(lotto.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *LottoUpsert) UpdateUpdatedBy() *LottoUpsert {
	u.SetExcluded(lotto.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *LottoUpsert) AddUpdatedBy(v int64) *LottoUpsert {
	u.Add(lotto.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LottoUpsert) SetUpdatedAt(v time.Time) *LottoUpsert {
	u.Set(lotto.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LottoUpsert) UpdateUpdatedAt() *LottoUpsert {
	u.SetExcluded(lotto.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LottoUpsert) SetDeletedAt(v time.Time) *LottoUpsert {
	u.Set(lotto.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LottoUpsert) UpdateDeletedAt() *LottoUpsert {
	u.SetExcluded(lotto.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *LottoUpsert) SetName(v string) *LottoUpsert {
	u.Set(lotto.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *LottoUpsert) UpdateName() *LottoUpsert {
	u.SetExcluded(lotto.FieldName)
	return u
}

// SetTotalWeight sets the "total_weight" field.
func (u *LottoUpsert) SetTotalWeight(v int64) *LottoUpsert {
	u.Set(lotto.FieldTotalWeight, v)
	return u
}

// UpdateTotalWeight sets the "total_weight" field to the value that was provided on create.
func (u *LottoUpsert) UpdateTotalWeight() *LottoUpsert {
	u.SetExcluded(lotto.FieldTotalWeight)
	return u
}

// AddTotalWeight adds v to the "total_weight" field.
func (u *LottoUpsert) AddTotalWeight(v int64) *LottoUpsert {
	u.Add(lotto.FieldTotalWeight, v)
	return u
}

// SetStartedAt sets the "started_at" field.
func (u *LottoUpsert) SetStartedAt(v time.Time) *LottoUpsert {
	u.Set(lotto.FieldStartedAt, v)
	return u
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *LottoUpsert) UpdateStartedAt() *LottoUpsert {
	u.SetExcluded(lotto.FieldStartedAt)
	return u
}

// SetEndedAt sets the "ended_at" field.
func (u *LottoUpsert) SetEndedAt(v time.Time) *LottoUpsert {
	u.Set(lotto.FieldEndedAt, v)
	return u
}

// UpdateEndedAt sets the "ended_at" field to the value that was provided on create.
func (u *LottoUpsert) UpdateEndedAt() *LottoUpsert {
	u.SetExcluded(lotto.FieldEndedAt)
	return u
}

// SetStatus sets the "status" field.
func (u *LottoUpsert) SetStatus(v enums.LottoStatus) *LottoUpsert {
	u.Set(lotto.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *LottoUpsert) UpdateStatus() *LottoUpsert {
	u.SetExcluded(lotto.FieldStatus)
	return u
}

// SetRemark sets the "remark" field.
func (u *LottoUpsert) SetRemark(v string) *LottoUpsert {
	u.Set(lotto.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *LottoUpsert) UpdateRemark() *LottoUpsert {
	u.SetExcluded(lotto.FieldRemark)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Lotto.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(lotto.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LottoUpsertOne) UpdateNewValues() *LottoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(lotto.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(lotto.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Lotto.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LottoUpsertOne) Ignore() *LottoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LottoUpsertOne) DoNothing() *LottoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LottoCreate.OnConflict
// documentation for more info.
func (u *LottoUpsertOne) Update(set func(*LottoUpsert)) *LottoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LottoUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *LottoUpsertOne) SetCreatedBy(v int64) *LottoUpsertOne {
	return u.Update(func(s *LottoUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *LottoUpsertOne) AddCreatedBy(v int64) *LottoUpsertOne {
	return u.Update(func(s *LottoUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *LottoUpsertOne) UpdateCreatedBy() *LottoUpsertOne {
	return u.Update(func(s *LottoUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *LottoUpsertOne) SetUpdatedBy(v int64) *LottoUpsertOne {
	return u.Update(func(s *LottoUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *LottoUpsertOne) AddUpdatedBy(v int64) *LottoUpsertOne {
	return u.Update(func(s *LottoUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *LottoUpsertOne) UpdateUpdatedBy() *LottoUpsertOne {
	return u.Update(func(s *LottoUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LottoUpsertOne) SetUpdatedAt(v time.Time) *LottoUpsertOne {
	return u.Update(func(s *LottoUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LottoUpsertOne) UpdateUpdatedAt() *LottoUpsertOne {
	return u.Update(func(s *LottoUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LottoUpsertOne) SetDeletedAt(v time.Time) *LottoUpsertOne {
	return u.Update(func(s *LottoUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LottoUpsertOne) UpdateDeletedAt() *LottoUpsertOne {
	return u.Update(func(s *LottoUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *LottoUpsertOne) SetName(v string) *LottoUpsertOne {
	return u.Update(func(s *LottoUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *LottoUpsertOne) UpdateName() *LottoUpsertOne {
	return u.Update(func(s *LottoUpsert) {
		s.UpdateName()
	})
}

// SetTotalWeight sets the "total_weight" field.
func (u *LottoUpsertOne) SetTotalWeight(v int64) *LottoUpsertOne {
	return u.Update(func(s *LottoUpsert) {
		s.SetTotalWeight(v)
	})
}

// AddTotalWeight adds v to the "total_weight" field.
func (u *LottoUpsertOne) AddTotalWeight(v int64) *LottoUpsertOne {
	return u.Update(func(s *LottoUpsert) {
		s.AddTotalWeight(v)
	})
}

// UpdateTotalWeight sets the "total_weight" field to the value that was provided on create.
func (u *LottoUpsertOne) UpdateTotalWeight() *LottoUpsertOne {
	return u.Update(func(s *LottoUpsert) {
		s.UpdateTotalWeight()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *LottoUpsertOne) SetStartedAt(v time.Time) *LottoUpsertOne {
	return u.Update(func(s *LottoUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *LottoUpsertOne) UpdateStartedAt() *LottoUpsertOne {
	return u.Update(func(s *LottoUpsert) {
		s.UpdateStartedAt()
	})
}

// SetEndedAt sets the "ended_at" field.
func (u *LottoUpsertOne) SetEndedAt(v time.Time) *LottoUpsertOne {
	return u.Update(func(s *LottoUpsert) {
		s.SetEndedAt(v)
	})
}

// UpdateEndedAt sets the "ended_at" field to the value that was provided on create.
func (u *LottoUpsertOne) UpdateEndedAt() *LottoUpsertOne {
	return u.Update(func(s *LottoUpsert) {
		s.UpdateEndedAt()
	})
}

// SetStatus sets the "status" field.
func (u *LottoUpsertOne) SetStatus(v enums.LottoStatus) *LottoUpsertOne {
	return u.Update(func(s *LottoUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *LottoUpsertOne) UpdateStatus() *LottoUpsertOne {
	return u.Update(func(s *LottoUpsert) {
		s.UpdateStatus()
	})
}

// SetRemark sets the "remark" field.
func (u *LottoUpsertOne) SetRemark(v string) *LottoUpsertOne {
	return u.Update(func(s *LottoUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *LottoUpsertOne) UpdateRemark() *LottoUpsertOne {
	return u.Update(func(s *LottoUpsert) {
		s.UpdateRemark()
	})
}

// Exec executes the query.
func (u *LottoUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for LottoCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LottoUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LottoUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LottoUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LottoCreateBulk is the builder for creating many Lotto entities in bulk.
type LottoCreateBulk struct {
	config
	err      error
	builders []*LottoCreate
	conflict []sql.ConflictOption
}

// Save creates the Lotto entities in the database.
func (lcb *LottoCreateBulk) Save(ctx context.Context) ([]*Lotto, error) {
	if lcb.err != nil {
		return nil, lcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Lotto, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LottoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LottoCreateBulk) SaveX(ctx context.Context) []*Lotto {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LottoCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LottoCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Lotto.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LottoUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (lcb *LottoCreateBulk) OnConflict(opts ...sql.ConflictOption) *LottoUpsertBulk {
	lcb.conflict = opts
	return &LottoUpsertBulk{
		create: lcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Lotto.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lcb *LottoCreateBulk) OnConflictColumns(columns ...string) *LottoUpsertBulk {
	lcb.conflict = append(lcb.conflict, sql.ConflictColumns(columns...))
	return &LottoUpsertBulk{
		create: lcb,
	}
}

// LottoUpsertBulk is the builder for "upsert"-ing
// a bulk of Lotto nodes.
type LottoUpsertBulk struct {
	create *LottoCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Lotto.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(lotto.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LottoUpsertBulk) UpdateNewValues() *LottoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(lotto.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(lotto.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Lotto.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LottoUpsertBulk) Ignore() *LottoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LottoUpsertBulk) DoNothing() *LottoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LottoCreateBulk.OnConflict
// documentation for more info.
func (u *LottoUpsertBulk) Update(set func(*LottoUpsert)) *LottoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LottoUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *LottoUpsertBulk) SetCreatedBy(v int64) *LottoUpsertBulk {
	return u.Update(func(s *LottoUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *LottoUpsertBulk) AddCreatedBy(v int64) *LottoUpsertBulk {
	return u.Update(func(s *LottoUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *LottoUpsertBulk) UpdateCreatedBy() *LottoUpsertBulk {
	return u.Update(func(s *LottoUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *LottoUpsertBulk) SetUpdatedBy(v int64) *LottoUpsertBulk {
	return u.Update(func(s *LottoUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *LottoUpsertBulk) AddUpdatedBy(v int64) *LottoUpsertBulk {
	return u.Update(func(s *LottoUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *LottoUpsertBulk) UpdateUpdatedBy() *LottoUpsertBulk {
	return u.Update(func(s *LottoUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LottoUpsertBulk) SetUpdatedAt(v time.Time) *LottoUpsertBulk {
	return u.Update(func(s *LottoUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LottoUpsertBulk) UpdateUpdatedAt() *LottoUpsertBulk {
	return u.Update(func(s *LottoUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LottoUpsertBulk) SetDeletedAt(v time.Time) *LottoUpsertBulk {
	return u.Update(func(s *LottoUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LottoUpsertBulk) UpdateDeletedAt() *LottoUpsertBulk {
	return u.Update(func(s *LottoUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *LottoUpsertBulk) SetName(v string) *LottoUpsertBulk {
	return u.Update(func(s *LottoUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *LottoUpsertBulk) UpdateName() *LottoUpsertBulk {
	return u.Update(func(s *LottoUpsert) {
		s.UpdateName()
	})
}

// SetTotalWeight sets the "total_weight" field.
func (u *LottoUpsertBulk) SetTotalWeight(v int64) *LottoUpsertBulk {
	return u.Update(func(s *LottoUpsert) {
		s.SetTotalWeight(v)
	})
}

// AddTotalWeight adds v to the "total_weight" field.
func (u *LottoUpsertBulk) AddTotalWeight(v int64) *LottoUpsertBulk {
	return u.Update(func(s *LottoUpsert) {
		s.AddTotalWeight(v)
	})
}

// UpdateTotalWeight sets the "total_weight" field to the value that was provided on create.
func (u *LottoUpsertBulk) UpdateTotalWeight() *LottoUpsertBulk {
	return u.Update(func(s *LottoUpsert) {
		s.UpdateTotalWeight()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *LottoUpsertBulk) SetStartedAt(v time.Time) *LottoUpsertBulk {
	return u.Update(func(s *LottoUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *LottoUpsertBulk) UpdateStartedAt() *LottoUpsertBulk {
	return u.Update(func(s *LottoUpsert) {
		s.UpdateStartedAt()
	})
}

// SetEndedAt sets the "ended_at" field.
func (u *LottoUpsertBulk) SetEndedAt(v time.Time) *LottoUpsertBulk {
	return u.Update(func(s *LottoUpsert) {
		s.SetEndedAt(v)
	})
}

// UpdateEndedAt sets the "ended_at" field to the value that was provided on create.
func (u *LottoUpsertBulk) UpdateEndedAt() *LottoUpsertBulk {
	return u.Update(func(s *LottoUpsert) {
		s.UpdateEndedAt()
	})
}

// SetStatus sets the "status" field.
func (u *LottoUpsertBulk) SetStatus(v enums.LottoStatus) *LottoUpsertBulk {
	return u.Update(func(s *LottoUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *LottoUpsertBulk) UpdateStatus() *LottoUpsertBulk {
	return u.Update(func(s *LottoUpsert) {
		s.UpdateStatus()
	})
}

// SetRemark sets the "remark" field.
func (u *LottoUpsertBulk) SetRemark(v string) *LottoUpsertBulk {
	return u.Update(func(s *LottoUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *LottoUpsertBulk) UpdateRemark() *LottoUpsertBulk {
	return u.Update(func(s *LottoUpsert) {
		s.UpdateRemark()
	})
}

// Exec executes the query.
func (u *LottoUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the LottoCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for LottoCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LottoUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
