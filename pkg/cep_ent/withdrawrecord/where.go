// Code generated by ent, DO NOT EDIT.

package withdrawrecord

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldLTE(FieldID, id))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldDeletedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldUserID, v))
}

// WithdrawAccount applies equality check predicate on the "withdraw_account" field. It's identical to WithdrawAccountEQ.
func WithdrawAccount(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldWithdrawAccount, v))
}

// BusinessName applies equality check predicate on the "business_name" field. It's identical to BusinessNameEQ.
func BusinessName(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldBusinessName, v))
}

// Bank applies equality check predicate on the "bank" field. It's identical to BankEQ.
func Bank(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldBank, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldAmount, v))
}

// RemainAmount applies equality check predicate on the "remain_amount" field. It's identical to RemainAmountEQ.
func RemainAmount(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldRemainAmount, v))
}

// Rate applies equality check predicate on the "rate" field. It's identical to RateEQ.
func Rate(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldRate, v))
}

// RealAmount applies equality check predicate on the "real_amount" field. It's identical to RealAmountEQ.
func RealAmount(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldRealAmount, v))
}

// RejectReason applies equality check predicate on the "reject_reason" field. It's identical to RejectReasonEQ.
func RejectReason(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldRejectReason, v))
}

// OperateUserID applies equality check predicate on the "operate_user_id" field. It's identical to OperateUserIDEQ.
func OperateUserID(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldOperateUserID, v))
}

// TransferOrderID applies equality check predicate on the "transfer_order_id" field. It's identical to TransferOrderIDEQ.
func TransferOrderID(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldTransferOrderID, v))
}

// SymbolID applies equality check predicate on the "symbol_id" field. It's identical to SymbolIDEQ.
func SymbolID(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldSymbolID, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldLTE(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldLTE(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldLTE(FieldDeletedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNotIn(FieldUserID, vs...))
}

// WithdrawAccountEQ applies the EQ predicate on the "withdraw_account" field.
func WithdrawAccountEQ(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldWithdrawAccount, v))
}

// WithdrawAccountNEQ applies the NEQ predicate on the "withdraw_account" field.
func WithdrawAccountNEQ(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNEQ(FieldWithdrawAccount, v))
}

// WithdrawAccountIn applies the In predicate on the "withdraw_account" field.
func WithdrawAccountIn(vs ...string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldIn(FieldWithdrawAccount, vs...))
}

// WithdrawAccountNotIn applies the NotIn predicate on the "withdraw_account" field.
func WithdrawAccountNotIn(vs ...string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNotIn(FieldWithdrawAccount, vs...))
}

// WithdrawAccountGT applies the GT predicate on the "withdraw_account" field.
func WithdrawAccountGT(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldGT(FieldWithdrawAccount, v))
}

// WithdrawAccountGTE applies the GTE predicate on the "withdraw_account" field.
func WithdrawAccountGTE(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldGTE(FieldWithdrawAccount, v))
}

// WithdrawAccountLT applies the LT predicate on the "withdraw_account" field.
func WithdrawAccountLT(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldLT(FieldWithdrawAccount, v))
}

// WithdrawAccountLTE applies the LTE predicate on the "withdraw_account" field.
func WithdrawAccountLTE(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldLTE(FieldWithdrawAccount, v))
}

// WithdrawAccountContains applies the Contains predicate on the "withdraw_account" field.
func WithdrawAccountContains(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldContains(FieldWithdrawAccount, v))
}

// WithdrawAccountHasPrefix applies the HasPrefix predicate on the "withdraw_account" field.
func WithdrawAccountHasPrefix(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldHasPrefix(FieldWithdrawAccount, v))
}

// WithdrawAccountHasSuffix applies the HasSuffix predicate on the "withdraw_account" field.
func WithdrawAccountHasSuffix(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldHasSuffix(FieldWithdrawAccount, v))
}

// WithdrawAccountEqualFold applies the EqualFold predicate on the "withdraw_account" field.
func WithdrawAccountEqualFold(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEqualFold(FieldWithdrawAccount, v))
}

// WithdrawAccountContainsFold applies the ContainsFold predicate on the "withdraw_account" field.
func WithdrawAccountContainsFold(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldContainsFold(FieldWithdrawAccount, v))
}

// BusinessNameEQ applies the EQ predicate on the "business_name" field.
func BusinessNameEQ(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldBusinessName, v))
}

// BusinessNameNEQ applies the NEQ predicate on the "business_name" field.
func BusinessNameNEQ(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNEQ(FieldBusinessName, v))
}

// BusinessNameIn applies the In predicate on the "business_name" field.
func BusinessNameIn(vs ...string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldIn(FieldBusinessName, vs...))
}

// BusinessNameNotIn applies the NotIn predicate on the "business_name" field.
func BusinessNameNotIn(vs ...string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNotIn(FieldBusinessName, vs...))
}

// BusinessNameGT applies the GT predicate on the "business_name" field.
func BusinessNameGT(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldGT(FieldBusinessName, v))
}

// BusinessNameGTE applies the GTE predicate on the "business_name" field.
func BusinessNameGTE(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldGTE(FieldBusinessName, v))
}

// BusinessNameLT applies the LT predicate on the "business_name" field.
func BusinessNameLT(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldLT(FieldBusinessName, v))
}

// BusinessNameLTE applies the LTE predicate on the "business_name" field.
func BusinessNameLTE(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldLTE(FieldBusinessName, v))
}

// BusinessNameContains applies the Contains predicate on the "business_name" field.
func BusinessNameContains(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldContains(FieldBusinessName, v))
}

// BusinessNameHasPrefix applies the HasPrefix predicate on the "business_name" field.
func BusinessNameHasPrefix(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldHasPrefix(FieldBusinessName, v))
}

// BusinessNameHasSuffix applies the HasSuffix predicate on the "business_name" field.
func BusinessNameHasSuffix(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldHasSuffix(FieldBusinessName, v))
}

// BusinessNameEqualFold applies the EqualFold predicate on the "business_name" field.
func BusinessNameEqualFold(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEqualFold(FieldBusinessName, v))
}

// BusinessNameContainsFold applies the ContainsFold predicate on the "business_name" field.
func BusinessNameContainsFold(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldContainsFold(FieldBusinessName, v))
}

// BankEQ applies the EQ predicate on the "bank" field.
func BankEQ(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldBank, v))
}

// BankNEQ applies the NEQ predicate on the "bank" field.
func BankNEQ(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNEQ(FieldBank, v))
}

// BankIn applies the In predicate on the "bank" field.
func BankIn(vs ...string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldIn(FieldBank, vs...))
}

// BankNotIn applies the NotIn predicate on the "bank" field.
func BankNotIn(vs ...string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNotIn(FieldBank, vs...))
}

// BankGT applies the GT predicate on the "bank" field.
func BankGT(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldGT(FieldBank, v))
}

// BankGTE applies the GTE predicate on the "bank" field.
func BankGTE(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldGTE(FieldBank, v))
}

// BankLT applies the LT predicate on the "bank" field.
func BankLT(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldLT(FieldBank, v))
}

// BankLTE applies the LTE predicate on the "bank" field.
func BankLTE(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldLTE(FieldBank, v))
}

// BankContains applies the Contains predicate on the "bank" field.
func BankContains(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldContains(FieldBank, v))
}

// BankHasPrefix applies the HasPrefix predicate on the "bank" field.
func BankHasPrefix(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldHasPrefix(FieldBank, v))
}

// BankHasSuffix applies the HasSuffix predicate on the "bank" field.
func BankHasSuffix(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldHasSuffix(FieldBank, v))
}

// BankEqualFold applies the EqualFold predicate on the "bank" field.
func BankEqualFold(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEqualFold(FieldBank, v))
}

// BankContainsFold applies the ContainsFold predicate on the "bank" field.
func BankContainsFold(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldContainsFold(FieldBank, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v enums.WithdrawType) predicate.WithdrawRecord {
	vc := v
	return predicate.WithdrawRecord(sql.FieldEQ(FieldType, vc))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v enums.WithdrawType) predicate.WithdrawRecord {
	vc := v
	return predicate.WithdrawRecord(sql.FieldNEQ(FieldType, vc))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...enums.WithdrawType) predicate.WithdrawRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WithdrawRecord(sql.FieldIn(FieldType, v...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...enums.WithdrawType) predicate.WithdrawRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WithdrawRecord(sql.FieldNotIn(FieldType, v...))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldLTE(FieldAmount, v))
}

// RemainAmountEQ applies the EQ predicate on the "remain_amount" field.
func RemainAmountEQ(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldRemainAmount, v))
}

// RemainAmountNEQ applies the NEQ predicate on the "remain_amount" field.
func RemainAmountNEQ(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNEQ(FieldRemainAmount, v))
}

// RemainAmountIn applies the In predicate on the "remain_amount" field.
func RemainAmountIn(vs ...int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldIn(FieldRemainAmount, vs...))
}

// RemainAmountNotIn applies the NotIn predicate on the "remain_amount" field.
func RemainAmountNotIn(vs ...int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNotIn(FieldRemainAmount, vs...))
}

// RemainAmountGT applies the GT predicate on the "remain_amount" field.
func RemainAmountGT(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldGT(FieldRemainAmount, v))
}

// RemainAmountGTE applies the GTE predicate on the "remain_amount" field.
func RemainAmountGTE(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldGTE(FieldRemainAmount, v))
}

// RemainAmountLT applies the LT predicate on the "remain_amount" field.
func RemainAmountLT(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldLT(FieldRemainAmount, v))
}

// RemainAmountLTE applies the LTE predicate on the "remain_amount" field.
func RemainAmountLTE(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldLTE(FieldRemainAmount, v))
}

// RateEQ applies the EQ predicate on the "rate" field.
func RateEQ(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldRate, v))
}

// RateNEQ applies the NEQ predicate on the "rate" field.
func RateNEQ(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNEQ(FieldRate, v))
}

// RateIn applies the In predicate on the "rate" field.
func RateIn(vs ...int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldIn(FieldRate, vs...))
}

// RateNotIn applies the NotIn predicate on the "rate" field.
func RateNotIn(vs ...int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNotIn(FieldRate, vs...))
}

// RateGT applies the GT predicate on the "rate" field.
func RateGT(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldGT(FieldRate, v))
}

// RateGTE applies the GTE predicate on the "rate" field.
func RateGTE(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldGTE(FieldRate, v))
}

// RateLT applies the LT predicate on the "rate" field.
func RateLT(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldLT(FieldRate, v))
}

// RateLTE applies the LTE predicate on the "rate" field.
func RateLTE(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldLTE(FieldRate, v))
}

// RealAmountEQ applies the EQ predicate on the "real_amount" field.
func RealAmountEQ(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldRealAmount, v))
}

// RealAmountNEQ applies the NEQ predicate on the "real_amount" field.
func RealAmountNEQ(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNEQ(FieldRealAmount, v))
}

// RealAmountIn applies the In predicate on the "real_amount" field.
func RealAmountIn(vs ...int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldIn(FieldRealAmount, vs...))
}

// RealAmountNotIn applies the NotIn predicate on the "real_amount" field.
func RealAmountNotIn(vs ...int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNotIn(FieldRealAmount, vs...))
}

// RealAmountGT applies the GT predicate on the "real_amount" field.
func RealAmountGT(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldGT(FieldRealAmount, v))
}

// RealAmountGTE applies the GTE predicate on the "real_amount" field.
func RealAmountGTE(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldGTE(FieldRealAmount, v))
}

// RealAmountLT applies the LT predicate on the "real_amount" field.
func RealAmountLT(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldLT(FieldRealAmount, v))
}

// RealAmountLTE applies the LTE predicate on the "real_amount" field.
func RealAmountLTE(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldLTE(FieldRealAmount, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v enums.WithdrawStatus) predicate.WithdrawRecord {
	vc := v
	return predicate.WithdrawRecord(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v enums.WithdrawStatus) predicate.WithdrawRecord {
	vc := v
	return predicate.WithdrawRecord(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...enums.WithdrawStatus) predicate.WithdrawRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WithdrawRecord(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...enums.WithdrawStatus) predicate.WithdrawRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WithdrawRecord(sql.FieldNotIn(FieldStatus, v...))
}

// RejectReasonEQ applies the EQ predicate on the "reject_reason" field.
func RejectReasonEQ(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldRejectReason, v))
}

// RejectReasonNEQ applies the NEQ predicate on the "reject_reason" field.
func RejectReasonNEQ(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNEQ(FieldRejectReason, v))
}

// RejectReasonIn applies the In predicate on the "reject_reason" field.
func RejectReasonIn(vs ...string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldIn(FieldRejectReason, vs...))
}

// RejectReasonNotIn applies the NotIn predicate on the "reject_reason" field.
func RejectReasonNotIn(vs ...string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNotIn(FieldRejectReason, vs...))
}

// RejectReasonGT applies the GT predicate on the "reject_reason" field.
func RejectReasonGT(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldGT(FieldRejectReason, v))
}

// RejectReasonGTE applies the GTE predicate on the "reject_reason" field.
func RejectReasonGTE(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldGTE(FieldRejectReason, v))
}

// RejectReasonLT applies the LT predicate on the "reject_reason" field.
func RejectReasonLT(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldLT(FieldRejectReason, v))
}

// RejectReasonLTE applies the LTE predicate on the "reject_reason" field.
func RejectReasonLTE(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldLTE(FieldRejectReason, v))
}

// RejectReasonContains applies the Contains predicate on the "reject_reason" field.
func RejectReasonContains(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldContains(FieldRejectReason, v))
}

// RejectReasonHasPrefix applies the HasPrefix predicate on the "reject_reason" field.
func RejectReasonHasPrefix(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldHasPrefix(FieldRejectReason, v))
}

// RejectReasonHasSuffix applies the HasSuffix predicate on the "reject_reason" field.
func RejectReasonHasSuffix(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldHasSuffix(FieldRejectReason, v))
}

// RejectReasonEqualFold applies the EqualFold predicate on the "reject_reason" field.
func RejectReasonEqualFold(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEqualFold(FieldRejectReason, v))
}

// RejectReasonContainsFold applies the ContainsFold predicate on the "reject_reason" field.
func RejectReasonContainsFold(v string) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldContainsFold(FieldRejectReason, v))
}

// OperateUserIDEQ applies the EQ predicate on the "operate_user_id" field.
func OperateUserIDEQ(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldOperateUserID, v))
}

// OperateUserIDNEQ applies the NEQ predicate on the "operate_user_id" field.
func OperateUserIDNEQ(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNEQ(FieldOperateUserID, v))
}

// OperateUserIDIn applies the In predicate on the "operate_user_id" field.
func OperateUserIDIn(vs ...int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldIn(FieldOperateUserID, vs...))
}

// OperateUserIDNotIn applies the NotIn predicate on the "operate_user_id" field.
func OperateUserIDNotIn(vs ...int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNotIn(FieldOperateUserID, vs...))
}

// TransferOrderIDEQ applies the EQ predicate on the "transfer_order_id" field.
func TransferOrderIDEQ(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldTransferOrderID, v))
}

// TransferOrderIDNEQ applies the NEQ predicate on the "transfer_order_id" field.
func TransferOrderIDNEQ(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNEQ(FieldTransferOrderID, v))
}

// TransferOrderIDIn applies the In predicate on the "transfer_order_id" field.
func TransferOrderIDIn(vs ...int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldIn(FieldTransferOrderID, vs...))
}

// TransferOrderIDNotIn applies the NotIn predicate on the "transfer_order_id" field.
func TransferOrderIDNotIn(vs ...int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNotIn(FieldTransferOrderID, vs...))
}

// SymbolIDEQ applies the EQ predicate on the "symbol_id" field.
func SymbolIDEQ(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldEQ(FieldSymbolID, v))
}

// SymbolIDNEQ applies the NEQ predicate on the "symbol_id" field.
func SymbolIDNEQ(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNEQ(FieldSymbolID, v))
}

// SymbolIDIn applies the In predicate on the "symbol_id" field.
func SymbolIDIn(vs ...int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldIn(FieldSymbolID, vs...))
}

// SymbolIDNotIn applies the NotIn predicate on the "symbol_id" field.
func SymbolIDNotIn(vs ...int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldNotIn(FieldSymbolID, vs...))
}

// SymbolIDGT applies the GT predicate on the "symbol_id" field.
func SymbolIDGT(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldGT(FieldSymbolID, v))
}

// SymbolIDGTE applies the GTE predicate on the "symbol_id" field.
func SymbolIDGTE(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldGTE(FieldSymbolID, v))
}

// SymbolIDLT applies the LT predicate on the "symbol_id" field.
func SymbolIDLT(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldLT(FieldSymbolID, v))
}

// SymbolIDLTE applies the LTE predicate on the "symbol_id" field.
func SymbolIDLTE(v int64) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.FieldLTE(FieldSymbolID, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.WithdrawRecord {
	return predicate.WithdrawRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOperateUser applies the HasEdge predicate on the "operate_user" edge.
func HasOperateUser() predicate.WithdrawRecord {
	return predicate.WithdrawRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OperateUserTable, OperateUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOperateUserWith applies the HasEdge predicate on the "operate_user" edge with a given conditions (other predicates).
func HasOperateUserWith(preds ...predicate.User) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(func(s *sql.Selector) {
		step := newOperateUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTransferOrder applies the HasEdge predicate on the "transfer_order" edge.
func HasTransferOrder() predicate.WithdrawRecord {
	return predicate.WithdrawRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, TransferOrderTable, TransferOrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTransferOrderWith applies the HasEdge predicate on the "transfer_order" edge with a given conditions (other predicates).
func HasTransferOrderWith(preds ...predicate.TransferOrder) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(func(s *sql.Selector) {
		step := newTransferOrderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WithdrawRecord) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WithdrawRecord) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WithdrawRecord) predicate.WithdrawRecord {
	return predicate.WithdrawRecord(sql.NotPredicates(p))
}
