// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/usercloserecord"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// 用户注销记录表
type UserCloseRecord struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建者 ID
	CreatedBy int64 `json:"created_by,string"`
	// 更新者 ID
	UpdatedBy int64 `json:"updated_by,string"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// 用户 id
	UserID int64 `json:"user_id,string"`
	// 本次注销时的注册时间
	RegisteredAt time.Time `json:"registered_at"`
	// 本次注销的时间
	ClosedAt time.Time `json:"closed_at"`
	// 注销类型，用户自己注销或管理人员注销等
	Type enums.UserCloseType `json:"type"`
	// 操作人用户 id（只有管理人员注销时才有值）
	OperateUserID int64 `json:"operate_user_id,string"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserCloseRecordQuery when eager-loading is set.
	Edges        UserCloseRecordEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserCloseRecordEdges holds the relations/edges for other nodes in the graph.
type UserCloseRecordEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// OperateUser holds the value of the operate_user edge.
	OperateUser *User `json:"operate_user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserCloseRecordEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// OperateUserOrErr returns the OperateUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserCloseRecordEdges) OperateUserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.OperateUser == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.OperateUser, nil
	}
	return nil, &NotLoadedError{edge: "operate_user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserCloseRecord) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usercloserecord.FieldID, usercloserecord.FieldCreatedBy, usercloserecord.FieldUpdatedBy, usercloserecord.FieldUserID, usercloserecord.FieldOperateUserID:
			values[i] = new(sql.NullInt64)
		case usercloserecord.FieldType:
			values[i] = new(sql.NullString)
		case usercloserecord.FieldCreatedAt, usercloserecord.FieldUpdatedAt, usercloserecord.FieldDeletedAt, usercloserecord.FieldRegisteredAt, usercloserecord.FieldClosedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserCloseRecord fields.
func (ucr *UserCloseRecord) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usercloserecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ucr.ID = int64(value.Int64)
		case usercloserecord.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ucr.CreatedBy = value.Int64
			}
		case usercloserecord.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ucr.UpdatedBy = value.Int64
			}
		case usercloserecord.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ucr.CreatedAt = value.Time
			}
		case usercloserecord.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ucr.UpdatedAt = value.Time
			}
		case usercloserecord.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ucr.DeletedAt = value.Time
			}
		case usercloserecord.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ucr.UserID = value.Int64
			}
		case usercloserecord.FieldRegisteredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field registered_at", values[i])
			} else if value.Valid {
				ucr.RegisteredAt = value.Time
			}
		case usercloserecord.FieldClosedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field closed_at", values[i])
			} else if value.Valid {
				ucr.ClosedAt = value.Time
			}
		case usercloserecord.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ucr.Type = enums.UserCloseType(value.String)
			}
		case usercloserecord.FieldOperateUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field operate_user_id", values[i])
			} else if value.Valid {
				ucr.OperateUserID = value.Int64
			}
		default:
			ucr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserCloseRecord.
// This includes values selected through modifiers, order, etc.
func (ucr *UserCloseRecord) Value(name string) (ent.Value, error) {
	return ucr.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserCloseRecord entity.
func (ucr *UserCloseRecord) QueryUser() *UserQuery {
	return NewUserCloseRecordClient(ucr.config).QueryUser(ucr)
}

// QueryOperateUser queries the "operate_user" edge of the UserCloseRecord entity.
func (ucr *UserCloseRecord) QueryOperateUser() *UserQuery {
	return NewUserCloseRecordClient(ucr.config).QueryOperateUser(ucr)
}

// Update returns a builder for updating this UserCloseRecord.
// Note that you need to call UserCloseRecord.Unwrap() before calling this method if this UserCloseRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (ucr *UserCloseRecord) Update() *UserCloseRecordUpdateOne {
	return NewUserCloseRecordClient(ucr.config).UpdateOne(ucr)
}

// Unwrap unwraps the UserCloseRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ucr *UserCloseRecord) Unwrap() *UserCloseRecord {
	_tx, ok := ucr.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: UserCloseRecord is not a transactional entity")
	}
	ucr.config.driver = _tx.drv
	return ucr
}

// String implements the fmt.Stringer.
func (ucr *UserCloseRecord) String() string {
	var builder strings.Builder
	builder.WriteString("UserCloseRecord(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ucr.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", ucr.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", ucr.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ucr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ucr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(ucr.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ucr.UserID))
	builder.WriteString(", ")
	builder.WriteString("registered_at=")
	builder.WriteString(ucr.RegisteredAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("closed_at=")
	builder.WriteString(ucr.ClosedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", ucr.Type))
	builder.WriteString(", ")
	builder.WriteString("operate_user_id=")
	builder.WriteString(fmt.Sprintf("%v", ucr.OperateUserID))
	builder.WriteByte(')')
	return builder.String()
}

// UserCloseRecords is a parsable slice of UserCloseRecord.
type UserCloseRecords []*UserCloseRecord
