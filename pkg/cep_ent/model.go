// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/model"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// Model is the model entity for the Model schema.
type Model struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建者 ID
	CreatedBy int64 `json:"created_by,string"`
	// 更新者 ID
	UpdatedBy int64 `json:"updated_by,string"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// 模型名称
	Name string `json:"name"`
	// 模型作者
	Author string `json:"author"`
	// 模型描述
	Description string `json:"description"`
	// 模型类型
	ModelType enums.Model `json:"model_type"`
	// 模型状态
	ModelStatus enums.ModelStatus `json:"model_status"`
	// 是否为官方模型
	IsOfficial bool `json:"is_official"`
	// 模型的总使用次数
	TotalUsage int `json:"total_usage"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ModelQuery when eager-loading is set.
	Edges        ModelEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ModelEdges holds the relations/edges for other nodes in the graph.
type ModelEdges struct {
	// ModelPrices holds the value of the model_prices edge.
	ModelPrices []*ModelPrice `json:"model_prices,omitempty"`
	// StarUser holds the value of the star_user edge.
	StarUser []*User `json:"star_user,omitempty"`
	// InvokeModelOrders holds the value of the invoke_model_orders edge.
	InvokeModelOrders []*InvokeModelOrder `json:"invoke_model_orders,omitempty"`
	// StarModel holds the value of the star_model edge.
	StarModel []*UserModel `json:"star_model,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ModelPricesOrErr returns the ModelPrices value or an error if the edge
// was not loaded in eager-loading.
func (e ModelEdges) ModelPricesOrErr() ([]*ModelPrice, error) {
	if e.loadedTypes[0] {
		return e.ModelPrices, nil
	}
	return nil, &NotLoadedError{edge: "model_prices"}
}

// StarUserOrErr returns the StarUser value or an error if the edge
// was not loaded in eager-loading.
func (e ModelEdges) StarUserOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.StarUser, nil
	}
	return nil, &NotLoadedError{edge: "star_user"}
}

// InvokeModelOrdersOrErr returns the InvokeModelOrders value or an error if the edge
// was not loaded in eager-loading.
func (e ModelEdges) InvokeModelOrdersOrErr() ([]*InvokeModelOrder, error) {
	if e.loadedTypes[2] {
		return e.InvokeModelOrders, nil
	}
	return nil, &NotLoadedError{edge: "invoke_model_orders"}
}

// StarModelOrErr returns the StarModel value or an error if the edge
// was not loaded in eager-loading.
func (e ModelEdges) StarModelOrErr() ([]*UserModel, error) {
	if e.loadedTypes[3] {
		return e.StarModel, nil
	}
	return nil, &NotLoadedError{edge: "star_model"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Model) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case model.FieldIsOfficial:
			values[i] = new(sql.NullBool)
		case model.FieldID, model.FieldCreatedBy, model.FieldUpdatedBy, model.FieldTotalUsage:
			values[i] = new(sql.NullInt64)
		case model.FieldName, model.FieldAuthor, model.FieldDescription, model.FieldModelType, model.FieldModelStatus:
			values[i] = new(sql.NullString)
		case model.FieldCreatedAt, model.FieldUpdatedAt, model.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Model fields.
func (m *Model) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case model.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int64(value.Int64)
		case model.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				m.CreatedBy = value.Int64
			}
		case model.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				m.UpdatedBy = value.Int64
			}
		case model.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case model.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				m.UpdatedAt = value.Time
			}
		case model.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				m.DeletedAt = value.Time
			}
		case model.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				m.Name = value.String
			}
		case model.FieldAuthor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author", values[i])
			} else if value.Valid {
				m.Author = value.String
			}
		case model.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				m.Description = value.String
			}
		case model.FieldModelType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model_type", values[i])
			} else if value.Valid {
				m.ModelType = enums.Model(value.String)
			}
		case model.FieldModelStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model_status", values[i])
			} else if value.Valid {
				m.ModelStatus = enums.ModelStatus(value.String)
			}
		case model.FieldIsOfficial:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_official", values[i])
			} else if value.Valid {
				m.IsOfficial = value.Bool
			}
		case model.FieldTotalUsage:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_usage", values[i])
			} else if value.Valid {
				m.TotalUsage = int(value.Int64)
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Model.
// This includes values selected through modifiers, order, etc.
func (m *Model) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryModelPrices queries the "model_prices" edge of the Model entity.
func (m *Model) QueryModelPrices() *ModelPriceQuery {
	return NewModelClient(m.config).QueryModelPrices(m)
}

// QueryStarUser queries the "star_user" edge of the Model entity.
func (m *Model) QueryStarUser() *UserQuery {
	return NewModelClient(m.config).QueryStarUser(m)
}

// QueryInvokeModelOrders queries the "invoke_model_orders" edge of the Model entity.
func (m *Model) QueryInvokeModelOrders() *InvokeModelOrderQuery {
	return NewModelClient(m.config).QueryInvokeModelOrders(m)
}

// QueryStarModel queries the "star_model" edge of the Model entity.
func (m *Model) QueryStarModel() *UserModelQuery {
	return NewModelClient(m.config).QueryStarModel(m)
}

// Update returns a builder for updating this Model.
// Note that you need to call Model.Unwrap() before calling this method if this Model
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Model) Update() *ModelUpdateOne {
	return NewModelClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Model entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Model) Unwrap() *Model {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: Model is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Model) String() string {
	var builder strings.Builder
	builder.WriteString("Model(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", m.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", m.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(m.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(m.Name)
	builder.WriteString(", ")
	builder.WriteString("author=")
	builder.WriteString(m.Author)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(m.Description)
	builder.WriteString(", ")
	builder.WriteString("model_type=")
	builder.WriteString(fmt.Sprintf("%v", m.ModelType))
	builder.WriteString(", ")
	builder.WriteString("model_status=")
	builder.WriteString(fmt.Sprintf("%v", m.ModelStatus))
	builder.WriteString(", ")
	builder.WriteString("is_official=")
	builder.WriteString(fmt.Sprintf("%v", m.IsOfficial))
	builder.WriteString(", ")
	builder.WriteString("total_usage=")
	builder.WriteString(fmt.Sprintf("%v", m.TotalUsage))
	builder.WriteByte(')')
	return builder.String()
}

// Models is a parsable slice of Model.
type Models []*Model
