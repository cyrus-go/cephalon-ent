// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/renewalagreement"
)

// RenewalAgreementDelete is the builder for deleting a RenewalAgreement entity.
type RenewalAgreementDelete struct {
	config
	hooks    []Hook
	mutation *RenewalAgreementMutation
}

// Where appends a list predicates to the RenewalAgreementDelete builder.
func (rad *RenewalAgreementDelete) Where(ps ...predicate.RenewalAgreement) *RenewalAgreementDelete {
	rad.mutation.Where(ps...)
	return rad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rad *RenewalAgreementDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rad.sqlExec, rad.mutation, rad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rad *RenewalAgreementDelete) ExecX(ctx context.Context) int {
	n, err := rad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rad *RenewalAgreementDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(renewalagreement.Table, sqlgraph.NewFieldSpec(renewalagreement.FieldID, field.TypeInt64))
	if ps := rad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rad.mutation.done = true
	return affected, err
}

// RenewalAgreementDeleteOne is the builder for deleting a single RenewalAgreement entity.
type RenewalAgreementDeleteOne struct {
	rad *RenewalAgreementDelete
}

// Where appends a list predicates to the RenewalAgreementDelete builder.
func (rado *RenewalAgreementDeleteOne) Where(ps ...predicate.RenewalAgreement) *RenewalAgreementDeleteOne {
	rado.rad.mutation.Where(ps...)
	return rado
}

// Exec executes the deletion query.
func (rado *RenewalAgreementDeleteOne) Exec(ctx context.Context) error {
	n, err := rado.rad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{renewalagreement.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rado *RenewalAgreementDeleteOne) ExecX(ctx context.Context) {
	if err := rado.Exec(ctx); err != nil {
		panic(err)
	}
}
