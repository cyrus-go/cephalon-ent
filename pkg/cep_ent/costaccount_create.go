// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/costaccount"
	"cephalon-ent/pkg/cep_ent/costbill"
	"cephalon-ent/pkg/cep_ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CostAccountCreate is the builder for creating a CostAccount entity.
type CostAccountCreate struct {
	config
	mutation *CostAccountMutation
	hooks    []Hook
}

// SetCreatedBy sets the "created_by" field.
func (cac *CostAccountCreate) SetCreatedBy(i int64) *CostAccountCreate {
	cac.mutation.SetCreatedBy(i)
	return cac
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cac *CostAccountCreate) SetNillableCreatedBy(i *int64) *CostAccountCreate {
	if i != nil {
		cac.SetCreatedBy(*i)
	}
	return cac
}

// SetUpdatedBy sets the "updated_by" field.
func (cac *CostAccountCreate) SetUpdatedBy(i int64) *CostAccountCreate {
	cac.mutation.SetUpdatedBy(i)
	return cac
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cac *CostAccountCreate) SetNillableUpdatedBy(i *int64) *CostAccountCreate {
	if i != nil {
		cac.SetUpdatedBy(*i)
	}
	return cac
}

// SetCreatedAt sets the "created_at" field.
func (cac *CostAccountCreate) SetCreatedAt(t time.Time) *CostAccountCreate {
	cac.mutation.SetCreatedAt(t)
	return cac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cac *CostAccountCreate) SetNillableCreatedAt(t *time.Time) *CostAccountCreate {
	if t != nil {
		cac.SetCreatedAt(*t)
	}
	return cac
}

// SetUpdatedAt sets the "updated_at" field.
func (cac *CostAccountCreate) SetUpdatedAt(t time.Time) *CostAccountCreate {
	cac.mutation.SetUpdatedAt(t)
	return cac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cac *CostAccountCreate) SetNillableUpdatedAt(t *time.Time) *CostAccountCreate {
	if t != nil {
		cac.SetUpdatedAt(*t)
	}
	return cac
}

// SetDeletedAt sets the "deleted_at" field.
func (cac *CostAccountCreate) SetDeletedAt(t time.Time) *CostAccountCreate {
	cac.mutation.SetDeletedAt(t)
	return cac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cac *CostAccountCreate) SetNillableDeletedAt(t *time.Time) *CostAccountCreate {
	if t != nil {
		cac.SetDeletedAt(*t)
	}
	return cac
}

// SetUserID sets the "user_id" field.
func (cac *CostAccountCreate) SetUserID(i int64) *CostAccountCreate {
	cac.mutation.SetUserID(i)
	return cac
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cac *CostAccountCreate) SetNillableUserID(i *int64) *CostAccountCreate {
	if i != nil {
		cac.SetUserID(*i)
	}
	return cac
}

// SetTotalCep sets the "total_cep" field.
func (cac *CostAccountCreate) SetTotalCep(i int64) *CostAccountCreate {
	cac.mutation.SetTotalCep(i)
	return cac
}

// SetNillableTotalCep sets the "total_cep" field if the given value is not nil.
func (cac *CostAccountCreate) SetNillableTotalCep(i *int64) *CostAccountCreate {
	if i != nil {
		cac.SetTotalCep(*i)
	}
	return cac
}

// SetSumTotalCep sets the "sum_total_cep" field.
func (cac *CostAccountCreate) SetSumTotalCep(i int64) *CostAccountCreate {
	cac.mutation.SetSumTotalCep(i)
	return cac
}

// SetNillableSumTotalCep sets the "sum_total_cep" field if the given value is not nil.
func (cac *CostAccountCreate) SetNillableSumTotalCep(i *int64) *CostAccountCreate {
	if i != nil {
		cac.SetSumTotalCep(*i)
	}
	return cac
}

// SetFrozenTotalCep sets the "frozen_total_cep" field.
func (cac *CostAccountCreate) SetFrozenTotalCep(i int64) *CostAccountCreate {
	cac.mutation.SetFrozenTotalCep(i)
	return cac
}

// SetNillableFrozenTotalCep sets the "frozen_total_cep" field if the given value is not nil.
func (cac *CostAccountCreate) SetNillableFrozenTotalCep(i *int64) *CostAccountCreate {
	if i != nil {
		cac.SetFrozenTotalCep(*i)
	}
	return cac
}

// SetPureCep sets the "pure_cep" field.
func (cac *CostAccountCreate) SetPureCep(i int64) *CostAccountCreate {
	cac.mutation.SetPureCep(i)
	return cac
}

// SetNillablePureCep sets the "pure_cep" field if the given value is not nil.
func (cac *CostAccountCreate) SetNillablePureCep(i *int64) *CostAccountCreate {
	if i != nil {
		cac.SetPureCep(*i)
	}
	return cac
}

// SetSumPureCep sets the "sum_pure_cep" field.
func (cac *CostAccountCreate) SetSumPureCep(i int64) *CostAccountCreate {
	cac.mutation.SetSumPureCep(i)
	return cac
}

// SetNillableSumPureCep sets the "sum_pure_cep" field if the given value is not nil.
func (cac *CostAccountCreate) SetNillableSumPureCep(i *int64) *CostAccountCreate {
	if i != nil {
		cac.SetSumPureCep(*i)
	}
	return cac
}

// SetFrozenPureCep sets the "frozen_pure_cep" field.
func (cac *CostAccountCreate) SetFrozenPureCep(i int64) *CostAccountCreate {
	cac.mutation.SetFrozenPureCep(i)
	return cac
}

// SetNillableFrozenPureCep sets the "frozen_pure_cep" field if the given value is not nil.
func (cac *CostAccountCreate) SetNillableFrozenPureCep(i *int64) *CostAccountCreate {
	if i != nil {
		cac.SetFrozenPureCep(*i)
	}
	return cac
}

// SetGiftCep sets the "gift_cep" field.
func (cac *CostAccountCreate) SetGiftCep(i int64) *CostAccountCreate {
	cac.mutation.SetGiftCep(i)
	return cac
}

// SetNillableGiftCep sets the "gift_cep" field if the given value is not nil.
func (cac *CostAccountCreate) SetNillableGiftCep(i *int64) *CostAccountCreate {
	if i != nil {
		cac.SetGiftCep(*i)
	}
	return cac
}

// SetSumGiftCep sets the "sum_gift_cep" field.
func (cac *CostAccountCreate) SetSumGiftCep(i int64) *CostAccountCreate {
	cac.mutation.SetSumGiftCep(i)
	return cac
}

// SetNillableSumGiftCep sets the "sum_gift_cep" field if the given value is not nil.
func (cac *CostAccountCreate) SetNillableSumGiftCep(i *int64) *CostAccountCreate {
	if i != nil {
		cac.SetSumGiftCep(*i)
	}
	return cac
}

// SetFrozenGiftCep sets the "frozen_gift_cep" field.
func (cac *CostAccountCreate) SetFrozenGiftCep(i int64) *CostAccountCreate {
	cac.mutation.SetFrozenGiftCep(i)
	return cac
}

// SetNillableFrozenGiftCep sets the "frozen_gift_cep" field if the given value is not nil.
func (cac *CostAccountCreate) SetNillableFrozenGiftCep(i *int64) *CostAccountCreate {
	if i != nil {
		cac.SetFrozenGiftCep(*i)
	}
	return cac
}

// SetID sets the "id" field.
func (cac *CostAccountCreate) SetID(i int64) *CostAccountCreate {
	cac.mutation.SetID(i)
	return cac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cac *CostAccountCreate) SetNillableID(i *int64) *CostAccountCreate {
	if i != nil {
		cac.SetID(*i)
	}
	return cac
}

// SetUser sets the "user" edge to the User entity.
func (cac *CostAccountCreate) SetUser(u *User) *CostAccountCreate {
	return cac.SetUserID(u.ID)
}

// AddCostBillIDs adds the "cost_bills" edge to the CostBill entity by IDs.
func (cac *CostAccountCreate) AddCostBillIDs(ids ...int64) *CostAccountCreate {
	cac.mutation.AddCostBillIDs(ids...)
	return cac
}

// AddCostBills adds the "cost_bills" edges to the CostBill entity.
func (cac *CostAccountCreate) AddCostBills(c ...*CostBill) *CostAccountCreate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cac.AddCostBillIDs(ids...)
}

// Mutation returns the CostAccountMutation object of the builder.
func (cac *CostAccountCreate) Mutation() *CostAccountMutation {
	return cac.mutation
}

// Save creates the CostAccount in the database.
func (cac *CostAccountCreate) Save(ctx context.Context) (*CostAccount, error) {
	cac.defaults()
	return withHooks(ctx, cac.sqlSave, cac.mutation, cac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cac *CostAccountCreate) SaveX(ctx context.Context) *CostAccount {
	v, err := cac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cac *CostAccountCreate) Exec(ctx context.Context) error {
	_, err := cac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cac *CostAccountCreate) ExecX(ctx context.Context) {
	if err := cac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cac *CostAccountCreate) defaults() {
	if _, ok := cac.mutation.CreatedBy(); !ok {
		v := costaccount.DefaultCreatedBy
		cac.mutation.SetCreatedBy(v)
	}
	if _, ok := cac.mutation.UpdatedBy(); !ok {
		v := costaccount.DefaultUpdatedBy
		cac.mutation.SetUpdatedBy(v)
	}
	if _, ok := cac.mutation.CreatedAt(); !ok {
		v := costaccount.DefaultCreatedAt()
		cac.mutation.SetCreatedAt(v)
	}
	if _, ok := cac.mutation.UpdatedAt(); !ok {
		v := costaccount.DefaultUpdatedAt()
		cac.mutation.SetUpdatedAt(v)
	}
	if _, ok := cac.mutation.DeletedAt(); !ok {
		v := costaccount.DefaultDeletedAt
		cac.mutation.SetDeletedAt(v)
	}
	if _, ok := cac.mutation.UserID(); !ok {
		v := costaccount.DefaultUserID
		cac.mutation.SetUserID(v)
	}
	if _, ok := cac.mutation.TotalCep(); !ok {
		v := costaccount.DefaultTotalCep
		cac.mutation.SetTotalCep(v)
	}
	if _, ok := cac.mutation.SumTotalCep(); !ok {
		v := costaccount.DefaultSumTotalCep
		cac.mutation.SetSumTotalCep(v)
	}
	if _, ok := cac.mutation.FrozenTotalCep(); !ok {
		v := costaccount.DefaultFrozenTotalCep
		cac.mutation.SetFrozenTotalCep(v)
	}
	if _, ok := cac.mutation.PureCep(); !ok {
		v := costaccount.DefaultPureCep
		cac.mutation.SetPureCep(v)
	}
	if _, ok := cac.mutation.SumPureCep(); !ok {
		v := costaccount.DefaultSumPureCep
		cac.mutation.SetSumPureCep(v)
	}
	if _, ok := cac.mutation.FrozenPureCep(); !ok {
		v := costaccount.DefaultFrozenPureCep
		cac.mutation.SetFrozenPureCep(v)
	}
	if _, ok := cac.mutation.GiftCep(); !ok {
		v := costaccount.DefaultGiftCep
		cac.mutation.SetGiftCep(v)
	}
	if _, ok := cac.mutation.SumGiftCep(); !ok {
		v := costaccount.DefaultSumGiftCep
		cac.mutation.SetSumGiftCep(v)
	}
	if _, ok := cac.mutation.FrozenGiftCep(); !ok {
		v := costaccount.DefaultFrozenGiftCep
		cac.mutation.SetFrozenGiftCep(v)
	}
	if _, ok := cac.mutation.ID(); !ok {
		v := costaccount.DefaultID()
		cac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cac *CostAccountCreate) check() error {
	if _, ok := cac.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "CostAccount.created_by"`)}
	}
	if _, ok := cac.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "CostAccount.updated_by"`)}
	}
	if _, ok := cac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "CostAccount.created_at"`)}
	}
	if _, ok := cac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "CostAccount.updated_at"`)}
	}
	if _, ok := cac.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "CostAccount.deleted_at"`)}
	}
	if _, ok := cac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "CostAccount.user_id"`)}
	}
	if _, ok := cac.mutation.TotalCep(); !ok {
		return &ValidationError{Name: "total_cep", err: errors.New(`cep_ent: missing required field "CostAccount.total_cep"`)}
	}
	if _, ok := cac.mutation.SumTotalCep(); !ok {
		return &ValidationError{Name: "sum_total_cep", err: errors.New(`cep_ent: missing required field "CostAccount.sum_total_cep"`)}
	}
	if _, ok := cac.mutation.FrozenTotalCep(); !ok {
		return &ValidationError{Name: "frozen_total_cep", err: errors.New(`cep_ent: missing required field "CostAccount.frozen_total_cep"`)}
	}
	if _, ok := cac.mutation.PureCep(); !ok {
		return &ValidationError{Name: "pure_cep", err: errors.New(`cep_ent: missing required field "CostAccount.pure_cep"`)}
	}
	if _, ok := cac.mutation.SumPureCep(); !ok {
		return &ValidationError{Name: "sum_pure_cep", err: errors.New(`cep_ent: missing required field "CostAccount.sum_pure_cep"`)}
	}
	if _, ok := cac.mutation.FrozenPureCep(); !ok {
		return &ValidationError{Name: "frozen_pure_cep", err: errors.New(`cep_ent: missing required field "CostAccount.frozen_pure_cep"`)}
	}
	if _, ok := cac.mutation.GiftCep(); !ok {
		return &ValidationError{Name: "gift_cep", err: errors.New(`cep_ent: missing required field "CostAccount.gift_cep"`)}
	}
	if _, ok := cac.mutation.SumGiftCep(); !ok {
		return &ValidationError{Name: "sum_gift_cep", err: errors.New(`cep_ent: missing required field "CostAccount.sum_gift_cep"`)}
	}
	if _, ok := cac.mutation.FrozenGiftCep(); !ok {
		return &ValidationError{Name: "frozen_gift_cep", err: errors.New(`cep_ent: missing required field "CostAccount.frozen_gift_cep"`)}
	}
	if _, ok := cac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "CostAccount.user"`)}
	}
	return nil
}

func (cac *CostAccountCreate) sqlSave(ctx context.Context) (*CostAccount, error) {
	if err := cac.check(); err != nil {
		return nil, err
	}
	_node, _spec := cac.createSpec()
	if err := sqlgraph.CreateNode(ctx, cac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	cac.mutation.id = &_node.ID
	cac.mutation.done = true
	return _node, nil
}

func (cac *CostAccountCreate) createSpec() (*CostAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &CostAccount{config: cac.config}
		_spec = sqlgraph.NewCreateSpec(costaccount.Table, sqlgraph.NewFieldSpec(costaccount.FieldID, field.TypeInt64))
	)
	if id, ok := cac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cac.mutation.CreatedBy(); ok {
		_spec.SetField(costaccount.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := cac.mutation.UpdatedBy(); ok {
		_spec.SetField(costaccount.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := cac.mutation.CreatedAt(); ok {
		_spec.SetField(costaccount.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cac.mutation.UpdatedAt(); ok {
		_spec.SetField(costaccount.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cac.mutation.DeletedAt(); ok {
		_spec.SetField(costaccount.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := cac.mutation.TotalCep(); ok {
		_spec.SetField(costaccount.FieldTotalCep, field.TypeInt64, value)
		_node.TotalCep = value
	}
	if value, ok := cac.mutation.SumTotalCep(); ok {
		_spec.SetField(costaccount.FieldSumTotalCep, field.TypeInt64, value)
		_node.SumTotalCep = value
	}
	if value, ok := cac.mutation.FrozenTotalCep(); ok {
		_spec.SetField(costaccount.FieldFrozenTotalCep, field.TypeInt64, value)
		_node.FrozenTotalCep = value
	}
	if value, ok := cac.mutation.PureCep(); ok {
		_spec.SetField(costaccount.FieldPureCep, field.TypeInt64, value)
		_node.PureCep = value
	}
	if value, ok := cac.mutation.SumPureCep(); ok {
		_spec.SetField(costaccount.FieldSumPureCep, field.TypeInt64, value)
		_node.SumPureCep = value
	}
	if value, ok := cac.mutation.FrozenPureCep(); ok {
		_spec.SetField(costaccount.FieldFrozenPureCep, field.TypeInt64, value)
		_node.FrozenPureCep = value
	}
	if value, ok := cac.mutation.GiftCep(); ok {
		_spec.SetField(costaccount.FieldGiftCep, field.TypeInt64, value)
		_node.GiftCep = value
	}
	if value, ok := cac.mutation.SumGiftCep(); ok {
		_spec.SetField(costaccount.FieldSumGiftCep, field.TypeInt64, value)
		_node.SumGiftCep = value
	}
	if value, ok := cac.mutation.FrozenGiftCep(); ok {
		_spec.SetField(costaccount.FieldFrozenGiftCep, field.TypeInt64, value)
		_node.FrozenGiftCep = value
	}
	if nodes := cac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   costaccount.UserTable,
			Columns: []string{costaccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cac.mutation.CostBillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   costaccount.CostBillsTable,
			Columns: []string{costaccount.CostBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costbill.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CostAccountCreateBulk is the builder for creating many CostAccount entities in bulk.
type CostAccountCreateBulk struct {
	config
	builders []*CostAccountCreate
}

// Save creates the CostAccount entities in the database.
func (cacb *CostAccountCreateBulk) Save(ctx context.Context) ([]*CostAccount, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cacb.builders))
	nodes := make([]*CostAccount, len(cacb.builders))
	mutators := make([]Mutator, len(cacb.builders))
	for i := range cacb.builders {
		func(i int, root context.Context) {
			builder := cacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CostAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cacb *CostAccountCreateBulk) SaveX(ctx context.Context) []*CostAccount {
	v, err := cacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cacb *CostAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := cacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cacb *CostAccountCreateBulk) ExecX(ctx context.Context) {
	if err := cacb.Exec(ctx); err != nil {
		panic(err)
	}
}
