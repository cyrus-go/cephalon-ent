// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lotto"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottoprize"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottorecord"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// LottoPrizeUpdate is the builder for updating LottoPrize entities.
type LottoPrizeUpdate struct {
	config
	hooks     []Hook
	mutation  *LottoPrizeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the LottoPrizeUpdate builder.
func (lpu *LottoPrizeUpdate) Where(ps ...predicate.LottoPrize) *LottoPrizeUpdate {
	lpu.mutation.Where(ps...)
	return lpu
}

// SetCreatedBy sets the "created_by" field.
func (lpu *LottoPrizeUpdate) SetCreatedBy(i int64) *LottoPrizeUpdate {
	lpu.mutation.ResetCreatedBy()
	lpu.mutation.SetCreatedBy(i)
	return lpu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (lpu *LottoPrizeUpdate) SetNillableCreatedBy(i *int64) *LottoPrizeUpdate {
	if i != nil {
		lpu.SetCreatedBy(*i)
	}
	return lpu
}

// AddCreatedBy adds i to the "created_by" field.
func (lpu *LottoPrizeUpdate) AddCreatedBy(i int64) *LottoPrizeUpdate {
	lpu.mutation.AddCreatedBy(i)
	return lpu
}

// SetUpdatedBy sets the "updated_by" field.
func (lpu *LottoPrizeUpdate) SetUpdatedBy(i int64) *LottoPrizeUpdate {
	lpu.mutation.ResetUpdatedBy()
	lpu.mutation.SetUpdatedBy(i)
	return lpu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (lpu *LottoPrizeUpdate) SetNillableUpdatedBy(i *int64) *LottoPrizeUpdate {
	if i != nil {
		lpu.SetUpdatedBy(*i)
	}
	return lpu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (lpu *LottoPrizeUpdate) AddUpdatedBy(i int64) *LottoPrizeUpdate {
	lpu.mutation.AddUpdatedBy(i)
	return lpu
}

// SetUpdatedAt sets the "updated_at" field.
func (lpu *LottoPrizeUpdate) SetUpdatedAt(t time.Time) *LottoPrizeUpdate {
	lpu.mutation.SetUpdatedAt(t)
	return lpu
}

// SetDeletedAt sets the "deleted_at" field.
func (lpu *LottoPrizeUpdate) SetDeletedAt(t time.Time) *LottoPrizeUpdate {
	lpu.mutation.SetDeletedAt(t)
	return lpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lpu *LottoPrizeUpdate) SetNillableDeletedAt(t *time.Time) *LottoPrizeUpdate {
	if t != nil {
		lpu.SetDeletedAt(*t)
	}
	return lpu
}

// SetLottoID sets the "lotto_id" field.
func (lpu *LottoPrizeUpdate) SetLottoID(i int64) *LottoPrizeUpdate {
	lpu.mutation.SetLottoID(i)
	return lpu
}

// SetNillableLottoID sets the "lotto_id" field if the given value is not nil.
func (lpu *LottoPrizeUpdate) SetNillableLottoID(i *int64) *LottoPrizeUpdate {
	if i != nil {
		lpu.SetLottoID(*i)
	}
	return lpu
}

// SetLevelName sets the "level_name" field.
func (lpu *LottoPrizeUpdate) SetLevelName(s string) *LottoPrizeUpdate {
	lpu.mutation.SetLevelName(s)
	return lpu
}

// SetNillableLevelName sets the "level_name" field if the given value is not nil.
func (lpu *LottoPrizeUpdate) SetNillableLevelName(s *string) *LottoPrizeUpdate {
	if s != nil {
		lpu.SetLevelName(*s)
	}
	return lpu
}

// SetWeight sets the "weight" field.
func (lpu *LottoPrizeUpdate) SetWeight(i int64) *LottoPrizeUpdate {
	lpu.mutation.ResetWeight()
	lpu.mutation.SetWeight(i)
	return lpu
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (lpu *LottoPrizeUpdate) SetNillableWeight(i *int64) *LottoPrizeUpdate {
	if i != nil {
		lpu.SetWeight(*i)
	}
	return lpu
}

// AddWeight adds i to the "weight" field.
func (lpu *LottoPrizeUpdate) AddWeight(i int64) *LottoPrizeUpdate {
	lpu.mutation.AddWeight(i)
	return lpu
}

// SetName sets the "name" field.
func (lpu *LottoPrizeUpdate) SetName(s string) *LottoPrizeUpdate {
	lpu.mutation.SetName(s)
	return lpu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (lpu *LottoPrizeUpdate) SetNillableName(s *string) *LottoPrizeUpdate {
	if s != nil {
		lpu.SetName(*s)
	}
	return lpu
}

// SetStatus sets the "status" field.
func (lpu *LottoPrizeUpdate) SetStatus(l lottoprize.Status) *LottoPrizeUpdate {
	lpu.mutation.SetStatus(l)
	return lpu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (lpu *LottoPrizeUpdate) SetNillableStatus(l *lottoprize.Status) *LottoPrizeUpdate {
	if l != nil {
		lpu.SetStatus(*l)
	}
	return lpu
}

// SetLotto sets the "lotto" edge to the Lotto entity.
func (lpu *LottoPrizeUpdate) SetLotto(l *Lotto) *LottoPrizeUpdate {
	return lpu.SetLottoID(l.ID)
}

// AddLottoRecordIDs adds the "lotto_records" edge to the LottoRecord entity by IDs.
func (lpu *LottoPrizeUpdate) AddLottoRecordIDs(ids ...int64) *LottoPrizeUpdate {
	lpu.mutation.AddLottoRecordIDs(ids...)
	return lpu
}

// AddLottoRecords adds the "lotto_records" edges to the LottoRecord entity.
func (lpu *LottoPrizeUpdate) AddLottoRecords(l ...*LottoRecord) *LottoPrizeUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lpu.AddLottoRecordIDs(ids...)
}

// Mutation returns the LottoPrizeMutation object of the builder.
func (lpu *LottoPrizeUpdate) Mutation() *LottoPrizeMutation {
	return lpu.mutation
}

// ClearLotto clears the "lotto" edge to the Lotto entity.
func (lpu *LottoPrizeUpdate) ClearLotto() *LottoPrizeUpdate {
	lpu.mutation.ClearLotto()
	return lpu
}

// ClearLottoRecords clears all "lotto_records" edges to the LottoRecord entity.
func (lpu *LottoPrizeUpdate) ClearLottoRecords() *LottoPrizeUpdate {
	lpu.mutation.ClearLottoRecords()
	return lpu
}

// RemoveLottoRecordIDs removes the "lotto_records" edge to LottoRecord entities by IDs.
func (lpu *LottoPrizeUpdate) RemoveLottoRecordIDs(ids ...int64) *LottoPrizeUpdate {
	lpu.mutation.RemoveLottoRecordIDs(ids...)
	return lpu
}

// RemoveLottoRecords removes "lotto_records" edges to LottoRecord entities.
func (lpu *LottoPrizeUpdate) RemoveLottoRecords(l ...*LottoRecord) *LottoPrizeUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lpu.RemoveLottoRecordIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lpu *LottoPrizeUpdate) Save(ctx context.Context) (int, error) {
	lpu.defaults()
	return withHooks(ctx, lpu.sqlSave, lpu.mutation, lpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lpu *LottoPrizeUpdate) SaveX(ctx context.Context) int {
	affected, err := lpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lpu *LottoPrizeUpdate) Exec(ctx context.Context) error {
	_, err := lpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpu *LottoPrizeUpdate) ExecX(ctx context.Context) {
	if err := lpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lpu *LottoPrizeUpdate) defaults() {
	if _, ok := lpu.mutation.UpdatedAt(); !ok {
		v := lottoprize.UpdateDefaultUpdatedAt()
		lpu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lpu *LottoPrizeUpdate) check() error {
	if v, ok := lpu.mutation.Status(); ok {
		if err := lottoprize.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "LottoPrize.status": %w`, err)}
		}
	}
	if _, ok := lpu.mutation.LottoID(); lpu.mutation.LottoCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "LottoPrize.lotto"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (lpu *LottoPrizeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LottoPrizeUpdate {
	lpu.modifiers = append(lpu.modifiers, modifiers...)
	return lpu
}

func (lpu *LottoPrizeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(lottoprize.Table, lottoprize.Columns, sqlgraph.NewFieldSpec(lottoprize.FieldID, field.TypeInt64))
	if ps := lpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lpu.mutation.CreatedBy(); ok {
		_spec.SetField(lottoprize.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := lpu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(lottoprize.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := lpu.mutation.UpdatedBy(); ok {
		_spec.SetField(lottoprize.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := lpu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(lottoprize.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := lpu.mutation.UpdatedAt(); ok {
		_spec.SetField(lottoprize.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lpu.mutation.DeletedAt(); ok {
		_spec.SetField(lottoprize.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := lpu.mutation.LevelName(); ok {
		_spec.SetField(lottoprize.FieldLevelName, field.TypeString, value)
	}
	if value, ok := lpu.mutation.Weight(); ok {
		_spec.SetField(lottoprize.FieldWeight, field.TypeInt64, value)
	}
	if value, ok := lpu.mutation.AddedWeight(); ok {
		_spec.AddField(lottoprize.FieldWeight, field.TypeInt64, value)
	}
	if value, ok := lpu.mutation.Name(); ok {
		_spec.SetField(lottoprize.FieldName, field.TypeString, value)
	}
	if value, ok := lpu.mutation.Status(); ok {
		_spec.SetField(lottoprize.FieldStatus, field.TypeEnum, value)
	}
	if lpu.mutation.LottoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottoprize.LottoTable,
			Columns: []string{lottoprize.LottoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lotto.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lpu.mutation.LottoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottoprize.LottoTable,
			Columns: []string{lottoprize.LottoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lotto.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lpu.mutation.LottoRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lottoprize.LottoRecordsTable,
			Columns: []string{lottoprize.LottoRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottorecord.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lpu.mutation.RemovedLottoRecordsIDs(); len(nodes) > 0 && !lpu.mutation.LottoRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lottoprize.LottoRecordsTable,
			Columns: []string{lottoprize.LottoRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottorecord.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lpu.mutation.LottoRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lottoprize.LottoRecordsTable,
			Columns: []string{lottoprize.LottoRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottorecord.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(lpu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, lpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lottoprize.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lpu.mutation.done = true
	return n, nil
}

// LottoPrizeUpdateOne is the builder for updating a single LottoPrize entity.
type LottoPrizeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *LottoPrizeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedBy sets the "created_by" field.
func (lpuo *LottoPrizeUpdateOne) SetCreatedBy(i int64) *LottoPrizeUpdateOne {
	lpuo.mutation.ResetCreatedBy()
	lpuo.mutation.SetCreatedBy(i)
	return lpuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (lpuo *LottoPrizeUpdateOne) SetNillableCreatedBy(i *int64) *LottoPrizeUpdateOne {
	if i != nil {
		lpuo.SetCreatedBy(*i)
	}
	return lpuo
}

// AddCreatedBy adds i to the "created_by" field.
func (lpuo *LottoPrizeUpdateOne) AddCreatedBy(i int64) *LottoPrizeUpdateOne {
	lpuo.mutation.AddCreatedBy(i)
	return lpuo
}

// SetUpdatedBy sets the "updated_by" field.
func (lpuo *LottoPrizeUpdateOne) SetUpdatedBy(i int64) *LottoPrizeUpdateOne {
	lpuo.mutation.ResetUpdatedBy()
	lpuo.mutation.SetUpdatedBy(i)
	return lpuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (lpuo *LottoPrizeUpdateOne) SetNillableUpdatedBy(i *int64) *LottoPrizeUpdateOne {
	if i != nil {
		lpuo.SetUpdatedBy(*i)
	}
	return lpuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (lpuo *LottoPrizeUpdateOne) AddUpdatedBy(i int64) *LottoPrizeUpdateOne {
	lpuo.mutation.AddUpdatedBy(i)
	return lpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (lpuo *LottoPrizeUpdateOne) SetUpdatedAt(t time.Time) *LottoPrizeUpdateOne {
	lpuo.mutation.SetUpdatedAt(t)
	return lpuo
}

// SetDeletedAt sets the "deleted_at" field.
func (lpuo *LottoPrizeUpdateOne) SetDeletedAt(t time.Time) *LottoPrizeUpdateOne {
	lpuo.mutation.SetDeletedAt(t)
	return lpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lpuo *LottoPrizeUpdateOne) SetNillableDeletedAt(t *time.Time) *LottoPrizeUpdateOne {
	if t != nil {
		lpuo.SetDeletedAt(*t)
	}
	return lpuo
}

// SetLottoID sets the "lotto_id" field.
func (lpuo *LottoPrizeUpdateOne) SetLottoID(i int64) *LottoPrizeUpdateOne {
	lpuo.mutation.SetLottoID(i)
	return lpuo
}

// SetNillableLottoID sets the "lotto_id" field if the given value is not nil.
func (lpuo *LottoPrizeUpdateOne) SetNillableLottoID(i *int64) *LottoPrizeUpdateOne {
	if i != nil {
		lpuo.SetLottoID(*i)
	}
	return lpuo
}

// SetLevelName sets the "level_name" field.
func (lpuo *LottoPrizeUpdateOne) SetLevelName(s string) *LottoPrizeUpdateOne {
	lpuo.mutation.SetLevelName(s)
	return lpuo
}

// SetNillableLevelName sets the "level_name" field if the given value is not nil.
func (lpuo *LottoPrizeUpdateOne) SetNillableLevelName(s *string) *LottoPrizeUpdateOne {
	if s != nil {
		lpuo.SetLevelName(*s)
	}
	return lpuo
}

// SetWeight sets the "weight" field.
func (lpuo *LottoPrizeUpdateOne) SetWeight(i int64) *LottoPrizeUpdateOne {
	lpuo.mutation.ResetWeight()
	lpuo.mutation.SetWeight(i)
	return lpuo
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (lpuo *LottoPrizeUpdateOne) SetNillableWeight(i *int64) *LottoPrizeUpdateOne {
	if i != nil {
		lpuo.SetWeight(*i)
	}
	return lpuo
}

// AddWeight adds i to the "weight" field.
func (lpuo *LottoPrizeUpdateOne) AddWeight(i int64) *LottoPrizeUpdateOne {
	lpuo.mutation.AddWeight(i)
	return lpuo
}

// SetName sets the "name" field.
func (lpuo *LottoPrizeUpdateOne) SetName(s string) *LottoPrizeUpdateOne {
	lpuo.mutation.SetName(s)
	return lpuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (lpuo *LottoPrizeUpdateOne) SetNillableName(s *string) *LottoPrizeUpdateOne {
	if s != nil {
		lpuo.SetName(*s)
	}
	return lpuo
}

// SetStatus sets the "status" field.
func (lpuo *LottoPrizeUpdateOne) SetStatus(l lottoprize.Status) *LottoPrizeUpdateOne {
	lpuo.mutation.SetStatus(l)
	return lpuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (lpuo *LottoPrizeUpdateOne) SetNillableStatus(l *lottoprize.Status) *LottoPrizeUpdateOne {
	if l != nil {
		lpuo.SetStatus(*l)
	}
	return lpuo
}

// SetLotto sets the "lotto" edge to the Lotto entity.
func (lpuo *LottoPrizeUpdateOne) SetLotto(l *Lotto) *LottoPrizeUpdateOne {
	return lpuo.SetLottoID(l.ID)
}

// AddLottoRecordIDs adds the "lotto_records" edge to the LottoRecord entity by IDs.
func (lpuo *LottoPrizeUpdateOne) AddLottoRecordIDs(ids ...int64) *LottoPrizeUpdateOne {
	lpuo.mutation.AddLottoRecordIDs(ids...)
	return lpuo
}

// AddLottoRecords adds the "lotto_records" edges to the LottoRecord entity.
func (lpuo *LottoPrizeUpdateOne) AddLottoRecords(l ...*LottoRecord) *LottoPrizeUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lpuo.AddLottoRecordIDs(ids...)
}

// Mutation returns the LottoPrizeMutation object of the builder.
func (lpuo *LottoPrizeUpdateOne) Mutation() *LottoPrizeMutation {
	return lpuo.mutation
}

// ClearLotto clears the "lotto" edge to the Lotto entity.
func (lpuo *LottoPrizeUpdateOne) ClearLotto() *LottoPrizeUpdateOne {
	lpuo.mutation.ClearLotto()
	return lpuo
}

// ClearLottoRecords clears all "lotto_records" edges to the LottoRecord entity.
func (lpuo *LottoPrizeUpdateOne) ClearLottoRecords() *LottoPrizeUpdateOne {
	lpuo.mutation.ClearLottoRecords()
	return lpuo
}

// RemoveLottoRecordIDs removes the "lotto_records" edge to LottoRecord entities by IDs.
func (lpuo *LottoPrizeUpdateOne) RemoveLottoRecordIDs(ids ...int64) *LottoPrizeUpdateOne {
	lpuo.mutation.RemoveLottoRecordIDs(ids...)
	return lpuo
}

// RemoveLottoRecords removes "lotto_records" edges to LottoRecord entities.
func (lpuo *LottoPrizeUpdateOne) RemoveLottoRecords(l ...*LottoRecord) *LottoPrizeUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lpuo.RemoveLottoRecordIDs(ids...)
}

// Where appends a list predicates to the LottoPrizeUpdate builder.
func (lpuo *LottoPrizeUpdateOne) Where(ps ...predicate.LottoPrize) *LottoPrizeUpdateOne {
	lpuo.mutation.Where(ps...)
	return lpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lpuo *LottoPrizeUpdateOne) Select(field string, fields ...string) *LottoPrizeUpdateOne {
	lpuo.fields = append([]string{field}, fields...)
	return lpuo
}

// Save executes the query and returns the updated LottoPrize entity.
func (lpuo *LottoPrizeUpdateOne) Save(ctx context.Context) (*LottoPrize, error) {
	lpuo.defaults()
	return withHooks(ctx, lpuo.sqlSave, lpuo.mutation, lpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lpuo *LottoPrizeUpdateOne) SaveX(ctx context.Context) *LottoPrize {
	node, err := lpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lpuo *LottoPrizeUpdateOne) Exec(ctx context.Context) error {
	_, err := lpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpuo *LottoPrizeUpdateOne) ExecX(ctx context.Context) {
	if err := lpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lpuo *LottoPrizeUpdateOne) defaults() {
	if _, ok := lpuo.mutation.UpdatedAt(); !ok {
		v := lottoprize.UpdateDefaultUpdatedAt()
		lpuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lpuo *LottoPrizeUpdateOne) check() error {
	if v, ok := lpuo.mutation.Status(); ok {
		if err := lottoprize.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "LottoPrize.status": %w`, err)}
		}
	}
	if _, ok := lpuo.mutation.LottoID(); lpuo.mutation.LottoCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "LottoPrize.lotto"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (lpuo *LottoPrizeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LottoPrizeUpdateOne {
	lpuo.modifiers = append(lpuo.modifiers, modifiers...)
	return lpuo
}

func (lpuo *LottoPrizeUpdateOne) sqlSave(ctx context.Context) (_node *LottoPrize, err error) {
	if err := lpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(lottoprize.Table, lottoprize.Columns, sqlgraph.NewFieldSpec(lottoprize.FieldID, field.TypeInt64))
	id, ok := lpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "LottoPrize.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lottoprize.FieldID)
		for _, f := range fields {
			if !lottoprize.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != lottoprize.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lpuo.mutation.CreatedBy(); ok {
		_spec.SetField(lottoprize.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := lpuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(lottoprize.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := lpuo.mutation.UpdatedBy(); ok {
		_spec.SetField(lottoprize.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := lpuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(lottoprize.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := lpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(lottoprize.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lpuo.mutation.DeletedAt(); ok {
		_spec.SetField(lottoprize.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := lpuo.mutation.LevelName(); ok {
		_spec.SetField(lottoprize.FieldLevelName, field.TypeString, value)
	}
	if value, ok := lpuo.mutation.Weight(); ok {
		_spec.SetField(lottoprize.FieldWeight, field.TypeInt64, value)
	}
	if value, ok := lpuo.mutation.AddedWeight(); ok {
		_spec.AddField(lottoprize.FieldWeight, field.TypeInt64, value)
	}
	if value, ok := lpuo.mutation.Name(); ok {
		_spec.SetField(lottoprize.FieldName, field.TypeString, value)
	}
	if value, ok := lpuo.mutation.Status(); ok {
		_spec.SetField(lottoprize.FieldStatus, field.TypeEnum, value)
	}
	if lpuo.mutation.LottoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottoprize.LottoTable,
			Columns: []string{lottoprize.LottoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lotto.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lpuo.mutation.LottoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottoprize.LottoTable,
			Columns: []string{lottoprize.LottoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lotto.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lpuo.mutation.LottoRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lottoprize.LottoRecordsTable,
			Columns: []string{lottoprize.LottoRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottorecord.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lpuo.mutation.RemovedLottoRecordsIDs(); len(nodes) > 0 && !lpuo.mutation.LottoRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lottoprize.LottoRecordsTable,
			Columns: []string{lottoprize.LottoRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottorecord.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lpuo.mutation.LottoRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lottoprize.LottoRecordsTable,
			Columns: []string{lottoprize.LottoRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lottorecord.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(lpuo.modifiers...)
	_node = &LottoPrize{config: lpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lottoprize.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lpuo.mutation.done = true
	return _node, nil
}
