// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/device"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/devicereboottime"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// DeviceRebootTimeUpdate is the builder for updating DeviceRebootTime entities.
type DeviceRebootTimeUpdate struct {
	config
	hooks     []Hook
	mutation  *DeviceRebootTimeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DeviceRebootTimeUpdate builder.
func (drtu *DeviceRebootTimeUpdate) Where(ps ...predicate.DeviceRebootTime) *DeviceRebootTimeUpdate {
	drtu.mutation.Where(ps...)
	return drtu
}

// SetCreatedBy sets the "created_by" field.
func (drtu *DeviceRebootTimeUpdate) SetCreatedBy(i int64) *DeviceRebootTimeUpdate {
	drtu.mutation.ResetCreatedBy()
	drtu.mutation.SetCreatedBy(i)
	return drtu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (drtu *DeviceRebootTimeUpdate) SetNillableCreatedBy(i *int64) *DeviceRebootTimeUpdate {
	if i != nil {
		drtu.SetCreatedBy(*i)
	}
	return drtu
}

// AddCreatedBy adds i to the "created_by" field.
func (drtu *DeviceRebootTimeUpdate) AddCreatedBy(i int64) *DeviceRebootTimeUpdate {
	drtu.mutation.AddCreatedBy(i)
	return drtu
}

// SetUpdatedBy sets the "updated_by" field.
func (drtu *DeviceRebootTimeUpdate) SetUpdatedBy(i int64) *DeviceRebootTimeUpdate {
	drtu.mutation.ResetUpdatedBy()
	drtu.mutation.SetUpdatedBy(i)
	return drtu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (drtu *DeviceRebootTimeUpdate) SetNillableUpdatedBy(i *int64) *DeviceRebootTimeUpdate {
	if i != nil {
		drtu.SetUpdatedBy(*i)
	}
	return drtu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (drtu *DeviceRebootTimeUpdate) AddUpdatedBy(i int64) *DeviceRebootTimeUpdate {
	drtu.mutation.AddUpdatedBy(i)
	return drtu
}

// SetUpdatedAt sets the "updated_at" field.
func (drtu *DeviceRebootTimeUpdate) SetUpdatedAt(t time.Time) *DeviceRebootTimeUpdate {
	drtu.mutation.SetUpdatedAt(t)
	return drtu
}

// SetDeletedAt sets the "deleted_at" field.
func (drtu *DeviceRebootTimeUpdate) SetDeletedAt(t time.Time) *DeviceRebootTimeUpdate {
	drtu.mutation.SetDeletedAt(t)
	return drtu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (drtu *DeviceRebootTimeUpdate) SetNillableDeletedAt(t *time.Time) *DeviceRebootTimeUpdate {
	if t != nil {
		drtu.SetDeletedAt(*t)
	}
	return drtu
}

// SetDeviceID sets the "device_id" field.
func (drtu *DeviceRebootTimeUpdate) SetDeviceID(i int64) *DeviceRebootTimeUpdate {
	drtu.mutation.SetDeviceID(i)
	return drtu
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (drtu *DeviceRebootTimeUpdate) SetNillableDeviceID(i *int64) *DeviceRebootTimeUpdate {
	if i != nil {
		drtu.SetDeviceID(*i)
	}
	return drtu
}

// SetStartTime sets the "start_time" field.
func (drtu *DeviceRebootTimeUpdate) SetStartTime(t time.Time) *DeviceRebootTimeUpdate {
	drtu.mutation.SetStartTime(t)
	return drtu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (drtu *DeviceRebootTimeUpdate) SetNillableStartTime(t *time.Time) *DeviceRebootTimeUpdate {
	if t != nil {
		drtu.SetStartTime(*t)
	}
	return drtu
}

// SetEndTime sets the "end_time" field.
func (drtu *DeviceRebootTimeUpdate) SetEndTime(t time.Time) *DeviceRebootTimeUpdate {
	drtu.mutation.SetEndTime(t)
	return drtu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (drtu *DeviceRebootTimeUpdate) SetNillableEndTime(t *time.Time) *DeviceRebootTimeUpdate {
	if t != nil {
		drtu.SetEndTime(*t)
	}
	return drtu
}

// SetOnlineTime sets the "online_time" field.
func (drtu *DeviceRebootTimeUpdate) SetOnlineTime(s string) *DeviceRebootTimeUpdate {
	drtu.mutation.SetOnlineTime(s)
	return drtu
}

// SetNillableOnlineTime sets the "online_time" field if the given value is not nil.
func (drtu *DeviceRebootTimeUpdate) SetNillableOnlineTime(s *string) *DeviceRebootTimeUpdate {
	if s != nil {
		drtu.SetOnlineTime(*s)
	}
	return drtu
}

// SetOfflineTime sets the "offline_time" field.
func (drtu *DeviceRebootTimeUpdate) SetOfflineTime(s string) *DeviceRebootTimeUpdate {
	drtu.mutation.SetOfflineTime(s)
	return drtu
}

// SetNillableOfflineTime sets the "offline_time" field if the given value is not nil.
func (drtu *DeviceRebootTimeUpdate) SetNillableOfflineTime(s *string) *DeviceRebootTimeUpdate {
	if s != nil {
		drtu.SetOfflineTime(*s)
	}
	return drtu
}

// SetDevice sets the "device" edge to the Device entity.
func (drtu *DeviceRebootTimeUpdate) SetDevice(d *Device) *DeviceRebootTimeUpdate {
	return drtu.SetDeviceID(d.ID)
}

// Mutation returns the DeviceRebootTimeMutation object of the builder.
func (drtu *DeviceRebootTimeUpdate) Mutation() *DeviceRebootTimeMutation {
	return drtu.mutation
}

// ClearDevice clears the "device" edge to the Device entity.
func (drtu *DeviceRebootTimeUpdate) ClearDevice() *DeviceRebootTimeUpdate {
	drtu.mutation.ClearDevice()
	return drtu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (drtu *DeviceRebootTimeUpdate) Save(ctx context.Context) (int, error) {
	drtu.defaults()
	return withHooks(ctx, drtu.sqlSave, drtu.mutation, drtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (drtu *DeviceRebootTimeUpdate) SaveX(ctx context.Context) int {
	affected, err := drtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (drtu *DeviceRebootTimeUpdate) Exec(ctx context.Context) error {
	_, err := drtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drtu *DeviceRebootTimeUpdate) ExecX(ctx context.Context) {
	if err := drtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (drtu *DeviceRebootTimeUpdate) defaults() {
	if _, ok := drtu.mutation.UpdatedAt(); !ok {
		v := devicereboottime.UpdateDefaultUpdatedAt()
		drtu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (drtu *DeviceRebootTimeUpdate) check() error {
	if _, ok := drtu.mutation.DeviceID(); drtu.mutation.DeviceCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "DeviceRebootTime.device"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (drtu *DeviceRebootTimeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DeviceRebootTimeUpdate {
	drtu.modifiers = append(drtu.modifiers, modifiers...)
	return drtu
}

func (drtu *DeviceRebootTimeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := drtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(devicereboottime.Table, devicereboottime.Columns, sqlgraph.NewFieldSpec(devicereboottime.FieldID, field.TypeInt64))
	if ps := drtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := drtu.mutation.CreatedBy(); ok {
		_spec.SetField(devicereboottime.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := drtu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(devicereboottime.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := drtu.mutation.UpdatedBy(); ok {
		_spec.SetField(devicereboottime.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := drtu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(devicereboottime.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := drtu.mutation.UpdatedAt(); ok {
		_spec.SetField(devicereboottime.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := drtu.mutation.DeletedAt(); ok {
		_spec.SetField(devicereboottime.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := drtu.mutation.StartTime(); ok {
		_spec.SetField(devicereboottime.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := drtu.mutation.EndTime(); ok {
		_spec.SetField(devicereboottime.FieldEndTime, field.TypeTime, value)
	}
	if value, ok := drtu.mutation.OnlineTime(); ok {
		_spec.SetField(devicereboottime.FieldOnlineTime, field.TypeString, value)
	}
	if value, ok := drtu.mutation.OfflineTime(); ok {
		_spec.SetField(devicereboottime.FieldOfflineTime, field.TypeString, value)
	}
	if drtu.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   devicereboottime.DeviceTable,
			Columns: []string{devicereboottime.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := drtu.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   devicereboottime.DeviceTable,
			Columns: []string{devicereboottime.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(drtu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, drtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{devicereboottime.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	drtu.mutation.done = true
	return n, nil
}

// DeviceRebootTimeUpdateOne is the builder for updating a single DeviceRebootTime entity.
type DeviceRebootTimeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DeviceRebootTimeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedBy sets the "created_by" field.
func (drtuo *DeviceRebootTimeUpdateOne) SetCreatedBy(i int64) *DeviceRebootTimeUpdateOne {
	drtuo.mutation.ResetCreatedBy()
	drtuo.mutation.SetCreatedBy(i)
	return drtuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (drtuo *DeviceRebootTimeUpdateOne) SetNillableCreatedBy(i *int64) *DeviceRebootTimeUpdateOne {
	if i != nil {
		drtuo.SetCreatedBy(*i)
	}
	return drtuo
}

// AddCreatedBy adds i to the "created_by" field.
func (drtuo *DeviceRebootTimeUpdateOne) AddCreatedBy(i int64) *DeviceRebootTimeUpdateOne {
	drtuo.mutation.AddCreatedBy(i)
	return drtuo
}

// SetUpdatedBy sets the "updated_by" field.
func (drtuo *DeviceRebootTimeUpdateOne) SetUpdatedBy(i int64) *DeviceRebootTimeUpdateOne {
	drtuo.mutation.ResetUpdatedBy()
	drtuo.mutation.SetUpdatedBy(i)
	return drtuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (drtuo *DeviceRebootTimeUpdateOne) SetNillableUpdatedBy(i *int64) *DeviceRebootTimeUpdateOne {
	if i != nil {
		drtuo.SetUpdatedBy(*i)
	}
	return drtuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (drtuo *DeviceRebootTimeUpdateOne) AddUpdatedBy(i int64) *DeviceRebootTimeUpdateOne {
	drtuo.mutation.AddUpdatedBy(i)
	return drtuo
}

// SetUpdatedAt sets the "updated_at" field.
func (drtuo *DeviceRebootTimeUpdateOne) SetUpdatedAt(t time.Time) *DeviceRebootTimeUpdateOne {
	drtuo.mutation.SetUpdatedAt(t)
	return drtuo
}

// SetDeletedAt sets the "deleted_at" field.
func (drtuo *DeviceRebootTimeUpdateOne) SetDeletedAt(t time.Time) *DeviceRebootTimeUpdateOne {
	drtuo.mutation.SetDeletedAt(t)
	return drtuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (drtuo *DeviceRebootTimeUpdateOne) SetNillableDeletedAt(t *time.Time) *DeviceRebootTimeUpdateOne {
	if t != nil {
		drtuo.SetDeletedAt(*t)
	}
	return drtuo
}

// SetDeviceID sets the "device_id" field.
func (drtuo *DeviceRebootTimeUpdateOne) SetDeviceID(i int64) *DeviceRebootTimeUpdateOne {
	drtuo.mutation.SetDeviceID(i)
	return drtuo
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (drtuo *DeviceRebootTimeUpdateOne) SetNillableDeviceID(i *int64) *DeviceRebootTimeUpdateOne {
	if i != nil {
		drtuo.SetDeviceID(*i)
	}
	return drtuo
}

// SetStartTime sets the "start_time" field.
func (drtuo *DeviceRebootTimeUpdateOne) SetStartTime(t time.Time) *DeviceRebootTimeUpdateOne {
	drtuo.mutation.SetStartTime(t)
	return drtuo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (drtuo *DeviceRebootTimeUpdateOne) SetNillableStartTime(t *time.Time) *DeviceRebootTimeUpdateOne {
	if t != nil {
		drtuo.SetStartTime(*t)
	}
	return drtuo
}

// SetEndTime sets the "end_time" field.
func (drtuo *DeviceRebootTimeUpdateOne) SetEndTime(t time.Time) *DeviceRebootTimeUpdateOne {
	drtuo.mutation.SetEndTime(t)
	return drtuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (drtuo *DeviceRebootTimeUpdateOne) SetNillableEndTime(t *time.Time) *DeviceRebootTimeUpdateOne {
	if t != nil {
		drtuo.SetEndTime(*t)
	}
	return drtuo
}

// SetOnlineTime sets the "online_time" field.
func (drtuo *DeviceRebootTimeUpdateOne) SetOnlineTime(s string) *DeviceRebootTimeUpdateOne {
	drtuo.mutation.SetOnlineTime(s)
	return drtuo
}

// SetNillableOnlineTime sets the "online_time" field if the given value is not nil.
func (drtuo *DeviceRebootTimeUpdateOne) SetNillableOnlineTime(s *string) *DeviceRebootTimeUpdateOne {
	if s != nil {
		drtuo.SetOnlineTime(*s)
	}
	return drtuo
}

// SetOfflineTime sets the "offline_time" field.
func (drtuo *DeviceRebootTimeUpdateOne) SetOfflineTime(s string) *DeviceRebootTimeUpdateOne {
	drtuo.mutation.SetOfflineTime(s)
	return drtuo
}

// SetNillableOfflineTime sets the "offline_time" field if the given value is not nil.
func (drtuo *DeviceRebootTimeUpdateOne) SetNillableOfflineTime(s *string) *DeviceRebootTimeUpdateOne {
	if s != nil {
		drtuo.SetOfflineTime(*s)
	}
	return drtuo
}

// SetDevice sets the "device" edge to the Device entity.
func (drtuo *DeviceRebootTimeUpdateOne) SetDevice(d *Device) *DeviceRebootTimeUpdateOne {
	return drtuo.SetDeviceID(d.ID)
}

// Mutation returns the DeviceRebootTimeMutation object of the builder.
func (drtuo *DeviceRebootTimeUpdateOne) Mutation() *DeviceRebootTimeMutation {
	return drtuo.mutation
}

// ClearDevice clears the "device" edge to the Device entity.
func (drtuo *DeviceRebootTimeUpdateOne) ClearDevice() *DeviceRebootTimeUpdateOne {
	drtuo.mutation.ClearDevice()
	return drtuo
}

// Where appends a list predicates to the DeviceRebootTimeUpdate builder.
func (drtuo *DeviceRebootTimeUpdateOne) Where(ps ...predicate.DeviceRebootTime) *DeviceRebootTimeUpdateOne {
	drtuo.mutation.Where(ps...)
	return drtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (drtuo *DeviceRebootTimeUpdateOne) Select(field string, fields ...string) *DeviceRebootTimeUpdateOne {
	drtuo.fields = append([]string{field}, fields...)
	return drtuo
}

// Save executes the query and returns the updated DeviceRebootTime entity.
func (drtuo *DeviceRebootTimeUpdateOne) Save(ctx context.Context) (*DeviceRebootTime, error) {
	drtuo.defaults()
	return withHooks(ctx, drtuo.sqlSave, drtuo.mutation, drtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (drtuo *DeviceRebootTimeUpdateOne) SaveX(ctx context.Context) *DeviceRebootTime {
	node, err := drtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (drtuo *DeviceRebootTimeUpdateOne) Exec(ctx context.Context) error {
	_, err := drtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drtuo *DeviceRebootTimeUpdateOne) ExecX(ctx context.Context) {
	if err := drtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (drtuo *DeviceRebootTimeUpdateOne) defaults() {
	if _, ok := drtuo.mutation.UpdatedAt(); !ok {
		v := devicereboottime.UpdateDefaultUpdatedAt()
		drtuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (drtuo *DeviceRebootTimeUpdateOne) check() error {
	if _, ok := drtuo.mutation.DeviceID(); drtuo.mutation.DeviceCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "DeviceRebootTime.device"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (drtuo *DeviceRebootTimeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DeviceRebootTimeUpdateOne {
	drtuo.modifiers = append(drtuo.modifiers, modifiers...)
	return drtuo
}

func (drtuo *DeviceRebootTimeUpdateOne) sqlSave(ctx context.Context) (_node *DeviceRebootTime, err error) {
	if err := drtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(devicereboottime.Table, devicereboottime.Columns, sqlgraph.NewFieldSpec(devicereboottime.FieldID, field.TypeInt64))
	id, ok := drtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "DeviceRebootTime.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := drtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, devicereboottime.FieldID)
		for _, f := range fields {
			if !devicereboottime.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != devicereboottime.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := drtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := drtuo.mutation.CreatedBy(); ok {
		_spec.SetField(devicereboottime.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := drtuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(devicereboottime.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := drtuo.mutation.UpdatedBy(); ok {
		_spec.SetField(devicereboottime.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := drtuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(devicereboottime.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := drtuo.mutation.UpdatedAt(); ok {
		_spec.SetField(devicereboottime.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := drtuo.mutation.DeletedAt(); ok {
		_spec.SetField(devicereboottime.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := drtuo.mutation.StartTime(); ok {
		_spec.SetField(devicereboottime.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := drtuo.mutation.EndTime(); ok {
		_spec.SetField(devicereboottime.FieldEndTime, field.TypeTime, value)
	}
	if value, ok := drtuo.mutation.OnlineTime(); ok {
		_spec.SetField(devicereboottime.FieldOnlineTime, field.TypeString, value)
	}
	if value, ok := drtuo.mutation.OfflineTime(); ok {
		_spec.SetField(devicereboottime.FieldOfflineTime, field.TypeString, value)
	}
	if drtuo.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   devicereboottime.DeviceTable,
			Columns: []string{devicereboottime.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := drtuo.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   devicereboottime.DeviceTable,
			Columns: []string{devicereboottime.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(drtuo.modifiers...)
	_node = &DeviceRebootTime{config: drtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, drtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{devicereboottime.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	drtuo.mutation.done = true
	return _node, nil
}
