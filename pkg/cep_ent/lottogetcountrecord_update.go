// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lotto"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/lottogetcountrecord"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
)

// LottoGetCountRecordUpdate is the builder for updating LottoGetCountRecord entities.
type LottoGetCountRecordUpdate struct {
	config
	hooks     []Hook
	mutation  *LottoGetCountRecordMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the LottoGetCountRecordUpdate builder.
func (lgcru *LottoGetCountRecordUpdate) Where(ps ...predicate.LottoGetCountRecord) *LottoGetCountRecordUpdate {
	lgcru.mutation.Where(ps...)
	return lgcru
}

// SetCreatedBy sets the "created_by" field.
func (lgcru *LottoGetCountRecordUpdate) SetCreatedBy(i int64) *LottoGetCountRecordUpdate {
	lgcru.mutation.ResetCreatedBy()
	lgcru.mutation.SetCreatedBy(i)
	return lgcru
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (lgcru *LottoGetCountRecordUpdate) SetNillableCreatedBy(i *int64) *LottoGetCountRecordUpdate {
	if i != nil {
		lgcru.SetCreatedBy(*i)
	}
	return lgcru
}

// AddCreatedBy adds i to the "created_by" field.
func (lgcru *LottoGetCountRecordUpdate) AddCreatedBy(i int64) *LottoGetCountRecordUpdate {
	lgcru.mutation.AddCreatedBy(i)
	return lgcru
}

// SetUpdatedBy sets the "updated_by" field.
func (lgcru *LottoGetCountRecordUpdate) SetUpdatedBy(i int64) *LottoGetCountRecordUpdate {
	lgcru.mutation.ResetUpdatedBy()
	lgcru.mutation.SetUpdatedBy(i)
	return lgcru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (lgcru *LottoGetCountRecordUpdate) SetNillableUpdatedBy(i *int64) *LottoGetCountRecordUpdate {
	if i != nil {
		lgcru.SetUpdatedBy(*i)
	}
	return lgcru
}

// AddUpdatedBy adds i to the "updated_by" field.
func (lgcru *LottoGetCountRecordUpdate) AddUpdatedBy(i int64) *LottoGetCountRecordUpdate {
	lgcru.mutation.AddUpdatedBy(i)
	return lgcru
}

// SetUpdatedAt sets the "updated_at" field.
func (lgcru *LottoGetCountRecordUpdate) SetUpdatedAt(t time.Time) *LottoGetCountRecordUpdate {
	lgcru.mutation.SetUpdatedAt(t)
	return lgcru
}

// SetDeletedAt sets the "deleted_at" field.
func (lgcru *LottoGetCountRecordUpdate) SetDeletedAt(t time.Time) *LottoGetCountRecordUpdate {
	lgcru.mutation.SetDeletedAt(t)
	return lgcru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lgcru *LottoGetCountRecordUpdate) SetNillableDeletedAt(t *time.Time) *LottoGetCountRecordUpdate {
	if t != nil {
		lgcru.SetDeletedAt(*t)
	}
	return lgcru
}

// SetUserID sets the "user_id" field.
func (lgcru *LottoGetCountRecordUpdate) SetUserID(i int64) *LottoGetCountRecordUpdate {
	lgcru.mutation.SetUserID(i)
	return lgcru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (lgcru *LottoGetCountRecordUpdate) SetNillableUserID(i *int64) *LottoGetCountRecordUpdate {
	if i != nil {
		lgcru.SetUserID(*i)
	}
	return lgcru
}

// SetLottoID sets the "lotto_id" field.
func (lgcru *LottoGetCountRecordUpdate) SetLottoID(i int64) *LottoGetCountRecordUpdate {
	lgcru.mutation.SetLottoID(i)
	return lgcru
}

// SetNillableLottoID sets the "lotto_id" field if the given value is not nil.
func (lgcru *LottoGetCountRecordUpdate) SetNillableLottoID(i *int64) *LottoGetCountRecordUpdate {
	if i != nil {
		lgcru.SetLottoID(*i)
	}
	return lgcru
}

// SetCount sets the "count" field.
func (lgcru *LottoGetCountRecordUpdate) SetCount(i int64) *LottoGetCountRecordUpdate {
	lgcru.mutation.ResetCount()
	lgcru.mutation.SetCount(i)
	return lgcru
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (lgcru *LottoGetCountRecordUpdate) SetNillableCount(i *int64) *LottoGetCountRecordUpdate {
	if i != nil {
		lgcru.SetCount(*i)
	}
	return lgcru
}

// AddCount adds i to the "count" field.
func (lgcru *LottoGetCountRecordUpdate) AddCount(i int64) *LottoGetCountRecordUpdate {
	lgcru.mutation.AddCount(i)
	return lgcru
}

// SetType sets the "type" field.
func (lgcru *LottoGetCountRecordUpdate) SetType(l lottogetcountrecord.Type) *LottoGetCountRecordUpdate {
	lgcru.mutation.SetType(l)
	return lgcru
}

// SetNillableType sets the "type" field if the given value is not nil.
func (lgcru *LottoGetCountRecordUpdate) SetNillableType(l *lottogetcountrecord.Type) *LottoGetCountRecordUpdate {
	if l != nil {
		lgcru.SetType(*l)
	}
	return lgcru
}

// SetRechargeAmount sets the "recharge_amount" field.
func (lgcru *LottoGetCountRecordUpdate) SetRechargeAmount(i int64) *LottoGetCountRecordUpdate {
	lgcru.mutation.ResetRechargeAmount()
	lgcru.mutation.SetRechargeAmount(i)
	return lgcru
}

// SetNillableRechargeAmount sets the "recharge_amount" field if the given value is not nil.
func (lgcru *LottoGetCountRecordUpdate) SetNillableRechargeAmount(i *int64) *LottoGetCountRecordUpdate {
	if i != nil {
		lgcru.SetRechargeAmount(*i)
	}
	return lgcru
}

// AddRechargeAmount adds i to the "recharge_amount" field.
func (lgcru *LottoGetCountRecordUpdate) AddRechargeAmount(i int64) *LottoGetCountRecordUpdate {
	lgcru.mutation.AddRechargeAmount(i)
	return lgcru
}

// SetUser sets the "user" edge to the User entity.
func (lgcru *LottoGetCountRecordUpdate) SetUser(u *User) *LottoGetCountRecordUpdate {
	return lgcru.SetUserID(u.ID)
}

// SetLotto sets the "lotto" edge to the Lotto entity.
func (lgcru *LottoGetCountRecordUpdate) SetLotto(l *Lotto) *LottoGetCountRecordUpdate {
	return lgcru.SetLottoID(l.ID)
}

// Mutation returns the LottoGetCountRecordMutation object of the builder.
func (lgcru *LottoGetCountRecordUpdate) Mutation() *LottoGetCountRecordMutation {
	return lgcru.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (lgcru *LottoGetCountRecordUpdate) ClearUser() *LottoGetCountRecordUpdate {
	lgcru.mutation.ClearUser()
	return lgcru
}

// ClearLotto clears the "lotto" edge to the Lotto entity.
func (lgcru *LottoGetCountRecordUpdate) ClearLotto() *LottoGetCountRecordUpdate {
	lgcru.mutation.ClearLotto()
	return lgcru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lgcru *LottoGetCountRecordUpdate) Save(ctx context.Context) (int, error) {
	lgcru.defaults()
	return withHooks(ctx, lgcru.sqlSave, lgcru.mutation, lgcru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lgcru *LottoGetCountRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := lgcru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lgcru *LottoGetCountRecordUpdate) Exec(ctx context.Context) error {
	_, err := lgcru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lgcru *LottoGetCountRecordUpdate) ExecX(ctx context.Context) {
	if err := lgcru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lgcru *LottoGetCountRecordUpdate) defaults() {
	if _, ok := lgcru.mutation.UpdatedAt(); !ok {
		v := lottogetcountrecord.UpdateDefaultUpdatedAt()
		lgcru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lgcru *LottoGetCountRecordUpdate) check() error {
	if v, ok := lgcru.mutation.GetType(); ok {
		if err := lottogetcountrecord.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "LottoGetCountRecord.type": %w`, err)}
		}
	}
	if _, ok := lgcru.mutation.UserID(); lgcru.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "LottoGetCountRecord.user"`)
	}
	if _, ok := lgcru.mutation.LottoID(); lgcru.mutation.LottoCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "LottoGetCountRecord.lotto"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (lgcru *LottoGetCountRecordUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LottoGetCountRecordUpdate {
	lgcru.modifiers = append(lgcru.modifiers, modifiers...)
	return lgcru
}

func (lgcru *LottoGetCountRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lgcru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(lottogetcountrecord.Table, lottogetcountrecord.Columns, sqlgraph.NewFieldSpec(lottogetcountrecord.FieldID, field.TypeInt64))
	if ps := lgcru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lgcru.mutation.CreatedBy(); ok {
		_spec.SetField(lottogetcountrecord.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := lgcru.mutation.AddedCreatedBy(); ok {
		_spec.AddField(lottogetcountrecord.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := lgcru.mutation.UpdatedBy(); ok {
		_spec.SetField(lottogetcountrecord.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := lgcru.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(lottogetcountrecord.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := lgcru.mutation.UpdatedAt(); ok {
		_spec.SetField(lottogetcountrecord.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lgcru.mutation.DeletedAt(); ok {
		_spec.SetField(lottogetcountrecord.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := lgcru.mutation.Count(); ok {
		_spec.SetField(lottogetcountrecord.FieldCount, field.TypeInt64, value)
	}
	if value, ok := lgcru.mutation.AddedCount(); ok {
		_spec.AddField(lottogetcountrecord.FieldCount, field.TypeInt64, value)
	}
	if value, ok := lgcru.mutation.GetType(); ok {
		_spec.SetField(lottogetcountrecord.FieldType, field.TypeEnum, value)
	}
	if value, ok := lgcru.mutation.RechargeAmount(); ok {
		_spec.SetField(lottogetcountrecord.FieldRechargeAmount, field.TypeInt64, value)
	}
	if value, ok := lgcru.mutation.AddedRechargeAmount(); ok {
		_spec.AddField(lottogetcountrecord.FieldRechargeAmount, field.TypeInt64, value)
	}
	if lgcru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottogetcountrecord.UserTable,
			Columns: []string{lottogetcountrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lgcru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottogetcountrecord.UserTable,
			Columns: []string{lottogetcountrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lgcru.mutation.LottoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottogetcountrecord.LottoTable,
			Columns: []string{lottogetcountrecord.LottoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lotto.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lgcru.mutation.LottoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottogetcountrecord.LottoTable,
			Columns: []string{lottogetcountrecord.LottoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lotto.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(lgcru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, lgcru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lottogetcountrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lgcru.mutation.done = true
	return n, nil
}

// LottoGetCountRecordUpdateOne is the builder for updating a single LottoGetCountRecord entity.
type LottoGetCountRecordUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *LottoGetCountRecordMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedBy sets the "created_by" field.
func (lgcruo *LottoGetCountRecordUpdateOne) SetCreatedBy(i int64) *LottoGetCountRecordUpdateOne {
	lgcruo.mutation.ResetCreatedBy()
	lgcruo.mutation.SetCreatedBy(i)
	return lgcruo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (lgcruo *LottoGetCountRecordUpdateOne) SetNillableCreatedBy(i *int64) *LottoGetCountRecordUpdateOne {
	if i != nil {
		lgcruo.SetCreatedBy(*i)
	}
	return lgcruo
}

// AddCreatedBy adds i to the "created_by" field.
func (lgcruo *LottoGetCountRecordUpdateOne) AddCreatedBy(i int64) *LottoGetCountRecordUpdateOne {
	lgcruo.mutation.AddCreatedBy(i)
	return lgcruo
}

// SetUpdatedBy sets the "updated_by" field.
func (lgcruo *LottoGetCountRecordUpdateOne) SetUpdatedBy(i int64) *LottoGetCountRecordUpdateOne {
	lgcruo.mutation.ResetUpdatedBy()
	lgcruo.mutation.SetUpdatedBy(i)
	return lgcruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (lgcruo *LottoGetCountRecordUpdateOne) SetNillableUpdatedBy(i *int64) *LottoGetCountRecordUpdateOne {
	if i != nil {
		lgcruo.SetUpdatedBy(*i)
	}
	return lgcruo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (lgcruo *LottoGetCountRecordUpdateOne) AddUpdatedBy(i int64) *LottoGetCountRecordUpdateOne {
	lgcruo.mutation.AddUpdatedBy(i)
	return lgcruo
}

// SetUpdatedAt sets the "updated_at" field.
func (lgcruo *LottoGetCountRecordUpdateOne) SetUpdatedAt(t time.Time) *LottoGetCountRecordUpdateOne {
	lgcruo.mutation.SetUpdatedAt(t)
	return lgcruo
}

// SetDeletedAt sets the "deleted_at" field.
func (lgcruo *LottoGetCountRecordUpdateOne) SetDeletedAt(t time.Time) *LottoGetCountRecordUpdateOne {
	lgcruo.mutation.SetDeletedAt(t)
	return lgcruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lgcruo *LottoGetCountRecordUpdateOne) SetNillableDeletedAt(t *time.Time) *LottoGetCountRecordUpdateOne {
	if t != nil {
		lgcruo.SetDeletedAt(*t)
	}
	return lgcruo
}

// SetUserID sets the "user_id" field.
func (lgcruo *LottoGetCountRecordUpdateOne) SetUserID(i int64) *LottoGetCountRecordUpdateOne {
	lgcruo.mutation.SetUserID(i)
	return lgcruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (lgcruo *LottoGetCountRecordUpdateOne) SetNillableUserID(i *int64) *LottoGetCountRecordUpdateOne {
	if i != nil {
		lgcruo.SetUserID(*i)
	}
	return lgcruo
}

// SetLottoID sets the "lotto_id" field.
func (lgcruo *LottoGetCountRecordUpdateOne) SetLottoID(i int64) *LottoGetCountRecordUpdateOne {
	lgcruo.mutation.SetLottoID(i)
	return lgcruo
}

// SetNillableLottoID sets the "lotto_id" field if the given value is not nil.
func (lgcruo *LottoGetCountRecordUpdateOne) SetNillableLottoID(i *int64) *LottoGetCountRecordUpdateOne {
	if i != nil {
		lgcruo.SetLottoID(*i)
	}
	return lgcruo
}

// SetCount sets the "count" field.
func (lgcruo *LottoGetCountRecordUpdateOne) SetCount(i int64) *LottoGetCountRecordUpdateOne {
	lgcruo.mutation.ResetCount()
	lgcruo.mutation.SetCount(i)
	return lgcruo
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (lgcruo *LottoGetCountRecordUpdateOne) SetNillableCount(i *int64) *LottoGetCountRecordUpdateOne {
	if i != nil {
		lgcruo.SetCount(*i)
	}
	return lgcruo
}

// AddCount adds i to the "count" field.
func (lgcruo *LottoGetCountRecordUpdateOne) AddCount(i int64) *LottoGetCountRecordUpdateOne {
	lgcruo.mutation.AddCount(i)
	return lgcruo
}

// SetType sets the "type" field.
func (lgcruo *LottoGetCountRecordUpdateOne) SetType(l lottogetcountrecord.Type) *LottoGetCountRecordUpdateOne {
	lgcruo.mutation.SetType(l)
	return lgcruo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (lgcruo *LottoGetCountRecordUpdateOne) SetNillableType(l *lottogetcountrecord.Type) *LottoGetCountRecordUpdateOne {
	if l != nil {
		lgcruo.SetType(*l)
	}
	return lgcruo
}

// SetRechargeAmount sets the "recharge_amount" field.
func (lgcruo *LottoGetCountRecordUpdateOne) SetRechargeAmount(i int64) *LottoGetCountRecordUpdateOne {
	lgcruo.mutation.ResetRechargeAmount()
	lgcruo.mutation.SetRechargeAmount(i)
	return lgcruo
}

// SetNillableRechargeAmount sets the "recharge_amount" field if the given value is not nil.
func (lgcruo *LottoGetCountRecordUpdateOne) SetNillableRechargeAmount(i *int64) *LottoGetCountRecordUpdateOne {
	if i != nil {
		lgcruo.SetRechargeAmount(*i)
	}
	return lgcruo
}

// AddRechargeAmount adds i to the "recharge_amount" field.
func (lgcruo *LottoGetCountRecordUpdateOne) AddRechargeAmount(i int64) *LottoGetCountRecordUpdateOne {
	lgcruo.mutation.AddRechargeAmount(i)
	return lgcruo
}

// SetUser sets the "user" edge to the User entity.
func (lgcruo *LottoGetCountRecordUpdateOne) SetUser(u *User) *LottoGetCountRecordUpdateOne {
	return lgcruo.SetUserID(u.ID)
}

// SetLotto sets the "lotto" edge to the Lotto entity.
func (lgcruo *LottoGetCountRecordUpdateOne) SetLotto(l *Lotto) *LottoGetCountRecordUpdateOne {
	return lgcruo.SetLottoID(l.ID)
}

// Mutation returns the LottoGetCountRecordMutation object of the builder.
func (lgcruo *LottoGetCountRecordUpdateOne) Mutation() *LottoGetCountRecordMutation {
	return lgcruo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (lgcruo *LottoGetCountRecordUpdateOne) ClearUser() *LottoGetCountRecordUpdateOne {
	lgcruo.mutation.ClearUser()
	return lgcruo
}

// ClearLotto clears the "lotto" edge to the Lotto entity.
func (lgcruo *LottoGetCountRecordUpdateOne) ClearLotto() *LottoGetCountRecordUpdateOne {
	lgcruo.mutation.ClearLotto()
	return lgcruo
}

// Where appends a list predicates to the LottoGetCountRecordUpdate builder.
func (lgcruo *LottoGetCountRecordUpdateOne) Where(ps ...predicate.LottoGetCountRecord) *LottoGetCountRecordUpdateOne {
	lgcruo.mutation.Where(ps...)
	return lgcruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lgcruo *LottoGetCountRecordUpdateOne) Select(field string, fields ...string) *LottoGetCountRecordUpdateOne {
	lgcruo.fields = append([]string{field}, fields...)
	return lgcruo
}

// Save executes the query and returns the updated LottoGetCountRecord entity.
func (lgcruo *LottoGetCountRecordUpdateOne) Save(ctx context.Context) (*LottoGetCountRecord, error) {
	lgcruo.defaults()
	return withHooks(ctx, lgcruo.sqlSave, lgcruo.mutation, lgcruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lgcruo *LottoGetCountRecordUpdateOne) SaveX(ctx context.Context) *LottoGetCountRecord {
	node, err := lgcruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lgcruo *LottoGetCountRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := lgcruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lgcruo *LottoGetCountRecordUpdateOne) ExecX(ctx context.Context) {
	if err := lgcruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lgcruo *LottoGetCountRecordUpdateOne) defaults() {
	if _, ok := lgcruo.mutation.UpdatedAt(); !ok {
		v := lottogetcountrecord.UpdateDefaultUpdatedAt()
		lgcruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lgcruo *LottoGetCountRecordUpdateOne) check() error {
	if v, ok := lgcruo.mutation.GetType(); ok {
		if err := lottogetcountrecord.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "LottoGetCountRecord.type": %w`, err)}
		}
	}
	if _, ok := lgcruo.mutation.UserID(); lgcruo.mutation.UserCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "LottoGetCountRecord.user"`)
	}
	if _, ok := lgcruo.mutation.LottoID(); lgcruo.mutation.LottoCleared() && !ok {
		return errors.New(`cep_ent: clearing a required unique edge "LottoGetCountRecord.lotto"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (lgcruo *LottoGetCountRecordUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LottoGetCountRecordUpdateOne {
	lgcruo.modifiers = append(lgcruo.modifiers, modifiers...)
	return lgcruo
}

func (lgcruo *LottoGetCountRecordUpdateOne) sqlSave(ctx context.Context) (_node *LottoGetCountRecord, err error) {
	if err := lgcruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(lottogetcountrecord.Table, lottogetcountrecord.Columns, sqlgraph.NewFieldSpec(lottogetcountrecord.FieldID, field.TypeInt64))
	id, ok := lgcruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cep_ent: missing "LottoGetCountRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lgcruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lottogetcountrecord.FieldID)
		for _, f := range fields {
			if !lottogetcountrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
			}
			if f != lottogetcountrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lgcruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lgcruo.mutation.CreatedBy(); ok {
		_spec.SetField(lottogetcountrecord.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := lgcruo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(lottogetcountrecord.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := lgcruo.mutation.UpdatedBy(); ok {
		_spec.SetField(lottogetcountrecord.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := lgcruo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(lottogetcountrecord.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := lgcruo.mutation.UpdatedAt(); ok {
		_spec.SetField(lottogetcountrecord.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lgcruo.mutation.DeletedAt(); ok {
		_spec.SetField(lottogetcountrecord.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := lgcruo.mutation.Count(); ok {
		_spec.SetField(lottogetcountrecord.FieldCount, field.TypeInt64, value)
	}
	if value, ok := lgcruo.mutation.AddedCount(); ok {
		_spec.AddField(lottogetcountrecord.FieldCount, field.TypeInt64, value)
	}
	if value, ok := lgcruo.mutation.GetType(); ok {
		_spec.SetField(lottogetcountrecord.FieldType, field.TypeEnum, value)
	}
	if value, ok := lgcruo.mutation.RechargeAmount(); ok {
		_spec.SetField(lottogetcountrecord.FieldRechargeAmount, field.TypeInt64, value)
	}
	if value, ok := lgcruo.mutation.AddedRechargeAmount(); ok {
		_spec.AddField(lottogetcountrecord.FieldRechargeAmount, field.TypeInt64, value)
	}
	if lgcruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottogetcountrecord.UserTable,
			Columns: []string{lottogetcountrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lgcruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottogetcountrecord.UserTable,
			Columns: []string{lottogetcountrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lgcruo.mutation.LottoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottogetcountrecord.LottoTable,
			Columns: []string{lottogetcountrecord.LottoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lotto.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lgcruo.mutation.LottoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lottogetcountrecord.LottoTable,
			Columns: []string{lottogetcountrecord.LottoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lotto.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(lgcruo.modifiers...)
	_node = &LottoGetCountRecord{config: lgcruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lgcruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lottogetcountrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lgcruo.mutation.done = true
	return _node, nil
}
