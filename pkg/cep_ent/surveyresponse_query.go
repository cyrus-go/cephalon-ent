// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/survey"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/surveyanswer"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/surveyresponse"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
)

// SurveyResponseQuery is the builder for querying SurveyResponse entities.
type SurveyResponseQuery struct {
	config
	ctx               *QueryContext
	order             []surveyresponse.OrderOption
	inters            []Interceptor
	predicates        []predicate.SurveyResponse
	withUser          *UserQuery
	withSurvey        *SurveyQuery
	withSurveyAnswers *SurveyAnswerQuery
	modifiers         []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SurveyResponseQuery builder.
func (srq *SurveyResponseQuery) Where(ps ...predicate.SurveyResponse) *SurveyResponseQuery {
	srq.predicates = append(srq.predicates, ps...)
	return srq
}

// Limit the number of records to be returned by this query.
func (srq *SurveyResponseQuery) Limit(limit int) *SurveyResponseQuery {
	srq.ctx.Limit = &limit
	return srq
}

// Offset to start from.
func (srq *SurveyResponseQuery) Offset(offset int) *SurveyResponseQuery {
	srq.ctx.Offset = &offset
	return srq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (srq *SurveyResponseQuery) Unique(unique bool) *SurveyResponseQuery {
	srq.ctx.Unique = &unique
	return srq
}

// Order specifies how the records should be ordered.
func (srq *SurveyResponseQuery) Order(o ...surveyresponse.OrderOption) *SurveyResponseQuery {
	srq.order = append(srq.order, o...)
	return srq
}

// QueryUser chains the current query on the "user" edge.
func (srq *SurveyResponseQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: srq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := srq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := srq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(surveyresponse.Table, surveyresponse.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, surveyresponse.UserTable, surveyresponse.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(srq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySurvey chains the current query on the "survey" edge.
func (srq *SurveyResponseQuery) QuerySurvey() *SurveyQuery {
	query := (&SurveyClient{config: srq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := srq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := srq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(surveyresponse.Table, surveyresponse.FieldID, selector),
			sqlgraph.To(survey.Table, survey.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, surveyresponse.SurveyTable, surveyresponse.SurveyColumn),
		)
		fromU = sqlgraph.SetNeighbors(srq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySurveyAnswers chains the current query on the "survey_answers" edge.
func (srq *SurveyResponseQuery) QuerySurveyAnswers() *SurveyAnswerQuery {
	query := (&SurveyAnswerClient{config: srq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := srq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := srq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(surveyresponse.Table, surveyresponse.FieldID, selector),
			sqlgraph.To(surveyanswer.Table, surveyanswer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, surveyresponse.SurveyAnswersTable, surveyresponse.SurveyAnswersColumn),
		)
		fromU = sqlgraph.SetNeighbors(srq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SurveyResponse entity from the query.
// Returns a *NotFoundError when no SurveyResponse was found.
func (srq *SurveyResponseQuery) First(ctx context.Context) (*SurveyResponse, error) {
	nodes, err := srq.Limit(1).All(setContextOp(ctx, srq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{surveyresponse.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (srq *SurveyResponseQuery) FirstX(ctx context.Context) *SurveyResponse {
	node, err := srq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SurveyResponse ID from the query.
// Returns a *NotFoundError when no SurveyResponse ID was found.
func (srq *SurveyResponseQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = srq.Limit(1).IDs(setContextOp(ctx, srq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{surveyresponse.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (srq *SurveyResponseQuery) FirstIDX(ctx context.Context) int64 {
	id, err := srq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SurveyResponse entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SurveyResponse entity is found.
// Returns a *NotFoundError when no SurveyResponse entities are found.
func (srq *SurveyResponseQuery) Only(ctx context.Context) (*SurveyResponse, error) {
	nodes, err := srq.Limit(2).All(setContextOp(ctx, srq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{surveyresponse.Label}
	default:
		return nil, &NotSingularError{surveyresponse.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (srq *SurveyResponseQuery) OnlyX(ctx context.Context) *SurveyResponse {
	node, err := srq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SurveyResponse ID in the query.
// Returns a *NotSingularError when more than one SurveyResponse ID is found.
// Returns a *NotFoundError when no entities are found.
func (srq *SurveyResponseQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = srq.Limit(2).IDs(setContextOp(ctx, srq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{surveyresponse.Label}
	default:
		err = &NotSingularError{surveyresponse.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (srq *SurveyResponseQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := srq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SurveyResponses.
func (srq *SurveyResponseQuery) All(ctx context.Context) ([]*SurveyResponse, error) {
	ctx = setContextOp(ctx, srq.ctx, "All")
	if err := srq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SurveyResponse, *SurveyResponseQuery]()
	return withInterceptors[[]*SurveyResponse](ctx, srq, qr, srq.inters)
}

// AllX is like All, but panics if an error occurs.
func (srq *SurveyResponseQuery) AllX(ctx context.Context) []*SurveyResponse {
	nodes, err := srq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SurveyResponse IDs.
func (srq *SurveyResponseQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if srq.ctx.Unique == nil && srq.path != nil {
		srq.Unique(true)
	}
	ctx = setContextOp(ctx, srq.ctx, "IDs")
	if err = srq.Select(surveyresponse.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (srq *SurveyResponseQuery) IDsX(ctx context.Context) []int64 {
	ids, err := srq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (srq *SurveyResponseQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, srq.ctx, "Count")
	if err := srq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, srq, querierCount[*SurveyResponseQuery](), srq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (srq *SurveyResponseQuery) CountX(ctx context.Context) int {
	count, err := srq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (srq *SurveyResponseQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, srq.ctx, "Exist")
	switch _, err := srq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("cep_ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (srq *SurveyResponseQuery) ExistX(ctx context.Context) bool {
	exist, err := srq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SurveyResponseQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (srq *SurveyResponseQuery) Clone() *SurveyResponseQuery {
	if srq == nil {
		return nil
	}
	return &SurveyResponseQuery{
		config:            srq.config,
		ctx:               srq.ctx.Clone(),
		order:             append([]surveyresponse.OrderOption{}, srq.order...),
		inters:            append([]Interceptor{}, srq.inters...),
		predicates:        append([]predicate.SurveyResponse{}, srq.predicates...),
		withUser:          srq.withUser.Clone(),
		withSurvey:        srq.withSurvey.Clone(),
		withSurveyAnswers: srq.withSurveyAnswers.Clone(),
		// clone intermediate query.
		sql:  srq.sql.Clone(),
		path: srq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (srq *SurveyResponseQuery) WithUser(opts ...func(*UserQuery)) *SurveyResponseQuery {
	query := (&UserClient{config: srq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	srq.withUser = query
	return srq
}

// WithSurvey tells the query-builder to eager-load the nodes that are connected to
// the "survey" edge. The optional arguments are used to configure the query builder of the edge.
func (srq *SurveyResponseQuery) WithSurvey(opts ...func(*SurveyQuery)) *SurveyResponseQuery {
	query := (&SurveyClient{config: srq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	srq.withSurvey = query
	return srq
}

// WithSurveyAnswers tells the query-builder to eager-load the nodes that are connected to
// the "survey_answers" edge. The optional arguments are used to configure the query builder of the edge.
func (srq *SurveyResponseQuery) WithSurveyAnswers(opts ...func(*SurveyAnswerQuery)) *SurveyResponseQuery {
	query := (&SurveyAnswerClient{config: srq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	srq.withSurveyAnswers = query
	return srq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by,string"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SurveyResponse.Query().
//		GroupBy(surveyresponse.FieldCreatedBy).
//		Aggregate(cep_ent.Count()).
//		Scan(ctx, &v)
func (srq *SurveyResponseQuery) GroupBy(field string, fields ...string) *SurveyResponseGroupBy {
	srq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SurveyResponseGroupBy{build: srq}
	grbuild.flds = &srq.ctx.Fields
	grbuild.label = surveyresponse.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by,string"`
//	}
//
//	client.SurveyResponse.Query().
//		Select(surveyresponse.FieldCreatedBy).
//		Scan(ctx, &v)
func (srq *SurveyResponseQuery) Select(fields ...string) *SurveyResponseSelect {
	srq.ctx.Fields = append(srq.ctx.Fields, fields...)
	sbuild := &SurveyResponseSelect{SurveyResponseQuery: srq}
	sbuild.label = surveyresponse.Label
	sbuild.flds, sbuild.scan = &srq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SurveyResponseSelect configured with the given aggregations.
func (srq *SurveyResponseQuery) Aggregate(fns ...AggregateFunc) *SurveyResponseSelect {
	return srq.Select().Aggregate(fns...)
}

func (srq *SurveyResponseQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range srq.inters {
		if inter == nil {
			return fmt.Errorf("cep_ent: uninitialized interceptor (forgotten import cep_ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, srq); err != nil {
				return err
			}
		}
	}
	for _, f := range srq.ctx.Fields {
		if !surveyresponse.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
		}
	}
	if srq.path != nil {
		prev, err := srq.path(ctx)
		if err != nil {
			return err
		}
		srq.sql = prev
	}
	return nil
}

func (srq *SurveyResponseQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SurveyResponse, error) {
	var (
		nodes       = []*SurveyResponse{}
		_spec       = srq.querySpec()
		loadedTypes = [3]bool{
			srq.withUser != nil,
			srq.withSurvey != nil,
			srq.withSurveyAnswers != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SurveyResponse).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SurveyResponse{config: srq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(srq.modifiers) > 0 {
		_spec.Modifiers = srq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, srq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := srq.withUser; query != nil {
		if err := srq.loadUser(ctx, query, nodes, nil,
			func(n *SurveyResponse, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := srq.withSurvey; query != nil {
		if err := srq.loadSurvey(ctx, query, nodes, nil,
			func(n *SurveyResponse, e *Survey) { n.Edges.Survey = e }); err != nil {
			return nil, err
		}
	}
	if query := srq.withSurveyAnswers; query != nil {
		if err := srq.loadSurveyAnswers(ctx, query, nodes,
			func(n *SurveyResponse) { n.Edges.SurveyAnswers = []*SurveyAnswer{} },
			func(n *SurveyResponse, e *SurveyAnswer) { n.Edges.SurveyAnswers = append(n.Edges.SurveyAnswers, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (srq *SurveyResponseQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*SurveyResponse, init func(*SurveyResponse), assign func(*SurveyResponse, *User)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*SurveyResponse)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (srq *SurveyResponseQuery) loadSurvey(ctx context.Context, query *SurveyQuery, nodes []*SurveyResponse, init func(*SurveyResponse), assign func(*SurveyResponse, *Survey)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*SurveyResponse)
	for i := range nodes {
		fk := nodes[i].SurveyID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(survey.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "survey_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (srq *SurveyResponseQuery) loadSurveyAnswers(ctx context.Context, query *SurveyAnswerQuery, nodes []*SurveyResponse, init func(*SurveyResponse), assign func(*SurveyResponse, *SurveyAnswer)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*SurveyResponse)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(surveyanswer.FieldSurveyResponseID)
	}
	query.Where(predicate.SurveyAnswer(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(surveyresponse.SurveyAnswersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.SurveyResponseID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "survey_response_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (srq *SurveyResponseQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := srq.querySpec()
	if len(srq.modifiers) > 0 {
		_spec.Modifiers = srq.modifiers
	}
	_spec.Node.Columns = srq.ctx.Fields
	if len(srq.ctx.Fields) > 0 {
		_spec.Unique = srq.ctx.Unique != nil && *srq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, srq.driver, _spec)
}

func (srq *SurveyResponseQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(surveyresponse.Table, surveyresponse.Columns, sqlgraph.NewFieldSpec(surveyresponse.FieldID, field.TypeInt64))
	_spec.From = srq.sql
	if unique := srq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if srq.path != nil {
		_spec.Unique = true
	}
	if fields := srq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, surveyresponse.FieldID)
		for i := range fields {
			if fields[i] != surveyresponse.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if srq.withUser != nil {
			_spec.Node.AddColumnOnce(surveyresponse.FieldUserID)
		}
		if srq.withSurvey != nil {
			_spec.Node.AddColumnOnce(surveyresponse.FieldSurveyID)
		}
	}
	if ps := srq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := srq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := srq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := srq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (srq *SurveyResponseQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(srq.driver.Dialect())
	t1 := builder.Table(surveyresponse.Table)
	columns := srq.ctx.Fields
	if len(columns) == 0 {
		columns = surveyresponse.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if srq.sql != nil {
		selector = srq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if srq.ctx.Unique != nil && *srq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range srq.modifiers {
		m(selector)
	}
	for _, p := range srq.predicates {
		p(selector)
	}
	for _, p := range srq.order {
		p(selector)
	}
	if offset := srq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := srq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (srq *SurveyResponseQuery) Modify(modifiers ...func(s *sql.Selector)) *SurveyResponseSelect {
	srq.modifiers = append(srq.modifiers, modifiers...)
	return srq.Select()
}

// SurveyResponseGroupBy is the group-by builder for SurveyResponse entities.
type SurveyResponseGroupBy struct {
	selector
	build *SurveyResponseQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (srgb *SurveyResponseGroupBy) Aggregate(fns ...AggregateFunc) *SurveyResponseGroupBy {
	srgb.fns = append(srgb.fns, fns...)
	return srgb
}

// Scan applies the selector query and scans the result into the given value.
func (srgb *SurveyResponseGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, srgb.build.ctx, "GroupBy")
	if err := srgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SurveyResponseQuery, *SurveyResponseGroupBy](ctx, srgb.build, srgb, srgb.build.inters, v)
}

func (srgb *SurveyResponseGroupBy) sqlScan(ctx context.Context, root *SurveyResponseQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(srgb.fns))
	for _, fn := range srgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*srgb.flds)+len(srgb.fns))
		for _, f := range *srgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*srgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := srgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SurveyResponseSelect is the builder for selecting fields of SurveyResponse entities.
type SurveyResponseSelect struct {
	*SurveyResponseQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (srs *SurveyResponseSelect) Aggregate(fns ...AggregateFunc) *SurveyResponseSelect {
	srs.fns = append(srs.fns, fns...)
	return srs
}

// Scan applies the selector query and scans the result into the given value.
func (srs *SurveyResponseSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, srs.ctx, "Select")
	if err := srs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SurveyResponseQuery, *SurveyResponseSelect](ctx, srs.SurveyResponseQuery, srs, srs.inters, v)
}

func (srs *SurveyResponseSelect) sqlScan(ctx context.Context, root *SurveyResponseQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(srs.fns))
	for _, fn := range srs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*srs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := srs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (srs *SurveyResponseSelect) Modify(modifiers ...func(s *sql.Selector)) *SurveyResponseSelect {
	srs.modifiers = append(srs.modifiers, modifiers...)
	return srs
}
