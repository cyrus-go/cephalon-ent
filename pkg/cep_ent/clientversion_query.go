// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/clientversion"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/predicate"
)

// ClientVersionQuery is the builder for querying ClientVersion entities.
type ClientVersionQuery struct {
	config
	ctx        *QueryContext
	order      []clientversion.OrderOption
	inters     []Interceptor
	predicates []predicate.ClientVersion
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ClientVersionQuery builder.
func (cvq *ClientVersionQuery) Where(ps ...predicate.ClientVersion) *ClientVersionQuery {
	cvq.predicates = append(cvq.predicates, ps...)
	return cvq
}

// Limit the number of records to be returned by this query.
func (cvq *ClientVersionQuery) Limit(limit int) *ClientVersionQuery {
	cvq.ctx.Limit = &limit
	return cvq
}

// Offset to start from.
func (cvq *ClientVersionQuery) Offset(offset int) *ClientVersionQuery {
	cvq.ctx.Offset = &offset
	return cvq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cvq *ClientVersionQuery) Unique(unique bool) *ClientVersionQuery {
	cvq.ctx.Unique = &unique
	return cvq
}

// Order specifies how the records should be ordered.
func (cvq *ClientVersionQuery) Order(o ...clientversion.OrderOption) *ClientVersionQuery {
	cvq.order = append(cvq.order, o...)
	return cvq
}

// First returns the first ClientVersion entity from the query.
// Returns a *NotFoundError when no ClientVersion was found.
func (cvq *ClientVersionQuery) First(ctx context.Context) (*ClientVersion, error) {
	nodes, err := cvq.Limit(1).All(setContextOp(ctx, cvq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{clientversion.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cvq *ClientVersionQuery) FirstX(ctx context.Context) *ClientVersion {
	node, err := cvq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ClientVersion ID from the query.
// Returns a *NotFoundError when no ClientVersion ID was found.
func (cvq *ClientVersionQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = cvq.Limit(1).IDs(setContextOp(ctx, cvq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{clientversion.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cvq *ClientVersionQuery) FirstIDX(ctx context.Context) int64 {
	id, err := cvq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ClientVersion entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ClientVersion entity is found.
// Returns a *NotFoundError when no ClientVersion entities are found.
func (cvq *ClientVersionQuery) Only(ctx context.Context) (*ClientVersion, error) {
	nodes, err := cvq.Limit(2).All(setContextOp(ctx, cvq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{clientversion.Label}
	default:
		return nil, &NotSingularError{clientversion.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cvq *ClientVersionQuery) OnlyX(ctx context.Context) *ClientVersion {
	node, err := cvq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ClientVersion ID in the query.
// Returns a *NotSingularError when more than one ClientVersion ID is found.
// Returns a *NotFoundError when no entities are found.
func (cvq *ClientVersionQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = cvq.Limit(2).IDs(setContextOp(ctx, cvq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{clientversion.Label}
	default:
		err = &NotSingularError{clientversion.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cvq *ClientVersionQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := cvq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ClientVersions.
func (cvq *ClientVersionQuery) All(ctx context.Context) ([]*ClientVersion, error) {
	ctx = setContextOp(ctx, cvq.ctx, "All")
	if err := cvq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ClientVersion, *ClientVersionQuery]()
	return withInterceptors[[]*ClientVersion](ctx, cvq, qr, cvq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cvq *ClientVersionQuery) AllX(ctx context.Context) []*ClientVersion {
	nodes, err := cvq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ClientVersion IDs.
func (cvq *ClientVersionQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if cvq.ctx.Unique == nil && cvq.path != nil {
		cvq.Unique(true)
	}
	ctx = setContextOp(ctx, cvq.ctx, "IDs")
	if err = cvq.Select(clientversion.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cvq *ClientVersionQuery) IDsX(ctx context.Context) []int64 {
	ids, err := cvq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cvq *ClientVersionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cvq.ctx, "Count")
	if err := cvq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cvq, querierCount[*ClientVersionQuery](), cvq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cvq *ClientVersionQuery) CountX(ctx context.Context) int {
	count, err := cvq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cvq *ClientVersionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cvq.ctx, "Exist")
	switch _, err := cvq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("cep_ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cvq *ClientVersionQuery) ExistX(ctx context.Context) bool {
	exist, err := cvq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ClientVersionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cvq *ClientVersionQuery) Clone() *ClientVersionQuery {
	if cvq == nil {
		return nil
	}
	return &ClientVersionQuery{
		config:     cvq.config,
		ctx:        cvq.ctx.Clone(),
		order:      append([]clientversion.OrderOption{}, cvq.order...),
		inters:     append([]Interceptor{}, cvq.inters...),
		predicates: append([]predicate.ClientVersion{}, cvq.predicates...),
		// clone intermediate query.
		sql:  cvq.sql.Clone(),
		path: cvq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by,string"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ClientVersion.Query().
//		GroupBy(clientversion.FieldCreatedBy).
//		Aggregate(cep_ent.Count()).
//		Scan(ctx, &v)
func (cvq *ClientVersionQuery) GroupBy(field string, fields ...string) *ClientVersionGroupBy {
	cvq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ClientVersionGroupBy{build: cvq}
	grbuild.flds = &cvq.ctx.Fields
	grbuild.label = clientversion.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by,string"`
//	}
//
//	client.ClientVersion.Query().
//		Select(clientversion.FieldCreatedBy).
//		Scan(ctx, &v)
func (cvq *ClientVersionQuery) Select(fields ...string) *ClientVersionSelect {
	cvq.ctx.Fields = append(cvq.ctx.Fields, fields...)
	sbuild := &ClientVersionSelect{ClientVersionQuery: cvq}
	sbuild.label = clientversion.Label
	sbuild.flds, sbuild.scan = &cvq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ClientVersionSelect configured with the given aggregations.
func (cvq *ClientVersionQuery) Aggregate(fns ...AggregateFunc) *ClientVersionSelect {
	return cvq.Select().Aggregate(fns...)
}

func (cvq *ClientVersionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cvq.inters {
		if inter == nil {
			return fmt.Errorf("cep_ent: uninitialized interceptor (forgotten import cep_ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cvq); err != nil {
				return err
			}
		}
	}
	for _, f := range cvq.ctx.Fields {
		if !clientversion.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
		}
	}
	if cvq.path != nil {
		prev, err := cvq.path(ctx)
		if err != nil {
			return err
		}
		cvq.sql = prev
	}
	return nil
}

func (cvq *ClientVersionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ClientVersion, error) {
	var (
		nodes = []*ClientVersion{}
		_spec = cvq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ClientVersion).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ClientVersion{config: cvq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	if len(cvq.modifiers) > 0 {
		_spec.Modifiers = cvq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cvq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (cvq *ClientVersionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cvq.querySpec()
	if len(cvq.modifiers) > 0 {
		_spec.Modifiers = cvq.modifiers
	}
	_spec.Node.Columns = cvq.ctx.Fields
	if len(cvq.ctx.Fields) > 0 {
		_spec.Unique = cvq.ctx.Unique != nil && *cvq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cvq.driver, _spec)
}

func (cvq *ClientVersionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(clientversion.Table, clientversion.Columns, sqlgraph.NewFieldSpec(clientversion.FieldID, field.TypeInt64))
	_spec.From = cvq.sql
	if unique := cvq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cvq.path != nil {
		_spec.Unique = true
	}
	if fields := cvq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, clientversion.FieldID)
		for i := range fields {
			if fields[i] != clientversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cvq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cvq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cvq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cvq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cvq *ClientVersionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cvq.driver.Dialect())
	t1 := builder.Table(clientversion.Table)
	columns := cvq.ctx.Fields
	if len(columns) == 0 {
		columns = clientversion.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cvq.sql != nil {
		selector = cvq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cvq.ctx.Unique != nil && *cvq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range cvq.modifiers {
		m(selector)
	}
	for _, p := range cvq.predicates {
		p(selector)
	}
	for _, p := range cvq.order {
		p(selector)
	}
	if offset := cvq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cvq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (cvq *ClientVersionQuery) Modify(modifiers ...func(s *sql.Selector)) *ClientVersionSelect {
	cvq.modifiers = append(cvq.modifiers, modifiers...)
	return cvq.Select()
}

// ClientVersionGroupBy is the group-by builder for ClientVersion entities.
type ClientVersionGroupBy struct {
	selector
	build *ClientVersionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cvgb *ClientVersionGroupBy) Aggregate(fns ...AggregateFunc) *ClientVersionGroupBy {
	cvgb.fns = append(cvgb.fns, fns...)
	return cvgb
}

// Scan applies the selector query and scans the result into the given value.
func (cvgb *ClientVersionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cvgb.build.ctx, "GroupBy")
	if err := cvgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ClientVersionQuery, *ClientVersionGroupBy](ctx, cvgb.build, cvgb, cvgb.build.inters, v)
}

func (cvgb *ClientVersionGroupBy) sqlScan(ctx context.Context, root *ClientVersionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cvgb.fns))
	for _, fn := range cvgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cvgb.flds)+len(cvgb.fns))
		for _, f := range *cvgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cvgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cvgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ClientVersionSelect is the builder for selecting fields of ClientVersion entities.
type ClientVersionSelect struct {
	*ClientVersionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cvs *ClientVersionSelect) Aggregate(fns ...AggregateFunc) *ClientVersionSelect {
	cvs.fns = append(cvs.fns, fns...)
	return cvs
}

// Scan applies the selector query and scans the result into the given value.
func (cvs *ClientVersionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cvs.ctx, "Select")
	if err := cvs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ClientVersionQuery, *ClientVersionSelect](ctx, cvs.ClientVersionQuery, cvs, cvs.inters, v)
}

func (cvs *ClientVersionSelect) sqlScan(ctx context.Context, root *ClientVersionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cvs.fns))
	for _, fn := range cvs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cvs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cvs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (cvs *ClientVersionSelect) Modify(modifiers ...func(s *sql.Selector)) *ClientVersionSelect {
	cvs.modifiers = append(cvs.modifiers, modifiers...)
	return cvs
}
