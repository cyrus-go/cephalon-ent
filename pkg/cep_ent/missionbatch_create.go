// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/mission"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionbatch"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/missionconsumeorder"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
)

// MissionBatchCreate is the builder for creating a MissionBatch entity.
type MissionBatchCreate struct {
	config
	mutation *MissionBatchMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (mbc *MissionBatchCreate) SetCreatedBy(i int64) *MissionBatchCreate {
	mbc.mutation.SetCreatedBy(i)
	return mbc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mbc *MissionBatchCreate) SetNillableCreatedBy(i *int64) *MissionBatchCreate {
	if i != nil {
		mbc.SetCreatedBy(*i)
	}
	return mbc
}

// SetUpdatedBy sets the "updated_by" field.
func (mbc *MissionBatchCreate) SetUpdatedBy(i int64) *MissionBatchCreate {
	mbc.mutation.SetUpdatedBy(i)
	return mbc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mbc *MissionBatchCreate) SetNillableUpdatedBy(i *int64) *MissionBatchCreate {
	if i != nil {
		mbc.SetUpdatedBy(*i)
	}
	return mbc
}

// SetCreatedAt sets the "created_at" field.
func (mbc *MissionBatchCreate) SetCreatedAt(t time.Time) *MissionBatchCreate {
	mbc.mutation.SetCreatedAt(t)
	return mbc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mbc *MissionBatchCreate) SetNillableCreatedAt(t *time.Time) *MissionBatchCreate {
	if t != nil {
		mbc.SetCreatedAt(*t)
	}
	return mbc
}

// SetUpdatedAt sets the "updated_at" field.
func (mbc *MissionBatchCreate) SetUpdatedAt(t time.Time) *MissionBatchCreate {
	mbc.mutation.SetUpdatedAt(t)
	return mbc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mbc *MissionBatchCreate) SetNillableUpdatedAt(t *time.Time) *MissionBatchCreate {
	if t != nil {
		mbc.SetUpdatedAt(*t)
	}
	return mbc
}

// SetDeletedAt sets the "deleted_at" field.
func (mbc *MissionBatchCreate) SetDeletedAt(t time.Time) *MissionBatchCreate {
	mbc.mutation.SetDeletedAt(t)
	return mbc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mbc *MissionBatchCreate) SetNillableDeletedAt(t *time.Time) *MissionBatchCreate {
	if t != nil {
		mbc.SetDeletedAt(*t)
	}
	return mbc
}

// SetNumber sets the "number" field.
func (mbc *MissionBatchCreate) SetNumber(s string) *MissionBatchCreate {
	mbc.mutation.SetNumber(s)
	return mbc
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (mbc *MissionBatchCreate) SetNillableNumber(s *string) *MissionBatchCreate {
	if s != nil {
		mbc.SetNumber(*s)
	}
	return mbc
}

// SetUserID sets the "user_id" field.
func (mbc *MissionBatchCreate) SetUserID(i int64) *MissionBatchCreate {
	mbc.mutation.SetUserID(i)
	return mbc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (mbc *MissionBatchCreate) SetNillableUserID(i *int64) *MissionBatchCreate {
	if i != nil {
		mbc.SetUserID(*i)
	}
	return mbc
}

// SetID sets the "id" field.
func (mbc *MissionBatchCreate) SetID(i int64) *MissionBatchCreate {
	mbc.mutation.SetID(i)
	return mbc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mbc *MissionBatchCreate) SetNillableID(i *int64) *MissionBatchCreate {
	if i != nil {
		mbc.SetID(*i)
	}
	return mbc
}

// SetUser sets the "user" edge to the User entity.
func (mbc *MissionBatchCreate) SetUser(u *User) *MissionBatchCreate {
	return mbc.SetUserID(u.ID)
}

// AddMissionConsumeOrderIDs adds the "mission_consume_orders" edge to the MissionConsumeOrder entity by IDs.
func (mbc *MissionBatchCreate) AddMissionConsumeOrderIDs(ids ...int64) *MissionBatchCreate {
	mbc.mutation.AddMissionConsumeOrderIDs(ids...)
	return mbc
}

// AddMissionConsumeOrders adds the "mission_consume_orders" edges to the MissionConsumeOrder entity.
func (mbc *MissionBatchCreate) AddMissionConsumeOrders(m ...*MissionConsumeOrder) *MissionBatchCreate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mbc.AddMissionConsumeOrderIDs(ids...)
}

// AddMissionIDs adds the "missions" edge to the Mission entity by IDs.
func (mbc *MissionBatchCreate) AddMissionIDs(ids ...int64) *MissionBatchCreate {
	mbc.mutation.AddMissionIDs(ids...)
	return mbc
}

// AddMissions adds the "missions" edges to the Mission entity.
func (mbc *MissionBatchCreate) AddMissions(m ...*Mission) *MissionBatchCreate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mbc.AddMissionIDs(ids...)
}

// Mutation returns the MissionBatchMutation object of the builder.
func (mbc *MissionBatchCreate) Mutation() *MissionBatchMutation {
	return mbc.mutation
}

// Save creates the MissionBatch in the database.
func (mbc *MissionBatchCreate) Save(ctx context.Context) (*MissionBatch, error) {
	mbc.defaults()
	return withHooks(ctx, mbc.sqlSave, mbc.mutation, mbc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mbc *MissionBatchCreate) SaveX(ctx context.Context) *MissionBatch {
	v, err := mbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mbc *MissionBatchCreate) Exec(ctx context.Context) error {
	_, err := mbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mbc *MissionBatchCreate) ExecX(ctx context.Context) {
	if err := mbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mbc *MissionBatchCreate) defaults() {
	if _, ok := mbc.mutation.CreatedBy(); !ok {
		v := missionbatch.DefaultCreatedBy
		mbc.mutation.SetCreatedBy(v)
	}
	if _, ok := mbc.mutation.UpdatedBy(); !ok {
		v := missionbatch.DefaultUpdatedBy
		mbc.mutation.SetUpdatedBy(v)
	}
	if _, ok := mbc.mutation.CreatedAt(); !ok {
		v := missionbatch.DefaultCreatedAt()
		mbc.mutation.SetCreatedAt(v)
	}
	if _, ok := mbc.mutation.UpdatedAt(); !ok {
		v := missionbatch.DefaultUpdatedAt()
		mbc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mbc.mutation.DeletedAt(); !ok {
		v := missionbatch.DefaultDeletedAt
		mbc.mutation.SetDeletedAt(v)
	}
	if _, ok := mbc.mutation.Number(); !ok {
		v := missionbatch.DefaultNumber
		mbc.mutation.SetNumber(v)
	}
	if _, ok := mbc.mutation.UserID(); !ok {
		v := missionbatch.DefaultUserID
		mbc.mutation.SetUserID(v)
	}
	if _, ok := mbc.mutation.ID(); !ok {
		v := missionbatch.DefaultID()
		mbc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mbc *MissionBatchCreate) check() error {
	if _, ok := mbc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "MissionBatch.created_by"`)}
	}
	if _, ok := mbc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "MissionBatch.updated_by"`)}
	}
	if _, ok := mbc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "MissionBatch.created_at"`)}
	}
	if _, ok := mbc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "MissionBatch.updated_at"`)}
	}
	if _, ok := mbc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "MissionBatch.deleted_at"`)}
	}
	if _, ok := mbc.mutation.Number(); !ok {
		return &ValidationError{Name: "number", err: errors.New(`cep_ent: missing required field "MissionBatch.number"`)}
	}
	if _, ok := mbc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "MissionBatch.user_id"`)}
	}
	if _, ok := mbc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "MissionBatch.user"`)}
	}
	return nil
}

func (mbc *MissionBatchCreate) sqlSave(ctx context.Context) (*MissionBatch, error) {
	if err := mbc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	mbc.mutation.id = &_node.ID
	mbc.mutation.done = true
	return _node, nil
}

func (mbc *MissionBatchCreate) createSpec() (*MissionBatch, *sqlgraph.CreateSpec) {
	var (
		_node = &MissionBatch{config: mbc.config}
		_spec = sqlgraph.NewCreateSpec(missionbatch.Table, sqlgraph.NewFieldSpec(missionbatch.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = mbc.conflict
	if id, ok := mbc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mbc.mutation.CreatedBy(); ok {
		_spec.SetField(missionbatch.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := mbc.mutation.UpdatedBy(); ok {
		_spec.SetField(missionbatch.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := mbc.mutation.CreatedAt(); ok {
		_spec.SetField(missionbatch.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mbc.mutation.UpdatedAt(); ok {
		_spec.SetField(missionbatch.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mbc.mutation.DeletedAt(); ok {
		_spec.SetField(missionbatch.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := mbc.mutation.Number(); ok {
		_spec.SetField(missionbatch.FieldNumber, field.TypeString, value)
		_node.Number = value
	}
	if nodes := mbc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   missionbatch.UserTable,
			Columns: []string{missionbatch.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mbc.mutation.MissionConsumeOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionbatch.MissionConsumeOrdersTable,
			Columns: []string{missionbatch.MissionConsumeOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missionconsumeorder.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mbc.mutation.MissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   missionbatch.MissionsTable,
			Columns: []string{missionbatch.MissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MissionBatch.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MissionBatchUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (mbc *MissionBatchCreate) OnConflict(opts ...sql.ConflictOption) *MissionBatchUpsertOne {
	mbc.conflict = opts
	return &MissionBatchUpsertOne{
		create: mbc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MissionBatch.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mbc *MissionBatchCreate) OnConflictColumns(columns ...string) *MissionBatchUpsertOne {
	mbc.conflict = append(mbc.conflict, sql.ConflictColumns(columns...))
	return &MissionBatchUpsertOne{
		create: mbc,
	}
}

type (
	// MissionBatchUpsertOne is the builder for "upsert"-ing
	//  one MissionBatch node.
	MissionBatchUpsertOne struct {
		create *MissionBatchCreate
	}

	// MissionBatchUpsert is the "OnConflict" setter.
	MissionBatchUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *MissionBatchUpsert) SetCreatedBy(v int64) *MissionBatchUpsert {
	u.Set(missionbatch.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MissionBatchUpsert) UpdateCreatedBy() *MissionBatchUpsert {
	u.SetExcluded(missionbatch.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *MissionBatchUpsert) AddCreatedBy(v int64) *MissionBatchUpsert {
	u.Add(missionbatch.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MissionBatchUpsert) SetUpdatedBy(v int64) *MissionBatchUpsert {
	u.Set(missionbatch.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MissionBatchUpsert) UpdateUpdatedBy() *MissionBatchUpsert {
	u.SetExcluded(missionbatch.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MissionBatchUpsert) AddUpdatedBy(v int64) *MissionBatchUpsert {
	u.Add(missionbatch.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MissionBatchUpsert) SetUpdatedAt(v time.Time) *MissionBatchUpsert {
	u.Set(missionbatch.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MissionBatchUpsert) UpdateUpdatedAt() *MissionBatchUpsert {
	u.SetExcluded(missionbatch.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MissionBatchUpsert) SetDeletedAt(v time.Time) *MissionBatchUpsert {
	u.Set(missionbatch.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MissionBatchUpsert) UpdateDeletedAt() *MissionBatchUpsert {
	u.SetExcluded(missionbatch.FieldDeletedAt)
	return u
}

// SetNumber sets the "number" field.
func (u *MissionBatchUpsert) SetNumber(v string) *MissionBatchUpsert {
	u.Set(missionbatch.FieldNumber, v)
	return u
}

// UpdateNumber sets the "number" field to the value that was provided on create.
func (u *MissionBatchUpsert) UpdateNumber() *MissionBatchUpsert {
	u.SetExcluded(missionbatch.FieldNumber)
	return u
}

// SetUserID sets the "user_id" field.
func (u *MissionBatchUpsert) SetUserID(v int64) *MissionBatchUpsert {
	u.Set(missionbatch.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *MissionBatchUpsert) UpdateUserID() *MissionBatchUpsert {
	u.SetExcluded(missionbatch.FieldUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MissionBatch.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(missionbatch.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MissionBatchUpsertOne) UpdateNewValues() *MissionBatchUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(missionbatch.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(missionbatch.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MissionBatch.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MissionBatchUpsertOne) Ignore() *MissionBatchUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MissionBatchUpsertOne) DoNothing() *MissionBatchUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MissionBatchCreate.OnConflict
// documentation for more info.
func (u *MissionBatchUpsertOne) Update(set func(*MissionBatchUpsert)) *MissionBatchUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MissionBatchUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *MissionBatchUpsertOne) SetCreatedBy(v int64) *MissionBatchUpsertOne {
	return u.Update(func(s *MissionBatchUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *MissionBatchUpsertOne) AddCreatedBy(v int64) *MissionBatchUpsertOne {
	return u.Update(func(s *MissionBatchUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MissionBatchUpsertOne) UpdateCreatedBy() *MissionBatchUpsertOne {
	return u.Update(func(s *MissionBatchUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MissionBatchUpsertOne) SetUpdatedBy(v int64) *MissionBatchUpsertOne {
	return u.Update(func(s *MissionBatchUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MissionBatchUpsertOne) AddUpdatedBy(v int64) *MissionBatchUpsertOne {
	return u.Update(func(s *MissionBatchUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MissionBatchUpsertOne) UpdateUpdatedBy() *MissionBatchUpsertOne {
	return u.Update(func(s *MissionBatchUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MissionBatchUpsertOne) SetUpdatedAt(v time.Time) *MissionBatchUpsertOne {
	return u.Update(func(s *MissionBatchUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MissionBatchUpsertOne) UpdateUpdatedAt() *MissionBatchUpsertOne {
	return u.Update(func(s *MissionBatchUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MissionBatchUpsertOne) SetDeletedAt(v time.Time) *MissionBatchUpsertOne {
	return u.Update(func(s *MissionBatchUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MissionBatchUpsertOne) UpdateDeletedAt() *MissionBatchUpsertOne {
	return u.Update(func(s *MissionBatchUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetNumber sets the "number" field.
func (u *MissionBatchUpsertOne) SetNumber(v string) *MissionBatchUpsertOne {
	return u.Update(func(s *MissionBatchUpsert) {
		s.SetNumber(v)
	})
}

// UpdateNumber sets the "number" field to the value that was provided on create.
func (u *MissionBatchUpsertOne) UpdateNumber() *MissionBatchUpsertOne {
	return u.Update(func(s *MissionBatchUpsert) {
		s.UpdateNumber()
	})
}

// SetUserID sets the "user_id" field.
func (u *MissionBatchUpsertOne) SetUserID(v int64) *MissionBatchUpsertOne {
	return u.Update(func(s *MissionBatchUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *MissionBatchUpsertOne) UpdateUserID() *MissionBatchUpsertOne {
	return u.Update(func(s *MissionBatchUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *MissionBatchUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for MissionBatchCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MissionBatchUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MissionBatchUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MissionBatchUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MissionBatchCreateBulk is the builder for creating many MissionBatch entities in bulk.
type MissionBatchCreateBulk struct {
	config
	err      error
	builders []*MissionBatchCreate
	conflict []sql.ConflictOption
}

// Save creates the MissionBatch entities in the database.
func (mbcb *MissionBatchCreateBulk) Save(ctx context.Context) ([]*MissionBatch, error) {
	if mbcb.err != nil {
		return nil, mbcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mbcb.builders))
	nodes := make([]*MissionBatch, len(mbcb.builders))
	mutators := make([]Mutator, len(mbcb.builders))
	for i := range mbcb.builders {
		func(i int, root context.Context) {
			builder := mbcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MissionBatchMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mbcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mbcb *MissionBatchCreateBulk) SaveX(ctx context.Context) []*MissionBatch {
	v, err := mbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mbcb *MissionBatchCreateBulk) Exec(ctx context.Context) error {
	_, err := mbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mbcb *MissionBatchCreateBulk) ExecX(ctx context.Context) {
	if err := mbcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MissionBatch.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MissionBatchUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (mbcb *MissionBatchCreateBulk) OnConflict(opts ...sql.ConflictOption) *MissionBatchUpsertBulk {
	mbcb.conflict = opts
	return &MissionBatchUpsertBulk{
		create: mbcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MissionBatch.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mbcb *MissionBatchCreateBulk) OnConflictColumns(columns ...string) *MissionBatchUpsertBulk {
	mbcb.conflict = append(mbcb.conflict, sql.ConflictColumns(columns...))
	return &MissionBatchUpsertBulk{
		create: mbcb,
	}
}

// MissionBatchUpsertBulk is the builder for "upsert"-ing
// a bulk of MissionBatch nodes.
type MissionBatchUpsertBulk struct {
	create *MissionBatchCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MissionBatch.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(missionbatch.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MissionBatchUpsertBulk) UpdateNewValues() *MissionBatchUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(missionbatch.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(missionbatch.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MissionBatch.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MissionBatchUpsertBulk) Ignore() *MissionBatchUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MissionBatchUpsertBulk) DoNothing() *MissionBatchUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MissionBatchCreateBulk.OnConflict
// documentation for more info.
func (u *MissionBatchUpsertBulk) Update(set func(*MissionBatchUpsert)) *MissionBatchUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MissionBatchUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *MissionBatchUpsertBulk) SetCreatedBy(v int64) *MissionBatchUpsertBulk {
	return u.Update(func(s *MissionBatchUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *MissionBatchUpsertBulk) AddCreatedBy(v int64) *MissionBatchUpsertBulk {
	return u.Update(func(s *MissionBatchUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MissionBatchUpsertBulk) UpdateCreatedBy() *MissionBatchUpsertBulk {
	return u.Update(func(s *MissionBatchUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MissionBatchUpsertBulk) SetUpdatedBy(v int64) *MissionBatchUpsertBulk {
	return u.Update(func(s *MissionBatchUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MissionBatchUpsertBulk) AddUpdatedBy(v int64) *MissionBatchUpsertBulk {
	return u.Update(func(s *MissionBatchUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MissionBatchUpsertBulk) UpdateUpdatedBy() *MissionBatchUpsertBulk {
	return u.Update(func(s *MissionBatchUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MissionBatchUpsertBulk) SetUpdatedAt(v time.Time) *MissionBatchUpsertBulk {
	return u.Update(func(s *MissionBatchUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MissionBatchUpsertBulk) UpdateUpdatedAt() *MissionBatchUpsertBulk {
	return u.Update(func(s *MissionBatchUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MissionBatchUpsertBulk) SetDeletedAt(v time.Time) *MissionBatchUpsertBulk {
	return u.Update(func(s *MissionBatchUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MissionBatchUpsertBulk) UpdateDeletedAt() *MissionBatchUpsertBulk {
	return u.Update(func(s *MissionBatchUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetNumber sets the "number" field.
func (u *MissionBatchUpsertBulk) SetNumber(v string) *MissionBatchUpsertBulk {
	return u.Update(func(s *MissionBatchUpsert) {
		s.SetNumber(v)
	})
}

// UpdateNumber sets the "number" field to the value that was provided on create.
func (u *MissionBatchUpsertBulk) UpdateNumber() *MissionBatchUpsertBulk {
	return u.Update(func(s *MissionBatchUpsert) {
		s.UpdateNumber()
	})
}

// SetUserID sets the "user_id" field.
func (u *MissionBatchUpsertBulk) SetUserID(v int64) *MissionBatchUpsertBulk {
	return u.Update(func(s *MissionBatchUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *MissionBatchUpsertBulk) UpdateUserID() *MissionBatchUpsertBulk {
	return u.Update(func(s *MissionBatchUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *MissionBatchUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the MissionBatchCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for MissionBatchCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MissionBatchUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
