// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/profitaccount"
	"cephalon-ent/pkg/cep_ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProfitAccount is the model entity for the ProfitAccount schema.
type ProfitAccount struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int64 `json:"created_by"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int64 `json:"updated_by"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at"`
	// 外键用户 id
	UserID int64 `json:"user_id"`
	// 累计分润余额
	SumCep int64 `json:"sum_cep"`
	// 剩余分润余额，未提现的
	RemainCep int64 `json:"remain_cep"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProfitAccountQuery when eager-loading is set.
	Edges        ProfitAccountEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProfitAccountEdges holds the relations/edges for other nodes in the graph.
type ProfitAccountEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// EarnBills holds the value of the earn_bills edge.
	EarnBills []*EarnBill `json:"earn_bills,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProfitAccountEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// EarnBillsOrErr returns the EarnBills value or an error if the edge
// was not loaded in eager-loading.
func (e ProfitAccountEdges) EarnBillsOrErr() ([]*EarnBill, error) {
	if e.loadedTypes[1] {
		return e.EarnBills, nil
	}
	return nil, &NotLoadedError{edge: "earn_bills"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProfitAccount) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case profitaccount.FieldID, profitaccount.FieldCreatedBy, profitaccount.FieldUpdatedBy, profitaccount.FieldUserID, profitaccount.FieldSumCep, profitaccount.FieldRemainCep:
			values[i] = new(sql.NullInt64)
		case profitaccount.FieldCreatedAt, profitaccount.FieldUpdatedAt, profitaccount.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProfitAccount fields.
func (pa *ProfitAccount) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case profitaccount.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = int64(value.Int64)
		case profitaccount.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				pa.CreatedBy = value.Int64
			}
		case profitaccount.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				pa.UpdatedBy = value.Int64
			}
		case profitaccount.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pa.CreatedAt = value.Time
			}
		case profitaccount.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pa.UpdatedAt = value.Time
			}
		case profitaccount.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pa.DeletedAt = value.Time
			}
		case profitaccount.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				pa.UserID = value.Int64
			}
		case profitaccount.FieldSumCep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sum_cep", values[i])
			} else if value.Valid {
				pa.SumCep = value.Int64
			}
		case profitaccount.FieldRemainCep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field remain_cep", values[i])
			} else if value.Valid {
				pa.RemainCep = value.Int64
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProfitAccount.
// This includes values selected through modifiers, order, etc.
func (pa *ProfitAccount) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the ProfitAccount entity.
func (pa *ProfitAccount) QueryUser() *UserQuery {
	return NewProfitAccountClient(pa.config).QueryUser(pa)
}

// QueryEarnBills queries the "earn_bills" edge of the ProfitAccount entity.
func (pa *ProfitAccount) QueryEarnBills() *EarnBillQuery {
	return NewProfitAccountClient(pa.config).QueryEarnBills(pa)
}

// Update returns a builder for updating this ProfitAccount.
// Note that you need to call ProfitAccount.Unwrap() before calling this method if this ProfitAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *ProfitAccount) Update() *ProfitAccountUpdateOne {
	return NewProfitAccountClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the ProfitAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *ProfitAccount) Unwrap() *ProfitAccount {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("cep_ent: ProfitAccount is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *ProfitAccount) String() string {
	var builder strings.Builder
	builder.WriteString("ProfitAccount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", pa.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", pa.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(pa.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.UserID))
	builder.WriteString(", ")
	builder.WriteString("sum_cep=")
	builder.WriteString(fmt.Sprintf("%v", pa.SumCep))
	builder.WriteString(", ")
	builder.WriteString("remain_cep=")
	builder.WriteString(fmt.Sprintf("%v", pa.RemainCep))
	builder.WriteByte(')')
	return builder.String()
}

// ProfitAccounts is a parsable slice of ProfitAccount.
type ProfitAccounts []*ProfitAccount
