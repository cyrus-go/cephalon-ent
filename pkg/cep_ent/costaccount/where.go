// Code generated by ent, DO NOT EDIT.

package costaccount

import (
	"cephalon-ent/pkg/cep_ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldLTE(FieldID, id))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldEQ(FieldDeletedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldEQ(FieldUserID, v))
}

// TotalCep applies equality check predicate on the "total_cep" field. It's identical to TotalCepEQ.
func TotalCep(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldEQ(FieldTotalCep, v))
}

// SumTotalCep applies equality check predicate on the "sum_total_cep" field. It's identical to SumTotalCepEQ.
func SumTotalCep(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldEQ(FieldSumTotalCep, v))
}

// FrozenTotalCep applies equality check predicate on the "frozen_total_cep" field. It's identical to FrozenTotalCepEQ.
func FrozenTotalCep(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldEQ(FieldFrozenTotalCep, v))
}

// PureCep applies equality check predicate on the "pure_cep" field. It's identical to PureCepEQ.
func PureCep(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldEQ(FieldPureCep, v))
}

// SumPureCep applies equality check predicate on the "sum_pure_cep" field. It's identical to SumPureCepEQ.
func SumPureCep(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldEQ(FieldSumPureCep, v))
}

// FrozenPureCep applies equality check predicate on the "frozen_pure_cep" field. It's identical to FrozenPureCepEQ.
func FrozenPureCep(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldEQ(FieldFrozenPureCep, v))
}

// GiftCep applies equality check predicate on the "gift_cep" field. It's identical to GiftCepEQ.
func GiftCep(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldEQ(FieldGiftCep, v))
}

// SumGiftCep applies equality check predicate on the "sum_gift_cep" field. It's identical to SumGiftCepEQ.
func SumGiftCep(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldEQ(FieldSumGiftCep, v))
}

// FrozenGiftCep applies equality check predicate on the "frozen_gift_cep" field. It's identical to FrozenGiftCepEQ.
func FrozenGiftCep(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldEQ(FieldFrozenGiftCep, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldLTE(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldLTE(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldLTE(FieldDeletedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldNotIn(FieldUserID, vs...))
}

// TotalCepEQ applies the EQ predicate on the "total_cep" field.
func TotalCepEQ(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldEQ(FieldTotalCep, v))
}

// TotalCepNEQ applies the NEQ predicate on the "total_cep" field.
func TotalCepNEQ(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldNEQ(FieldTotalCep, v))
}

// TotalCepIn applies the In predicate on the "total_cep" field.
func TotalCepIn(vs ...int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldIn(FieldTotalCep, vs...))
}

// TotalCepNotIn applies the NotIn predicate on the "total_cep" field.
func TotalCepNotIn(vs ...int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldNotIn(FieldTotalCep, vs...))
}

// TotalCepGT applies the GT predicate on the "total_cep" field.
func TotalCepGT(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldGT(FieldTotalCep, v))
}

// TotalCepGTE applies the GTE predicate on the "total_cep" field.
func TotalCepGTE(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldGTE(FieldTotalCep, v))
}

// TotalCepLT applies the LT predicate on the "total_cep" field.
func TotalCepLT(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldLT(FieldTotalCep, v))
}

// TotalCepLTE applies the LTE predicate on the "total_cep" field.
func TotalCepLTE(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldLTE(FieldTotalCep, v))
}

// SumTotalCepEQ applies the EQ predicate on the "sum_total_cep" field.
func SumTotalCepEQ(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldEQ(FieldSumTotalCep, v))
}

// SumTotalCepNEQ applies the NEQ predicate on the "sum_total_cep" field.
func SumTotalCepNEQ(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldNEQ(FieldSumTotalCep, v))
}

// SumTotalCepIn applies the In predicate on the "sum_total_cep" field.
func SumTotalCepIn(vs ...int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldIn(FieldSumTotalCep, vs...))
}

// SumTotalCepNotIn applies the NotIn predicate on the "sum_total_cep" field.
func SumTotalCepNotIn(vs ...int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldNotIn(FieldSumTotalCep, vs...))
}

// SumTotalCepGT applies the GT predicate on the "sum_total_cep" field.
func SumTotalCepGT(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldGT(FieldSumTotalCep, v))
}

// SumTotalCepGTE applies the GTE predicate on the "sum_total_cep" field.
func SumTotalCepGTE(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldGTE(FieldSumTotalCep, v))
}

// SumTotalCepLT applies the LT predicate on the "sum_total_cep" field.
func SumTotalCepLT(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldLT(FieldSumTotalCep, v))
}

// SumTotalCepLTE applies the LTE predicate on the "sum_total_cep" field.
func SumTotalCepLTE(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldLTE(FieldSumTotalCep, v))
}

// FrozenTotalCepEQ applies the EQ predicate on the "frozen_total_cep" field.
func FrozenTotalCepEQ(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldEQ(FieldFrozenTotalCep, v))
}

// FrozenTotalCepNEQ applies the NEQ predicate on the "frozen_total_cep" field.
func FrozenTotalCepNEQ(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldNEQ(FieldFrozenTotalCep, v))
}

// FrozenTotalCepIn applies the In predicate on the "frozen_total_cep" field.
func FrozenTotalCepIn(vs ...int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldIn(FieldFrozenTotalCep, vs...))
}

// FrozenTotalCepNotIn applies the NotIn predicate on the "frozen_total_cep" field.
func FrozenTotalCepNotIn(vs ...int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldNotIn(FieldFrozenTotalCep, vs...))
}

// FrozenTotalCepGT applies the GT predicate on the "frozen_total_cep" field.
func FrozenTotalCepGT(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldGT(FieldFrozenTotalCep, v))
}

// FrozenTotalCepGTE applies the GTE predicate on the "frozen_total_cep" field.
func FrozenTotalCepGTE(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldGTE(FieldFrozenTotalCep, v))
}

// FrozenTotalCepLT applies the LT predicate on the "frozen_total_cep" field.
func FrozenTotalCepLT(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldLT(FieldFrozenTotalCep, v))
}

// FrozenTotalCepLTE applies the LTE predicate on the "frozen_total_cep" field.
func FrozenTotalCepLTE(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldLTE(FieldFrozenTotalCep, v))
}

// PureCepEQ applies the EQ predicate on the "pure_cep" field.
func PureCepEQ(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldEQ(FieldPureCep, v))
}

// PureCepNEQ applies the NEQ predicate on the "pure_cep" field.
func PureCepNEQ(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldNEQ(FieldPureCep, v))
}

// PureCepIn applies the In predicate on the "pure_cep" field.
func PureCepIn(vs ...int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldIn(FieldPureCep, vs...))
}

// PureCepNotIn applies the NotIn predicate on the "pure_cep" field.
func PureCepNotIn(vs ...int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldNotIn(FieldPureCep, vs...))
}

// PureCepGT applies the GT predicate on the "pure_cep" field.
func PureCepGT(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldGT(FieldPureCep, v))
}

// PureCepGTE applies the GTE predicate on the "pure_cep" field.
func PureCepGTE(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldGTE(FieldPureCep, v))
}

// PureCepLT applies the LT predicate on the "pure_cep" field.
func PureCepLT(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldLT(FieldPureCep, v))
}

// PureCepLTE applies the LTE predicate on the "pure_cep" field.
func PureCepLTE(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldLTE(FieldPureCep, v))
}

// SumPureCepEQ applies the EQ predicate on the "sum_pure_cep" field.
func SumPureCepEQ(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldEQ(FieldSumPureCep, v))
}

// SumPureCepNEQ applies the NEQ predicate on the "sum_pure_cep" field.
func SumPureCepNEQ(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldNEQ(FieldSumPureCep, v))
}

// SumPureCepIn applies the In predicate on the "sum_pure_cep" field.
func SumPureCepIn(vs ...int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldIn(FieldSumPureCep, vs...))
}

// SumPureCepNotIn applies the NotIn predicate on the "sum_pure_cep" field.
func SumPureCepNotIn(vs ...int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldNotIn(FieldSumPureCep, vs...))
}

// SumPureCepGT applies the GT predicate on the "sum_pure_cep" field.
func SumPureCepGT(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldGT(FieldSumPureCep, v))
}

// SumPureCepGTE applies the GTE predicate on the "sum_pure_cep" field.
func SumPureCepGTE(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldGTE(FieldSumPureCep, v))
}

// SumPureCepLT applies the LT predicate on the "sum_pure_cep" field.
func SumPureCepLT(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldLT(FieldSumPureCep, v))
}

// SumPureCepLTE applies the LTE predicate on the "sum_pure_cep" field.
func SumPureCepLTE(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldLTE(FieldSumPureCep, v))
}

// FrozenPureCepEQ applies the EQ predicate on the "frozen_pure_cep" field.
func FrozenPureCepEQ(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldEQ(FieldFrozenPureCep, v))
}

// FrozenPureCepNEQ applies the NEQ predicate on the "frozen_pure_cep" field.
func FrozenPureCepNEQ(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldNEQ(FieldFrozenPureCep, v))
}

// FrozenPureCepIn applies the In predicate on the "frozen_pure_cep" field.
func FrozenPureCepIn(vs ...int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldIn(FieldFrozenPureCep, vs...))
}

// FrozenPureCepNotIn applies the NotIn predicate on the "frozen_pure_cep" field.
func FrozenPureCepNotIn(vs ...int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldNotIn(FieldFrozenPureCep, vs...))
}

// FrozenPureCepGT applies the GT predicate on the "frozen_pure_cep" field.
func FrozenPureCepGT(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldGT(FieldFrozenPureCep, v))
}

// FrozenPureCepGTE applies the GTE predicate on the "frozen_pure_cep" field.
func FrozenPureCepGTE(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldGTE(FieldFrozenPureCep, v))
}

// FrozenPureCepLT applies the LT predicate on the "frozen_pure_cep" field.
func FrozenPureCepLT(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldLT(FieldFrozenPureCep, v))
}

// FrozenPureCepLTE applies the LTE predicate on the "frozen_pure_cep" field.
func FrozenPureCepLTE(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldLTE(FieldFrozenPureCep, v))
}

// GiftCepEQ applies the EQ predicate on the "gift_cep" field.
func GiftCepEQ(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldEQ(FieldGiftCep, v))
}

// GiftCepNEQ applies the NEQ predicate on the "gift_cep" field.
func GiftCepNEQ(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldNEQ(FieldGiftCep, v))
}

// GiftCepIn applies the In predicate on the "gift_cep" field.
func GiftCepIn(vs ...int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldIn(FieldGiftCep, vs...))
}

// GiftCepNotIn applies the NotIn predicate on the "gift_cep" field.
func GiftCepNotIn(vs ...int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldNotIn(FieldGiftCep, vs...))
}

// GiftCepGT applies the GT predicate on the "gift_cep" field.
func GiftCepGT(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldGT(FieldGiftCep, v))
}

// GiftCepGTE applies the GTE predicate on the "gift_cep" field.
func GiftCepGTE(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldGTE(FieldGiftCep, v))
}

// GiftCepLT applies the LT predicate on the "gift_cep" field.
func GiftCepLT(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldLT(FieldGiftCep, v))
}

// GiftCepLTE applies the LTE predicate on the "gift_cep" field.
func GiftCepLTE(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldLTE(FieldGiftCep, v))
}

// SumGiftCepEQ applies the EQ predicate on the "sum_gift_cep" field.
func SumGiftCepEQ(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldEQ(FieldSumGiftCep, v))
}

// SumGiftCepNEQ applies the NEQ predicate on the "sum_gift_cep" field.
func SumGiftCepNEQ(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldNEQ(FieldSumGiftCep, v))
}

// SumGiftCepIn applies the In predicate on the "sum_gift_cep" field.
func SumGiftCepIn(vs ...int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldIn(FieldSumGiftCep, vs...))
}

// SumGiftCepNotIn applies the NotIn predicate on the "sum_gift_cep" field.
func SumGiftCepNotIn(vs ...int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldNotIn(FieldSumGiftCep, vs...))
}

// SumGiftCepGT applies the GT predicate on the "sum_gift_cep" field.
func SumGiftCepGT(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldGT(FieldSumGiftCep, v))
}

// SumGiftCepGTE applies the GTE predicate on the "sum_gift_cep" field.
func SumGiftCepGTE(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldGTE(FieldSumGiftCep, v))
}

// SumGiftCepLT applies the LT predicate on the "sum_gift_cep" field.
func SumGiftCepLT(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldLT(FieldSumGiftCep, v))
}

// SumGiftCepLTE applies the LTE predicate on the "sum_gift_cep" field.
func SumGiftCepLTE(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldLTE(FieldSumGiftCep, v))
}

// FrozenGiftCepEQ applies the EQ predicate on the "frozen_gift_cep" field.
func FrozenGiftCepEQ(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldEQ(FieldFrozenGiftCep, v))
}

// FrozenGiftCepNEQ applies the NEQ predicate on the "frozen_gift_cep" field.
func FrozenGiftCepNEQ(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldNEQ(FieldFrozenGiftCep, v))
}

// FrozenGiftCepIn applies the In predicate on the "frozen_gift_cep" field.
func FrozenGiftCepIn(vs ...int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldIn(FieldFrozenGiftCep, vs...))
}

// FrozenGiftCepNotIn applies the NotIn predicate on the "frozen_gift_cep" field.
func FrozenGiftCepNotIn(vs ...int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldNotIn(FieldFrozenGiftCep, vs...))
}

// FrozenGiftCepGT applies the GT predicate on the "frozen_gift_cep" field.
func FrozenGiftCepGT(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldGT(FieldFrozenGiftCep, v))
}

// FrozenGiftCepGTE applies the GTE predicate on the "frozen_gift_cep" field.
func FrozenGiftCepGTE(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldGTE(FieldFrozenGiftCep, v))
}

// FrozenGiftCepLT applies the LT predicate on the "frozen_gift_cep" field.
func FrozenGiftCepLT(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldLT(FieldFrozenGiftCep, v))
}

// FrozenGiftCepLTE applies the LTE predicate on the "frozen_gift_cep" field.
func FrozenGiftCepLTE(v int64) predicate.CostAccount {
	return predicate.CostAccount(sql.FieldLTE(FieldFrozenGiftCep, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.CostAccount {
	return predicate.CostAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.CostAccount {
	return predicate.CostAccount(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCostBills applies the HasEdge predicate on the "cost_bills" edge.
func HasCostBills() predicate.CostAccount {
	return predicate.CostAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CostBillsTable, CostBillsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCostBillsWith applies the HasEdge predicate on the "cost_bills" edge with a given conditions (other predicates).
func HasCostBillsWith(preds ...predicate.CostBill) predicate.CostAccount {
	return predicate.CostAccount(func(s *sql.Selector) {
		step := newCostBillsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CostAccount) predicate.CostAccount {
	return predicate.CostAccount(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CostAccount) predicate.CostAccount {
	return predicate.CostAccount(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CostAccount) predicate.CostAccount {
	return predicate.CostAccount(func(s *sql.Selector) {
		p(s.Not())
	})
}
