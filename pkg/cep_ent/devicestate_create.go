// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/device"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/devicestate"
)

// DeviceStateCreate is the builder for creating a DeviceState entity.
type DeviceStateCreate struct {
	config
	mutation *DeviceStateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (dsc *DeviceStateCreate) SetCreatedBy(i int64) *DeviceStateCreate {
	dsc.mutation.SetCreatedBy(i)
	return dsc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (dsc *DeviceStateCreate) SetNillableCreatedBy(i *int64) *DeviceStateCreate {
	if i != nil {
		dsc.SetCreatedBy(*i)
	}
	return dsc
}

// SetUpdatedBy sets the "updated_by" field.
func (dsc *DeviceStateCreate) SetUpdatedBy(i int64) *DeviceStateCreate {
	dsc.mutation.SetUpdatedBy(i)
	return dsc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dsc *DeviceStateCreate) SetNillableUpdatedBy(i *int64) *DeviceStateCreate {
	if i != nil {
		dsc.SetUpdatedBy(*i)
	}
	return dsc
}

// SetCreatedAt sets the "created_at" field.
func (dsc *DeviceStateCreate) SetCreatedAt(t time.Time) *DeviceStateCreate {
	dsc.mutation.SetCreatedAt(t)
	return dsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dsc *DeviceStateCreate) SetNillableCreatedAt(t *time.Time) *DeviceStateCreate {
	if t != nil {
		dsc.SetCreatedAt(*t)
	}
	return dsc
}

// SetUpdatedAt sets the "updated_at" field.
func (dsc *DeviceStateCreate) SetUpdatedAt(t time.Time) *DeviceStateCreate {
	dsc.mutation.SetUpdatedAt(t)
	return dsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dsc *DeviceStateCreate) SetNillableUpdatedAt(t *time.Time) *DeviceStateCreate {
	if t != nil {
		dsc.SetUpdatedAt(*t)
	}
	return dsc
}

// SetDeletedAt sets the "deleted_at" field.
func (dsc *DeviceStateCreate) SetDeletedAt(t time.Time) *DeviceStateCreate {
	dsc.mutation.SetDeletedAt(t)
	return dsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dsc *DeviceStateCreate) SetNillableDeletedAt(t *time.Time) *DeviceStateCreate {
	if t != nil {
		dsc.SetDeletedAt(*t)
	}
	return dsc
}

// SetDeviceID sets the "device_id" field.
func (dsc *DeviceStateCreate) SetDeviceID(i int64) *DeviceStateCreate {
	dsc.mutation.SetDeviceID(i)
	return dsc
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (dsc *DeviceStateCreate) SetNillableDeviceID(i *int64) *DeviceStateCreate {
	if i != nil {
		dsc.SetDeviceID(*i)
	}
	return dsc
}

// SetDelay sets the "delay" field.
func (dsc *DeviceStateCreate) SetDelay(f float64) *DeviceStateCreate {
	dsc.mutation.SetDelay(f)
	return dsc
}

// SetNillableDelay sets the "delay" field if the given value is not nil.
func (dsc *DeviceStateCreate) SetNillableDelay(f *float64) *DeviceStateCreate {
	if f != nil {
		dsc.SetDelay(*f)
	}
	return dsc
}

// SetID sets the "id" field.
func (dsc *DeviceStateCreate) SetID(i int64) *DeviceStateCreate {
	dsc.mutation.SetID(i)
	return dsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dsc *DeviceStateCreate) SetNillableID(i *int64) *DeviceStateCreate {
	if i != nil {
		dsc.SetID(*i)
	}
	return dsc
}

// SetDevice sets the "device" edge to the Device entity.
func (dsc *DeviceStateCreate) SetDevice(d *Device) *DeviceStateCreate {
	return dsc.SetDeviceID(d.ID)
}

// Mutation returns the DeviceStateMutation object of the builder.
func (dsc *DeviceStateCreate) Mutation() *DeviceStateMutation {
	return dsc.mutation
}

// Save creates the DeviceState in the database.
func (dsc *DeviceStateCreate) Save(ctx context.Context) (*DeviceState, error) {
	dsc.defaults()
	return withHooks(ctx, dsc.sqlSave, dsc.mutation, dsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dsc *DeviceStateCreate) SaveX(ctx context.Context) *DeviceState {
	v, err := dsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dsc *DeviceStateCreate) Exec(ctx context.Context) error {
	_, err := dsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dsc *DeviceStateCreate) ExecX(ctx context.Context) {
	if err := dsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dsc *DeviceStateCreate) defaults() {
	if _, ok := dsc.mutation.CreatedBy(); !ok {
		v := devicestate.DefaultCreatedBy
		dsc.mutation.SetCreatedBy(v)
	}
	if _, ok := dsc.mutation.UpdatedBy(); !ok {
		v := devicestate.DefaultUpdatedBy
		dsc.mutation.SetUpdatedBy(v)
	}
	if _, ok := dsc.mutation.CreatedAt(); !ok {
		v := devicestate.DefaultCreatedAt()
		dsc.mutation.SetCreatedAt(v)
	}
	if _, ok := dsc.mutation.UpdatedAt(); !ok {
		v := devicestate.DefaultUpdatedAt()
		dsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dsc.mutation.DeletedAt(); !ok {
		v := devicestate.DefaultDeletedAt
		dsc.mutation.SetDeletedAt(v)
	}
	if _, ok := dsc.mutation.DeviceID(); !ok {
		v := devicestate.DefaultDeviceID
		dsc.mutation.SetDeviceID(v)
	}
	if _, ok := dsc.mutation.Delay(); !ok {
		v := devicestate.DefaultDelay
		dsc.mutation.SetDelay(v)
	}
	if _, ok := dsc.mutation.ID(); !ok {
		v := devicestate.DefaultID()
		dsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dsc *DeviceStateCreate) check() error {
	if _, ok := dsc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "DeviceState.created_by"`)}
	}
	if _, ok := dsc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "DeviceState.updated_by"`)}
	}
	if _, ok := dsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "DeviceState.created_at"`)}
	}
	if _, ok := dsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "DeviceState.updated_at"`)}
	}
	if _, ok := dsc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "DeviceState.deleted_at"`)}
	}
	if _, ok := dsc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`cep_ent: missing required field "DeviceState.device_id"`)}
	}
	if _, ok := dsc.mutation.Delay(); !ok {
		return &ValidationError{Name: "delay", err: errors.New(`cep_ent: missing required field "DeviceState.delay"`)}
	}
	if _, ok := dsc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device", err: errors.New(`cep_ent: missing required edge "DeviceState.device"`)}
	}
	return nil
}

func (dsc *DeviceStateCreate) sqlSave(ctx context.Context) (*DeviceState, error) {
	if err := dsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	dsc.mutation.id = &_node.ID
	dsc.mutation.done = true
	return _node, nil
}

func (dsc *DeviceStateCreate) createSpec() (*DeviceState, *sqlgraph.CreateSpec) {
	var (
		_node = &DeviceState{config: dsc.config}
		_spec = sqlgraph.NewCreateSpec(devicestate.Table, sqlgraph.NewFieldSpec(devicestate.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = dsc.conflict
	if id, ok := dsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dsc.mutation.CreatedBy(); ok {
		_spec.SetField(devicestate.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := dsc.mutation.UpdatedBy(); ok {
		_spec.SetField(devicestate.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := dsc.mutation.CreatedAt(); ok {
		_spec.SetField(devicestate.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dsc.mutation.UpdatedAt(); ok {
		_spec.SetField(devicestate.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := dsc.mutation.DeletedAt(); ok {
		_spec.SetField(devicestate.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := dsc.mutation.Delay(); ok {
		_spec.SetField(devicestate.FieldDelay, field.TypeFloat64, value)
		_node.Delay = value
	}
	if nodes := dsc.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   devicestate.DeviceTable,
			Columns: []string{devicestate.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DeviceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeviceState.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeviceStateUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (dsc *DeviceStateCreate) OnConflict(opts ...sql.ConflictOption) *DeviceStateUpsertOne {
	dsc.conflict = opts
	return &DeviceStateUpsertOne{
		create: dsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeviceState.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dsc *DeviceStateCreate) OnConflictColumns(columns ...string) *DeviceStateUpsertOne {
	dsc.conflict = append(dsc.conflict, sql.ConflictColumns(columns...))
	return &DeviceStateUpsertOne{
		create: dsc,
	}
}

type (
	// DeviceStateUpsertOne is the builder for "upsert"-ing
	//  one DeviceState node.
	DeviceStateUpsertOne struct {
		create *DeviceStateCreate
	}

	// DeviceStateUpsert is the "OnConflict" setter.
	DeviceStateUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *DeviceStateUpsert) SetCreatedBy(v int64) *DeviceStateUpsert {
	u.Set(devicestate.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *DeviceStateUpsert) UpdateCreatedBy() *DeviceStateUpsert {
	u.SetExcluded(devicestate.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *DeviceStateUpsert) AddCreatedBy(v int64) *DeviceStateUpsert {
	u.Add(devicestate.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *DeviceStateUpsert) SetUpdatedBy(v int64) *DeviceStateUpsert {
	u.Set(devicestate.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *DeviceStateUpsert) UpdateUpdatedBy() *DeviceStateUpsert {
	u.SetExcluded(devicestate.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *DeviceStateUpsert) AddUpdatedBy(v int64) *DeviceStateUpsert {
	u.Add(devicestate.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeviceStateUpsert) SetUpdatedAt(v time.Time) *DeviceStateUpsert {
	u.Set(devicestate.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeviceStateUpsert) UpdateUpdatedAt() *DeviceStateUpsert {
	u.SetExcluded(devicestate.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DeviceStateUpsert) SetDeletedAt(v time.Time) *DeviceStateUpsert {
	u.Set(devicestate.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DeviceStateUpsert) UpdateDeletedAt() *DeviceStateUpsert {
	u.SetExcluded(devicestate.FieldDeletedAt)
	return u
}

// SetDeviceID sets the "device_id" field.
func (u *DeviceStateUpsert) SetDeviceID(v int64) *DeviceStateUpsert {
	u.Set(devicestate.FieldDeviceID, v)
	return u
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *DeviceStateUpsert) UpdateDeviceID() *DeviceStateUpsert {
	u.SetExcluded(devicestate.FieldDeviceID)
	return u
}

// SetDelay sets the "delay" field.
func (u *DeviceStateUpsert) SetDelay(v float64) *DeviceStateUpsert {
	u.Set(devicestate.FieldDelay, v)
	return u
}

// UpdateDelay sets the "delay" field to the value that was provided on create.
func (u *DeviceStateUpsert) UpdateDelay() *DeviceStateUpsert {
	u.SetExcluded(devicestate.FieldDelay)
	return u
}

// AddDelay adds v to the "delay" field.
func (u *DeviceStateUpsert) AddDelay(v float64) *DeviceStateUpsert {
	u.Add(devicestate.FieldDelay, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DeviceState.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(devicestate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DeviceStateUpsertOne) UpdateNewValues() *DeviceStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(devicestate.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(devicestate.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeviceState.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DeviceStateUpsertOne) Ignore() *DeviceStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeviceStateUpsertOne) DoNothing() *DeviceStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeviceStateCreate.OnConflict
// documentation for more info.
func (u *DeviceStateUpsertOne) Update(set func(*DeviceStateUpsert)) *DeviceStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeviceStateUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *DeviceStateUpsertOne) SetCreatedBy(v int64) *DeviceStateUpsertOne {
	return u.Update(func(s *DeviceStateUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *DeviceStateUpsertOne) AddCreatedBy(v int64) *DeviceStateUpsertOne {
	return u.Update(func(s *DeviceStateUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *DeviceStateUpsertOne) UpdateCreatedBy() *DeviceStateUpsertOne {
	return u.Update(func(s *DeviceStateUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *DeviceStateUpsertOne) SetUpdatedBy(v int64) *DeviceStateUpsertOne {
	return u.Update(func(s *DeviceStateUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *DeviceStateUpsertOne) AddUpdatedBy(v int64) *DeviceStateUpsertOne {
	return u.Update(func(s *DeviceStateUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *DeviceStateUpsertOne) UpdateUpdatedBy() *DeviceStateUpsertOne {
	return u.Update(func(s *DeviceStateUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeviceStateUpsertOne) SetUpdatedAt(v time.Time) *DeviceStateUpsertOne {
	return u.Update(func(s *DeviceStateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeviceStateUpsertOne) UpdateUpdatedAt() *DeviceStateUpsertOne {
	return u.Update(func(s *DeviceStateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DeviceStateUpsertOne) SetDeletedAt(v time.Time) *DeviceStateUpsertOne {
	return u.Update(func(s *DeviceStateUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DeviceStateUpsertOne) UpdateDeletedAt() *DeviceStateUpsertOne {
	return u.Update(func(s *DeviceStateUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeviceID sets the "device_id" field.
func (u *DeviceStateUpsertOne) SetDeviceID(v int64) *DeviceStateUpsertOne {
	return u.Update(func(s *DeviceStateUpsert) {
		s.SetDeviceID(v)
	})
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *DeviceStateUpsertOne) UpdateDeviceID() *DeviceStateUpsertOne {
	return u.Update(func(s *DeviceStateUpsert) {
		s.UpdateDeviceID()
	})
}

// SetDelay sets the "delay" field.
func (u *DeviceStateUpsertOne) SetDelay(v float64) *DeviceStateUpsertOne {
	return u.Update(func(s *DeviceStateUpsert) {
		s.SetDelay(v)
	})
}

// AddDelay adds v to the "delay" field.
func (u *DeviceStateUpsertOne) AddDelay(v float64) *DeviceStateUpsertOne {
	return u.Update(func(s *DeviceStateUpsert) {
		s.AddDelay(v)
	})
}

// UpdateDelay sets the "delay" field to the value that was provided on create.
func (u *DeviceStateUpsertOne) UpdateDelay() *DeviceStateUpsertOne {
	return u.Update(func(s *DeviceStateUpsert) {
		s.UpdateDelay()
	})
}

// Exec executes the query.
func (u *DeviceStateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for DeviceStateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeviceStateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DeviceStateUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DeviceStateUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DeviceStateCreateBulk is the builder for creating many DeviceState entities in bulk.
type DeviceStateCreateBulk struct {
	config
	err      error
	builders []*DeviceStateCreate
	conflict []sql.ConflictOption
}

// Save creates the DeviceState entities in the database.
func (dscb *DeviceStateCreateBulk) Save(ctx context.Context) ([]*DeviceState, error) {
	if dscb.err != nil {
		return nil, dscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dscb.builders))
	nodes := make([]*DeviceState, len(dscb.builders))
	mutators := make([]Mutator, len(dscb.builders))
	for i := range dscb.builders {
		func(i int, root context.Context) {
			builder := dscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeviceStateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dscb *DeviceStateCreateBulk) SaveX(ctx context.Context) []*DeviceState {
	v, err := dscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dscb *DeviceStateCreateBulk) Exec(ctx context.Context) error {
	_, err := dscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dscb *DeviceStateCreateBulk) ExecX(ctx context.Context) {
	if err := dscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeviceState.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeviceStateUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (dscb *DeviceStateCreateBulk) OnConflict(opts ...sql.ConflictOption) *DeviceStateUpsertBulk {
	dscb.conflict = opts
	return &DeviceStateUpsertBulk{
		create: dscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeviceState.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dscb *DeviceStateCreateBulk) OnConflictColumns(columns ...string) *DeviceStateUpsertBulk {
	dscb.conflict = append(dscb.conflict, sql.ConflictColumns(columns...))
	return &DeviceStateUpsertBulk{
		create: dscb,
	}
}

// DeviceStateUpsertBulk is the builder for "upsert"-ing
// a bulk of DeviceState nodes.
type DeviceStateUpsertBulk struct {
	create *DeviceStateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DeviceState.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(devicestate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DeviceStateUpsertBulk) UpdateNewValues() *DeviceStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(devicestate.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(devicestate.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeviceState.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DeviceStateUpsertBulk) Ignore() *DeviceStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeviceStateUpsertBulk) DoNothing() *DeviceStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeviceStateCreateBulk.OnConflict
// documentation for more info.
func (u *DeviceStateUpsertBulk) Update(set func(*DeviceStateUpsert)) *DeviceStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeviceStateUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *DeviceStateUpsertBulk) SetCreatedBy(v int64) *DeviceStateUpsertBulk {
	return u.Update(func(s *DeviceStateUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *DeviceStateUpsertBulk) AddCreatedBy(v int64) *DeviceStateUpsertBulk {
	return u.Update(func(s *DeviceStateUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *DeviceStateUpsertBulk) UpdateCreatedBy() *DeviceStateUpsertBulk {
	return u.Update(func(s *DeviceStateUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *DeviceStateUpsertBulk) SetUpdatedBy(v int64) *DeviceStateUpsertBulk {
	return u.Update(func(s *DeviceStateUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *DeviceStateUpsertBulk) AddUpdatedBy(v int64) *DeviceStateUpsertBulk {
	return u.Update(func(s *DeviceStateUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *DeviceStateUpsertBulk) UpdateUpdatedBy() *DeviceStateUpsertBulk {
	return u.Update(func(s *DeviceStateUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeviceStateUpsertBulk) SetUpdatedAt(v time.Time) *DeviceStateUpsertBulk {
	return u.Update(func(s *DeviceStateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeviceStateUpsertBulk) UpdateUpdatedAt() *DeviceStateUpsertBulk {
	return u.Update(func(s *DeviceStateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DeviceStateUpsertBulk) SetDeletedAt(v time.Time) *DeviceStateUpsertBulk {
	return u.Update(func(s *DeviceStateUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DeviceStateUpsertBulk) UpdateDeletedAt() *DeviceStateUpsertBulk {
	return u.Update(func(s *DeviceStateUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeviceID sets the "device_id" field.
func (u *DeviceStateUpsertBulk) SetDeviceID(v int64) *DeviceStateUpsertBulk {
	return u.Update(func(s *DeviceStateUpsert) {
		s.SetDeviceID(v)
	})
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *DeviceStateUpsertBulk) UpdateDeviceID() *DeviceStateUpsertBulk {
	return u.Update(func(s *DeviceStateUpsert) {
		s.UpdateDeviceID()
	})
}

// SetDelay sets the "delay" field.
func (u *DeviceStateUpsertBulk) SetDelay(v float64) *DeviceStateUpsertBulk {
	return u.Update(func(s *DeviceStateUpsert) {
		s.SetDelay(v)
	})
}

// AddDelay adds v to the "delay" field.
func (u *DeviceStateUpsertBulk) AddDelay(v float64) *DeviceStateUpsertBulk {
	return u.Update(func(s *DeviceStateUpsert) {
		s.AddDelay(v)
	})
}

// UpdateDelay sets the "delay" field to the value that was provided on create.
func (u *DeviceStateUpsertBulk) UpdateDelay() *DeviceStateUpsertBulk {
	return u.Update(func(s *DeviceStateUpsert) {
		s.UpdateDelay()
	})
}

// Exec executes the query.
func (u *DeviceStateUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the DeviceStateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for DeviceStateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeviceStateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
