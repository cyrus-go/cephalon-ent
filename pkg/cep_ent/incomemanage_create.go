// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/incomemanage"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/symbol"
	"github.com/stark-sim/cephalon-ent/pkg/cep_ent/user"
	"github.com/stark-sim/cephalon-ent/pkg/enums"
)

// IncomeManageCreate is the builder for creating a IncomeManage entity.
type IncomeManageCreate struct {
	config
	mutation *IncomeManageMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (imc *IncomeManageCreate) SetCreatedBy(i int64) *IncomeManageCreate {
	imc.mutation.SetCreatedBy(i)
	return imc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (imc *IncomeManageCreate) SetNillableCreatedBy(i *int64) *IncomeManageCreate {
	if i != nil {
		imc.SetCreatedBy(*i)
	}
	return imc
}

// SetUpdatedBy sets the "updated_by" field.
func (imc *IncomeManageCreate) SetUpdatedBy(i int64) *IncomeManageCreate {
	imc.mutation.SetUpdatedBy(i)
	return imc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (imc *IncomeManageCreate) SetNillableUpdatedBy(i *int64) *IncomeManageCreate {
	if i != nil {
		imc.SetUpdatedBy(*i)
	}
	return imc
}

// SetCreatedAt sets the "created_at" field.
func (imc *IncomeManageCreate) SetCreatedAt(t time.Time) *IncomeManageCreate {
	imc.mutation.SetCreatedAt(t)
	return imc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (imc *IncomeManageCreate) SetNillableCreatedAt(t *time.Time) *IncomeManageCreate {
	if t != nil {
		imc.SetCreatedAt(*t)
	}
	return imc
}

// SetUpdatedAt sets the "updated_at" field.
func (imc *IncomeManageCreate) SetUpdatedAt(t time.Time) *IncomeManageCreate {
	imc.mutation.SetUpdatedAt(t)
	return imc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (imc *IncomeManageCreate) SetNillableUpdatedAt(t *time.Time) *IncomeManageCreate {
	if t != nil {
		imc.SetUpdatedAt(*t)
	}
	return imc
}

// SetDeletedAt sets the "deleted_at" field.
func (imc *IncomeManageCreate) SetDeletedAt(t time.Time) *IncomeManageCreate {
	imc.mutation.SetDeletedAt(t)
	return imc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (imc *IncomeManageCreate) SetNillableDeletedAt(t *time.Time) *IncomeManageCreate {
	if t != nil {
		imc.SetDeletedAt(*t)
	}
	return imc
}

// SetUserID sets the "user_id" field.
func (imc *IncomeManageCreate) SetUserID(i int64) *IncomeManageCreate {
	imc.mutation.SetUserID(i)
	return imc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (imc *IncomeManageCreate) SetNillableUserID(i *int64) *IncomeManageCreate {
	if i != nil {
		imc.SetUserID(*i)
	}
	return imc
}

// SetPhone sets the "phone" field.
func (imc *IncomeManageCreate) SetPhone(s string) *IncomeManageCreate {
	imc.mutation.SetPhone(s)
	return imc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (imc *IncomeManageCreate) SetNillablePhone(s *string) *IncomeManageCreate {
	if s != nil {
		imc.SetPhone(*s)
	}
	return imc
}

// SetType sets the "type" field.
func (imc *IncomeManageCreate) SetType(emt enums.IncomeManageType) *IncomeManageCreate {
	imc.mutation.SetType(emt)
	return imc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (imc *IncomeManageCreate) SetNillableType(emt *enums.IncomeManageType) *IncomeManageCreate {
	if emt != nil {
		imc.SetType(*emt)
	}
	return imc
}

// SetAmount sets the "amount" field.
func (imc *IncomeManageCreate) SetAmount(i int64) *IncomeManageCreate {
	imc.mutation.SetAmount(i)
	return imc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (imc *IncomeManageCreate) SetNillableAmount(i *int64) *IncomeManageCreate {
	if i != nil {
		imc.SetAmount(*i)
	}
	return imc
}

// SetReason sets the "reason" field.
func (imc *IncomeManageCreate) SetReason(s string) *IncomeManageCreate {
	imc.mutation.SetReason(s)
	return imc
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (imc *IncomeManageCreate) SetNillableReason(s *string) *IncomeManageCreate {
	if s != nil {
		imc.SetReason(*s)
	}
	return imc
}

// SetCurrentBalance sets the "current_balance" field.
func (imc *IncomeManageCreate) SetCurrentBalance(i int64) *IncomeManageCreate {
	imc.mutation.SetCurrentBalance(i)
	return imc
}

// SetNillableCurrentBalance sets the "current_balance" field if the given value is not nil.
func (imc *IncomeManageCreate) SetNillableCurrentBalance(i *int64) *IncomeManageCreate {
	if i != nil {
		imc.SetCurrentBalance(*i)
	}
	return imc
}

// SetLastEditedAt sets the "last_edited_at" field.
func (imc *IncomeManageCreate) SetLastEditedAt(t time.Time) *IncomeManageCreate {
	imc.mutation.SetLastEditedAt(t)
	return imc
}

// SetNillableLastEditedAt sets the "last_edited_at" field if the given value is not nil.
func (imc *IncomeManageCreate) SetNillableLastEditedAt(t *time.Time) *IncomeManageCreate {
	if t != nil {
		imc.SetLastEditedAt(*t)
	}
	return imc
}

// SetRejectReason sets the "reject_reason" field.
func (imc *IncomeManageCreate) SetRejectReason(s string) *IncomeManageCreate {
	imc.mutation.SetRejectReason(s)
	return imc
}

// SetNillableRejectReason sets the "reject_reason" field if the given value is not nil.
func (imc *IncomeManageCreate) SetNillableRejectReason(s *string) *IncomeManageCreate {
	if s != nil {
		imc.SetRejectReason(*s)
	}
	return imc
}

// SetStatus sets the "status" field.
func (imc *IncomeManageCreate) SetStatus(ems enums.IncomeManageStatus) *IncomeManageCreate {
	imc.mutation.SetStatus(ems)
	return imc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (imc *IncomeManageCreate) SetNillableStatus(ems *enums.IncomeManageStatus) *IncomeManageCreate {
	if ems != nil {
		imc.SetStatus(*ems)
	}
	return imc
}

// SetApproveUserID sets the "approve_user_id" field.
func (imc *IncomeManageCreate) SetApproveUserID(i int64) *IncomeManageCreate {
	imc.mutation.SetApproveUserID(i)
	return imc
}

// SetNillableApproveUserID sets the "approve_user_id" field if the given value is not nil.
func (imc *IncomeManageCreate) SetNillableApproveUserID(i *int64) *IncomeManageCreate {
	if i != nil {
		imc.SetApproveUserID(*i)
	}
	return imc
}

// SetSymbolID sets the "symbol_id" field.
func (imc *IncomeManageCreate) SetSymbolID(i int64) *IncomeManageCreate {
	imc.mutation.SetSymbolID(i)
	return imc
}

// SetNillableSymbolID sets the "symbol_id" field if the given value is not nil.
func (imc *IncomeManageCreate) SetNillableSymbolID(i *int64) *IncomeManageCreate {
	if i != nil {
		imc.SetSymbolID(*i)
	}
	return imc
}

// SetID sets the "id" field.
func (imc *IncomeManageCreate) SetID(i int64) *IncomeManageCreate {
	imc.mutation.SetID(i)
	return imc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (imc *IncomeManageCreate) SetNillableID(i *int64) *IncomeManageCreate {
	if i != nil {
		imc.SetID(*i)
	}
	return imc
}

// SetUser sets the "user" edge to the User entity.
func (imc *IncomeManageCreate) SetUser(u *User) *IncomeManageCreate {
	return imc.SetUserID(u.ID)
}

// SetApproveUser sets the "approve_user" edge to the User entity.
func (imc *IncomeManageCreate) SetApproveUser(u *User) *IncomeManageCreate {
	return imc.SetApproveUserID(u.ID)
}

// SetSymbol sets the "symbol" edge to the Symbol entity.
func (imc *IncomeManageCreate) SetSymbol(s *Symbol) *IncomeManageCreate {
	return imc.SetSymbolID(s.ID)
}

// Mutation returns the IncomeManageMutation object of the builder.
func (imc *IncomeManageCreate) Mutation() *IncomeManageMutation {
	return imc.mutation
}

// Save creates the IncomeManage in the database.
func (imc *IncomeManageCreate) Save(ctx context.Context) (*IncomeManage, error) {
	imc.defaults()
	return withHooks(ctx, imc.sqlSave, imc.mutation, imc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (imc *IncomeManageCreate) SaveX(ctx context.Context) *IncomeManage {
	v, err := imc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (imc *IncomeManageCreate) Exec(ctx context.Context) error {
	_, err := imc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (imc *IncomeManageCreate) ExecX(ctx context.Context) {
	if err := imc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (imc *IncomeManageCreate) defaults() {
	if _, ok := imc.mutation.CreatedBy(); !ok {
		v := incomemanage.DefaultCreatedBy
		imc.mutation.SetCreatedBy(v)
	}
	if _, ok := imc.mutation.UpdatedBy(); !ok {
		v := incomemanage.DefaultUpdatedBy
		imc.mutation.SetUpdatedBy(v)
	}
	if _, ok := imc.mutation.CreatedAt(); !ok {
		v := incomemanage.DefaultCreatedAt()
		imc.mutation.SetCreatedAt(v)
	}
	if _, ok := imc.mutation.UpdatedAt(); !ok {
		v := incomemanage.DefaultUpdatedAt()
		imc.mutation.SetUpdatedAt(v)
	}
	if _, ok := imc.mutation.DeletedAt(); !ok {
		v := incomemanage.DefaultDeletedAt
		imc.mutation.SetDeletedAt(v)
	}
	if _, ok := imc.mutation.UserID(); !ok {
		v := incomemanage.DefaultUserID
		imc.mutation.SetUserID(v)
	}
	if _, ok := imc.mutation.Phone(); !ok {
		v := incomemanage.DefaultPhone
		imc.mutation.SetPhone(v)
	}
	if _, ok := imc.mutation.GetType(); !ok {
		v := incomemanage.DefaultType
		imc.mutation.SetType(v)
	}
	if _, ok := imc.mutation.Amount(); !ok {
		v := incomemanage.DefaultAmount
		imc.mutation.SetAmount(v)
	}
	if _, ok := imc.mutation.Reason(); !ok {
		v := incomemanage.DefaultReason
		imc.mutation.SetReason(v)
	}
	if _, ok := imc.mutation.CurrentBalance(); !ok {
		v := incomemanage.DefaultCurrentBalance
		imc.mutation.SetCurrentBalance(v)
	}
	if _, ok := imc.mutation.LastEditedAt(); !ok {
		v := incomemanage.DefaultLastEditedAt
		imc.mutation.SetLastEditedAt(v)
	}
	if _, ok := imc.mutation.RejectReason(); !ok {
		v := incomemanage.DefaultRejectReason
		imc.mutation.SetRejectReason(v)
	}
	if _, ok := imc.mutation.Status(); !ok {
		v := incomemanage.DefaultStatus
		imc.mutation.SetStatus(v)
	}
	if _, ok := imc.mutation.ApproveUserID(); !ok {
		v := incomemanage.DefaultApproveUserID
		imc.mutation.SetApproveUserID(v)
	}
	if _, ok := imc.mutation.SymbolID(); !ok {
		v := incomemanage.DefaultSymbolID
		imc.mutation.SetSymbolID(v)
	}
	if _, ok := imc.mutation.ID(); !ok {
		v := incomemanage.DefaultID()
		imc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (imc *IncomeManageCreate) check() error {
	if _, ok := imc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cep_ent: missing required field "IncomeManage.created_by"`)}
	}
	if _, ok := imc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cep_ent: missing required field "IncomeManage.updated_by"`)}
	}
	if _, ok := imc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cep_ent: missing required field "IncomeManage.created_at"`)}
	}
	if _, ok := imc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cep_ent: missing required field "IncomeManage.updated_at"`)}
	}
	if _, ok := imc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`cep_ent: missing required field "IncomeManage.deleted_at"`)}
	}
	if _, ok := imc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`cep_ent: missing required field "IncomeManage.user_id"`)}
	}
	if _, ok := imc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`cep_ent: missing required field "IncomeManage.phone"`)}
	}
	if _, ok := imc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`cep_ent: missing required field "IncomeManage.type"`)}
	}
	if v, ok := imc.mutation.GetType(); ok {
		if err := incomemanage.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`cep_ent: validator failed for field "IncomeManage.type": %w`, err)}
		}
	}
	if _, ok := imc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`cep_ent: missing required field "IncomeManage.amount"`)}
	}
	if _, ok := imc.mutation.Reason(); !ok {
		return &ValidationError{Name: "reason", err: errors.New(`cep_ent: missing required field "IncomeManage.reason"`)}
	}
	if _, ok := imc.mutation.CurrentBalance(); !ok {
		return &ValidationError{Name: "current_balance", err: errors.New(`cep_ent: missing required field "IncomeManage.current_balance"`)}
	}
	if _, ok := imc.mutation.LastEditedAt(); !ok {
		return &ValidationError{Name: "last_edited_at", err: errors.New(`cep_ent: missing required field "IncomeManage.last_edited_at"`)}
	}
	if _, ok := imc.mutation.RejectReason(); !ok {
		return &ValidationError{Name: "reject_reason", err: errors.New(`cep_ent: missing required field "IncomeManage.reject_reason"`)}
	}
	if _, ok := imc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`cep_ent: missing required field "IncomeManage.status"`)}
	}
	if v, ok := imc.mutation.Status(); ok {
		if err := incomemanage.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`cep_ent: validator failed for field "IncomeManage.status": %w`, err)}
		}
	}
	if _, ok := imc.mutation.ApproveUserID(); !ok {
		return &ValidationError{Name: "approve_user_id", err: errors.New(`cep_ent: missing required field "IncomeManage.approve_user_id"`)}
	}
	if _, ok := imc.mutation.SymbolID(); !ok {
		return &ValidationError{Name: "symbol_id", err: errors.New(`cep_ent: missing required field "IncomeManage.symbol_id"`)}
	}
	if _, ok := imc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`cep_ent: missing required edge "IncomeManage.user"`)}
	}
	if _, ok := imc.mutation.ApproveUserID(); !ok {
		return &ValidationError{Name: "approve_user", err: errors.New(`cep_ent: missing required edge "IncomeManage.approve_user"`)}
	}
	if _, ok := imc.mutation.SymbolID(); !ok {
		return &ValidationError{Name: "symbol", err: errors.New(`cep_ent: missing required edge "IncomeManage.symbol"`)}
	}
	return nil
}

func (imc *IncomeManageCreate) sqlSave(ctx context.Context) (*IncomeManage, error) {
	if err := imc.check(); err != nil {
		return nil, err
	}
	_node, _spec := imc.createSpec()
	if err := sqlgraph.CreateNode(ctx, imc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	imc.mutation.id = &_node.ID
	imc.mutation.done = true
	return _node, nil
}

func (imc *IncomeManageCreate) createSpec() (*IncomeManage, *sqlgraph.CreateSpec) {
	var (
		_node = &IncomeManage{config: imc.config}
		_spec = sqlgraph.NewCreateSpec(incomemanage.Table, sqlgraph.NewFieldSpec(incomemanage.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = imc.conflict
	if id, ok := imc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := imc.mutation.CreatedBy(); ok {
		_spec.SetField(incomemanage.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := imc.mutation.UpdatedBy(); ok {
		_spec.SetField(incomemanage.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := imc.mutation.CreatedAt(); ok {
		_spec.SetField(incomemanage.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := imc.mutation.UpdatedAt(); ok {
		_spec.SetField(incomemanage.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := imc.mutation.DeletedAt(); ok {
		_spec.SetField(incomemanage.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := imc.mutation.Phone(); ok {
		_spec.SetField(incomemanage.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := imc.mutation.GetType(); ok {
		_spec.SetField(incomemanage.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := imc.mutation.Amount(); ok {
		_spec.SetField(incomemanage.FieldAmount, field.TypeInt64, value)
		_node.Amount = value
	}
	if value, ok := imc.mutation.Reason(); ok {
		_spec.SetField(incomemanage.FieldReason, field.TypeString, value)
		_node.Reason = value
	}
	if value, ok := imc.mutation.CurrentBalance(); ok {
		_spec.SetField(incomemanage.FieldCurrentBalance, field.TypeInt64, value)
		_node.CurrentBalance = value
	}
	if value, ok := imc.mutation.LastEditedAt(); ok {
		_spec.SetField(incomemanage.FieldLastEditedAt, field.TypeTime, value)
		_node.LastEditedAt = value
	}
	if value, ok := imc.mutation.RejectReason(); ok {
		_spec.SetField(incomemanage.FieldRejectReason, field.TypeString, value)
		_node.RejectReason = value
	}
	if value, ok := imc.mutation.Status(); ok {
		_spec.SetField(incomemanage.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := imc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incomemanage.UserTable,
			Columns: []string{incomemanage.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := imc.mutation.ApproveUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incomemanage.ApproveUserTable,
			Columns: []string{incomemanage.ApproveUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ApproveUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := imc.mutation.SymbolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incomemanage.SymbolTable,
			Columns: []string{incomemanage.SymbolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(symbol.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SymbolID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IncomeManage.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncomeManageUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (imc *IncomeManageCreate) OnConflict(opts ...sql.ConflictOption) *IncomeManageUpsertOne {
	imc.conflict = opts
	return &IncomeManageUpsertOne{
		create: imc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IncomeManage.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (imc *IncomeManageCreate) OnConflictColumns(columns ...string) *IncomeManageUpsertOne {
	imc.conflict = append(imc.conflict, sql.ConflictColumns(columns...))
	return &IncomeManageUpsertOne{
		create: imc,
	}
}

type (
	// IncomeManageUpsertOne is the builder for "upsert"-ing
	//  one IncomeManage node.
	IncomeManageUpsertOne struct {
		create *IncomeManageCreate
	}

	// IncomeManageUpsert is the "OnConflict" setter.
	IncomeManageUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *IncomeManageUpsert) SetCreatedBy(v int64) *IncomeManageUpsert {
	u.Set(incomemanage.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *IncomeManageUpsert) UpdateCreatedBy() *IncomeManageUpsert {
	u.SetExcluded(incomemanage.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *IncomeManageUpsert) AddCreatedBy(v int64) *IncomeManageUpsert {
	u.Add(incomemanage.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *IncomeManageUpsert) SetUpdatedBy(v int64) *IncomeManageUpsert {
	u.Set(incomemanage.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *IncomeManageUpsert) UpdateUpdatedBy() *IncomeManageUpsert {
	u.SetExcluded(incomemanage.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *IncomeManageUpsert) AddUpdatedBy(v int64) *IncomeManageUpsert {
	u.Add(incomemanage.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IncomeManageUpsert) SetUpdatedAt(v time.Time) *IncomeManageUpsert {
	u.Set(incomemanage.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IncomeManageUpsert) UpdateUpdatedAt() *IncomeManageUpsert {
	u.SetExcluded(incomemanage.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *IncomeManageUpsert) SetDeletedAt(v time.Time) *IncomeManageUpsert {
	u.Set(incomemanage.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *IncomeManageUpsert) UpdateDeletedAt() *IncomeManageUpsert {
	u.SetExcluded(incomemanage.FieldDeletedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *IncomeManageUpsert) SetUserID(v int64) *IncomeManageUpsert {
	u.Set(incomemanage.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *IncomeManageUpsert) UpdateUserID() *IncomeManageUpsert {
	u.SetExcluded(incomemanage.FieldUserID)
	return u
}

// SetPhone sets the "phone" field.
func (u *IncomeManageUpsert) SetPhone(v string) *IncomeManageUpsert {
	u.Set(incomemanage.FieldPhone, v)
	return u
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *IncomeManageUpsert) UpdatePhone() *IncomeManageUpsert {
	u.SetExcluded(incomemanage.FieldPhone)
	return u
}

// SetType sets the "type" field.
func (u *IncomeManageUpsert) SetType(v enums.IncomeManageType) *IncomeManageUpsert {
	u.Set(incomemanage.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *IncomeManageUpsert) UpdateType() *IncomeManageUpsert {
	u.SetExcluded(incomemanage.FieldType)
	return u
}

// SetAmount sets the "amount" field.
func (u *IncomeManageUpsert) SetAmount(v int64) *IncomeManageUpsert {
	u.Set(incomemanage.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *IncomeManageUpsert) UpdateAmount() *IncomeManageUpsert {
	u.SetExcluded(incomemanage.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *IncomeManageUpsert) AddAmount(v int64) *IncomeManageUpsert {
	u.Add(incomemanage.FieldAmount, v)
	return u
}

// SetReason sets the "reason" field.
func (u *IncomeManageUpsert) SetReason(v string) *IncomeManageUpsert {
	u.Set(incomemanage.FieldReason, v)
	return u
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *IncomeManageUpsert) UpdateReason() *IncomeManageUpsert {
	u.SetExcluded(incomemanage.FieldReason)
	return u
}

// SetCurrentBalance sets the "current_balance" field.
func (u *IncomeManageUpsert) SetCurrentBalance(v int64) *IncomeManageUpsert {
	u.Set(incomemanage.FieldCurrentBalance, v)
	return u
}

// UpdateCurrentBalance sets the "current_balance" field to the value that was provided on create.
func (u *IncomeManageUpsert) UpdateCurrentBalance() *IncomeManageUpsert {
	u.SetExcluded(incomemanage.FieldCurrentBalance)
	return u
}

// AddCurrentBalance adds v to the "current_balance" field.
func (u *IncomeManageUpsert) AddCurrentBalance(v int64) *IncomeManageUpsert {
	u.Add(incomemanage.FieldCurrentBalance, v)
	return u
}

// SetLastEditedAt sets the "last_edited_at" field.
func (u *IncomeManageUpsert) SetLastEditedAt(v time.Time) *IncomeManageUpsert {
	u.Set(incomemanage.FieldLastEditedAt, v)
	return u
}

// UpdateLastEditedAt sets the "last_edited_at" field to the value that was provided on create.
func (u *IncomeManageUpsert) UpdateLastEditedAt() *IncomeManageUpsert {
	u.SetExcluded(incomemanage.FieldLastEditedAt)
	return u
}

// SetRejectReason sets the "reject_reason" field.
func (u *IncomeManageUpsert) SetRejectReason(v string) *IncomeManageUpsert {
	u.Set(incomemanage.FieldRejectReason, v)
	return u
}

// UpdateRejectReason sets the "reject_reason" field to the value that was provided on create.
func (u *IncomeManageUpsert) UpdateRejectReason() *IncomeManageUpsert {
	u.SetExcluded(incomemanage.FieldRejectReason)
	return u
}

// SetStatus sets the "status" field.
func (u *IncomeManageUpsert) SetStatus(v enums.IncomeManageStatus) *IncomeManageUpsert {
	u.Set(incomemanage.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *IncomeManageUpsert) UpdateStatus() *IncomeManageUpsert {
	u.SetExcluded(incomemanage.FieldStatus)
	return u
}

// SetApproveUserID sets the "approve_user_id" field.
func (u *IncomeManageUpsert) SetApproveUserID(v int64) *IncomeManageUpsert {
	u.Set(incomemanage.FieldApproveUserID, v)
	return u
}

// UpdateApproveUserID sets the "approve_user_id" field to the value that was provided on create.
func (u *IncomeManageUpsert) UpdateApproveUserID() *IncomeManageUpsert {
	u.SetExcluded(incomemanage.FieldApproveUserID)
	return u
}

// SetSymbolID sets the "symbol_id" field.
func (u *IncomeManageUpsert) SetSymbolID(v int64) *IncomeManageUpsert {
	u.Set(incomemanage.FieldSymbolID, v)
	return u
}

// UpdateSymbolID sets the "symbol_id" field to the value that was provided on create.
func (u *IncomeManageUpsert) UpdateSymbolID() *IncomeManageUpsert {
	u.SetExcluded(incomemanage.FieldSymbolID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.IncomeManage.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(incomemanage.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IncomeManageUpsertOne) UpdateNewValues() *IncomeManageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(incomemanage.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(incomemanage.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IncomeManage.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IncomeManageUpsertOne) Ignore() *IncomeManageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncomeManageUpsertOne) DoNothing() *IncomeManageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncomeManageCreate.OnConflict
// documentation for more info.
func (u *IncomeManageUpsertOne) Update(set func(*IncomeManageUpsert)) *IncomeManageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncomeManageUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *IncomeManageUpsertOne) SetCreatedBy(v int64) *IncomeManageUpsertOne {
	return u.Update(func(s *IncomeManageUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *IncomeManageUpsertOne) AddCreatedBy(v int64) *IncomeManageUpsertOne {
	return u.Update(func(s *IncomeManageUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *IncomeManageUpsertOne) UpdateCreatedBy() *IncomeManageUpsertOne {
	return u.Update(func(s *IncomeManageUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *IncomeManageUpsertOne) SetUpdatedBy(v int64) *IncomeManageUpsertOne {
	return u.Update(func(s *IncomeManageUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *IncomeManageUpsertOne) AddUpdatedBy(v int64) *IncomeManageUpsertOne {
	return u.Update(func(s *IncomeManageUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *IncomeManageUpsertOne) UpdateUpdatedBy() *IncomeManageUpsertOne {
	return u.Update(func(s *IncomeManageUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IncomeManageUpsertOne) SetUpdatedAt(v time.Time) *IncomeManageUpsertOne {
	return u.Update(func(s *IncomeManageUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IncomeManageUpsertOne) UpdateUpdatedAt() *IncomeManageUpsertOne {
	return u.Update(func(s *IncomeManageUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *IncomeManageUpsertOne) SetDeletedAt(v time.Time) *IncomeManageUpsertOne {
	return u.Update(func(s *IncomeManageUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *IncomeManageUpsertOne) UpdateDeletedAt() *IncomeManageUpsertOne {
	return u.Update(func(s *IncomeManageUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *IncomeManageUpsertOne) SetUserID(v int64) *IncomeManageUpsertOne {
	return u.Update(func(s *IncomeManageUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *IncomeManageUpsertOne) UpdateUserID() *IncomeManageUpsertOne {
	return u.Update(func(s *IncomeManageUpsert) {
		s.UpdateUserID()
	})
}

// SetPhone sets the "phone" field.
func (u *IncomeManageUpsertOne) SetPhone(v string) *IncomeManageUpsertOne {
	return u.Update(func(s *IncomeManageUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *IncomeManageUpsertOne) UpdatePhone() *IncomeManageUpsertOne {
	return u.Update(func(s *IncomeManageUpsert) {
		s.UpdatePhone()
	})
}

// SetType sets the "type" field.
func (u *IncomeManageUpsertOne) SetType(v enums.IncomeManageType) *IncomeManageUpsertOne {
	return u.Update(func(s *IncomeManageUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *IncomeManageUpsertOne) UpdateType() *IncomeManageUpsertOne {
	return u.Update(func(s *IncomeManageUpsert) {
		s.UpdateType()
	})
}

// SetAmount sets the "amount" field.
func (u *IncomeManageUpsertOne) SetAmount(v int64) *IncomeManageUpsertOne {
	return u.Update(func(s *IncomeManageUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *IncomeManageUpsertOne) AddAmount(v int64) *IncomeManageUpsertOne {
	return u.Update(func(s *IncomeManageUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *IncomeManageUpsertOne) UpdateAmount() *IncomeManageUpsertOne {
	return u.Update(func(s *IncomeManageUpsert) {
		s.UpdateAmount()
	})
}

// SetReason sets the "reason" field.
func (u *IncomeManageUpsertOne) SetReason(v string) *IncomeManageUpsertOne {
	return u.Update(func(s *IncomeManageUpsert) {
		s.SetReason(v)
	})
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *IncomeManageUpsertOne) UpdateReason() *IncomeManageUpsertOne {
	return u.Update(func(s *IncomeManageUpsert) {
		s.UpdateReason()
	})
}

// SetCurrentBalance sets the "current_balance" field.
func (u *IncomeManageUpsertOne) SetCurrentBalance(v int64) *IncomeManageUpsertOne {
	return u.Update(func(s *IncomeManageUpsert) {
		s.SetCurrentBalance(v)
	})
}

// AddCurrentBalance adds v to the "current_balance" field.
func (u *IncomeManageUpsertOne) AddCurrentBalance(v int64) *IncomeManageUpsertOne {
	return u.Update(func(s *IncomeManageUpsert) {
		s.AddCurrentBalance(v)
	})
}

// UpdateCurrentBalance sets the "current_balance" field to the value that was provided on create.
func (u *IncomeManageUpsertOne) UpdateCurrentBalance() *IncomeManageUpsertOne {
	return u.Update(func(s *IncomeManageUpsert) {
		s.UpdateCurrentBalance()
	})
}

// SetLastEditedAt sets the "last_edited_at" field.
func (u *IncomeManageUpsertOne) SetLastEditedAt(v time.Time) *IncomeManageUpsertOne {
	return u.Update(func(s *IncomeManageUpsert) {
		s.SetLastEditedAt(v)
	})
}

// UpdateLastEditedAt sets the "last_edited_at" field to the value that was provided on create.
func (u *IncomeManageUpsertOne) UpdateLastEditedAt() *IncomeManageUpsertOne {
	return u.Update(func(s *IncomeManageUpsert) {
		s.UpdateLastEditedAt()
	})
}

// SetRejectReason sets the "reject_reason" field.
func (u *IncomeManageUpsertOne) SetRejectReason(v string) *IncomeManageUpsertOne {
	return u.Update(func(s *IncomeManageUpsert) {
		s.SetRejectReason(v)
	})
}

// UpdateRejectReason sets the "reject_reason" field to the value that was provided on create.
func (u *IncomeManageUpsertOne) UpdateRejectReason() *IncomeManageUpsertOne {
	return u.Update(func(s *IncomeManageUpsert) {
		s.UpdateRejectReason()
	})
}

// SetStatus sets the "status" field.
func (u *IncomeManageUpsertOne) SetStatus(v enums.IncomeManageStatus) *IncomeManageUpsertOne {
	return u.Update(func(s *IncomeManageUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *IncomeManageUpsertOne) UpdateStatus() *IncomeManageUpsertOne {
	return u.Update(func(s *IncomeManageUpsert) {
		s.UpdateStatus()
	})
}

// SetApproveUserID sets the "approve_user_id" field.
func (u *IncomeManageUpsertOne) SetApproveUserID(v int64) *IncomeManageUpsertOne {
	return u.Update(func(s *IncomeManageUpsert) {
		s.SetApproveUserID(v)
	})
}

// UpdateApproveUserID sets the "approve_user_id" field to the value that was provided on create.
func (u *IncomeManageUpsertOne) UpdateApproveUserID() *IncomeManageUpsertOne {
	return u.Update(func(s *IncomeManageUpsert) {
		s.UpdateApproveUserID()
	})
}

// SetSymbolID sets the "symbol_id" field.
func (u *IncomeManageUpsertOne) SetSymbolID(v int64) *IncomeManageUpsertOne {
	return u.Update(func(s *IncomeManageUpsert) {
		s.SetSymbolID(v)
	})
}

// UpdateSymbolID sets the "symbol_id" field to the value that was provided on create.
func (u *IncomeManageUpsertOne) UpdateSymbolID() *IncomeManageUpsertOne {
	return u.Update(func(s *IncomeManageUpsert) {
		s.UpdateSymbolID()
	})
}

// Exec executes the query.
func (u *IncomeManageUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for IncomeManageCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncomeManageUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IncomeManageUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IncomeManageUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IncomeManageCreateBulk is the builder for creating many IncomeManage entities in bulk.
type IncomeManageCreateBulk struct {
	config
	err      error
	builders []*IncomeManageCreate
	conflict []sql.ConflictOption
}

// Save creates the IncomeManage entities in the database.
func (imcb *IncomeManageCreateBulk) Save(ctx context.Context) ([]*IncomeManage, error) {
	if imcb.err != nil {
		return nil, imcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(imcb.builders))
	nodes := make([]*IncomeManage, len(imcb.builders))
	mutators := make([]Mutator, len(imcb.builders))
	for i := range imcb.builders {
		func(i int, root context.Context) {
			builder := imcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IncomeManageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, imcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = imcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, imcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, imcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (imcb *IncomeManageCreateBulk) SaveX(ctx context.Context) []*IncomeManage {
	v, err := imcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (imcb *IncomeManageCreateBulk) Exec(ctx context.Context) error {
	_, err := imcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (imcb *IncomeManageCreateBulk) ExecX(ctx context.Context) {
	if err := imcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IncomeManage.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncomeManageUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (imcb *IncomeManageCreateBulk) OnConflict(opts ...sql.ConflictOption) *IncomeManageUpsertBulk {
	imcb.conflict = opts
	return &IncomeManageUpsertBulk{
		create: imcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IncomeManage.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (imcb *IncomeManageCreateBulk) OnConflictColumns(columns ...string) *IncomeManageUpsertBulk {
	imcb.conflict = append(imcb.conflict, sql.ConflictColumns(columns...))
	return &IncomeManageUpsertBulk{
		create: imcb,
	}
}

// IncomeManageUpsertBulk is the builder for "upsert"-ing
// a bulk of IncomeManage nodes.
type IncomeManageUpsertBulk struct {
	create *IncomeManageCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IncomeManage.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(incomemanage.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IncomeManageUpsertBulk) UpdateNewValues() *IncomeManageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(incomemanage.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(incomemanage.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IncomeManage.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IncomeManageUpsertBulk) Ignore() *IncomeManageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncomeManageUpsertBulk) DoNothing() *IncomeManageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncomeManageCreateBulk.OnConflict
// documentation for more info.
func (u *IncomeManageUpsertBulk) Update(set func(*IncomeManageUpsert)) *IncomeManageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncomeManageUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *IncomeManageUpsertBulk) SetCreatedBy(v int64) *IncomeManageUpsertBulk {
	return u.Update(func(s *IncomeManageUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *IncomeManageUpsertBulk) AddCreatedBy(v int64) *IncomeManageUpsertBulk {
	return u.Update(func(s *IncomeManageUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *IncomeManageUpsertBulk) UpdateCreatedBy() *IncomeManageUpsertBulk {
	return u.Update(func(s *IncomeManageUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *IncomeManageUpsertBulk) SetUpdatedBy(v int64) *IncomeManageUpsertBulk {
	return u.Update(func(s *IncomeManageUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *IncomeManageUpsertBulk) AddUpdatedBy(v int64) *IncomeManageUpsertBulk {
	return u.Update(func(s *IncomeManageUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *IncomeManageUpsertBulk) UpdateUpdatedBy() *IncomeManageUpsertBulk {
	return u.Update(func(s *IncomeManageUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IncomeManageUpsertBulk) SetUpdatedAt(v time.Time) *IncomeManageUpsertBulk {
	return u.Update(func(s *IncomeManageUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IncomeManageUpsertBulk) UpdateUpdatedAt() *IncomeManageUpsertBulk {
	return u.Update(func(s *IncomeManageUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *IncomeManageUpsertBulk) SetDeletedAt(v time.Time) *IncomeManageUpsertBulk {
	return u.Update(func(s *IncomeManageUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *IncomeManageUpsertBulk) UpdateDeletedAt() *IncomeManageUpsertBulk {
	return u.Update(func(s *IncomeManageUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *IncomeManageUpsertBulk) SetUserID(v int64) *IncomeManageUpsertBulk {
	return u.Update(func(s *IncomeManageUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *IncomeManageUpsertBulk) UpdateUserID() *IncomeManageUpsertBulk {
	return u.Update(func(s *IncomeManageUpsert) {
		s.UpdateUserID()
	})
}

// SetPhone sets the "phone" field.
func (u *IncomeManageUpsertBulk) SetPhone(v string) *IncomeManageUpsertBulk {
	return u.Update(func(s *IncomeManageUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *IncomeManageUpsertBulk) UpdatePhone() *IncomeManageUpsertBulk {
	return u.Update(func(s *IncomeManageUpsert) {
		s.UpdatePhone()
	})
}

// SetType sets the "type" field.
func (u *IncomeManageUpsertBulk) SetType(v enums.IncomeManageType) *IncomeManageUpsertBulk {
	return u.Update(func(s *IncomeManageUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *IncomeManageUpsertBulk) UpdateType() *IncomeManageUpsertBulk {
	return u.Update(func(s *IncomeManageUpsert) {
		s.UpdateType()
	})
}

// SetAmount sets the "amount" field.
func (u *IncomeManageUpsertBulk) SetAmount(v int64) *IncomeManageUpsertBulk {
	return u.Update(func(s *IncomeManageUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *IncomeManageUpsertBulk) AddAmount(v int64) *IncomeManageUpsertBulk {
	return u.Update(func(s *IncomeManageUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *IncomeManageUpsertBulk) UpdateAmount() *IncomeManageUpsertBulk {
	return u.Update(func(s *IncomeManageUpsert) {
		s.UpdateAmount()
	})
}

// SetReason sets the "reason" field.
func (u *IncomeManageUpsertBulk) SetReason(v string) *IncomeManageUpsertBulk {
	return u.Update(func(s *IncomeManageUpsert) {
		s.SetReason(v)
	})
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *IncomeManageUpsertBulk) UpdateReason() *IncomeManageUpsertBulk {
	return u.Update(func(s *IncomeManageUpsert) {
		s.UpdateReason()
	})
}

// SetCurrentBalance sets the "current_balance" field.
func (u *IncomeManageUpsertBulk) SetCurrentBalance(v int64) *IncomeManageUpsertBulk {
	return u.Update(func(s *IncomeManageUpsert) {
		s.SetCurrentBalance(v)
	})
}

// AddCurrentBalance adds v to the "current_balance" field.
func (u *IncomeManageUpsertBulk) AddCurrentBalance(v int64) *IncomeManageUpsertBulk {
	return u.Update(func(s *IncomeManageUpsert) {
		s.AddCurrentBalance(v)
	})
}

// UpdateCurrentBalance sets the "current_balance" field to the value that was provided on create.
func (u *IncomeManageUpsertBulk) UpdateCurrentBalance() *IncomeManageUpsertBulk {
	return u.Update(func(s *IncomeManageUpsert) {
		s.UpdateCurrentBalance()
	})
}

// SetLastEditedAt sets the "last_edited_at" field.
func (u *IncomeManageUpsertBulk) SetLastEditedAt(v time.Time) *IncomeManageUpsertBulk {
	return u.Update(func(s *IncomeManageUpsert) {
		s.SetLastEditedAt(v)
	})
}

// UpdateLastEditedAt sets the "last_edited_at" field to the value that was provided on create.
func (u *IncomeManageUpsertBulk) UpdateLastEditedAt() *IncomeManageUpsertBulk {
	return u.Update(func(s *IncomeManageUpsert) {
		s.UpdateLastEditedAt()
	})
}

// SetRejectReason sets the "reject_reason" field.
func (u *IncomeManageUpsertBulk) SetRejectReason(v string) *IncomeManageUpsertBulk {
	return u.Update(func(s *IncomeManageUpsert) {
		s.SetRejectReason(v)
	})
}

// UpdateRejectReason sets the "reject_reason" field to the value that was provided on create.
func (u *IncomeManageUpsertBulk) UpdateRejectReason() *IncomeManageUpsertBulk {
	return u.Update(func(s *IncomeManageUpsert) {
		s.UpdateRejectReason()
	})
}

// SetStatus sets the "status" field.
func (u *IncomeManageUpsertBulk) SetStatus(v enums.IncomeManageStatus) *IncomeManageUpsertBulk {
	return u.Update(func(s *IncomeManageUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *IncomeManageUpsertBulk) UpdateStatus() *IncomeManageUpsertBulk {
	return u.Update(func(s *IncomeManageUpsert) {
		s.UpdateStatus()
	})
}

// SetApproveUserID sets the "approve_user_id" field.
func (u *IncomeManageUpsertBulk) SetApproveUserID(v int64) *IncomeManageUpsertBulk {
	return u.Update(func(s *IncomeManageUpsert) {
		s.SetApproveUserID(v)
	})
}

// UpdateApproveUserID sets the "approve_user_id" field to the value that was provided on create.
func (u *IncomeManageUpsertBulk) UpdateApproveUserID() *IncomeManageUpsertBulk {
	return u.Update(func(s *IncomeManageUpsert) {
		s.UpdateApproveUserID()
	})
}

// SetSymbolID sets the "symbol_id" field.
func (u *IncomeManageUpsertBulk) SetSymbolID(v int64) *IncomeManageUpsertBulk {
	return u.Update(func(s *IncomeManageUpsert) {
		s.SetSymbolID(v)
	})
}

// UpdateSymbolID sets the "symbol_id" field to the value that was provided on create.
func (u *IncomeManageUpsertBulk) UpdateSymbolID() *IncomeManageUpsertBulk {
	return u.Update(func(s *IncomeManageUpsert) {
		s.UpdateSymbolID()
	})
}

// Exec executes the query.
func (u *IncomeManageUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("cep_ent: OnConflict was set for builder %d. Set it on the IncomeManageCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("cep_ent: missing options for IncomeManageCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncomeManageUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
