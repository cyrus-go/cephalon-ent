// Code generated by ent, DO NOT EDIT.

package cep_ent

import (
	"cephalon-ent/pkg/cep_ent/bill"
	"cephalon-ent/pkg/cep_ent/platformwallet"
	"cephalon-ent/pkg/cep_ent/predicate"
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlatformWalletQuery is the builder for querying PlatformWallet entities.
type PlatformWalletQuery struct {
	config
	ctx        *QueryContext
	order      []platformwallet.OrderOption
	inters     []Interceptor
	predicates []predicate.PlatformWallet
	withBills  *BillQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PlatformWalletQuery builder.
func (pwq *PlatformWalletQuery) Where(ps ...predicate.PlatformWallet) *PlatformWalletQuery {
	pwq.predicates = append(pwq.predicates, ps...)
	return pwq
}

// Limit the number of records to be returned by this query.
func (pwq *PlatformWalletQuery) Limit(limit int) *PlatformWalletQuery {
	pwq.ctx.Limit = &limit
	return pwq
}

// Offset to start from.
func (pwq *PlatformWalletQuery) Offset(offset int) *PlatformWalletQuery {
	pwq.ctx.Offset = &offset
	return pwq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pwq *PlatformWalletQuery) Unique(unique bool) *PlatformWalletQuery {
	pwq.ctx.Unique = &unique
	return pwq
}

// Order specifies how the records should be ordered.
func (pwq *PlatformWalletQuery) Order(o ...platformwallet.OrderOption) *PlatformWalletQuery {
	pwq.order = append(pwq.order, o...)
	return pwq
}

// QueryBills chains the current query on the "bills" edge.
func (pwq *PlatformWalletQuery) QueryBills() *BillQuery {
	query := (&BillClient{config: pwq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pwq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pwq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(platformwallet.Table, platformwallet.FieldID, selector),
			sqlgraph.To(bill.Table, bill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, platformwallet.BillsTable, platformwallet.BillsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pwq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PlatformWallet entity from the query.
// Returns a *NotFoundError when no PlatformWallet was found.
func (pwq *PlatformWalletQuery) First(ctx context.Context) (*PlatformWallet, error) {
	nodes, err := pwq.Limit(1).All(setContextOp(ctx, pwq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{platformwallet.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pwq *PlatformWalletQuery) FirstX(ctx context.Context) *PlatformWallet {
	node, err := pwq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PlatformWallet ID from the query.
// Returns a *NotFoundError when no PlatformWallet ID was found.
func (pwq *PlatformWalletQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = pwq.Limit(1).IDs(setContextOp(ctx, pwq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{platformwallet.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pwq *PlatformWalletQuery) FirstIDX(ctx context.Context) int64 {
	id, err := pwq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PlatformWallet entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PlatformWallet entity is found.
// Returns a *NotFoundError when no PlatformWallet entities are found.
func (pwq *PlatformWalletQuery) Only(ctx context.Context) (*PlatformWallet, error) {
	nodes, err := pwq.Limit(2).All(setContextOp(ctx, pwq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{platformwallet.Label}
	default:
		return nil, &NotSingularError{platformwallet.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pwq *PlatformWalletQuery) OnlyX(ctx context.Context) *PlatformWallet {
	node, err := pwq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PlatformWallet ID in the query.
// Returns a *NotSingularError when more than one PlatformWallet ID is found.
// Returns a *NotFoundError when no entities are found.
func (pwq *PlatformWalletQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = pwq.Limit(2).IDs(setContextOp(ctx, pwq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{platformwallet.Label}
	default:
		err = &NotSingularError{platformwallet.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pwq *PlatformWalletQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := pwq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PlatformWallets.
func (pwq *PlatformWalletQuery) All(ctx context.Context) ([]*PlatformWallet, error) {
	ctx = setContextOp(ctx, pwq.ctx, "All")
	if err := pwq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PlatformWallet, *PlatformWalletQuery]()
	return withInterceptors[[]*PlatformWallet](ctx, pwq, qr, pwq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pwq *PlatformWalletQuery) AllX(ctx context.Context) []*PlatformWallet {
	nodes, err := pwq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PlatformWallet IDs.
func (pwq *PlatformWalletQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if pwq.ctx.Unique == nil && pwq.path != nil {
		pwq.Unique(true)
	}
	ctx = setContextOp(ctx, pwq.ctx, "IDs")
	if err = pwq.Select(platformwallet.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pwq *PlatformWalletQuery) IDsX(ctx context.Context) []int64 {
	ids, err := pwq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pwq *PlatformWalletQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pwq.ctx, "Count")
	if err := pwq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pwq, querierCount[*PlatformWalletQuery](), pwq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pwq *PlatformWalletQuery) CountX(ctx context.Context) int {
	count, err := pwq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pwq *PlatformWalletQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pwq.ctx, "Exist")
	switch _, err := pwq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("cep_ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pwq *PlatformWalletQuery) ExistX(ctx context.Context) bool {
	exist, err := pwq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PlatformWalletQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pwq *PlatformWalletQuery) Clone() *PlatformWalletQuery {
	if pwq == nil {
		return nil
	}
	return &PlatformWalletQuery{
		config:     pwq.config,
		ctx:        pwq.ctx.Clone(),
		order:      append([]platformwallet.OrderOption{}, pwq.order...),
		inters:     append([]Interceptor{}, pwq.inters...),
		predicates: append([]predicate.PlatformWallet{}, pwq.predicates...),
		withBills:  pwq.withBills.Clone(),
		// clone intermediate query.
		sql:  pwq.sql.Clone(),
		path: pwq.path,
	}
}

// WithBills tells the query-builder to eager-load the nodes that are connected to
// the "bills" edge. The optional arguments are used to configure the query builder of the edge.
func (pwq *PlatformWalletQuery) WithBills(opts ...func(*BillQuery)) *PlatformWalletQuery {
	query := (&BillClient{config: pwq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pwq.withBills = query
	return pwq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PlatformWallet.Query().
//		GroupBy(platformwallet.FieldCreatedBy).
//		Aggregate(cep_ent.Count()).
//		Scan(ctx, &v)
func (pwq *PlatformWalletQuery) GroupBy(field string, fields ...string) *PlatformWalletGroupBy {
	pwq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PlatformWalletGroupBy{build: pwq}
	grbuild.flds = &pwq.ctx.Fields
	grbuild.label = platformwallet.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by"`
//	}
//
//	client.PlatformWallet.Query().
//		Select(platformwallet.FieldCreatedBy).
//		Scan(ctx, &v)
func (pwq *PlatformWalletQuery) Select(fields ...string) *PlatformWalletSelect {
	pwq.ctx.Fields = append(pwq.ctx.Fields, fields...)
	sbuild := &PlatformWalletSelect{PlatformWalletQuery: pwq}
	sbuild.label = platformwallet.Label
	sbuild.flds, sbuild.scan = &pwq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PlatformWalletSelect configured with the given aggregations.
func (pwq *PlatformWalletQuery) Aggregate(fns ...AggregateFunc) *PlatformWalletSelect {
	return pwq.Select().Aggregate(fns...)
}

func (pwq *PlatformWalletQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pwq.inters {
		if inter == nil {
			return fmt.Errorf("cep_ent: uninitialized interceptor (forgotten import cep_ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pwq); err != nil {
				return err
			}
		}
	}
	for _, f := range pwq.ctx.Fields {
		if !platformwallet.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("cep_ent: invalid field %q for query", f)}
		}
	}
	if pwq.path != nil {
		prev, err := pwq.path(ctx)
		if err != nil {
			return err
		}
		pwq.sql = prev
	}
	return nil
}

func (pwq *PlatformWalletQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PlatformWallet, error) {
	var (
		nodes       = []*PlatformWallet{}
		_spec       = pwq.querySpec()
		loadedTypes = [1]bool{
			pwq.withBills != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PlatformWallet).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PlatformWallet{config: pwq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pwq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pwq.withBills; query != nil {
		if err := pwq.loadBills(ctx, query, nodes,
			func(n *PlatformWallet) { n.Edges.Bills = []*Bill{} },
			func(n *PlatformWallet, e *Bill) { n.Edges.Bills = append(n.Edges.Bills, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pwq *PlatformWalletQuery) loadBills(ctx context.Context, query *BillQuery, nodes []*PlatformWallet, init func(*PlatformWallet), assign func(*PlatformWallet, *Bill)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*PlatformWallet)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(bill.FieldPlatformWalletID)
	}
	query.Where(predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(platformwallet.BillsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.PlatformWalletID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "platform_wallet_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (pwq *PlatformWalletQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pwq.querySpec()
	_spec.Node.Columns = pwq.ctx.Fields
	if len(pwq.ctx.Fields) > 0 {
		_spec.Unique = pwq.ctx.Unique != nil && *pwq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pwq.driver, _spec)
}

func (pwq *PlatformWalletQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(platformwallet.Table, platformwallet.Columns, sqlgraph.NewFieldSpec(platformwallet.FieldID, field.TypeInt64))
	_spec.From = pwq.sql
	if unique := pwq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pwq.path != nil {
		_spec.Unique = true
	}
	if fields := pwq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, platformwallet.FieldID)
		for i := range fields {
			if fields[i] != platformwallet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pwq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pwq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pwq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pwq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pwq *PlatformWalletQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pwq.driver.Dialect())
	t1 := builder.Table(platformwallet.Table)
	columns := pwq.ctx.Fields
	if len(columns) == 0 {
		columns = platformwallet.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pwq.sql != nil {
		selector = pwq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pwq.ctx.Unique != nil && *pwq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range pwq.predicates {
		p(selector)
	}
	for _, p := range pwq.order {
		p(selector)
	}
	if offset := pwq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pwq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PlatformWalletGroupBy is the group-by builder for PlatformWallet entities.
type PlatformWalletGroupBy struct {
	selector
	build *PlatformWalletQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pwgb *PlatformWalletGroupBy) Aggregate(fns ...AggregateFunc) *PlatformWalletGroupBy {
	pwgb.fns = append(pwgb.fns, fns...)
	return pwgb
}

// Scan applies the selector query and scans the result into the given value.
func (pwgb *PlatformWalletGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pwgb.build.ctx, "GroupBy")
	if err := pwgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlatformWalletQuery, *PlatformWalletGroupBy](ctx, pwgb.build, pwgb, pwgb.build.inters, v)
}

func (pwgb *PlatformWalletGroupBy) sqlScan(ctx context.Context, root *PlatformWalletQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pwgb.fns))
	for _, fn := range pwgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pwgb.flds)+len(pwgb.fns))
		for _, f := range *pwgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pwgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pwgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PlatformWalletSelect is the builder for selecting fields of PlatformWallet entities.
type PlatformWalletSelect struct {
	*PlatformWalletQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pws *PlatformWalletSelect) Aggregate(fns ...AggregateFunc) *PlatformWalletSelect {
	pws.fns = append(pws.fns, fns...)
	return pws
}

// Scan applies the selector query and scans the result into the given value.
func (pws *PlatformWalletSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pws.ctx, "Select")
	if err := pws.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlatformWalletQuery, *PlatformWalletSelect](ctx, pws.PlatformWalletQuery, pws, pws.inters, v)
}

func (pws *PlatformWalletSelect) sqlScan(ctx context.Context, root *PlatformWalletQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pws.fns))
	for _, fn := range pws.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pws.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pws.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
